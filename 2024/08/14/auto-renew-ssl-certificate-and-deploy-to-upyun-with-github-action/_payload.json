[{"data":1,"prerenderedAt":631},["ShallowReactive",2],{"post-2024-08-14-auto-renew-ssl-certificate-and-deploy-to-upyun-with-github-action":3,"surround-2024-08-14-auto-renew-ssl-certificate-and-deploy-to-upyun-with-github-action":620,"randomIndex/2024/08/14/auto-renew-ssl-certificate-and-deploy-to-upyun-with-github-action/":543},{"id":4,"title":5,"body":6,"date":602,"description":108,"extension":603,"meta":604,"navigation":605,"path":606,"rawbody":607,"seo":608,"stem":609,"sticky":610,"tags":611,"__hash__":619},"posts/posts/auto-renew-ssl-certificate-and-deploy-to-upyun-with-github-action.md","自建图床小记三—— SSL 证书的自动更新与部署",{"type":7,"value":8,"toc":590},"minimark",[9,14,18,21,25,29,32,39,42,45,51,54,58,61,72,75,78,84,90,93,99,102,156,159,167,173,177,186,193,198,237,241,273,277,307,311,364,367,396,400,439,442,451,552,558,561,586],[10,11,13],"h2",{"id":12},"为什么要自动更新","为什么要自动更新？",[15,16,17],"p",{},"众所周知，为站点开启 https 访问需要获得对应 host 的 ssl 证书，而如果希望证书被访客的浏览器所信任，需要拿到由 Certificate Authority (CA) 签发的 ssl 证书。在前一阵子那波 BAT 等大厂提供的云服务停止发放免费的由 TrustAsia/DigiCert 签发的一年有效期免费 ssl 证书之后，市面上已经没有被广泛信任的 CA 签发的免费的一年有效期的 ssl 证书了，于是不得不用回由 Let's Encrypt/ZeroSSL 等 CA 签发三个月免费证书。",[15,19,20],{},"但话又说回来，三个月有效期确实不太够，一年有效期的证书就一年一更，手动申请部署也不麻烦；三个月有效期的证书手动就有点麻烦了——我一般会在证书到期的前 15 天进行更新，防止最后几天自己太忙了没时间管。",[10,22,24],{"id":23},"这套图床架构的自动更新有没有困难","这套图床架构的自动更新有没有困难？",[26,27,28],"h3",{"id":28},"境外",[15,30,31],{},"通过 Cloudflare SaaS 接入的域名通过验证后会自动获得由 Cloudflare 提供的由 Google Trust Services 签发的证书，不需要我们操心。",[15,33,34],{},[35,36],"img",{"alt":37,"src":38},"SSL Certificate provided by Cloudflare","https://static.031130.xyz/uploads/2024/08/14/831d714565906.webp",[26,40,41],{"id":41},"境内",[15,43,44],{},"咱选用的又拍云 CDN 提供了免费的 Let's Encrypt 证书及其自动续期服务，但需要我们把图床访问域名的 DNS CNAME 解析到他们家。",[15,46,47],{},[35,48],{"alt":49,"src":50},"SSL Certificate provided by upyun","https://static.031130.xyz/uploads/2024/08/14/b16f7752ef522.webp",[15,52,53],{},"这里有个问题，我们这套图床架构在境外的解析是解析到 Cloudflare 的，不可能通过 Let's Encrypt 的 acme challenge。如果使用 upyun 申请 ssl 证书，则意味着每次更新都要我们手动将境外的 dns 解析记录暂时解析到又拍云，待证书更新成功后再解析回 Cloudflare，非常麻烦。",[10,55,57],{"id":56},"使用-github-action-跑-acmesh-获取-ssl-证书","使用 Github Action 跑 acme.sh 获取 ssl 证书",[15,59,60],{},"本着「能使用长期免费稳定服务就使用长期免费稳定服务」的思想，决定使用 Github Action 申请 ssl 证书。",[15,62,63,64,71],{},"在 Github Action 跑 acme.sh 获取 ssl 证书意味着不能使用 http 文件检验的方式检验域名所有权，需要使用 dns 检验。截至本文写作时间，acme.sh 已经支持了 150+ 个主流的 DNS 解析商（Managed DNS providers）的 api，针对不支持 api 修改 dns 解析记录的，还可以使用 ",[65,66,70],"a",{"href":67,"rel":68},"https://github.com/acmesh-official/acme.sh/wiki/DNS-alias-mode",[69],"nofollow","DNS alias 模式","——即将需要申请 ssl 证书的域名先 cname 到一个工具人域名上，将工具人域名通过 NS 解析到 acme.sh 支持的 DNS 解析商，进而实现 CA 对域名所有权的验证。",[26,73,74],{"id":74},"先在本地跑起来",[15,76,77],{},"我采用的是 Cloudflare，直接在个人资料页创建一个具有编辑 DNS 权限的 API 令牌",[15,79,80],{},[35,81],{"alt":82,"src":83},"创建令牌","https://static.031130.xyz/uploads/2024/08/14/c0262d4aea708.webp",[15,85,86],{},[35,87],{"alt":88,"src":89},"获得令牌","https://static.031130.xyz/uploads/2024/08/14/f30bfc93970bc.webp",[15,91,92],{},"随后在自己的域名页面，找到区域 ID 和 账户 ID",[15,94,95],{},[35,96],{"alt":97,"src":98},"区域 ID 和 账户 ID","https://static.031130.xyz/uploads/2024/08/14/4c8d4a2019812.webp",[15,100,101],{},"在自己的本机安装 acme.sh,设置好 Cloudflare DNS 的几个变量",[103,104,109],"pre",{"className":105,"code":106,"language":107,"meta":108,"style":108},"language-bash shiki shiki-themes github-light github-dark","export CF_Token=\"\"\nexport CF_Account_ID=\"\"\nexport CF_Zone_ID=\"\"\n","bash","",[110,111,112,132,144],"code",{"__ignoreMap":108},[113,114,117,121,125,128],"span",{"class":115,"line":116},"line",1,[113,118,120],{"class":119},"szBVR","export",[113,122,124],{"class":123},"sVt8B"," CF_Token",[113,126,127],{"class":119},"=",[113,129,131],{"class":130},"sZZnC","\"\"\n",[113,133,135,137,140,142],{"class":115,"line":134},2,[113,136,120],{"class":119},[113,138,139],{"class":123}," CF_Account_ID",[113,141,127],{"class":119},[113,143,131],{"class":130},[113,145,147,149,152,154],{"class":115,"line":146},3,[113,148,120],{"class":119},[113,150,151],{"class":123}," CF_Zone_ID",[113,153,127],{"class":119},[113,155,131],{"class":130},[15,157,158],{},"随后可以尝试使用 acme.sh 签发 ssl 证书",[103,160,165],{"className":161,"code":163,"language":164},[162],"language-text","acme.sh --issue --dns dns_cf -d cdn.example.com\n","text",[110,166,163],{"__ignoreMap":108},[15,168,169],{},[35,170],{"alt":171,"src":172},"ssl 证书到手","https://static.031130.xyz/uploads/2024/08/14/c78bc5afa3641.webp",[26,174,176],{"id":175},"上-github-action","上 Github Action",[15,178,179,180,185],{},"原本是打算直接用 ",[65,181,184],{"href":182,"rel":183},"https://github.com/Menci/acme",[69],"Menci/acme"," 这个 Action的，可惜遇到了点问题。",[15,187,188,189,192],{},"在我本地，Cloudflare 相关的 Token 和 ID 并没有被写入到 account.conf，而是被写在 ",[110,190,191],{},"cdn.example.com_ecc/cdn.exampe.com.conf","，大概就没办法直接用这个 Action 了，不得不转去手搓。不过好在 Menci/acme 中还是能抄到不少的。",[194,195,197],"h4",{"id":196},"压缩本地的-ca-文件夹","压缩本地的 ca 文件夹",[103,199,201],{"className":105,"code":200,"language":107,"meta":108,"style":108},"cd $HOME/.acme.sh/ && tar cz ca | base64 -w0\n",[110,202,203],{"__ignoreMap":108},[113,204,205,209,212,215,218,222,225,228,231,234],{"class":115,"line":116},[113,206,208],{"class":207},"sj4cs","cd",[113,210,211],{"class":123}," $HOME",[113,213,214],{"class":130},"/.acme.sh/",[113,216,217],{"class":123}," && ",[113,219,221],{"class":220},"sScJk","tar",[113,223,224],{"class":130}," cz",[113,226,227],{"class":130}," ca",[113,229,230],{"class":119}," |",[113,232,233],{"class":220}," base64",[113,235,236],{"class":207}," -w0\n",[194,238,240],{"id":239},"安装-acmesh","安装 acme.sh",[103,242,246],{"className":243,"code":244,"language":245,"meta":108,"style":108},"language-yaml shiki shiki-themes github-light github-dark","- name: Install acme.sh\n  run: curl https://get.acme.sh | sh\n","yaml",[110,247,248,263],{"__ignoreMap":108},[113,249,250,253,257,260],{"class":115,"line":116},[113,251,252],{"class":123},"- ",[113,254,256],{"class":255},"s9eBZ","name",[113,258,259],{"class":123},": ",[113,261,262],{"class":130},"Install acme.sh\n",[113,264,265,268,270],{"class":115,"line":134},[113,266,267],{"class":255},"  run",[113,269,259],{"class":123},[113,271,272],{"class":130},"curl https://get.acme.sh | sh\n",[194,274,276],{"id":275},"解压-ca-文件夹","解压 ca 文件夹",[103,278,280],{"className":243,"code":279,"language":245,"meta":108,"style":108},"- name: Extract account files for acme.sh\n  run: |\n    echo \"${{ secrets.ACME_SH_ACCOUNT_TAR }}\" | base64 -d | tar -C ~/.acme.sh -xz\n",[110,281,282,293,302],{"__ignoreMap":108},[113,283,284,286,288,290],{"class":115,"line":116},[113,285,252],{"class":123},[113,287,256],{"class":255},[113,289,259],{"class":123},[113,291,292],{"class":130},"Extract account files for acme.sh\n",[113,294,295,297,299],{"class":115,"line":134},[113,296,267],{"class":255},[113,298,259],{"class":123},[113,300,301],{"class":119},"|\n",[113,303,304],{"class":115,"line":146},[113,305,306],{"class":130},"    echo \"${{ secrets.ACME_SH_ACCOUNT_TAR }}\" | base64 -d | tar -C ~/.acme.sh -xz\n",[194,308,310],{"id":309},"执行-acmesh-申请证书","执行 acme.sh 申请证书",[103,312,314],{"className":243,"code":313,"language":245,"meta":108,"style":108},"- name: Issue Certificate\n  run: |\n    export CF_Token=\"${{ secrets.CF_TOKEN }}\"\n    export CF_Zone_ID=\"${{ secrets.CF_ZONE_ID }}\"\n    export CF_Account_ID=\"${{ secrets.CF_ACCOUNT_ID }}\"\n    mkdir -p output\n    ~/.acme.sh/acme.sh --issue --dns dns_cf --force -d ${{ env.domain }} --fullchain-file output/fullchain.pem --key-file output/key.pem\n",[110,315,316,327,335,340,346,352,358],{"__ignoreMap":108},[113,317,318,320,322,324],{"class":115,"line":116},[113,319,252],{"class":123},[113,321,256],{"class":255},[113,323,259],{"class":123},[113,325,326],{"class":130},"Issue Certificate\n",[113,328,329,331,333],{"class":115,"line":134},[113,330,267],{"class":255},[113,332,259],{"class":123},[113,334,301],{"class":119},[113,336,337],{"class":115,"line":146},[113,338,339],{"class":130},"    export CF_Token=\"${{ secrets.CF_TOKEN }}\"\n",[113,341,343],{"class":115,"line":342},4,[113,344,345],{"class":130},"    export CF_Zone_ID=\"${{ secrets.CF_ZONE_ID }}\"\n",[113,347,349],{"class":115,"line":348},5,[113,350,351],{"class":130},"    export CF_Account_ID=\"${{ secrets.CF_ACCOUNT_ID }}\"\n",[113,353,355],{"class":115,"line":354},6,[113,356,357],{"class":130},"    mkdir -p output\n",[113,359,361],{"class":115,"line":360},7,[113,362,363],{"class":130},"    ~/.acme.sh/acme.sh --issue --dns dns_cf --force -d ${{ env.domain }} --fullchain-file output/fullchain.pem --key-file output/key.pem\n",[194,365,366],{"id":366},"压缩证书",[103,368,370],{"className":243,"code":369,"language":245,"meta":108,"style":108},"- name: zip Certificate\n  run: |\n    zip -j output/${{ env.domain }}_$(date +%Y%m%d).zip output/fullchain.pem output/key.pem\n",[110,371,372,383,391],{"__ignoreMap":108},[113,373,374,376,378,380],{"class":115,"line":116},[113,375,252],{"class":123},[113,377,256],{"class":255},[113,379,259],{"class":123},[113,381,382],{"class":130},"zip Certificate\n",[113,384,385,387,389],{"class":115,"line":134},[113,386,267],{"class":255},[113,388,259],{"class":123},[113,390,301],{"class":119},[113,392,393],{"class":115,"line":146},[113,394,395],{"class":130},"    zip -j output/${{ env.domain }}_$(date +%Y%m%d).zip output/fullchain.pem output/key.pem\n",[194,397,399],{"id":398},"通过-tg-bot-发送压缩包给自己","通过 tg bot 发送压缩包给自己",[103,401,403],{"className":243,"code":402,"language":245,"meta":108,"style":108},"- name: Push Certificate\n  run: |\n    TG_BOT_TOKEN=\"${{ secrets.TG_BOT_TOKEN }}\"\n    TG_CHAT_ID=\"${{ secrets.TG_CHAT_ID }}\"\n    curl -s -X POST https://api.telegram.org/bot${TG_BOT_TOKEN}/sendDocument -F chat_id=${TG_CHAT_ID} -F document=\"@output/${{ env.domain }}_$(date +%Y%m%d).zip\"\n",[110,404,405,416,424,429,434],{"__ignoreMap":108},[113,406,407,409,411,413],{"class":115,"line":116},[113,408,252],{"class":123},[113,410,256],{"class":255},[113,412,259],{"class":123},[113,414,415],{"class":130},"Push Certificate\n",[113,417,418,420,422],{"class":115,"line":134},[113,419,267],{"class":255},[113,421,259],{"class":123},[113,423,301],{"class":119},[113,425,426],{"class":115,"line":146},[113,427,428],{"class":130},"    TG_BOT_TOKEN=\"${{ secrets.TG_BOT_TOKEN }}\"\n",[113,430,431],{"class":115,"line":342},[113,432,433],{"class":130},"    TG_CHAT_ID=\"${{ secrets.TG_CHAT_ID }}\"\n",[113,435,436],{"class":115,"line":348},[113,437,438],{"class":130},"    curl -s -X POST https://api.telegram.org/bot${TG_BOT_TOKEN}/sendDocument -F chat_id=${TG_CHAT_ID} -F document=\"@output/${{ env.domain }}_$(date +%Y%m%d).zip\"\n",[194,440,441],{"id":441},"部署到又拍云",[15,443,444,445,450],{},"这里使用的是 ",[65,446,449],{"href":447,"rel":448},"https://github.com/Menci/deploy-certificate-to-upyun/",[69],"menci/deploy-certificate-to-upyun","。由于又拍云没有提供上传 ssl 证书的 api，因此只能通过模拟用户登陆的方式实现。",[103,452,454],{"className":243,"code":453,"language":245,"meta":108,"style":108},"- name: Deploy To Upyun\n  uses: Menci/deploy-certificate-to-upyun@beta-v2\n  with:\n    subaccount-username: ${{ secrets.UPYUN_SUBACCOUNT_USERNAME }}\n    subaccount-password: ${{ secrets.UPYUN_SUBACCOUNT_PASSWORD }}\n    fullchain-file: output/fullchain.pem\n    key-file: output/key.pem\n    domains: |\n      ${{ env.domain }}\n    delete-unused-certificates: true\n",[110,455,456,467,477,485,495,505,515,525,535,541],{"__ignoreMap":108},[113,457,458,460,462,464],{"class":115,"line":116},[113,459,252],{"class":123},[113,461,256],{"class":255},[113,463,259],{"class":123},[113,465,466],{"class":130},"Deploy To Upyun\n",[113,468,469,472,474],{"class":115,"line":134},[113,470,471],{"class":255},"  uses",[113,473,259],{"class":123},[113,475,476],{"class":130},"Menci/deploy-certificate-to-upyun@beta-v2\n",[113,478,479,482],{"class":115,"line":146},[113,480,481],{"class":255},"  with",[113,483,484],{"class":123},":\n",[113,486,487,490,492],{"class":115,"line":342},[113,488,489],{"class":255},"    subaccount-username",[113,491,259],{"class":123},[113,493,494],{"class":130},"${{ secrets.UPYUN_SUBACCOUNT_USERNAME }}\n",[113,496,497,500,502],{"class":115,"line":348},[113,498,499],{"class":255},"    subaccount-password",[113,501,259],{"class":123},[113,503,504],{"class":130},"${{ secrets.UPYUN_SUBACCOUNT_PASSWORD }}\n",[113,506,507,510,512],{"class":115,"line":354},[113,508,509],{"class":255},"    fullchain-file",[113,511,259],{"class":123},[113,513,514],{"class":130},"output/fullchain.pem\n",[113,516,517,520,522],{"class":115,"line":360},[113,518,519],{"class":255},"    key-file",[113,521,259],{"class":123},[113,523,524],{"class":130},"output/key.pem\n",[113,526,528,531,533],{"class":115,"line":527},8,[113,529,530],{"class":255},"    domains",[113,532,259],{"class":123},[113,534,301],{"class":119},[113,536,538],{"class":115,"line":537},9,[113,539,540],{"class":130},"      ${{ env.domain }}\n",[113,542,544,547,549],{"class":115,"line":543},10,[113,545,546],{"class":255},"    delete-unused-certificates",[113,548,259],{"class":123},[113,550,551],{"class":207},"true\n",[15,553,554],{},[35,555],{"alt":556,"src":557},"SSL 证书成功部署到又拍云","https://static.031130.xyz/uploads/2024/08/14/222a754d25c97.webp",[10,559,560],{"id":560},"参见",[562,563,564,572,579],"ul",{},[565,566,567],"li",{},[65,568,571],{"href":569,"rel":570},"https://blog.men.ci/ssl-with-github-actions/",[69],"使用 GitHub Actions 自动申请与部署 ACME SSL 证书",[565,573,574],{},[65,575,578],{"href":576,"rel":577},"https://shiping.date/82.html",[69],"（续）acme.sh脚本使用新cloudflare api令牌申请证书",[565,580,581],{},[65,582,585],{"href":583,"rel":584},"https://github.com/acmesh-official/acme.sh",[69],"acmesh-official/acme.sh",[587,588,589],"style",{},"html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}",{"title":108,"searchDepth":134,"depth":134,"links":591},[592,593,597,601],{"id":12,"depth":134,"text":13},{"id":23,"depth":134,"text":24,"children":594},[595,596],{"id":28,"depth":146,"text":28},{"id":41,"depth":146,"text":41},{"id":56,"depth":134,"text":57,"children":598},[599,600],{"id":74,"depth":146,"text":74},{"id":175,"depth":146,"text":176},{"id":560,"depth":134,"text":560},"2024-08-14 10:35:18","md",{},true,"/2024/08/14/auto-renew-ssl-certificate-and-deploy-to-upyun-with-github-action","---\ntitle: 自建图床小记三—— SSL 证书的自动更新与部署\ndate: 2024-08-14 10:35:18\nsticky:\ntags:\n- Bot\n- CDN\n- Github Action\n- Network\n- Linux\n- SSL\n- 图床\n---\n\n## 为什么要自动更新？\n\n众所周知，为站点开启 https 访问需要获得对应 host 的 ssl 证书，而如果希望证书被访客的浏览器所信任，需要拿到由 Certificate Authority (CA) 签发的 ssl 证书。在前一阵子那波 BAT 等大厂提供的云服务停止发放免费的由 TrustAsia/DigiCert 签发的一年有效期免费 ssl 证书之后，市面上已经没有被广泛信任的 CA 签发的免费的一年有效期的 ssl 证书了，于是不得不用回由 Let's Encrypt/ZeroSSL 等 CA 签发三个月免费证书。\n\n但话又说回来，三个月有效期确实不太够，一年有效期的证书就一年一更，手动申请部署也不麻烦；三个月有效期的证书手动就有点麻烦了——我一般会在证书到期的前 15 天进行更新，防止最后几天自己太忙了没时间管。\n\n## 这套图床架构的自动更新有没有困难？\n\n### 境外\n\n通过 Cloudflare SaaS 接入的域名通过验证后会自动获得由 Cloudflare 提供的由 Google Trust Services 签发的证书，不需要我们操心。\n\n![SSL Certificate provided by Cloudflare](https://static.031130.xyz/uploads/2024/08/14/831d714565906.webp)\n\n### 境内\n\n咱选用的又拍云 CDN 提供了免费的 Let's Encrypt 证书及其自动续期服务，但需要我们把图床访问域名的 DNS CNAME 解析到他们家。\n\n![SSL Certificate provided by upyun](https://static.031130.xyz/uploads/2024/08/14/b16f7752ef522.webp)\n\n这里有个问题，我们这套图床架构在境外的解析是解析到 Cloudflare 的，不可能通过 Let's Encrypt 的 acme challenge。如果使用 upyun 申请 ssl 证书，则意味着每次更新都要我们手动将境外的 dns 解析记录暂时解析到又拍云，待证书更新成功后再解析回 Cloudflare，非常麻烦。\n\n## 使用 Github Action 跑 acme.sh 获取 ssl 证书\n\n本着「能使用长期免费稳定服务就使用长期免费稳定服务」的思想，决定使用 Github Action 申请 ssl 证书。\n\n在 Github Action 跑 acme.sh 获取 ssl 证书意味着不能使用 http 文件检验的方式检验域名所有权，需要使用 dns 检验。截至本文写作时间，acme.sh 已经支持了 150+ 个主流的 DNS 解析商（Managed DNS providers）的 api，针对不支持 api 修改 dns 解析记录的，还可以使用 [DNS alias 模式](https://github.com/acmesh-official/acme.sh/wiki/DNS-alias-mode)——即将需要申请 ssl 证书的域名先 cname 到一个工具人域名上，将工具人域名通过 NS 解析到 acme.sh 支持的 DNS 解析商，进而实现 CA 对域名所有权的验证。\n\n### 先在本地跑起来\n\n我采用的是 Cloudflare，直接在个人资料页创建一个具有编辑 DNS 权限的 API 令牌\n\n![创建令牌](https://static.031130.xyz/uploads/2024/08/14/c0262d4aea708.webp)\n\n![获得令牌](https://static.031130.xyz/uploads/2024/08/14/f30bfc93970bc.webp)\n\n随后在自己的域名页面，找到区域 ID 和 账户 ID\n\n![区域 ID 和 账户 ID](https://static.031130.xyz/uploads/2024/08/14/4c8d4a2019812.webp)\n\n在自己的本机安装 acme.sh,设置好 Cloudflare DNS 的几个变量\n\n```bash\nexport CF_Token=\"\"\nexport CF_Account_ID=\"\"\nexport CF_Zone_ID=\"\"\n```\n\n随后可以尝试使用 acme.sh 签发 ssl 证书\n\n```\nacme.sh --issue --dns dns_cf -d cdn.example.com\n```\n\n![ssl 证书到手](https://static.031130.xyz/uploads/2024/08/14/c78bc5afa3641.webp)\n\n### 上 Github Action\n\n原本是打算直接用 [Menci/acme](https://github.com/Menci/acme) 这个 Action的，可惜遇到了点问题。\n\n在我本地，Cloudflare 相关的 Token 和 ID 并没有被写入到 account.conf，而是被写在 `cdn.example.com_ecc/cdn.exampe.com.conf`，大概就没办法直接用这个 Action 了，不得不转去手搓。不过好在 Menci/acme 中还是能抄到不少的。\n\n#### 压缩本地的 ca 文件夹\n\n```bash\ncd $HOME/.acme.sh/ && tar cz ca | base64 -w0\n```\n\n#### 安装 acme.sh\n\n```yaml\n- name: Install acme.sh\n  run: curl https://get.acme.sh | sh\n```\n\n#### 解压 ca 文件夹\n\n```yaml\n- name: Extract account files for acme.sh\n  run: |\n    echo \"${{ secrets.ACME_SH_ACCOUNT_TAR }}\" | base64 -d | tar -C ~/.acme.sh -xz\n```\n\n#### 执行 acme.sh 申请证书\n\n```yaml\n- name: Issue Certificate\n  run: |\n    export CF_Token=\"${{ secrets.CF_TOKEN }}\"\n    export CF_Zone_ID=\"${{ secrets.CF_ZONE_ID }}\"\n    export CF_Account_ID=\"${{ secrets.CF_ACCOUNT_ID }}\"\n    mkdir -p output\n    ~/.acme.sh/acme.sh --issue --dns dns_cf --force -d ${{ env.domain }} --fullchain-file output/fullchain.pem --key-file output/key.pem\n```\n\n#### 压缩证书\n\n```yaml\n- name: zip Certificate\n  run: |\n    zip -j output/${{ env.domain }}_$(date +%Y%m%d).zip output/fullchain.pem output/key.pem\n```\n\n#### 通过 tg bot 发送压缩包给自己\n\n```yaml\n- name: Push Certificate\n  run: |\n    TG_BOT_TOKEN=\"${{ secrets.TG_BOT_TOKEN }}\"\n    TG_CHAT_ID=\"${{ secrets.TG_CHAT_ID }}\"\n    curl -s -X POST https://api.telegram.org/bot${TG_BOT_TOKEN}/sendDocument -F chat_id=${TG_CHAT_ID} -F document=\"@output/${{ env.domain }}_$(date +%Y%m%d).zip\"\n```\n\n#### 部署到又拍云\n\n这里使用的是 [menci/deploy-certificate-to-upyun](https://github.com/Menci/deploy-certificate-to-upyun/)。由于又拍云没有提供上传 ssl 证书的 api，因此只能通过模拟用户登陆的方式实现。\n\n```yaml\n- name: Deploy To Upyun\n  uses: Menci/deploy-certificate-to-upyun@beta-v2\n  with:\n    subaccount-username: ${{ secrets.UPYUN_SUBACCOUNT_USERNAME }}\n    subaccount-password: ${{ secrets.UPYUN_SUBACCOUNT_PASSWORD }}\n    fullchain-file: output/fullchain.pem\n    key-file: output/key.pem\n    domains: |\n      ${{ env.domain }}\n    delete-unused-certificates: true\n```\n\n![SSL 证书成功部署到又拍云](https://static.031130.xyz/uploads/2024/08/14/222a754d25c97.webp)\n\n## 参见\n\n- [使用 GitHub Actions 自动申请与部署 ACME SSL 证书](https://blog.men.ci/ssl-with-github-actions/)\n- [（续）acme.sh脚本使用新cloudflare api令牌申请证书](https://shiping.date/82.html)\n- [acmesh-official/acme.sh](https://github.com/acmesh-official/acme.sh)\n",{"title":5,"description":108},"posts/auto-renew-ssl-certificate-and-deploy-to-upyun-with-github-action",false,[612,613,614,615,616,617,618],"Bot","CDN","Github Action","Network","Linux","SSL","图床","axNaDqJm0qR1HSlF2hSeDyTib5Qie3_N0bMNU8xhEPA",[621,626],{"title":622,"path":623,"stem":624,"date":625,"children":-1},"自建图床小记四——上传脚本编写与图片迁移","/2024/08/20/picbed-upload-script-and-image-migration","posts/picbed-upload-script-and-image-migration","2024-08-20 23:12:30",{"title":627,"path":628,"stem":629,"date":630,"children":-1},"自建图床小记二——使用 Workers 为 R2 构建 Restful API","/2024/08/13/build-restful-api-for-cloudflare-r2-with-cloudflare-workers","posts/build-restful-api-for-cloudflare-r2-with-cloudflare-workers","2024-08-13 22:58:26",1761735719103]