[{"data":1,"prerenderedAt":634},["ShallowReactive",2],{"post-2024-08-14-auto-renew-ssl-certificate-and-deploy-to-upyun-with-github-action":3,"surround-2024-08-14-auto-renew-ssl-certificate-and-deploy-to-upyun-with-github-action":622,"randomIndex/2024/08/14/auto-renew-ssl-certificate-and-deploy-to-upyun-with-github-action/":633},{"id":4,"title":5,"body":6,"date":604,"description":108,"extension":605,"meta":606,"navigation":607,"path":608,"rawbody":609,"seo":610,"stem":611,"sticky":612,"tags":613,"__hash__":621},"posts/posts/auto-renew-ssl-certificate-and-deploy-to-upyun-with-github-action.md","自建图床小记三—— SSL 证书的自动更新与部署",{"type":7,"value":8,"toc":592},"minimark",[9,14,18,21,25,29,32,39,42,45,51,54,58,61,72,75,78,84,90,93,99,102,157,160,168,174,178,187,194,199,240,244,275,279,309,313,366,369,398,402,441,444,453,554,560,563,588],[10,11,13],"h2",{"id":12},"为什么要自动更新","为什么要自动更新？",[15,16,17],"p",{},"众所周知，为站点开启 https 访问需要获得对应 host 的 ssl 证书，而如果希望证书被访客的浏览器所信任，需要拿到由 Certificate Authority (CA) 签发的 ssl 证书。在前一阵子那波 BAT 等大厂提供的云服务停止发放免费的由 TrustAsia/DigiCert 签发的一年有效期免费 ssl 证书之后，市面上已经没有被广泛信任的 CA 签发的免费的一年有效期的 ssl 证书了，于是不得不用回由 Let's Encrypt/ZeroSSL 等 CA 签发三个月免费证书。",[15,19,20],{},"但话又说回来，三个月有效期确实不太够，一年有效期的证书就一年一更，手动申请部署也不麻烦；三个月有效期的证书手动就有点麻烦了——我一般会在证书到期的前 15 天进行更新，防止最后几天自己太忙了没时间管。",[10,22,24],{"id":23},"这套图床架构的自动更新有没有困难","这套图床架构的自动更新有没有困难？",[26,27,28],"h3",{"id":28},"境外",[15,30,31],{},"通过 Cloudflare SaaS 接入的域名通过验证后会自动获得由 Cloudflare 提供的由 Google Trust Services 签发的证书，不需要我们操心。",[15,33,34],{},[35,36],"img",{"alt":37,"src":38},"SSL Certificate provided by Cloudflare","https://static.031130.xyz/uploads/2024/08/14/831d714565906.webp",[26,40,41],{"id":41},"境内",[15,43,44],{},"咱选用的又拍云 CDN 提供了免费的 Let's Encrypt 证书及其自动续期服务，但需要我们把图床访问域名的 DNS CNAME 解析到他们家。",[15,46,47],{},[35,48],{"alt":49,"src":50},"SSL Certificate provided by upyun","https://static.031130.xyz/uploads/2024/08/14/b16f7752ef522.webp",[15,52,53],{},"这里有个问题，我们这套图床架构在境外的解析是解析到 Cloudflare 的，不可能通过 Let's Encrypt 的 acme challenge。如果使用 upyun 申请 ssl 证书，则意味着每次更新都要我们手动将境外的 dns 解析记录暂时解析到又拍云，待证书更新成功后再解析回 Cloudflare，非常麻烦。",[10,55,57],{"id":56},"使用-github-action-跑-acmesh-获取-ssl-证书","使用 Github Action 跑 acme.sh 获取 ssl 证书",[15,59,60],{},"本着「能使用长期免费稳定服务就使用长期免费稳定服务」的思想，决定使用 Github Action 申请 ssl 证书。",[15,62,63,64,71],{},"在 Github Action 跑 acme.sh 获取 ssl 证书意味着不能使用 http 文件检验的方式检验域名所有权，需要使用 dns 检验。截至本文写作时间，acme.sh 已经支持了 150+ 个主流的 DNS 解析商（Managed DNS providers）的 api，针对不支持 api 修改 dns 解析记录的，还可以使用 ",[65,66,70],"a",{"href":67,"rel":68},"https://github.com/acmesh-official/acme.sh/wiki/DNS-alias-mode",[69],"nofollow","DNS alias 模式","——即将需要申请 ssl 证书的域名先 cname 到一个工具人域名上，将工具人域名通过 NS 解析到 acme.sh 支持的 DNS 解析商，进而实现 CA 对域名所有权的验证。",[26,73,74],{"id":74},"先在本地跑起来",[15,76,77],{},"我采用的是 Cloudflare，直接在个人资料页创建一个具有编辑 DNS 权限的 API 令牌",[15,79,80],{},[35,81],{"alt":82,"src":83},"创建令牌","https://static.031130.xyz/uploads/2024/08/14/c0262d4aea708.webp",[15,85,86],{},[35,87],{"alt":88,"src":89},"获得令牌","https://static.031130.xyz/uploads/2024/08/14/f30bfc93970bc.webp",[15,91,92],{},"随后在自己的域名页面，找到区域 ID 和 账户 ID",[15,94,95],{},[35,96],{"alt":97,"src":98},"区域 ID 和 账户 ID","https://static.031130.xyz/uploads/2024/08/14/4c8d4a2019812.webp",[15,100,101],{},"在自己的本机安装 acme.sh,设置好 Cloudflare DNS 的几个变量",[103,104,109],"pre",{"className":105,"code":106,"language":107,"meta":108,"style":108},"language-bash shiki shiki-themes one-light one-dark-pro","export CF_Token=\"\"\nexport CF_Account_ID=\"\"\nexport CF_Zone_ID=\"\"\n","bash","",[110,111,112,133,145],"code",{"__ignoreMap":108},[113,114,117,121,125,129],"span",{"class":115,"line":116},"line",1,[113,118,120],{"class":119},"sLKXg","export",[113,122,124],{"class":123},"sJa8x"," CF_Token",[113,126,128],{"class":127},"sknuh","=",[113,130,132],{"class":131},"sDhpE","\"\"\n",[113,134,136,138,141,143],{"class":115,"line":135},2,[113,137,120],{"class":119},[113,139,140],{"class":123}," CF_Account_ID",[113,142,128],{"class":127},[113,144,132],{"class":131},[113,146,148,150,153,155],{"class":115,"line":147},3,[113,149,120],{"class":119},[113,151,152],{"class":123}," CF_Zone_ID",[113,154,128],{"class":127},[113,156,132],{"class":131},[15,158,159],{},"随后可以尝试使用 acme.sh 签发 ssl 证书",[103,161,166],{"className":162,"code":164,"language":165},[163],"language-text","acme.sh --issue --dns dns_cf -d cdn.example.com\n","text",[110,167,164],{"__ignoreMap":108},[15,169,170],{},[35,171],{"alt":172,"src":173},"ssl 证书到手","https://static.031130.xyz/uploads/2024/08/14/c78bc5afa3641.webp",[26,175,177],{"id":176},"上-github-action","上 Github Action",[15,179,180,181,186],{},"原本是打算直接用 ",[65,182,185],{"href":183,"rel":184},"https://github.com/Menci/acme",[69],"Menci/acme"," 这个 Action的，可惜遇到了点问题。",[15,188,189,190,193],{},"在我本地，Cloudflare 相关的 Token 和 ID 并没有被写入到 account.conf，而是被写在 ",[110,191,192],{},"cdn.example.com_ecc/cdn.exampe.com.conf","，大概就没办法直接用这个 Action 了，不得不转去手搓。不过好在 Menci/acme 中还是能抄到不少的。",[195,196,198],"h4",{"id":197},"压缩本地的-ca-文件夹","压缩本地的 ca 文件夹",[103,200,202],{"className":105,"code":201,"language":107,"meta":108,"style":108},"cd $HOME/.acme.sh/ && tar cz ca | base64 -w0\n",[110,203,204],{"__ignoreMap":108},[113,205,206,210,213,216,220,224,227,230,233,236],{"class":115,"line":116},[113,207,209],{"class":208},"s_Sar","cd",[113,211,212],{"class":123}," $HOME",[113,214,215],{"class":131},"/.acme.sh/",[113,217,219],{"class":218},"s5ixo"," && ",[113,221,223],{"class":222},"sAdtL","tar",[113,225,226],{"class":131}," cz",[113,228,229],{"class":131}," ca",[113,231,232],{"class":218}," | ",[113,234,235],{"class":222},"base64",[113,237,239],{"class":238},"sAGMh"," -w0\n",[195,241,243],{"id":242},"安装-acmesh","安装 acme.sh",[103,245,249],{"className":246,"code":247,"language":248,"meta":108,"style":108},"language-yaml shiki shiki-themes one-light one-dark-pro","- name: Install acme.sh\n  run: curl https://get.acme.sh | sh\n","yaml",[110,250,251,265],{"__ignoreMap":108},[113,252,253,256,259,262],{"class":115,"line":116},[113,254,255],{"class":218},"- ",[113,257,258],{"class":123},"name",[113,260,261],{"class":218},": ",[113,263,264],{"class":131},"Install acme.sh\n",[113,266,267,270,272],{"class":115,"line":135},[113,268,269],{"class":123},"  run",[113,271,261],{"class":218},[113,273,274],{"class":131},"curl https://get.acme.sh | sh\n",[195,276,278],{"id":277},"解压-ca-文件夹","解压 ca 文件夹",[103,280,282],{"className":246,"code":281,"language":248,"meta":108,"style":108},"- name: Extract account files for acme.sh\n  run: |\n    echo \"${{ secrets.ACME_SH_ACCOUNT_TAR }}\" | base64 -d | tar -C ~/.acme.sh -xz\n",[110,283,284,295,304],{"__ignoreMap":108},[113,285,286,288,290,292],{"class":115,"line":116},[113,287,255],{"class":218},[113,289,258],{"class":123},[113,291,261],{"class":218},[113,293,294],{"class":131},"Extract account files for acme.sh\n",[113,296,297,299,301],{"class":115,"line":135},[113,298,269],{"class":123},[113,300,261],{"class":218},[113,302,303],{"class":119},"|\n",[113,305,306],{"class":115,"line":147},[113,307,308],{"class":131},"    echo \"${{ secrets.ACME_SH_ACCOUNT_TAR }}\" | base64 -d | tar -C ~/.acme.sh -xz\n",[195,310,312],{"id":311},"执行-acmesh-申请证书","执行 acme.sh 申请证书",[103,314,316],{"className":246,"code":315,"language":248,"meta":108,"style":108},"- name: Issue Certificate\n  run: |\n    export CF_Token=\"${{ secrets.CF_TOKEN }}\"\n    export CF_Zone_ID=\"${{ secrets.CF_ZONE_ID }}\"\n    export CF_Account_ID=\"${{ secrets.CF_ACCOUNT_ID }}\"\n    mkdir -p output\n    ~/.acme.sh/acme.sh --issue --dns dns_cf --force -d ${{ env.domain }} --fullchain-file output/fullchain.pem --key-file output/key.pem\n",[110,317,318,329,337,342,348,354,360],{"__ignoreMap":108},[113,319,320,322,324,326],{"class":115,"line":116},[113,321,255],{"class":218},[113,323,258],{"class":123},[113,325,261],{"class":218},[113,327,328],{"class":131},"Issue Certificate\n",[113,330,331,333,335],{"class":115,"line":135},[113,332,269],{"class":123},[113,334,261],{"class":218},[113,336,303],{"class":119},[113,338,339],{"class":115,"line":147},[113,340,341],{"class":131},"    export CF_Token=\"${{ secrets.CF_TOKEN }}\"\n",[113,343,345],{"class":115,"line":344},4,[113,346,347],{"class":131},"    export CF_Zone_ID=\"${{ secrets.CF_ZONE_ID }}\"\n",[113,349,351],{"class":115,"line":350},5,[113,352,353],{"class":131},"    export CF_Account_ID=\"${{ secrets.CF_ACCOUNT_ID }}\"\n",[113,355,357],{"class":115,"line":356},6,[113,358,359],{"class":131},"    mkdir -p output\n",[113,361,363],{"class":115,"line":362},7,[113,364,365],{"class":131},"    ~/.acme.sh/acme.sh --issue --dns dns_cf --force -d ${{ env.domain }} --fullchain-file output/fullchain.pem --key-file output/key.pem\n",[195,367,368],{"id":368},"压缩证书",[103,370,372],{"className":246,"code":371,"language":248,"meta":108,"style":108},"- name: zip Certificate\n  run: |\n    zip -j output/${{ env.domain }}_$(date +%Y%m%d).zip output/fullchain.pem output/key.pem\n",[110,373,374,385,393],{"__ignoreMap":108},[113,375,376,378,380,382],{"class":115,"line":116},[113,377,255],{"class":218},[113,379,258],{"class":123},[113,381,261],{"class":218},[113,383,384],{"class":131},"zip Certificate\n",[113,386,387,389,391],{"class":115,"line":135},[113,388,269],{"class":123},[113,390,261],{"class":218},[113,392,303],{"class":119},[113,394,395],{"class":115,"line":147},[113,396,397],{"class":131},"    zip -j output/${{ env.domain }}_$(date +%Y%m%d).zip output/fullchain.pem output/key.pem\n",[195,399,401],{"id":400},"通过-tg-bot-发送压缩包给自己","通过 tg bot 发送压缩包给自己",[103,403,405],{"className":246,"code":404,"language":248,"meta":108,"style":108},"- name: Push Certificate\n  run: |\n    TG_BOT_TOKEN=\"${{ secrets.TG_BOT_TOKEN }}\"\n    TG_CHAT_ID=\"${{ secrets.TG_CHAT_ID }}\"\n    curl -s -X POST https://api.telegram.org/bot${TG_BOT_TOKEN}/sendDocument -F chat_id=${TG_CHAT_ID} -F document=\"@output/${{ env.domain }}_$(date +%Y%m%d).zip\"\n",[110,406,407,418,426,431,436],{"__ignoreMap":108},[113,408,409,411,413,415],{"class":115,"line":116},[113,410,255],{"class":218},[113,412,258],{"class":123},[113,414,261],{"class":218},[113,416,417],{"class":131},"Push Certificate\n",[113,419,420,422,424],{"class":115,"line":135},[113,421,269],{"class":123},[113,423,261],{"class":218},[113,425,303],{"class":119},[113,427,428],{"class":115,"line":147},[113,429,430],{"class":131},"    TG_BOT_TOKEN=\"${{ secrets.TG_BOT_TOKEN }}\"\n",[113,432,433],{"class":115,"line":344},[113,434,435],{"class":131},"    TG_CHAT_ID=\"${{ secrets.TG_CHAT_ID }}\"\n",[113,437,438],{"class":115,"line":350},[113,439,440],{"class":131},"    curl -s -X POST https://api.telegram.org/bot${TG_BOT_TOKEN}/sendDocument -F chat_id=${TG_CHAT_ID} -F document=\"@output/${{ env.domain }}_$(date +%Y%m%d).zip\"\n",[195,442,443],{"id":443},"部署到又拍云",[15,445,446,447,452],{},"这里使用的是 ",[65,448,451],{"href":449,"rel":450},"https://github.com/Menci/deploy-certificate-to-upyun/",[69],"menci/deploy-certificate-to-upyun","。由于又拍云没有提供上传 ssl 证书的 api，因此只能通过模拟用户登陆的方式实现。",[103,454,456],{"className":246,"code":455,"language":248,"meta":108,"style":108},"- name: Deploy To Upyun\n  uses: Menci/deploy-certificate-to-upyun@beta-v2\n  with:\n    subaccount-username: ${{ secrets.UPYUN_SUBACCOUNT_USERNAME }}\n    subaccount-password: ${{ secrets.UPYUN_SUBACCOUNT_PASSWORD }}\n    fullchain-file: output/fullchain.pem\n    key-file: output/key.pem\n    domains: |\n      ${{ env.domain }}\n    delete-unused-certificates: true\n",[110,457,458,469,479,487,497,507,517,527,537,543],{"__ignoreMap":108},[113,459,460,462,464,466],{"class":115,"line":116},[113,461,255],{"class":218},[113,463,258],{"class":123},[113,465,261],{"class":218},[113,467,468],{"class":131},"Deploy To Upyun\n",[113,470,471,474,476],{"class":115,"line":135},[113,472,473],{"class":123},"  uses",[113,475,261],{"class":218},[113,477,478],{"class":131},"Menci/deploy-certificate-to-upyun@beta-v2\n",[113,480,481,484],{"class":115,"line":147},[113,482,483],{"class":123},"  with",[113,485,486],{"class":218},":\n",[113,488,489,492,494],{"class":115,"line":344},[113,490,491],{"class":123},"    subaccount-username",[113,493,261],{"class":218},[113,495,496],{"class":131},"${{ secrets.UPYUN_SUBACCOUNT_USERNAME }}\n",[113,498,499,502,504],{"class":115,"line":350},[113,500,501],{"class":123},"    subaccount-password",[113,503,261],{"class":218},[113,505,506],{"class":131},"${{ secrets.UPYUN_SUBACCOUNT_PASSWORD }}\n",[113,508,509,512,514],{"class":115,"line":356},[113,510,511],{"class":123},"    fullchain-file",[113,513,261],{"class":218},[113,515,516],{"class":131},"output/fullchain.pem\n",[113,518,519,522,524],{"class":115,"line":362},[113,520,521],{"class":123},"    key-file",[113,523,261],{"class":218},[113,525,526],{"class":131},"output/key.pem\n",[113,528,530,533,535],{"class":115,"line":529},8,[113,531,532],{"class":123},"    domains",[113,534,261],{"class":218},[113,536,303],{"class":119},[113,538,540],{"class":115,"line":539},9,[113,541,542],{"class":131},"      ${{ env.domain }}\n",[113,544,546,549,551],{"class":115,"line":545},10,[113,547,548],{"class":123},"    delete-unused-certificates",[113,550,261],{"class":218},[113,552,553],{"class":238},"true\n",[15,555,556],{},[35,557],{"alt":558,"src":559},"SSL 证书成功部署到又拍云","https://static.031130.xyz/uploads/2024/08/14/222a754d25c97.webp",[10,561,562],{"id":562},"参见",[564,565,566,574,581],"ul",{},[567,568,569],"li",{},[65,570,573],{"href":571,"rel":572},"https://blog.men.ci/ssl-with-github-actions/",[69],"使用 GitHub Actions 自动申请与部署 ACME SSL 证书",[567,575,576],{},[65,577,580],{"href":578,"rel":579},"https://shiping.date/82.html",[69],"（续）acme.sh脚本使用新cloudflare api令牌申请证书",[567,582,583],{},[65,584,587],{"href":585,"rel":586},"https://github.com/acmesh-official/acme.sh",[69],"acmesh-official/acme.sh",[589,590,591],"style",{},"html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sknuh, html code.shiki .sknuh{--shiki-default:#383A42;--shiki-dark:#56B6C2}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}",{"title":108,"searchDepth":135,"depth":135,"links":593},[594,595,599,603],{"id":12,"depth":135,"text":13},{"id":23,"depth":135,"text":24,"children":596},[597,598],{"id":28,"depth":147,"text":28},{"id":41,"depth":147,"text":41},{"id":56,"depth":135,"text":57,"children":600},[601,602],{"id":74,"depth":147,"text":74},{"id":176,"depth":147,"text":177},{"id":562,"depth":135,"text":562},"2024-08-14 10:35:18","md",{},true,"/2024/08/14/auto-renew-ssl-certificate-and-deploy-to-upyun-with-github-action","---\ntitle: 自建图床小记三—— SSL 证书的自动更新与部署\ndate: 2024-08-14 10:35:18\nsticky:\ntags:\n- Bot\n- CDN\n- Github Action\n- Network\n- Linux\n- SSL\n- 图床\n---\n\n## 为什么要自动更新？\n\n众所周知，为站点开启 https 访问需要获得对应 host 的 ssl 证书，而如果希望证书被访客的浏览器所信任，需要拿到由 Certificate Authority (CA) 签发的 ssl 证书。在前一阵子那波 BAT 等大厂提供的云服务停止发放免费的由 TrustAsia/DigiCert 签发的一年有效期免费 ssl 证书之后，市面上已经没有被广泛信任的 CA 签发的免费的一年有效期的 ssl 证书了，于是不得不用回由 Let's Encrypt/ZeroSSL 等 CA 签发三个月免费证书。\n\n但话又说回来，三个月有效期确实不太够，一年有效期的证书就一年一更，手动申请部署也不麻烦；三个月有效期的证书手动就有点麻烦了——我一般会在证书到期的前 15 天进行更新，防止最后几天自己太忙了没时间管。\n\n## 这套图床架构的自动更新有没有困难？\n\n### 境外\n\n通过 Cloudflare SaaS 接入的域名通过验证后会自动获得由 Cloudflare 提供的由 Google Trust Services 签发的证书，不需要我们操心。\n\n![SSL Certificate provided by Cloudflare](https://static.031130.xyz/uploads/2024/08/14/831d714565906.webp)\n\n### 境内\n\n咱选用的又拍云 CDN 提供了免费的 Let's Encrypt 证书及其自动续期服务，但需要我们把图床访问域名的 DNS CNAME 解析到他们家。\n\n![SSL Certificate provided by upyun](https://static.031130.xyz/uploads/2024/08/14/b16f7752ef522.webp)\n\n这里有个问题，我们这套图床架构在境外的解析是解析到 Cloudflare 的，不可能通过 Let's Encrypt 的 acme challenge。如果使用 upyun 申请 ssl 证书，则意味着每次更新都要我们手动将境外的 dns 解析记录暂时解析到又拍云，待证书更新成功后再解析回 Cloudflare，非常麻烦。\n\n## 使用 Github Action 跑 acme.sh 获取 ssl 证书\n\n本着「能使用长期免费稳定服务就使用长期免费稳定服务」的思想，决定使用 Github Action 申请 ssl 证书。\n\n在 Github Action 跑 acme.sh 获取 ssl 证书意味着不能使用 http 文件检验的方式检验域名所有权，需要使用 dns 检验。截至本文写作时间，acme.sh 已经支持了 150+ 个主流的 DNS 解析商（Managed DNS providers）的 api，针对不支持 api 修改 dns 解析记录的，还可以使用 [DNS alias 模式](https://github.com/acmesh-official/acme.sh/wiki/DNS-alias-mode)——即将需要申请 ssl 证书的域名先 cname 到一个工具人域名上，将工具人域名通过 NS 解析到 acme.sh 支持的 DNS 解析商，进而实现 CA 对域名所有权的验证。\n\n### 先在本地跑起来\n\n我采用的是 Cloudflare，直接在个人资料页创建一个具有编辑 DNS 权限的 API 令牌\n\n![创建令牌](https://static.031130.xyz/uploads/2024/08/14/c0262d4aea708.webp)\n\n![获得令牌](https://static.031130.xyz/uploads/2024/08/14/f30bfc93970bc.webp)\n\n随后在自己的域名页面，找到区域 ID 和 账户 ID\n\n![区域 ID 和 账户 ID](https://static.031130.xyz/uploads/2024/08/14/4c8d4a2019812.webp)\n\n在自己的本机安装 acme.sh,设置好 Cloudflare DNS 的几个变量\n\n```bash\nexport CF_Token=\"\"\nexport CF_Account_ID=\"\"\nexport CF_Zone_ID=\"\"\n```\n\n随后可以尝试使用 acme.sh 签发 ssl 证书\n\n```\nacme.sh --issue --dns dns_cf -d cdn.example.com\n```\n\n![ssl 证书到手](https://static.031130.xyz/uploads/2024/08/14/c78bc5afa3641.webp)\n\n### 上 Github Action\n\n原本是打算直接用 [Menci/acme](https://github.com/Menci/acme) 这个 Action的，可惜遇到了点问题。\n\n在我本地，Cloudflare 相关的 Token 和 ID 并没有被写入到 account.conf，而是被写在 `cdn.example.com_ecc/cdn.exampe.com.conf`，大概就没办法直接用这个 Action 了，不得不转去手搓。不过好在 Menci/acme 中还是能抄到不少的。\n\n#### 压缩本地的 ca 文件夹\n\n```bash\ncd $HOME/.acme.sh/ && tar cz ca | base64 -w0\n```\n\n#### 安装 acme.sh\n\n```yaml\n- name: Install acme.sh\n  run: curl https://get.acme.sh | sh\n```\n\n#### 解压 ca 文件夹\n\n```yaml\n- name: Extract account files for acme.sh\n  run: |\n    echo \"${{ secrets.ACME_SH_ACCOUNT_TAR }}\" | base64 -d | tar -C ~/.acme.sh -xz\n```\n\n#### 执行 acme.sh 申请证书\n\n```yaml\n- name: Issue Certificate\n  run: |\n    export CF_Token=\"${{ secrets.CF_TOKEN }}\"\n    export CF_Zone_ID=\"${{ secrets.CF_ZONE_ID }}\"\n    export CF_Account_ID=\"${{ secrets.CF_ACCOUNT_ID }}\"\n    mkdir -p output\n    ~/.acme.sh/acme.sh --issue --dns dns_cf --force -d ${{ env.domain }} --fullchain-file output/fullchain.pem --key-file output/key.pem\n```\n\n#### 压缩证书\n\n```yaml\n- name: zip Certificate\n  run: |\n    zip -j output/${{ env.domain }}_$(date +%Y%m%d).zip output/fullchain.pem output/key.pem\n```\n\n#### 通过 tg bot 发送压缩包给自己\n\n```yaml\n- name: Push Certificate\n  run: |\n    TG_BOT_TOKEN=\"${{ secrets.TG_BOT_TOKEN }}\"\n    TG_CHAT_ID=\"${{ secrets.TG_CHAT_ID }}\"\n    curl -s -X POST https://api.telegram.org/bot${TG_BOT_TOKEN}/sendDocument -F chat_id=${TG_CHAT_ID} -F document=\"@output/${{ env.domain }}_$(date +%Y%m%d).zip\"\n```\n\n#### 部署到又拍云\n\n这里使用的是 [menci/deploy-certificate-to-upyun](https://github.com/Menci/deploy-certificate-to-upyun/)。由于又拍云没有提供上传 ssl 证书的 api，因此只能通过模拟用户登陆的方式实现。\n\n```yaml\n- name: Deploy To Upyun\n  uses: Menci/deploy-certificate-to-upyun@beta-v2\n  with:\n    subaccount-username: ${{ secrets.UPYUN_SUBACCOUNT_USERNAME }}\n    subaccount-password: ${{ secrets.UPYUN_SUBACCOUNT_PASSWORD }}\n    fullchain-file: output/fullchain.pem\n    key-file: output/key.pem\n    domains: |\n      ${{ env.domain }}\n    delete-unused-certificates: true\n```\n\n![SSL 证书成功部署到又拍云](https://static.031130.xyz/uploads/2024/08/14/222a754d25c97.webp)\n\n## 参见\n\n- [使用 GitHub Actions 自动申请与部署 ACME SSL 证书](https://blog.men.ci/ssl-with-github-actions/)\n- [（续）acme.sh脚本使用新cloudflare api令牌申请证书](https://shiping.date/82.html)\n- [acmesh-official/acme.sh](https://github.com/acmesh-official/acme.sh)\n",{"title":5,"description":108},"posts/auto-renew-ssl-certificate-and-deploy-to-upyun-with-github-action",false,[614,615,616,617,618,619,620],"Bot","CDN","Github Action","Network","Linux","SSL","图床","1wn47_naM4so4_vvgdsmupl0X2KTnWpVJt0IKIAxCHo",[623,628],{"title":624,"path":625,"stem":626,"date":627,"children":-1},"自建图床小记四——上传脚本编写与图片迁移","/2024/08/20/picbed-upload-script-and-image-migration","posts/picbed-upload-script-and-image-migration","2024-08-20 23:12:30",{"title":629,"path":630,"stem":631,"date":632,"children":-1},"自建图床小记二——使用 Workers 为 R2 构建 Restful API","/2024/08/13/build-restful-api-for-cloudflare-r2-with-cloudflare-workers","posts/build-restful-api-for-cloudflare-r2-with-cloudflare-workers","2024-08-13 22:58:26",11,1761835685118]