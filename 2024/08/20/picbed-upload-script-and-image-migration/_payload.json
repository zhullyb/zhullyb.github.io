[{"data":1,"prerenderedAt":1677},["ShallowReactive",2],{"post-2024-08-20-picbed-upload-script-and-image-migration":3,"surround-2024-08-20-picbed-upload-script-and-image-migration":1666,"randomIndex/2024/08/20/picbed-upload-script-and-image-migration/":157},{"id":4,"title":5,"body":6,"date":1650,"description":1651,"extension":1652,"meta":1653,"navigation":67,"path":1654,"rawbody":1655,"seo":1656,"stem":1657,"sticky":1658,"tags":1659,"__hash__":1665},"posts/posts/picbed-upload-script-and-image-migration.md","自建图床小记四——上传脚本编写与图片迁移",{"type":7,"value":8,"toc":1646},"minimark",[9,29,33,36,43,1117,1144,1182,1192,1195,1288,1309,1317,1320,1323,1326,1642],[10,11,12,13,18,19,23,24,28],"p",{},"前面三篇小记分别讲述了",[14,15,17],"a",{"href":16},"/2024/08/12/new-picbed-based-on-cloudflare-and-upyun/","图床的整体架构","、",[14,20,22],{"href":21},"/2024/08/13/build-restful-api-for-cloudflare-r2-with-cloudflare-workers/","用 Workers 构建 Restful API"," 和 ",[14,25,27],{"href":26},"/2024/08/14/auto-renew-ssl-certificate-and-deploy-to-upyun-with-github-action/","自动更新部署 SSL 证书","，这一篇c处理由此带来的图片上传问题，主要是要为 Typora 编写自动上传脚本，并为博客原有的图片进行迁移。",[30,31,32],"h2",{"id":32},"自动上传脚本",[10,34,35],{},"主要还是给 Typora 用，实现这种效果",[10,37,38],{},[39,40],"img",{"alt":41,"src":42},"Typora 自动上传","https://static.031130.xyz/uploads/2024/08/12/62f3b881e3c4c.gif",[44,45,50],"pre",{"className":46,"code":47,"language":48,"meta":49,"style":49},"language-bash shiki shiki-themes github-light github-dark","#!/bin/bash\n\nHOST=\"upload.example.com\"\nCDN_HOST=\"cdn.example.com\"\nUPLOAD_PATH=\"uploads/$(date +%Y/%m/%d)\"\n\nAUTH_TOKEN=\"1145141919810\"\n\nwebp=false\nmarkdown=false\nforce=false\nkeep=false\n\nwhile getopts \":mwfkp:\" opt; do\n    case $opt in\n        m|markdown) markdown=true ;;\n        w|webp) webp=true ;;\n        f|force) force=true ;;\n        k|keep) keep=true ;;\n        p|path) UPLOAD_PATH=$OPTARG ;;\n        \\?) echo \"Invalid option: -$OPTARG\" ;;\n    esac\ndone\nshift $((OPTIND - 1))\n\nUPLOAD_URL=\"https://$HOST/$UPLOAD_PATH\"\nif [[ \"$UPLOAD_URL\" == */ ]]; then\n    UPLOAD_URL=\"${UPLOAD_URL%?}\"\nfi\n\nfor image in \"$@\"; do\n    if [ \"$webp\" = true ]; then\n        cwebp -quiet \"$image\" -o \"${image%.*}.webp\"\n        image=\"${image%.*}.webp\"\n    fi\n\n    if [ \"$keep\" = true ]; then\n        FILENAME=$(basename \"$image\")\n    else\n        FILENAME=\"$(md5sum $image | cut -c 1-13).$(basename $image | cut -d. -f2)\"\n    fi\n\n    if [ \"$force\" = true ]; then\n        UPLOAD_RESPONSE=$(curl -s -X PUT \"${UPLOAD_URL}/$FILENAME\" \\\n            -w \"%{http_code}\" \\\n            --data-binary @\"$image\" \\\n            -H \"X-Custom-Auth-Key: $AUTH_TOKEN\" \\\n            -H \"Overwrite: true\" \\\n        )\n    else\n        UPLOAD_RESPONSE=$(curl -s -X PUT \"${UPLOAD_URL}/$FILENAME\" \\\n            -w \"%{http_code}\" \\\n            --data-binary @\"$image\" \\\n            -H \"X-Custom-Auth-Key: $AUTH_TOKEN\" \\\n        )\n    fi\n\n    UPLOAD_HTTP_CODE=$(echo \"$UPLOAD_RESPONSE\" | tail -n1)\n    \n    if [ -n \"$UPLOAD_PATH\" ]; then\n        CDN_URL=\"https://$CDN_HOST/$UPLOAD_PATH/$FILENAME\"\n    else\n        CDN_URL=\"https://$CDN_HOST/$FILENAME\"\n    fi\n\n    if [ \"$UPLOAD_HTTP_CODE\" != \"200\" ]; then\n        echo \"上传失败: $UPLOAD_RESPONSE\"\n        continue\n    fi\n\n    if [ \"$markdown\" = true ]; then\n        echo \"![](${CDN_URL})\"\n    else\n        echo \"${CDN_URL}\"\n    fi\ndone\n","bash","",[51,52,53,62,69,84,95,113,118,129,134,145,155,165,175,180,202,214,240,261,282,303,324,346,352,358,379,384,407,435,454,460,465,489,516,552,572,578,583,605,628,634,679,684,689,711,748,759,774,790,800,806,811,840,849,862,875,880,885,890,920,926,946,969,974,991,996,1001,1025,1038,1044,1049,1054,1076,1090,1095,1107,1112],"code",{"__ignoreMap":49},[54,55,58],"span",{"class":56,"line":57},"line",1,[54,59,61],{"class":60},"sJ8bj","#!/bin/bash\n",[54,63,65],{"class":56,"line":64},2,[54,66,68],{"emptyLinePlaceholder":67},true,"\n",[54,70,72,76,80],{"class":56,"line":71},3,[54,73,75],{"class":74},"sVt8B","HOST",[54,77,79],{"class":78},"szBVR","=",[54,81,83],{"class":82},"sZZnC","\"upload.example.com\"\n",[54,85,87,90,92],{"class":56,"line":86},4,[54,88,89],{"class":74},"CDN_HOST",[54,91,79],{"class":78},[54,93,94],{"class":82},"\"cdn.example.com\"\n",[54,96,98,101,103,106,110],{"class":56,"line":97},5,[54,99,100],{"class":74},"UPLOAD_PATH",[54,102,79],{"class":78},[54,104,105],{"class":82},"\"uploads/$(",[54,107,109],{"class":108},"sScJk","date",[54,111,112],{"class":82}," +%Y/%m/%d)\"\n",[54,114,116],{"class":56,"line":115},6,[54,117,68],{"emptyLinePlaceholder":67},[54,119,121,124,126],{"class":56,"line":120},7,[54,122,123],{"class":74},"AUTH_TOKEN",[54,125,79],{"class":78},[54,127,128],{"class":82},"\"1145141919810\"\n",[54,130,132],{"class":56,"line":131},8,[54,133,68],{"emptyLinePlaceholder":67},[54,135,137,140,142],{"class":56,"line":136},9,[54,138,139],{"class":74},"webp",[54,141,79],{"class":78},[54,143,144],{"class":82},"false\n",[54,146,148,151,153],{"class":56,"line":147},10,[54,149,150],{"class":74},"markdown",[54,152,79],{"class":78},[54,154,144],{"class":82},[54,156,158,161,163],{"class":56,"line":157},11,[54,159,160],{"class":74},"force",[54,162,79],{"class":78},[54,164,144],{"class":82},[54,166,168,171,173],{"class":56,"line":167},12,[54,169,170],{"class":74},"keep",[54,172,79],{"class":78},[54,174,144],{"class":82},[54,176,178],{"class":56,"line":177},13,[54,179,68],{"emptyLinePlaceholder":67},[54,181,183,186,190,193,196,199],{"class":56,"line":182},14,[54,184,185],{"class":78},"while",[54,187,189],{"class":188},"sj4cs"," getopts",[54,191,192],{"class":82}," \":mwfkp:\"",[54,194,195],{"class":82}," opt",[54,197,198],{"class":74},"; ",[54,200,201],{"class":78},"do\n",[54,203,205,208,211],{"class":56,"line":204},15,[54,206,207],{"class":78},"    case",[54,209,210],{"class":74}," $opt ",[54,212,213],{"class":78},"in\n",[54,215,217,221,224,226,229,232,234,237],{"class":56,"line":216},16,[54,218,220],{"class":219},"sA_wV","        m",[54,222,223],{"class":78},"|",[54,225,150],{"class":219},[54,227,228],{"class":78},")",[54,230,231],{"class":74}," markdown",[54,233,79],{"class":78},[54,235,236],{"class":82},"true",[54,238,239],{"class":74}," ;;\n",[54,241,243,246,248,250,252,255,257,259],{"class":56,"line":242},17,[54,244,245],{"class":219},"        w",[54,247,223],{"class":78},[54,249,139],{"class":219},[54,251,228],{"class":78},[54,253,254],{"class":74}," webp",[54,256,79],{"class":78},[54,258,236],{"class":82},[54,260,239],{"class":74},[54,262,264,267,269,271,273,276,278,280],{"class":56,"line":263},18,[54,265,266],{"class":219},"        f",[54,268,223],{"class":78},[54,270,160],{"class":219},[54,272,228],{"class":78},[54,274,275],{"class":74}," force",[54,277,79],{"class":78},[54,279,236],{"class":82},[54,281,239],{"class":74},[54,283,285,288,290,292,294,297,299,301],{"class":56,"line":284},19,[54,286,287],{"class":219},"        k",[54,289,223],{"class":78},[54,291,170],{"class":219},[54,293,228],{"class":78},[54,295,296],{"class":74}," keep",[54,298,79],{"class":78},[54,300,236],{"class":82},[54,302,239],{"class":74},[54,304,306,309,311,314,316,319,321],{"class":56,"line":305},20,[54,307,308],{"class":219},"        p",[54,310,223],{"class":78},[54,312,313],{"class":219},"path",[54,315,228],{"class":78},[54,317,318],{"class":74}," UPLOAD_PATH",[54,320,79],{"class":78},[54,322,323],{"class":74},"$OPTARG ;;\n",[54,325,327,330,332,335,338,341,344],{"class":56,"line":326},21,[54,328,329],{"class":188},"        \\?",[54,331,228],{"class":78},[54,333,334],{"class":188}," echo",[54,336,337],{"class":82}," \"Invalid option: -",[54,339,340],{"class":74},"$OPTARG",[54,342,343],{"class":82},"\"",[54,345,239],{"class":74},[54,347,349],{"class":56,"line":348},22,[54,350,351],{"class":78},"    esac\n",[54,353,355],{"class":56,"line":354},23,[54,356,357],{"class":78},"done\n",[54,359,361,364,367,370,373,376],{"class":56,"line":360},24,[54,362,363],{"class":188},"shift",[54,365,366],{"class":74}," $((",[54,368,369],{"class":108},"OPTIND",[54,371,372],{"class":82}," -",[54,374,375],{"class":188}," 1",[54,377,378],{"class":74},"))\n",[54,380,382],{"class":56,"line":381},25,[54,383,68],{"emptyLinePlaceholder":67},[54,385,387,390,392,395,398,401,404],{"class":56,"line":386},26,[54,388,389],{"class":74},"UPLOAD_URL",[54,391,79],{"class":78},[54,393,394],{"class":82},"\"https://",[54,396,397],{"class":74},"$HOST",[54,399,400],{"class":82},"/",[54,402,403],{"class":74},"$UPLOAD_PATH",[54,405,406],{"class":82},"\"\n",[54,408,410,413,416,418,421,423,426,429,432],{"class":56,"line":409},27,[54,411,412],{"class":78},"if",[54,414,415],{"class":74}," [[ ",[54,417,343],{"class":82},[54,419,420],{"class":74},"$UPLOAD_URL",[54,422,343],{"class":82},[54,424,425],{"class":78}," ==",[54,427,428],{"class":78}," *",[54,430,431],{"class":74},"/ ]]; ",[54,433,434],{"class":78},"then\n",[54,436,438,441,443,446,448,451],{"class":56,"line":437},28,[54,439,440],{"class":74},"    UPLOAD_URL",[54,442,79],{"class":78},[54,444,445],{"class":82},"\"${",[54,447,389],{"class":74},[54,449,450],{"class":78},"%",[54,452,453],{"class":82},"?}\"\n",[54,455,457],{"class":56,"line":456},29,[54,458,459],{"class":78},"fi\n",[54,461,463],{"class":56,"line":462},30,[54,464,68],{"emptyLinePlaceholder":67},[54,466,468,471,474,477,480,483,485,487],{"class":56,"line":467},31,[54,469,470],{"class":78},"for",[54,472,473],{"class":74}," image ",[54,475,476],{"class":78},"in",[54,478,479],{"class":82}," \"",[54,481,482],{"class":188},"$@",[54,484,343],{"class":82},[54,486,198],{"class":74},[54,488,201],{"class":78},[54,490,492,495,498,500,503,505,508,511,514],{"class":56,"line":491},32,[54,493,494],{"class":78},"    if",[54,496,497],{"class":74}," [ ",[54,499,343],{"class":82},[54,501,502],{"class":74},"$webp",[54,504,343],{"class":82},[54,506,507],{"class":78}," =",[54,509,510],{"class":188}," true",[54,512,513],{"class":74}," ]; ",[54,515,434],{"class":78},[54,517,519,522,525,527,530,532,535,538,541,543,546,549],{"class":56,"line":518},33,[54,520,521],{"class":108},"        cwebp",[54,523,524],{"class":188}," -quiet",[54,526,479],{"class":82},[54,528,529],{"class":74},"$image",[54,531,343],{"class":82},[54,533,534],{"class":188}," -o",[54,536,537],{"class":82}," \"${",[54,539,540],{"class":74},"image",[54,542,450],{"class":78},[54,544,545],{"class":82},".",[54,547,548],{"class":78},"*",[54,550,551],{"class":82},"}.webp\"\n",[54,553,555,558,560,562,564,566,568,570],{"class":56,"line":554},34,[54,556,557],{"class":74},"        image",[54,559,79],{"class":78},[54,561,445],{"class":82},[54,563,540],{"class":74},[54,565,450],{"class":78},[54,567,545],{"class":82},[54,569,548],{"class":78},[54,571,551],{"class":82},[54,573,575],{"class":56,"line":574},35,[54,576,577],{"class":78},"    fi\n",[54,579,581],{"class":56,"line":580},36,[54,582,68],{"emptyLinePlaceholder":67},[54,584,586,588,590,592,595,597,599,601,603],{"class":56,"line":585},37,[54,587,494],{"class":78},[54,589,497],{"class":74},[54,591,343],{"class":82},[54,593,594],{"class":74},"$keep",[54,596,343],{"class":82},[54,598,507],{"class":78},[54,600,510],{"class":188},[54,602,513],{"class":74},[54,604,434],{"class":78},[54,606,608,611,613,616,619,621,623,625],{"class":56,"line":607},38,[54,609,610],{"class":74},"        FILENAME",[54,612,79],{"class":78},[54,614,615],{"class":74},"$(",[54,617,618],{"class":108},"basename",[54,620,479],{"class":82},[54,622,529],{"class":74},[54,624,343],{"class":82},[54,626,627],{"class":74},")\n",[54,629,631],{"class":56,"line":630},39,[54,632,633],{"class":78},"    else\n",[54,635,637,639,641,644,647,650,653,656,659,662,664,666,668,670,673,676],{"class":56,"line":636},40,[54,638,610],{"class":74},[54,640,79],{"class":78},[54,642,643],{"class":82},"\"$(",[54,645,646],{"class":108},"md5sum",[54,648,649],{"class":74}," $image",[54,651,652],{"class":78}," |",[54,654,655],{"class":108}," cut",[54,657,658],{"class":188}," -c",[54,660,661],{"class":82}," 1-13).$(",[54,663,618],{"class":108},[54,665,649],{"class":74},[54,667,652],{"class":78},[54,669,655],{"class":108},[54,671,672],{"class":188}," -d.",[54,674,675],{"class":188}," -f2",[54,677,678],{"class":82},")\"\n",[54,680,682],{"class":56,"line":681},41,[54,683,577],{"class":78},[54,685,687],{"class":56,"line":686},42,[54,688,68],{"emptyLinePlaceholder":67},[54,690,692,694,696,698,701,703,705,707,709],{"class":56,"line":691},43,[54,693,494],{"class":78},[54,695,497],{"class":74},[54,697,343],{"class":82},[54,699,700],{"class":74},"$force",[54,702,343],{"class":82},[54,704,507],{"class":78},[54,706,510],{"class":188},[54,708,513],{"class":74},[54,710,434],{"class":78},[54,712,714,717,719,721,724,727,730,733,735,737,740,743,745],{"class":56,"line":713},44,[54,715,716],{"class":74},"        UPLOAD_RESPONSE",[54,718,79],{"class":78},[54,720,615],{"class":74},[54,722,723],{"class":108},"curl",[54,725,726],{"class":188}," -s",[54,728,729],{"class":188}," -X",[54,731,732],{"class":82}," PUT",[54,734,537],{"class":82},[54,736,389],{"class":74},[54,738,739],{"class":82},"}/",[54,741,742],{"class":74},"$FILENAME",[54,744,343],{"class":82},[54,746,747],{"class":188}," \\\n",[54,749,751,754,757],{"class":56,"line":750},45,[54,752,753],{"class":188},"            -w",[54,755,756],{"class":82}," \"%{http_code}\"",[54,758,747],{"class":188},[54,760,762,765,768,770,772],{"class":56,"line":761},46,[54,763,764],{"class":188},"            --data-binary",[54,766,767],{"class":82}," @\"",[54,769,529],{"class":74},[54,771,343],{"class":82},[54,773,747],{"class":188},[54,775,777,780,783,786,788],{"class":56,"line":776},47,[54,778,779],{"class":188},"            -H",[54,781,782],{"class":82}," \"X-Custom-Auth-Key: ",[54,784,785],{"class":74},"$AUTH_TOKEN",[54,787,343],{"class":82},[54,789,747],{"class":188},[54,791,793,795,798],{"class":56,"line":792},48,[54,794,779],{"class":188},[54,796,797],{"class":82}," \"Overwrite: true\"",[54,799,747],{"class":188},[54,801,803],{"class":56,"line":802},49,[54,804,805],{"class":74},"        )\n",[54,807,809],{"class":56,"line":808},50,[54,810,633],{"class":78},[54,812,814,816,818,820,822,824,826,828,830,832,834,836,838],{"class":56,"line":813},51,[54,815,716],{"class":74},[54,817,79],{"class":78},[54,819,615],{"class":74},[54,821,723],{"class":108},[54,823,726],{"class":188},[54,825,729],{"class":188},[54,827,732],{"class":82},[54,829,537],{"class":82},[54,831,389],{"class":74},[54,833,739],{"class":82},[54,835,742],{"class":74},[54,837,343],{"class":82},[54,839,747],{"class":188},[54,841,843,845,847],{"class":56,"line":842},52,[54,844,753],{"class":188},[54,846,756],{"class":82},[54,848,747],{"class":188},[54,850,852,854,856,858,860],{"class":56,"line":851},53,[54,853,764],{"class":188},[54,855,767],{"class":82},[54,857,529],{"class":74},[54,859,343],{"class":82},[54,861,747],{"class":188},[54,863,865,867,869,871,873],{"class":56,"line":864},54,[54,866,779],{"class":188},[54,868,782],{"class":82},[54,870,785],{"class":74},[54,872,343],{"class":82},[54,874,747],{"class":188},[54,876,878],{"class":56,"line":877},55,[54,879,805],{"class":74},[54,881,883],{"class":56,"line":882},56,[54,884,577],{"class":78},[54,886,888],{"class":56,"line":887},57,[54,889,68],{"emptyLinePlaceholder":67},[54,891,893,896,898,900,903,905,908,910,912,915,918],{"class":56,"line":892},58,[54,894,895],{"class":74},"    UPLOAD_HTTP_CODE",[54,897,79],{"class":78},[54,899,615],{"class":74},[54,901,902],{"class":188},"echo",[54,904,479],{"class":82},[54,906,907],{"class":74},"$UPLOAD_RESPONSE",[54,909,343],{"class":82},[54,911,652],{"class":78},[54,913,914],{"class":108}," tail",[54,916,917],{"class":188}," -n1",[54,919,627],{"class":74},[54,921,923],{"class":56,"line":922},59,[54,924,925],{"class":74},"    \n",[54,927,929,931,933,936,938,940,942,944],{"class":56,"line":928},60,[54,930,494],{"class":78},[54,932,497],{"class":74},[54,934,935],{"class":78},"-n",[54,937,479],{"class":82},[54,939,403],{"class":74},[54,941,343],{"class":82},[54,943,513],{"class":74},[54,945,434],{"class":78},[54,947,949,952,954,956,959,961,963,965,967],{"class":56,"line":948},61,[54,950,951],{"class":74},"        CDN_URL",[54,953,79],{"class":78},[54,955,394],{"class":82},[54,957,958],{"class":74},"$CDN_HOST",[54,960,400],{"class":82},[54,962,403],{"class":74},[54,964,400],{"class":82},[54,966,742],{"class":74},[54,968,406],{"class":82},[54,970,972],{"class":56,"line":971},62,[54,973,633],{"class":78},[54,975,977,979,981,983,985,987,989],{"class":56,"line":976},63,[54,978,951],{"class":74},[54,980,79],{"class":78},[54,982,394],{"class":82},[54,984,958],{"class":74},[54,986,400],{"class":82},[54,988,742],{"class":74},[54,990,406],{"class":82},[54,992,994],{"class":56,"line":993},64,[54,995,577],{"class":78},[54,997,999],{"class":56,"line":998},65,[54,1000,68],{"emptyLinePlaceholder":67},[54,1002,1004,1006,1008,1010,1013,1015,1018,1021,1023],{"class":56,"line":1003},66,[54,1005,494],{"class":78},[54,1007,497],{"class":74},[54,1009,343],{"class":82},[54,1011,1012],{"class":74},"$UPLOAD_HTTP_CODE",[54,1014,343],{"class":82},[54,1016,1017],{"class":78}," !=",[54,1019,1020],{"class":82}," \"200\"",[54,1022,513],{"class":74},[54,1024,434],{"class":78},[54,1026,1028,1031,1034,1036],{"class":56,"line":1027},67,[54,1029,1030],{"class":188},"        echo",[54,1032,1033],{"class":82}," \"上传失败: ",[54,1035,907],{"class":74},[54,1037,406],{"class":82},[54,1039,1041],{"class":56,"line":1040},68,[54,1042,1043],{"class":78},"        continue\n",[54,1045,1047],{"class":56,"line":1046},69,[54,1048,577],{"class":78},[54,1050,1052],{"class":56,"line":1051},70,[54,1053,68],{"emptyLinePlaceholder":67},[54,1055,1057,1059,1061,1063,1066,1068,1070,1072,1074],{"class":56,"line":1056},71,[54,1058,494],{"class":78},[54,1060,497],{"class":74},[54,1062,343],{"class":82},[54,1064,1065],{"class":74},"$markdown",[54,1067,343],{"class":82},[54,1069,507],{"class":78},[54,1071,510],{"class":188},[54,1073,513],{"class":74},[54,1075,434],{"class":78},[54,1077,1079,1081,1084,1087],{"class":56,"line":1078},72,[54,1080,1030],{"class":188},[54,1082,1083],{"class":82}," \"![](${",[54,1085,1086],{"class":74},"CDN_URL",[54,1088,1089],{"class":82},"})\"\n",[54,1091,1093],{"class":56,"line":1092},73,[54,1094,633],{"class":78},[54,1096,1098,1100,1102,1104],{"class":56,"line":1097},74,[54,1099,1030],{"class":188},[54,1101,537],{"class":82},[54,1103,1086],{"class":74},[54,1105,1106],{"class":82},"}\"\n",[54,1108,1110],{"class":56,"line":1109},75,[54,1111,577],{"class":78},[54,1113,1115],{"class":56,"line":1114},76,[54,1116,357],{"class":78},[10,1118,1119,1120,18,1123,23,1126,1129,1130,1132,1133,23,1135,1137,1138,23,1140,1143],{},"这一次使用 Cloudflare Workers 构建的 Restful API 很有意思，使用了 ",[51,1121,1122],{},"GET",[51,1124,1125],{},"PUT",[51,1127,1128],{},"DELETE"," 三个请求类型。",[51,1131,1122],{}," 请求很常见，是用来获取图片的，",[51,1134,1125],{},[51,1136,1128],{}," 在 web 开发就不如 ",[51,1139,1122],{},[51,1141,1142],{},"POST"," 常见了，这一次也是让我体会到了这两个 http verb 在 Storage Bucket 操作中是有多么形象了。",[1145,1146,1147,1171],"ul",{},[1148,1149,1150,1152,1153,1156,1157,1160,1161,1164,1165,1167,1168,1170],"li",{},[51,1151,1125],{}," - 从直观上来讲，就是将某个文件放到目标位置",[1154,1155],"br",{},"打个比方，我向 ",[51,1158,1159],{},"https://cdn.example.com/img/avatar.webp"," 打了一个请求，并带上了要上传的文件，那就意味着我将这个文件放到了 Storage Bucket 的 ",[51,1162,1163],{},"/img/avatar.webp"," 这个位置，所以我在上传后，应该就能用 ",[51,1166,1122],{}," 请求我刚才 ",[51,1169,1125],{}," 的那个 URL 获取我刚才上传的东西。如果那个路径存在文件，那么默认行为是直接覆盖。",[1148,1172,1173,1175,1176,1178,1179,1181],{},[51,1174,1128],{}," - 删除目标路径的文件",[1154,1177],{},"和 ",[51,1180,1125],{}," 一样，我在请求对应 URL 后，Storage Bucket 中对应 URL 路径的资源应该被删除。",[10,1183,1184,23,1186,1188,1189,1191],{},[51,1185,1125],{},[51,1187,1128],{}," 这两个 Http Verb 让我们更像是在对一个真实的文件系统进行操作，而非那种传统的使用 ",[51,1190,1142],{}," 上传的图床那样，我们并不通过 POST 请求上传一个文件，然后获取资源最终被放置位置的 URL —— 我们自己决定资源被存放的位置。",[10,1193,1194],{},"在这个 Shell 脚本中，引入了四个可选选项",[44,1196,1198],{"className":46,"code":1197,"language":48,"meta":49,"style":49},"    m|markdown) markdown=true ;;\n    w|webp) webp=true ;;\n    f|force) force=true ;;\n    k|keep) keep=true ;;\n    p|path) UPLOAD_PATH=$OPTARG ;;\n",[51,1199,1200,1218,1236,1254,1272],{"__ignoreMap":49},[54,1201,1202,1205,1207,1209,1212,1214,1216],{"class":56,"line":57},[54,1203,1204],{"class":108},"    m",[54,1206,223],{"class":78},[54,1208,150],{"class":108},[54,1210,1211],{"class":74},") markdown",[54,1213,79],{"class":78},[54,1215,236],{"class":82},[54,1217,239],{"class":74},[54,1219,1220,1223,1225,1227,1230,1232,1234],{"class":56,"line":64},[54,1221,1222],{"class":108},"    w",[54,1224,223],{"class":78},[54,1226,139],{"class":108},[54,1228,1229],{"class":74},") webp",[54,1231,79],{"class":78},[54,1233,236],{"class":82},[54,1235,239],{"class":74},[54,1237,1238,1241,1243,1245,1248,1250,1252],{"class":56,"line":71},[54,1239,1240],{"class":108},"    f",[54,1242,223],{"class":78},[54,1244,160],{"class":108},[54,1246,1247],{"class":74},") force",[54,1249,79],{"class":78},[54,1251,236],{"class":82},[54,1253,239],{"class":74},[54,1255,1256,1259,1261,1263,1266,1268,1270],{"class":56,"line":86},[54,1257,1258],{"class":108},"    k",[54,1260,223],{"class":78},[54,1262,170],{"class":108},[54,1264,1265],{"class":74},") keep",[54,1267,79],{"class":78},[54,1269,236],{"class":82},[54,1271,239],{"class":74},[54,1273,1274,1277,1279,1281,1284,1286],{"class":56,"line":97},[54,1275,1276],{"class":108},"    p",[54,1278,223],{"class":78},[54,1280,313],{"class":108},[54,1282,1283],{"class":74},") UPLOAD_PATH",[54,1285,79],{"class":78},[54,1287,323],{"class":74},[1145,1289,1290,1297,1300,1303,1306],{},[1148,1291,1292,1293,1296],{},"markdown 选项决定返回值是否以 ",[51,1294,1295],{},"![]()"," 这种 URL 格式返回",[1148,1298,1299],{},"webp 决定上传过程中是否将图片转为 webp 后再上传",[1148,1301,1302],{},"force 决定如果遇到文件路径冲突，是否强制覆盖云端的文件",[1148,1304,1305],{},"keep 决定是否保留文件原有的文件名进行上传",[1148,1307,1308],{},"path 决定文件具体被存放的路径（或者使用默认的路径）",[10,1310,1311,1313,1314,1316],{},[51,1312,75],{}," 是图床用于上传的地址，",[51,1315,89],{}," 是图床用于被方可访问的地址。",[10,1318,1319],{},"由于急着用，也没考虑协程的处理方式，等等看后期有没有时间用 Python 重写吧。",[30,1321,1322],{"id":1322},"博客图床迁移脚本",[10,1324,1325],{},"因为只用一次，所以也没使用协程或者多线程的方式去上传文件——毕竟图片不多，也就两三百张。",[44,1327,1331],{"className":1328,"code":1329,"language":1330,"meta":49,"style":49},"language-python shiki shiki-themes github-light github-dark","import os\nimport re\nimport requests\n\n# 哪些后缀的文件需要检测是否存在老图床的 URL 并进行迁移？\nfile_extension = [\n    '.md',\n    '.yml',\n    '.html'\n]\n\npic_urls = []\n\n_files = []\n\n# 用于匹配老图床的正则表达式，这里是按照 lsky pro 的格式编写的\npattern = r'https://cdn.example.com/\\d{4}/\\d{2}/\\d{2}/[a-z0-9]{13}\\.[a-z]{3,4}'\n\n# 图片的上传部分，需要先从原 url 中下载图片，在上传到新图床中，如果需要的话可以在中途转换为 webp 格式\ndef upload(url):\n    \"\"\"\n    此处的返回值应该是新的 url\n    \"\"\"\n\n# 遍历目标后缀文件名的文件，如果存在老图床的 url，则将 url 加入到 pic_urls 列表中，并将这个文件的文件名（相对路径）添加到 _files 列表中\nfor root, dirs, files in os.walk(\".\"):\n    for file in files:\n        if file.endswith(tuple(file_extension)):\n            file_name = os.path.join(root, file)\n            with open(file_name, 'r') as f:\n                content = f.read()\n            urls = re.findall(pattern, content)\n            if urls:\n                pic_urls.extend(urls)\n                _files.append(file_name)\n\n# 先转为集合，再转回列表，进行去重\npic_urls = list(set(pic_urls))\nprint(\"共找到图片：\", len(pic_urls))\n\nurl_dict = {}\n\n# 将列表中的图片进行上传，每张图片最多尝试三次上传，如果三次都失败，则保留原连接\nfor i,u in enumerate(pci_urls, start=1):\n    for t in range(1,4):\n        try:\n            new_u = upload(u)\n            continue\n        except:\n            if t == 3:\n                new_u = u\n                print(f\"{u} 无法上传：{e}\")\n    url_dict[u] = new_u\n    print(f\"{i} / {len(pic_urls)}\")\n\n# 对 _files 列表中的文件一一完成替换\nfor file in _files:\n    with open(file, 'r') as f:\n        content = f.read()\n    for k, v in url_dict.items():\n        content = content.replace(k, v)\n    with open(file, 'w') as f:\n        f.write(content)\n    print(\"完成替换：\", file)\n","python",[51,1332,1333,1338,1343,1348,1352,1357,1362,1367,1372,1377,1382,1386,1391,1395,1400,1404,1409,1414,1418,1423,1428,1433,1438,1442,1446,1451,1456,1461,1466,1471,1476,1481,1486,1491,1496,1501,1505,1510,1515,1520,1524,1529,1533,1538,1543,1548,1553,1558,1563,1568,1573,1578,1583,1588,1593,1597,1602,1607,1612,1617,1622,1627,1632,1637],{"__ignoreMap":49},[54,1334,1335],{"class":56,"line":57},[54,1336,1337],{},"import os\n",[54,1339,1340],{"class":56,"line":64},[54,1341,1342],{},"import re\n",[54,1344,1345],{"class":56,"line":71},[54,1346,1347],{},"import requests\n",[54,1349,1350],{"class":56,"line":86},[54,1351,68],{"emptyLinePlaceholder":67},[54,1353,1354],{"class":56,"line":97},[54,1355,1356],{},"# 哪些后缀的文件需要检测是否存在老图床的 URL 并进行迁移？\n",[54,1358,1359],{"class":56,"line":115},[54,1360,1361],{},"file_extension = [\n",[54,1363,1364],{"class":56,"line":120},[54,1365,1366],{},"    '.md',\n",[54,1368,1369],{"class":56,"line":131},[54,1370,1371],{},"    '.yml',\n",[54,1373,1374],{"class":56,"line":136},[54,1375,1376],{},"    '.html'\n",[54,1378,1379],{"class":56,"line":147},[54,1380,1381],{},"]\n",[54,1383,1384],{"class":56,"line":157},[54,1385,68],{"emptyLinePlaceholder":67},[54,1387,1388],{"class":56,"line":167},[54,1389,1390],{},"pic_urls = []\n",[54,1392,1393],{"class":56,"line":177},[54,1394,68],{"emptyLinePlaceholder":67},[54,1396,1397],{"class":56,"line":182},[54,1398,1399],{},"_files = []\n",[54,1401,1402],{"class":56,"line":204},[54,1403,68],{"emptyLinePlaceholder":67},[54,1405,1406],{"class":56,"line":216},[54,1407,1408],{},"# 用于匹配老图床的正则表达式，这里是按照 lsky pro 的格式编写的\n",[54,1410,1411],{"class":56,"line":242},[54,1412,1413],{},"pattern = r'https://cdn.example.com/\\d{4}/\\d{2}/\\d{2}/[a-z0-9]{13}\\.[a-z]{3,4}'\n",[54,1415,1416],{"class":56,"line":263},[54,1417,68],{"emptyLinePlaceholder":67},[54,1419,1420],{"class":56,"line":284},[54,1421,1422],{},"# 图片的上传部分，需要先从原 url 中下载图片，在上传到新图床中，如果需要的话可以在中途转换为 webp 格式\n",[54,1424,1425],{"class":56,"line":305},[54,1426,1427],{},"def upload(url):\n",[54,1429,1430],{"class":56,"line":326},[54,1431,1432],{},"    \"\"\"\n",[54,1434,1435],{"class":56,"line":348},[54,1436,1437],{},"    此处的返回值应该是新的 url\n",[54,1439,1440],{"class":56,"line":354},[54,1441,1432],{},[54,1443,1444],{"class":56,"line":360},[54,1445,68],{"emptyLinePlaceholder":67},[54,1447,1448],{"class":56,"line":381},[54,1449,1450],{},"# 遍历目标后缀文件名的文件，如果存在老图床的 url，则将 url 加入到 pic_urls 列表中，并将这个文件的文件名（相对路径）添加到 _files 列表中\n",[54,1452,1453],{"class":56,"line":386},[54,1454,1455],{},"for root, dirs, files in os.walk(\".\"):\n",[54,1457,1458],{"class":56,"line":409},[54,1459,1460],{},"    for file in files:\n",[54,1462,1463],{"class":56,"line":437},[54,1464,1465],{},"        if file.endswith(tuple(file_extension)):\n",[54,1467,1468],{"class":56,"line":456},[54,1469,1470],{},"            file_name = os.path.join(root, file)\n",[54,1472,1473],{"class":56,"line":462},[54,1474,1475],{},"            with open(file_name, 'r') as f:\n",[54,1477,1478],{"class":56,"line":467},[54,1479,1480],{},"                content = f.read()\n",[54,1482,1483],{"class":56,"line":491},[54,1484,1485],{},"            urls = re.findall(pattern, content)\n",[54,1487,1488],{"class":56,"line":518},[54,1489,1490],{},"            if urls:\n",[54,1492,1493],{"class":56,"line":554},[54,1494,1495],{},"                pic_urls.extend(urls)\n",[54,1497,1498],{"class":56,"line":574},[54,1499,1500],{},"                _files.append(file_name)\n",[54,1502,1503],{"class":56,"line":580},[54,1504,68],{"emptyLinePlaceholder":67},[54,1506,1507],{"class":56,"line":585},[54,1508,1509],{},"# 先转为集合，再转回列表，进行去重\n",[54,1511,1512],{"class":56,"line":607},[54,1513,1514],{},"pic_urls = list(set(pic_urls))\n",[54,1516,1517],{"class":56,"line":630},[54,1518,1519],{},"print(\"共找到图片：\", len(pic_urls))\n",[54,1521,1522],{"class":56,"line":636},[54,1523,68],{"emptyLinePlaceholder":67},[54,1525,1526],{"class":56,"line":681},[54,1527,1528],{},"url_dict = {}\n",[54,1530,1531],{"class":56,"line":686},[54,1532,68],{"emptyLinePlaceholder":67},[54,1534,1535],{"class":56,"line":691},[54,1536,1537],{},"# 将列表中的图片进行上传，每张图片最多尝试三次上传，如果三次都失败，则保留原连接\n",[54,1539,1540],{"class":56,"line":713},[54,1541,1542],{},"for i,u in enumerate(pci_urls, start=1):\n",[54,1544,1545],{"class":56,"line":750},[54,1546,1547],{},"    for t in range(1,4):\n",[54,1549,1550],{"class":56,"line":761},[54,1551,1552],{},"        try:\n",[54,1554,1555],{"class":56,"line":776},[54,1556,1557],{},"            new_u = upload(u)\n",[54,1559,1560],{"class":56,"line":792},[54,1561,1562],{},"            continue\n",[54,1564,1565],{"class":56,"line":802},[54,1566,1567],{},"        except:\n",[54,1569,1570],{"class":56,"line":808},[54,1571,1572],{},"            if t == 3:\n",[54,1574,1575],{"class":56,"line":813},[54,1576,1577],{},"                new_u = u\n",[54,1579,1580],{"class":56,"line":842},[54,1581,1582],{},"                print(f\"{u} 无法上传：{e}\")\n",[54,1584,1585],{"class":56,"line":851},[54,1586,1587],{},"    url_dict[u] = new_u\n",[54,1589,1590],{"class":56,"line":864},[54,1591,1592],{},"    print(f\"{i} / {len(pic_urls)}\")\n",[54,1594,1595],{"class":56,"line":877},[54,1596,68],{"emptyLinePlaceholder":67},[54,1598,1599],{"class":56,"line":882},[54,1600,1601],{},"# 对 _files 列表中的文件一一完成替换\n",[54,1603,1604],{"class":56,"line":887},[54,1605,1606],{},"for file in _files:\n",[54,1608,1609],{"class":56,"line":892},[54,1610,1611],{},"    with open(file, 'r') as f:\n",[54,1613,1614],{"class":56,"line":922},[54,1615,1616],{},"        content = f.read()\n",[54,1618,1619],{"class":56,"line":928},[54,1620,1621],{},"    for k, v in url_dict.items():\n",[54,1623,1624],{"class":56,"line":948},[54,1625,1626],{},"        content = content.replace(k, v)\n",[54,1628,1629],{"class":56,"line":971},[54,1630,1631],{},"    with open(file, 'w') as f:\n",[54,1633,1634],{"class":56,"line":976},[54,1635,1636],{},"        f.write(content)\n",[54,1638,1639],{"class":56,"line":993},[54,1640,1641],{},"    print(\"完成替换：\", file)\n",[1643,1644,1645],"style",{},"html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sA_wV, html code.shiki .sA_wV{--shiki-default:#032F62;--shiki-dark:#DBEDFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":49,"searchDepth":64,"depth":64,"links":1647},[1648,1649],{"id":32,"depth":64,"text":32},{"id":1322,"depth":64,"text":1322},"2024-08-20 23:12:30","前面三篇小记分别讲述了图床的整体架构、用 Workers 构建 Restful API 和 自动更新部署 SSL 证书，这一篇c处理由此带来的图片上传问题，主要是要为 Typora 编写自动上传脚本，并为博客原有的图片进行迁移。","md",{},"/2024/08/20/picbed-upload-script-and-image-migration","---\ntitle: 自建图床小记四——上传脚本编写与图片迁移\ndate: 2024-08-20 23:12:30\nsticky:\ntags:\n- Python\n- 图床\n- Linux\n- Network\n- Shell Script\n---\n\n前面三篇小记分别讲述了[图床的整体架构](/2024/08/12/new-picbed-based-on-cloudflare-and-upyun/)、[用 Workers 构建 Restful API](/2024/08/13/build-restful-api-for-cloudflare-r2-with-cloudflare-workers/) 和 [自动更新部署 SSL 证书](/2024/08/14/auto-renew-ssl-certificate-and-deploy-to-upyun-with-github-action/)，这一篇c处理由此带来的图片上传问题，主要是要为 Typora 编写自动上传脚本，并为博客原有的图片进行迁移。\n\n## 自动上传脚本\n\n主要还是给 Typora 用，实现这种效果\n\n![Typora 自动上传](https://static.031130.xyz/uploads/2024/08/12/62f3b881e3c4c.gif)\n\n```bash\n#!/bin/bash\n\nHOST=\"upload.example.com\"\nCDN_HOST=\"cdn.example.com\"\nUPLOAD_PATH=\"uploads/$(date +%Y/%m/%d)\"\n\nAUTH_TOKEN=\"1145141919810\"\n\nwebp=false\nmarkdown=false\nforce=false\nkeep=false\n\nwhile getopts \":mwfkp:\" opt; do\n    case $opt in\n        m|markdown) markdown=true ;;\n        w|webp) webp=true ;;\n        f|force) force=true ;;\n        k|keep) keep=true ;;\n        p|path) UPLOAD_PATH=$OPTARG ;;\n        \\?) echo \"Invalid option: -$OPTARG\" ;;\n    esac\ndone\nshift $((OPTIND - 1))\n\nUPLOAD_URL=\"https://$HOST/$UPLOAD_PATH\"\nif [[ \"$UPLOAD_URL\" == */ ]]; then\n    UPLOAD_URL=\"${UPLOAD_URL%?}\"\nfi\n\nfor image in \"$@\"; do\n    if [ \"$webp\" = true ]; then\n        cwebp -quiet \"$image\" -o \"${image%.*}.webp\"\n        image=\"${image%.*}.webp\"\n    fi\n\n    if [ \"$keep\" = true ]; then\n        FILENAME=$(basename \"$image\")\n    else\n        FILENAME=\"$(md5sum $image | cut -c 1-13).$(basename $image | cut -d. -f2)\"\n    fi\n\n    if [ \"$force\" = true ]; then\n        UPLOAD_RESPONSE=$(curl -s -X PUT \"${UPLOAD_URL}/$FILENAME\" \\\n            -w \"%{http_code}\" \\\n            --data-binary @\"$image\" \\\n            -H \"X-Custom-Auth-Key: $AUTH_TOKEN\" \\\n            -H \"Overwrite: true\" \\\n        )\n    else\n        UPLOAD_RESPONSE=$(curl -s -X PUT \"${UPLOAD_URL}/$FILENAME\" \\\n            -w \"%{http_code}\" \\\n            --data-binary @\"$image\" \\\n            -H \"X-Custom-Auth-Key: $AUTH_TOKEN\" \\\n        )\n    fi\n\n    UPLOAD_HTTP_CODE=$(echo \"$UPLOAD_RESPONSE\" | tail -n1)\n    \n    if [ -n \"$UPLOAD_PATH\" ]; then\n        CDN_URL=\"https://$CDN_HOST/$UPLOAD_PATH/$FILENAME\"\n    else\n        CDN_URL=\"https://$CDN_HOST/$FILENAME\"\n    fi\n\n    if [ \"$UPLOAD_HTTP_CODE\" != \"200\" ]; then\n        echo \"上传失败: $UPLOAD_RESPONSE\"\n        continue\n    fi\n\n    if [ \"$markdown\" = true ]; then\n        echo \"![](${CDN_URL})\"\n    else\n        echo \"${CDN_URL}\"\n    fi\ndone\n```\n\n这一次使用 Cloudflare Workers 构建的 Restful API 很有意思，使用了 `GET`、`PUT` 和 `DELETE` 三个请求类型。`GET` 请求很常见，是用来获取图片的，`PUT` 和 `DELETE` 在 web 开发就不如 `GET` 和 `POST` 常见了，这一次也是让我体会到了这两个 http verb 在 Storage Bucket 操作中是有多么形象了。\n\n- `PUT` - 从直观上来讲，就是将某个文件放到目标位置\n\n  打个比方，我向 `https://cdn.example.com/img/avatar.webp` 打了一个请求，并带上了要上传的文件，那就意味着我将这个文件放到了 Storage Bucket 的 `/img/avatar.webp` 这个位置，所以我在上传后，应该就能用 `GET` 请求我刚才 `PUT` 的那个 URL 获取我刚才上传的东西。如果那个路径存在文件，那么默认行为是直接覆盖。\n\n- `DELETE` - 删除目标路径的文件\n\n  和 `PUT` 一样，我在请求对应 URL 后，Storage Bucket 中对应 URL 路径的资源应该被删除。\n\n`PUT` 和 `DELETE` 这两个 Http Verb 让我们更像是在对一个真实的文件系统进行操作，而非那种传统的使用 `POST` 上传的图床那样，我们并不通过 POST 请求上传一个文件，然后获取资源最终被放置位置的 URL —— 我们自己决定资源被存放的位置。\n\n在这个 Shell 脚本中，引入了四个可选选项\n\n```bash\n    m|markdown) markdown=true ;;\n    w|webp) webp=true ;;\n    f|force) force=true ;;\n    k|keep) keep=true ;;\n    p|path) UPLOAD_PATH=$OPTARG ;;\n```\n\n- markdown 选项决定返回值是否以 `![]()` 这种 URL 格式返回\n- webp 决定上传过程中是否将图片转为 webp 后再上传\n- force 决定如果遇到文件路径冲突，是否强制覆盖云端的文件\n- keep 决定是否保留文件原有的文件名进行上传\n- path 决定文件具体被存放的路径（或者使用默认的路径）\n\n`HOST` 是图床用于上传的地址，`CDN_HOST` 是图床用于被方可访问的地址。\n\n由于急着用，也没考虑协程的处理方式，等等看后期有没有时间用 Python 重写吧。\n\n## 博客图床迁移脚本\n\n因为只用一次，所以也没使用协程或者多线程的方式去上传文件——毕竟图片不多，也就两三百张。\n\n```python\nimport os\nimport re\nimport requests\n\n# 哪些后缀的文件需要检测是否存在老图床的 URL 并进行迁移？\nfile_extension = [\n    '.md',\n    '.yml',\n    '.html'\n]\n\npic_urls = []\n\n_files = []\n\n# 用于匹配老图床的正则表达式，这里是按照 lsky pro 的格式编写的\npattern = r'https://cdn.example.com/\\d{4}/\\d{2}/\\d{2}/[a-z0-9]{13}\\.[a-z]{3,4}'\n\n# 图片的上传部分，需要先从原 url 中下载图片，在上传到新图床中，如果需要的话可以在中途转换为 webp 格式\ndef upload(url):\n    \"\"\"\n    此处的返回值应该是新的 url\n    \"\"\"\n\n# 遍历目标后缀文件名的文件，如果存在老图床的 url，则将 url 加入到 pic_urls 列表中，并将这个文件的文件名（相对路径）添加到 _files 列表中\nfor root, dirs, files in os.walk(\".\"):\n    for file in files:\n        if file.endswith(tuple(file_extension)):\n            file_name = os.path.join(root, file)\n            with open(file_name, 'r') as f:\n                content = f.read()\n            urls = re.findall(pattern, content)\n            if urls:\n                pic_urls.extend(urls)\n                _files.append(file_name)\n\n# 先转为集合，再转回列表，进行去重\npic_urls = list(set(pic_urls))\nprint(\"共找到图片：\", len(pic_urls))\n\nurl_dict = {}\n\n# 将列表中的图片进行上传，每张图片最多尝试三次上传，如果三次都失败，则保留原连接\nfor i,u in enumerate(pci_urls, start=1):\n    for t in range(1,4):\n        try:\n            new_u = upload(u)\n            continue\n        except:\n            if t == 3:\n                new_u = u\n                print(f\"{u} 无法上传：{e}\")\n\turl_dict[u] = new_u\n    print(f\"{i} / {len(pic_urls)}\")\n\n# 对 _files 列表中的文件一一完成替换\nfor file in _files:\n    with open(file, 'r') as f:\n        content = f.read()\n    for k, v in url_dict.items():\n        content = content.replace(k, v)\n    with open(file, 'w') as f:\n        f.write(content)\n    print(\"完成替换：\", file)\n```\n\n",{"title":5,"description":1651},"posts/picbed-upload-script-and-image-migration",false,[1660,1661,1662,1663,1664],"Python","图床","Linux","Network","Shell Script","mSaiVcRnWC2_fiV3LKmP0GqD1xtp062mRwrM5_4kmqk",[1667,1672],{"title":1668,"path":1669,"stem":1670,"date":1671,"children":-1},"自建图床小记五——费用","/2024/08/21/self-host-cdn-expense","posts/self-host-cdn-expense","2024-08-21 00:05:15",{"title":1673,"path":1674,"stem":1675,"date":1676,"children":-1},"自建图床小记三—— SSL 证书的自动更新与部署","/2024/08/14/auto-renew-ssl-certificate-and-deploy-to-upyun-with-github-action","posts/auto-renew-ssl-certificate-and-deploy-to-upyun-with-github-action","2024-08-14 10:35:18",1761735720362]