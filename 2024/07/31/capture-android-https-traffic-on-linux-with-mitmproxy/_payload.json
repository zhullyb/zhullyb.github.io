[{"data":1,"prerenderedAt":382},["ShallowReactive",2],{"post-2024-07-31-capture-android-https-traffic-on-linux-with-mitmproxy":3,"surround-2024-07-31-capture-android-https-traffic-on-linux-with-mitmproxy":371,"randomIndex/2024/07/31/capture-android-https-traffic-on-linux-with-mitmproxy/":213},{"id":4,"title":5,"body":6,"date":355,"description":12,"extension":356,"meta":357,"navigation":358,"path":359,"rawbody":360,"seo":361,"stem":362,"sticky":363,"tags":364,"__hash__":370},"posts/posts/capture-android-https-traffic-on-linux-with-mitmproxy.md","在 Linux 下使用 mitmproxy 抓取安卓手机上的 HTTPS 流量",{"type":7,"value":8,"toc":349},"minimark",[9,13,16,58,70,73,77,85,89,154,160,163,194,198,201,270,278,281,287,290,293,298,301,306,309,345],[10,11,12],"p",{},"纵使安卓下有小黄鸟 HttpCanary 这种抓包神器，但手机一块 6 英寸的小屏实在是不方便分析流量情况，还得是 PC 的屏幕更大一些，处理起流量信息来更得心应手一些。",[10,14,15],{},"把话说在前面，目前的安卓抓包有不小的限制",[17,18,19,23],"ul",{},[20,21,22],"li",{},"Android 7 以下的版本: 直接以普通用户的权限安装 ssl 证书即可被信任",[20,24,25,26],{},"Android 7 以上的版本:\n",[17,27,28,41],{},[20,29,30,31,35,36,40],{},"安全性较低的应用: ",[32,33,34],"strong",{},"需要使用 root 权限","将证书移动至 ",[37,38,39],"code",{},"/system/etc/security/cacerts","使证书被系统信任",[20,42,43,44,51,52,57],{},"安全性较高的应用（比如微信 7.0 以上的版本）: 在满足上一条条件的情况下，需要阻止第三方应用使用自带的 ssl 证书信任范围（绕过 SSL Pinning）。通常情况下需要额外的手段对目标应用进行篡改，比如使用 ",[45,46,50],"a",{"href":47,"rel":48},"https://github.com/Fuzion24/JustTrustMe",[49],"nofollow","justTrustMe"," 这个 xposed 模块，或者 ",[45,53,56],{"href":54,"rel":55},"https://github.com/frida/frida/",[49],"frida","。",[59,60,61],"blockquote",{},[10,62,63,64,69],{},"除此之外，Linux 版本 >= 5.5 的安卓设备也可以使用 ",[45,65,68],{"href":66,"rel":67},"https://github.com/gojue/ecapture",[49],"eCapture"," 这款基于 eBPF Linux 内核模块实现的抓包软件，算是种奇技淫巧。",[10,71,72],{},"本文只讨论 Android 7 以上版本中安全性较低的应用，因为我当前的抓包目标局限于一款安全性不高的外包软件。",[74,75,76],"h2",{"id":76},"基本操作",[10,78,79,80,84],{},"见「",[45,81,83],{"href":82},"/2024/02/29/capture-https-traffic-on-linux-with-mitmproxy/","在 Linux 下使用 mitmproxy 抓取 HTTPS 流量","」",[74,86,88],{"id":87},"安装-ssl-证书","安装 ssl 证书",[90,91,96],"pre",{"className":92,"code":93,"language":94,"meta":95,"style":95},"language-bash shiki shiki-themes one-light one-dark-pro","cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem $(openssl x509 -subject_hash_old -in $HOME/.mitmproxy/mitmproxy-ca-cert.pem | head -n 1).0\n","bash","",[37,97,98],{"__ignoreMap":95},[99,100,103,107,111,115,119,122,125,129,132,134,136,139,142,145,148,151],"span",{"class":101,"line":102},"line",1,[99,104,106],{"class":105},"sAdtL","cp",[99,108,110],{"class":109},"sJa8x"," $HOME",[99,112,114],{"class":113},"sDhpE","/.mitmproxy/mitmproxy-ca-cert.pem",[99,116,118],{"class":117},"s5ixo"," $(",[99,120,121],{"class":105},"openssl",[99,123,124],{"class":113}," x509",[99,126,128],{"class":127},"sAGMh"," -subject_hash_old",[99,130,131],{"class":127}," -in",[99,133,110],{"class":109},[99,135,114],{"class":113},[99,137,138],{"class":117}," | ",[99,140,141],{"class":105},"head",[99,143,144],{"class":127}," -n",[99,146,147],{"class":127}," 1",[99,149,150],{"class":117},")",[99,152,153],{"class":113},".0\n",[10,155,156,157,159],{},"此时我们就可以在家目录下找到一个以 .0 结尾的证书文件，我们的目标是将其放到手机的 ",[37,158,39],{}," 路径下。",[10,161,162],{},"对于一些出厂安卓版本较低、system 分区采用可变文件系统的手机，我们可以很轻松的使用带有 root 权限的文件管理器将证书文件移动到对应的目录（我这里就是）；而对于出厂版本较高的手机，system 分区可能是不可写的，需要采用额外的奇技淫巧。",[59,164,165,168,171,174,177,180],{},[10,166,167],{},"1、通过 ADB 将 HTTP Toolkit CA 证书推送到设备上。",[10,169,170],{},"2、从 /system/etc/security/cacerts/ 中复制所有系统证书到临时目录。",[10,172,173],{},"3、在 /system/etc/security/cacerts/ 上面挂载一个 tmpfs 内存文件系统。这实际上将一个可写的全新空文件系统放在了 /system 的一小部分上面。 将复制的系统证书移回到该挂载点。",[10,175,176],{},"4、将 HTTP Toolkit CA 证书也移动到该挂载点。",[10,178,179],{},"5、更新临时挂载点中所有文件的权限为 644，并将系统文件的 SELinux 标签设置为 system_file，以使其看起来像是合法的 Android 系统文件。",[10,181,182,183,188,189,84],{},"——",[45,184,187],{"href":185,"rel":186},"http://91fans.com.cn/post/certificate/",[49],"《安卓高版本安装系统证书 HTTPS 抓包 - 终极解决方案》"," 「",[45,190,193],{"href":191,"rel":192},"http://web.archive.org/web/20240801045307/http://91fans.com.cn/post/certificate/#gsc.tab=0",[49],"archived here",[74,195,197],{"id":196},"让被抓包的应用流量经过-mitm-代理服务器","让被抓包的应用流量经过 mitm 代理服务器",[10,199,200],{},"mitmproxy 默认会在 pc 端的 8080 端口开启一个 http 代理服务器，我们要做的就是想办法让待抓包的应用流量被这个 http 代理服务器所代理。",[90,202,204],{"className":92,"code":203,"language":94,"meta":95,"style":95},"[zhullyb@Archlinux ~]$ ip -br a\nlo               UNKNOWN        127.0.0.1/8 ::1/128\nenp0s31f6        UP             172.16.0.255/25 fe80::2df9:2927:cd44:65c/64\nwlp0s20f3        UP             192.168.20.212/24 fe80::a6bc:919:281e:dcab/64\ndocker0          DOWN           172.17.0.1/16 fe80::42:d1ff:febe:d513/64\n",[37,205,206,211,226,241,255],{"__ignoreMap":95},[99,207,208],{"class":101,"line":102},[99,209,210],{"class":117},"[zhullyb@Archlinux ~]$ ip -br a\n",[99,212,214,217,220,223],{"class":101,"line":213},2,[99,215,216],{"class":105},"lo",[99,218,219],{"class":113},"               UNKNOWN",[99,221,222],{"class":113},"        127.0.0.1/8",[99,224,225],{"class":113}," ::1/128\n",[99,227,229,232,235,238],{"class":101,"line":228},3,[99,230,231],{"class":105},"enp0s31f6",[99,233,234],{"class":113},"        UP",[99,236,237],{"class":113},"             172.16.0.255/25",[99,239,240],{"class":113}," fe80::2df9:2927:cd44:65c/64\n",[99,242,244,247,249,252],{"class":101,"line":243},4,[99,245,246],{"class":105},"wlp0s20f3",[99,248,234],{"class":113},[99,250,251],{"class":113},"             192.168.20.212/24",[99,253,254],{"class":113}," fe80::a6bc:919:281e:dcab/64\n",[99,256,258,261,264,267],{"class":101,"line":257},5,[99,259,260],{"class":105},"docker0",[99,262,263],{"class":113},"          DOWN",[99,265,266],{"class":113},"           172.17.0.1/16",[99,268,269],{"class":113}," fe80::42:d1ff:febe:d513/64\n",[10,271,272,273,277],{},"在这里我们能看到本机的无线网卡地址是 192.168.20.212，所以 http 代理服务器的地址就是 ",[45,274,275],{"href":275,"rel":276},"http://192.168.20.212:8080",[49]," 。（如果你的有线网卡和手机在同一局域网下，当然也可以用有线网卡的 ip 地址）",[10,279,280],{},"我们当然可以在安卓手机的 WIFI 连接页面填入 http 代理地址。",[10,282,283],{},[284,285],"img",{"alt":95,"src":286},"https://static.031130.xyz/uploads/2024/08/12/66ab548080ed6.webp",[10,288,289],{},"但这对我来说似乎并不是一个好主意：一来并不是所有的应用都会默认使用 http 代理服务器，二来这回导致抓包目标不明确，非目标应用的流量也会经过代理服务器。",[10,291,292],{},"我选择了 Nekobox 这个常见的代理软件，它支持 http 代理服务器，且允许分应用代理。",[10,294,295],{},[284,296],{"alt":95,"src":297},"https://static.031130.xyz/uploads/2024/08/12/66ab54f08dfd6.webp",[10,299,300],{},"可以看到能正常抓取 https 流量",[10,302,303],{},[284,304],{"alt":95,"src":305},"https://static.031130.xyz/uploads/2024/08/12/66ab5970a6ac7.webp",[74,307,308],{"id":308},"参见",[17,310,311,318,325,332,338],{},[20,312,313],{},[45,314,317],{"href":315,"rel":316},"https://ibukifalling.github.io/2023/06/07/Android-app-packet-capture/",[49],"安卓应用防抓包机制及一些绕过",[20,319,320],{},[45,321,324],{"href":322,"rel":323},"https://chorer.github.io/2022/05/19/A-%E5%AE%89%E5%8D%937.0%E7%B3%BB%E7%BB%9F%E6%8A%93%E5%8C%85%E6%96%B9%E6%A1%88/",[49],"安卓7.0+系统抓包方案",[20,326,327],{},[45,328,331],{"href":329,"rel":330},"https://www.cnblogs.com/snad/p/17449454.html",[49],"frida抓包",[20,333,334],{},[45,335,337],{"href":66,"rel":336},[49],"gojue/ecapture",[20,339,340],{},[45,341,344],{"href":342,"rel":343},"http://91fans.com.cn/post/certificate/#gsc.tab=0",[49],"安卓高版本安装系统证书 HTTPS 抓包 - 终极解决方案",[346,347,348],"style",{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":95,"searchDepth":213,"depth":213,"links":350},[351,352,353,354],{"id":76,"depth":213,"text":76},{"id":87,"depth":213,"text":88},{"id":196,"depth":213,"text":197},{"id":308,"depth":213,"text":308},"2024-07-31 16:02:28","md",{},true,"/2024/07/31/capture-android-https-traffic-on-linux-with-mitmproxy","---\ntitle: 在 Linux 下使用 mitmproxy 抓取安卓手机上的 HTTPS 流量\ndate: 2024-07-31 16:02:28\nsticky:\ntags:\n    - mitmproxy\n    - Network\n    - Linux\n    - Archlinux\n    - Android\n---\n\n纵使安卓下有小黄鸟 HttpCanary 这种抓包神器，但手机一块 6 英寸的小屏实在是不方便分析流量情况，还得是 PC 的屏幕更大一些，处理起流量信息来更得心应手一些。\n\n把话说在前面，目前的安卓抓包有不小的限制\n\n- Android 7 以下的版本: 直接以普通用户的权限安装 ssl 证书即可被信任\n- Android 7 以上的版本:\n    - 安全性较低的应用: **需要使用 root 权限**将证书移动至 `/system/etc/security/cacerts`使证书被系统信任\n    - 安全性较高的应用（比如微信 7.0 以上的版本）: 在满足上一条条件的情况下，需要阻止第三方应用使用自带的 ssl 证书信任范围（绕过 SSL Pinning）。通常情况下需要额外的手段对目标应用进行篡改，比如使用 [justTrustMe](https://github.com/Fuzion24/JustTrustMe) 这个 xposed 模块，或者 [frida](https://github.com/frida/frida/)。\n\n> 除此之外，Linux 版本 >= 5.5 的安卓设备也可以使用 [eCapture](https://github.com/gojue/ecapture) 这款基于 eBPF Linux 内核模块实现的抓包软件，算是种奇技淫巧。\n\n本文只讨论 Android 7 以上版本中安全性较低的应用，因为我当前的抓包目标局限于一款安全性不高的外包软件。\n\n## 基本操作\n\n见「[在 Linux 下使用 mitmproxy 抓取 HTTPS 流量](/2024/02/29/capture-https-traffic-on-linux-with-mitmproxy/)」\n\n## 安装 ssl 证书\n\n```bash\ncp $HOME/.mitmproxy/mitmproxy-ca-cert.pem $(openssl x509 -subject_hash_old -in $HOME/.mitmproxy/mitmproxy-ca-cert.pem | head -n 1).0\n```\n\n此时我们就可以在家目录下找到一个以 .0 结尾的证书文件，我们的目标是将其放到手机的 `/system/etc/security/cacerts` 路径下。\n\n对于一些出厂安卓版本较低、system 分区采用可变文件系统的手机，我们可以很轻松的使用带有 root 权限的文件管理器将证书文件移动到对应的目录（我这里就是）；而对于出厂版本较高的手机，system 分区可能是不可写的，需要采用额外的奇技淫巧。\n\n> 1、通过 ADB 将 HTTP Toolkit CA 证书推送到设备上。\n>\n> 2、从 /system/etc/security/cacerts/ 中复制所有系统证书到临时目录。\n>\n> 3、在 /system/etc/security/cacerts/ 上面挂载一个 tmpfs 内存文件系统。这实际上将一个可写的全新空文件系统放在了 /system 的一小部分上面。 将复制的系统证书移回到该挂载点。\n>\n> 4、将 HTTP Toolkit CA 证书也移动到该挂载点。\n>\n> 5、更新临时挂载点中所有文件的权限为 644，并将系统文件的 SELinux 标签设置为 system_file，以使其看起来像是合法的 Android 系统文件。\n>\n> ——[《安卓高版本安装系统证书 HTTPS 抓包 - 终极解决方案》](http://91fans.com.cn/post/certificate/) 「[archived here](http://web.archive.org/web/20240801045307/http://91fans.com.cn/post/certificate/#gsc.tab=0)」\n\n## 让被抓包的应用流量经过 mitm 代理服务器\n\nmitmproxy 默认会在 pc 端的 8080 端口开启一个 http 代理服务器，我们要做的就是想办法让待抓包的应用流量被这个 http 代理服务器所代理。\n\n```bash\n[zhullyb@Archlinux ~]$ ip -br a\nlo               UNKNOWN        127.0.0.1/8 ::1/128\nenp0s31f6        UP             172.16.0.255/25 fe80::2df9:2927:cd44:65c/64\nwlp0s20f3        UP             192.168.20.212/24 fe80::a6bc:919:281e:dcab/64\ndocker0          DOWN           172.17.0.1/16 fe80::42:d1ff:febe:d513/64\n```\n\n在这里我们能看到本机的无线网卡地址是 192.168.20.212，所以 http 代理服务器的地址就是 http://192.168.20.212:8080 。（如果你的有线网卡和手机在同一局域网下，当然也可以用有线网卡的 ip 地址）\n\n我们当然可以在安卓手机的 WIFI 连接页面填入 http 代理地址。\n\n![](https://static.031130.xyz/uploads/2024/08/12/66ab548080ed6.webp)\n\n但这对我来说似乎并不是一个好主意：一来并不是所有的应用都会默认使用 http 代理服务器，二来这回导致抓包目标不明确，非目标应用的流量也会经过代理服务器。\n\n我选择了 Nekobox 这个常见的代理软件，它支持 http 代理服务器，且允许分应用代理。\n\n![](https://static.031130.xyz/uploads/2024/08/12/66ab54f08dfd6.webp)\n\n可以看到能正常抓取 https 流量\n\n![](https://static.031130.xyz/uploads/2024/08/12/66ab5970a6ac7.webp)\n\n## 参见\n\n- [安卓应用防抓包机制及一些绕过](https://ibukifalling.github.io/2023/06/07/Android-app-packet-capture/)\n- [安卓7.0+系统抓包方案](https://chorer.github.io/2022/05/19/A-%E5%AE%89%E5%8D%937.0%E7%B3%BB%E7%BB%9F%E6%8A%93%E5%8C%85%E6%96%B9%E6%A1%88/)\n- [frida抓包](https://www.cnblogs.com/snad/p/17449454.html)\n- [gojue/ecapture](https://github.com/gojue/ecapture)\n- [安卓高版本安装系统证书 HTTPS 抓包 - 终极解决方案](http://91fans.com.cn/post/certificate/#gsc.tab=0)\n",{"title":5,"description":12},"posts/capture-android-https-traffic-on-linux-with-mitmproxy",false,[365,366,367,368,369],"mitmproxy","Network","Linux","Archlinux","Android","By-6y9Q_yC6WkK8hi0tOJxd2-Ul5QmZGsnDsFdlSmdI",[372,377],{"title":373,"path":374,"stem":375,"date":376,"children":-1},"自建图床小记一——图床架构与 DNS 解析","/2024/08/12/new-picbed-based-on-cloudflare-and-upyun","posts/new-picbed-based-on-cloudflare-and-upyun","2024-08-12 17:07:11",{"title":378,"path":379,"stem":380,"date":381,"children":-1},"为中柏 N100 小主机开启来电自启","/2024/07/22/enable-ac-power-loss-for-jumper-n100","posts/enable-ac-power-loss-for-jumper-n100","2024-07-22 23:31:51",1761883466981]