[{"data":1,"prerenderedAt":466},["ShallowReactive",2],{"post-2024-01-14-where-does-this-refer-in-arrow-function-in-js":3,"surround-2024-01-14-where-does-this-refer-in-arrow-function-in-js":455,"randomIndex/2024/01/14/where-does-this-refer-in-arrow-function-in-js":264},{"id":4,"title":5,"body":6,"date":443,"description":444,"extension":445,"meta":446,"navigation":143,"path":447,"rawbody":448,"seo":449,"stem":450,"sticky":451,"tags":452,"__hash__":454},"posts/posts/where-does-this-refer-in-arrow-function-in-js.md","在 JavaScript 中，箭头函数中的 this 指针到底指向哪里？",{"type":7,"value":8,"toc":440},"minimark",[9,18,328,331,338,345,356,359,362,373,380,396,403,409,413,422,429,436],[10,11,12,13,17],"p",{},"这学期期末复习的时候，学校里负责上 JavaScript 的老师给我们提出了一个问题。下面这段代码中，",[14,15,16],"code",{},"a.u2()"," 在 ES Module 下执行会抛出 TypeError 的异常，在 CommonJS 下运行则会输出 undefined，而 B 这个类的 u2 函数则能够在对象实例化以后正常运行。",[19,20,25],"pre",{"className":21,"code":22,"language":23,"meta":24,"style":24},"language-javascript shiki shiki-themes github-light github-dark","const a = {\n    x: 3,\n    u1: function () {\n        console.log(this.x)\n    },\n    u2: () => {\n        console.log(this.x)\n    }\n}\n\nclass b {\n    x = 3\n\n    u1 = function () {\n        console.log(this.x)\n    }\n\n    u2 = () => {\n        console.log(this.x)\n    }\n}\n\na.u1()\n// 3\na.u2()\n// undefined\n\nnew b().u1()\n// 3\nnew b().u2()\n// 3\n","javascript","",[14,26,27,47,59,75,93,99,113,126,132,138,145,156,168,173,185,198,203,208,222,235,240,245,250,262,269,279,285,290,305,310,323],{"__ignoreMap":24},[28,29,32,36,40,43],"span",{"class":30,"line":31},"line",1,[28,33,35],{"class":34},"szBVR","const",[28,37,39],{"class":38},"sj4cs"," a",[28,41,42],{"class":34}," =",[28,44,46],{"class":45},"sVt8B"," {\n",[28,48,50,53,56],{"class":30,"line":49},2,[28,51,52],{"class":45},"    x: ",[28,54,55],{"class":38},"3",[28,57,58],{"class":45},",\n",[28,60,62,66,69,72],{"class":30,"line":61},3,[28,63,65],{"class":64},"sScJk","    u1",[28,67,68],{"class":45},": ",[28,70,71],{"class":34},"function",[28,73,74],{"class":45}," () {\n",[28,76,78,81,84,87,90],{"class":30,"line":77},4,[28,79,80],{"class":45},"        console.",[28,82,83],{"class":64},"log",[28,85,86],{"class":45},"(",[28,88,89],{"class":38},"this",[28,91,92],{"class":45},".x)\n",[28,94,96],{"class":30,"line":95},5,[28,97,98],{"class":45},"    },\n",[28,100,102,105,108,111],{"class":30,"line":101},6,[28,103,104],{"class":64},"    u2",[28,106,107],{"class":45},": () ",[28,109,110],{"class":34},"=>",[28,112,46],{"class":45},[28,114,116,118,120,122,124],{"class":30,"line":115},7,[28,117,80],{"class":45},[28,119,83],{"class":64},[28,121,86],{"class":45},[28,123,89],{"class":38},[28,125,92],{"class":45},[28,127,129],{"class":30,"line":128},8,[28,130,131],{"class":45},"    }\n",[28,133,135],{"class":30,"line":134},9,[28,136,137],{"class":45},"}\n",[28,139,141],{"class":30,"line":140},10,[28,142,144],{"emptyLinePlaceholder":143},true,"\n",[28,146,148,151,154],{"class":30,"line":147},11,[28,149,150],{"class":34},"class",[28,152,153],{"class":64}," b",[28,155,46],{"class":45},[28,157,159,163,165],{"class":30,"line":158},12,[28,160,162],{"class":161},"s4XuR","    x",[28,164,42],{"class":34},[28,166,167],{"class":38}," 3\n",[28,169,171],{"class":30,"line":170},13,[28,172,144],{"emptyLinePlaceholder":143},[28,174,176,178,180,183],{"class":30,"line":175},14,[28,177,65],{"class":64},[28,179,42],{"class":34},[28,181,182],{"class":34}," function",[28,184,74],{"class":45},[28,186,188,190,192,194,196],{"class":30,"line":187},15,[28,189,80],{"class":45},[28,191,83],{"class":64},[28,193,86],{"class":45},[28,195,89],{"class":38},[28,197,92],{"class":45},[28,199,201],{"class":30,"line":200},16,[28,202,131],{"class":45},[28,204,206],{"class":30,"line":205},17,[28,207,144],{"emptyLinePlaceholder":143},[28,209,211,213,215,218,220],{"class":30,"line":210},18,[28,212,104],{"class":64},[28,214,42],{"class":34},[28,216,217],{"class":45}," () ",[28,219,110],{"class":34},[28,221,46],{"class":45},[28,223,225,227,229,231,233],{"class":30,"line":224},19,[28,226,80],{"class":45},[28,228,83],{"class":64},[28,230,86],{"class":45},[28,232,89],{"class":38},[28,234,92],{"class":45},[28,236,238],{"class":30,"line":237},20,[28,239,131],{"class":45},[28,241,243],{"class":30,"line":242},21,[28,244,137],{"class":45},[28,246,248],{"class":30,"line":247},22,[28,249,144],{"emptyLinePlaceholder":143},[28,251,253,256,259],{"class":30,"line":252},23,[28,254,255],{"class":45},"a.",[28,257,258],{"class":64},"u1",[28,260,261],{"class":45},"()\n",[28,263,265],{"class":30,"line":264},24,[28,266,268],{"class":267},"sJ8bj","// 3\n",[28,270,272,274,277],{"class":30,"line":271},25,[28,273,255],{"class":45},[28,275,276],{"class":64},"u2",[28,278,261],{"class":45},[28,280,282],{"class":30,"line":281},26,[28,283,284],{"class":267},"// undefined\n",[28,286,288],{"class":30,"line":287},27,[28,289,144],{"emptyLinePlaceholder":143},[28,291,293,296,298,301,303],{"class":30,"line":292},28,[28,294,295],{"class":34},"new",[28,297,153],{"class":64},[28,299,300],{"class":45},"().",[28,302,258],{"class":64},[28,304,261],{"class":45},[28,306,308],{"class":30,"line":307},29,[28,309,268],{"class":267},[28,311,313,315,317,319,321],{"class":30,"line":312},30,[28,314,295],{"class":34},[28,316,153],{"class":64},[28,318,300],{"class":45},[28,320,276],{"class":64},[28,322,261],{"class":45},[28,324,326],{"class":30,"line":325},31,[28,327,268],{"class":267},[10,329,330],{},"这个问题涉及到 JavaScript 中箭头函数的作用域以及 this 指向。",[10,332,333,334,337],{},"**在 JS 中使用 function 关键字定义的普通函数中，this 指针遵循一个规则：谁调用指向谁。**即 ",[14,335,336],{},"obj.func()"," 这种调用情况下，func 方法内部的this指向obj；如果没有调用者，则严格模式下 this 为 undefined，非严格模式下 this 指向window(浏览器)或者global(node环境)。",[10,339,340,341],{},"而箭头函数比较特殊，",[342,343,344],"strong",{},"箭头函数的 this 在定义时就被绑定，绑定的是定义时所在作用域中的 this。",[10,346,347,348,351,352,355],{},"在老师给的示例代码中，第一行定义了 a 这个对象字面量，而",[342,349,350],{},"定义对象字面量不会创建新的作用域","，因此 a 中定义的 u2 的 this 指向的是全局对象。因此在 Es Module 默认启用 strict mode 的情况下，全局对象的 this 指向 undefined，进而导致 a 的 u2 内 this 也指向 undefined，this.x 就抛了 TypeError；而在 ",[342,353,354],{},"CommonJS 未启用 strict mode 的情况下，全局对象的 this 指向全局对象","，因而 u2 内的 this 也指向全局对象，因此 this 存在，this.x 就不会抛 TypeError，只会报 undefined。",[10,357,358],{},"而 B 类在对象初始化阶段拥有一个新的作用域，因此箭头函数的 this 能够正确指向 B 被实例化出来的对象，因此也就能够正确读取到 this.x 的值。",[10,360,361],{},"理论上来说，我们可以给全局对象也赋一个不一样的 x 值，这样 a.u2() 就能够读取到全局对象中的 x 值，验证我们的结论。",[10,363,364,365,368,369,372],{},"在浏览器中，可以在代码的头部加一行 ",[14,366,367],{},"var x = 10"," 或者 ",[14,370,371],{},"window.x = 10","，可以看到a.u2() 顺利的输出了 10，验证了我的结论。",[10,374,375],{},[376,377],"img",{"alt":378,"src":379},"浏览器控制台调试","https://static.031130.xyz/uploads/2024/08/12/65a2e1d093b78.webp",[10,381,382,383,368,385,388,389,391,392,395],{},"但在 Node.js 中，直接使用 ",[14,384,367],{},[14,386,387],{},"global.x = 10"," 并不能达到我们想要的效果。因为Node.js 中的每个 CommonJS 模块都有其自己的模块作用域，即模块的顶层作用域不是全局作用域。在模块内部，",[14,390,89],{}," 关键字不是指向 ",[14,393,394],{},"global"," 对象，而是指向模块的导出对象。这是为了确保模块内部的作用域隔离和模块的封装性。",[10,397,398,399,402],{},"那么我们可以通过为模块的导出对象添加一个 x 属性来验证我们的结论，我们可以使用 ",[14,400,401],{},"exports.x = 10"," 来为模块的顶层作用域添加一个值为 10 的 x 属性。",[10,404,405],{},[376,406],{"alt":407,"src":408},"nodejs 环境运行","https://static.031130.xyz/uploads/2024/08/12/65a2e379ba89e.webp",[410,411,412],"h2",{"id":412},"参考文章",[10,414,415],{},[416,417,421],"a",{"href":418,"rel":419},"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions",[420],"nofollow","箭头函数表达式 - JavaScript | MDN",[10,423,424],{},[416,425,428],{"href":426,"rel":427},"https://segmentfault.com/q/1010000022948115",[420],"ES6箭头函数作用域的问题",[10,430,431],{},[416,432,435],{"href":433,"rel":434},"https://www.zhihu.com/tardis/zm/art/57204184",[420],"ES6箭头函数的this指向详解",[437,438,439],"style",{},"html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .s4XuR, html code.shiki .s4XuR{--shiki-default:#E36209;--shiki-dark:#FFAB70}html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":24,"searchDepth":49,"depth":49,"links":441},[442],{"id":412,"depth":49,"text":412},"2024-01-14 02:50:03","这学期期末复习的时候，学校里负责上 JavaScript 的老师给我们提出了一个问题。下面这段代码中，a.u2() 在 ES Module 下执行会抛出 TypeError 的异常，在 CommonJS 下运行则会输出 undefined，而 B 这个类的 u2 函数则能够在对象实例化以后正常运行。","md",{},"/2024/01/14/where-does-this-refer-in-arrow-function-in-js","---\ntitle: 在 JavaScript 中，箭头函数中的 this 指针到底指向哪里？\ndate: 2024-01-14 02:50:03\nsticky:\ntags:\n- JavaScript\n---\n\n这学期期末复习的时候，学校里负责上 JavaScript 的老师给我们提出了一个问题。下面这段代码中，`a.u2()` 在 ES Module 下执行会抛出 TypeError 的异常，在 CommonJS 下运行则会输出 undefined，而 B 这个类的 u2 函数则能够在对象实例化以后正常运行。\n\n```javascript\nconst a = {\n    x: 3,\n    u1: function () {\n        console.log(this.x)\n    },\n    u2: () => {\n        console.log(this.x)\n    }\n}\n\nclass b {\n    x = 3\n\n    u1 = function () {\n        console.log(this.x)\n    }\n\n    u2 = () => {\n        console.log(this.x)\n    }\n}\n\na.u1()\n// 3\na.u2()\n// undefined\n\nnew b().u1()\n// 3\nnew b().u2()\n// 3\n```\n\n这个问题涉及到 JavaScript 中箭头函数的作用域以及 this 指向。\n\n**在 JS 中使用 function 关键字定义的普通函数中，this 指针遵循一个规则：谁调用指向谁。**即 `obj.func()` 这种调用情况下，func 方法内部的this指向obj；如果没有调用者，则严格模式下 this 为 undefined，非严格模式下 this 指向window(浏览器)或者global(node环境)。\n\n而箭头函数比较特殊，**箭头函数的 this 在定义时就被绑定，绑定的是定义时所在作用域中的 this。**\n\n在老师给的示例代码中，第一行定义了 a 这个对象字面量，而**定义对象字面量不会创建新的作用域**，因此 a 中定义的 u2 的 this 指向的是全局对象。因此在 Es Module 默认启用 strict mode 的情况下，全局对象的 this 指向 undefined，进而导致 a 的 u2 内 this 也指向 undefined，this.x 就抛了 TypeError；而在 **CommonJS 未启用 strict mode 的情况下，全局对象的 this 指向全局对象**，因而 u2 内的 this 也指向全局对象，因此 this 存在，this.x 就不会抛 TypeError，只会报 undefined。\n\n而 B 类在对象初始化阶段拥有一个新的作用域，因此箭头函数的 this 能够正确指向 B 被实例化出来的对象，因此也就能够正确读取到 this.x 的值。\n\n理论上来说，我们可以给全局对象也赋一个不一样的 x 值，这样 a.u2() 就能够读取到全局对象中的 x 值，验证我们的结论。\n\n在浏览器中，可以在代码的头部加一行 `var x = 10` 或者 `window.x = 10`，可以看到a.u2() 顺利的输出了 10，验证了我的结论。\n\n![浏览器控制台调试](https://static.031130.xyz/uploads/2024/08/12/65a2e1d093b78.webp)\n\n但在 Node.js 中，直接使用 `var x = 10` 或者 `global.x = 10` 并不能达到我们想要的效果。因为Node.js 中的每个 CommonJS 模块都有其自己的模块作用域，即模块的顶层作用域不是全局作用域。在模块内部，`this` 关键字不是指向 `global` 对象，而是指向模块的导出对象。这是为了确保模块内部的作用域隔离和模块的封装性。\n\n那么我们可以通过为模块的导出对象添加一个 x 属性来验证我们的结论，我们可以使用 `exports.x = 10` 来为模块的顶层作用域添加一个值为 10 的 x 属性。\n\n![nodejs 环境运行](https://static.031130.xyz/uploads/2024/08/12/65a2e379ba89e.webp)\n\n## 参考文章\n\n[箭头函数表达式 - JavaScript | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\n\n[ES6箭头函数作用域的问题](https://segmentfault.com/q/1010000022948115)\n\n[ES6箭头函数的this指向详解](https://www.zhihu.com/tardis/zm/art/57204184)\n",{"title":5,"description":444},"posts/where-does-this-refer-in-arrow-function-in-js",false,[453],"JavaScript","NyHgreQ5rCDoZQ1aqwl_og1ThvTAxPfknhCFGyO1wX4",[456,461],{"title":457,"path":458,"stem":459,"date":460,"children":-1},"备份 umami 数据库，并使用 TG Bot 保存 dump 文件","/2024/02/01/backup-umami-database-and-send-it-by-tg-bot","posts/backup-umami-database-and-send-it-by-tg-bot","2024-02-01 00:00:01",{"title":462,"path":463,"stem":464,"date":465,"children":-1},"结合 Vue.js 与 php 完成的 web 期末大作业，讲讲前后端分离站点开发与部署中可能遇到的 CORS 跨域问题","/2024/01/10/cors-when-using-splited-frontend-and-backend","posts/cors-when-using-splited-frontend-and-backend","2024-01-10 23:55:36",1761696885164]