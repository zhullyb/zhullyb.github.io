[{"data":1,"prerenderedAt":316},["ShallowReactive",2],{"post-2024-02-29-capture-https-traffic-on-linux-with-mitmproxy":3,"surround-2024-02-29-capture-https-traffic-on-linux-with-mitmproxy":304,"randomIndex/2024/02/29/capture-https-traffic-on-linux-with-mitmproxy/":315},{"id":4,"title":5,"body":6,"date":290,"description":12,"extension":291,"meta":292,"navigation":293,"path":294,"rawbody":295,"seo":296,"stem":297,"sticky":298,"tags":299,"__hash__":303},"posts/posts/capture-https-traffic-on-linux-with-mitmproxy.md","在 Linux 下使用 mitmproxy 抓取 HTTPS 流量",{"type":7,"value":8,"toc":282},"minimark",[9,13,16,21,29,58,62,65,78,88,95,105,110,114,117,124,132,143,150,170,179,201,206,218,221,225,228,235,241,250,253,259,262,265,275,278],[10,11,12],"p",{},"作为部分 AUR Package 的 maintainer，一直以来我都有在 Linux 下抓取 https 流量的需求，比如抓取应用内的更新检测时访问的 url 地址。之前一直没有空去研究，趁着最近课少，总算是完成了这个目标。",[10,14,15],{},"在这里我使用的 mitmproxy，基于 python 和 webui 的一款开源简洁的流量代理软件，可以用于抓取 https 流量信息。",[17,18,20],"h2",{"id":19},"安装-mitmproxy","安装 mitmproxy",[10,22,23,24,28],{},"在 Arch Linux 下，官方 ",[25,26,27],"code",{},"extra"," 源中已经打包好了这款软件，直接使用下面的命令即可完成安装。",[30,31,36],"pre",{"className":32,"code":33,"language":34,"meta":35,"style":35},"language-bash shiki shiki-themes one-light one-dark-pro","sudo pacman -S mitmproxy\n","bash","",[25,37,38],{"__ignoreMap":35},[39,40,43,47,51,55],"span",{"class":41,"line":42},"line",1,[39,44,46],{"class":45},"sAdtL","sudo",[39,48,50],{"class":49},"sDhpE"," pacman",[39,52,54],{"class":53},"sAGMh"," -S",[39,56,57],{"class":49}," mitmproxy\n",[17,59,61],{"id":60},"尝试运行-mitmweb","尝试运行 mitmweb",[10,63,64],{},"安装完成后，我们将会获得三个新的命令可用：",[66,67,68,72,75],"ul",{},[69,70,71],"li",{},"mitmdump",[69,73,74],{},"mitmproxy",[69,76,77],{},"mitmweb",[10,79,80,81,87],{},"我们只要使用 mitmweb 即可同时打开 8080 的代理端口和 8081 端口的 webui。访问 ",[82,83,84],"a",{"href":84,"rel":85},"http://127.0.0.1:8081",[86],"nofollow"," 即可看到 mitmproxy 的网页。",[10,89,90],{},[91,92],"img",{"alt":93,"src":94},"mitmweb 的界面","https://static.031130.xyz/uploads/2024/08/12/65e092503d5bb.webp",[10,96,97,98],{},"当然，也可以在 mitmweb 命令后面追加 -p ",[99,100,101,102],"port",{}," 和 --web-port=",[99,103,104],{}," 分别设置代理端口和 webui 的端口。",[10,106,107,108],{},"首先，我们先运行一次 ",[25,109,77],{},[17,111,113],{"id":112},"安装-ca-证书","安装 ca 证书",[10,115,116],{},"为了解密 https 流量，我们需要为系统安装上 mitmproxy 自己的证书文件，让系统信任我们的证书。",[10,118,119,120,123],{},"先来看看 ",[25,121,122],{},"/usr/share/ca-certificates/trust-source/README"," 这个文件",[30,125,130],{"className":126,"code":128,"language":129},[127],"language-text","This directory /usr/share/ca-certificates/trust-source/ contains CA certificates\nand trust settings in the PEM file format. The trust settings found here will be\ninterpreted with a low priority - lower than the ones found in \n/etc/ca-certificates/trust-source/ .\n\n=============================================================================\nQUICK HELP: To add a certificate in the simple PEM or DER file formats to the\n            list of CAs trusted on the system:\n\n            Copy it to the\n                    /usr/share/ca-certificates/trust-source/anchors/\n            subdirectory, and run the\n                    update-ca-trust\n            command.\n\n            If your certificate is in the extended BEGIN TRUSTED file format,\n            then place it into the main trust-source/ directory instead.\n=============================================================================\n\nPlease refer to the update-ca-trust(8) manual page for additional information.\n","text",[25,131,128],{"__ignoreMap":35},[10,133,134,135,138,139,142],{},"这份文件告诉我们可以在 ",[25,136,137],{},"/usr/share/ca-certificates/trust-source/anchors/"," 路径下放置 PEM 证书文件，并使用 ",[25,140,141],{},"update-ca-trust"," 命令更新系统的信任。",[10,144,145,146,149],{},"mitmproxy 软件第一次运行时，将会在当前用户的 ",[25,147,148],{},"$HOME/.mitmproxy/"," 文件夹下生成证书，我们打开这个文件夹，发现一共有六个文件：",[66,151,152,155,158,161,164,167],{},[69,153,154],{},"mitmproxy-ca-cert.cer",[69,156,157],{},"mitmproxy-ca-cert.p12",[69,159,160],{},"mitmproxy-ca-cert.pem",[69,162,163],{},"mitmproxy-ca.p12",[69,165,166],{},"mitmproxy-ca.pem",[69,168,169],{},"mitmproxy-dhparam.pem",[10,171,172,173,175,176,178],{},"我们这里需要将 ",[25,174,160],{}," 文件复制到 ",[25,177,137],{}," 路径下",[30,180,182],{"className":32,"code":181,"language":34,"meta":35,"style":35},"sudo cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem /usr/share/ca-certificates/trust-source/anchors/\n",[25,183,184],{"__ignoreMap":35},[39,185,186,188,191,195,198],{"class":41,"line":42},[39,187,46],{"class":45},[39,189,190],{"class":49}," cp",[39,192,194],{"class":193},"sJa8x"," $HOME",[39,196,197],{"class":49},"/.mitmproxy/mitmproxy-ca-cert.pem",[39,199,200],{"class":49}," /usr/share/ca-certificates/trust-source/anchors/\n",[10,202,203,204],{},"随后执行 ",[25,205,141],{},[30,207,209],{"className":32,"code":208,"language":34,"meta":35,"style":35},"sudo update-ca-trust\n",[25,210,211],{"__ignoreMap":35},[39,212,213,215],{"class":41,"line":42},[39,214,46],{"class":45},[39,216,217],{"class":49}," update-ca-trust\n",[10,219,220],{},"这样便完成了 ca 证书的安装",[17,222,224],{"id":223},"使目标软件使用-8080-端口通信","使目标软件使用 8080 端口通信",[10,226,227],{},"其实我试过使用透明代理进行抓包，只不过我的 Archlinux 是作为日常主力机使用的，系统无时无刻不在向外通信，透明代理以后 mitmproxy 的 webui 各种刷屏，便放弃了这个想法，选择指定目标软件使用 8080 端口通信。",[10,229,230,231,234],{},"网上比较常见的做法是使用 ",[25,232,233],{},"proxychains-ng"," 代理目标软件。这个方案是可行的，只不过我这边测试下来，部分软件使用 proxychains 代理以后出现了仍然不使用代理、无法联网、甚至直接崩溃的情况。",[10,236,237],{},[91,238],{"alt":239,"src":240},"程序崩溃","https://static.031130.xyz/uploads/2024/08/12/65e09559dceef.webp",[10,242,243,244,249],{},"因此我转向了 ",[82,245,248],{"href":246,"rel":247},"https://github.com/mzz2017/gg",[86],"gg","。gg 和 proxychains-ng 的定位相同，都是使目标命令通过指定的代理进行通信，只不过 gg 解决了部分 golang 编写的软件无法被 proxychains 代理的问题，并支持一些常见的用来国际联网的协议。",[10,251,252],{},"在不对 gg 进行配置的情况下，每次启动时，gg 都会要求我们输入代理地址，这正合我意。",[10,254,255],{},[91,256],{"alt":257,"src":258},"gg 要求输入代理地址","https://static.031130.xyz/uploads/2024/08/12/65e0963840449.webp",[10,260,261],{},"此时，软件正常启动，流量全部经过 mitmproxy，可以在 webui 上看到具体情况",[17,263,264],{"id":264},"抓包成功",[10,266,267,271],{},[91,268],{"alt":269,"src":270},"命令行下看到流量信息","https://static.031130.xyz/uploads/2024/08/12/65e097dfe1f17.webp",[91,272],{"alt":273,"src":274},"mitmweb 正常获取解密后的流量信息","https://static.031130.xyz/uploads/2024/08/12/65e09780dd2c0.webp",[10,276,277],{},"我们可以看到 mitmproxy 成功捕获并解密的 https 流量，针对图片等信息甚至可以直接实现预览。",[279,280,281],"style",{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}",{"title":35,"searchDepth":283,"depth":283,"links":284},2,[285,286,287,288,289],{"id":19,"depth":283,"text":20},{"id":60,"depth":283,"text":61},{"id":112,"depth":283,"text":113},{"id":223,"depth":283,"text":224},{"id":264,"depth":283,"text":264},"2024-02-29 22:03:58","md",{},true,"/2024/02/29/capture-https-traffic-on-linux-with-mitmproxy","---\ntitle: 在 Linux 下使用 mitmproxy 抓取 HTTPS 流量\ndate: 2024-02-29 22:03:58\nsticky:\ntags:\n- Linux\n- Archlinux\n- Network\n- mitmproxy\n---\n\n作为部分 AUR Package 的 maintainer，一直以来我都有在 Linux 下抓取 https 流量的需求，比如抓取应用内的更新检测时访问的 url 地址。之前一直没有空去研究，趁着最近课少，总算是完成了这个目标。\n\n在这里我使用的 mitmproxy，基于 python 和 webui 的一款开源简洁的流量代理软件，可以用于抓取 https 流量信息。\n\n## 安装 mitmproxy\n\n在 Arch Linux 下，官方 `extra` 源中已经打包好了这款软件，直接使用下面的命令即可完成安装。\n\n```bash\nsudo pacman -S mitmproxy\n```\n\n## 尝试运行 mitmweb\n\n安装完成后，我们将会获得三个新的命令可用：\n\n- mitmdump\n- mitmproxy\n- mitmweb\n\n我们只要使用 mitmweb 即可同时打开 8080 的代理端口和 8081 端口的 webui。访问 http://127.0.0.1:8081 即可看到 mitmproxy 的网页。\n\n![mitmweb 的界面](https://static.031130.xyz/uploads/2024/08/12/65e092503d5bb.webp)\n\n当然，也可以在 mitmweb 命令后面追加 -p \u003CPORT> 和 --web-port=\u003CPORT> 分别设置代理端口和 webui 的端口。\n\n首先，我们先运行一次 `mitmweb`\n\n## 安装 ca 证书\n\n为了解密 https 流量，我们需要为系统安装上 mitmproxy 自己的证书文件，让系统信任我们的证书。\n\n先来看看 `/usr/share/ca-certificates/trust-source/README` 这个文件\n\n```\nThis directory /usr/share/ca-certificates/trust-source/ contains CA certificates\nand trust settings in the PEM file format. The trust settings found here will be\ninterpreted with a low priority - lower than the ones found in \n/etc/ca-certificates/trust-source/ .\n\n=============================================================================\nQUICK HELP: To add a certificate in the simple PEM or DER file formats to the\n            list of CAs trusted on the system:\n\n            Copy it to the\n                    /usr/share/ca-certificates/trust-source/anchors/\n            subdirectory, and run the\n                    update-ca-trust\n            command.\n\n            If your certificate is in the extended BEGIN TRUSTED file format,\n            then place it into the main trust-source/ directory instead.\n=============================================================================\n\nPlease refer to the update-ca-trust(8) manual page for additional information.\n```\n\n这份文件告诉我们可以在 `/usr/share/ca-certificates/trust-source/anchors/` 路径下放置 PEM 证书文件，并使用 `update-ca-trust` 命令更新系统的信任。\n\nmitmproxy 软件第一次运行时，将会在当前用户的 `$HOME/.mitmproxy/` 文件夹下生成证书，我们打开这个文件夹，发现一共有六个文件：\n\n- mitmproxy-ca-cert.cer \n- mitmproxy-ca-cert.p12 \n- mitmproxy-ca-cert.pem \n- mitmproxy-ca.p12 \n- mitmproxy-ca.pem \n- mitmproxy-dhparam.pem\n\n我们这里需要将 `mitmproxy-ca-cert.pem` 文件复制到 `/usr/share/ca-certificates/trust-source/anchors/` 路径下\n\n```bash\nsudo cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem /usr/share/ca-certificates/trust-source/anchors/\n```\n\n随后执行 `update-ca-trust`\n\n```bash\nsudo update-ca-trust\n```\n\n这样便完成了 ca 证书的安装\n\n## 使目标软件使用 8080 端口通信\n\n其实我试过使用透明代理进行抓包，只不过我的 Archlinux 是作为日常主力机使用的，系统无时无刻不在向外通信，透明代理以后 mitmproxy 的 webui 各种刷屏，便放弃了这个想法，选择指定目标软件使用 8080 端口通信。\n\n网上比较常见的做法是使用 `proxychains-ng` 代理目标软件。这个方案是可行的，只不过我这边测试下来，部分软件使用 proxychains 代理以后出现了仍然不使用代理、无法联网、甚至直接崩溃的情况。\n\n![程序崩溃](https://static.031130.xyz/uploads/2024/08/12/65e09559dceef.webp)\n\n因此我转向了 [gg](https://github.com/mzz2017/gg)。gg 和 proxychains-ng 的定位相同，都是使目标命令通过指定的代理进行通信，只不过 gg 解决了部分 golang 编写的软件无法被 proxychains 代理的问题，并支持一些常见的用来国际联网的协议。\n\n在不对 gg 进行配置的情况下，每次启动时，gg 都会要求我们输入代理地址，这正合我意。\n\n![gg 要求输入代理地址](https://static.031130.xyz/uploads/2024/08/12/65e0963840449.webp)\n\n此时，软件正常启动，流量全部经过 mitmproxy，可以在 webui 上看到具体情况\n\n## 抓包成功\n\n![命令行下看到流量信息](https://static.031130.xyz/uploads/2024/08/12/65e097dfe1f17.webp)\n![mitmweb 正常获取解密后的流量信息](https://static.031130.xyz/uploads/2024/08/12/65e09780dd2c0.webp)\n\n我们可以看到 mitmproxy 成功捕获并解密的 https 流量，针对图片等信息甚至可以直接实现预览。\n",{"title":5,"description":12},"posts/capture-https-traffic-on-linux-with-mitmproxy",false,[300,301,302,74],"Linux","Archlinux","Network","gXks5kMm__Pqz5z8fdh8DROHYd8-2MzeDcGdMmjKc8I",[305,310],{"title":306,"path":307,"stem":308,"date":309,"children":-1},"小记 - 尝试拼凑出 apt 仓库中的 deb 包下载地址","/2024/03/13/try-to-compose-download-links-of-deb-packages-in-apt-repository","posts/try-to-compose-download-links-of-deb-packages-in-apt-repository","2024-03-13 21:55:04",{"title":311,"path":312,"stem":313,"date":314,"children":-1},"如何使用 docker 部署 onemanager","/2024/02/11/how-to-deploy-onemanager-with-docker","posts/how-to-deploy-onemanager-with-docker","2024-02-11 16:30:29",10,1761836961168]