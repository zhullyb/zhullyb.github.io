[{"data":1,"prerenderedAt":314},["ShallowReactive",2],{"post-2024-02-11-how-to-deploy-onemanager-with-docker":3,"surround-2024-02-11-how-to-deploy-onemanager-with-docker":302,"randomIndex/2024/02/11/how-to-deploy-onemanager-with-docker/":313},{"id":4,"title":5,"body":6,"date":287,"description":152,"extension":288,"meta":289,"navigation":290,"path":291,"rawbody":292,"seo":293,"stem":294,"sticky":295,"tags":296,"__hash__":301},"posts/posts/how-to-deploy-onemanager-with-docker.md","如何使用 docker 部署 onemanager",{"type":7,"value":8,"toc":277},"minimark",[9,12,16,26,28,37,42,73,77,92,95,99,124,131,137,146,162,178,187,196,199,202,212,236,240,270,273],[10,11],"hr",{},[13,14,15],"h2",{"id":15},"部署方法",[17,18,19,20],"p",{},"如果你只是想找一个 OneManager-php 的 Docker 部署方法，直接看 ",[21,22,23],"a",{"href":23,"rel":24},"https://github.com/zhullyb/OneManager-php-docker",[25],"nofollow",[10,27],{},[17,29,30,31,36],{},"一直以来，我都是 ",[21,32,35],{"href":33,"rel":34},"https://github.com/qkqpttgf/OneManager-php",[25],"OneManager-php"," 的忠实用户。这些年来，尽管有 alist 这种 UI 好看，多种网盘高度聚合的项目逐渐取代了 onemanager 的生态位，但 onemanager 支持文件分片上传、上传流量不经服务器的特点还是让我非常满意。前一阵子，glitch 暂停了针对项目自定义域名的支持，因此在我手贱地取消了项目原本绑定的域名后，迫切地需要寻找一个新的部署的平台，只不过 onemanager 项目现在列出的方案都不太让我满意，因此我就萌生出了在 vps 上自己部署的想法。",[38,39,41],"h3",{"id":40},"docker-镜像选用","Docker 镜像选用",[17,43,44,45,49,50,55,56,60,61,64,65,68,69,72],{},"vps 上自己部署 php 项目，最简单的方法是使用 Docker，",[46,47,48],"del",{},"使用 Docker 就可以免去配置 nginx 或者同类产品的 php-fpm 配置","才怪。我打开 Docker 提供的 ",[21,51,54],{"href":52,"rel":53},"https://hub.docker.com/_/php",[25],"php 官方镜像","，最小的镜像是带",[57,58,59],"code",{},"-cli","后缀的，这个镜像就不适合进行部署，php 内置的开发服务器是单线程的，当同时打开两个网页访问开发服务器的时候，其中一个网页就会卡住；以",[57,62,63],{},"-fpm","结尾的镜像变体很明显，仍然需要去 nginx 或同类产品的配置文件那边去配置 fpm，这给部署了好几次 php 项目的我带来的心理阴影；剩下一个就是",[57,66,67],{},"-apache","后缀、使用 apache server 提供 php 服务的镜像，体积虽然大了点，但好在操作简单，只需要将 php 文件放进 ",[57,70,71],{},"/var/www/html","，启用 php 的相关拓展，启用 apache 的相关功能即可。",[13,74,76],{"id":75},"php-拓展","php 拓展",[17,78,79,80,83,84,87,88,91],{},"php 的拓展可以使用镜像自带的 ",[57,81,82],{},"docker-php-ext-install"," 和 ",[57,85,86],{},"docker-php-ext-enable"," 命令进行操作，此外还有一个 ",[57,89,90],{},"docker-php-ext-configure"," 命令可以配置相关的拓展，不过我并不是 php 开发者，不熟悉拓展有什么好配置的。",[17,93,94],{},"OneManager-php 没有依赖任何的 php 拓展，因此这个步骤可以直接跳过。",[13,96,98],{"id":97},"apache-server-配置","Apache Server 配置",[17,100,101,102,105,106,105,109,105,112,105,115,105,118,105,121,123],{},"和 php 拓展一样，镜像内也提供了几个命令进行 Apache Server 的配置，分别为 ",[57,103,104],{},"a2disconf","、",[57,107,108],{},"a2dismod",[57,110,111],{},"a2dissite",[57,113,114],{},"a2enconf",[57,116,117],{},"a2enmod",[57,119,120],{},"a2ensite",[57,122,120],{},"。",[17,125,126,127,130],{},"OneManager-php 在部署的时候依赖于 Apache Server 的 rewrite 的模块，因此在 Dockerfile 中需要使用 ",[57,128,129],{},"a2enmod rewrite"," 开启 rewrite 支持。至于别的 Apache Server 配置，都可以通过项目中的 .htaccess 文件进行配置。",[13,132,134],{"id":133},"htaccess-文件纠错",[46,135,136],{},".htaccess 文件纠错",[17,138,139],{},[46,140,141,142,145],{},"在 OneManager-php 仓库中，",[57,143,144],{},".htaccess"," 文件有一些小问题。",[147,148,153],"pre",{"className":149,"code":150,"language":151,"meta":152,"style":152},"language-htaccess shiki shiki-themes one-light one-dark-pro","RewriteRule ^(.*) index.php?/$1 [L]\n","htaccess","",[57,154,155],{"__ignoreMap":152},[156,157,160],"span",{"class":158,"line":159},"line",1,[156,161,150],{},[17,163,164],{},[46,165,166,167,170,171,105,174,177],{},"这行配置原本是将访问的路径追加到 ",[57,168,169],{},"index.php?/"," 后面的意思，但 一旦路径中出现了 ",[57,172,173],{},"[",[57,175,176],{},"]"," 或者空格等字符时，会触发 Apache 自带的保护，因此我们将这行改成下面这个样子即可。",[147,179,181],{"className":149,"code":180,"language":151,"meta":152,"style":152},"RewriteRule ^(.*) index.php [QSA,L]\n",[57,182,183],{"__ignoreMap":152},[156,184,185],{"class":158,"line":159},[156,186,180],{},[17,188,189,190,195],{},"原项目合并了",[21,191,194],{"href":192,"rel":193},"https://github.com/qkqpttgf/OneManager-php/pull/716",[25],"我的 PR","，因此这一过程不再需要。",[13,197,198],{"id":198},"处理文件权限问题",[17,200,201],{},"OneManager-php 在运行过程中，会有针对配置文件的读写操作，此外还内置了一键更新的功能，因此会对路径内的文件进行读写，我们需要确保 php 在运行过程中有权限对这些文件进行读写。",[17,203,204,205,207,208,211],{},"可以直接将 ",[57,206,71],{}," 路径的所有权转给 ",[57,209,210],{},"www-data"," 用户。",[147,213,217],{"className":214,"code":215,"language":216,"meta":152,"style":152},"language-bash shiki shiki-themes one-light one-dark-pro","chown -R www-data:www-data /var/www/html\n","bash",[57,218,219],{"__ignoreMap":152},[156,220,221,225,229,233],{"class":158,"line":159},[156,222,224],{"class":223},"sAdtL","chown",[156,226,228],{"class":227},"sAGMh"," -R",[156,230,232],{"class":231},"sDhpE"," www-data:www-data",[156,234,235],{"class":231}," /var/www/html\n",[13,237,239],{"id":238},"最终的-dockerfile","最终的 Dockerfile",[147,241,245],{"className":242,"code":243,"language":244,"meta":152,"style":152},"language-dockerfile shiki shiki-themes one-light one-dark-pro","FROM php:8-apache\nRUN a2enmod rewrite\nCOPY OneManager-php /var/www/html\nRUN chown -R www-data:www-data /var/www/html\n","dockerfile",[57,246,247,252,258,264],{"__ignoreMap":152},[156,248,249],{"class":158,"line":159},[156,250,251],{},"FROM php:8-apache\n",[156,253,255],{"class":158,"line":254},2,[156,256,257],{},"RUN a2enmod rewrite\n",[156,259,261],{"class":158,"line":260},3,[156,262,263],{},"COPY OneManager-php /var/www/html\n",[156,265,267],{"class":158,"line":266},4,[156,268,269],{},"RUN chown -R www-data:www-data /var/www/html\n",[17,271,272],{},"其实一共就 4 行，还是挺简单的。",[274,275,276],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}",{"title":152,"searchDepth":254,"depth":254,"links":278},[279,282,283,284,285,286],{"id":15,"depth":254,"text":15,"children":280},[281],{"id":40,"depth":260,"text":41},{"id":75,"depth":254,"text":76},{"id":97,"depth":254,"text":98},{"id":133,"depth":254,"text":136},{"id":198,"depth":254,"text":198},{"id":238,"depth":254,"text":239},"2024-02-11 16:30:29","md",{},true,"/2024/02/11/how-to-deploy-onemanager-with-docker","---\ntitle: 如何使用 docker 部署 onemanager\ndate: 2024-02-11 16:30:29\nsticky:\ntags:\n- PHP\n- OneDrive\n- OpenSource Project\n- Docker\n---\n\n***\n\n## 部署方法\n\n如果你只是想找一个 OneManager-php 的 Docker 部署方法，直接看 [https://github.com/zhullyb/OneManager-php-docker](https://github.com/zhullyb/OneManager-php-docker)\n\n***\n\n一直以来，我都是 [OneManager-php](https://github.com/qkqpttgf/OneManager-php) 的忠实用户。这些年来，尽管有 alist 这种 UI 好看，多种网盘高度聚合的项目逐渐取代了 onemanager 的生态位，但 onemanager 支持文件分片上传、上传流量不经服务器的特点还是让我非常满意。前一阵子，glitch 暂停了针对项目自定义域名的支持，因此在我手贱地取消了项目原本绑定的域名后，迫切地需要寻找一个新的部署的平台，只不过 onemanager 项目现在列出的方案都不太让我满意，因此我就萌生出了在 vps 上自己部署的想法。\n\n### Docker 镜像选用\n\nvps 上自己部署 php 项目，最简单的方法是使用 Docker，~~使用 Docker 就可以免去配置 nginx 或者同类产品的 php-fpm 配置~~才怪。我打开 Docker 提供的 [php 官方镜像](https://hub.docker.com/_/php)，最小的镜像是带`-cli`后缀的，这个镜像就不适合进行部署，php 内置的开发服务器是单线程的，当同时打开两个网页访问开发服务器的时候，其中一个网页就会卡住；以`-fpm`结尾的镜像变体很明显，仍然需要去 nginx 或同类产品的配置文件那边去配置 fpm，这给部署了好几次 php 项目的我带来的心理阴影；剩下一个就是`-apache`后缀、使用 apache server 提供 php 服务的镜像，体积虽然大了点，但好在操作简单，只需要将 php 文件放进 `/var/www/html`，启用 php 的相关拓展，启用 apache 的相关功能即可。\n\n## php 拓展\n\nphp 的拓展可以使用镜像自带的 `docker-php-ext-install` 和 `docker-php-ext-enable` 命令进行操作，此外还有一个 `docker-php-ext-configure` 命令可以配置相关的拓展，不过我并不是 php 开发者，不熟悉拓展有什么好配置的。\n\nOneManager-php 没有依赖任何的 php 拓展，因此这个步骤可以直接跳过。\n\n## Apache Server 配置\n\n和 php 拓展一样，镜像内也提供了几个命令进行 Apache Server 的配置，分别为 `a2disconf`、`a2dismod`、`a2dissite`、`a2enconf`、`a2enmod`、`a2ensite`、`a2ensite`。\n\nOneManager-php 在部署的时候依赖于 Apache Server 的 rewrite 的模块，因此在 Dockerfile 中需要使用 `a2enmod rewrite` 开启 rewrite 支持。至于别的 Apache Server 配置，都可以通过项目中的 .htaccess 文件进行配置。\n\n## ~~.htaccess 文件纠错~~\n\n~~在 OneManager-php 仓库中，`.htaccess` 文件有一些小问题。~~\n\n```htaccess\nRewriteRule ^(.*) index.php?/$1 [L]\n```\n\n~~这行配置原本是将访问的路径追加到 `index.php?/` 后面的意思，但 一旦路径中出现了 `[`、`]` 或者空格等字符时，会触发 Apache 自带的保护，因此我们将这行改成下面这个样子即可。~~\n\n```htaccess\nRewriteRule ^(.*) index.php [QSA,L]\n```\n\n原项目合并了[我的 PR](https://github.com/qkqpttgf/OneManager-php/pull/716)，因此这一过程不再需要。\n\n## 处理文件权限问题\n\nOneManager-php 在运行过程中，会有针对配置文件的读写操作，此外还内置了一键更新的功能，因此会对路径内的文件进行读写，我们需要确保 php 在运行过程中有权限对这些文件进行读写。\n\n可以直接将 `/var/www/html` 路径的所有权转给 `www-data` 用户。\n\n```bash\nchown -R www-data:www-data /var/www/html\n```\n\n## 最终的 Dockerfile\n\n```dockerfile\nFROM php:8-apache\nRUN a2enmod rewrite\nCOPY OneManager-php /var/www/html\nRUN chown -R www-data:www-data /var/www/html\n```\n\n其实一共就 4 行，还是挺简单的。\n",{"title":5,"description":152},"posts/how-to-deploy-onemanager-with-docker",false,[297,298,299,300],"PHP","OneDrive","OpenSource Project","Docker","kpCmLUq6JFIkpWdeF652ogcAO0FxdkJD3MzGwS4XqEA",[303,308],{"title":304,"path":305,"stem":306,"date":307,"children":-1},"在 Linux 下使用 mitmproxy 抓取 HTTPS 流量","/2024/02/29/capture-https-traffic-on-linux-with-mitmproxy","posts/capture-https-traffic-on-linux-with-mitmproxy","2024-02-29 22:03:58",{"title":309,"path":310,"stem":311,"date":312,"children":-1},"crontab 中简单的@语法糖","/2024/02/08/extra-usage-for-crontab","posts/extra-usage-for-crontab","2024-02-08 17:21:31",6,1761739880157]