[{"data":1,"prerenderedAt":200},["ShallowReactive",2],{"post-2024-06-30-dynamic-public-ip-and-ddns-for-rustdesk":3,"surround-2024-06-30-dynamic-public-ip-and-ddns-for-rustdesk":188,"randomIndex/2024/06/30/dynamic-public-ip-and-ddns-for-rustdesk/":199},{"id":4,"title":5,"body":6,"date":171,"description":12,"extension":172,"meta":173,"navigation":174,"path":175,"rawbody":176,"seo":177,"stem":178,"sticky":179,"tags":180,"__hash__":187},"posts/posts/dynamic-public-ip-and-ddns-for-rustdesk.md","使用动态公网 ip + ddns 实现 rustdesk 的 ip 直连",{"type":7,"value":8,"toc":164},"minimark",[9,13,16,19,24,27,30,37,40,57,117,120,123,126,129,134,137,142,149,152,155,160],[10,11,12],"p",{},"最近跟风整了一台 n100 的迷你主机装了个 Archlinux 当 HomeServer，搭配上了显卡欺骗器，平常一直远程使用，因此需要实现稳定的远程桌面连接。开源软件 Rustdesk 本身对 Linux 的适配尚可，可惜官方提供的服务器位于境外，且前一阵子因为诈骗相关的风波使得官方对连接做出了一些限制，应当使用自建服务器或者 ip 直连。",[10,14,15],{},"单从网络安全的角度出发，最佳实践应该是通过 wireguard 或者别的协议先接入局域网，然后使用局域网内的 ip 直连，这是最稳妥的，但我有点懒，而且我可能会在多个设备上都有控制 HomeServer 的需求，给所有设备配置 wireguard 是一件挺麻烦的事情，因此我决定放弃安全性，直接公网裸奔。",[10,17,18],{},"在学校宿舍的电信宽带提供了一个动态公网 ip，因此只需要设置好 ddns 和端口转发就可以拿到一个固定的 domain + port 提供给 rustdesk 直连。",[20,21,23],"h2",{"id":22},"在被控端-rustdesk-允许直连访问","在被控端 Rustdesk 允许直连访问",[10,25,26],{},"在「设置」中的「安全」一栏选择「解锁安全设置」，拉到最下面的「安全」栏，勾选「允许 IP 直接访问」，并选择一个端口，范围在 1000 ~35535 之间且不要被本地的其他程序占用，Rustdesk 的默认值为 21118。",[10,28,29],{},"可以直接在局域网内的另一台设备进行测试，直接在 Rustdesk 中输入被控端的局域网 ip 和刚刚设置的端口，看看能不能访问得通，如果不行可能需要排查一下被控端访问墙设置的问题。",[10,31,32],{},[33,34],"img",{"alt":35,"src":36},"","https://static.031130.xyz/uploads/2024/08/12/66814701cf7ce.webp",[20,38,39],{"id":39},"ddns",[10,41,42,43,50,51,56],{},"由于我的域名是交给 cloudflare 进行解析的，就找了个",[44,45,49],"a",{"href":46,"rel":47},"https://github.com/yulewang/cloudflare-api-v4-ddns/",[48],"nofollow","支持 cloudflare 的 ddns 脚本","，大致的部署过程可以参考 ",[44,52,55],{"href":53,"rel":54},"https://www.rclogs.com/2023/06/%25e8%2587%25aa%25e5%25bb%25ba%25e5%259f%25ba%25e4%25ba%258ecloudflare%25e7%259a%2584ddns",[48],"「自建基于Cloudflare的DDNS」","，不过我小改了一下脚本中获取公网 ipv4 的方式，直接 ssh 到路由器上获取当前的 ipv4 地址，不依赖外部的服务。",[58,59,63],"pre",{"className":60,"code":61,"language":62,"meta":35,"style":35},"language-bash shiki shiki-themes github-light github-dark","WAN_IP=`ssh -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa root@192.168.1.1 'ip -br a' | grep pppoe-wan | awk '{print $3}'`\n","bash",[64,65,66],"code",{"__ignoreMap":35},[67,68,71,75,79,83,87,91,94,97,100,103,106,109,111,114],"span",{"class":69,"line":70},"line",1,[67,72,74],{"class":73},"sVt8B","WAN_IP",[67,76,78],{"class":77},"szBVR","=",[67,80,82],{"class":81},"sZZnC","`",[67,84,86],{"class":85},"sScJk","ssh",[67,88,90],{"class":89},"sj4cs"," -o",[67,92,93],{"class":81}," HostKeyAlgorithms=+ssh-rsa ",[67,95,96],{"class":89},"-o",[67,98,99],{"class":81}," PubkeyAcceptedKeyTypes=+ssh-rsa root@192.168.1.1 'ip -br a' ",[67,101,102],{"class":77},"|",[67,104,105],{"class":85}," grep",[67,107,108],{"class":81}," pppoe-wan ",[67,110,102],{"class":77},[67,112,113],{"class":85}," awk",[67,115,116],{"class":81}," '{print $3}'`\n",[10,118,119],{},"理论上来说，有不少路由器自身就支持不少域名解析商",[20,121,122],{"id":122},"端口转发",[10,124,125],{},"端口转发需要在路由器的后台设置进行，我这里路由器使用的是 openwrt 系统，大部分路由器应该都支持这个操作。",[10,127,128],{},"在「网络」-「防火墙」",[10,130,131],{},[33,132],{"alt":35,"src":133},"https://static.031130.xyz/uploads/2024/08/12/6681635804e68.webp",[10,135,136],{},"选择「端口转发」",[10,138,139],{},[33,140],{"alt":35,"src":141},"https://static.031130.xyz/uploads/2024/08/12/66817e416534c.webp",[10,143,144,145,148],{},"新建端口转发，共享名随便填，外部端口是你最终要在主控端输入的端口，内部 IP 地址是被控机 的 IP 地址，可以用 ",[64,146,147],{},"ip -br a"," 命令看到，内部端口就是上文在 Rustdesk 指定的端口号。",[20,150,151],{"id":151},"效果",[10,153,154],{},"可以直接在主控端口输入 ddns 的域名和端口号，实现远程控制",[10,156,157],{},[33,158],{"alt":35,"src":159},"https://static.031130.xyz/uploads/2024/08/12/66817f77aae7e.webp",[161,162,163],"style",{},"html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":35,"searchDepth":165,"depth":165,"links":166},2,[167,168,169,170],{"id":22,"depth":165,"text":23},{"id":39,"depth":165,"text":39},{"id":122,"depth":165,"text":122},{"id":151,"depth":165,"text":151},"2024-06-30 18:15:00","md",{},true,"/2024/06/30/dynamic-public-ip-and-ddns-for-rustdesk","---\ntitle: 使用动态公网 ip + ddns 实现 rustdesk 的 ip 直连\ndate: 2024-06-30 18:15:00\nsticky:\ntags:\n- Linux\n- OpenSource Project\n- Shell Script\n- Rustdesk\n- Router\n- HomeServer\n---\n\n最近跟风整了一台 n100 的迷你主机装了个 Archlinux 当 HomeServer，搭配上了显卡欺骗器，平常一直远程使用，因此需要实现稳定的远程桌面连接。开源软件 Rustdesk 本身对 Linux 的适配尚可，可惜官方提供的服务器位于境外，且前一阵子因为诈骗相关的风波使得官方对连接做出了一些限制，应当使用自建服务器或者 ip 直连。\n\n单从网络安全的角度出发，最佳实践应该是通过 wireguard 或者别的协议先接入局域网，然后使用局域网内的 ip 直连，这是最稳妥的，但我有点懒，而且我可能会在多个设备上都有控制 HomeServer 的需求，给所有设备配置 wireguard 是一件挺麻烦的事情，因此我决定放弃安全性，直接公网裸奔。\n\n在学校宿舍的电信宽带提供了一个动态公网 ip，因此只需要设置好 ddns 和端口转发就可以拿到一个固定的 domain + port 提供给 rustdesk 直连。\n\n## 在被控端 Rustdesk 允许直连访问\n\n在「设置」中的「安全」一栏选择「解锁安全设置」，拉到最下面的「安全」栏，勾选「允许 IP 直接访问」，并选择一个端口，范围在 1000 ~35535 之间且不要被本地的其他程序占用，Rustdesk 的默认值为 21118。\n\n可以直接在局域网内的另一台设备进行测试，直接在 Rustdesk 中输入被控端的局域网 ip 和刚刚设置的端口，看看能不能访问得通，如果不行可能需要排查一下被控端访问墙设置的问题。\n\n![](https://static.031130.xyz/uploads/2024/08/12/66814701cf7ce.webp)\n\n## ddns\n\n由于我的域名是交给 cloudflare 进行解析的，就找了个[支持 cloudflare 的 ddns 脚本](https://github.com/yulewang/cloudflare-api-v4-ddns/)，大致的部署过程可以参考 [「自建基于Cloudflare的DDNS」](https://www.rclogs.com/2023/06/%25e8%2587%25aa%25e5%25bb%25ba%25e5%259f%25ba%25e4%25ba%258ecloudflare%25e7%259a%2584ddns)，不过我小改了一下脚本中获取公网 ipv4 的方式，直接 ssh 到路由器上获取当前的 ipv4 地址，不依赖外部的服务。\n\n```bash\nWAN_IP=`ssh -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa root@192.168.1.1 'ip -br a' | grep pppoe-wan | awk '{print $3}'`\n```\n\n理论上来说，有不少路由器自身就支持不少域名解析商\n\n## 端口转发\n\n端口转发需要在路由器的后台设置进行，我这里路由器使用的是 openwrt 系统，大部分路由器应该都支持这个操作。\n\n在「网络」-「防火墙」\n\n![](https://static.031130.xyz/uploads/2024/08/12/6681635804e68.webp)\n\n选择「端口转发」\n\n![](https://static.031130.xyz/uploads/2024/08/12/66817e416534c.webp)\n\n新建端口转发，共享名随便填，外部端口是你最终要在主控端输入的端口，内部 IP 地址是被控机 的 IP 地址，可以用 `ip -br a` 命令看到，内部端口就是上文在 Rustdesk 指定的端口号。\n\n## 效果\n\n可以直接在主控端口输入 ddns 的域名和端口号，实现远程控制\n\n![](https://static.031130.xyz/uploads/2024/08/12/66817f77aae7e.webp)\n",{"title":5,"description":12},"posts/dynamic-public-ip-and-ddns-for-rustdesk",false,[181,182,183,184,185,186],"Linux","OpenSource Project","Shell Script","Rustdesk","Router","HomeServer","j97CXOwYzIWldoH0dIH7J72nSolE67KgowFDXMPhGpA",[189,194],{"title":190,"path":191,"stem":192,"date":193,"children":-1},"在 Arch Linux 下配置使用 HP Laser 103w 打印机无线打印","/2024/07/14/config-hp-laser-103w-printer-for-archlinux","posts/config-hp-laser-103w-printer-for-archlinux","2024-07-14 18:30:33",{"title":195,"path":196,"stem":197,"date":198,"children":-1},"使用 Windows 虚拟机运行虚拟专用网客户端为 Linux 提供内网环境","/2024/05/23/setup-network-environment-for-non-linux-vpn-client-with-virtual-machine","posts/setup-network-environment-for-non-linux-vpn-client-with-virtual-machine","2024-05-23 01:07:44",13,1761699273299]