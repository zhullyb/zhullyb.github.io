[{"data":1,"prerenderedAt":341},["ShallowReactive",2],{"post-2024-09-24-log-last-water-boiling-water-with-sunlogin-adapter-power-consumption":3,"surround-2024-09-24-log-last-water-boiling-water-with-sunlogin-adapter-power-consumption":329,"randomIndex/2024/09/24/log-last-water-boiling-water-with-sunlogin-adapter-power-consumption/":340},{"id":4,"title":5,"body":6,"date":313,"description":314,"extension":315,"meta":316,"navigation":317,"path":318,"rawbody":319,"seo":320,"stem":321,"sticky":322,"tags":323,"__hash__":328},"posts/posts/log-last-water-boiling-water-with-sunlogin-adapter-power-consumption.md","使用向日葵智能插座 C2 用电记录推算宿舍上次烧水时间",{"type":7,"value":8,"toc":311},"minimark",[9,17,24,31,48,55,62,68,91,94,100,103,194,210,213,295,298,301,307],[10,11,12,13],"p",{},"我宿舍里入口处有一张公用的桌子，上面有一个烧水壶。根据生活经验，当用手摸烧水壶外壳能感受到明显热量时，水壶内的水大概是两小时内烧的，绝对能喝；但如果用手摸烧水壶外壳感受不到明显热量时，水壶内的水就不知道是什么时候烧的了，可能是三小时前，也可能是三天前。此时，在不寻求外部科学仪器介入的情况下，唯一能做的是询问寝室成员上一次水是谁烧的，是什么时候烧的。但寝室成员并不总是能够及时回答，可能在睡觉，也可能不在寝室里，",[14,15,16],"del",{},"还有可能出现记忆错乱。",[10,18,19,20],{},"因此，",[21,22,23],"strong",{},"我们需要一种可靠的方案获取上一次烧水时间。",[10,25,26,27,30],{},"前两天陪黄老板出门吃宵夜的时候和他提到了这个难题，我提出在烧水壶附近加装物理按钮，按动时向局域网内的 HomeServer 发送请求记录准确的烧水时间。他提出可以在烧水壶前加装智能插座，使用智能插座的耗电量来推算上一次烧水时间。这是一个可行方案，上次烧水时间不需要分钟级的精准度，",[21,28,29],{},"小时级的精准度在这个需求上完全够用","，这是一个更好的方案。",[10,32,33,34,39,40,43,44,47],{},"在「",[35,36,38],"a",{"href":37},"/2023/11/01/unveiling-sunflower-smart-adapter-api-intercepting-utilizing-api-android-packet-sniffing/","使用 Root 后的安卓手机获取向日葵智能插座 C2 的开关 api","」这篇文章中，我有过抓包向日葵官方 app 的流量数据的经验，这一次直接故技重施。很可惜，我发现",[21,41,42],{},"用电量数据","并不能直接从局域网内向智能插座获取，",[21,45,46],{},"必须要从向日葵官方的服务器拉下来","。其实想想也知道，用电数据一旦精确到小时级，日积月累下来会对硬件的存储提出一定的挑战，而比较合理的方案就是由硬件向官方的服务器每小时通信一次记录下来。",[10,49,50],{},[51,52],"img",{"alt":53,"src":54},"抓包","https://static.031130.xyz/uploads/2024/09/24/bd6b0bdbab1da.webp",[10,56,57,58,61],{},"不过好消息是，",[21,59,60],{},"官方服务器的这个接口并没有进行鉴权","，不需要进行额外的操作，一条 curl 命令都能下载下来。",[10,63,64],{},[51,65],{"alt":66,"src":67},"curl 命令下载用电量数据","https://static.031130.xyz/uploads/2024/09/24/bf4ad72e00044.webp",[69,70,75],"pre",{"className":71,"code":72,"language":73,"meta":74,"style":74},"language-shell shiki shiki-themes github-light github-dark","https://sl-api.oray.com/smartplug/powerconsumes/${SN}\n","shell","",[76,77,78],"code",{"__ignoreMap":74},[79,80,83,87],"span",{"class":81,"line":82},"line",1,[79,84,86],{"class":85},"sScJk","https://sl-api.oray.com/smartplug/powerconsumes/$",[79,88,90],{"class":89},"sZZnC","{SN}\n",[10,92,93],{},"SN 码也不需要自己去抓包，直接在官方应用的设备关于页面就能看到。",[10,95,96],{},[51,97],{"alt":98,"src":99},"关于页面","https://static.031130.xyz/uploads/2024/09/24/edca671f53571.webp",[10,101,102],{},"json 数据的结构很明显，最外层是一个 Array，里面有若干个 object",[69,104,108],{"className":105,"code":106,"language":107,"meta":74,"style":74},"language-json shiki shiki-themes github-light github-dark","[\n  {\n    \"consume\": 0,\n    \"starttime\": 1727125200,\n    \"endtime\": 1727128740,\n    \"index\": 0\n  },\n...\n]\n","json",[76,109,110,116,122,138,151,164,175,181,188],{"__ignoreMap":74},[79,111,112],{"class":81,"line":82},[79,113,115],{"class":114},"sVt8B","[\n",[79,117,119],{"class":81,"line":118},2,[79,120,121],{"class":114},"  {\n",[79,123,125,129,132,135],{"class":81,"line":124},3,[79,126,128],{"class":127},"sj4cs","    \"consume\"",[79,130,131],{"class":114},": ",[79,133,134],{"class":127},"0",[79,136,137],{"class":114},",\n",[79,139,141,144,146,149],{"class":81,"line":140},4,[79,142,143],{"class":127},"    \"starttime\"",[79,145,131],{"class":114},[79,147,148],{"class":127},"1727125200",[79,150,137],{"class":114},[79,152,154,157,159,162],{"class":81,"line":153},5,[79,155,156],{"class":127},"    \"endtime\"",[79,158,131],{"class":114},[79,160,161],{"class":127},"1727128740",[79,163,137],{"class":114},[79,165,167,170,172],{"class":81,"line":166},6,[79,168,169],{"class":127},"    \"index\"",[79,171,131],{"class":114},[79,173,174],{"class":127},"0\n",[79,176,178],{"class":81,"line":177},7,[79,179,180],{"class":114},"  },\n",[79,182,184],{"class":81,"line":183},8,[79,185,187],{"class":186},"s7hpK","...\n",[79,189,191],{"class":81,"line":190},9,[79,192,193],{"class":114},"]\n",[195,196,197,201,204,207],"ul",{},[198,199,200],"li",{},"consume: 这段时间消耗的用电量，单位 Wh",[198,202,203],{},"starttime: 开始时间，unix 时间戳",[198,205,206],{},"endtime: 结束时间，unix 时间戳",[198,208,209],{},"index: 智能插座的第几个孔位（为插排预留的参数，智能插座只有 0 这一个位置）",[10,211,212],{},"所以我们要做的就是每小时下载一次这个 json 文件，需要时从 json 中寻找上一次用电量较高的小时，取那个小时的 starttime 时间戳转换为东八区人类可读的时间即可。",[69,214,218],{"className":215,"code":216,"language":217,"meta":74,"style":74},"language-python shiki shiki-themes github-light github-dark","def last_water():\n    with open('power.json', 'r') as f:\n        powers = json.load(f)\n    for i in powers:\n        if i.get('consume') >= 30:\n            t = i.get('starttime')\n            break\n    last_water_time = datetime.datetime.fromtimestamp(t)\n    now = datetime.datetime.now()\n    time_delta = now - last_water_time\n    sec = time_delta.total_seconds()\n    hours = sec / 3600\n    lwt_str = last_water_time.strftime('%m月%d日%H点')\n    return f\"上次烧水时间为「{lwt_str}」，距离现在「{hours:.2f}」小时\"\n","python",[76,219,220,225,230,235,240,245,250,255,260,265,271,277,283,289],{"__ignoreMap":74},[79,221,222],{"class":81,"line":82},[79,223,224],{},"def last_water():\n",[79,226,227],{"class":81,"line":118},[79,228,229],{},"    with open('power.json', 'r') as f:\n",[79,231,232],{"class":81,"line":124},[79,233,234],{},"        powers = json.load(f)\n",[79,236,237],{"class":81,"line":140},[79,238,239],{},"    for i in powers:\n",[79,241,242],{"class":81,"line":153},[79,243,244],{},"        if i.get('consume') >= 30:\n",[79,246,247],{"class":81,"line":166},[79,248,249],{},"            t = i.get('starttime')\n",[79,251,252],{"class":81,"line":177},[79,253,254],{},"            break\n",[79,256,257],{"class":81,"line":183},[79,258,259],{},"    last_water_time = datetime.datetime.fromtimestamp(t)\n",[79,261,262],{"class":81,"line":190},[79,263,264],{},"    now = datetime.datetime.now()\n",[79,266,268],{"class":81,"line":267},10,[79,269,270],{},"    time_delta = now - last_water_time\n",[79,272,274],{"class":81,"line":273},11,[79,275,276],{},"    sec = time_delta.total_seconds()\n",[79,278,280],{"class":81,"line":279},12,[79,281,282],{},"    hours = sec / 3600\n",[79,284,286],{"class":81,"line":285},13,[79,287,288],{},"    lwt_str = last_water_time.strftime('%m月%d日%H点')\n",[79,290,292],{"class":81,"line":291},14,[79,293,294],{},"    return f\"上次烧水时间为「{lwt_str}」，距离现在「{hours:.2f}」小时\"\n",[10,296,297],{},"至于每小时下载的任务，我这里是使用 crontab + curl 命令实现的，用 python 写个死循环跑也可以。",[10,299,300],{},"那么数据都取到了，剩下的就是人机交互的部分，这部分夸张点的可以写 web，写小程序，甚至写个安卓应用挂个桌面插件，想怎么做都可以。我这里就单纯将数据接入 qqbot 扔到了宿舍群，简单写了个关键词触发。",[10,302,303],{},[51,304],{"alt":305,"src":306},"宿舍群","https://static.031130.xyz/uploads/2024/09/24/1a0637d61471f.webp",[308,309,310],"style",{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .s7hpK, html code.shiki .s7hpK{--shiki-default:#B31D28;--shiki-default-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic}",{"title":74,"searchDepth":118,"depth":118,"links":312},[],"2024-09-24 05:17:47","我宿舍里入口处有一张公用的桌子，上面有一个烧水壶。根据生活经验，当用手摸烧水壶外壳能感受到明显热量时，水壶内的水大概是两小时内烧的，绝对能喝；但如果用手摸烧水壶外壳感受不到明显热量时，水壶内的水就不知道是什么时候烧的了，可能是三小时前，也可能是三天前。此时，在不寻求外部科学仪器介入的情况下，唯一能做的是询问寝室成员上一次水是谁烧的，是什么时候烧的。但寝室成员并不总是能够及时回答，可能在睡觉，也可能不在寝室里，还有可能出现记忆错乱。","md",{},true,"/2024/09/24/log-last-water-boiling-water-with-sunlogin-adapter-power-consumption","---\ntitle: 使用向日葵智能插座 C2 用电记录推算宿舍上次烧水时间\ndate: 2024-09-24 05:17:47\nsticky:\ntags:\n- IoT\n- Python\n- Hardware\n- Bot\n---\n\n我宿舍里入口处有一张公用的桌子，上面有一个烧水壶。根据生活经验，当用手摸烧水壶外壳能感受到明显热量时，水壶内的水大概是两小时内烧的，绝对能喝；但如果用手摸烧水壶外壳感受不到明显热量时，水壶内的水就不知道是什么时候烧的了，可能是三小时前，也可能是三天前。此时，在不寻求外部科学仪器介入的情况下，唯一能做的是询问寝室成员上一次水是谁烧的，是什么时候烧的。但寝室成员并不总是能够及时回答，可能在睡觉，也可能不在寝室里，~~还有可能出现记忆错乱。~~\n\n因此，**我们需要一种可靠的方案获取上一次烧水时间。**\n\n前两天陪黄老板出门吃宵夜的时候和他提到了这个难题，我提出在烧水壶附近加装物理按钮，按动时向局域网内的 HomeServer 发送请求记录准确的烧水时间。他提出可以在烧水壶前加装智能插座，使用智能插座的耗电量来推算上一次烧水时间。这是一个可行方案，上次烧水时间不需要分钟级的精准度，**小时级的精准度在这个需求上完全够用**，这是一个更好的方案。\n\n在「[使用 Root 后的安卓手机获取向日葵智能插座 C2 的开关 api](/2023/11/01/unveiling-sunflower-smart-adapter-api-intercepting-utilizing-api-android-packet-sniffing/)」这篇文章中，我有过抓包向日葵官方 app 的流量数据的经验，这一次直接故技重施。很可惜，我发现**用电量数据**并不能直接从局域网内向智能插座获取，**必须要从向日葵官方的服务器拉下来**。其实想想也知道，用电数据一旦精确到小时级，日积月累下来会对硬件的存储提出一定的挑战，而比较合理的方案就是由硬件向官方的服务器每小时通信一次记录下来。\n\n![抓包](https://static.031130.xyz/uploads/2024/09/24/bd6b0bdbab1da.webp)\n\n不过好消息是，**官方服务器的这个接口并没有进行鉴权**，不需要进行额外的操作，一条 curl 命令都能下载下来。\n\n![curl 命令下载用电量数据](https://static.031130.xyz/uploads/2024/09/24/bf4ad72e00044.webp)\n\n```shell\nhttps://sl-api.oray.com/smartplug/powerconsumes/${SN}\n```\n\nSN 码也不需要自己去抓包，直接在官方应用的设备关于页面就能看到。\n\n![关于页面](https://static.031130.xyz/uploads/2024/09/24/edca671f53571.webp)\n\njson 数据的结构很明显，最外层是一个 Array，里面有若干个 object\n\n```json\n[\n  {\n    \"consume\": 0,\n    \"starttime\": 1727125200,\n    \"endtime\": 1727128740,\n    \"index\": 0\n  },\n...\n]\n```\n\n- consume: 这段时间消耗的用电量，单位 Wh\n- starttime: 开始时间，unix 时间戳\n- endtime: 结束时间，unix 时间戳\n- index: 智能插座的第几个孔位（为插排预留的参数，智能插座只有 0 这一个位置）\n\n所以我们要做的就是每小时下载一次这个 json 文件，需要时从 json 中寻找上一次用电量较高的小时，取那个小时的 starttime 时间戳转换为东八区人类可读的时间即可。\n\n```python\ndef last_water():\n    with open('power.json', 'r') as f:\n        powers = json.load(f)\n    for i in powers:\n        if i.get('consume') >= 30:\n            t = i.get('starttime')\n            break\n    last_water_time = datetime.datetime.fromtimestamp(t)\n    now = datetime.datetime.now()\n    time_delta = now - last_water_time\n    sec = time_delta.total_seconds()\n    hours = sec / 3600\n    lwt_str = last_water_time.strftime('%m月%d日%H点')\n    return f\"上次烧水时间为「{lwt_str}」，距离现在「{hours:.2f}」小时\"\n```\n\n至于每小时下载的任务，我这里是使用 crontab + curl 命令实现的，用 python 写个死循环跑也可以。\n\n那么数据都取到了，剩下的就是人机交互的部分，这部分夸张点的可以写 web，写小程序，甚至写个安卓应用挂个桌面插件，想怎么做都可以。我这里就单纯将数据接入 qqbot 扔到了宿舍群，简单写了个关键词触发。\n\n![宿舍群](https://static.031130.xyz/uploads/2024/09/24/1a0637d61471f.webp)\n",{"title":5,"description":314},"posts/log-last-water-boiling-water-with-sunlogin-adapter-power-consumption",false,[324,325,326,327],"IoT","Python","Hardware","Bot","yZtaewyoTAeoMNLkBM5-apAx3Xk5-qv-y-UwprHo13k",[330,335],{"title":331,"path":332,"stem":333,"date":334,"children":-1},"基于 JavaScript 的 Hexo Fluid 主题 banner 随机背景图实现","/2024/09/25/random-banner-backgroud-image-implement-for-hexo-fluid-with-javascript","posts/random-banner-backgroud-image-implement-for-hexo-fluid-with-javascript","2024-09-25 00:00:42",{"title":336,"path":337,"stem":338,"date":339,"children":-1},"使用 Caddy 反向代理 dockerhub 需要几步？","/2024/09/21/how-to-reverse-proxy-dockerhub-with-caddy","posts/how-to-reverse-proxy-dockerhub-with-caddy","2024-09-21 01:29:17",22,1761699275098]