[{"data":1,"prerenderedAt":342},["ShallowReactive",2],{"post-2024-09-24-log-last-water-boiling-water-with-sunlogin-adapter-power-consumption":3,"surround-2024-09-24-log-last-water-boiling-water-with-sunlogin-adapter-power-consumption":330,"randomIndex/2024/09/24/log-last-water-boiling-water-with-sunlogin-adapter-power-consumption/":341},{"id":4,"title":5,"body":6,"date":314,"description":315,"extension":316,"meta":317,"navigation":318,"path":319,"rawbody":320,"seo":321,"stem":322,"sticky":323,"tags":324,"__hash__":329},"posts/posts/log-last-water-boiling-water-with-sunlogin-adapter-power-consumption.md","使用向日葵智能插座 C2 用电记录推算宿舍上次烧水时间",{"type":7,"value":8,"toc":312},"minimark",[9,17,24,31,48,55,62,68,91,94,100,103,195,211,214,296,299,302,308],[10,11,12,13],"p",{},"我宿舍里入口处有一张公用的桌子，上面有一个烧水壶。根据生活经验，当用手摸烧水壶外壳能感受到明显热量时，水壶内的水大概是两小时内烧的，绝对能喝；但如果用手摸烧水壶外壳感受不到明显热量时，水壶内的水就不知道是什么时候烧的了，可能是三小时前，也可能是三天前。此时，在不寻求外部科学仪器介入的情况下，唯一能做的是询问寝室成员上一次水是谁烧的，是什么时候烧的。但寝室成员并不总是能够及时回答，可能在睡觉，也可能不在寝室里，",[14,15,16],"del",{},"还有可能出现记忆错乱。",[10,18,19,20],{},"因此，",[21,22,23],"strong",{},"我们需要一种可靠的方案获取上一次烧水时间。",[10,25,26,27,30],{},"前两天陪黄老板出门吃宵夜的时候和他提到了这个难题，我提出在烧水壶附近加装物理按钮，按动时向局域网内的 HomeServer 发送请求记录准确的烧水时间。他提出可以在烧水壶前加装智能插座，使用智能插座的耗电量来推算上一次烧水时间。这是一个可行方案，上次烧水时间不需要分钟级的精准度，",[21,28,29],{},"小时级的精准度在这个需求上完全够用","，这是一个更好的方案。",[10,32,33,34,39,40,43,44,47],{},"在「",[35,36,38],"a",{"href":37},"/2023/11/01/unveiling-sunflower-smart-adapter-api-intercepting-utilizing-api-android-packet-sniffing/","使用 Root 后的安卓手机获取向日葵智能插座 C2 的开关 api","」这篇文章中，我有过抓包向日葵官方 app 的流量数据的经验，这一次直接故技重施。很可惜，我发现",[21,41,42],{},"用电量数据","并不能直接从局域网内向智能插座获取，",[21,45,46],{},"必须要从向日葵官方的服务器拉下来","。其实想想也知道，用电数据一旦精确到小时级，日积月累下来会对硬件的存储提出一定的挑战，而比较合理的方案就是由硬件向官方的服务器每小时通信一次记录下来。",[10,49,50],{},[51,52],"img",{"alt":53,"src":54},"抓包","https://static.031130.xyz/uploads/2024/09/24/bd6b0bdbab1da.webp",[10,56,57,58,61],{},"不过好消息是，",[21,59,60],{},"官方服务器的这个接口并没有进行鉴权","，不需要进行额外的操作，一条 curl 命令都能下载下来。",[10,63,64],{},[51,65],{"alt":66,"src":67},"curl 命令下载用电量数据","https://static.031130.xyz/uploads/2024/09/24/bf4ad72e00044.webp",[69,70,75],"pre",{"className":71,"code":72,"language":73,"meta":74,"style":74},"language-shell shiki shiki-themes one-light one-dark-pro","https://sl-api.oray.com/smartplug/powerconsumes/${SN}\n","shell","",[76,77,78],"code",{"__ignoreMap":74},[79,80,83,87],"span",{"class":81,"line":82},"line",1,[79,84,86],{"class":85},"sAdtL","https://sl-api.oray.com/smartplug/powerconsumes/$",[79,88,90],{"class":89},"sDhpE","{SN}\n",[10,92,93],{},"SN 码也不需要自己去抓包，直接在官方应用的设备关于页面就能看到。",[10,95,96],{},[51,97],{"alt":98,"src":99},"关于页面","https://static.031130.xyz/uploads/2024/09/24/edca671f53571.webp",[10,101,102],{},"json 数据的结构很明显，最外层是一个 Array，里面有若干个 object",[69,104,108],{"className":105,"code":106,"language":107,"meta":74,"style":74},"language-json shiki shiki-themes one-light one-dark-pro","[\n  {\n    \"consume\": 0,\n    \"starttime\": 1727125200,\n    \"endtime\": 1727128740,\n    \"index\": 0\n  },\n...\n]\n","json",[76,109,110,116,122,139,152,165,176,182,189],{"__ignoreMap":74},[79,111,112],{"class":81,"line":82},[79,113,115],{"class":114},"s5ixo","[\n",[79,117,119],{"class":81,"line":118},2,[79,120,121],{"class":114},"  {\n",[79,123,125,129,132,136],{"class":81,"line":124},3,[79,126,128],{"class":127},"sJa8x","    \"consume\"",[79,130,131],{"class":114},": ",[79,133,135],{"class":134},"sAGMh","0",[79,137,138],{"class":114},",\n",[79,140,142,145,147,150],{"class":81,"line":141},4,[79,143,144],{"class":127},"    \"starttime\"",[79,146,131],{"class":114},[79,148,149],{"class":134},"1727125200",[79,151,138],{"class":114},[79,153,155,158,160,163],{"class":81,"line":154},5,[79,156,157],{"class":127},"    \"endtime\"",[79,159,131],{"class":114},[79,161,162],{"class":134},"1727128740",[79,164,138],{"class":114},[79,166,168,171,173],{"class":81,"line":167},6,[79,169,170],{"class":127},"    \"index\"",[79,172,131],{"class":114},[79,174,175],{"class":134},"0\n",[79,177,179],{"class":81,"line":178},7,[79,180,181],{"class":114},"  },\n",[79,183,185],{"class":81,"line":184},8,[79,186,188],{"class":187},"sUNH4","...\n",[79,190,192],{"class":81,"line":191},9,[79,193,194],{"class":114},"]\n",[196,197,198,202,205,208],"ul",{},[199,200,201],"li",{},"consume: 这段时间消耗的用电量，单位 Wh",[199,203,204],{},"starttime: 开始时间，unix 时间戳",[199,206,207],{},"endtime: 结束时间，unix 时间戳",[199,209,210],{},"index: 智能插座的第几个孔位（为插排预留的参数，智能插座只有 0 这一个位置）",[10,212,213],{},"所以我们要做的就是每小时下载一次这个 json 文件，需要时从 json 中寻找上一次用电量较高的小时，取那个小时的 starttime 时间戳转换为东八区人类可读的时间即可。",[69,215,219],{"className":216,"code":217,"language":218,"meta":74,"style":74},"language-python shiki shiki-themes one-light one-dark-pro","def last_water():\n    with open('power.json', 'r') as f:\n        powers = json.load(f)\n    for i in powers:\n        if i.get('consume') >= 30:\n            t = i.get('starttime')\n            break\n    last_water_time = datetime.datetime.fromtimestamp(t)\n    now = datetime.datetime.now()\n    time_delta = now - last_water_time\n    sec = time_delta.total_seconds()\n    hours = sec / 3600\n    lwt_str = last_water_time.strftime('%m月%d日%H点')\n    return f\"上次烧水时间为「{lwt_str}」，距离现在「{hours:.2f}」小时\"\n","python",[76,220,221,226,231,236,241,246,251,256,261,266,272,278,284,290],{"__ignoreMap":74},[79,222,223],{"class":81,"line":82},[79,224,225],{},"def last_water():\n",[79,227,228],{"class":81,"line":118},[79,229,230],{},"    with open('power.json', 'r') as f:\n",[79,232,233],{"class":81,"line":124},[79,234,235],{},"        powers = json.load(f)\n",[79,237,238],{"class":81,"line":141},[79,239,240],{},"    for i in powers:\n",[79,242,243],{"class":81,"line":154},[79,244,245],{},"        if i.get('consume') >= 30:\n",[79,247,248],{"class":81,"line":167},[79,249,250],{},"            t = i.get('starttime')\n",[79,252,253],{"class":81,"line":178},[79,254,255],{},"            break\n",[79,257,258],{"class":81,"line":184},[79,259,260],{},"    last_water_time = datetime.datetime.fromtimestamp(t)\n",[79,262,263],{"class":81,"line":191},[79,264,265],{},"    now = datetime.datetime.now()\n",[79,267,269],{"class":81,"line":268},10,[79,270,271],{},"    time_delta = now - last_water_time\n",[79,273,275],{"class":81,"line":274},11,[79,276,277],{},"    sec = time_delta.total_seconds()\n",[79,279,281],{"class":81,"line":280},12,[79,282,283],{},"    hours = sec / 3600\n",[79,285,287],{"class":81,"line":286},13,[79,288,289],{},"    lwt_str = last_water_time.strftime('%m月%d日%H点')\n",[79,291,293],{"class":81,"line":292},14,[79,294,295],{},"    return f\"上次烧水时间为「{lwt_str}」，距离现在「{hours:.2f}」小时\"\n",[10,297,298],{},"至于每小时下载的任务，我这里是使用 crontab + curl 命令实现的，用 python 写个死循环跑也可以。",[10,300,301],{},"那么数据都取到了，剩下的就是人机交互的部分，这部分夸张点的可以写 web，写小程序，甚至写个安卓应用挂个桌面插件，想怎么做都可以。我这里就单纯将数据接入 qqbot 扔到了宿舍群，简单写了个关键词触发。",[10,303,304],{},[51,305],{"alt":306,"src":307},"宿舍群","https://static.031130.xyz/uploads/2024/09/24/1a0637d61471f.webp",[309,310,311],"style",{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sUNH4, html code.shiki .sUNH4{--shiki-default:white;--shiki-dark:#FFFFFF}",{"title":74,"searchDepth":118,"depth":118,"links":313},[],"2024-09-24 05:17:47","我宿舍里入口处有一张公用的桌子，上面有一个烧水壶。根据生活经验，当用手摸烧水壶外壳能感受到明显热量时，水壶内的水大概是两小时内烧的，绝对能喝；但如果用手摸烧水壶外壳感受不到明显热量时，水壶内的水就不知道是什么时候烧的了，可能是三小时前，也可能是三天前。此时，在不寻求外部科学仪器介入的情况下，唯一能做的是询问寝室成员上一次水是谁烧的，是什么时候烧的。但寝室成员并不总是能够及时回答，可能在睡觉，也可能不在寝室里，还有可能出现记忆错乱。","md",{},true,"/2024/09/24/log-last-water-boiling-water-with-sunlogin-adapter-power-consumption","---\ntitle: 使用向日葵智能插座 C2 用电记录推算宿舍上次烧水时间\ndate: 2024-09-24 05:17:47\nsticky:\ntags:\n- IoT\n- Python\n- Hardware\n- Bot\n---\n\n我宿舍里入口处有一张公用的桌子，上面有一个烧水壶。根据生活经验，当用手摸烧水壶外壳能感受到明显热量时，水壶内的水大概是两小时内烧的，绝对能喝；但如果用手摸烧水壶外壳感受不到明显热量时，水壶内的水就不知道是什么时候烧的了，可能是三小时前，也可能是三天前。此时，在不寻求外部科学仪器介入的情况下，唯一能做的是询问寝室成员上一次水是谁烧的，是什么时候烧的。但寝室成员并不总是能够及时回答，可能在睡觉，也可能不在寝室里，~~还有可能出现记忆错乱。~~\n\n因此，**我们需要一种可靠的方案获取上一次烧水时间。**\n\n前两天陪黄老板出门吃宵夜的时候和他提到了这个难题，我提出在烧水壶附近加装物理按钮，按动时向局域网内的 HomeServer 发送请求记录准确的烧水时间。他提出可以在烧水壶前加装智能插座，使用智能插座的耗电量来推算上一次烧水时间。这是一个可行方案，上次烧水时间不需要分钟级的精准度，**小时级的精准度在这个需求上完全够用**，这是一个更好的方案。\n\n在「[使用 Root 后的安卓手机获取向日葵智能插座 C2 的开关 api](/2023/11/01/unveiling-sunflower-smart-adapter-api-intercepting-utilizing-api-android-packet-sniffing/)」这篇文章中，我有过抓包向日葵官方 app 的流量数据的经验，这一次直接故技重施。很可惜，我发现**用电量数据**并不能直接从局域网内向智能插座获取，**必须要从向日葵官方的服务器拉下来**。其实想想也知道，用电数据一旦精确到小时级，日积月累下来会对硬件的存储提出一定的挑战，而比较合理的方案就是由硬件向官方的服务器每小时通信一次记录下来。\n\n![抓包](https://static.031130.xyz/uploads/2024/09/24/bd6b0bdbab1da.webp)\n\n不过好消息是，**官方服务器的这个接口并没有进行鉴权**，不需要进行额外的操作，一条 curl 命令都能下载下来。\n\n![curl 命令下载用电量数据](https://static.031130.xyz/uploads/2024/09/24/bf4ad72e00044.webp)\n\n```shell\nhttps://sl-api.oray.com/smartplug/powerconsumes/${SN}\n```\n\nSN 码也不需要自己去抓包，直接在官方应用的设备关于页面就能看到。\n\n![关于页面](https://static.031130.xyz/uploads/2024/09/24/edca671f53571.webp)\n\njson 数据的结构很明显，最外层是一个 Array，里面有若干个 object\n\n```json\n[\n  {\n    \"consume\": 0,\n    \"starttime\": 1727125200,\n    \"endtime\": 1727128740,\n    \"index\": 0\n  },\n...\n]\n```\n\n- consume: 这段时间消耗的用电量，单位 Wh\n- starttime: 开始时间，unix 时间戳\n- endtime: 结束时间，unix 时间戳\n- index: 智能插座的第几个孔位（为插排预留的参数，智能插座只有 0 这一个位置）\n\n所以我们要做的就是每小时下载一次这个 json 文件，需要时从 json 中寻找上一次用电量较高的小时，取那个小时的 starttime 时间戳转换为东八区人类可读的时间即可。\n\n```python\ndef last_water():\n    with open('power.json', 'r') as f:\n        powers = json.load(f)\n    for i in powers:\n        if i.get('consume') >= 30:\n            t = i.get('starttime')\n            break\n    last_water_time = datetime.datetime.fromtimestamp(t)\n    now = datetime.datetime.now()\n    time_delta = now - last_water_time\n    sec = time_delta.total_seconds()\n    hours = sec / 3600\n    lwt_str = last_water_time.strftime('%m月%d日%H点')\n    return f\"上次烧水时间为「{lwt_str}」，距离现在「{hours:.2f}」小时\"\n```\n\n至于每小时下载的任务，我这里是使用 crontab + curl 命令实现的，用 python 写个死循环跑也可以。\n\n那么数据都取到了，剩下的就是人机交互的部分，这部分夸张点的可以写 web，写小程序，甚至写个安卓应用挂个桌面插件，想怎么做都可以。我这里就单纯将数据接入 qqbot 扔到了宿舍群，简单写了个关键词触发。\n\n![宿舍群](https://static.031130.xyz/uploads/2024/09/24/1a0637d61471f.webp)\n",{"title":5,"description":315},"posts/log-last-water-boiling-water-with-sunlogin-adapter-power-consumption",false,[325,326,327,328],"IoT","Python","Hardware","Bot","uajGUXVi_CRBzlcsKVfI8YLXAMwvyH30_BdqbrvSgac",[331,336],{"title":332,"path":333,"stem":334,"date":335,"children":-1},"基于 JavaScript 的 Hexo Fluid 主题 banner 随机背景图实现","/2024/09/25/random-banner-backgroud-image-implement-for-hexo-fluid-with-javascript","posts/random-banner-backgroud-image-implement-for-hexo-fluid-with-javascript","2024-09-25 00:00:42",{"title":337,"path":338,"stem":339,"date":340,"children":-1},"使用 Caddy 反向代理 dockerhub 需要几步？","/2024/09/21/how-to-reverse-proxy-dockerhub-with-caddy","posts/how-to-reverse-proxy-dockerhub-with-caddy","2024-09-21 01:29:17",26,1761883467121]