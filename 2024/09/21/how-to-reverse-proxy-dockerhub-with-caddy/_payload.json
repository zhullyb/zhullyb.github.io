[{"data":1,"prerenderedAt":458},["ShallowReactive",2],{"post-2024-09-21-how-to-reverse-proxy-dockerhub-with-caddy":3,"surround-2024-09-21-how-to-reverse-proxy-dockerhub-with-caddy":447,"randomIndex/2024/09/21/how-to-reverse-proxy-dockerhub-with-caddy/":77},{"id":4,"title":5,"body":6,"date":431,"description":12,"extension":432,"meta":433,"navigation":80,"path":435,"rawbody":436,"seo":437,"stem":438,"sticky":439,"tags":440,"__hash__":446},"posts/posts/how-to-reverse-proxy-dockerhub-with-caddy.md","使用 Caddy 反向代理 dockerhub 需要几步？",{"type":7,"value":8,"toc":423},"minimark",[9,13,16,19,23,32,35,45,111,114,130,137,155,158,164,167,173,177,183,188,193,199,205,208,214,217,325,328,332,343,358,361,375,378,381,388,396,399,402,405,412,419],[10,11,12],"p",{},"几个月前，由于众所周知的原因，中国大陆境内失去了所有公共的 dockerhub 镜像（或者说是反代）。网上随即涌现了一批自建 dockerhub 反代的，有用 Cloudflare Workers 的，也有用 nginx 的，甚至还有自建 registry 的。",[10,14,15],{},"我使用 caddy 去反代 dockerhub 的原因很简单，一是配置简单，二是通过一台国内访问质量良好的境外服务器进行反向代理的访问质量会比 Cloudflare 减速器好很多。",[10,17,18],{},"在网上一阵搜索后，并没有发现任何使用 caddy 去反向代理 dockerhub 的文章， 于是本文应运而生。",[20,21,22],"h2",{"id":22},"遇事不决先抓包",[10,24,25,26,31],{},"为了弄清楚 docker 从 dockerhub 拉取镜像的过程，需要先对网络请求进行抓包。具体的抓包方案我使用的是 mitmproxy，手动信任 ssl 证书的操作在「",[27,28,30],"a",{"href":29},"/2024/02/29/capture-https-traffic-on-linux-with-mitmproxy/","在 Linux 下使用 mitmproxy 抓取 HTTPS 流量","」这篇文章中已经讲过了，只需要配置 dockerd 使用本机的 8080 端口进行代理即可。",[10,33,34],{},"docker pull 时，是调用 dockerd 进行镜像拉取，而 dockerd 在绝大多数发行版上都是由 systemd 进程直接启用了，在 shell 中直接设置环境变量的方式并不能进行代理，而透明代理的方案会引入大量无关请求，增加流量分析的难度。",[10,36,37,38,44],{},"比较好的方案是直接在 systemd 服务这一层设置好代理的环境变量，我这里参考的是「",[27,39,43],{"href":40,"rel":41},"https://yeasy.gitbook.io/docker_practice/advanced_network/http_https_proxy",[42],"nofollow","配置 HTTP/HTTPS 网络代理 | Docker — 从入门到实践","」这篇文章。",[46,47,52],"pre",{"className":48,"code":49,"language":50,"meta":51,"style":51},"language-bash shiki shiki-themes github-light github-dark","$ cat /etc/systemd/system/docker.service.d/http-proxy.conf \n\n[Service]\nEnvironment=\"HTTP_PROXY=http://127.0.0.1:8080\"\nEnvironment=\"HTTPS_PROXY=http://127.0.0.1:8080\"\n","bash","",[53,54,55,75,82,88,101],"code",{"__ignoreMap":51},[56,57,60,64,68,71],"span",{"class":58,"line":59},"line",1,[56,61,63],{"class":62},"sScJk","$",[56,65,67],{"class":66},"sZZnC"," cat",[56,69,70],{"class":66}," /etc/systemd/system/docker.service.d/http-proxy.conf",[56,72,74],{"class":73},"sVt8B"," \n",[56,76,78],{"class":58,"line":77},2,[56,79,81],{"emptyLinePlaceholder":80},true,"\n",[56,83,85],{"class":58,"line":84},3,[56,86,87],{"class":73},"[Service]\n",[56,89,91,94,98],{"class":58,"line":90},4,[56,92,93],{"class":73},"Environment",[56,95,97],{"class":96},"szBVR","=",[56,99,100],{"class":66},"\"HTTP_PROXY=http://127.0.0.1:8080\"\n",[56,102,104,106,108],{"class":58,"line":103},5,[56,105,93],{"class":73},[56,107,97],{"class":96},[56,109,110],{"class":66},"\"HTTPS_PROXY=http://127.0.0.1:8080\"\n",[10,112,113],{},"重启完 systemd 服务，万事俱备，我拉取了一个较小的 docker 镜像，顺利得到了预期的结果。",[46,115,117],{"className":48,"code":116,"language":50,"meta":51,"style":51},"docker pull svenstaro/miniserve:latest\n",[53,118,119],{"__ignoreMap":51},[56,120,121,124,127],{"class":58,"line":59},[56,122,123],{"class":62},"docker",[56,125,126],{"class":66}," pull",[56,128,129],{"class":66}," svenstaro/miniserve:latest\n",[10,131,132],{},[133,134],"img",{"alt":135,"src":136},"抓包结果","https://static.031130.xyz/uploads/2024/09/21/acbee0959be78.webp",[10,138,139,140,143,144,147,148,150,151,154],{},"docker 先请求了 ",[53,141,142],{},"registry-1.docker.io"," 得到了 401 的 http 状态码后转去访问了 ",[53,145,146],{},"auth.docker.io","，得到了 Authorization 字段以后重新请求 ",[53,149,142],{},"，获取源数据后被 307 转发到了 ",[53,152,153],{},"production.cloudflare.docker.com"," 上。",[10,156,157],{},"其中，第一个 401 响应的响应头中，用 WWW-Authenticate 字段标注了 auth 鉴权的域",[10,159,160],{},[133,161],{"alt":162,"src":163},"WWW-Authenticate","https://static.031130.xyz/uploads/2024/09/21/e905c55e76a25.webp",[10,165,166],{},"而 307 响应的响应头中，使用 Location 字段标注了被转发到的 url",[10,168,169],{},[133,170],{"alt":171,"src":172},"Location","https://static.031130.xyz/uploads/2024/09/21/6a2e0bf6a8284.webp",[20,174,176],{"id":175},"三个域名都需要反向代理嘛","三个域名都需要反向代理嘛？",[10,178,179,180,182],{},"首先，作为我们提供反代服务的入口，",[53,181,142],{}," 一定是需要代理的，否则就无法提供反代后的服务。",[10,184,185,187],{},[53,186,146],{}," 只出现了一次，需要反代嘛？根据它在境内的访问质量，恐怕是需要反代的。",[10,189,190],{},[133,191],{"alt":146,"src":192},"https://static.031130.xyz/uploads/2024/09/21/4a70c8cac6a4c.webp",[10,194,195,196,198],{},"最后就是 ",[53,197,153],{}," ，这也是我们最终下载镜像文件的地方，99% 以上的流量都是打到这里去的，而 cloudflare 在境内的访问质量是知名的减速器，完全不可以信赖。",[10,200,201],{},[202,203,204],"strong",{},"因此，三个域名都需要反代。",[20,206,207],{"id":207},"如何反代",[10,209,210,211,213],{},"分三个域名各自代理，在 ",[53,212,142],{}," 那一块进行特殊处理，将响应头中的 WWW-Authenticate 和 location 字段进行关键词替换，将原域名替换为反代域名。",[10,215,216],{},"最后的成果大概就是这个样子:",[46,218,222],{"className":219,"code":220,"language":221,"meta":51,"style":51},"language-caddyfile shiki shiki-themes github-light github-dark","dockerhub.example.com {\n    reverse_proxy https://registry-1.docker.io {\n        header_up Host {http.reverse_proxy.upstream.hostport}\n        header_down WWW-Authenticate \"https://auth.docker.io\" \"https://auth.dockerhub.example.com\"\n        header_down Location \"https://production.cloudflare.docker.com\" \"https://production.dockerhub.example.com\"\n    }\n}\n\nauth.dockerhub.example.com {\n    reverse_proxy https://auth.docker.io {\n        header_up Host {http.reverse_proxy.upstream.hostport}\n    }\n}\n\nproduction.dockerhub.example.com {\n    reverse_proxy https://production.cloudflare.docker.com {\n        header_up Host {http.reverse_proxy.upstream.hostport}\n    }\n}\n","caddyfile",[53,223,224,229,234,239,244,249,255,261,266,272,278,283,288,293,298,304,310,315,320],{"__ignoreMap":51},[56,225,226],{"class":58,"line":59},[56,227,228],{},"dockerhub.example.com {\n",[56,230,231],{"class":58,"line":77},[56,232,233],{},"    reverse_proxy https://registry-1.docker.io {\n",[56,235,236],{"class":58,"line":84},[56,237,238],{},"        header_up Host {http.reverse_proxy.upstream.hostport}\n",[56,240,241],{"class":58,"line":90},[56,242,243],{},"        header_down WWW-Authenticate \"https://auth.docker.io\" \"https://auth.dockerhub.example.com\"\n",[56,245,246],{"class":58,"line":103},[56,247,248],{},"        header_down Location \"https://production.cloudflare.docker.com\" \"https://production.dockerhub.example.com\"\n",[56,250,252],{"class":58,"line":251},6,[56,253,254],{},"    }\n",[56,256,258],{"class":58,"line":257},7,[56,259,260],{},"}\n",[56,262,264],{"class":58,"line":263},8,[56,265,81],{"emptyLinePlaceholder":80},[56,267,269],{"class":58,"line":268},9,[56,270,271],{},"auth.dockerhub.example.com {\n",[56,273,275],{"class":58,"line":274},10,[56,276,277],{},"    reverse_proxy https://auth.docker.io {\n",[56,279,281],{"class":58,"line":280},11,[56,282,238],{},[56,284,286],{"class":58,"line":285},12,[56,287,254],{},[56,289,291],{"class":58,"line":290},13,[56,292,260],{},[56,294,296],{"class":58,"line":295},14,[56,297,81],{"emptyLinePlaceholder":80},[56,299,301],{"class":58,"line":300},15,[56,302,303],{},"production.dockerhub.example.com {\n",[56,305,307],{"class":58,"line":306},16,[56,308,309],{},"    reverse_proxy https://production.cloudflare.docker.com {\n",[56,311,313],{"class":58,"line":312},17,[56,314,238],{},[56,316,318],{"class":58,"line":317},18,[56,319,254],{},[56,321,323],{"class":58,"line":322},19,[56,324,260],{},[10,326,327],{},"PS: 推荐后两个域名使用 CNAME 解析到第一个域名，这样后面更改解析的时候更方便一些。",[20,329,331],{"id":330},"如何设置-docker-使用反代","如何设置 docker 使用反代",[10,333,334,335,338,339,342],{},"可以直接在 ",[53,336,337],{},"docker pull"," 和 ",[53,340,341],{},"docker run"," 的命令前加上域名，比如原本的",[46,344,346],{"className":48,"code":345,"language":50,"meta":51,"style":51},"docker run hello-world\n",[53,347,348],{"__ignoreMap":51},[56,349,350,352,355],{"class":58,"line":59},[56,351,123],{"class":62},[56,353,354],{"class":66}," run",[56,356,357],{"class":66}," hello-world\n",[10,359,360],{},"改成",[46,362,364],{"className":48,"code":363,"language":50,"meta":51,"style":51},"docker run dockerhub.example.com/library/hello-world\n",[53,365,366],{"__ignoreMap":51},[56,367,368,370,372],{"class":58,"line":59},[56,369,123],{"class":62},[56,371,354],{"class":66},[56,373,374],{"class":66}," dockerhub.example.com/library/hello-world\n",[10,376,377],{},"（如果原本的镜像由 dockerhub 官方提供，没有用户名，路径需要加上 “library”）",[379,380],"hr",{},[10,382,383,384,387],{},"也可以选择以前的方案，创建或修改 ",[53,385,386],{},"/etc/docker/daemon.json","：",[46,389,394],{"className":390,"code":392,"language":393},[391],"language-text","sudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json \u003C\u003C-'EOF'\n{\n    \"registry-mirrors\": [\n        \"https://dockerhub.example.com\"\n    ]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n","text",[53,395,392],{"__ignoreMap":51},[20,397,398],{"id":398},"验证",[10,400,401],{},"一般来说，能够在中国大陆境内的网络质量下较快地下拉镜像本身就代表反代成功了，但保险起见可以像本文的第一部分一样抓个包，看看是不是都走了自己的域名了。",[20,403,404],{"id":404},"参见",[10,406,407],{},[27,408,411],{"href":409,"rel":410},"https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6",[42],"国内的 Docker Hub 镜像加速器，由国内教育机构与各大云服务商提供的镜像加速服务",[10,413,414],{},[27,415,418],{"href":416,"rel":417},"https://blog.hentioe.dev/posts/unhindered-accesss-dockerhub.html",[42],"无障碍访问 Docker Hub 的各种方法（自建 registry、Cloudflare 加速、Nginx 反代、代理 Docker 网络） | 绅士喵",[420,421,422],"style",{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":51,"searchDepth":77,"depth":77,"links":424},[425,426,427,428,429,430],{"id":22,"depth":77,"text":22},{"id":175,"depth":77,"text":176},{"id":207,"depth":77,"text":207},{"id":330,"depth":77,"text":331},{"id":398,"depth":77,"text":398},{"id":404,"depth":77,"text":404},"2024-09-21 01:29:17","md",{"index_img":434},"https://static.031130.xyz/uploads/2024/09/21/46f7b160e6e56.webp","/2024/09/21/how-to-reverse-proxy-dockerhub-with-caddy","---\ntitle: 使用 Caddy 反向代理 dockerhub 需要几步？\ndate: 2024-09-21 01:29:17\nsticky:\nindex_img: https://static.031130.xyz/uploads/2024/09/21/46f7b160e6e56.webp\ntags:\n- Caddy\n- Docker\n- mitmproxy\n- Network\n- Linux\n---\n\n几个月前，由于众所周知的原因，中国大陆境内失去了所有公共的 dockerhub 镜像（或者说是反代）。网上随即涌现了一批自建 dockerhub 反代的，有用 Cloudflare Workers 的，也有用 nginx 的，甚至还有自建 registry 的。\n\n我使用 caddy 去反代 dockerhub 的原因很简单，一是配置简单，二是通过一台国内访问质量良好的境外服务器进行反向代理的访问质量会比 Cloudflare 减速器好很多。\n\n在网上一阵搜索后，并没有发现任何使用 caddy 去反向代理 dockerhub 的文章， 于是本文应运而生。\n\n## 遇事不决先抓包\n\n为了弄清楚 docker 从 dockerhub 拉取镜像的过程，需要先对网络请求进行抓包。具体的抓包方案我使用的是 mitmproxy，手动信任 ssl 证书的操作在「[在 Linux 下使用 mitmproxy 抓取 HTTPS 流量](/2024/02/29/capture-https-traffic-on-linux-with-mitmproxy/)」这篇文章中已经讲过了，只需要配置 dockerd 使用本机的 8080 端口进行代理即可。\n\ndocker pull 时，是调用 dockerd 进行镜像拉取，而 dockerd 在绝大多数发行版上都是由 systemd 进程直接启用了，在 shell 中直接设置环境变量的方式并不能进行代理，而透明代理的方案会引入大量无关请求，增加流量分析的难度。\n\n比较好的方案是直接在 systemd 服务这一层设置好代理的环境变量，我这里参考的是「[配置 HTTP/HTTPS 网络代理 | Docker — 从入门到实践](https://yeasy.gitbook.io/docker_practice/advanced_network/http_https_proxy)」这篇文章。\n\n```bash\n$ cat /etc/systemd/system/docker.service.d/http-proxy.conf \n\n[Service]\nEnvironment=\"HTTP_PROXY=http://127.0.0.1:8080\"\nEnvironment=\"HTTPS_PROXY=http://127.0.0.1:8080\"\n```\n\n重启完 systemd 服务，万事俱备，我拉取了一个较小的 docker 镜像，顺利得到了预期的结果。\n\n```bash\ndocker pull svenstaro/miniserve:latest\n```\n\n![抓包结果](https://static.031130.xyz/uploads/2024/09/21/acbee0959be78.webp)\n\ndocker 先请求了 `registry-1.docker.io` 得到了 401 的 http 状态码后转去访问了 `auth.docker.io`，得到了 Authorization 字段以后重新请求 `registry-1.docker.io`，获取源数据后被 307 转发到了 `production.cloudflare.docker.com` 上。\n\n其中，第一个 401 响应的响应头中，用 WWW-Authenticate 字段标注了 auth 鉴权的域\n\n![WWW-Authenticate](https://static.031130.xyz/uploads/2024/09/21/e905c55e76a25.webp)\n\n而 307 响应的响应头中，使用 Location 字段标注了被转发到的 url\n\n![Location](https://static.031130.xyz/uploads/2024/09/21/6a2e0bf6a8284.webp)\n\n## 三个域名都需要反向代理嘛？\n\n首先，作为我们提供反代服务的入口，`registry-1.docker.io` 一定是需要代理的，否则就无法提供反代后的服务。\n\n`auth.docker.io` 只出现了一次，需要反代嘛？根据它在境内的访问质量，恐怕是需要反代的。\n\n![auth.docker.io](https://static.031130.xyz/uploads/2024/09/21/4a70c8cac6a4c.webp)\n\n最后就是 `production.cloudflare.docker.com` ，这也是我们最终下载镜像文件的地方，99% 以上的流量都是打到这里去的，而 cloudflare 在境内的访问质量是知名的减速器，完全不可以信赖。\n\n**因此，三个域名都需要反代。**\n\n## 如何反代\n\n分三个域名各自代理，在 `registry-1.docker.io` 那一块进行特殊处理，将响应头中的 WWW-Authenticate 和 location 字段进行关键词替换，将原域名替换为反代域名。\n\n最后的成果大概就是这个样子:\n\n```caddyfile\ndockerhub.example.com {\n\treverse_proxy https://registry-1.docker.io {\n\t\theader_up Host {http.reverse_proxy.upstream.hostport}\n\t\theader_down WWW-Authenticate \"https://auth.docker.io\" \"https://auth.dockerhub.example.com\"\n\t\theader_down Location \"https://production.cloudflare.docker.com\" \"https://production.dockerhub.example.com\"\n\t}\n}\n\nauth.dockerhub.example.com {\n\treverse_proxy https://auth.docker.io {\n\t\theader_up Host {http.reverse_proxy.upstream.hostport}\n\t}\n}\n\nproduction.dockerhub.example.com {\n\treverse_proxy https://production.cloudflare.docker.com {\n\t\theader_up Host {http.reverse_proxy.upstream.hostport}\n\t}\n}\n```\n\nPS: 推荐后两个域名使用 CNAME 解析到第一个域名，这样后面更改解析的时候更方便一些。\n\n## 如何设置 docker 使用反代\n\n可以直接在 `docker pull` 和 `docker run` 的命令前加上域名，比如原本的\n\n```bash\ndocker run hello-world\n```\n\n改成\n\n```bash\ndocker run dockerhub.example.com/library/hello-world\n```\n\n（如果原本的镜像由 dockerhub 官方提供，没有用户名，路径需要加上 “library”）\n\n***\n\n也可以选择以前的方案，创建或修改 `/etc/docker/daemon.json`：\n\n```\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json \u003C\u003C-'EOF'\n{\n    \"registry-mirrors\": [\n        \"https://dockerhub.example.com\"\n    ]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n## 验证\n\n一般来说，能够在中国大陆境内的网络质量下较快地下拉镜像本身就代表反代成功了，但保险起见可以像本文的第一部分一样抓个包，看看是不是都走了自己的域名了。\n\n## 参见\n\n[国内的 Docker Hub 镜像加速器，由国内教育机构与各大云服务商提供的镜像加速服务](https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6)\n\n[无障碍访问 Docker Hub 的各种方法（自建 registry、Cloudflare 加速、Nginx 反代、代理 Docker 网络） | 绅士喵](https://blog.hentioe.dev/posts/unhindered-accesss-dockerhub.html)\n",{"title":5,"description":12},"posts/how-to-reverse-proxy-dockerhub-with-caddy",false,[441,442,443,444,445],"Caddy","Docker","mitmproxy","Network","Linux","gUVRFrtcEjmUtckRBtc3sYpMHEeiDPaNyRL_H3OGMn4",[448,453],{"title":449,"path":450,"stem":451,"date":452,"children":-1},"使用向日葵智能插座 C2 用电记录推算宿舍上次烧水时间","/2024/09/24/log-last-water-boiling-water-with-sunlogin-adapter-power-consumption","posts/log-last-water-boiling-water-with-sunlogin-adapter-power-consumption","2024-09-24 05:17:47",{"title":454,"path":455,"stem":456,"date":457,"children":-1},"将 Rustdesk 中继服务从 Arch Linux 迁移至 Debian","/2024/09/20/migrate-rustdesk-server-from-arch-to-debian","posts/migrate-rustdesk-server-from-arch-to-debian","2024-09-20 03:20:38",1761699629073]