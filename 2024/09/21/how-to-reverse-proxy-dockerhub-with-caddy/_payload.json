[{"data":1,"prerenderedAt":459},["ShallowReactive",2],{"post-2024-09-21-how-to-reverse-proxy-dockerhub-with-caddy":3,"surround-2024-09-21-how-to-reverse-proxy-dockerhub-with-caddy":448,"randomIndex/2024/09/21/how-to-reverse-proxy-dockerhub-with-caddy/":77},{"id":4,"title":5,"body":6,"date":432,"description":12,"extension":433,"meta":434,"navigation":80,"path":436,"rawbody":437,"seo":438,"stem":439,"sticky":440,"tags":441,"__hash__":447},"posts/posts/how-to-reverse-proxy-dockerhub-with-caddy.md","使用 Caddy 反向代理 dockerhub 需要几步？",{"type":7,"value":8,"toc":424},"minimark",[9,13,16,19,23,32,35,45,112,115,131,138,156,159,165,168,174,178,184,189,194,200,206,209,215,218,326,329,333,344,359,362,376,379,382,389,397,400,403,406,413,420],[10,11,12],"p",{},"几个月前，由于众所周知的原因，中国大陆境内失去了所有公共的 dockerhub 镜像（或者说是反代）。网上随即涌现了一批自建 dockerhub 反代的，有用 Cloudflare Workers 的，也有用 nginx 的，甚至还有自建 registry 的。",[10,14,15],{},"我使用 caddy 去反代 dockerhub 的原因很简单，一是配置简单，二是通过一台国内访问质量良好的境外服务器进行反向代理的访问质量会比 Cloudflare 减速器好很多。",[10,17,18],{},"在网上一阵搜索后，并没有发现任何使用 caddy 去反向代理 dockerhub 的文章， 于是本文应运而生。",[20,21,22],"h2",{"id":22},"遇事不决先抓包",[10,24,25,26,31],{},"为了弄清楚 docker 从 dockerhub 拉取镜像的过程，需要先对网络请求进行抓包。具体的抓包方案我使用的是 mitmproxy，手动信任 ssl 证书的操作在「",[27,28,30],"a",{"href":29},"/2024/02/29/capture-https-traffic-on-linux-with-mitmproxy/","在 Linux 下使用 mitmproxy 抓取 HTTPS 流量","」这篇文章中已经讲过了，只需要配置 dockerd 使用本机的 8080 端口进行代理即可。",[10,33,34],{},"docker pull 时，是调用 dockerd 进行镜像拉取，而 dockerd 在绝大多数发行版上都是由 systemd 进程直接启用了，在 shell 中直接设置环境变量的方式并不能进行代理，而透明代理的方案会引入大量无关请求，增加流量分析的难度。",[10,36,37,38,44],{},"比较好的方案是直接在 systemd 服务这一层设置好代理的环境变量，我这里参考的是「",[27,39,43],{"href":40,"rel":41},"https://yeasy.gitbook.io/docker_practice/advanced_network/http_https_proxy",[42],"nofollow","配置 HTTP/HTTPS 网络代理 | Docker — 从入门到实践","」这篇文章。",[46,47,52],"pre",{"className":48,"code":49,"language":50,"meta":51,"style":51},"language-bash shiki shiki-themes one-light one-dark-pro","$ cat /etc/systemd/system/docker.service.d/http-proxy.conf \n\n[Service]\nEnvironment=\"HTTP_PROXY=http://127.0.0.1:8080\"\nEnvironment=\"HTTPS_PROXY=http://127.0.0.1:8080\"\n","bash","",[53,54,55,75,82,88,102],"code",{"__ignoreMap":51},[56,57,60,64,68,71],"span",{"class":58,"line":59},"line",1,[56,61,63],{"class":62},"sAdtL","$",[56,65,67],{"class":66},"sDhpE"," cat",[56,69,70],{"class":66}," /etc/systemd/system/docker.service.d/http-proxy.conf",[56,72,74],{"class":73},"s5ixo"," \n",[56,76,78],{"class":58,"line":77},2,[56,79,81],{"emptyLinePlaceholder":80},true,"\n",[56,83,85],{"class":58,"line":84},3,[56,86,87],{"class":73},"[Service]\n",[56,89,91,95,99],{"class":58,"line":90},4,[56,92,94],{"class":93},"sJa8x","Environment",[56,96,98],{"class":97},"sknuh","=",[56,100,101],{"class":66},"\"HTTP_PROXY=http://127.0.0.1:8080\"\n",[56,103,105,107,109],{"class":58,"line":104},5,[56,106,94],{"class":93},[56,108,98],{"class":97},[56,110,111],{"class":66},"\"HTTPS_PROXY=http://127.0.0.1:8080\"\n",[10,113,114],{},"重启完 systemd 服务，万事俱备，我拉取了一个较小的 docker 镜像，顺利得到了预期的结果。",[46,116,118],{"className":48,"code":117,"language":50,"meta":51,"style":51},"docker pull svenstaro/miniserve:latest\n",[53,119,120],{"__ignoreMap":51},[56,121,122,125,128],{"class":58,"line":59},[56,123,124],{"class":62},"docker",[56,126,127],{"class":66}," pull",[56,129,130],{"class":66}," svenstaro/miniserve:latest\n",[10,132,133],{},[134,135],"img",{"alt":136,"src":137},"抓包结果","https://static.031130.xyz/uploads/2024/09/21/acbee0959be78.webp",[10,139,140,141,144,145,148,149,151,152,155],{},"docker 先请求了 ",[53,142,143],{},"registry-1.docker.io"," 得到了 401 的 http 状态码后转去访问了 ",[53,146,147],{},"auth.docker.io","，得到了 Authorization 字段以后重新请求 ",[53,150,143],{},"，获取源数据后被 307 转发到了 ",[53,153,154],{},"production.cloudflare.docker.com"," 上。",[10,157,158],{},"其中，第一个 401 响应的响应头中，用 WWW-Authenticate 字段标注了 auth 鉴权的域",[10,160,161],{},[134,162],{"alt":163,"src":164},"WWW-Authenticate","https://static.031130.xyz/uploads/2024/09/21/e905c55e76a25.webp",[10,166,167],{},"而 307 响应的响应头中，使用 Location 字段标注了被转发到的 url",[10,169,170],{},[134,171],{"alt":172,"src":173},"Location","https://static.031130.xyz/uploads/2024/09/21/6a2e0bf6a8284.webp",[20,175,177],{"id":176},"三个域名都需要反向代理嘛","三个域名都需要反向代理嘛？",[10,179,180,181,183],{},"首先，作为我们提供反代服务的入口，",[53,182,143],{}," 一定是需要代理的，否则就无法提供反代后的服务。",[10,185,186,188],{},[53,187,147],{}," 只出现了一次，需要反代嘛？根据它在境内的访问质量，恐怕是需要反代的。",[10,190,191],{},[134,192],{"alt":147,"src":193},"https://static.031130.xyz/uploads/2024/09/21/4a70c8cac6a4c.webp",[10,195,196,197,199],{},"最后就是 ",[53,198,154],{}," ，这也是我们最终下载镜像文件的地方，99% 以上的流量都是打到这里去的，而 cloudflare 在境内的访问质量是知名的减速器，完全不可以信赖。",[10,201,202],{},[203,204,205],"strong",{},"因此，三个域名都需要反代。",[20,207,208],{"id":208},"如何反代",[10,210,211,212,214],{},"分三个域名各自代理，在 ",[53,213,143],{}," 那一块进行特殊处理，将响应头中的 WWW-Authenticate 和 location 字段进行关键词替换，将原域名替换为反代域名。",[10,216,217],{},"最后的成果大概就是这个样子:",[46,219,223],{"className":220,"code":221,"language":222,"meta":51,"style":51},"language-caddyfile shiki shiki-themes one-light one-dark-pro","dockerhub.example.com {\n    reverse_proxy https://registry-1.docker.io {\n        header_up Host {http.reverse_proxy.upstream.hostport}\n        header_down WWW-Authenticate \"https://auth.docker.io\" \"https://auth.dockerhub.example.com\"\n        header_down Location \"https://production.cloudflare.docker.com\" \"https://production.dockerhub.example.com\"\n    }\n}\n\nauth.dockerhub.example.com {\n    reverse_proxy https://auth.docker.io {\n        header_up Host {http.reverse_proxy.upstream.hostport}\n    }\n}\n\nproduction.dockerhub.example.com {\n    reverse_proxy https://production.cloudflare.docker.com {\n        header_up Host {http.reverse_proxy.upstream.hostport}\n    }\n}\n","caddyfile",[53,224,225,230,235,240,245,250,256,262,267,273,279,284,289,294,299,305,311,316,321],{"__ignoreMap":51},[56,226,227],{"class":58,"line":59},[56,228,229],{},"dockerhub.example.com {\n",[56,231,232],{"class":58,"line":77},[56,233,234],{},"    reverse_proxy https://registry-1.docker.io {\n",[56,236,237],{"class":58,"line":84},[56,238,239],{},"        header_up Host {http.reverse_proxy.upstream.hostport}\n",[56,241,242],{"class":58,"line":90},[56,243,244],{},"        header_down WWW-Authenticate \"https://auth.docker.io\" \"https://auth.dockerhub.example.com\"\n",[56,246,247],{"class":58,"line":104},[56,248,249],{},"        header_down Location \"https://production.cloudflare.docker.com\" \"https://production.dockerhub.example.com\"\n",[56,251,253],{"class":58,"line":252},6,[56,254,255],{},"    }\n",[56,257,259],{"class":58,"line":258},7,[56,260,261],{},"}\n",[56,263,265],{"class":58,"line":264},8,[56,266,81],{"emptyLinePlaceholder":80},[56,268,270],{"class":58,"line":269},9,[56,271,272],{},"auth.dockerhub.example.com {\n",[56,274,276],{"class":58,"line":275},10,[56,277,278],{},"    reverse_proxy https://auth.docker.io {\n",[56,280,282],{"class":58,"line":281},11,[56,283,239],{},[56,285,287],{"class":58,"line":286},12,[56,288,255],{},[56,290,292],{"class":58,"line":291},13,[56,293,261],{},[56,295,297],{"class":58,"line":296},14,[56,298,81],{"emptyLinePlaceholder":80},[56,300,302],{"class":58,"line":301},15,[56,303,304],{},"production.dockerhub.example.com {\n",[56,306,308],{"class":58,"line":307},16,[56,309,310],{},"    reverse_proxy https://production.cloudflare.docker.com {\n",[56,312,314],{"class":58,"line":313},17,[56,315,239],{},[56,317,319],{"class":58,"line":318},18,[56,320,255],{},[56,322,324],{"class":58,"line":323},19,[56,325,261],{},[10,327,328],{},"PS: 推荐后两个域名使用 CNAME 解析到第一个域名，这样后面更改解析的时候更方便一些。",[20,330,332],{"id":331},"如何设置-docker-使用反代","如何设置 docker 使用反代",[10,334,335,336,339,340,343],{},"可以直接在 ",[53,337,338],{},"docker pull"," 和 ",[53,341,342],{},"docker run"," 的命令前加上域名，比如原本的",[46,345,347],{"className":48,"code":346,"language":50,"meta":51,"style":51},"docker run hello-world\n",[53,348,349],{"__ignoreMap":51},[56,350,351,353,356],{"class":58,"line":59},[56,352,124],{"class":62},[56,354,355],{"class":66}," run",[56,357,358],{"class":66}," hello-world\n",[10,360,361],{},"改成",[46,363,365],{"className":48,"code":364,"language":50,"meta":51,"style":51},"docker run dockerhub.example.com/library/hello-world\n",[53,366,367],{"__ignoreMap":51},[56,368,369,371,373],{"class":58,"line":59},[56,370,124],{"class":62},[56,372,355],{"class":66},[56,374,375],{"class":66}," dockerhub.example.com/library/hello-world\n",[10,377,378],{},"（如果原本的镜像由 dockerhub 官方提供，没有用户名，路径需要加上 “library”）",[380,381],"hr",{},[10,383,384,385,388],{},"也可以选择以前的方案，创建或修改 ",[53,386,387],{},"/etc/docker/daemon.json","：",[46,390,395],{"className":391,"code":393,"language":394},[392],"language-text","sudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json \u003C\u003C-'EOF'\n{\n    \"registry-mirrors\": [\n        \"https://dockerhub.example.com\"\n    ]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n","text",[53,396,393],{"__ignoreMap":51},[20,398,399],{"id":399},"验证",[10,401,402],{},"一般来说，能够在中国大陆境内的网络质量下较快地下拉镜像本身就代表反代成功了，但保险起见可以像本文的第一部分一样抓个包，看看是不是都走了自己的域名了。",[20,404,405],{"id":405},"参见",[10,407,408],{},[27,409,412],{"href":410,"rel":411},"https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6",[42],"国内的 Docker Hub 镜像加速器，由国内教育机构与各大云服务商提供的镜像加速服务",[10,414,415],{},[27,416,419],{"href":417,"rel":418},"https://blog.hentioe.dev/posts/unhindered-accesss-dockerhub.html",[42],"无障碍访问 Docker Hub 的各种方法（自建 registry、Cloudflare 加速、Nginx 反代、代理 Docker 网络） | 绅士喵",[421,422,423],"style",{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sknuh, html code.shiki .sknuh{--shiki-default:#383A42;--shiki-dark:#56B6C2}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":51,"searchDepth":77,"depth":77,"links":425},[426,427,428,429,430,431],{"id":22,"depth":77,"text":22},{"id":176,"depth":77,"text":177},{"id":208,"depth":77,"text":208},{"id":331,"depth":77,"text":332},{"id":399,"depth":77,"text":399},{"id":405,"depth":77,"text":405},"2024-09-21 01:29:17","md",{"index_img":435},"https://static.031130.xyz/uploads/2024/09/21/46f7b160e6e56.webp","/2024/09/21/how-to-reverse-proxy-dockerhub-with-caddy","---\ntitle: 使用 Caddy 反向代理 dockerhub 需要几步？\ndate: 2024-09-21 01:29:17\nsticky:\nindex_img: https://static.031130.xyz/uploads/2024/09/21/46f7b160e6e56.webp\ntags:\n- Caddy\n- Docker\n- mitmproxy\n- Network\n- Linux\n---\n\n几个月前，由于众所周知的原因，中国大陆境内失去了所有公共的 dockerhub 镜像（或者说是反代）。网上随即涌现了一批自建 dockerhub 反代的，有用 Cloudflare Workers 的，也有用 nginx 的，甚至还有自建 registry 的。\n\n我使用 caddy 去反代 dockerhub 的原因很简单，一是配置简单，二是通过一台国内访问质量良好的境外服务器进行反向代理的访问质量会比 Cloudflare 减速器好很多。\n\n在网上一阵搜索后，并没有发现任何使用 caddy 去反向代理 dockerhub 的文章， 于是本文应运而生。\n\n## 遇事不决先抓包\n\n为了弄清楚 docker 从 dockerhub 拉取镜像的过程，需要先对网络请求进行抓包。具体的抓包方案我使用的是 mitmproxy，手动信任 ssl 证书的操作在「[在 Linux 下使用 mitmproxy 抓取 HTTPS 流量](/2024/02/29/capture-https-traffic-on-linux-with-mitmproxy/)」这篇文章中已经讲过了，只需要配置 dockerd 使用本机的 8080 端口进行代理即可。\n\ndocker pull 时，是调用 dockerd 进行镜像拉取，而 dockerd 在绝大多数发行版上都是由 systemd 进程直接启用了，在 shell 中直接设置环境变量的方式并不能进行代理，而透明代理的方案会引入大量无关请求，增加流量分析的难度。\n\n比较好的方案是直接在 systemd 服务这一层设置好代理的环境变量，我这里参考的是「[配置 HTTP/HTTPS 网络代理 | Docker — 从入门到实践](https://yeasy.gitbook.io/docker_practice/advanced_network/http_https_proxy)」这篇文章。\n\n```bash\n$ cat /etc/systemd/system/docker.service.d/http-proxy.conf \n\n[Service]\nEnvironment=\"HTTP_PROXY=http://127.0.0.1:8080\"\nEnvironment=\"HTTPS_PROXY=http://127.0.0.1:8080\"\n```\n\n重启完 systemd 服务，万事俱备，我拉取了一个较小的 docker 镜像，顺利得到了预期的结果。\n\n```bash\ndocker pull svenstaro/miniserve:latest\n```\n\n![抓包结果](https://static.031130.xyz/uploads/2024/09/21/acbee0959be78.webp)\n\ndocker 先请求了 `registry-1.docker.io` 得到了 401 的 http 状态码后转去访问了 `auth.docker.io`，得到了 Authorization 字段以后重新请求 `registry-1.docker.io`，获取源数据后被 307 转发到了 `production.cloudflare.docker.com` 上。\n\n其中，第一个 401 响应的响应头中，用 WWW-Authenticate 字段标注了 auth 鉴权的域\n\n![WWW-Authenticate](https://static.031130.xyz/uploads/2024/09/21/e905c55e76a25.webp)\n\n而 307 响应的响应头中，使用 Location 字段标注了被转发到的 url\n\n![Location](https://static.031130.xyz/uploads/2024/09/21/6a2e0bf6a8284.webp)\n\n## 三个域名都需要反向代理嘛？\n\n首先，作为我们提供反代服务的入口，`registry-1.docker.io` 一定是需要代理的，否则就无法提供反代后的服务。\n\n`auth.docker.io` 只出现了一次，需要反代嘛？根据它在境内的访问质量，恐怕是需要反代的。\n\n![auth.docker.io](https://static.031130.xyz/uploads/2024/09/21/4a70c8cac6a4c.webp)\n\n最后就是 `production.cloudflare.docker.com` ，这也是我们最终下载镜像文件的地方，99% 以上的流量都是打到这里去的，而 cloudflare 在境内的访问质量是知名的减速器，完全不可以信赖。\n\n**因此，三个域名都需要反代。**\n\n## 如何反代\n\n分三个域名各自代理，在 `registry-1.docker.io` 那一块进行特殊处理，将响应头中的 WWW-Authenticate 和 location 字段进行关键词替换，将原域名替换为反代域名。\n\n最后的成果大概就是这个样子:\n\n```caddyfile\ndockerhub.example.com {\n\treverse_proxy https://registry-1.docker.io {\n\t\theader_up Host {http.reverse_proxy.upstream.hostport}\n\t\theader_down WWW-Authenticate \"https://auth.docker.io\" \"https://auth.dockerhub.example.com\"\n\t\theader_down Location \"https://production.cloudflare.docker.com\" \"https://production.dockerhub.example.com\"\n\t}\n}\n\nauth.dockerhub.example.com {\n\treverse_proxy https://auth.docker.io {\n\t\theader_up Host {http.reverse_proxy.upstream.hostport}\n\t}\n}\n\nproduction.dockerhub.example.com {\n\treverse_proxy https://production.cloudflare.docker.com {\n\t\theader_up Host {http.reverse_proxy.upstream.hostport}\n\t}\n}\n```\n\nPS: 推荐后两个域名使用 CNAME 解析到第一个域名，这样后面更改解析的时候更方便一些。\n\n## 如何设置 docker 使用反代\n\n可以直接在 `docker pull` 和 `docker run` 的命令前加上域名，比如原本的\n\n```bash\ndocker run hello-world\n```\n\n改成\n\n```bash\ndocker run dockerhub.example.com/library/hello-world\n```\n\n（如果原本的镜像由 dockerhub 官方提供，没有用户名，路径需要加上 “library”）\n\n***\n\n也可以选择以前的方案，创建或修改 `/etc/docker/daemon.json`：\n\n```\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json \u003C\u003C-'EOF'\n{\n    \"registry-mirrors\": [\n        \"https://dockerhub.example.com\"\n    ]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n## 验证\n\n一般来说，能够在中国大陆境内的网络质量下较快地下拉镜像本身就代表反代成功了，但保险起见可以像本文的第一部分一样抓个包，看看是不是都走了自己的域名了。\n\n## 参见\n\n[国内的 Docker Hub 镜像加速器，由国内教育机构与各大云服务商提供的镜像加速服务](https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6)\n\n[无障碍访问 Docker Hub 的各种方法（自建 registry、Cloudflare 加速、Nginx 反代、代理 Docker 网络） | 绅士喵](https://blog.hentioe.dev/posts/unhindered-accesss-dockerhub.html)\n",{"title":5,"description":12},"posts/how-to-reverse-proxy-dockerhub-with-caddy",false,[442,443,444,445,446],"Caddy","Docker","mitmproxy","Network","Linux","0CCbiBTLVmwg0bnTgPfo7Q84Q89o5B9jV13EWEXbF-M",[449,454],{"title":450,"path":451,"stem":452,"date":453,"children":-1},"使用向日葵智能插座 C2 用电记录推算宿舍上次烧水时间","/2024/09/24/log-last-water-boiling-water-with-sunlogin-adapter-power-consumption","posts/log-last-water-boiling-water-with-sunlogin-adapter-power-consumption","2024-09-24 05:17:47",{"title":455,"path":456,"stem":457,"date":458,"children":-1},"将 Rustdesk 中继服务从 Arch Linux 迁移至 Debian","/2024/09/20/migrate-rustdesk-server-from-arch-to-debian","posts/migrate-rustdesk-server-from-arch-to-debian","2024-09-20 03:20:38",1761738776355]