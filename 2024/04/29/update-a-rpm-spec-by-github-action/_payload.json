[{"data":1,"prerenderedAt":396},["ShallowReactive",2],{"post-2024-04-29-update-a-rpm-spec-by-github-action":3,"surround-2024-04-29-update-a-rpm-spec-by-github-action":384,"randomIndex/2024/04/29/update-a-rpm-spec-by-github-action/":395},{"id":4,"title":5,"body":6,"date":369,"description":370,"extension":371,"meta":372,"navigation":373,"path":374,"rawbody":375,"seo":376,"stem":377,"sticky":378,"tags":379,"__hash__":383},"posts/posts/update-a-rpm-spec-by-github-action.md","使用 Github Action 更新用于 rpm 打包的 spec 文件",{"type":7,"value":8,"toc":367},"minimark",[9,18,29,32,35,38,99,102,139,142,176,179,254,257,315,318,355,363],[10,11,12,13,17],"p",{},"有一些软件包的上游本身就是使用 Github Action 发版的，每次 commit 都会触发 Github Action 去构建并分发新版本，使用构建时的时间日期作为版本号。针对这种包，手动更新费时费力，而规范的 specfile 应当是更新 ",[14,15,16],"code",{},"%changelog"," 的，因此应当是使用 rpmdev-bumpspec 命令。只不过 rpmdev-bumpspec 需要在 rpm 系发行版或者装有 rpm 系列依赖包的发行版下执行，这不是随随便便一个 Linux 环境就能运行的。",[10,19,20,21,28],{},"我找到了 ",[22,23,27],"a",{"href":24,"rel":25},"https://github.com/netoarmando/rpmdev-bumpspec-action",[26],"nofollow","netoarmando/rpmdev-bumpspec-action"," 这个 Github Action，它通过启动一个 Fedora 的 docker 实现了使用 rpmdev-bumpspec 的效果。虽然 release 中只有一个 2021 年构建的 v1 版本，~~但 Fedora 的版本高低不影响 rpmdev-bumpspec 的效果。~~但每次 Github Action 执行时都会使用 fedora:latest 的 docker 重新构建一遍，不用担心 fedora 版本过低。",[10,30,31],{},"于是我们便解决了最核心的问题——处理 spec 文件。接下来只要补充好头尾的步骤即可。",[33,34],"hr",{},[10,36,37],{},"首先使用 actions/checkout 释出仓库内的文件",[39,40,45],"pre",{"className":41,"code":42,"language":43,"meta":44,"style":44},"language-yaml shiki shiki-themes one-light one-dark-pro","- name: Checkout\n  uses: actions/checkout@v2\n  with:\n    fetch-depth: 0\n","yaml","",[14,46,47,67,78,87],{"__ignoreMap":44},[48,49,52,56,60,63],"span",{"class":50,"line":51},"line",1,[48,53,55],{"class":54},"s5ixo","- ",[48,57,59],{"class":58},"sJa8x","name",[48,61,62],{"class":54},": ",[48,64,66],{"class":65},"sDhpE","Checkout\n",[48,68,70,73,75],{"class":50,"line":69},2,[48,71,72],{"class":58},"  uses",[48,74,62],{"class":54},[48,76,77],{"class":65},"actions/checkout@v2\n",[48,79,81,84],{"class":50,"line":80},3,[48,82,83],{"class":58},"  with",[48,85,86],{"class":54},":\n",[48,88,90,93,95],{"class":50,"line":89},4,[48,91,92],{"class":58},"    fetch-depth",[48,94,62],{"class":54},[48,96,98],{"class":97},"sAGMh","0\n",[10,100,101],{},"通过 shell 命令获取仓库内 spec 文件的版本号，存入 $GITHUB_ENV",[39,103,105],{"className":41,"code":104,"language":43,"meta":44,"style":44},"- name: Get Current Version\n  run: |\n    CURRENT_VERSION=`grep -E '^Version:' *.spec | awk '{print $2}'`\n    echo \"CURRENT_VERSION=$CURRENT_VERSION\" >> $GITHUB_ENV\n",[14,106,107,118,129,134],{"__ignoreMap":44},[48,108,109,111,113,115],{"class":50,"line":51},[48,110,55],{"class":54},[48,112,59],{"class":58},[48,114,62],{"class":54},[48,116,117],{"class":65},"Get Current Version\n",[48,119,120,123,125],{"class":50,"line":69},[48,121,122],{"class":58},"  run",[48,124,62],{"class":54},[48,126,128],{"class":127},"sLKXg","|\n",[48,130,131],{"class":50,"line":80},[48,132,133],{"class":65},"    CURRENT_VERSION=`grep -E '^Version:' *.spec | awk '{print $2}'`\n",[48,135,136],{"class":50,"line":89},[48,137,138],{"class":65},"    echo \"CURRENT_VERSION=$CURRENT_VERSION\" >> $GITHUB_ENV\n",[10,140,141],{},"通过 Github API 获取目标软件的最新版本号，存入 $GITHUB_ENV",[39,143,145],{"className":41,"code":144,"language":43,"meta":44,"style":44},"- name: Export latest geoip version\n  run: |\n    NEW_VERSION=`curl -s https://api.github.com/repos/{user_name}/{repo_name}/releases/latest | jq -r '.tag_name' | sed 's/v//g'`\n    echo \"NEW_VERSION=$NEW_VERSION\" >> $GITHUB_ENV\n",[14,146,147,158,166,171],{"__ignoreMap":44},[48,148,149,151,153,155],{"class":50,"line":51},[48,150,55],{"class":54},[48,152,59],{"class":58},[48,154,62],{"class":54},[48,156,157],{"class":65},"Export latest geoip version\n",[48,159,160,162,164],{"class":50,"line":69},[48,161,122],{"class":58},[48,163,62],{"class":54},[48,165,128],{"class":127},[48,167,168],{"class":50,"line":80},[48,169,170],{"class":65},"    NEW_VERSION=`curl -s https://api.github.com/repos/{user_name}/{repo_name}/releases/latest | jq -r '.tag_name' | sed 's/v//g'`\n",[48,172,173],{"class":50,"line":89},[48,174,175],{"class":65},"    echo \"NEW_VERSION=$NEW_VERSION\" >> $GITHUB_ENV\n",[10,177,178],{},"当仓库内 spec 版本号与软件最新版本号不一致时，运行 rpmdev-bumpspec",[39,180,182],{"className":41,"code":181,"language":43,"meta":44,"style":44},"- name: Run rpmdev-bumpspec action\n  if: ${{ env.CURRENT_VERSION != env.NEW_VERSION }}\n  uses: netoarmando/rpmdev-bumpspec-action@v1\n  with: \n    specfile: '{filename}'\n    new: ${{ env.NEW_VERSION }}\n    userstring: \"username \u003Cusername@mail.com>\"\n",[14,183,184,195,205,214,221,232,243],{"__ignoreMap":44},[48,185,186,188,190,192],{"class":50,"line":51},[48,187,55],{"class":54},[48,189,59],{"class":58},[48,191,62],{"class":54},[48,193,194],{"class":65},"Run rpmdev-bumpspec action\n",[48,196,197,200,202],{"class":50,"line":69},[48,198,199],{"class":58},"  if",[48,201,62],{"class":54},[48,203,204],{"class":65},"${{ env.CURRENT_VERSION != env.NEW_VERSION }}\n",[48,206,207,209,211],{"class":50,"line":80},[48,208,72],{"class":58},[48,210,62],{"class":54},[48,212,213],{"class":65},"netoarmando/rpmdev-bumpspec-action@v1\n",[48,215,216,218],{"class":50,"line":89},[48,217,83],{"class":58},[48,219,220],{"class":54},": \n",[48,222,224,227,229],{"class":50,"line":223},5,[48,225,226],{"class":58},"    specfile",[48,228,62],{"class":54},[48,230,231],{"class":65},"'{filename}'\n",[48,233,235,238,240],{"class":50,"line":234},6,[48,236,237],{"class":58},"    new",[48,239,62],{"class":54},[48,241,242],{"class":65},"${{ env.NEW_VERSION }}\n",[48,244,246,249,251],{"class":50,"line":245},7,[48,247,248],{"class":58},"    userstring",[48,250,62],{"class":54},[48,252,253],{"class":65},"\"username \u003Cusername@mail.com>\"\n",[10,255,256],{},"当仓库内 spec 版本号与软件最新版本号不一致时，保存更改，推入仓库。",[39,258,260],{"className":41,"code":259,"language":43,"meta":44,"style":44},"- name: Commit changes\n  if: ${{ env.CURRENT_VERSION != env.NEW_VERSION }}\n  run: |\n    git config --local user.email \"zhullyb@outlook.com\"\n    git config --local user.name \"zhullyb\"\n    git add .\n    git commit -m \"upgpkg: v2ray-geoip@${{ env.NEW_VERSION }}\"\n    git push\n",[14,261,262,273,281,289,294,299,304,309],{"__ignoreMap":44},[48,263,264,266,268,270],{"class":50,"line":51},[48,265,55],{"class":54},[48,267,59],{"class":58},[48,269,62],{"class":54},[48,271,272],{"class":65},"Commit changes\n",[48,274,275,277,279],{"class":50,"line":69},[48,276,199],{"class":58},[48,278,62],{"class":54},[48,280,204],{"class":65},[48,282,283,285,287],{"class":50,"line":80},[48,284,122],{"class":58},[48,286,62],{"class":54},[48,288,128],{"class":127},[48,290,291],{"class":50,"line":89},[48,292,293],{"class":65},"    git config --local user.email \"zhullyb@outlook.com\"\n",[48,295,296],{"class":50,"line":223},[48,297,298],{"class":65},"    git config --local user.name \"zhullyb\"\n",[48,300,301],{"class":50,"line":234},[48,302,303],{"class":65},"    git add .\n",[48,305,306],{"class":50,"line":245},[48,307,308],{"class":65},"    git commit -m \"upgpkg: v2ray-geoip@${{ env.NEW_VERSION }}\"\n",[48,310,312],{"class":50,"line":311},8,[48,313,314],{"class":65},"    git push\n",[10,316,317],{},"（可选）当仓库内 spec 版本号与软件最新版本号不一致时，通过 curl 语句触发 copr 的 webhook，让 copr 进行构建。",[39,319,321],{"className":41,"code":320,"language":43,"meta":44,"style":44},"- name: trigger copr webhook\n  if: ${{ env.CURRENT_VERSION != env.NEW_VERSION }}\n  run: |\n    curl -X POST ${{ secrets.COPR_HOOK_URL }}v2ray-geoip/\n",[14,322,323,334,342,350],{"__ignoreMap":44},[48,324,325,327,329,331],{"class":50,"line":51},[48,326,55],{"class":54},[48,328,59],{"class":58},[48,330,62],{"class":54},[48,332,333],{"class":65},"trigger copr webhook\n",[48,335,336,338,340],{"class":50,"line":69},[48,337,199],{"class":58},[48,339,62],{"class":54},[48,341,204],{"class":65},[48,343,344,346,348],{"class":50,"line":80},[48,345,122],{"class":58},[48,347,62],{"class":54},[48,349,128],{"class":127},[48,351,352],{"class":50,"line":89},[48,353,354],{"class":65},"    curl -X POST ${{ secrets.COPR_HOOK_URL }}v2ray-geoip/\n",[10,356,357,358],{},"最终的 yml 文件可以参考",[22,359,362],{"href":360,"rel":361},"https://github.com/v2rayA/v2raya-copr/blob/master/.github/workflows/upgpkg-v2ray-geoip.yml",[26],"这里",[364,365,366],"style",{},"html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}",{"title":44,"searchDepth":69,"depth":69,"links":368},[],"2024-04-29 19:19:54","有一些软件包的上游本身就是使用 Github Action 发版的，每次 commit 都会触发 Github Action 去构建并分发新版本，使用构建时的时间日期作为版本号。针对这种包，手动更新费时费力，而规范的 specfile 应当是更新 %changelog 的，因此应当是使用 rpmdev-bumpspec 命令。只不过 rpmdev-bumpspec 需要在 rpm 系发行版或者装有 rpm 系列依赖包的发行版下执行，这不是随随便便一个 Linux 环境就能运行的。","md",{},true,"/2024/04/29/update-a-rpm-spec-by-github-action","---\ntitle: 使用 Github Action 更新用于 rpm 打包的 spec 文件\ndate: 2024-04-29 19:19:54\nsticky:\ntags:\n- Fedora\n- RPM Package\n- Github Action\n---\n\n有一些软件包的上游本身就是使用 Github Action 发版的，每次 commit 都会触发 Github Action 去构建并分发新版本，使用构建时的时间日期作为版本号。针对这种包，手动更新费时费力，而规范的 specfile 应当是更新 `%changelog` 的，因此应当是使用 rpmdev-bumpspec 命令。只不过 rpmdev-bumpspec 需要在 rpm 系发行版或者装有 rpm 系列依赖包的发行版下执行，这不是随随便便一个 Linux 环境就能运行的。\n\n我找到了 [netoarmando/rpmdev-bumpspec-action](https://github.com/netoarmando/rpmdev-bumpspec-action) 这个 Github Action，它通过启动一个 Fedora 的 docker 实现了使用 rpmdev-bumpspec 的效果。虽然 release 中只有一个 2021 年构建的 v1 版本，~~但 Fedora 的版本高低不影响 rpmdev-bumpspec 的效果。~~但每次 Github Action 执行时都会使用 fedora:latest 的 docker 重新构建一遍，不用担心 fedora 版本过低。\n\n于是我们便解决了最核心的问题——处理 spec 文件。接下来只要补充好头尾的步骤即可。\n\n***\n\n首先使用 actions/checkout 释出仓库内的文件\n\n```yaml\n- name: Checkout\n  uses: actions/checkout@v2\n  with:\n    fetch-depth: 0\n```\n\n通过 shell 命令获取仓库内 spec 文件的版本号，存入 $GITHUB_ENV\n\n```yaml\n- name: Get Current Version\n  run: |\n    CURRENT_VERSION=`grep -E '^Version:' *.spec | awk '{print $2}'`\n    echo \"CURRENT_VERSION=$CURRENT_VERSION\" >> $GITHUB_ENV\n```\n\n通过 Github API 获取目标软件的最新版本号，存入 $GITHUB_ENV\n\n```yaml\n- name: Export latest geoip version\n  run: |\n    NEW_VERSION=`curl -s https://api.github.com/repos/{user_name}/{repo_name}/releases/latest | jq -r '.tag_name' | sed 's/v//g'`\n    echo \"NEW_VERSION=$NEW_VERSION\" >> $GITHUB_ENV\n```\n\n当仓库内 spec 版本号与软件最新版本号不一致时，运行 rpmdev-bumpspec\n\n```yaml\n- name: Run rpmdev-bumpspec action\n  if: ${{ env.CURRENT_VERSION != env.NEW_VERSION }}\n  uses: netoarmando/rpmdev-bumpspec-action@v1\n  with: \n    specfile: '{filename}'\n    new: ${{ env.NEW_VERSION }}\n    userstring: \"username \u003Cusername@mail.com>\"\n```\n\n当仓库内 spec 版本号与软件最新版本号不一致时，保存更改，推入仓库。\n\n```yaml\n- name: Commit changes\n  if: ${{ env.CURRENT_VERSION != env.NEW_VERSION }}\n  run: |\n    git config --local user.email \"zhullyb@outlook.com\"\n    git config --local user.name \"zhullyb\"\n    git add .\n    git commit -m \"upgpkg: v2ray-geoip@${{ env.NEW_VERSION }}\"\n    git push\n```\n\n（可选）当仓库内 spec 版本号与软件最新版本号不一致时，通过 curl 语句触发 copr 的 webhook，让 copr 进行构建。\n\n```yaml\n- name: trigger copr webhook\n  if: ${{ env.CURRENT_VERSION != env.NEW_VERSION }}\n  run: |\n    curl -X POST ${{ secrets.COPR_HOOK_URL }}v2ray-geoip/\n```\n\n最终的 yml 文件可以参考[这里](https://github.com/v2rayA/v2raya-copr/blob/master/.github/workflows/upgpkg-v2ray-geoip.yml)\n",{"title":5,"description":370},"posts/update-a-rpm-spec-by-github-action",false,[380,381,382],"Fedora","RPM Package","Github Action","dyxKRTEmgUzHPWshDjAaC80s6EUB5LjxyggEuYnGeAw",[385,390],{"title":386,"path":387,"stem":388,"date":389,"children":-1},"以 Archlinux 中 makepkg 的方式打开 rpmbuild","/2024/05/03/open-rpmbuild-in-the-way-of-archlinux-makepkg","posts/open-rpmbuild-in-the-way-of-archlinux-makepkg","2024-05-03 22:48:39",{"title":391,"path":392,"stem":393,"date":394,"children":-1},"使用 Python 生成甘特图(Gantt Chart)","/2024/04/24/generate-gantt-chart-with-python","posts/generate-gantt-chart-with-python","2024-04-24 12:02:58",18,1761739880104]