[{"data":1,"prerenderedAt":2908},["ShallowReactive",2],{"randomIndex/page/5/":3,"index-page-5":4,"posts-total":2907},8,[5,210,487,721,991,1260,1462,1786,2187,2592],{"title":6,"date":7,"path":8,"tags":9,"body":11},"使用 Python 生成甘特图(Gantt Chart)","2024-04-24 12:02:58","/2024/04/24/generate-gantt-chart-with-python",[10],"Python",{"type":12,"value":13,"toc":208},"minimark",[14,18,21,28,39,42,48,51,54,57,144,149,151,199,204],[15,16,17],"p",{},"在写操作系统的作业的时候有几道题给出了几个进程的相关信息，要求我们画出几种简单调度的甘特图。操作系统的作业一直是电子版，上传 pdf 即可的。我觉得手画甘特图拍照嵌入 pdf 中不太优雅，过于掉价，因此就想直接生成甘特图嵌入。",[15,19,20],{},"在谷歌搜寻了一番，我发现现在的甘特图生成网站都太现代化了，根本不是操作系统课上教的样子了。",[15,22,23],{},[24,25],"img",{"alt":26,"src":27},"现代化的甘特图","https://static.031130.xyz/uploads/2024/08/12/662888bd5a0af.webp",[15,29,30,31,38],{},"所幸我找到了 ",[32,33,37],"a",{"href":34,"rel":35},"https://github.com/gao-keyong/matplotlib-gantt/",[36],"nofollow","gao-keyong/matplotlib-gantt","，虽然只有两个 star（没事，加上我就 3 stars 了），但确实能用，README 中的样例也是我期望的样子。",[15,40,41],{},"项目中自带了一个 jupyter 的示例，算得上是非常简单易上手的了，依赖方面只要装好 matplotlib 就可以使用，不存在依赖地狱。尽管是三年前的项目，在我本机的 Python 3.11 上仍然能够正常运行。",[15,43,44],{},[24,45],{"alt":46,"src":47},"","https://static.031130.xyz/uploads/2024/08/12/66288ba6414d4.webp",[15,49,50],{},"tuple 中的第一个数字表示从当前时间开始，第二个数字表示持续时间。每一个表示 category 的 list 中可以存在多个 tuple。",[15,52,53],{},"给一些咱生成的例子。",[55,56],"hr",{},[58,59,63],"pre",{"className":60,"code":61,"language":62,"meta":46,"style":46},"language-python shiki shiki-themes github-light github-dark","from gantt import *\ncategory_names = ['P1', 'P2', 'P3', 'P4', 'P5']\n\nresults = {\n    'FCFS': [[(0,2)], [(2,1)], [(3,8)], [(11,4)], [(15,5)]],\n    'SJF': [[(1,2)], [(0,1)], [(12,8)], [(3,4)], [(7,5)]],\n    'non-compreemptive priority': [[(13,2)],[(19,1)],[(0,8)],[(15,4)],[(8,5)]],\n    'RR (quantum=2)': [[(0,2)], [(2,1)],[(3,2),(9,2),(15,2),(18,2)], [(5,2),(11,2)], [(7,2),(13,2),(17,1)]]\n}\n\narrival_t = [0, 0, 0, 0]\n\ngantt(category_names, results, arrival_t).show()\n\n","python",[64,65,66,74,80,87,93,99,105,111,116,122,127,133,138],"code",{"__ignoreMap":46},[67,68,71],"span",{"class":69,"line":70},"line",1,[67,72,73],{},"from gantt import *\n",[67,75,77],{"class":69,"line":76},2,[67,78,79],{},"category_names = ['P1', 'P2', 'P3', 'P4', 'P5']\n",[67,81,83],{"class":69,"line":82},3,[67,84,86],{"emptyLinePlaceholder":85},true,"\n",[67,88,90],{"class":69,"line":89},4,[67,91,92],{},"results = {\n",[67,94,96],{"class":69,"line":95},5,[67,97,98],{},"    'FCFS': [[(0,2)], [(2,1)], [(3,8)], [(11,4)], [(15,5)]],\n",[67,100,102],{"class":69,"line":101},6,[67,103,104],{},"    'SJF': [[(1,2)], [(0,1)], [(12,8)], [(3,4)], [(7,5)]],\n",[67,106,108],{"class":69,"line":107},7,[67,109,110],{},"    'non-compreemptive priority': [[(13,2)],[(19,1)],[(0,8)],[(15,4)],[(8,5)]],\n",[67,112,113],{"class":69,"line":3},[67,114,115],{},"    'RR (quantum=2)': [[(0,2)], [(2,1)],[(3,2),(9,2),(15,2),(18,2)], [(5,2),(11,2)], [(7,2),(13,2),(17,1)]]\n",[67,117,119],{"class":69,"line":118},9,[67,120,121],{},"}\n",[67,123,125],{"class":69,"line":124},10,[67,126,86],{"emptyLinePlaceholder":85},[67,128,130],{"class":69,"line":129},11,[67,131,132],{},"arrival_t = [0, 0, 0, 0]\n",[67,134,136],{"class":69,"line":135},12,[67,137,86],{"emptyLinePlaceholder":85},[67,139,141],{"class":69,"line":140},13,[67,142,143],{},"gantt(category_names, results, arrival_t).show()\n",[15,145,146],{},[24,147],{"alt":46,"src":148},"https://static.031130.xyz/uploads/2024/08/12/662890f78f1da.webp",[55,150],{},[58,152,154],{"className":60,"code":153,"language":62,"meta":46,"style":46},"from gantt import *\ncategory_names = ['P1', 'P2', 'P3', 'P4', 'P5', 'P6']\n\nresults = {\n    '': [[(0,20)], [(25,10),(45,10),(75,5)], [(35,10),(55,5),(80,10)], [(60,15)], [(100,5),(115,5)],[(105,10)]],\n}\n\narrival_t = [0]\n\ngantt(category_names, results, arrival_t).show()\n\n",[64,155,156,160,165,169,173,178,182,186,191,195],{"__ignoreMap":46},[67,157,158],{"class":69,"line":70},[67,159,73],{},[67,161,162],{"class":69,"line":76},[67,163,164],{},"category_names = ['P1', 'P2', 'P3', 'P4', 'P5', 'P6']\n",[67,166,167],{"class":69,"line":82},[67,168,86],{"emptyLinePlaceholder":85},[67,170,171],{"class":69,"line":89},[67,172,92],{},[67,174,175],{"class":69,"line":95},[67,176,177],{},"    '': [[(0,20)], [(25,10),(45,10),(75,5)], [(35,10),(55,5),(80,10)], [(60,15)], [(100,5),(115,5)],[(105,10)]],\n",[67,179,180],{"class":69,"line":101},[67,181,121],{},[67,183,184],{"class":69,"line":107},[67,185,86],{"emptyLinePlaceholder":85},[67,187,188],{"class":69,"line":3},[67,189,190],{},"arrival_t = [0]\n",[67,192,193],{"class":69,"line":118},[67,194,86],{"emptyLinePlaceholder":85},[67,196,197],{"class":69,"line":124},[67,198,143],{},[15,200,201],{},[24,202],{"alt":46,"src":203},"https://static.031130.xyz/uploads/2024/08/12/662891bfa52fc.webp",[205,206,207],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":209},[],{"title":211,"date":212,"path":213,"tags":214,"body":219},"uniapp 中的图片预加载","2024-04-01 05:31:25","/2024/04/01/image-preload-in-uniapp",[215,216,217,218],"uniapp","Vue.js","Web","JavaScript",{"type":12,"value":220,"toc":485},[221,224,226,239,241,250,260,270,276,282,284,291,470,475,482],[15,222,223],{},"最近在做微信小程序的时候遇到了图片资源过大无法正常打包的问题，没什么太好的方法，只能是使用图床托管这些图片资源。但部分图片的体积实在太大，即使是采用了境内 cdn 的图床，即使是采用 webp 对图片进行了压缩，部分图片都需要小几秒去把图片加载出来，这导致的用户体验就不是很好了，因此我们需要实现图片预加载的功能。",[55,225],{},[15,227,228,229,234,235,238],{},"在 ",[32,230,233],{"href":231,"rel":232},"https://uniapp.dcloud.net.cn/api/preload-page.html#preloadpage",[36],"uniapp 的官方文档","中，我找到了 ",[64,236,237],{},"uni.preloadPage(OBJECT)"," 方法。很可惜，这个方法并不支持微信小程序，自然不能完成被预加载页面的图片资源预加载。",[55,240],{},[15,242,243,244,249],{},"经过搜索，在",[32,245,248],{"href":246,"rel":247},"https://frontend.mimiwuqi.com/qianduan/202517.html",[36],"一篇奇奇怪怪的文章","中提到：",[251,252,253],"blockquote",{},[15,254,255,256,259],{},"在UniApp中，图片预加载可以通过使用",[64,257,258],{},"uni.getImageInfo","方法来实现。这个方法可以获取图片的信息，包括宽度、高度等。可以在应用启动时就开始加载图片，以提高后续图片显示的速度。",[15,261,262,263,266,267,269],{},"很遗憾，经过实测，提前使用 ",[64,264,265],{},"getImageInfo()"," 方法并不能实现图片的预加载。",[64,268,265],{}," 获取时的 Type 是 xhr，而后续图片加载时的 Type 为 webp，图片会被重复下载，并没有实现预加载的作用。",[15,271,272],{},[24,273],{"alt":274,"src":275},"下载测试","https://static.031130.xyz/uploads/2024/08/12/6609d97bc4f7f.webp",[15,277,278,279,281],{},"上图中，蓝色部分是 ",[64,280,265],{}," 的网络请求，红色部分是真正的图片加载请求，可谓是一点用都没有，该加载慢还是加载慢。",[55,283],{},[15,285,286,287,290],{},"那有没有什么办法能够实现预加载呢？我没找到优雅的方法，选择在应用的首页创建一个 ",[64,288,289],{},"display: none"," 的 view 将所有的图片先加载一遍。",[58,292,296],{"className":293,"code":294,"language":295,"meta":46,"style":46},"language-vue shiki shiki-themes github-light github-dark","\u003Ctemplate>\n    \u003Cview style=\"display: none;\">\n        \u003Cimage\n            v-for=\"image in imageToPreload\"\n            :src=\"image\"\n        />\n    \u003C/view>\n\u003C/template>\n\u003Cscript setup lang=\"ts\">\nconst imageToPreload = [\n    \"https://http.cat/100\",\n    \"https://http.cat/200\",\n    \"https://http.cat/300\",\n    \"https://http.cat/400\",\n    \"https://http.cat/500\"\n]\n\u003C/script>\n","vue",[64,297,298,311,332,340,350,360,365,374,383,403,419,427,434,441,449,455,461],{"__ignoreMap":46},[67,299,300,304,308],{"class":69,"line":70},[67,301,303],{"class":302},"sVt8B","\u003C",[67,305,307],{"class":306},"s9eBZ","template",[67,309,310],{"class":302},">\n",[67,312,313,316,319,323,326,330],{"class":69,"line":76},[67,314,315],{"class":302},"    \u003C",[67,317,318],{"class":306},"view",[67,320,322],{"class":321},"sScJk"," style",[67,324,325],{"class":302},"=",[67,327,329],{"class":328},"sZZnC","\"display: none;\"",[67,331,310],{"class":302},[67,333,334,337],{"class":69,"line":82},[67,335,336],{"class":302},"        \u003C",[67,338,339],{"class":306},"image\n",[67,341,342,345,347],{"class":69,"line":89},[67,343,344],{"class":321},"            v-for",[67,346,325],{"class":302},[67,348,349],{"class":328},"\"image in imageToPreload\"\n",[67,351,352,355,357],{"class":69,"line":95},[67,353,354],{"class":321},"            :src",[67,356,325],{"class":302},[67,358,359],{"class":328},"\"image\"\n",[67,361,362],{"class":69,"line":101},[67,363,364],{"class":302},"        />\n",[67,366,367,370,372],{"class":69,"line":107},[67,368,369],{"class":302},"    \u003C/",[67,371,318],{"class":306},[67,373,310],{"class":302},[67,375,376,379,381],{"class":69,"line":3},[67,377,378],{"class":302},"\u003C/",[67,380,307],{"class":306},[67,382,310],{"class":302},[67,384,385,387,390,393,396,398,401],{"class":69,"line":118},[67,386,303],{"class":302},[67,388,389],{"class":306},"script",[67,391,392],{"class":321}," setup",[67,394,395],{"class":321}," lang",[67,397,325],{"class":302},[67,399,400],{"class":328},"\"ts\"",[67,402,310],{"class":302},[67,404,405,409,413,416],{"class":69,"line":124},[67,406,408],{"class":407},"szBVR","const",[67,410,412],{"class":411},"sj4cs"," imageToPreload",[67,414,415],{"class":407}," =",[67,417,418],{"class":302}," [\n",[67,420,421,424],{"class":69,"line":129},[67,422,423],{"class":328},"    \"https://http.cat/100\"",[67,425,426],{"class":302},",\n",[67,428,429,432],{"class":69,"line":135},[67,430,431],{"class":328},"    \"https://http.cat/200\"",[67,433,426],{"class":302},[67,435,436,439],{"class":69,"line":140},[67,437,438],{"class":328},"    \"https://http.cat/300\"",[67,440,426],{"class":302},[67,442,444,447],{"class":69,"line":443},14,[67,445,446],{"class":328},"    \"https://http.cat/400\"",[67,448,426],{"class":302},[67,450,452],{"class":69,"line":451},15,[67,453,454],{"class":328},"    \"https://http.cat/500\"\n",[67,456,458],{"class":69,"line":457},16,[67,459,460],{"class":302},"]\n",[67,462,464,466,468],{"class":69,"line":463},17,[67,465,378],{"class":302},[67,467,389],{"class":306},[67,469,310],{"class":302},[15,471,472],{},[24,473],{"alt":274,"src":474},"https://static.031130.xyz/uploads/2024/08/12/6609db8a213da.webp",[15,476,477,478,481],{},"可以看到，红色部分的资源在 size 那一栏变成了 ",[64,479,480],{},"(disk cache)","，加载时间也明显降低，虽然方法不优雅，但起码实现了图片资源的预加载。",[205,483,484],{},"html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":486},[],{"title":488,"date":489,"path":490,"tags":491,"body":495},"小记 - 尝试拼凑出 apt 仓库中的 deb 包下载地址","2024-03-13 21:55:04","/2024/03/13/try-to-compose-download-links-of-deb-packages-in-apt-repository",[492,493,494],"Linux","Apt","deepin",{"type":12,"value":496,"toc":719},[497,500,509,512,515,521,528,531,534,542,555,624,631,637,648,654,657,660,690,696,707,710,716],[15,498,499],{},"大概一周前，有一个来源不明的 Linux 微信，从包的结构来看是基于 qt 实现的图形化界面，deb 包中的 control 信息表明是腾讯团队官方出品的。今天听人说 UOS 的商店上架了最新的微信，便尝试从 UOS 的官方仓库提取下载链接，帮助 AUR Maintainer 获取到新的地址。",[15,501,502,503,508],{},"在我的",[32,504,507],{"href":505,"rel":506},"https://zhul.in/2021/11/20/what-is-deepin-elf-verify/",[36],"《deepin-elf-verify究竟是何物？》","这篇文章中，我成功从 uos.deepin.cn 下载到了来自 UOS 中的软件包。可惜，当我采用同样的方法搜索 weixin 或者 wechat 字样时，没有得到任何结果。",[15,510,511],{},"UOS 上的软件来源起码来自两个仓库，一个是与系统有关的软件，比如 Linux Kernel，GCC 一类开源软件，应该就是来自我之前下载到 deepin-elf-verify 的那个源。除此之外，还有一个 appstore 源，里面存放的都是应用商店中上架的软件（大部分可能是闭源的）。",[15,513,514],{},"在 chinauos.com 下载到最新的 ISO 安装镜像后，直接在虚拟机中走完正常的安装流畅，然后直捣黄龙。",[15,516,517],{},[24,518],{"alt":519,"src":520},"源地址","https://static.031130.xyz/uploads/2024/08/12/65f1b344e5581.webp",[15,522,523,524,527],{},"可以看出，",[64,525,526],{},"/etc/apt/sources.list.d/appstore.list"," 文件中列出的源很有可能就是我们要找的新版微信的所在源。",[15,529,530],{},"可惜直接访问的时候，源地址给出了 403。他们似乎不愿意公开源地址的 filelist index。",[15,532,533],{},"不过没关系，既然 UOS Desktop 目前仍然依赖 APT 实现软件安装，那它的源应该仍然符合 Debian 的 APT Repository 目录结构。",[15,535,536,537],{},"根据 ",[32,538,541],{"href":539,"rel":540},"https://wiki.debian.org/DebianRepository/Format",[36],"DebianWiki 中的描述",[251,543,544,547],{},[15,545,546],{},"gives an example:",[58,548,553],{"className":549,"code":551,"language":552},[550],"language-text","deb https://deb.debian.org/debian stable main contrib non-free\n","text",[64,554,551],{"__ignoreMap":46},[251,556,557,560,578,611],{},[15,558,559],{},"An archive can have either source packages or binary packages or both but they have to be specified separately to apt.",[15,561,562,563,569,570,573,574,577],{},"The uri, in this case ",[564,565,566],"em",{},[64,567,568],{},"https://deb.debian.org/debian"," specifies the root of the archive. Often Debian archives are in the ",[564,571,572],{},"debian/"," directory on the server but can be anywhere else (many mirrors for example have it in a ",[564,575,576],{},"pub/linux/debian"," directory, for example).",[15,579,580,581,584,585,589,590,593,594,597,598,601,602,605,606],{},"The distribution part (",[564,582,583],{},"stable"," in this case) specifies a subdirectory in ",[586,587,588],"strong",{},"$ARCHIVE_ROOT/dists",". It can contain additional slashes to specify subdirectories nested deeper, eg. ",[564,591,592],{},"stable/updates",". distribution typically corresponds to ",[586,595,596],{},"Suite"," or ",[586,599,600],{},"Codename"," specified in the ",[586,603,604],{},"Release"," files. ",[564,607,608],{},[586,609,610],{},"FIXME is this enforced anyhow?",[15,612,613,614,597,617,619,620,623],{},"To download packages from a repository apt would download an ",[586,615,616],{},"InRelease",[586,618,604],{}," file from the ",[586,621,622],{},"$ARCHIVE_ROOT/dists/$DISTRIBUTION"," directory.",[15,625,626,627,630],{},"我尝试了访问 ",[64,628,629],{},"https://pro-store-packages.uniontech.com/appstore/dists/eagle-pro/Release","，获得了一系列索引文件的索引。",[15,632,633],{},[24,634],{"alt":635,"src":636},"索引的索引（很拗口）","https://static.031130.xyz/uploads/2024/08/12/65f1b5166810a.webp",[15,638,639,640,643,644],{},"第一段中就能看到熟悉的 ",[64,641,642],{},"Packages"," 文件。根据我 deepin-elf-verify 相关博客中记载，这个文件中会保存 deb 文件的相对路径。我们先拼出 amd64 架构的 Packages 文件下载链接: ",[32,645,646],{"href":646,"rel":647},"https://pro-store-packages.uniontech.com/appstore/dists/eagle-pro/appstore/binary-amd64/Packages",[36],[15,649,650],{},[24,651],{"alt":652,"src":653},"deb 包详细信息","https://static.031130.xyz/uploads/2024/08/12/65f1b5faccc86.webp",[15,655,656],{},"这里可以看到源中每一个 deb 包的信息。图中红色方框框出的便是其中一个 deb 包在源中的相对路径。",[15,658,659],{},"我们可以使用 grep 命令去检索 weixin 或者 wechat 关键词",[58,661,665],{"className":662,"code":663,"language":664,"meta":46,"style":46},"language-bash shiki shiki-themes github-light github-dark","curl -sL https://pro-store-packages.uniontech.com/appstore/dists/eagle-pro/appstore/binary-amd64/Packages | grep -E \"weixin|wechat\"\n","bash",[64,666,667],{"__ignoreMap":46},[67,668,669,672,675,678,681,684,687],{"class":69,"line":70},[67,670,671],{"class":321},"curl",[67,673,674],{"class":411}," -sL",[67,676,677],{"class":328}," https://pro-store-packages.uniontech.com/appstore/dists/eagle-pro/appstore/binary-amd64/Packages",[67,679,680],{"class":407}," |",[67,682,683],{"class":321}," grep",[67,685,686],{"class":411}," -E",[67,688,689],{"class":328}," \"weixin|wechat\"\n",[15,691,692],{},[24,693],{"alt":694,"src":695},"获取到我们想要的 deb 包的相对路径","https://static.031130.xyz/uploads/2024/08/12/65f1b6a4c3239.webp",[15,697,698,699,702,703],{},"在这个路径前加上之前 ",[64,700,701],{},"appstore.list"," 文件中给出的 url 前缀，即可拼凑出 deb 包的完整下载地址: ",[32,704,705],{"href":705,"rel":706},"https://pro-store-packages.uniontech.com/appstore/pool/appstore/c/com.tencent.wechat/com.tencent.wechat_1.0.0.236_amd64.deb",[36],[15,708,709],{},"放到浏览器中尝试，果然可以正常下载",[15,711,712],{},[24,713],{"alt":714,"src":715},"正常下载","https://static.031130.xyz/uploads/2024/08/12/65f1b73567121.webp",[205,717,718],{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":720},[],{"title":722,"date":723,"path":724,"tags":725,"body":729},"在 Linux 下使用 mitmproxy 抓取 HTTPS 流量","2024-02-29 22:03:58","/2024/02/29/capture-https-traffic-on-linux-with-mitmproxy",[492,726,727,728],"Archlinux","Network","mitmproxy",{"type":12,"value":730,"toc":984},[731,734,737,742,749,768,772,775,787,795,801,811,816,820,823,830,836,847,854,874,883,904,909,921,924,928,931,938,944,953,956,962,965,968,978,981],[15,732,733],{},"作为部分 AUR Package 的 maintainer，一直以来我都有在 Linux 下抓取 https 流量的需求，比如抓取应用内的更新检测时访问的 url 地址。之前一直没有空去研究，趁着最近课少，总算是完成了这个目标。",[15,735,736],{},"在这里我使用的 mitmproxy，基于 python 和 webui 的一款开源简洁的流量代理软件，可以用于抓取 https 流量信息。",[738,739,741],"h2",{"id":740},"安装-mitmproxy","安装 mitmproxy",[15,743,744,745,748],{},"在 Arch Linux 下，官方 ",[64,746,747],{},"extra"," 源中已经打包好了这款软件，直接使用下面的命令即可完成安装。",[58,750,752],{"className":662,"code":751,"language":664,"meta":46,"style":46},"sudo pacman -S mitmproxy\n",[64,753,754],{"__ignoreMap":46},[67,755,756,759,762,765],{"class":69,"line":70},[67,757,758],{"class":321},"sudo",[67,760,761],{"class":328}," pacman",[67,763,764],{"class":411}," -S",[67,766,767],{"class":328}," mitmproxy\n",[738,769,771],{"id":770},"尝试运行-mitmweb","尝试运行 mitmweb",[15,773,774],{},"安装完成后，我们将会获得三个新的命令可用：",[776,777,778,782,784],"ul",{},[779,780,781],"li",{},"mitmdump",[779,783,728],{},[779,785,786],{},"mitmweb",[15,788,789,790,794],{},"我们只要使用 mitmweb 即可同时打开 8080 的代理端口和 8081 端口的 webui。访问 ",[32,791,792],{"href":792,"rel":793},"http://127.0.0.1:8081",[36]," 即可看到 mitmproxy 的网页。",[15,796,797],{},[24,798],{"alt":799,"src":800},"mitmweb 的界面","https://static.031130.xyz/uploads/2024/08/12/65e092503d5bb.webp",[15,802,803,804],{},"当然，也可以在 mitmweb 命令后面追加 -p ",[805,806,807,808],"port",{}," 和 --web-port=",[805,809,810],{}," 分别设置代理端口和 webui 的端口。",[15,812,813,814],{},"首先，我们先运行一次 ",[64,815,786],{},[738,817,819],{"id":818},"安装-ca-证书","安装 ca 证书",[15,821,822],{},"为了解密 https 流量，我们需要为系统安装上 mitmproxy 自己的证书文件，让系统信任我们的证书。",[15,824,825,826,829],{},"先来看看 ",[64,827,828],{},"/usr/share/ca-certificates/trust-source/README"," 这个文件",[58,831,834],{"className":832,"code":833,"language":552},[550],"This directory /usr/share/ca-certificates/trust-source/ contains CA certificates\nand trust settings in the PEM file format. The trust settings found here will be\ninterpreted with a low priority - lower than the ones found in \n/etc/ca-certificates/trust-source/ .\n\n=============================================================================\nQUICK HELP: To add a certificate in the simple PEM or DER file formats to the\n            list of CAs trusted on the system:\n\n            Copy it to the\n                    /usr/share/ca-certificates/trust-source/anchors/\n            subdirectory, and run the\n                    update-ca-trust\n            command.\n\n            If your certificate is in the extended BEGIN TRUSTED file format,\n            then place it into the main trust-source/ directory instead.\n=============================================================================\n\nPlease refer to the update-ca-trust(8) manual page for additional information.\n",[64,835,833],{"__ignoreMap":46},[15,837,838,839,842,843,846],{},"这份文件告诉我们可以在 ",[64,840,841],{},"/usr/share/ca-certificates/trust-source/anchors/"," 路径下放置 PEM 证书文件，并使用 ",[64,844,845],{},"update-ca-trust"," 命令更新系统的信任。",[15,848,849,850,853],{},"mitmproxy 软件第一次运行时，将会在当前用户的 ",[64,851,852],{},"$HOME/.mitmproxy/"," 文件夹下生成证书，我们打开这个文件夹，发现一共有六个文件：",[776,855,856,859,862,865,868,871],{},[779,857,858],{},"mitmproxy-ca-cert.cer",[779,860,861],{},"mitmproxy-ca-cert.p12",[779,863,864],{},"mitmproxy-ca-cert.pem",[779,866,867],{},"mitmproxy-ca.p12",[779,869,870],{},"mitmproxy-ca.pem",[779,872,873],{},"mitmproxy-dhparam.pem",[15,875,876,877,879,880,882],{},"我们这里需要将 ",[64,878,864],{}," 文件复制到 ",[64,881,841],{}," 路径下",[58,884,886],{"className":662,"code":885,"language":664,"meta":46,"style":46},"sudo cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem /usr/share/ca-certificates/trust-source/anchors/\n",[64,887,888],{"__ignoreMap":46},[67,889,890,892,895,898,901],{"class":69,"line":70},[67,891,758],{"class":321},[67,893,894],{"class":328}," cp",[67,896,897],{"class":302}," $HOME",[67,899,900],{"class":328},"/.mitmproxy/mitmproxy-ca-cert.pem",[67,902,903],{"class":328}," /usr/share/ca-certificates/trust-source/anchors/\n",[15,905,906,907],{},"随后执行 ",[64,908,845],{},[58,910,912],{"className":662,"code":911,"language":664,"meta":46,"style":46},"sudo update-ca-trust\n",[64,913,914],{"__ignoreMap":46},[67,915,916,918],{"class":69,"line":70},[67,917,758],{"class":321},[67,919,920],{"class":328}," update-ca-trust\n",[15,922,923],{},"这样便完成了 ca 证书的安装",[738,925,927],{"id":926},"使目标软件使用-8080-端口通信","使目标软件使用 8080 端口通信",[15,929,930],{},"其实我试过使用透明代理进行抓包，只不过我的 Archlinux 是作为日常主力机使用的，系统无时无刻不在向外通信，透明代理以后 mitmproxy 的 webui 各种刷屏，便放弃了这个想法，选择指定目标软件使用 8080 端口通信。",[15,932,933,934,937],{},"网上比较常见的做法是使用 ",[64,935,936],{},"proxychains-ng"," 代理目标软件。这个方案是可行的，只不过我这边测试下来，部分软件使用 proxychains 代理以后出现了仍然不使用代理、无法联网、甚至直接崩溃的情况。",[15,939,940],{},[24,941],{"alt":942,"src":943},"程序崩溃","https://static.031130.xyz/uploads/2024/08/12/65e09559dceef.webp",[15,945,946,947,952],{},"因此我转向了 ",[32,948,951],{"href":949,"rel":950},"https://github.com/mzz2017/gg",[36],"gg","。gg 和 proxychains-ng 的定位相同，都是使目标命令通过指定的代理进行通信，只不过 gg 解决了部分 golang 编写的软件无法被 proxychains 代理的问题，并支持一些常见的用来国际联网的协议。",[15,954,955],{},"在不对 gg 进行配置的情况下，每次启动时，gg 都会要求我们输入代理地址，这正合我意。",[15,957,958],{},[24,959],{"alt":960,"src":961},"gg 要求输入代理地址","https://static.031130.xyz/uploads/2024/08/12/65e0963840449.webp",[15,963,964],{},"此时，软件正常启动，流量全部经过 mitmproxy，可以在 webui 上看到具体情况",[738,966,967],{"id":967},"抓包成功",[15,969,970,974],{},[24,971],{"alt":972,"src":973},"命令行下看到流量信息","https://static.031130.xyz/uploads/2024/08/12/65e097dfe1f17.webp",[24,975],{"alt":976,"src":977},"mitmweb 正常获取解密后的流量信息","https://static.031130.xyz/uploads/2024/08/12/65e09780dd2c0.webp",[15,979,980],{},"我们可以看到 mitmproxy 成功捕获并解密的 https 流量，针对图片等信息甚至可以直接实现预览。",[205,982,983],{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}",{"title":46,"searchDepth":76,"depth":76,"links":985},[986,987,988,989,990],{"id":740,"depth":76,"text":741},{"id":770,"depth":76,"text":771},{"id":818,"depth":76,"text":819},{"id":926,"depth":76,"text":927},{"id":967,"depth":76,"text":967},{"title":992,"date":993,"path":994,"tags":995,"body":1000},"如何使用 docker 部署 onemanager","2024-02-11 16:30:29","/2024/02/11/how-to-deploy-onemanager-with-docker",[996,997,998,999],"PHP","OneDrive","OpenSource Project","Docker",{"type":12,"value":1001,"toc":1250},[1002,1004,1007,1014,1016,1025,1030,1060,1064,1079,1082,1086,1111,1118,1124,1133,1144,1160,1169,1178,1181,1184,1194,1213,1217,1244,1247],[55,1003],{},[738,1005,1006],{"id":1006},"部署方法",[15,1008,1009,1010],{},"如果你只是想找一个 OneManager-php 的 Docker 部署方法，直接看 ",[32,1011,1012],{"href":1012,"rel":1013},"https://github.com/zhullyb/OneManager-php-docker",[36],[55,1015],{},[15,1017,1018,1019,1024],{},"一直以来，我都是 ",[32,1020,1023],{"href":1021,"rel":1022},"https://github.com/qkqpttgf/OneManager-php",[36],"OneManager-php"," 的忠实用户。这些年来，尽管有 alist 这种 UI 好看，多种网盘高度聚合的项目逐渐取代了 onemanager 的生态位，但 onemanager 支持文件分片上传、上传流量不经服务器的特点还是让我非常满意。前一阵子，glitch 暂停了针对项目自定义域名的支持，因此在我手贱地取消了项目原本绑定的域名后，迫切地需要寻找一个新的部署的平台，只不过 onemanager 项目现在列出的方案都不太让我满意，因此我就萌生出了在 vps 上自己部署的想法。",[1026,1027,1029],"h3",{"id":1028},"docker-镜像选用","Docker 镜像选用",[15,1031,1032,1033,1037,1038,1043,1044,1047,1048,1051,1052,1055,1056,1059],{},"vps 上自己部署 php 项目，最简单的方法是使用 Docker，",[1034,1035,1036],"del",{},"使用 Docker 就可以免去配置 nginx 或者同类产品的 php-fpm 配置","才怪。我打开 Docker 提供的 ",[32,1039,1042],{"href":1040,"rel":1041},"https://hub.docker.com/_/php",[36],"php 官方镜像","，最小的镜像是带",[64,1045,1046],{},"-cli","后缀的，这个镜像就不适合进行部署，php 内置的开发服务器是单线程的，当同时打开两个网页访问开发服务器的时候，其中一个网页就会卡住；以",[64,1049,1050],{},"-fpm","结尾的镜像变体很明显，仍然需要去 nginx 或同类产品的配置文件那边去配置 fpm，这给部署了好几次 php 项目的我带来的心理阴影；剩下一个就是",[64,1053,1054],{},"-apache","后缀、使用 apache server 提供 php 服务的镜像，体积虽然大了点，但好在操作简单，只需要将 php 文件放进 ",[64,1057,1058],{},"/var/www/html","，启用 php 的相关拓展，启用 apache 的相关功能即可。",[738,1061,1063],{"id":1062},"php-拓展","php 拓展",[15,1065,1066,1067,1070,1071,1074,1075,1078],{},"php 的拓展可以使用镜像自带的 ",[64,1068,1069],{},"docker-php-ext-install"," 和 ",[64,1072,1073],{},"docker-php-ext-enable"," 命令进行操作，此外还有一个 ",[64,1076,1077],{},"docker-php-ext-configure"," 命令可以配置相关的拓展，不过我并不是 php 开发者，不熟悉拓展有什么好配置的。",[15,1080,1081],{},"OneManager-php 没有依赖任何的 php 拓展，因此这个步骤可以直接跳过。",[738,1083,1085],{"id":1084},"apache-server-配置","Apache Server 配置",[15,1087,1088,1089,1092,1093,1092,1096,1092,1099,1092,1102,1092,1105,1092,1108,1110],{},"和 php 拓展一样，镜像内也提供了几个命令进行 Apache Server 的配置，分别为 ",[64,1090,1091],{},"a2disconf","、",[64,1094,1095],{},"a2dismod",[64,1097,1098],{},"a2dissite",[64,1100,1101],{},"a2enconf",[64,1103,1104],{},"a2enmod",[64,1106,1107],{},"a2ensite",[64,1109,1107],{},"。",[15,1112,1113,1114,1117],{},"OneManager-php 在部署的时候依赖于 Apache Server 的 rewrite 的模块，因此在 Dockerfile 中需要使用 ",[64,1115,1116],{},"a2enmod rewrite"," 开启 rewrite 支持。至于别的 Apache Server 配置，都可以通过项目中的 .htaccess 文件进行配置。",[738,1119,1121],{"id":1120},"htaccess-文件纠错",[1034,1122,1123],{},".htaccess 文件纠错",[15,1125,1126],{},[1034,1127,1128,1129,1132],{},"在 OneManager-php 仓库中，",[64,1130,1131],{},".htaccess"," 文件有一些小问题。",[58,1134,1138],{"className":1135,"code":1136,"language":1137,"meta":46,"style":46},"language-htaccess shiki shiki-themes github-light github-dark","RewriteRule ^(.*) index.php?/$1 [L]\n","htaccess",[64,1139,1140],{"__ignoreMap":46},[67,1141,1142],{"class":69,"line":70},[67,1143,1136],{},[15,1145,1146],{},[1034,1147,1148,1149,1152,1153,1092,1156,1159],{},"这行配置原本是将访问的路径追加到 ",[64,1150,1151],{},"index.php?/"," 后面的意思，但 一旦路径中出现了 ",[64,1154,1155],{},"[",[64,1157,1158],{},"]"," 或者空格等字符时，会触发 Apache 自带的保护，因此我们将这行改成下面这个样子即可。",[58,1161,1163],{"className":1135,"code":1162,"language":1137,"meta":46,"style":46},"RewriteRule ^(.*) index.php [QSA,L]\n",[64,1164,1165],{"__ignoreMap":46},[67,1166,1167],{"class":69,"line":70},[67,1168,1162],{},[15,1170,1171,1172,1177],{},"原项目合并了",[32,1173,1176],{"href":1174,"rel":1175},"https://github.com/qkqpttgf/OneManager-php/pull/716",[36],"我的 PR","，因此这一过程不再需要。",[738,1179,1180],{"id":1180},"处理文件权限问题",[15,1182,1183],{},"OneManager-php 在运行过程中，会有针对配置文件的读写操作，此外还内置了一键更新的功能，因此会对路径内的文件进行读写，我们需要确保 php 在运行过程中有权限对这些文件进行读写。",[15,1185,1186,1187,1189,1190,1193],{},"可以直接将 ",[64,1188,1058],{}," 路径的所有权转给 ",[64,1191,1192],{},"www-data"," 用户。",[58,1195,1197],{"className":662,"code":1196,"language":664,"meta":46,"style":46},"chown -R www-data:www-data /var/www/html\n",[64,1198,1199],{"__ignoreMap":46},[67,1200,1201,1204,1207,1210],{"class":69,"line":70},[67,1202,1203],{"class":321},"chown",[67,1205,1206],{"class":411}," -R",[67,1208,1209],{"class":328}," www-data:www-data",[67,1211,1212],{"class":328}," /var/www/html\n",[738,1214,1216],{"id":1215},"最终的-dockerfile","最终的 Dockerfile",[58,1218,1222],{"className":1219,"code":1220,"language":1221,"meta":46,"style":46},"language-dockerfile shiki shiki-themes github-light github-dark","FROM php:8-apache\nRUN a2enmod rewrite\nCOPY OneManager-php /var/www/html\nRUN chown -R www-data:www-data /var/www/html\n","dockerfile",[64,1223,1224,1229,1234,1239],{"__ignoreMap":46},[67,1225,1226],{"class":69,"line":70},[67,1227,1228],{},"FROM php:8-apache\n",[67,1230,1231],{"class":69,"line":76},[67,1232,1233],{},"RUN a2enmod rewrite\n",[67,1235,1236],{"class":69,"line":82},[67,1237,1238],{},"COPY OneManager-php /var/www/html\n",[67,1240,1241],{"class":69,"line":89},[67,1242,1243],{},"RUN chown -R www-data:www-data /var/www/html\n",[15,1245,1246],{},"其实一共就 4 行，还是挺简单的。",[205,1248,1249],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}",{"title":46,"searchDepth":76,"depth":76,"links":1251},[1252,1255,1256,1257,1258,1259],{"id":1006,"depth":76,"text":1006,"children":1253},[1254],{"id":1028,"depth":82,"text":1029},{"id":1062,"depth":76,"text":1063},{"id":1084,"depth":76,"text":1085},{"id":1120,"depth":76,"text":1123},{"id":1180,"depth":76,"text":1180},{"id":1215,"depth":76,"text":1216},{"title":1261,"date":1262,"path":1263,"tags":1264,"body":1266},"crontab 中简单的@语法糖","2024-02-08 17:21:31","/2024/02/08/extra-usage-for-crontab",[492,1265],"crontab",{"type":12,"value":1267,"toc":1460},[1268,1274,1287,1410,1413,1416,1457],[15,1269,1270,1271],{},"说来惭愧，其实我用了这么久的 Linux，一直没有学会编写 crontab 脚本。一行的开头写上五位莫名其妙的数字或星号，后面跟上需要执行的命令，看上去很 kiss，",[1034,1272,1273],{},"但我确实记不住，以至于我现在每次写 crontab 都是让 ChatGPT 来帮我写。",[15,1275,1276,1277,1280,1281,1286],{},"不过我最近查阅 Linux 下设置开机自启脚本的方案的时候，意外地看到 crontab 中居然可以用 ",[64,1278,1279],{},"@reboot command"," 的方式去写，这让我意识到 crontab 也是有一些简单的语法糖的。在查阅了 ",[32,1282,1285],{"href":1283,"rel":1284},"https://man.archlinux.org/man/crontab.5.en#EXTENSIONS",[36],"crontab 的 manual"," 后，我发现一共有下面这么几种 @ 写法的语法糖。这是在全网大部分的 crontab 中文教程中是没有的。",[1288,1289,1290,1306],"table",{},[1291,1292,1293],"thead",{},[1294,1295,1296,1300,1303],"tr",{},[1297,1298,1299],"th",{},"语法糖",[1297,1301,1302],{},"执行条件",[1297,1304,1305],{},"等效表达式",[1307,1308,1309,1322,1337,1350,1365,1380,1395],"tbody",{},[1294,1310,1311,1317,1320],{},[1312,1313,1314],"td",{},[64,1315,1316],{},"@reboot",[1312,1318,1319],{},"开机时候运行",[1312,1321],{},[1294,1323,1324,1329,1332],{},[1312,1325,1326],{},[64,1327,1328],{},"@yearly",[1312,1330,1331],{},"一年一次",[1312,1333,1334],{},[64,1335,1336],{},"0 0 1 1 *",[1294,1338,1339,1344,1346],{},[1312,1340,1341],{},[64,1342,1343],{},"@annually",[1312,1345,1331],{},[1312,1347,1348],{},[64,1349,1336],{},[1294,1351,1352,1357,1360],{},[1312,1353,1354],{},[64,1355,1356],{},"@monthly",[1312,1358,1359],{},"一月一次",[1312,1361,1362],{},[64,1363,1364],{},"0 0 1 * *",[1294,1366,1367,1372,1375],{},[1312,1368,1369],{},[64,1370,1371],{},"@weekly",[1312,1373,1374],{},"一周一次",[1312,1376,1377],{},[64,1378,1379],{},"0 0 * * 0",[1294,1381,1382,1387,1390],{},[1312,1383,1384],{},[64,1385,1386],{},"@daily",[1312,1388,1389],{},"一天一次",[1312,1391,1392],{},[64,1393,1394],{},"0 0 * * *",[1294,1396,1397,1402,1405],{},[1312,1398,1399],{},[64,1400,1401],{},"@hourly",[1312,1403,1404],{},"一小时一次",[1312,1406,1407],{},[64,1408,1409],{},"0 * * * *",[15,1411,1412],{},"这几个简单的语法糖可以满足大部分 crontab 的情况，免去了对使用者学习并记忆 crontab 的表达式的要求。",[15,1414,1415],{},"比如说，如果我希望我的系统在每次开机时都用 TG Bot 发送一条上线信息，那就是",[58,1417,1419],{"className":662,"code":1418,"language":664,"meta":46,"style":46},"@reboot curl -s -X POST https://api.telegram.org/bot{id}:{apikey}/sendMessage -d chat_id={uid} -d text=\"`date`\"\n",[64,1420,1421],{"__ignoreMap":46},[67,1422,1423,1425,1428,1431,1434,1437,1440,1443,1446,1448,1451,1454],{"class":69,"line":70},[67,1424,1316],{"class":321},[67,1426,1427],{"class":328}," curl",[67,1429,1430],{"class":411}," -s",[67,1432,1433],{"class":411}," -X",[67,1435,1436],{"class":328}," POST",[67,1438,1439],{"class":328}," https://api.telegram.org/bot{id}:{apikey}/sendMessage",[67,1441,1442],{"class":411}," -d",[67,1444,1445],{"class":328}," chat_id={uid}",[67,1447,1442],{"class":411},[67,1449,1450],{"class":328}," text=\"`",[67,1452,1453],{"class":321},"date",[67,1455,1456],{"class":328},"`\"\n",[205,1458,1459],{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":1461},[],{"title":1463,"date":1464,"path":1465,"tags":1466,"body":1470},"备份 umami 数据库，并使用 TG Bot 保存 dump 文件","2024-02-01 00:00:01","/2024/02/01/backup-umami-database-and-send-it-by-tg-bot",[1467,1468,1469],"umami","Shell Script","Bot",{"type":12,"value":1471,"toc":1784},[1472,1481,1489,1495,1498,1501,1630,1641,1644,1653,1656,1662,1671,1745,1752,1775,1781],[15,1473,1474,1475,1480],{},"前一阵子看到点墨的博客",[32,1476,1479],{"href":1477,"rel":1478},"https://blog.m-l.cc/2023/11/09/ding-shi-bei-fen-mysql-mariadb-shu-ju-ku-bing-shang-chuan-zhi-tgbot/",[36],"「定时备份mysql/mariadb数据库并上传至tgbot」","，我意识到个人站点的数据库 dump 使用 TG Bot 存放是一个非常合适的做法。个人站点的数据库体积本身就不大，TG Bot 又有官方提供的 api，非常适合自动化任务。我就寻思着给我的 umami 数据库也写个定时任务备份一下，也不至于之前做一次迁移数据全部爆炸的悲剧重演。",[15,1482,1483,1484,1488],{},"我的 umami 是",[32,1485,1487],{"href":1486},"/2022/11/08/free-umami-deploy-plan/","「使用 vercel+supabase 免费部署 umami」","部署出来的，数据库在 supabase 上，因此我们先打开 supabase 的 dashboard，获取到数据库的 url。",[15,1490,1491],{},[24,1492],{"alt":1493,"src":1494},"supabase 操作面板","https://static.031130.xyz/uploads/2024/08/12/65ba6aae157e6.webp",[15,1496,1497],{},"密码我自然是不记得了，不过好在 Firefox 的密码管理器帮我记住了，直接去设置里就能找到。即使密码忘了也不要紧，往下翻有重置密码的按钮。",[15,1499,1500],{},"随后就要开始编写我们的教本了，这是我的",[58,1502,1504],{"className":662,"code":1503,"language":664,"meta":46,"style":46},"#!/bin/bash\n\nDATABASE_URL=\"postgres://\"\nDATE=$(date '+%F')\n\nTG_BOT_TOKEN='1145141919:ABCDEFGHIJKLVMNOPQRSTUVWXYZabcdefgh'\nTG_CHAT_ID='9191415411'\n\npg_dump ${DATABASE_URL} > umami_dump_${DATE}.sql\ncurl -F document=@umami_dump_${DATE}.sql https://api.telegram.org/bot${TG_BOT_TOKEN}/sendDocument?chat_id=${TG_CHAT_ID}\nrm umami_dump_${DATE}.sql\n",[64,1505,1506,1512,1516,1526,1544,1548,1558,1568,1572,1592,1619],{"__ignoreMap":46},[67,1507,1508],{"class":69,"line":70},[67,1509,1511],{"class":1510},"sJ8bj","#!/bin/bash\n",[67,1513,1514],{"class":69,"line":76},[67,1515,86],{"emptyLinePlaceholder":85},[67,1517,1518,1521,1523],{"class":69,"line":82},[67,1519,1520],{"class":302},"DATABASE_URL",[67,1522,325],{"class":407},[67,1524,1525],{"class":328},"\"postgres://\"\n",[67,1527,1528,1531,1533,1536,1538,1541],{"class":69,"line":89},[67,1529,1530],{"class":302},"DATE",[67,1532,325],{"class":407},[67,1534,1535],{"class":302},"$(",[67,1537,1453],{"class":321},[67,1539,1540],{"class":328}," '+%F'",[67,1542,1543],{"class":302},")\n",[67,1545,1546],{"class":69,"line":95},[67,1547,86],{"emptyLinePlaceholder":85},[67,1549,1550,1553,1555],{"class":69,"line":101},[67,1551,1552],{"class":302},"TG_BOT_TOKEN",[67,1554,325],{"class":407},[67,1556,1557],{"class":328},"'1145141919:ABCDEFGHIJKLVMNOPQRSTUVWXYZabcdefgh'\n",[67,1559,1560,1563,1565],{"class":69,"line":107},[67,1561,1562],{"class":302},"TG_CHAT_ID",[67,1564,325],{"class":407},[67,1566,1567],{"class":328},"'9191415411'\n",[67,1569,1570],{"class":69,"line":3},[67,1571,86],{"emptyLinePlaceholder":85},[67,1573,1574,1577,1580,1583,1586,1589],{"class":69,"line":118},[67,1575,1576],{"class":321},"pg_dump",[67,1578,1579],{"class":302}," ${DATABASE_URL} ",[67,1581,1582],{"class":407},">",[67,1584,1585],{"class":328}," umami_dump_",[67,1587,1588],{"class":302},"${DATE}",[67,1590,1591],{"class":328},".sql\n",[67,1593,1594,1596,1599,1602,1604,1607,1610,1613,1616],{"class":69,"line":124},[67,1595,671],{"class":321},[67,1597,1598],{"class":411}," -F",[67,1600,1601],{"class":328}," document=@umami_dump_",[67,1603,1588],{"class":302},[67,1605,1606],{"class":328},".sql",[67,1608,1609],{"class":328}," https://api.telegram.org/bot",[67,1611,1612],{"class":302},"${TG_BOT_TOKEN}",[67,1614,1615],{"class":328},"/sendDocument?chat_id=",[67,1617,1618],{"class":302},"${TG_CHAT_ID}\n",[67,1620,1621,1624,1626,1628],{"class":69,"line":129},[67,1622,1623],{"class":321},"rm",[67,1625,1585],{"class":328},[67,1627,1588],{"class":302},[67,1629,1591],{"class":328},[15,1631,1632,1633,1636,1637,1640],{},"将这段代码保存为 ",[64,1634,1635],{},"umami_db_dumper.sh","，随后 ",[64,1638,1639],{},"chmod +x ./umami_db_dumper.sh"," 授予可执行权限。",[15,1642,1643],{},"可以先在命令行中执行命令试一下这段脚本是否正常工作",[58,1645,1647],{"className":662,"code":1646,"language":664,"meta":46,"style":46},"./umami_db_dumper.sh\n",[64,1648,1649],{"__ignoreMap":46},[67,1650,1651],{"class":69,"line":70},[67,1652,1646],{"class":321},[15,1654,1655],{},"这段代码在我本机正常工作，可惜在我的 Ubuntu VPS 上报错",[58,1657,1660],{"className":1658,"code":1659,"language":552},[550],"pg_dump: error: server version: 14.1; pg_dump version: 12.17 (Ubuntu 12.17-0ubuntu0.20.04.1)\npg_dump: error: aborting because of server version mismatch\n",[64,1661,1659],{"__ignoreMap":46},[15,1663,1664,1665,1670],{},"看上去是 VPS 上的 PostgreSQL 版本过低，Google 搜索一顿后，我在一篇",[32,1666,1669],{"href":1667,"rel":1668},"https://devopsworld.medium.com/upgrade-pg-dump-version-in-ubuntu-545d691d4695",[36],"「Upgrade pg_dump version in ubuntu | by Anushareddy」"," 文章中找到了方案，添加 PostgreSQL 官方提供的 apt 源将 VPS 上的 PostgreSQL 更新到新版即可解决。",[58,1672,1674],{"className":662,"code":1673,"language":664,"meta":46,"style":46},"wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -\necho \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list\napt update\napt install postgresql-client\n",[64,1675,1676,1704,1727,1735],{"__ignoreMap":46},[67,1677,1678,1681,1684,1687,1690,1693,1695,1698,1701],{"class":69,"line":70},[67,1679,1680],{"class":321},"wget",[67,1682,1683],{"class":411}," --quiet",[67,1685,1686],{"class":411}," -O",[67,1688,1689],{"class":328}," -",[67,1691,1692],{"class":328}," https://www.postgresql.org/media/keys/ACCC4CF8.asc",[67,1694,680],{"class":407},[67,1696,1697],{"class":321}," apt-key",[67,1699,1700],{"class":328}," add",[67,1702,1703],{"class":328}," -\n",[67,1705,1706,1709,1712,1715,1718,1721,1724],{"class":69,"line":76},[67,1707,1708],{"class":411},"echo",[67,1710,1711],{"class":328}," \"deb http://apt.postgresql.org/pub/repos/apt/ $(",[67,1713,1714],{"class":321},"lsb_release",[67,1716,1717],{"class":411}," -cs",[67,1719,1720],{"class":328},")-pgdg main\"",[67,1722,1723],{"class":407}," >",[67,1725,1726],{"class":328}," /etc/apt/sources.list.d/pgdg.list\n",[67,1728,1729,1732],{"class":69,"line":82},[67,1730,1731],{"class":321},"apt",[67,1733,1734],{"class":328}," update\n",[67,1736,1737,1739,1742],{"class":69,"line":89},[67,1738,1731],{"class":321},[67,1740,1741],{"class":328}," install",[67,1743,1744],{"class":328}," postgresql-client\n",[15,1746,1747,1748,1751],{},"确保脚本正常工作后，使用 ",[64,1749,1750],{},"crontab -e"," 设置自动任务",[58,1753,1755],{"className":662,"code":1754,"language":664,"meta":46,"style":46},"0 2 * * * /root/umami_db_dumper.sh\n",[64,1756,1757],{"__ignoreMap":46},[67,1758,1759,1762,1765,1768,1770,1772],{"class":69,"line":70},[67,1760,1761],{"class":321},"0",[67,1763,1764],{"class":411}," 2",[67,1766,1767],{"class":411}," *",[67,1769,1767],{"class":411},[67,1771,1767],{"class":411},[67,1773,1774],{"class":328}," /root/umami_db_dumper.sh\n",[15,1776,1777],{},[24,1778],{"alt":1779,"src":1780},"数据库备份","https://static.031130.xyz/uploads/2024/08/12/65c79455b2e40.webp",[205,1782,1783],{},"html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":1785},[],{"title":1787,"date":1788,"path":1789,"tags":1790,"body":1791},"在 JavaScript 中，箭头函数中的 this 指针到底指向哪里？","2024-01-14 02:50:03","/2024/01/14/where-does-this-refer-in-arrow-function-in-js",[218],{"type":12,"value":1792,"toc":2184},[1793,1800,2078,2081,2088,2094,2105,2108,2111,2122,2128,2144,2151,2157,2160,2167,2174,2181],[15,1794,1795,1796,1799],{},"这学期期末复习的时候，学校里负责上 JavaScript 的老师给我们提出了一个问题。下面这段代码中，",[64,1797,1798],{},"a.u2()"," 在 ES Module 下执行会抛出 TypeError 的异常，在 CommonJS 下运行则会输出 undefined，而 B 这个类的 u2 函数则能够在对象实例化以后正常运行。",[58,1801,1805],{"className":1802,"code":1803,"language":1804,"meta":46,"style":46},"language-javascript shiki shiki-themes github-light github-dark","const a = {\n    x: 3,\n    u1: function () {\n        console.log(this.x)\n    },\n    u2: () => {\n        console.log(this.x)\n    }\n}\n\nclass b {\n    x = 3\n\n    u1 = function () {\n        console.log(this.x)\n    }\n\n    u2 = () => {\n        console.log(this.x)\n    }\n}\n\na.u1()\n// 3\na.u2()\n// undefined\n\nnew b().u1()\n// 3\nnew b().u2()\n// 3\n","javascript",[64,1806,1807,1819,1829,1843,1860,1865,1878,1890,1895,1899,1903,1913,1924,1928,1939,1951,1955,1959,1973,1986,1991,1996,2001,2013,2019,2029,2035,2040,2055,2060,2073],{"__ignoreMap":46},[67,1808,1809,1811,1814,1816],{"class":69,"line":70},[67,1810,408],{"class":407},[67,1812,1813],{"class":411}," a",[67,1815,415],{"class":407},[67,1817,1818],{"class":302}," {\n",[67,1820,1821,1824,1827],{"class":69,"line":76},[67,1822,1823],{"class":302},"    x: ",[67,1825,1826],{"class":411},"3",[67,1828,426],{"class":302},[67,1830,1831,1834,1837,1840],{"class":69,"line":82},[67,1832,1833],{"class":321},"    u1",[67,1835,1836],{"class":302},": ",[67,1838,1839],{"class":407},"function",[67,1841,1842],{"class":302}," () {\n",[67,1844,1845,1848,1851,1854,1857],{"class":69,"line":89},[67,1846,1847],{"class":302},"        console.",[67,1849,1850],{"class":321},"log",[67,1852,1853],{"class":302},"(",[67,1855,1856],{"class":411},"this",[67,1858,1859],{"class":302},".x)\n",[67,1861,1862],{"class":69,"line":95},[67,1863,1864],{"class":302},"    },\n",[67,1866,1867,1870,1873,1876],{"class":69,"line":101},[67,1868,1869],{"class":321},"    u2",[67,1871,1872],{"class":302},": () ",[67,1874,1875],{"class":407},"=>",[67,1877,1818],{"class":302},[67,1879,1880,1882,1884,1886,1888],{"class":69,"line":107},[67,1881,1847],{"class":302},[67,1883,1850],{"class":321},[67,1885,1853],{"class":302},[67,1887,1856],{"class":411},[67,1889,1859],{"class":302},[67,1891,1892],{"class":69,"line":3},[67,1893,1894],{"class":302},"    }\n",[67,1896,1897],{"class":69,"line":118},[67,1898,121],{"class":302},[67,1900,1901],{"class":69,"line":124},[67,1902,86],{"emptyLinePlaceholder":85},[67,1904,1905,1908,1911],{"class":69,"line":129},[67,1906,1907],{"class":407},"class",[67,1909,1910],{"class":321}," b",[67,1912,1818],{"class":302},[67,1914,1915,1919,1921],{"class":69,"line":135},[67,1916,1918],{"class":1917},"s4XuR","    x",[67,1920,415],{"class":407},[67,1922,1923],{"class":411}," 3\n",[67,1925,1926],{"class":69,"line":140},[67,1927,86],{"emptyLinePlaceholder":85},[67,1929,1930,1932,1934,1937],{"class":69,"line":443},[67,1931,1833],{"class":321},[67,1933,415],{"class":407},[67,1935,1936],{"class":407}," function",[67,1938,1842],{"class":302},[67,1940,1941,1943,1945,1947,1949],{"class":69,"line":451},[67,1942,1847],{"class":302},[67,1944,1850],{"class":321},[67,1946,1853],{"class":302},[67,1948,1856],{"class":411},[67,1950,1859],{"class":302},[67,1952,1953],{"class":69,"line":457},[67,1954,1894],{"class":302},[67,1956,1957],{"class":69,"line":463},[67,1958,86],{"emptyLinePlaceholder":85},[67,1960,1962,1964,1966,1969,1971],{"class":69,"line":1961},18,[67,1963,1869],{"class":321},[67,1965,415],{"class":407},[67,1967,1968],{"class":302}," () ",[67,1970,1875],{"class":407},[67,1972,1818],{"class":302},[67,1974,1976,1978,1980,1982,1984],{"class":69,"line":1975},19,[67,1977,1847],{"class":302},[67,1979,1850],{"class":321},[67,1981,1853],{"class":302},[67,1983,1856],{"class":411},[67,1985,1859],{"class":302},[67,1987,1989],{"class":69,"line":1988},20,[67,1990,1894],{"class":302},[67,1992,1994],{"class":69,"line":1993},21,[67,1995,121],{"class":302},[67,1997,1999],{"class":69,"line":1998},22,[67,2000,86],{"emptyLinePlaceholder":85},[67,2002,2004,2007,2010],{"class":69,"line":2003},23,[67,2005,2006],{"class":302},"a.",[67,2008,2009],{"class":321},"u1",[67,2011,2012],{"class":302},"()\n",[67,2014,2016],{"class":69,"line":2015},24,[67,2017,2018],{"class":1510},"// 3\n",[67,2020,2022,2024,2027],{"class":69,"line":2021},25,[67,2023,2006],{"class":302},[67,2025,2026],{"class":321},"u2",[67,2028,2012],{"class":302},[67,2030,2032],{"class":69,"line":2031},26,[67,2033,2034],{"class":1510},"// undefined\n",[67,2036,2038],{"class":69,"line":2037},27,[67,2039,86],{"emptyLinePlaceholder":85},[67,2041,2043,2046,2048,2051,2053],{"class":69,"line":2042},28,[67,2044,2045],{"class":407},"new",[67,2047,1910],{"class":321},[67,2049,2050],{"class":302},"().",[67,2052,2009],{"class":321},[67,2054,2012],{"class":302},[67,2056,2058],{"class":69,"line":2057},29,[67,2059,2018],{"class":1510},[67,2061,2063,2065,2067,2069,2071],{"class":69,"line":2062},30,[67,2064,2045],{"class":407},[67,2066,1910],{"class":321},[67,2068,2050],{"class":302},[67,2070,2026],{"class":321},[67,2072,2012],{"class":302},[67,2074,2076],{"class":69,"line":2075},31,[67,2077,2018],{"class":1510},[15,2079,2080],{},"这个问题涉及到 JavaScript 中箭头函数的作用域以及 this 指向。",[15,2082,2083,2084,2087],{},"**在 JS 中使用 function 关键字定义的普通函数中，this 指针遵循一个规则：谁调用指向谁。**即 ",[64,2085,2086],{},"obj.func()"," 这种调用情况下，func 方法内部的this指向obj；如果没有调用者，则严格模式下 this 为 undefined，非严格模式下 this 指向window(浏览器)或者global(node环境)。",[15,2089,2090,2091],{},"而箭头函数比较特殊，",[586,2092,2093],{},"箭头函数的 this 在定义时就被绑定，绑定的是定义时所在作用域中的 this。",[15,2095,2096,2097,2100,2101,2104],{},"在老师给的示例代码中，第一行定义了 a 这个对象字面量，而",[586,2098,2099],{},"定义对象字面量不会创建新的作用域","，因此 a 中定义的 u2 的 this 指向的是全局对象。因此在 Es Module 默认启用 strict mode 的情况下，全局对象的 this 指向 undefined，进而导致 a 的 u2 内 this 也指向 undefined，this.x 就抛了 TypeError；而在 ",[586,2102,2103],{},"CommonJS 未启用 strict mode 的情况下，全局对象的 this 指向全局对象","，因而 u2 内的 this 也指向全局对象，因此 this 存在，this.x 就不会抛 TypeError，只会报 undefined。",[15,2106,2107],{},"而 B 类在对象初始化阶段拥有一个新的作用域，因此箭头函数的 this 能够正确指向 B 被实例化出来的对象，因此也就能够正确读取到 this.x 的值。",[15,2109,2110],{},"理论上来说，我们可以给全局对象也赋一个不一样的 x 值，这样 a.u2() 就能够读取到全局对象中的 x 值，验证我们的结论。",[15,2112,2113,2114,2117,2118,2121],{},"在浏览器中，可以在代码的头部加一行 ",[64,2115,2116],{},"var x = 10"," 或者 ",[64,2119,2120],{},"window.x = 10","，可以看到a.u2() 顺利的输出了 10，验证了我的结论。",[15,2123,2124],{},[24,2125],{"alt":2126,"src":2127},"浏览器控制台调试","https://static.031130.xyz/uploads/2024/08/12/65a2e1d093b78.webp",[15,2129,2130,2131,2117,2133,2136,2137,2139,2140,2143],{},"但在 Node.js 中，直接使用 ",[64,2132,2116],{},[64,2134,2135],{},"global.x = 10"," 并不能达到我们想要的效果。因为Node.js 中的每个 CommonJS 模块都有其自己的模块作用域，即模块的顶层作用域不是全局作用域。在模块内部，",[64,2138,1856],{}," 关键字不是指向 ",[64,2141,2142],{},"global"," 对象，而是指向模块的导出对象。这是为了确保模块内部的作用域隔离和模块的封装性。",[15,2145,2146,2147,2150],{},"那么我们可以通过为模块的导出对象添加一个 x 属性来验证我们的结论，我们可以使用 ",[64,2148,2149],{},"exports.x = 10"," 来为模块的顶层作用域添加一个值为 10 的 x 属性。",[15,2152,2153],{},[24,2154],{"alt":2155,"src":2156},"nodejs 环境运行","https://static.031130.xyz/uploads/2024/08/12/65a2e379ba89e.webp",[738,2158,2159],{"id":2159},"参考文章",[15,2161,2162],{},[32,2163,2166],{"href":2164,"rel":2165},"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions",[36],"箭头函数表达式 - JavaScript | MDN",[15,2168,2169],{},[32,2170,2173],{"href":2171,"rel":2172},"https://segmentfault.com/q/1010000022948115",[36],"ES6箭头函数作用域的问题",[15,2175,2176],{},[32,2177,2180],{"href":2178,"rel":2179},"https://www.zhihu.com/tardis/zm/art/57204184",[36],"ES6箭头函数的this指向详解",[205,2182,2183],{},"html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .s4XuR, html code.shiki .s4XuR{--shiki-default:#E36209;--shiki-dark:#FFAB70}html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":2185},[2186],{"id":2159,"depth":76,"text":2159},{"title":2188,"date":2189,"path":2190,"tags":2191,"body":2193},"结合 Vue.js 与 php 完成的 web 期末大作业，讲讲前后端分离站点开发与部署中可能遇到的 CORS 跨域问题","2024-01-10 23:55:36","/2024/01/10/cors-when-using-splited-frontend-and-backend",[216,996,727,2192,217],"笔记",{"type":12,"value":2194,"toc":2582},[2195,2203,2206,2210,2213,2220,2225,2236,2249,2252,2263,2266,2278,2287,2296,2302,2307,2310,2319,2322,2325,2338,2341,2344,2347,2350,2356,2392,2395,2553,2560,2567,2570,2579],[15,2196,2197,2198,2202],{},"在",[32,2199,2201],{"href":2200},"/2023/12/27/php-and-vuejs-project-deploy-on-caddy/","上一篇博客","中，我讲到了 web 期末大作业的上云部署。整个项目是使用 Vue.js 作为前端，php 作为后端，mysql 作为数据库实现的。",[15,2204,2205],{},"在使用 Vue.js 开发前端界面时，我选择了使用 vite 脚手架帮助开发，这意味着我的作品将使用前后端分离的架构实现。因此在开发部署过程中均遇到了跨域的问题，故写下这篇博客记录下解决方案。",[738,2207,2209],{"id":2208},"基于后端返回对应-http-响应头的解决方案","基于后端返回对应 http 响应头的解决方案",[1026,2211,2212],{"id":2212},"开发阶段",[15,2214,2215,2216,2219],{},"在我完成前后端的开发，并且经过 Apifox 的 mock 测试后，第一次在浏览器尝试前后端对接，遇到了 ",[64,2217,2218],{},"CORS Missing Allow Origin"," 的报错。",[15,2221,2222],{},[24,2223],{"alt":2218,"src":2224},"https://static.031130.xyz/uploads/2024/08/12/659ec607c69af.webp",[15,2226,2227,2228,2231,2232,2235],{},"vite 启动的 dev 开发服务器使用的域是 ",[64,2229,2230],{},"http://localhost:5173"," ，而 php 后端我指定的是 ",[64,2233,2234],{},"http://127.0.0.1:8080"," ，前后端并不运行在一个域下，前端使用 Axios(AJAX) 向后端发送请求获取资源输入 CORS 跨域资源共享的范畴。",[15,2237,2238,2239,2244,2245,2248],{},"关于跨域资源共享 CORS 的相关内容，",[32,2240,2243],{"href":2241,"rel":2242},"https://www.ruanyifeng.com/blog/2016/04/cors.html",[36],"阮一峰老师在 2016 年就已经在他的博客中有过解释","，看了下也是全网中文内容中解释得比较通俗易懂的，因此本文在这方面不过多做解释。错误的提示信息是 Missing Allow Origin，结合阮一峰老师的博文，我们应该在后端向前端发送的 http 响应头中添加 ",[64,2246,2247],{},"Access-Control-Allow-Origin"," 这一字段。",[15,2250,2251],{},"在一般的前后端分离项目（不涉及 cookie 等 Credentials 属性）中，我们可以将这一字段设置为 * 通配符，默认允许所有的域向自己发起跨域资源请求。php 可以通过下面这行代码很方便地进行设置:",[58,2253,2257],{"className":2254,"code":2255,"language":2256,"meta":46,"style":46},"language-php shiki shiki-themes github-light github-dark","header('Access-Control-Allow-Origin: *');\n","php",[64,2258,2259],{"__ignoreMap":46},[67,2260,2261],{"class":69,"line":70},[67,2262,2255],{},[15,2264,2265],{},"但在用户的注册登录方面，我使用了 session 作为用户的登录凭据。阮一峰老师关于 CORS 的博文中有这样一句话:",[251,2267,2268],{},[15,2269,2270,2271,2273,2274,2277],{},"需要注意的是，如果要发送Cookie，",[64,2272,2247],{},"就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的",[64,2275,2276],{},"document.cookie","也无法读取服务器域名下的Cookie。",[15,2279,2280,2281,2283,2284,2286],{},"因此，我们必须明确指定 ",[64,2282,2247],{}," 字段为前端所使用的域，写上 ",[64,2285,2230],{}," 才行。",[58,2288,2290],{"className":2254,"code":2289,"language":2256,"meta":46,"style":46},"header('Access-Control-Allow-Origin: http://localhost:5173');\n",[64,2291,2292],{"__ignoreMap":46},[67,2293,2294],{"class":69,"line":70},[67,2295,2289],{},[15,2297,2298,2299],{},"再次刷新网页，获得了新的错误 ",[64,2300,2301],{},"CORS Missing Allow Credentials",[15,2303,2304],{},[24,2305],{"alt":2301,"src":2306},"https://static.031130.xyz/uploads/2024/08/12/659ec95acc0bc.webp",[15,2308,2309],{},"这个问题处理起来也简单",[58,2311,2313],{"className":2254,"code":2312,"language":2256,"meta":46,"style":46},"header('Access-Control-Allow-Credentials: true');\n",[64,2314,2315],{"__ignoreMap":46},[67,2316,2317],{"class":69,"line":70},[67,2318,2312],{},[15,2320,2321],{},"再次运行网页，跨域问题成功解决。",[1026,2323,2324],{"id":2324},"部署阶段",[15,2326,2327,2328,2330,2331,2334,2335,2337],{},"顺着这个思路进行下去，我们在部署阶段解决跨域问题需要做的事情很简单。提前将前端部署起来，将前端的域写到后端返回给前端的 http 相应头中即可。需要注意的是，",[64,2329,2247],{}," 字段仅允许填写一个值，如果需要同时允许来自多个不同域的跨域资源共享，后端部分需要根据前端发来的请求头中的 ",[64,2332,2333],{},"Origin"," 字段相应地设置响应头中的 ",[64,2336,2247],{}," 。当然，nginx 等先进的 static server 也支持劫持 http 请求，添加相关的 Access-Control 语句，也可以在这一层解决这个问题。",[738,2339,2340],{"id":2340},"直接规避跨域的方案",[15,2342,2343],{},"上面通过后端返回带有 Access-Control 语句相应头的解决方案确实可以解决问题，却显得不够优雅。开发和部署阶段都要手动的去指定前端的域来允许跨域资源共享，这一点过于麻烦了，因此引出了下面的解决方案。",[1026,2345,2212],{"id":2346},"开发阶段-1",[15,2348,2349],{},"在 vite（或者其他同类开发服务器）的帮助下，我们可以使用前端的开发服务器去反向代理后端服务，也就是让前端的请求打到前端服务器上，由前端服务器去返回后端服务器返回的结果。",[15,2351,228,2352,2355],{},[64,2353,2354],{},"vite.config.ts"," 配置文件下，我将原本的",[58,2357,2361],{"className":2358,"code":2359,"language":2360,"meta":46,"style":46},"language-typescript shiki shiki-themes github-light github-dark","export default defineConfig({\n  plugins: [vue()],\n})\n","typescript",[64,2362,2363,2377,2387],{"__ignoreMap":46},[67,2364,2365,2368,2371,2374],{"class":69,"line":70},[67,2366,2367],{"class":407},"export",[67,2369,2370],{"class":407}," default",[67,2372,2373],{"class":321}," defineConfig",[67,2375,2376],{"class":302},"({\n",[67,2378,2379,2382,2384],{"class":69,"line":76},[67,2380,2381],{"class":302},"  plugins: [",[67,2383,295],{"class":321},[67,2385,2386],{"class":302},"()],\n",[67,2388,2389],{"class":69,"line":82},[67,2390,2391],{"class":302},"})\n",[15,2393,2394],{},"换成了",[58,2396,2398],{"className":2358,"code":2397,"language":2360,"meta":46,"style":46},"export default () => {\n  process.env = { ...process.env, ...loadEnv(process.cwd(),'') };\n\n  const config = {\n    plugins: [vue()],\n    server: {\n      proxy: {\n        '/api': {\n          target: http://127.0.0.1:8080,\n          changeOrigin: true,\n          secure: false,\n        }\n      }\n    }\n  }\n  return defineConfig(config)\n};\n",[64,2399,2400,2412,2448,2452,2464,2473,2478,2483,2491,2499,2509,2519,2524,2529,2533,2538,2548],{"__ignoreMap":46},[67,2401,2402,2404,2406,2408,2410],{"class":69,"line":70},[67,2403,2367],{"class":407},[67,2405,2370],{"class":407},[67,2407,1968],{"class":302},[67,2409,1875],{"class":407},[67,2411,1818],{"class":302},[67,2413,2414,2417,2419,2422,2425,2428,2430,2433,2436,2439,2442,2445],{"class":69,"line":76},[67,2415,2416],{"class":302},"  process.env ",[67,2418,325],{"class":407},[67,2420,2421],{"class":302}," { ",[67,2423,2424],{"class":407},"...",[67,2426,2427],{"class":302},"process.env, ",[67,2429,2424],{"class":407},[67,2431,2432],{"class":321},"loadEnv",[67,2434,2435],{"class":302},"(process.",[67,2437,2438],{"class":321},"cwd",[67,2440,2441],{"class":302},"(),",[67,2443,2444],{"class":328},"''",[67,2446,2447],{"class":302},") };\n",[67,2449,2450],{"class":69,"line":82},[67,2451,86],{"emptyLinePlaceholder":85},[67,2453,2454,2457,2460,2462],{"class":69,"line":89},[67,2455,2456],{"class":407},"  const",[67,2458,2459],{"class":411}," config",[67,2461,415],{"class":407},[67,2463,1818],{"class":302},[67,2465,2466,2469,2471],{"class":69,"line":95},[67,2467,2468],{"class":302},"    plugins: [",[67,2470,295],{"class":321},[67,2472,2386],{"class":302},[67,2474,2475],{"class":69,"line":101},[67,2476,2477],{"class":302},"    server: {\n",[67,2479,2480],{"class":69,"line":107},[67,2481,2482],{"class":302},"      proxy: {\n",[67,2484,2485,2488],{"class":69,"line":3},[67,2486,2487],{"class":328},"        '/api'",[67,2489,2490],{"class":302},": {\n",[67,2492,2493,2496],{"class":69,"line":118},[67,2494,2495],{"class":302},"          target: http:",[67,2497,2498],{"class":1510},"//127.0.0.1:8080,\n",[67,2500,2501,2504,2507],{"class":69,"line":124},[67,2502,2503],{"class":302},"          changeOrigin: ",[67,2505,2506],{"class":411},"true",[67,2508,426],{"class":302},[67,2510,2511,2514,2517],{"class":69,"line":129},[67,2512,2513],{"class":302},"          secure: ",[67,2515,2516],{"class":411},"false",[67,2518,426],{"class":302},[67,2520,2521],{"class":69,"line":135},[67,2522,2523],{"class":302},"        }\n",[67,2525,2526],{"class":69,"line":140},[67,2527,2528],{"class":302},"      }\n",[67,2530,2531],{"class":69,"line":443},[67,2532,1894],{"class":302},[67,2534,2535],{"class":69,"line":451},[67,2536,2537],{"class":302},"  }\n",[67,2539,2540,2543,2545],{"class":69,"line":457},[67,2541,2542],{"class":407},"  return",[67,2544,2373],{"class":321},[67,2546,2547],{"class":302},"(config)\n",[67,2549,2550],{"class":69,"line":463},[67,2551,2552],{"class":302},"};\n",[15,2554,2555,2556,2559],{},"同时将 Axios create 时的 ",[64,2557,2558],{},"baseURL"," 参数去除。",[15,2561,2562,2563,2566],{},"这样一套组合拳下来，将所有打向 ",[64,2564,2565],{},"/api*"," 的请求和响应通过前端的开发服务器作为中介做了中转，让浏览器以为并没有跨域（事实上也没有跨域），从而解决了相关的问题。",[1026,2568,2324],{"id":2569},"部署阶段-1",[15,2571,2572,2573,2578],{},"在开发阶段，我们通过 vite 的开发服务器做反向代理规避了跨域请求，但在部署阶段就用不了了。由于 vite 服务器的性能太弱，一般情况下我们是不会在生产环境中使用 vite 作为正式的服务器的，而是使用 vite build 出网站的静态网页资源，通过 nginx 等 static server 去向用户提供前端网页。而通过 vite build 出来的静态网页资源本身是不具备反向代理的能力的，这意味着没法在前端侧规避跨域问题。此时，我们应该配置 nginx 规避跨域问题。我一向不怎么使用 nginx，使用的是它的平替品 caddy，因此 nginx 的配置文件需要大家自行搜索，",[32,2574,2577],{"href":2575,"rel":2576},"https://zhul.in/2023/12/27/php-and-vuejs-project-deploy-on-caddy/#Caddy-%E9%85%8D%E7%BD%AE",[36],"我的 caddyfile 在上一篇博客中已经给出","，仅供参考。",[205,2580,2581],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}",{"title":46,"searchDepth":76,"depth":76,"links":2583},[2584,2588],{"id":2208,"depth":76,"text":2209,"children":2585},[2586,2587],{"id":2212,"depth":82,"text":2212},{"id":2324,"depth":82,"text":2324},{"id":2340,"depth":76,"text":2340,"children":2589},[2590,2591],{"id":2346,"depth":82,"text":2212},{"id":2569,"depth":82,"text":2324},{"title":2593,"date":2594,"path":2595,"tags":2596,"body":2598},"vuejs、php、caddy 与 docker —— web 期末大作业上云部署","2023-12-27 22:09:00","/2023/12/27/php-and-vuejs-project-deploy-on-caddy",[996,2597,216,727,999,217],"Caddy",{"type":12,"value":2599,"toc":2899},[2600,2617,2620,2629,2632,2660,2668,2682,2689,2752,2766,2770,2773,2780,2786,2789,2792,2799,2825,2828,2831,2842,2846,2849,2855,2878,2882,2889,2896],[251,2601,2602,2605,2611,2614],{},[15,2603,2604],{},"这学期修了一门叫《用HTML5 和 PHP编写JavaScript，jQuery 和 AJAX脚本》的 web 课（对，听起来很奇怪的名字）。期末大作业是写一个影评系统，前端允许使用框架，后端仅允许使用 php，具体的作业要求如下",[15,2606,2607],{},[24,2608],{"alt":2609,"src":2610},"作业要求","https://static.031130.xyz/uploads/2024/08/12/658c4c3128ae4.webp",[15,2612,2613],{},"（源码会在验收结束以后开源）",[15,2615,2616],{},"大作业写了得要有三个礼拜，工作时长加起来得有 30 个小时，想着验收之前上线一段时间积累一些评论数据，验收的时候也会更加顺利一些，于是就开始尝试在服务器上部署。部署的过程还是比较复杂的，所以写下这篇博客记录一下。",[738,2618,2619],{"id":2619},"后端部分",[15,2621,2622,2623,2628],{},"早前有",[32,2624,2627],{"href":2625,"rel":2626},"https://zhul.in/2021/10/21/picuploader-on-archlinux-with-caddy/",[36],"《PicUploader使用系列（一）——在Archlinux上使用Caddy部署PicUploader》","的经验，便觉得使用 Caddy + php-fpm 部署的方式多少有点麻烦了，这次便尝试了使用 Docker 部署、Caddy 反代的方式。",[15,2630,2631],{},"Dockerfile 如下:",[58,2633,2635],{"className":1219,"code":2634,"language":1221,"meta":46,"style":46},"FROM php:8-apache\nRUN docker-php-ext-install mysqli\nRUN a2enmod rewrite\nCOPY . /var/www/html\nEXPOSE 80\n",[64,2636,2637,2641,2646,2650,2655],{"__ignoreMap":46},[67,2638,2639],{"class":69,"line":70},[67,2640,1228],{},[67,2642,2643],{"class":69,"line":76},[67,2644,2645],{},"RUN docker-php-ext-install mysqli\n",[67,2647,2648],{"class":69,"line":82},[67,2649,1233],{},[67,2651,2652],{"class":69,"line":89},[67,2653,2654],{},"COPY . /var/www/html\n",[67,2656,2657],{"class":69,"line":95},[67,2658,2659],{},"EXPOSE 80\n",[15,2661,2662,2663,2667],{},"在后端的根目录下有一个 .htaccess 文件，将所有的请求都交给 index.php 来处理，这样就可以根据我的",[32,2664,2201],{"href":2665,"rel":2666},"https://zhul.in/2023/12/12/php-simple-rest-api/",[36],"中所提到的方式去构建不使用任何 php 框架实现的简易 router 效果",[58,2669,2671],{"className":1135,"code":2670,"language":1137,"meta":46,"style":46},"RewriteEngine On\nRewriteRule ^(.*) index.php [QSA,L]\n",[64,2672,2673,2678],{"__ignoreMap":46},[67,2674,2675],{"class":69,"line":70},[67,2676,2677],{},"RewriteEngine On\n",[67,2679,2680],{"class":69,"line":76},[67,2681,1162],{},[15,2683,2684,2685,2688],{},"构建 Docker 镜像时使用 ",[64,2686,2687],{},"docker build . -t mrs-php"," 命令，运行 docker 容器时使用命令",[58,2690,2692],{"className":662,"code":2691,"language":664,"meta":46,"style":46},"docker run -d \\\n    -p 7788:80 \\\n    --name mrs-php \\\n    -v /path/to/uploads:/var/www/html/uploads \\\n    --restart unless-stopped \\\n    mrs-php\n",[64,2693,2694,2707,2717,2727,2737,2747],{"__ignoreMap":46},[67,2695,2696,2699,2702,2704],{"class":69,"line":70},[67,2697,2698],{"class":321},"docker",[67,2700,2701],{"class":328}," run",[67,2703,1442],{"class":411},[67,2705,2706],{"class":411}," \\\n",[67,2708,2709,2712,2715],{"class":69,"line":76},[67,2710,2711],{"class":411},"    -p",[67,2713,2714],{"class":328}," 7788:80",[67,2716,2706],{"class":411},[67,2718,2719,2722,2725],{"class":69,"line":82},[67,2720,2721],{"class":411},"    --name",[67,2723,2724],{"class":328}," mrs-php",[67,2726,2706],{"class":411},[67,2728,2729,2732,2735],{"class":69,"line":89},[67,2730,2731],{"class":411},"    -v",[67,2733,2734],{"class":328}," /path/to/uploads:/var/www/html/uploads",[67,2736,2706],{"class":411},[67,2738,2739,2742,2745],{"class":69,"line":95},[67,2740,2741],{"class":411},"    --restart",[67,2743,2744],{"class":328}," unless-stopped",[67,2746,2706],{"class":411},[67,2748,2749],{"class":69,"line":101},[67,2750,2751],{"class":328},"    mrs-php\n",[15,2753,2754,2755,1070,2758,2761,2762,2765],{},"这样，后端就在 7788 端口上开起来了，后续 Caddy 只要将打到 ",[64,2756,2757],{},"/api/*",[64,2759,2760],{},"/uploads/*"," 的请求转发到 7788 端口即可，避免了使用 php-fpm 时需要的配置。",[64,2763,2764],{},"uploads"," 目录是用来存放图片的，我将这个路径挂在在宿主机的目录下，方便备份导入等操作。",[1026,2767,2769],{"id":2768},"mysql-连接时的小插曲","mysql 连接时的小插曲",[15,2771,2772],{},"需要注意的是，在 Docker 容器中运行的 php 如果想要访问宿主机上的 mysql，需要注意修改 mysql 服务器的 ip 地址，并允许 mysql 接收来自非本机的请求。",[15,2774,2775,2776,2779],{},"在宿主机中运行 ",[64,2777,2778],{},"ip -br a"," 命令可以看到 docker 所采用的虚拟网卡的 ip 地址",[58,2781,2784],{"className":2782,"code":2783,"language":552},[550],"docker0          UP             172.17.0.1/16 fe80::42:eff:febf:b26c/64\n",[64,2785,2783],{"__ignoreMap":46},[15,2787,2788],{},"我这边得到的 ip 地址是 172.17.0.1，所以在 php 那边访问的数据库 ip 地址就应该是 172.17.0.1，而非 localhost 或者 127.0.0.1",[15,2790,2791],{},"此外，需要允许宿主机的 mysql 接收来自 Docker 容器的请求",[15,2793,2794,2795,2798],{},"使用 ",[64,2796,2797],{},"docker network inspect bridge"," 命令可以查到 docker 容器的 ip 地址，接着需要去允许来自这个 ip 的请求。建议去网上自行搜索，因为 mysql 语句我自己也不熟悉。我使用的 mysql 版本是 8，语句似乎和以前的版本不兼容？我使用下面三个命令轮着输就好了（有时候报错，有时侯又不报错），有大佬懂的话评论区讲讲。",[58,2800,2804],{"className":2801,"code":2802,"language":2803,"meta":46,"style":46},"language-mysql shiki shiki-themes github-light github-dark","use mysql;\nGRANT ALL ON *.* TO 'root'@'%';\nupdate user set host='%' where user='root';\nGRANT ALL ON *.* TO 'root'@'%';\n","mysql",[64,2805,2806,2811,2816,2821],{"__ignoreMap":46},[67,2807,2808],{"class":69,"line":70},[67,2809,2810],{},"use mysql;\n",[67,2812,2813],{"class":69,"line":76},[67,2814,2815],{},"GRANT ALL ON *.* TO 'root'@'%';\n",[67,2817,2818],{"class":69,"line":82},[67,2819,2820],{},"update user set host='%' where user='root';\n",[67,2822,2823],{"class":69,"line":89},[67,2824,2815],{},[738,2826,2827],{"id":2827},"前端部分",[15,2829,2830],{},"前端部分部署起来没什么难度",[15,2832,2833,2834,2837,2838,2841],{},"我使用的是 vite 开发的 vuejs 项目，直接使用 ",[64,2835,2836],{},"pnpm build"," 构建出静态文件，然后放入了 ",[64,2839,2840],{},"/var/www/mrs"," 目录，这部分没什么可说的",[738,2843,2845],{"id":2844},"caddy-配置","Caddy 配置",[15,2847,2848],{},"Caddy 配置如下",[58,2850,2853],{"className":2851,"code":2852,"language":552},[550],"example.com {\n    handle /api/* {\n        reverse_proxy localhost:7788\n    }\n\n    handle /uploads/* {\n        reverse_proxy localhost:7788\n    }\n\n    handle /* {\n        root * /var/www/mrs\n        file_server\n        try_files {path} /\n    }\n}\n",[64,2854,2852],{"__ignoreMap":46},[15,2856,2857,2858,1070,2860,2862,2863,2866,2867,2870,2871,2874,2875,2877],{},"将打到 ",[64,2859,2757],{},[64,2861,2760],{}," 都交给 7788 端口的后端进行处理，前端部分要使用 ",[64,2864,2865],{},"try_files"," 将请求都指向 ",[64,2868,2869],{},"/"," 或 ",[64,2872,2873],{},"/index.html"," 交由 vue-router 处理，否则 caddy 就找不到对应的文件了。这里我尝试过使用 route 关键词代替 handle，但 ",[64,2876,2865],{}," 的功能没有生效，这两者的区别官方文档中有提到，但我没看懂，等我以后看看有没有机会去折腾了。",[738,2879,2881],{"id":2880},"参考","参考:",[15,2883,2884],{},[32,2885,2888],{"href":2886,"rel":2887},"https://homeboyc.cn/blog/%E4%BD%BF%E7%94%A8caddy%E9%85%8D%E7%BD%AE%E5%90%8C%E4%B8%80%E5%9F%9F%E5%90%8D%E4%B8%8B%E7%9A%84%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB/",[36],"使用Caddy配置同一域名下的前后分离",[15,2890,2891],{},[32,2892,2895],{"href":2893,"rel":2894},"https://blog.lyh543.cn/notes/linux/caddy.html",[36],"Caddy 2",[205,2897,2898],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}",{"title":46,"searchDepth":76,"depth":76,"links":2900},[2901,2904,2905,2906],{"id":2619,"depth":76,"text":2619,"children":2902},[2903],{"id":2768,"depth":82,"text":2769},{"id":2827,"depth":76,"text":2827},{"id":2844,"depth":76,"text":2845},{"id":2880,"depth":76,"text":2881},127,1761699626896]