[{"data":1,"prerenderedAt":3046},["ShallowReactive",2],{"randomIndex/page/5/":3,"index-page-5":4,"posts-total":3045},22,[5,211,518,753,1023,1292,1494,1844,2275,2730],{"title":6,"date":7,"path":8,"tags":9,"body":11},"使用 Python 生成甘特图(Gantt Chart)","2024-04-24 12:02:58","/2024/04/24/generate-gantt-chart-with-python",[10],"Python",{"type":12,"value":13,"toc":209},"minimark",[14,18,21,28,39,42,48,51,54,57,145,150,152,200,205],[15,16,17],"p",{},"在写操作系统的作业的时候有几道题给出了几个进程的相关信息，要求我们画出几种简单调度的甘特图。操作系统的作业一直是电子版，上传 pdf 即可的。我觉得手画甘特图拍照嵌入 pdf 中不太优雅，过于掉价，因此就想直接生成甘特图嵌入。",[15,19,20],{},"在谷歌搜寻了一番，我发现现在的甘特图生成网站都太现代化了，根本不是操作系统课上教的样子了。",[15,22,23],{},[24,25],"img",{"alt":26,"src":27},"现代化的甘特图","https://static.031130.xyz/uploads/2024/08/12/662888bd5a0af.webp",[15,29,30,31,38],{},"所幸我找到了 ",[32,33,37],"a",{"href":34,"rel":35},"https://github.com/gao-keyong/matplotlib-gantt/",[36],"nofollow","gao-keyong/matplotlib-gantt","，虽然只有两个 star（没事，加上我就 3 stars 了），但确实能用，README 中的样例也是我期望的样子。",[15,40,41],{},"项目中自带了一个 jupyter 的示例，算得上是非常简单易上手的了，依赖方面只要装好 matplotlib 就可以使用，不存在依赖地狱。尽管是三年前的项目，在我本机的 Python 3.11 上仍然能够正常运行。",[15,43,44],{},[24,45],{"alt":46,"src":47},"","https://static.031130.xyz/uploads/2024/08/12/66288ba6414d4.webp",[15,49,50],{},"tuple 中的第一个数字表示从当前时间开始，第二个数字表示持续时间。每一个表示 category 的 list 中可以存在多个 tuple。",[15,52,53],{},"给一些咱生成的例子。",[55,56],"hr",{},[58,59,63],"pre",{"className":60,"code":61,"language":62,"meta":46,"style":46},"language-python shiki shiki-themes one-light one-dark-pro","from gantt import *\ncategory_names = ['P1', 'P2', 'P3', 'P4', 'P5']\n\nresults = {\n    'FCFS': [[(0,2)], [(2,1)], [(3,8)], [(11,4)], [(15,5)]],\n    'SJF': [[(1,2)], [(0,1)], [(12,8)], [(3,4)], [(7,5)]],\n    'non-compreemptive priority': [[(13,2)],[(19,1)],[(0,8)],[(15,4)],[(8,5)]],\n    'RR (quantum=2)': [[(0,2)], [(2,1)],[(3,2),(9,2),(15,2),(18,2)], [(5,2),(11,2)], [(7,2),(13,2),(17,1)]]\n}\n\narrival_t = [0, 0, 0, 0]\n\ngantt(category_names, results, arrival_t).show()\n\n","python",[64,65,66,74,80,87,93,99,105,111,117,123,128,134,139],"code",{"__ignoreMap":46},[67,68,71],"span",{"class":69,"line":70},"line",1,[67,72,73],{},"from gantt import *\n",[67,75,77],{"class":69,"line":76},2,[67,78,79],{},"category_names = ['P1', 'P2', 'P3', 'P4', 'P5']\n",[67,81,83],{"class":69,"line":82},3,[67,84,86],{"emptyLinePlaceholder":85},true,"\n",[67,88,90],{"class":69,"line":89},4,[67,91,92],{},"results = {\n",[67,94,96],{"class":69,"line":95},5,[67,97,98],{},"    'FCFS': [[(0,2)], [(2,1)], [(3,8)], [(11,4)], [(15,5)]],\n",[67,100,102],{"class":69,"line":101},6,[67,103,104],{},"    'SJF': [[(1,2)], [(0,1)], [(12,8)], [(3,4)], [(7,5)]],\n",[67,106,108],{"class":69,"line":107},7,[67,109,110],{},"    'non-compreemptive priority': [[(13,2)],[(19,1)],[(0,8)],[(15,4)],[(8,5)]],\n",[67,112,114],{"class":69,"line":113},8,[67,115,116],{},"    'RR (quantum=2)': [[(0,2)], [(2,1)],[(3,2),(9,2),(15,2),(18,2)], [(5,2),(11,2)], [(7,2),(13,2),(17,1)]]\n",[67,118,120],{"class":69,"line":119},9,[67,121,122],{},"}\n",[67,124,126],{"class":69,"line":125},10,[67,127,86],{"emptyLinePlaceholder":85},[67,129,131],{"class":69,"line":130},11,[67,132,133],{},"arrival_t = [0, 0, 0, 0]\n",[67,135,137],{"class":69,"line":136},12,[67,138,86],{"emptyLinePlaceholder":85},[67,140,142],{"class":69,"line":141},13,[67,143,144],{},"gantt(category_names, results, arrival_t).show()\n",[15,146,147],{},[24,148],{"alt":46,"src":149},"https://static.031130.xyz/uploads/2024/08/12/662890f78f1da.webp",[55,151],{},[58,153,155],{"className":60,"code":154,"language":62,"meta":46,"style":46},"from gantt import *\ncategory_names = ['P1', 'P2', 'P3', 'P4', 'P5', 'P6']\n\nresults = {\n    '': [[(0,20)], [(25,10),(45,10),(75,5)], [(35,10),(55,5),(80,10)], [(60,15)], [(100,5),(115,5)],[(105,10)]],\n}\n\narrival_t = [0]\n\ngantt(category_names, results, arrival_t).show()\n\n",[64,156,157,161,166,170,174,179,183,187,192,196],{"__ignoreMap":46},[67,158,159],{"class":69,"line":70},[67,160,73],{},[67,162,163],{"class":69,"line":76},[67,164,165],{},"category_names = ['P1', 'P2', 'P3', 'P4', 'P5', 'P6']\n",[67,167,168],{"class":69,"line":82},[67,169,86],{"emptyLinePlaceholder":85},[67,171,172],{"class":69,"line":89},[67,173,92],{},[67,175,176],{"class":69,"line":95},[67,177,178],{},"    '': [[(0,20)], [(25,10),(45,10),(75,5)], [(35,10),(55,5),(80,10)], [(60,15)], [(100,5),(115,5)],[(105,10)]],\n",[67,180,181],{"class":69,"line":101},[67,182,122],{},[67,184,185],{"class":69,"line":107},[67,186,86],{"emptyLinePlaceholder":85},[67,188,189],{"class":69,"line":113},[67,190,191],{},"arrival_t = [0]\n",[67,193,194],{"class":69,"line":119},[67,195,86],{"emptyLinePlaceholder":85},[67,197,198],{"class":69,"line":125},[67,199,144],{},[15,201,202],{},[24,203],{"alt":46,"src":204},"https://static.031130.xyz/uploads/2024/08/12/662891bfa52fc.webp",[206,207,208],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":210},[],{"title":212,"date":213,"path":214,"tags":215,"body":220},"uniapp 中的图片预加载","2024-04-01 05:31:25","/2024/04/01/image-preload-in-uniapp",[216,217,218,219],"uniapp","Vue.js","Web","JavaScript",{"type":12,"value":221,"toc":516},[222,225,227,240,242,251,261,271,277,283,285,292,501,506,513],[15,223,224],{},"最近在做微信小程序的时候遇到了图片资源过大无法正常打包的问题，没什么太好的方法，只能是使用图床托管这些图片资源。但部分图片的体积实在太大，即使是采用了境内 cdn 的图床，即使是采用 webp 对图片进行了压缩，部分图片都需要小几秒去把图片加载出来，这导致的用户体验就不是很好了，因此我们需要实现图片预加载的功能。",[55,226],{},[15,228,229,230,235,236,239],{},"在 ",[32,231,234],{"href":232,"rel":233},"https://uniapp.dcloud.net.cn/api/preload-page.html#preloadpage",[36],"uniapp 的官方文档","中，我找到了 ",[64,237,238],{},"uni.preloadPage(OBJECT)"," 方法。很可惜，这个方法并不支持微信小程序，自然不能完成被预加载页面的图片资源预加载。",[55,241],{},[15,243,244,245,250],{},"经过搜索，在",[32,246,249],{"href":247,"rel":248},"https://frontend.mimiwuqi.com/qianduan/202517.html",[36],"一篇奇奇怪怪的文章","中提到：",[252,253,254],"blockquote",{},[15,255,256,257,260],{},"在UniApp中，图片预加载可以通过使用",[64,258,259],{},"uni.getImageInfo","方法来实现。这个方法可以获取图片的信息，包括宽度、高度等。可以在应用启动时就开始加载图片，以提高后续图片显示的速度。",[15,262,263,264,267,268,270],{},"很遗憾，经过实测，提前使用 ",[64,265,266],{},"getImageInfo()"," 方法并不能实现图片的预加载。",[64,269,266],{}," 获取时的 Type 是 xhr，而后续图片加载时的 Type 为 webp，图片会被重复下载，并没有实现预加载的作用。",[15,272,273],{},[24,274],{"alt":275,"src":276},"下载测试","https://static.031130.xyz/uploads/2024/08/12/6609d97bc4f7f.webp",[15,278,279,280,282],{},"上图中，蓝色部分是 ",[64,281,266],{}," 的网络请求，红色部分是真正的图片加载请求，可谓是一点用都没有，该加载慢还是加载慢。",[55,284],{},[15,286,287,288,291],{},"那有没有什么办法能够实现预加载呢？我没找到优雅的方法，选择在应用的首页创建一个 ",[64,289,290],{},"display: none"," 的 view 将所有的图片先加载一遍。",[58,293,297],{"className":294,"code":295,"language":296,"meta":46,"style":46},"language-vue shiki shiki-themes one-light one-dark-pro","\u003Ctemplate>\n    \u003Cview style=\"display: none;\">\n        \u003Cimage\n            v-for=\"image in imageToPreload\"\n            :src=\"image\"\n        />\n    \u003C/view>\n\u003C/template>\n\u003Cscript setup lang=\"ts\">\nconst imageToPreload = [\n    \"https://http.cat/100\",\n    \"https://http.cat/200\",\n    \"https://http.cat/300\",\n    \"https://http.cat/400\",\n    \"https://http.cat/500\"\n]\n\u003C/script>\n","vue",[64,298,299,312,344,352,375,391,396,405,414,435,450,458,465,472,480,486,492],{"__ignoreMap":46},[67,300,301,305,309],{"class":69,"line":70},[67,302,304],{"class":303},"s5ixo","\u003C",[67,306,308],{"class":307},"sJa8x","template",[67,310,311],{"class":303},">\n",[67,313,314,317,320,324,327,330,333,337,340,342],{"class":69,"line":76},[67,315,316],{"class":303},"    \u003C",[67,318,319],{"class":307},"view",[67,321,323],{"class":322},"sAGMh"," style",[67,325,326],{"class":303},"=",[67,328,329],{"class":303},"\"",[67,331,332],{"class":303},"display: ",[67,334,336],{"class":335},"sYebD","none",[67,338,339],{"class":303},";",[67,341,329],{"class":303},[67,343,311],{"class":303},[67,345,346,349],{"class":69,"line":82},[67,347,348],{"class":303},"        \u003C",[67,350,351],{"class":307},"image\n",[67,353,354,358,360,362,366,369,372],{"class":69,"line":89},[67,355,357],{"class":356},"sLKXg","            v-for",[67,359,326],{"class":303},[67,361,329],{"class":303},[67,363,365],{"class":364},"sz0mV","image",[67,367,368],{"class":356}," in",[67,370,371],{"class":364}," imageToPreload",[67,373,374],{"class":303},"\"\n",[67,376,377,380,383,385,387,389],{"class":69,"line":95},[67,378,379],{"class":303},"            :",[67,381,382],{"class":322},"src",[67,384,326],{"class":303},[67,386,329],{"class":303},[67,388,365],{"class":364},[67,390,374],{"class":303},[67,392,393],{"class":69,"line":101},[67,394,395],{"class":303},"        />\n",[67,397,398,401,403],{"class":69,"line":107},[67,399,400],{"class":303},"    \u003C/",[67,402,319],{"class":307},[67,404,311],{"class":303},[67,406,407,410,412],{"class":69,"line":113},[67,408,409],{"class":303},"\u003C/",[67,411,308],{"class":307},[67,413,311],{"class":303},[67,415,416,418,421,424,427,429,433],{"class":69,"line":119},[67,417,304],{"class":303},[67,419,420],{"class":307},"script",[67,422,423],{"class":322}," setup",[67,425,426],{"class":322}," lang",[67,428,326],{"class":303},[67,430,432],{"class":431},"sDhpE","\"ts\"",[67,434,311],{"class":303},[67,436,437,440,443,447],{"class":69,"line":125},[67,438,439],{"class":356},"const",[67,441,371],{"class":442},"sNmU0",[67,444,446],{"class":445},"s_Sar"," =",[67,448,449],{"class":303}," [\n",[67,451,452,455],{"class":69,"line":130},[67,453,454],{"class":431},"    \"https://http.cat/100\"",[67,456,457],{"class":303},",\n",[67,459,460,463],{"class":69,"line":136},[67,461,462],{"class":431},"    \"https://http.cat/200\"",[67,464,457],{"class":303},[67,466,467,470],{"class":69,"line":141},[67,468,469],{"class":431},"    \"https://http.cat/300\"",[67,471,457],{"class":303},[67,473,475,478],{"class":69,"line":474},14,[67,476,477],{"class":431},"    \"https://http.cat/400\"",[67,479,457],{"class":303},[67,481,483],{"class":69,"line":482},15,[67,484,485],{"class":431},"    \"https://http.cat/500\"\n",[67,487,489],{"class":69,"line":488},16,[67,490,491],{"class":303},"]\n",[67,493,495,497,499],{"class":69,"line":494},17,[67,496,409],{"class":303},[67,498,420],{"class":307},[67,500,311],{"class":303},[15,502,503],{},[24,504],{"alt":275,"src":505},"https://static.031130.xyz/uploads/2024/08/12/6609db8a213da.webp",[15,507,508,509,512],{},"可以看到，红色部分的资源在 size 那一栏变成了 ",[64,510,511],{},"(disk cache)","，加载时间也明显降低，虽然方法不优雅，但起码实现了图片资源的预加载。",[206,514,515],{},"html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sYebD, html code.shiki .sYebD{--shiki-default:#383A42;--shiki-dark:#D19A66}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .sz0mV, html code.shiki .sz0mV{--shiki-default:#383A42;--shiki-dark:#E06C75}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sNmU0, html code.shiki .sNmU0{--shiki-default:#986801;--shiki-dark:#E5C07B}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":517},[],{"title":519,"date":520,"path":521,"tags":522,"body":526},"小记 - 尝试拼凑出 apt 仓库中的 deb 包下载地址","2024-03-13 21:55:04","/2024/03/13/try-to-compose-download-links-of-deb-packages-in-apt-repository",[523,524,525],"Linux","Apt","deepin",{"type":12,"value":527,"toc":751},[528,531,540,543,546,552,559,562,565,573,586,655,662,668,679,685,688,691,722,728,739,742,748],[15,529,530],{},"大概一周前，有一个来源不明的 Linux 微信，从包的结构来看是基于 qt 实现的图形化界面，deb 包中的 control 信息表明是腾讯团队官方出品的。今天听人说 UOS 的商店上架了最新的微信，便尝试从 UOS 的官方仓库提取下载链接，帮助 AUR Maintainer 获取到新的地址。",[15,532,533,534,539],{},"在我的",[32,535,538],{"href":536,"rel":537},"https://zhul.in/2021/11/20/what-is-deepin-elf-verify/",[36],"《deepin-elf-verify究竟是何物？》","这篇文章中，我成功从 uos.deepin.cn 下载到了来自 UOS 中的软件包。可惜，当我采用同样的方法搜索 weixin 或者 wechat 字样时，没有得到任何结果。",[15,541,542],{},"UOS 上的软件来源起码来自两个仓库，一个是与系统有关的软件，比如 Linux Kernel，GCC 一类开源软件，应该就是来自我之前下载到 deepin-elf-verify 的那个源。除此之外，还有一个 appstore 源，里面存放的都是应用商店中上架的软件（大部分可能是闭源的）。",[15,544,545],{},"在 chinauos.com 下载到最新的 ISO 安装镜像后，直接在虚拟机中走完正常的安装流畅，然后直捣黄龙。",[15,547,548],{},[24,549],{"alt":550,"src":551},"源地址","https://static.031130.xyz/uploads/2024/08/12/65f1b344e5581.webp",[15,553,554,555,558],{},"可以看出，",[64,556,557],{},"/etc/apt/sources.list.d/appstore.list"," 文件中列出的源很有可能就是我们要找的新版微信的所在源。",[15,560,561],{},"可惜直接访问的时候，源地址给出了 403。他们似乎不愿意公开源地址的 filelist index。",[15,563,564],{},"不过没关系，既然 UOS Desktop 目前仍然依赖 APT 实现软件安装，那它的源应该仍然符合 Debian 的 APT Repository 目录结构。",[15,566,567,568],{},"根据 ",[32,569,572],{"href":570,"rel":571},"https://wiki.debian.org/DebianRepository/Format",[36],"DebianWiki 中的描述",[252,574,575,578],{},[15,576,577],{},"gives an example:",[58,579,584],{"className":580,"code":582,"language":583},[581],"language-text","deb https://deb.debian.org/debian stable main contrib non-free\n","text",[64,585,582],{"__ignoreMap":46},[252,587,588,591,609,642],{},[15,589,590],{},"An archive can have either source packages or binary packages or both but they have to be specified separately to apt.",[15,592,593,594,600,601,604,605,608],{},"The uri, in this case ",[595,596,597],"em",{},[64,598,599],{},"https://deb.debian.org/debian"," specifies the root of the archive. Often Debian archives are in the ",[595,602,603],{},"debian/"," directory on the server but can be anywhere else (many mirrors for example have it in a ",[595,606,607],{},"pub/linux/debian"," directory, for example).",[15,610,611,612,615,616,620,621,624,625,628,629,632,633,636,637],{},"The distribution part (",[595,613,614],{},"stable"," in this case) specifies a subdirectory in ",[617,618,619],"strong",{},"$ARCHIVE_ROOT/dists",". It can contain additional slashes to specify subdirectories nested deeper, eg. ",[595,622,623],{},"stable/updates",". distribution typically corresponds to ",[617,626,627],{},"Suite"," or ",[617,630,631],{},"Codename"," specified in the ",[617,634,635],{},"Release"," files. ",[595,638,639],{},[617,640,641],{},"FIXME is this enforced anyhow?",[15,643,644,645,628,648,650,651,654],{},"To download packages from a repository apt would download an ",[617,646,647],{},"InRelease",[617,649,635],{}," file from the ",[617,652,653],{},"$ARCHIVE_ROOT/dists/$DISTRIBUTION"," directory.",[15,656,657,658,661],{},"我尝试了访问 ",[64,659,660],{},"https://pro-store-packages.uniontech.com/appstore/dists/eagle-pro/Release","，获得了一系列索引文件的索引。",[15,663,664],{},[24,665],{"alt":666,"src":667},"索引的索引（很拗口）","https://static.031130.xyz/uploads/2024/08/12/65f1b5166810a.webp",[15,669,670,671,674,675],{},"第一段中就能看到熟悉的 ",[64,672,673],{},"Packages"," 文件。根据我 deepin-elf-verify 相关博客中记载，这个文件中会保存 deb 文件的相对路径。我们先拼出 amd64 架构的 Packages 文件下载链接: ",[32,676,677],{"href":677,"rel":678},"https://pro-store-packages.uniontech.com/appstore/dists/eagle-pro/appstore/binary-amd64/Packages",[36],[15,680,681],{},[24,682],{"alt":683,"src":684},"deb 包详细信息","https://static.031130.xyz/uploads/2024/08/12/65f1b5faccc86.webp",[15,686,687],{},"这里可以看到源中每一个 deb 包的信息。图中红色方框框出的便是其中一个 deb 包在源中的相对路径。",[15,689,690],{},"我们可以使用 grep 命令去检索 weixin 或者 wechat 关键词",[58,692,696],{"className":693,"code":694,"language":695,"meta":46,"style":46},"language-bash shiki shiki-themes one-light one-dark-pro","curl -sL https://pro-store-packages.uniontech.com/appstore/dists/eagle-pro/appstore/binary-amd64/Packages | grep -E \"weixin|wechat\"\n","bash",[64,697,698],{"__ignoreMap":46},[67,699,700,704,707,710,713,716,719],{"class":69,"line":70},[67,701,703],{"class":702},"sAdtL","curl",[67,705,706],{"class":322}," -sL",[67,708,709],{"class":431}," https://pro-store-packages.uniontech.com/appstore/dists/eagle-pro/appstore/binary-amd64/Packages",[67,711,712],{"class":303}," | ",[67,714,715],{"class":702},"grep",[67,717,718],{"class":322}," -E",[67,720,721],{"class":431}," \"weixin|wechat\"\n",[15,723,724],{},[24,725],{"alt":726,"src":727},"获取到我们想要的 deb 包的相对路径","https://static.031130.xyz/uploads/2024/08/12/65f1b6a4c3239.webp",[15,729,730,731,734,735],{},"在这个路径前加上之前 ",[64,732,733],{},"appstore.list"," 文件中给出的 url 前缀，即可拼凑出 deb 包的完整下载地址: ",[32,736,737],{"href":737,"rel":738},"https://pro-store-packages.uniontech.com/appstore/pool/appstore/c/com.tencent.wechat/com.tencent.wechat_1.0.0.236_amd64.deb",[36],[15,740,741],{},"放到浏览器中尝试，果然可以正常下载",[15,743,744],{},[24,745],{"alt":746,"src":747},"正常下载","https://static.031130.xyz/uploads/2024/08/12/65f1b73567121.webp",[206,749,750],{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":752},[],{"title":754,"date":755,"path":756,"tags":757,"body":761},"在 Linux 下使用 mitmproxy 抓取 HTTPS 流量","2024-02-29 22:03:58","/2024/02/29/capture-https-traffic-on-linux-with-mitmproxy",[523,758,759,760],"Archlinux","Network","mitmproxy",{"type":12,"value":762,"toc":1016},[763,766,769,774,781,800,804,807,819,827,833,843,848,852,855,862,868,879,886,906,915,936,941,953,956,960,963,970,976,985,988,994,997,1000,1010,1013],[15,764,765],{},"作为部分 AUR Package 的 maintainer，一直以来我都有在 Linux 下抓取 https 流量的需求，比如抓取应用内的更新检测时访问的 url 地址。之前一直没有空去研究，趁着最近课少，总算是完成了这个目标。",[15,767,768],{},"在这里我使用的 mitmproxy，基于 python 和 webui 的一款开源简洁的流量代理软件，可以用于抓取 https 流量信息。",[770,771,773],"h2",{"id":772},"安装-mitmproxy","安装 mitmproxy",[15,775,776,777,780],{},"在 Arch Linux 下，官方 ",[64,778,779],{},"extra"," 源中已经打包好了这款软件，直接使用下面的命令即可完成安装。",[58,782,784],{"className":693,"code":783,"language":695,"meta":46,"style":46},"sudo pacman -S mitmproxy\n",[64,785,786],{"__ignoreMap":46},[67,787,788,791,794,797],{"class":69,"line":70},[67,789,790],{"class":702},"sudo",[67,792,793],{"class":431}," pacman",[67,795,796],{"class":322}," -S",[67,798,799],{"class":431}," mitmproxy\n",[770,801,803],{"id":802},"尝试运行-mitmweb","尝试运行 mitmweb",[15,805,806],{},"安装完成后，我们将会获得三个新的命令可用：",[808,809,810,814,816],"ul",{},[811,812,813],"li",{},"mitmdump",[811,815,760],{},[811,817,818],{},"mitmweb",[15,820,821,822,826],{},"我们只要使用 mitmweb 即可同时打开 8080 的代理端口和 8081 端口的 webui。访问 ",[32,823,824],{"href":824,"rel":825},"http://127.0.0.1:8081",[36]," 即可看到 mitmproxy 的网页。",[15,828,829],{},[24,830],{"alt":831,"src":832},"mitmweb 的界面","https://static.031130.xyz/uploads/2024/08/12/65e092503d5bb.webp",[15,834,835,836],{},"当然，也可以在 mitmweb 命令后面追加 -p ",[837,838,839,840],"port",{}," 和 --web-port=",[837,841,842],{}," 分别设置代理端口和 webui 的端口。",[15,844,845,846],{},"首先，我们先运行一次 ",[64,847,818],{},[770,849,851],{"id":850},"安装-ca-证书","安装 ca 证书",[15,853,854],{},"为了解密 https 流量，我们需要为系统安装上 mitmproxy 自己的证书文件，让系统信任我们的证书。",[15,856,857,858,861],{},"先来看看 ",[64,859,860],{},"/usr/share/ca-certificates/trust-source/README"," 这个文件",[58,863,866],{"className":864,"code":865,"language":583},[581],"This directory /usr/share/ca-certificates/trust-source/ contains CA certificates\nand trust settings in the PEM file format. The trust settings found here will be\ninterpreted with a low priority - lower than the ones found in \n/etc/ca-certificates/trust-source/ .\n\n=============================================================================\nQUICK HELP: To add a certificate in the simple PEM or DER file formats to the\n            list of CAs trusted on the system:\n\n            Copy it to the\n                    /usr/share/ca-certificates/trust-source/anchors/\n            subdirectory, and run the\n                    update-ca-trust\n            command.\n\n            If your certificate is in the extended BEGIN TRUSTED file format,\n            then place it into the main trust-source/ directory instead.\n=============================================================================\n\nPlease refer to the update-ca-trust(8) manual page for additional information.\n",[64,867,865],{"__ignoreMap":46},[15,869,870,871,874,875,878],{},"这份文件告诉我们可以在 ",[64,872,873],{},"/usr/share/ca-certificates/trust-source/anchors/"," 路径下放置 PEM 证书文件，并使用 ",[64,876,877],{},"update-ca-trust"," 命令更新系统的信任。",[15,880,881,882,885],{},"mitmproxy 软件第一次运行时，将会在当前用户的 ",[64,883,884],{},"$HOME/.mitmproxy/"," 文件夹下生成证书，我们打开这个文件夹，发现一共有六个文件：",[808,887,888,891,894,897,900,903],{},[811,889,890],{},"mitmproxy-ca-cert.cer",[811,892,893],{},"mitmproxy-ca-cert.p12",[811,895,896],{},"mitmproxy-ca-cert.pem",[811,898,899],{},"mitmproxy-ca.p12",[811,901,902],{},"mitmproxy-ca.pem",[811,904,905],{},"mitmproxy-dhparam.pem",[15,907,908,909,911,912,914],{},"我们这里需要将 ",[64,910,896],{}," 文件复制到 ",[64,913,873],{}," 路径下",[58,916,918],{"className":693,"code":917,"language":695,"meta":46,"style":46},"sudo cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem /usr/share/ca-certificates/trust-source/anchors/\n",[64,919,920],{"__ignoreMap":46},[67,921,922,924,927,930,933],{"class":69,"line":70},[67,923,790],{"class":702},[67,925,926],{"class":431}," cp",[67,928,929],{"class":307}," $HOME",[67,931,932],{"class":431},"/.mitmproxy/mitmproxy-ca-cert.pem",[67,934,935],{"class":431}," /usr/share/ca-certificates/trust-source/anchors/\n",[15,937,938,939],{},"随后执行 ",[64,940,877],{},[58,942,944],{"className":693,"code":943,"language":695,"meta":46,"style":46},"sudo update-ca-trust\n",[64,945,946],{"__ignoreMap":46},[67,947,948,950],{"class":69,"line":70},[67,949,790],{"class":702},[67,951,952],{"class":431}," update-ca-trust\n",[15,954,955],{},"这样便完成了 ca 证书的安装",[770,957,959],{"id":958},"使目标软件使用-8080-端口通信","使目标软件使用 8080 端口通信",[15,961,962],{},"其实我试过使用透明代理进行抓包，只不过我的 Archlinux 是作为日常主力机使用的，系统无时无刻不在向外通信，透明代理以后 mitmproxy 的 webui 各种刷屏，便放弃了这个想法，选择指定目标软件使用 8080 端口通信。",[15,964,965,966,969],{},"网上比较常见的做法是使用 ",[64,967,968],{},"proxychains-ng"," 代理目标软件。这个方案是可行的，只不过我这边测试下来，部分软件使用 proxychains 代理以后出现了仍然不使用代理、无法联网、甚至直接崩溃的情况。",[15,971,972],{},[24,973],{"alt":974,"src":975},"程序崩溃","https://static.031130.xyz/uploads/2024/08/12/65e09559dceef.webp",[15,977,978,979,984],{},"因此我转向了 ",[32,980,983],{"href":981,"rel":982},"https://github.com/mzz2017/gg",[36],"gg","。gg 和 proxychains-ng 的定位相同，都是使目标命令通过指定的代理进行通信，只不过 gg 解决了部分 golang 编写的软件无法被 proxychains 代理的问题，并支持一些常见的用来国际联网的协议。",[15,986,987],{},"在不对 gg 进行配置的情况下，每次启动时，gg 都会要求我们输入代理地址，这正合我意。",[15,989,990],{},[24,991],{"alt":992,"src":993},"gg 要求输入代理地址","https://static.031130.xyz/uploads/2024/08/12/65e0963840449.webp",[15,995,996],{},"此时，软件正常启动，流量全部经过 mitmproxy，可以在 webui 上看到具体情况",[770,998,999],{"id":999},"抓包成功",[15,1001,1002,1006],{},[24,1003],{"alt":1004,"src":1005},"命令行下看到流量信息","https://static.031130.xyz/uploads/2024/08/12/65e097dfe1f17.webp",[24,1007],{"alt":1008,"src":1009},"mitmweb 正常获取解密后的流量信息","https://static.031130.xyz/uploads/2024/08/12/65e09780dd2c0.webp",[15,1011,1012],{},"我们可以看到 mitmproxy 成功捕获并解密的 https 流量，针对图片等信息甚至可以直接实现预览。",[206,1014,1015],{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}",{"title":46,"searchDepth":76,"depth":76,"links":1017},[1018,1019,1020,1021,1022],{"id":772,"depth":76,"text":773},{"id":802,"depth":76,"text":803},{"id":850,"depth":76,"text":851},{"id":958,"depth":76,"text":959},{"id":999,"depth":76,"text":999},{"title":1024,"date":1025,"path":1026,"tags":1027,"body":1032},"如何使用 docker 部署 onemanager","2024-02-11 16:30:29","/2024/02/11/how-to-deploy-onemanager-with-docker",[1028,1029,1030,1031],"PHP","OneDrive","OpenSource Project","Docker",{"type":12,"value":1033,"toc":1282},[1034,1036,1039,1046,1048,1057,1062,1092,1096,1111,1114,1118,1143,1150,1156,1165,1176,1192,1201,1210,1213,1216,1226,1245,1249,1276,1279],[55,1035],{},[770,1037,1038],{"id":1038},"部署方法",[15,1040,1041,1042],{},"如果你只是想找一个 OneManager-php 的 Docker 部署方法，直接看 ",[32,1043,1044],{"href":1044,"rel":1045},"https://github.com/zhullyb/OneManager-php-docker",[36],[55,1047],{},[15,1049,1050,1051,1056],{},"一直以来，我都是 ",[32,1052,1055],{"href":1053,"rel":1054},"https://github.com/qkqpttgf/OneManager-php",[36],"OneManager-php"," 的忠实用户。这些年来，尽管有 alist 这种 UI 好看，多种网盘高度聚合的项目逐渐取代了 onemanager 的生态位，但 onemanager 支持文件分片上传、上传流量不经服务器的特点还是让我非常满意。前一阵子，glitch 暂停了针对项目自定义域名的支持，因此在我手贱地取消了项目原本绑定的域名后，迫切地需要寻找一个新的部署的平台，只不过 onemanager 项目现在列出的方案都不太让我满意，因此我就萌生出了在 vps 上自己部署的想法。",[1058,1059,1061],"h3",{"id":1060},"docker-镜像选用","Docker 镜像选用",[15,1063,1064,1065,1069,1070,1075,1076,1079,1080,1083,1084,1087,1088,1091],{},"vps 上自己部署 php 项目，最简单的方法是使用 Docker，",[1066,1067,1068],"del",{},"使用 Docker 就可以免去配置 nginx 或者同类产品的 php-fpm 配置","才怪。我打开 Docker 提供的 ",[32,1071,1074],{"href":1072,"rel":1073},"https://hub.docker.com/_/php",[36],"php 官方镜像","，最小的镜像是带",[64,1077,1078],{},"-cli","后缀的，这个镜像就不适合进行部署，php 内置的开发服务器是单线程的，当同时打开两个网页访问开发服务器的时候，其中一个网页就会卡住；以",[64,1081,1082],{},"-fpm","结尾的镜像变体很明显，仍然需要去 nginx 或同类产品的配置文件那边去配置 fpm，这给部署了好几次 php 项目的我带来的心理阴影；剩下一个就是",[64,1085,1086],{},"-apache","后缀、使用 apache server 提供 php 服务的镜像，体积虽然大了点，但好在操作简单，只需要将 php 文件放进 ",[64,1089,1090],{},"/var/www/html","，启用 php 的相关拓展，启用 apache 的相关功能即可。",[770,1093,1095],{"id":1094},"php-拓展","php 拓展",[15,1097,1098,1099,1102,1103,1106,1107,1110],{},"php 的拓展可以使用镜像自带的 ",[64,1100,1101],{},"docker-php-ext-install"," 和 ",[64,1104,1105],{},"docker-php-ext-enable"," 命令进行操作，此外还有一个 ",[64,1108,1109],{},"docker-php-ext-configure"," 命令可以配置相关的拓展，不过我并不是 php 开发者，不熟悉拓展有什么好配置的。",[15,1112,1113],{},"OneManager-php 没有依赖任何的 php 拓展，因此这个步骤可以直接跳过。",[770,1115,1117],{"id":1116},"apache-server-配置","Apache Server 配置",[15,1119,1120,1121,1124,1125,1124,1128,1124,1131,1124,1134,1124,1137,1124,1140,1142],{},"和 php 拓展一样，镜像内也提供了几个命令进行 Apache Server 的配置，分别为 ",[64,1122,1123],{},"a2disconf","、",[64,1126,1127],{},"a2dismod",[64,1129,1130],{},"a2dissite",[64,1132,1133],{},"a2enconf",[64,1135,1136],{},"a2enmod",[64,1138,1139],{},"a2ensite",[64,1141,1139],{},"。",[15,1144,1145,1146,1149],{},"OneManager-php 在部署的时候依赖于 Apache Server 的 rewrite 的模块，因此在 Dockerfile 中需要使用 ",[64,1147,1148],{},"a2enmod rewrite"," 开启 rewrite 支持。至于别的 Apache Server 配置，都可以通过项目中的 .htaccess 文件进行配置。",[770,1151,1153],{"id":1152},"htaccess-文件纠错",[1066,1154,1155],{},".htaccess 文件纠错",[15,1157,1158],{},[1066,1159,1160,1161,1164],{},"在 OneManager-php 仓库中，",[64,1162,1163],{},".htaccess"," 文件有一些小问题。",[58,1166,1170],{"className":1167,"code":1168,"language":1169,"meta":46,"style":46},"language-htaccess shiki shiki-themes one-light one-dark-pro","RewriteRule ^(.*) index.php?/$1 [L]\n","htaccess",[64,1171,1172],{"__ignoreMap":46},[67,1173,1174],{"class":69,"line":70},[67,1175,1168],{},[15,1177,1178],{},[1066,1179,1180,1181,1184,1185,1124,1188,1191],{},"这行配置原本是将访问的路径追加到 ",[64,1182,1183],{},"index.php?/"," 后面的意思，但 一旦路径中出现了 ",[64,1186,1187],{},"[",[64,1189,1190],{},"]"," 或者空格等字符时，会触发 Apache 自带的保护，因此我们将这行改成下面这个样子即可。",[58,1193,1195],{"className":1167,"code":1194,"language":1169,"meta":46,"style":46},"RewriteRule ^(.*) index.php [QSA,L]\n",[64,1196,1197],{"__ignoreMap":46},[67,1198,1199],{"class":69,"line":70},[67,1200,1194],{},[15,1202,1203,1204,1209],{},"原项目合并了",[32,1205,1208],{"href":1206,"rel":1207},"https://github.com/qkqpttgf/OneManager-php/pull/716",[36],"我的 PR","，因此这一过程不再需要。",[770,1211,1212],{"id":1212},"处理文件权限问题",[15,1214,1215],{},"OneManager-php 在运行过程中，会有针对配置文件的读写操作，此外还内置了一键更新的功能，因此会对路径内的文件进行读写，我们需要确保 php 在运行过程中有权限对这些文件进行读写。",[15,1217,1218,1219,1221,1222,1225],{},"可以直接将 ",[64,1220,1090],{}," 路径的所有权转给 ",[64,1223,1224],{},"www-data"," 用户。",[58,1227,1229],{"className":693,"code":1228,"language":695,"meta":46,"style":46},"chown -R www-data:www-data /var/www/html\n",[64,1230,1231],{"__ignoreMap":46},[67,1232,1233,1236,1239,1242],{"class":69,"line":70},[67,1234,1235],{"class":702},"chown",[67,1237,1238],{"class":322}," -R",[67,1240,1241],{"class":431}," www-data:www-data",[67,1243,1244],{"class":431}," /var/www/html\n",[770,1246,1248],{"id":1247},"最终的-dockerfile","最终的 Dockerfile",[58,1250,1254],{"className":1251,"code":1252,"language":1253,"meta":46,"style":46},"language-dockerfile shiki shiki-themes one-light one-dark-pro","FROM php:8-apache\nRUN a2enmod rewrite\nCOPY OneManager-php /var/www/html\nRUN chown -R www-data:www-data /var/www/html\n","dockerfile",[64,1255,1256,1261,1266,1271],{"__ignoreMap":46},[67,1257,1258],{"class":69,"line":70},[67,1259,1260],{},"FROM php:8-apache\n",[67,1262,1263],{"class":69,"line":76},[67,1264,1265],{},"RUN a2enmod rewrite\n",[67,1267,1268],{"class":69,"line":82},[67,1269,1270],{},"COPY OneManager-php /var/www/html\n",[67,1272,1273],{"class":69,"line":89},[67,1274,1275],{},"RUN chown -R www-data:www-data /var/www/html\n",[15,1277,1278],{},"其实一共就 4 行，还是挺简单的。",[206,1280,1281],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}",{"title":46,"searchDepth":76,"depth":76,"links":1283},[1284,1287,1288,1289,1290,1291],{"id":1038,"depth":76,"text":1038,"children":1285},[1286],{"id":1060,"depth":82,"text":1061},{"id":1094,"depth":76,"text":1095},{"id":1116,"depth":76,"text":1117},{"id":1152,"depth":76,"text":1155},{"id":1212,"depth":76,"text":1212},{"id":1247,"depth":76,"text":1248},{"title":1293,"date":1294,"path":1295,"tags":1296,"body":1298},"crontab 中简单的@语法糖","2024-02-08 17:21:31","/2024/02/08/extra-usage-for-crontab",[523,1297],"crontab",{"type":12,"value":1299,"toc":1492},[1300,1306,1319,1442,1445,1448,1489],[15,1301,1302,1303],{},"说来惭愧，其实我用了这么久的 Linux，一直没有学会编写 crontab 脚本。一行的开头写上五位莫名其妙的数字或星号，后面跟上需要执行的命令，看上去很 kiss，",[1066,1304,1305],{},"但我确实记不住，以至于我现在每次写 crontab 都是让 ChatGPT 来帮我写。",[15,1307,1308,1309,1312,1313,1318],{},"不过我最近查阅 Linux 下设置开机自启脚本的方案的时候，意外地看到 crontab 中居然可以用 ",[64,1310,1311],{},"@reboot command"," 的方式去写，这让我意识到 crontab 也是有一些简单的语法糖的。在查阅了 ",[32,1314,1317],{"href":1315,"rel":1316},"https://man.archlinux.org/man/crontab.5.en#EXTENSIONS",[36],"crontab 的 manual"," 后，我发现一共有下面这么几种 @ 写法的语法糖。这是在全网大部分的 crontab 中文教程中是没有的。",[1320,1321,1322,1338],"table",{},[1323,1324,1325],"thead",{},[1326,1327,1328,1332,1335],"tr",{},[1329,1330,1331],"th",{},"语法糖",[1329,1333,1334],{},"执行条件",[1329,1336,1337],{},"等效表达式",[1339,1340,1341,1354,1369,1382,1397,1412,1427],"tbody",{},[1326,1342,1343,1349,1352],{},[1344,1345,1346],"td",{},[64,1347,1348],{},"@reboot",[1344,1350,1351],{},"开机时候运行",[1344,1353],{},[1326,1355,1356,1361,1364],{},[1344,1357,1358],{},[64,1359,1360],{},"@yearly",[1344,1362,1363],{},"一年一次",[1344,1365,1366],{},[64,1367,1368],{},"0 0 1 1 *",[1326,1370,1371,1376,1378],{},[1344,1372,1373],{},[64,1374,1375],{},"@annually",[1344,1377,1363],{},[1344,1379,1380],{},[64,1381,1368],{},[1326,1383,1384,1389,1392],{},[1344,1385,1386],{},[64,1387,1388],{},"@monthly",[1344,1390,1391],{},"一月一次",[1344,1393,1394],{},[64,1395,1396],{},"0 0 1 * *",[1326,1398,1399,1404,1407],{},[1344,1400,1401],{},[64,1402,1403],{},"@weekly",[1344,1405,1406],{},"一周一次",[1344,1408,1409],{},[64,1410,1411],{},"0 0 * * 0",[1326,1413,1414,1419,1422],{},[1344,1415,1416],{},[64,1417,1418],{},"@daily",[1344,1420,1421],{},"一天一次",[1344,1423,1424],{},[64,1425,1426],{},"0 0 * * *",[1326,1428,1429,1434,1437],{},[1344,1430,1431],{},[64,1432,1433],{},"@hourly",[1344,1435,1436],{},"一小时一次",[1344,1438,1439],{},[64,1440,1441],{},"0 * * * *",[15,1443,1444],{},"这几个简单的语法糖可以满足大部分 crontab 的情况，免去了对使用者学习并记忆 crontab 的表达式的要求。",[15,1446,1447],{},"比如说，如果我希望我的系统在每次开机时都用 TG Bot 发送一条上线信息，那就是",[58,1449,1451],{"className":693,"code":1450,"language":695,"meta":46,"style":46},"@reboot curl -s -X POST https://api.telegram.org/bot{id}:{apikey}/sendMessage -d chat_id={uid} -d text=\"`date`\"\n",[64,1452,1453],{"__ignoreMap":46},[67,1454,1455,1457,1460,1463,1466,1469,1472,1475,1478,1480,1483,1486],{"class":69,"line":70},[67,1456,1348],{"class":702},[67,1458,1459],{"class":431}," curl",[67,1461,1462],{"class":322}," -s",[67,1464,1465],{"class":322}," -X",[67,1467,1468],{"class":431}," POST",[67,1470,1471],{"class":431}," https://api.telegram.org/bot{id}:{apikey}/sendMessage",[67,1473,1474],{"class":322}," -d",[67,1476,1477],{"class":431}," chat_id={uid}",[67,1479,1474],{"class":322},[67,1481,1482],{"class":431}," text=\"`",[67,1484,1485],{"class":702},"date",[67,1487,1488],{"class":431},"`\"\n",[206,1490,1491],{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":1493},[],{"title":1495,"date":1496,"path":1497,"tags":1498,"body":1502},"备份 umami 数据库，并使用 TG Bot 保存 dump 文件","2024-02-01 00:00:01","/2024/02/01/backup-umami-database-and-send-it-by-tg-bot",[1499,1500,1501],"umami","Shell Script","Bot",{"type":12,"value":1503,"toc":1842},[1504,1513,1521,1527,1530,1533,1688,1699,1702,1711,1714,1720,1729,1802,1809,1833,1839],[15,1505,1506,1507,1512],{},"前一阵子看到点墨的博客",[32,1508,1511],{"href":1509,"rel":1510},"https://blog.m-l.cc/2023/11/09/ding-shi-bei-fen-mysql-mariadb-shu-ju-ku-bing-shang-chuan-zhi-tgbot/",[36],"「定时备份mysql/mariadb数据库并上传至tgbot」","，我意识到个人站点的数据库 dump 使用 TG Bot 存放是一个非常合适的做法。个人站点的数据库体积本身就不大，TG Bot 又有官方提供的 api，非常适合自动化任务。我就寻思着给我的 umami 数据库也写个定时任务备份一下，也不至于之前做一次迁移数据全部爆炸的悲剧重演。",[15,1514,1515,1516,1520],{},"我的 umami 是",[32,1517,1519],{"href":1518},"/2022/11/08/free-umami-deploy-plan/","「使用 vercel+supabase 免费部署 umami」","部署出来的，数据库在 supabase 上，因此我们先打开 supabase 的 dashboard，获取到数据库的 url。",[15,1522,1523],{},[24,1524],{"alt":1525,"src":1526},"supabase 操作面板","https://static.031130.xyz/uploads/2024/08/12/65ba6aae157e6.webp",[15,1528,1529],{},"密码我自然是不记得了，不过好在 Firefox 的密码管理器帮我记住了，直接去设置里就能找到。即使密码忘了也不要紧，往下翻有重置密码的按钮。",[15,1531,1532],{},"随后就要开始编写我们的教本了，这是我的",[58,1534,1536],{"className":693,"code":1535,"language":695,"meta":46,"style":46},"#!/bin/bash\n\nDATABASE_URL=\"postgres://\"\nDATE=$(date '+%F')\n\nTG_BOT_TOKEN='1145141919:ABCDEFGHIJKLVMNOPQRSTUVWXYZabcdefgh'\nTG_CHAT_ID='9191415411'\n\npg_dump ${DATABASE_URL} > umami_dump_${DATE}.sql\ncurl -F document=@umami_dump_${DATE}.sql https://api.telegram.org/bot${TG_BOT_TOKEN}/sendDocument?chat_id=${TG_CHAT_ID}\nrm umami_dump_${DATE}.sql\n",[64,1537,1538,1544,1548,1559,1577,1581,1591,1601,1605,1635,1672],{"__ignoreMap":46},[67,1539,1540],{"class":69,"line":70},[67,1541,1543],{"class":1542},"sW2Sy","#!/bin/bash\n",[67,1545,1546],{"class":69,"line":76},[67,1547,86],{"emptyLinePlaceholder":85},[67,1549,1550,1553,1556],{"class":69,"line":82},[67,1551,1552],{"class":307},"DATABASE_URL",[67,1554,326],{"class":1555},"sknuh",[67,1557,1558],{"class":431},"\"postgres://\"\n",[67,1560,1561,1564,1566,1569,1571,1574],{"class":69,"line":89},[67,1562,1563],{"class":307},"DATE",[67,1565,326],{"class":1555},[67,1567,1568],{"class":303},"$(",[67,1570,1485],{"class":702},[67,1572,1573],{"class":431}," '+%F'",[67,1575,1576],{"class":303},")\n",[67,1578,1579],{"class":69,"line":95},[67,1580,86],{"emptyLinePlaceholder":85},[67,1582,1583,1586,1588],{"class":69,"line":101},[67,1584,1585],{"class":307},"TG_BOT_TOKEN",[67,1587,326],{"class":1555},[67,1589,1590],{"class":431},"'1145141919:ABCDEFGHIJKLVMNOPQRSTUVWXYZabcdefgh'\n",[67,1592,1593,1596,1598],{"class":69,"line":107},[67,1594,1595],{"class":307},"TG_CHAT_ID",[67,1597,326],{"class":1555},[67,1599,1600],{"class":431},"'9191415411'\n",[67,1602,1603],{"class":69,"line":113},[67,1604,86],{"emptyLinePlaceholder":85},[67,1606,1607,1610,1614,1616,1619,1622,1625,1628,1630,1632],{"class":69,"line":119},[67,1608,1609],{"class":702},"pg_dump",[67,1611,1613],{"class":1612},"sr1Ac"," ${",[67,1615,1552],{"class":307},[67,1617,1618],{"class":1612},"}",[67,1620,1621],{"class":303}," > ",[67,1623,1624],{"class":431},"umami_dump_",[67,1626,1627],{"class":1612},"${",[67,1629,1563],{"class":307},[67,1631,1618],{"class":1612},[67,1633,1634],{"class":431},".sql\n",[67,1636,1637,1639,1642,1645,1647,1649,1651,1654,1657,1659,1661,1663,1666,1668,1670],{"class":69,"line":125},[67,1638,703],{"class":702},[67,1640,1641],{"class":322}," -F",[67,1643,1644],{"class":431}," document=@umami_dump_",[67,1646,1627],{"class":1612},[67,1648,1563],{"class":307},[67,1650,1618],{"class":1612},[67,1652,1653],{"class":431},".sql",[67,1655,1656],{"class":431}," https://api.telegram.org/bot",[67,1658,1627],{"class":1612},[67,1660,1585],{"class":307},[67,1662,1618],{"class":1612},[67,1664,1665],{"class":431},"/sendDocument?chat_id=",[67,1667,1627],{"class":1612},[67,1669,1595],{"class":307},[67,1671,122],{"class":1612},[67,1673,1674,1677,1680,1682,1684,1686],{"class":69,"line":130},[67,1675,1676],{"class":702},"rm",[67,1678,1679],{"class":431}," umami_dump_",[67,1681,1627],{"class":1612},[67,1683,1563],{"class":307},[67,1685,1618],{"class":1612},[67,1687,1634],{"class":431},[15,1689,1690,1691,1694,1695,1698],{},"将这段代码保存为 ",[64,1692,1693],{},"umami_db_dumper.sh","，随后 ",[64,1696,1697],{},"chmod +x ./umami_db_dumper.sh"," 授予可执行权限。",[15,1700,1701],{},"可以先在命令行中执行命令试一下这段脚本是否正常工作",[58,1703,1705],{"className":693,"code":1704,"language":695,"meta":46,"style":46},"./umami_db_dumper.sh\n",[64,1706,1707],{"__ignoreMap":46},[67,1708,1709],{"class":69,"line":70},[67,1710,1704],{"class":702},[15,1712,1713],{},"这段代码在我本机正常工作，可惜在我的 Ubuntu VPS 上报错",[58,1715,1718],{"className":1716,"code":1717,"language":583},[581],"pg_dump: error: server version: 14.1; pg_dump version: 12.17 (Ubuntu 12.17-0ubuntu0.20.04.1)\npg_dump: error: aborting because of server version mismatch\n",[64,1719,1717],{"__ignoreMap":46},[15,1721,1722,1723,1728],{},"看上去是 VPS 上的 PostgreSQL 版本过低，Google 搜索一顿后，我在一篇",[32,1724,1727],{"href":1725,"rel":1726},"https://devopsworld.medium.com/upgrade-pg-dump-version-in-ubuntu-545d691d4695",[36],"「Upgrade pg_dump version in ubuntu | by Anushareddy」"," 文章中找到了方案，添加 PostgreSQL 官方提供的 apt 源将 VPS 上的 PostgreSQL 更新到新版即可解决。",[58,1730,1732],{"className":693,"code":1731,"language":695,"meta":46,"style":46},"wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -\necho \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list\napt update\napt install postgresql-client\n",[64,1733,1734,1762,1784,1792],{"__ignoreMap":46},[67,1735,1736,1739,1742,1745,1748,1751,1753,1756,1759],{"class":69,"line":70},[67,1737,1738],{"class":702},"wget",[67,1740,1741],{"class":322}," --quiet",[67,1743,1744],{"class":322}," -O",[67,1746,1747],{"class":431}," -",[67,1749,1750],{"class":431}," https://www.postgresql.org/media/keys/ACCC4CF8.asc",[67,1752,712],{"class":303},[67,1754,1755],{"class":702},"apt-key",[67,1757,1758],{"class":431}," add",[67,1760,1761],{"class":431}," -\n",[67,1763,1764,1767,1770,1773,1776,1779,1781],{"class":69,"line":76},[67,1765,1766],{"class":445},"echo",[67,1768,1769],{"class":431}," \"deb http://apt.postgresql.org/pub/repos/apt/ $(",[67,1771,1772],{"class":702},"lsb_release",[67,1774,1775],{"class":322}," -cs",[67,1777,1778],{"class":431},")-pgdg main\"",[67,1780,1621],{"class":303},[67,1782,1783],{"class":431},"/etc/apt/sources.list.d/pgdg.list\n",[67,1785,1786,1789],{"class":69,"line":82},[67,1787,1788],{"class":702},"apt",[67,1790,1791],{"class":431}," update\n",[67,1793,1794,1796,1799],{"class":69,"line":89},[67,1795,1788],{"class":702},[67,1797,1798],{"class":431}," install",[67,1800,1801],{"class":431}," postgresql-client\n",[15,1803,1804,1805,1808],{},"确保脚本正常工作后，使用 ",[64,1806,1807],{},"crontab -e"," 设置自动任务",[58,1810,1812],{"className":693,"code":1811,"language":695,"meta":46,"style":46},"0 2 * * * /root/umami_db_dumper.sh\n",[64,1813,1814],{"__ignoreMap":46},[67,1815,1816,1819,1822,1826,1828,1830],{"class":69,"line":70},[67,1817,1818],{"class":702},"0",[67,1820,1821],{"class":322}," 2",[67,1823,1825],{"class":1824},"s2QsP"," *",[67,1827,1825],{"class":1824},[67,1829,1825],{"class":1824},[67,1831,1832],{"class":431}," /root/umami_db_dumper.sh\n",[15,1834,1835],{},[24,1836],{"alt":1837,"src":1838},"数据库备份","https://static.031130.xyz/uploads/2024/08/12/65c79455b2e40.webp",[206,1840,1841],{},"html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sknuh, html code.shiki .sknuh{--shiki-default:#383A42;--shiki-dark:#56B6C2}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sr1Ac, html code.shiki .sr1Ac{--shiki-default:#E45649;--shiki-dark:#ABB2BF}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .s2QsP, html code.shiki .s2QsP{--shiki-default:#E45649;--shiki-dark:#E5C07B}",{"title":46,"searchDepth":76,"depth":76,"links":1843},[],{"title":1845,"date":1846,"path":1847,"tags":1848,"body":1849},"在 JavaScript 中，箭头函数中的 this 指针到底指向哪里？","2024-01-14 02:50:03","/2024/01/14/where-does-this-refer-in-arrow-function-in-js",[219],{"type":12,"value":1850,"toc":2272},[1851,1858,2166,2169,2176,2182,2193,2196,2199,2210,2216,2232,2239,2245,2248,2255,2262,2269],[15,1852,1853,1854,1857],{},"这学期期末复习的时候，学校里负责上 JavaScript 的老师给我们提出了一个问题。下面这段代码中，",[64,1855,1856],{},"a.u2()"," 在 ES Module 下执行会抛出 TypeError 的异常，在 CommonJS 下运行则会输出 undefined，而 B 这个类的 u2 函数则能够在对象实例化以后正常运行。",[58,1859,1863],{"className":1860,"code":1861,"language":1862,"meta":46,"style":46},"language-javascript shiki shiki-themes one-light one-dark-pro","const a = {\n    x: 3,\n    u1: function () {\n        console.log(this.x)\n    },\n    u2: () => {\n        console.log(this.x)\n    }\n}\n\nclass b {\n    x = 3\n\n    u1 = function () {\n        console.log(this.x)\n    }\n\n    u2 = () => {\n        console.log(this.x)\n    }\n}\n\na.u1()\n// 3\na.u2()\n// undefined\n\nnew b().u1()\n// 3\nnew b().u2()\n// 3\n","javascript",[64,1864,1865,1877,1891,1904,1929,1934,1949,1967,1972,1976,1980,1991,2000,2004,2014,2032,2036,2040,2053,2072,2077,2082,2086,2099,2105,2117,2123,2128,2143,2148,2161],{"__ignoreMap":46},[67,1866,1867,1869,1872,1874],{"class":69,"line":70},[67,1868,439],{"class":356},[67,1870,1871],{"class":442}," a",[67,1873,446],{"class":445},[67,1875,1876],{"class":303}," {\n",[67,1878,1879,1882,1886,1889],{"class":69,"line":76},[67,1880,1881],{"class":307},"    x",[67,1883,1885],{"class":1884},"st7oF",":",[67,1887,1888],{"class":322}," 3",[67,1890,457],{"class":303},[67,1892,1893,1896,1898,1901],{"class":69,"line":82},[67,1894,1895],{"class":702},"    u1",[67,1897,1885],{"class":1884},[67,1899,1900],{"class":356}," function",[67,1902,1903],{"class":303}," () {\n",[67,1905,1906,1910,1913,1916,1919,1922,1924,1927],{"class":69,"line":89},[67,1907,1909],{"class":1908},"s7GmK","        console",[67,1911,1912],{"class":303},".",[67,1914,1915],{"class":702},"log",[67,1917,1918],{"class":303},"(",[67,1920,1921],{"class":1824},"this",[67,1923,1912],{"class":303},[67,1925,1926],{"class":307},"x",[67,1928,1576],{"class":303},[67,1930,1931],{"class":69,"line":95},[67,1932,1933],{"class":303},"    },\n",[67,1935,1936,1939,1941,1944,1947],{"class":69,"line":101},[67,1937,1938],{"class":702},"    u2",[67,1940,1885],{"class":1884},[67,1942,1943],{"class":303}," () ",[67,1945,1946],{"class":356},"=>",[67,1948,1876],{"class":303},[67,1950,1951,1953,1955,1957,1959,1961,1963,1965],{"class":69,"line":107},[67,1952,1909],{"class":1908},[67,1954,1912],{"class":303},[67,1956,1915],{"class":702},[67,1958,1918],{"class":303},[67,1960,1921],{"class":1824},[67,1962,1912],{"class":303},[67,1964,1926],{"class":307},[67,1966,1576],{"class":303},[67,1968,1969],{"class":69,"line":113},[67,1970,1971],{"class":303},"    }\n",[67,1973,1974],{"class":69,"line":119},[67,1975,122],{"class":303},[67,1977,1978],{"class":69,"line":125},[67,1979,86],{"emptyLinePlaceholder":85},[67,1981,1982,1985,1989],{"class":69,"line":130},[67,1983,1984],{"class":356},"class",[67,1986,1988],{"class":1987},"sC09Y"," b",[67,1990,1876],{"class":303},[67,1992,1993,1995,1997],{"class":69,"line":136},[67,1994,1881],{"class":364},[67,1996,446],{"class":445},[67,1998,1999],{"class":322}," 3\n",[67,2001,2002],{"class":69,"line":141},[67,2003,86],{"emptyLinePlaceholder":85},[67,2005,2006,2008,2010,2012],{"class":69,"line":474},[67,2007,1895],{"class":702},[67,2009,446],{"class":445},[67,2011,1900],{"class":356},[67,2013,1903],{"class":303},[67,2015,2016,2018,2020,2022,2024,2026,2028,2030],{"class":69,"line":482},[67,2017,1909],{"class":1908},[67,2019,1912],{"class":303},[67,2021,1915],{"class":702},[67,2023,1918],{"class":303},[67,2025,1921],{"class":1824},[67,2027,1912],{"class":303},[67,2029,1926],{"class":307},[67,2031,1576],{"class":303},[67,2033,2034],{"class":69,"line":488},[67,2035,1971],{"class":303},[67,2037,2038],{"class":69,"line":494},[67,2039,86],{"emptyLinePlaceholder":85},[67,2041,2043,2045,2047,2049,2051],{"class":69,"line":2042},18,[67,2044,1938],{"class":702},[67,2046,446],{"class":445},[67,2048,1943],{"class":303},[67,2050,1946],{"class":356},[67,2052,1876],{"class":303},[67,2054,2056,2058,2060,2062,2064,2066,2068,2070],{"class":69,"line":2055},19,[67,2057,1909],{"class":1908},[67,2059,1912],{"class":303},[67,2061,1915],{"class":702},[67,2063,1918],{"class":303},[67,2065,1921],{"class":1824},[67,2067,1912],{"class":303},[67,2069,1926],{"class":307},[67,2071,1576],{"class":303},[67,2073,2075],{"class":69,"line":2074},20,[67,2076,1971],{"class":303},[67,2078,2080],{"class":69,"line":2079},21,[67,2081,122],{"class":303},[67,2083,2084],{"class":69,"line":3},[67,2085,86],{"emptyLinePlaceholder":85},[67,2087,2089,2091,2093,2096],{"class":69,"line":2088},23,[67,2090,32],{"class":1908},[67,2092,1912],{"class":303},[67,2094,2095],{"class":702},"u1",[67,2097,2098],{"class":303},"()\n",[67,2100,2102],{"class":69,"line":2101},24,[67,2103,2104],{"class":1542},"// 3\n",[67,2106,2108,2110,2112,2115],{"class":69,"line":2107},25,[67,2109,32],{"class":1908},[67,2111,1912],{"class":303},[67,2113,2114],{"class":702},"u2",[67,2116,2098],{"class":303},[67,2118,2120],{"class":69,"line":2119},26,[67,2121,2122],{"class":1542},"// undefined\n",[67,2124,2126],{"class":69,"line":2125},27,[67,2127,86],{"emptyLinePlaceholder":85},[67,2129,2131,2134,2136,2139,2141],{"class":69,"line":2130},28,[67,2132,2133],{"class":356},"new",[67,2135,1988],{"class":702},[67,2137,2138],{"class":303},"().",[67,2140,2095],{"class":702},[67,2142,2098],{"class":303},[67,2144,2146],{"class":69,"line":2145},29,[67,2147,2104],{"class":1542},[67,2149,2151,2153,2155,2157,2159],{"class":69,"line":2150},30,[67,2152,2133],{"class":356},[67,2154,1988],{"class":702},[67,2156,2138],{"class":303},[67,2158,2114],{"class":702},[67,2160,2098],{"class":303},[67,2162,2164],{"class":69,"line":2163},31,[67,2165,2104],{"class":1542},[15,2167,2168],{},"这个问题涉及到 JavaScript 中箭头函数的作用域以及 this 指向。",[15,2170,2171,2172,2175],{},"**在 JS 中使用 function 关键字定义的普通函数中，this 指针遵循一个规则：谁调用指向谁。**即 ",[64,2173,2174],{},"obj.func()"," 这种调用情况下，func 方法内部的this指向obj；如果没有调用者，则严格模式下 this 为 undefined，非严格模式下 this 指向window(浏览器)或者global(node环境)。",[15,2177,2178,2179],{},"而箭头函数比较特殊，",[617,2180,2181],{},"箭头函数的 this 在定义时就被绑定，绑定的是定义时所在作用域中的 this。",[15,2183,2184,2185,2188,2189,2192],{},"在老师给的示例代码中，第一行定义了 a 这个对象字面量，而",[617,2186,2187],{},"定义对象字面量不会创建新的作用域","，因此 a 中定义的 u2 的 this 指向的是全局对象。因此在 Es Module 默认启用 strict mode 的情况下，全局对象的 this 指向 undefined，进而导致 a 的 u2 内 this 也指向 undefined，this.x 就抛了 TypeError；而在 ",[617,2190,2191],{},"CommonJS 未启用 strict mode 的情况下，全局对象的 this 指向全局对象","，因而 u2 内的 this 也指向全局对象，因此 this 存在，this.x 就不会抛 TypeError，只会报 undefined。",[15,2194,2195],{},"而 B 类在对象初始化阶段拥有一个新的作用域，因此箭头函数的 this 能够正确指向 B 被实例化出来的对象，因此也就能够正确读取到 this.x 的值。",[15,2197,2198],{},"理论上来说，我们可以给全局对象也赋一个不一样的 x 值，这样 a.u2() 就能够读取到全局对象中的 x 值，验证我们的结论。",[15,2200,2201,2202,2205,2206,2209],{},"在浏览器中，可以在代码的头部加一行 ",[64,2203,2204],{},"var x = 10"," 或者 ",[64,2207,2208],{},"window.x = 10","，可以看到a.u2() 顺利的输出了 10，验证了我的结论。",[15,2211,2212],{},[24,2213],{"alt":2214,"src":2215},"浏览器控制台调试","https://static.031130.xyz/uploads/2024/08/12/65a2e1d093b78.webp",[15,2217,2218,2219,2205,2221,2224,2225,2227,2228,2231],{},"但在 Node.js 中，直接使用 ",[64,2220,2204],{},[64,2222,2223],{},"global.x = 10"," 并不能达到我们想要的效果。因为Node.js 中的每个 CommonJS 模块都有其自己的模块作用域，即模块的顶层作用域不是全局作用域。在模块内部，",[64,2226,1921],{}," 关键字不是指向 ",[64,2229,2230],{},"global"," 对象，而是指向模块的导出对象。这是为了确保模块内部的作用域隔离和模块的封装性。",[15,2233,2234,2235,2238],{},"那么我们可以通过为模块的导出对象添加一个 x 属性来验证我们的结论，我们可以使用 ",[64,2236,2237],{},"exports.x = 10"," 来为模块的顶层作用域添加一个值为 10 的 x 属性。",[15,2240,2241],{},[24,2242],{"alt":2243,"src":2244},"nodejs 环境运行","https://static.031130.xyz/uploads/2024/08/12/65a2e379ba89e.webp",[770,2246,2247],{"id":2247},"参考文章",[15,2249,2250],{},[32,2251,2254],{"href":2252,"rel":2253},"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions",[36],"箭头函数表达式 - JavaScript | MDN",[15,2256,2257],{},[32,2258,2261],{"href":2259,"rel":2260},"https://segmentfault.com/q/1010000022948115",[36],"ES6箭头函数作用域的问题",[15,2263,2264],{},[32,2265,2268],{"href":2266,"rel":2267},"https://www.zhihu.com/tardis/zm/art/57204184",[36],"ES6箭头函数的this指向详解",[206,2270,2271],{},"html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .sNmU0, html code.shiki .sNmU0{--shiki-default:#986801;--shiki-dark:#E5C07B}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .st7oF, html code.shiki .st7oF{--shiki-default:#0184BC;--shiki-dark:#ABB2BF}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .s7GmK, html code.shiki .s7GmK{--shiki-default:#383A42;--shiki-dark:#E5C07B}html pre.shiki code .s2QsP, html code.shiki .s2QsP{--shiki-default:#E45649;--shiki-dark:#E5C07B}html pre.shiki code .sC09Y, html code.shiki .sC09Y{--shiki-default:#C18401;--shiki-dark:#E5C07B}html pre.shiki code .sz0mV, html code.shiki .sz0mV{--shiki-default:#383A42;--shiki-dark:#E06C75}html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":2273},[2274],{"id":2247,"depth":76,"text":2247},{"title":2276,"date":2277,"path":2278,"tags":2279,"body":2281},"结合 Vue.js 与 php 完成的 web 期末大作业，讲讲前后端分离站点开发与部署中可能遇到的 CORS 跨域问题","2024-01-10 23:55:36","/2024/01/10/cors-when-using-splited-frontend-and-backend",[217,1028,759,2280,218],"笔记",{"type":12,"value":2282,"toc":2720},[2283,2291,2294,2298,2301,2308,2313,2324,2337,2340,2351,2354,2366,2375,2384,2390,2395,2398,2407,2410,2413,2426,2429,2432,2435,2438,2444,2486,2489,2691,2698,2705,2708,2717],[15,2284,2285,2286,2290],{},"在",[32,2287,2289],{"href":2288},"/2023/12/27/php-and-vuejs-project-deploy-on-caddy/","上一篇博客","中，我讲到了 web 期末大作业的上云部署。整个项目是使用 Vue.js 作为前端，php 作为后端，mysql 作为数据库实现的。",[15,2292,2293],{},"在使用 Vue.js 开发前端界面时，我选择了使用 vite 脚手架帮助开发，这意味着我的作品将使用前后端分离的架构实现。因此在开发部署过程中均遇到了跨域的问题，故写下这篇博客记录下解决方案。",[770,2295,2297],{"id":2296},"基于后端返回对应-http-响应头的解决方案","基于后端返回对应 http 响应头的解决方案",[1058,2299,2300],{"id":2300},"开发阶段",[15,2302,2303,2304,2307],{},"在我完成前后端的开发，并且经过 Apifox 的 mock 测试后，第一次在浏览器尝试前后端对接，遇到了 ",[64,2305,2306],{},"CORS Missing Allow Origin"," 的报错。",[15,2309,2310],{},[24,2311],{"alt":2306,"src":2312},"https://static.031130.xyz/uploads/2024/08/12/659ec607c69af.webp",[15,2314,2315,2316,2319,2320,2323],{},"vite 启动的 dev 开发服务器使用的域是 ",[64,2317,2318],{},"http://localhost:5173"," ，而 php 后端我指定的是 ",[64,2321,2322],{},"http://127.0.0.1:8080"," ，前后端并不运行在一个域下，前端使用 Axios(AJAX) 向后端发送请求获取资源输入 CORS 跨域资源共享的范畴。",[15,2325,2326,2327,2332,2333,2336],{},"关于跨域资源共享 CORS 的相关内容，",[32,2328,2331],{"href":2329,"rel":2330},"https://www.ruanyifeng.com/blog/2016/04/cors.html",[36],"阮一峰老师在 2016 年就已经在他的博客中有过解释","，看了下也是全网中文内容中解释得比较通俗易懂的，因此本文在这方面不过多做解释。错误的提示信息是 Missing Allow Origin，结合阮一峰老师的博文，我们应该在后端向前端发送的 http 响应头中添加 ",[64,2334,2335],{},"Access-Control-Allow-Origin"," 这一字段。",[15,2338,2339],{},"在一般的前后端分离项目（不涉及 cookie 等 Credentials 属性）中，我们可以将这一字段设置为 * 通配符，默认允许所有的域向自己发起跨域资源请求。php 可以通过下面这行代码很方便地进行设置:",[58,2341,2345],{"className":2342,"code":2343,"language":2344,"meta":46,"style":46},"language-php shiki shiki-themes one-light one-dark-pro","header('Access-Control-Allow-Origin: *');\n","php",[64,2346,2347],{"__ignoreMap":46},[67,2348,2349],{"class":69,"line":70},[67,2350,2343],{},[15,2352,2353],{},"但在用户的注册登录方面，我使用了 session 作为用户的登录凭据。阮一峰老师关于 CORS 的博文中有这样一句话:",[252,2355,2356],{},[15,2357,2358,2359,2361,2362,2365],{},"需要注意的是，如果要发送Cookie，",[64,2360,2335],{},"就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的",[64,2363,2364],{},"document.cookie","也无法读取服务器域名下的Cookie。",[15,2367,2368,2369,2371,2372,2374],{},"因此，我们必须明确指定 ",[64,2370,2335],{}," 字段为前端所使用的域，写上 ",[64,2373,2318],{}," 才行。",[58,2376,2378],{"className":2342,"code":2377,"language":2344,"meta":46,"style":46},"header('Access-Control-Allow-Origin: http://localhost:5173');\n",[64,2379,2380],{"__ignoreMap":46},[67,2381,2382],{"class":69,"line":70},[67,2383,2377],{},[15,2385,2386,2387],{},"再次刷新网页，获得了新的错误 ",[64,2388,2389],{},"CORS Missing Allow Credentials",[15,2391,2392],{},[24,2393],{"alt":2389,"src":2394},"https://static.031130.xyz/uploads/2024/08/12/659ec95acc0bc.webp",[15,2396,2397],{},"这个问题处理起来也简单",[58,2399,2401],{"className":2342,"code":2400,"language":2344,"meta":46,"style":46},"header('Access-Control-Allow-Credentials: true');\n",[64,2402,2403],{"__ignoreMap":46},[67,2404,2405],{"class":69,"line":70},[67,2406,2400],{},[15,2408,2409],{},"再次运行网页，跨域问题成功解决。",[1058,2411,2412],{"id":2412},"部署阶段",[15,2414,2415,2416,2418,2419,2422,2423,2425],{},"顺着这个思路进行下去，我们在部署阶段解决跨域问题需要做的事情很简单。提前将前端部署起来，将前端的域写到后端返回给前端的 http 相应头中即可。需要注意的是，",[64,2417,2335],{}," 字段仅允许填写一个值，如果需要同时允许来自多个不同域的跨域资源共享，后端部分需要根据前端发来的请求头中的 ",[64,2420,2421],{},"Origin"," 字段相应地设置响应头中的 ",[64,2424,2335],{}," 。当然，nginx 等先进的 static server 也支持劫持 http 请求，添加相关的 Access-Control 语句，也可以在这一层解决这个问题。",[770,2427,2428],{"id":2428},"直接规避跨域的方案",[15,2430,2431],{},"上面通过后端返回带有 Access-Control 语句相应头的解决方案确实可以解决问题，却显得不够优雅。开发和部署阶段都要手动的去指定前端的域来允许跨域资源共享，这一点过于麻烦了，因此引出了下面的解决方案。",[1058,2433,2300],{"id":2434},"开发阶段-1",[15,2436,2437],{},"在 vite（或者其他同类开发服务器）的帮助下，我们可以使用前端的开发服务器去反向代理后端服务，也就是让前端的请求打到前端服务器上，由前端服务器去返回后端服务器返回的结果。",[15,2439,229,2440,2443],{},[64,2441,2442],{},"vite.config.ts"," 配置文件下，我将原本的",[58,2445,2449],{"className":2446,"code":2447,"language":2448,"meta":46,"style":46},"language-typescript shiki shiki-themes one-light one-dark-pro","export default defineConfig({\n  plugins: [vue()],\n})\n","typescript",[64,2450,2451,2466,2481],{"__ignoreMap":46},[67,2452,2453,2456,2460,2463],{"class":69,"line":70},[67,2454,2455],{"class":356},"export",[67,2457,2459],{"class":2458},"sq3v1"," default",[67,2461,2462],{"class":702}," defineConfig",[67,2464,2465],{"class":303},"({\n",[67,2467,2468,2471,2473,2476,2478],{"class":69,"line":76},[67,2469,2470],{"class":307},"  plugins",[67,2472,1885],{"class":1884},[67,2474,2475],{"class":303}," [",[67,2477,296],{"class":702},[67,2479,2480],{"class":303},"()],\n",[67,2482,2483],{"class":69,"line":82},[67,2484,2485],{"class":303},"})\n",[15,2487,2488],{},"换成了",[58,2490,2492],{"className":2446,"code":2491,"language":2448,"meta":46,"style":46},"export default () => {\n  process.env = { ...process.env, ...loadEnv(process.cwd(),'') };\n\n  const config = {\n    plugins: [vue()],\n    server: {\n      proxy: {\n        '/api': {\n          target: http://127.0.0.1:8080,\n          changeOrigin: true,\n          secure: false,\n        }\n      }\n    }\n  }\n  return defineConfig(config)\n};\n",[64,2493,2494,2506,2557,2561,2573,2586,2595,2604,2613,2628,2641,2653,2658,2663,2667,2672,2686],{"__ignoreMap":46},[67,2495,2496,2498,2500,2502,2504],{"class":69,"line":70},[67,2497,2455],{"class":356},[67,2499,2459],{"class":2458},[67,2501,1943],{"class":303},[67,2503,1946],{"class":356},[67,2505,1876],{"class":303},[67,2507,2508,2511,2513,2516,2518,2521,2524,2527,2529,2531,2534,2536,2539,2541,2543,2545,2548,2551,2554],{"class":69,"line":76},[67,2509,2510],{"class":1908},"  process",[67,2512,1912],{"class":303},[67,2514,2515],{"class":307},"env",[67,2517,446],{"class":445},[67,2519,2520],{"class":303}," { ",[67,2522,2523],{"class":1884},"...",[67,2525,2526],{"class":1908},"process",[67,2528,1912],{"class":303},[67,2530,2515],{"class":307},[67,2532,2533],{"class":303},", ",[67,2535,2523],{"class":1884},[67,2537,2538],{"class":702},"loadEnv",[67,2540,1918],{"class":303},[67,2542,2526],{"class":1908},[67,2544,1912],{"class":303},[67,2546,2547],{"class":702},"cwd",[67,2549,2550],{"class":303},"(),",[67,2552,2553],{"class":431},"''",[67,2555,2556],{"class":303},") };\n",[67,2558,2559],{"class":69,"line":82},[67,2560,86],{"emptyLinePlaceholder":85},[67,2562,2563,2566,2569,2571],{"class":69,"line":89},[67,2564,2565],{"class":356},"  const",[67,2567,2568],{"class":442}," config",[67,2570,446],{"class":445},[67,2572,1876],{"class":303},[67,2574,2575,2578,2580,2582,2584],{"class":69,"line":95},[67,2576,2577],{"class":307},"    plugins",[67,2579,1885],{"class":1884},[67,2581,2475],{"class":303},[67,2583,296],{"class":702},[67,2585,2480],{"class":303},[67,2587,2588,2591,2593],{"class":69,"line":101},[67,2589,2590],{"class":307},"    server",[67,2592,1885],{"class":1884},[67,2594,1876],{"class":303},[67,2596,2597,2600,2602],{"class":69,"line":107},[67,2598,2599],{"class":307},"      proxy",[67,2601,1885],{"class":1884},[67,2603,1876],{"class":303},[67,2605,2606,2609,2611],{"class":69,"line":113},[67,2607,2608],{"class":431},"        '/api'",[67,2610,1885],{"class":1884},[67,2612,1876],{"class":303},[67,2614,2615,2618,2620,2623,2625],{"class":69,"line":119},[67,2616,2617],{"class":307},"          target",[67,2619,1885],{"class":1884},[67,2621,2622],{"class":307}," http",[67,2624,1885],{"class":303},[67,2626,2627],{"class":1542},"//127.0.0.1:8080,\n",[67,2629,2630,2633,2636,2639],{"class":69,"line":125},[67,2631,2632],{"class":307},"          changeOrigin",[67,2634,2635],{"class":303},": ",[67,2637,2638],{"class":322},"true",[67,2640,457],{"class":303},[67,2642,2643,2646,2648,2651],{"class":69,"line":130},[67,2644,2645],{"class":307},"          secure",[67,2647,1885],{"class":1884},[67,2649,2650],{"class":322}," false",[67,2652,457],{"class":303},[67,2654,2655],{"class":69,"line":136},[67,2656,2657],{"class":303},"        }\n",[67,2659,2660],{"class":69,"line":141},[67,2661,2662],{"class":303},"      }\n",[67,2664,2665],{"class":69,"line":474},[67,2666,1971],{"class":303},[67,2668,2669],{"class":69,"line":482},[67,2670,2671],{"class":303},"  }\n",[67,2673,2674,2677,2679,2681,2684],{"class":69,"line":488},[67,2675,2676],{"class":356},"  return",[67,2678,2462],{"class":702},[67,2680,1918],{"class":303},[67,2682,2683],{"class":307},"config",[67,2685,1576],{"class":303},[67,2687,2688],{"class":69,"line":494},[67,2689,2690],{"class":303},"};\n",[15,2692,2693,2694,2697],{},"同时将 Axios create 时的 ",[64,2695,2696],{},"baseURL"," 参数去除。",[15,2699,2700,2701,2704],{},"这样一套组合拳下来，将所有打向 ",[64,2702,2703],{},"/api*"," 的请求和响应通过前端的开发服务器作为中介做了中转，让浏览器以为并没有跨域（事实上也没有跨域），从而解决了相关的问题。",[1058,2706,2412],{"id":2707},"部署阶段-1",[15,2709,2710,2711,2716],{},"在开发阶段，我们通过 vite 的开发服务器做反向代理规避了跨域请求，但在部署阶段就用不了了。由于 vite 服务器的性能太弱，一般情况下我们是不会在生产环境中使用 vite 作为正式的服务器的，而是使用 vite build 出网站的静态网页资源，通过 nginx 等 static server 去向用户提供前端网页。而通过 vite build 出来的静态网页资源本身是不具备反向代理的能力的，这意味着没法在前端侧规避跨域问题。此时，我们应该配置 nginx 规避跨域问题。我一向不怎么使用 nginx，使用的是它的平替品 caddy，因此 nginx 的配置文件需要大家自行搜索，",[32,2712,2715],{"href":2713,"rel":2714},"https://zhul.in/2023/12/27/php-and-vuejs-project-deploy-on-caddy/#Caddy-%E9%85%8D%E7%BD%AE",[36],"我的 caddyfile 在上一篇博客中已经给出","，仅供参考。",[206,2718,2719],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .sq3v1, html code.shiki .sq3v1{--shiki-default:#E45649;--shiki-dark:#C678DD}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .st7oF, html code.shiki .st7oF{--shiki-default:#0184BC;--shiki-dark:#ABB2BF}html pre.shiki code .s7GmK, html code.shiki .s7GmK{--shiki-default:#383A42;--shiki-dark:#E5C07B}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sNmU0, html code.shiki .sNmU0{--shiki-default:#986801;--shiki-dark:#E5C07B}html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}",{"title":46,"searchDepth":76,"depth":76,"links":2721},[2722,2726],{"id":2296,"depth":76,"text":2297,"children":2723},[2724,2725],{"id":2300,"depth":82,"text":2300},{"id":2412,"depth":82,"text":2412},{"id":2428,"depth":76,"text":2428,"children":2727},[2728,2729],{"id":2434,"depth":82,"text":2300},{"id":2707,"depth":82,"text":2412},{"title":2731,"date":2732,"path":2733,"tags":2734,"body":2736},"vuejs、php、caddy 与 docker —— web 期末大作业上云部署","2023-12-27 22:09:00","/2023/12/27/php-and-vuejs-project-deploy-on-caddy",[1028,2735,217,759,1031,218],"Caddy",{"type":12,"value":2737,"toc":3037},[2738,2755,2758,2767,2770,2798,2806,2820,2827,2890,2904,2908,2911,2918,2924,2927,2930,2937,2963,2966,2969,2980,2984,2987,2993,3016,3020,3027,3034],[252,2739,2740,2743,2749,2752],{},[15,2741,2742],{},"这学期修了一门叫《用HTML5 和 PHP编写JavaScript，jQuery 和 AJAX脚本》的 web 课（对，听起来很奇怪的名字）。期末大作业是写一个影评系统，前端允许使用框架，后端仅允许使用 php，具体的作业要求如下",[15,2744,2745],{},[24,2746],{"alt":2747,"src":2748},"作业要求","https://static.031130.xyz/uploads/2024/08/12/658c4c3128ae4.webp",[15,2750,2751],{},"（源码会在验收结束以后开源）",[15,2753,2754],{},"大作业写了得要有三个礼拜，工作时长加起来得有 30 个小时，想着验收之前上线一段时间积累一些评论数据，验收的时候也会更加顺利一些，于是就开始尝试在服务器上部署。部署的过程还是比较复杂的，所以写下这篇博客记录一下。",[770,2756,2757],{"id":2757},"后端部分",[15,2759,2760,2761,2766],{},"早前有",[32,2762,2765],{"href":2763,"rel":2764},"https://zhul.in/2021/10/21/picuploader-on-archlinux-with-caddy/",[36],"《PicUploader使用系列（一）——在Archlinux上使用Caddy部署PicUploader》","的经验，便觉得使用 Caddy + php-fpm 部署的方式多少有点麻烦了，这次便尝试了使用 Docker 部署、Caddy 反代的方式。",[15,2768,2769],{},"Dockerfile 如下:",[58,2771,2773],{"className":1251,"code":2772,"language":1253,"meta":46,"style":46},"FROM php:8-apache\nRUN docker-php-ext-install mysqli\nRUN a2enmod rewrite\nCOPY . /var/www/html\nEXPOSE 80\n",[64,2774,2775,2779,2784,2788,2793],{"__ignoreMap":46},[67,2776,2777],{"class":69,"line":70},[67,2778,1260],{},[67,2780,2781],{"class":69,"line":76},[67,2782,2783],{},"RUN docker-php-ext-install mysqli\n",[67,2785,2786],{"class":69,"line":82},[67,2787,1265],{},[67,2789,2790],{"class":69,"line":89},[67,2791,2792],{},"COPY . /var/www/html\n",[67,2794,2795],{"class":69,"line":95},[67,2796,2797],{},"EXPOSE 80\n",[15,2799,2800,2801,2805],{},"在后端的根目录下有一个 .htaccess 文件，将所有的请求都交给 index.php 来处理，这样就可以根据我的",[32,2802,2289],{"href":2803,"rel":2804},"https://zhul.in/2023/12/12/php-simple-rest-api/",[36],"中所提到的方式去构建不使用任何 php 框架实现的简易 router 效果",[58,2807,2809],{"className":1167,"code":2808,"language":1169,"meta":46,"style":46},"RewriteEngine On\nRewriteRule ^(.*) index.php [QSA,L]\n",[64,2810,2811,2816],{"__ignoreMap":46},[67,2812,2813],{"class":69,"line":70},[67,2814,2815],{},"RewriteEngine On\n",[67,2817,2818],{"class":69,"line":76},[67,2819,1194],{},[15,2821,2822,2823,2826],{},"构建 Docker 镜像时使用 ",[64,2824,2825],{},"docker build . -t mrs-php"," 命令，运行 docker 容器时使用命令",[58,2828,2830],{"className":693,"code":2829,"language":695,"meta":46,"style":46},"docker run -d \\\n    -p 7788:80 \\\n    --name mrs-php \\\n    -v /path/to/uploads:/var/www/html/uploads \\\n    --restart unless-stopped \\\n    mrs-php\n",[64,2831,2832,2845,2855,2865,2875,2885],{"__ignoreMap":46},[67,2833,2834,2837,2840,2842],{"class":69,"line":70},[67,2835,2836],{"class":702},"docker",[67,2838,2839],{"class":431}," run",[67,2841,1474],{"class":322},[67,2843,2844],{"class":445}," \\\n",[67,2846,2847,2850,2853],{"class":69,"line":76},[67,2848,2849],{"class":322},"    -p",[67,2851,2852],{"class":431}," 7788:80",[67,2854,2844],{"class":445},[67,2856,2857,2860,2863],{"class":69,"line":82},[67,2858,2859],{"class":322},"    --name",[67,2861,2862],{"class":431}," mrs-php",[67,2864,2844],{"class":445},[67,2866,2867,2870,2873],{"class":69,"line":89},[67,2868,2869],{"class":322},"    -v",[67,2871,2872],{"class":431}," /path/to/uploads:/var/www/html/uploads",[67,2874,2844],{"class":445},[67,2876,2877,2880,2883],{"class":69,"line":95},[67,2878,2879],{"class":322},"    --restart",[67,2881,2882],{"class":431}," unless-stopped",[67,2884,2844],{"class":445},[67,2886,2887],{"class":69,"line":101},[67,2888,2889],{"class":431},"    mrs-php\n",[15,2891,2892,2893,1102,2896,2899,2900,2903],{},"这样，后端就在 7788 端口上开起来了，后续 Caddy 只要将打到 ",[64,2894,2895],{},"/api/*",[64,2897,2898],{},"/uploads/*"," 的请求转发到 7788 端口即可，避免了使用 php-fpm 时需要的配置。",[64,2901,2902],{},"uploads"," 目录是用来存放图片的，我将这个路径挂在在宿主机的目录下，方便备份导入等操作。",[1058,2905,2907],{"id":2906},"mysql-连接时的小插曲","mysql 连接时的小插曲",[15,2909,2910],{},"需要注意的是，在 Docker 容器中运行的 php 如果想要访问宿主机上的 mysql，需要注意修改 mysql 服务器的 ip 地址，并允许 mysql 接收来自非本机的请求。",[15,2912,2913,2914,2917],{},"在宿主机中运行 ",[64,2915,2916],{},"ip -br a"," 命令可以看到 docker 所采用的虚拟网卡的 ip 地址",[58,2919,2922],{"className":2920,"code":2921,"language":583},[581],"docker0          UP             172.17.0.1/16 fe80::42:eff:febf:b26c/64\n",[64,2923,2921],{"__ignoreMap":46},[15,2925,2926],{},"我这边得到的 ip 地址是 172.17.0.1，所以在 php 那边访问的数据库 ip 地址就应该是 172.17.0.1，而非 localhost 或者 127.0.0.1",[15,2928,2929],{},"此外，需要允许宿主机的 mysql 接收来自 Docker 容器的请求",[15,2931,2932,2933,2936],{},"使用 ",[64,2934,2935],{},"docker network inspect bridge"," 命令可以查到 docker 容器的 ip 地址，接着需要去允许来自这个 ip 的请求。建议去网上自行搜索，因为 mysql 语句我自己也不熟悉。我使用的 mysql 版本是 8，语句似乎和以前的版本不兼容？我使用下面三个命令轮着输就好了（有时候报错，有时侯又不报错），有大佬懂的话评论区讲讲。",[58,2938,2942],{"className":2939,"code":2940,"language":2941,"meta":46,"style":46},"language-mysql shiki shiki-themes one-light one-dark-pro","use mysql;\nGRANT ALL ON *.* TO 'root'@'%';\nupdate user set host='%' where user='root';\nGRANT ALL ON *.* TO 'root'@'%';\n","mysql",[64,2943,2944,2949,2954,2959],{"__ignoreMap":46},[67,2945,2946],{"class":69,"line":70},[67,2947,2948],{},"use mysql;\n",[67,2950,2951],{"class":69,"line":76},[67,2952,2953],{},"GRANT ALL ON *.* TO 'root'@'%';\n",[67,2955,2956],{"class":69,"line":82},[67,2957,2958],{},"update user set host='%' where user='root';\n",[67,2960,2961],{"class":69,"line":89},[67,2962,2953],{},[770,2964,2965],{"id":2965},"前端部分",[15,2967,2968],{},"前端部分部署起来没什么难度",[15,2970,2971,2972,2975,2976,2979],{},"我使用的是 vite 开发的 vuejs 项目，直接使用 ",[64,2973,2974],{},"pnpm build"," 构建出静态文件，然后放入了 ",[64,2977,2978],{},"/var/www/mrs"," 目录，这部分没什么可说的",[770,2981,2983],{"id":2982},"caddy-配置","Caddy 配置",[15,2985,2986],{},"Caddy 配置如下",[58,2988,2991],{"className":2989,"code":2990,"language":583},[581],"example.com {\n    handle /api/* {\n        reverse_proxy localhost:7788\n    }\n\n    handle /uploads/* {\n        reverse_proxy localhost:7788\n    }\n\n    handle /* {\n        root * /var/www/mrs\n        file_server\n        try_files {path} /\n    }\n}\n",[64,2992,2990],{"__ignoreMap":46},[15,2994,2995,2996,1102,2998,3000,3001,3004,3005,3008,3009,3012,3013,3015],{},"将打到 ",[64,2997,2895],{},[64,2999,2898],{}," 都交给 7788 端口的后端进行处理，前端部分要使用 ",[64,3002,3003],{},"try_files"," 将请求都指向 ",[64,3006,3007],{},"/"," 或 ",[64,3010,3011],{},"/index.html"," 交由 vue-router 处理，否则 caddy 就找不到对应的文件了。这里我尝试过使用 route 关键词代替 handle，但 ",[64,3014,3003],{}," 的功能没有生效，这两者的区别官方文档中有提到，但我没看懂，等我以后看看有没有机会去折腾了。",[770,3017,3019],{"id":3018},"参考","参考:",[15,3021,3022],{},[32,3023,3026],{"href":3024,"rel":3025},"https://homeboyc.cn/blog/%E4%BD%BF%E7%94%A8caddy%E9%85%8D%E7%BD%AE%E5%90%8C%E4%B8%80%E5%9F%9F%E5%90%8D%E4%B8%8B%E7%9A%84%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB/",[36],"使用Caddy配置同一域名下的前后分离",[15,3028,3029],{},[32,3030,3033],{"href":3031,"rel":3032},"https://blog.lyh543.cn/notes/linux/caddy.html",[36],"Caddy 2",[206,3035,3036],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}",{"title":46,"searchDepth":76,"depth":76,"links":3038},[3039,3042,3043,3044],{"id":2757,"depth":76,"text":2757,"children":3040},[3041],{"id":2906,"depth":82,"text":2907},{"id":2965,"depth":76,"text":2965},{"id":2982,"depth":76,"text":2983},{"id":3018,"depth":76,"text":3019},127,1761739879752]