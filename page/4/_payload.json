[{"data":1,"prerenderedAt":2999},["ShallowReactive",2],{"randomIndex/page/4/":3,"index-page-4":4,"posts-total":2998},21,[5,206,551,596,1592,1760,2025,2178,2294,2653],{"title":6,"date":7,"path":8,"tags":9,"body":14},"自建图床小记一——图床架构与 DNS 解析","2024-08-12 17:07:11","/2024/08/12/new-picbed-based-on-cloudflare-and-upyun",[10,11,12,13],"CDN","图床","Network","Cloudflare",{"type":15,"value":16,"toc":195},"minimark",[17,24,27,31,38,41,44,55,69,73,76,79,102,108,112,118,121,133,139,142,148,153,156,160,166,169,175,183,186],[18,19,20],"blockquote",{},[21,22,23],"p",{},"一直以来，我使用的都是使用付费的第三方图床，可惜最近几年为了节省成本，境内的稳定性出现了一些问题。过去一年中光是我本人遇到的无法访问的情况就有三四次，其中两次持续时间超过 2 小时，甚至有网友特意来 at 我告知我博客使用的图床出问题了，还有两次是在我作品验收前 24 小时内出现，幸亏我及时切换了资源链接。此外，境外 CDN 也从原先的 Cloudflare 换掉了，目前海外的解析结果似乎只有一个在美国的节点，其余地区（尤其是日本香港新加坡等常用的落地地区）的访问质量不佳，Google 的 page speed test 甚至提示我的图片拖慢了网站加载速度。",[21,25,26],{},"基于上述种种原因，我开始选择自建图床，前前后后折腾了快一周后，新图床终于投入使用，目前我的博客已经完成了所有图片资源的切换。",[28,29,30],"h2",{"id":30},"架构设计",[21,32,33],{},[34,35],"img",{"alt":36,"src":37},"图床架构设计图","https://static.031130.xyz/uploads/2024/08/12/80402e4da4ef7.webp",[21,39,40],{},"这一套架构使用 Dnspod 免费版实现在境内外的解析分流，将境内的流量导向又拍云 CDN 为境内的访客提供服务，在境外使用量大管饱的 Cloudflare CDN 节省成本，为全球提供加速访问。",[28,42,43],{"id":43},"为什么是又拍云",[21,45,46,47,54],{},"如你所见，我的博客底部挂了又拍云的 logo。",[48,49,53],"a",{"href":50,"rel":51},"https://www.upyun.com/league",[52],"nofollow","又拍云联盟","为个人开发者提供了每个月 10GB 存储和 15GB 的免费 CDN 流量，在每年通过申请后会以 67 元无门槛代金券的形式发放到账号，也不用担心某个月超了一点点而付出额外的费用。",[21,56,57,58,63,64],{},"相比之下，七牛云虽然控制台的前端 UI 不错，但出了这种事情导致其在我心里印象分极差: 「",[48,59,62],{"href":60,"rel":61},"https://blog.hanlin.press/2024/07/From-Shanxi-to-Qiniu/",[52],"从山西联通到组播IP：七牛云的奇怪视角（附分析和后日谈）","」",[48,65,68],{"href":66,"rel":67},"https://archive.md/ONeu3",[52],"Archived Here",[28,70,72],{"id":71},"为什么是-cloudflare-r2","为什么是 Cloudflare R2",[21,74,75],{},"作为自己的图床，必须要保证稳定性，境内访问的稳定性可以先放到一边，最重要的就是保证源文件的稳定性。不同于在自己的 VPS 上存储图片的方案，使用 Cloudflare R2 作为储存不需要关注 VPS 到期以后的图片迁移问题。使用 Cloudflare R2 作为储存，免费用量对于个人站点来说绰绰有余，在 10GB 存储容量超出之前不用考虑别的问题，也不用担心资金支持不下去导致的麻烦。而不使用又拍云提供的 10GB 存储也可以节省这部分的代金券金额，让代金券尽可能多的抵扣境内 CDN 流量带来的费用。",[28,77,78],{"id":78},"需要的东西",[80,81,82,86,89,96],"ul",{},[83,84,85],"li",{},"两个或两个以上的域名（其中一个需要备案）",[83,87,88],{},"Cloudflare 所支持的境外支付方式（PayPal 账号 / Visa Card / Master Card），用于开通 Cloudflare R2 和 Cloudflare SaaS 接入",[83,90,91,95],{},[92,93,94],"del",{},"很多很多钱","（其实没有很多，又拍云联盟每年的 67 元抵用券在我这里看来完全是够用的）",[83,97,98,99],{},"聪明的大脑，能够快速敲击键盘的双手，",[92,100,101],{},"能够支持你熬夜的心脏",[21,103,104],{},[105,106,107],"em",{},"* 在这一套架构中引入了香港 VPS 进行反向代理，一来是防止国内 CDN 与 Cloudflare 的网络连接质量过差导致的回源失败，二来也是方便我在没有国际联网的情况下进行图片的上传，但如果没有条件其实是可以去掉的。",[28,109,111],{"id":110},"dns-解析","DNS 解析",[21,113,114],{},[34,115],{"alt":116,"src":117},"DNS 解析方案 1","https://static.031130.xyz/uploads/2024/08/13/03d8243b67593.webp",[21,119,120],{},"如上图，将图床域名 NS 接入 DnsPod，工具人域名 NS 接入 Cloudflare 即可实现境内外分流的效果。",[122,123,124,127,130],"ol",{},[83,125,126],{},"图床访问域名在境外 CNAME 解析到工具人域名",[83,128,129],{},"图床访问域名在境内 CNAME 解析到境内 CDN 服务商",[83,131,132],{},"工具人域名在 Cloudflare 上解析到任何站点都行，只需点亮解析时 Cloudflare CDN 代理按钮即可生效。",[21,134,135],{},[34,136],{"alt":137,"src":138},"代理按钮","https://static.031130.xyz/uploads/2024/08/13/a0387d2919850.webp",[21,140,141],{},"但如果你的备案域名已经通过 NS 接入了 Cloudflare，可以采用下面这套架构。",[21,143,144],{},[34,145],{"alt":146,"src":147},"DNS 解析方案 2","https://static.031130.xyz/uploads/2024/08/13/d03d7b3155514.webp",[21,149,150],{},[105,151,152],{},"* 解析方案 2 中的图床访问域名和工具人域名可以是同属于同一二级域名的不同子域名",[21,154,155],{},"这种方案要多一步，把图床访问域名 CNAME 解析到用于分流的工具人域名。",[28,157,159],{"id":158},"cloudflare-saas-接入","Cloudflare SaaS 接入",[21,161,162],{},[34,163],{"alt":164,"src":165},"SaaS 接入","https://static.031130.xyz/uploads/2024/08/13/eb7186205b380.webp",[21,167,168],{},"SaaS 接入大概就是如图所示，此外还要配置 Cloudflare Workers 的域名访问",[21,170,171],{},[34,172],{"alt":173,"src":174},"Cloudflare Workers 域名访问","https://static.031130.xyz/uploads/2024/08/13/782a665cabe05.webp",[21,176,177,178,182],{},"这样就能保证在境外访问图床域名时将请求打到 Cloudflare Workers 上了，关于使用 Cloudflare Workers 构建图床 Restful API 相关的内容我放在",[48,179,181],{"href":180},"/2024/08/13/build-restful-api-for-cloudflare-r2-with-cloudflare-workers/","下一篇博客","讲。",[28,184,185],{"id":185},"参见",[80,187,188],{},[83,189,190],{},[48,191,194],{"href":192,"rel":193},"https://www.eallion.com/cdn-cname-cloudflare/",[52],"图床 CDN CNAME 接入 Cloudflare SaaS 实现分流",{"title":196,"searchDepth":197,"depth":197,"links":198},"",2,[199,200,201,202,203,204,205],{"id":30,"depth":197,"text":30},{"id":43,"depth":197,"text":43},{"id":71,"depth":197,"text":72},{"id":78,"depth":197,"text":78},{"id":110,"depth":197,"text":111},{"id":158,"depth":197,"text":159},{"id":185,"depth":197,"text":185},{"title":207,"date":208,"path":209,"tags":210,"body":215},"在 Linux 下使用 mitmproxy 抓取安卓手机上的 HTTPS 流量","2024-07-31 16:02:28","/2024/07/31/capture-android-https-traffic-on-linux-with-mitmproxy",[211,12,212,213,214],"mitmproxy","Linux","Archlinux","Android",{"type":15,"value":216,"toc":545},[217,220,223,261,272,275,278,285,289,353,359,362,393,397,400,468,476,479,484,487,490,495,498,503,505,541],[21,218,219],{},"纵使安卓下有小黄鸟 HttpCanary 这种抓包神器，但手机一块 6 英寸的小屏实在是不方便分析流量情况，还得是 PC 的屏幕更大一些，处理起流量信息来更得心应手一些。",[21,221,222],{},"把话说在前面，目前的安卓抓包有不小的限制",[80,224,225,228],{},[83,226,227],{},"Android 7 以下的版本: 直接以普通用户的权限安装 ssl 证书即可被信任",[83,229,230,231],{},"Android 7 以上的版本:\n",[80,232,233,246],{},[83,234,235,236,240,241,245],{},"安全性较低的应用: ",[237,238,239],"strong",{},"需要使用 root 权限","将证书移动至 ",[242,243,244],"code",{},"/system/etc/security/cacerts","使证书被系统信任",[83,247,248,249,254,255,260],{},"安全性较高的应用（比如微信 7.0 以上的版本）: 在满足上一条条件的情况下，需要阻止第三方应用使用自带的 ssl 证书信任范围（绕过 SSL Pinning）。通常情况下需要额外的手段对目标应用进行篡改，比如使用 ",[48,250,253],{"href":251,"rel":252},"https://github.com/Fuzion24/JustTrustMe",[52],"justTrustMe"," 这个 xposed 模块，或者 ",[48,256,259],{"href":257,"rel":258},"https://github.com/frida/frida/",[52],"frida","。",[18,262,263],{},[21,264,265,266,271],{},"除此之外，Linux 版本 >= 5.5 的安卓设备也可以使用 ",[48,267,270],{"href":268,"rel":269},"https://github.com/gojue/ecapture",[52],"eCapture"," 这款基于 eBPF Linux 内核模块实现的抓包软件，算是种奇技淫巧。",[21,273,274],{},"本文只讨论 Android 7 以上版本中安全性较低的应用，因为我当前的抓包目标局限于一款安全性不高的外包软件。",[28,276,277],{"id":277},"基本操作",[21,279,280,281,63],{},"见「",[48,282,284],{"href":283},"/2024/02/29/capture-https-traffic-on-linux-with-mitmproxy/","在 Linux 下使用 mitmproxy 抓取 HTTPS 流量",[28,286,288],{"id":287},"安装-ssl-证书","安装 ssl 证书",[290,291,295],"pre",{"className":292,"code":293,"language":294,"meta":196,"style":196},"language-bash shiki shiki-themes one-light one-dark-pro","cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem $(openssl x509 -subject_hash_old -in $HOME/.mitmproxy/mitmproxy-ca-cert.pem | head -n 1).0\n","bash",[242,296,297],{"__ignoreMap":196},[298,299,302,306,310,314,318,321,324,328,331,333,335,338,341,344,347,350],"span",{"class":300,"line":301},"line",1,[298,303,305],{"class":304},"sAdtL","cp",[298,307,309],{"class":308},"sJa8x"," $HOME",[298,311,313],{"class":312},"sDhpE","/.mitmproxy/mitmproxy-ca-cert.pem",[298,315,317],{"class":316},"s5ixo"," $(",[298,319,320],{"class":304},"openssl",[298,322,323],{"class":312}," x509",[298,325,327],{"class":326},"sAGMh"," -subject_hash_old",[298,329,330],{"class":326}," -in",[298,332,309],{"class":308},[298,334,313],{"class":312},[298,336,337],{"class":316}," | ",[298,339,340],{"class":304},"head",[298,342,343],{"class":326}," -n",[298,345,346],{"class":326}," 1",[298,348,349],{"class":316},")",[298,351,352],{"class":312},".0\n",[21,354,355,356,358],{},"此时我们就可以在家目录下找到一个以 .0 结尾的证书文件，我们的目标是将其放到手机的 ",[242,357,244],{}," 路径下。",[21,360,361],{},"对于一些出厂安卓版本较低、system 分区采用可变文件系统的手机，我们可以很轻松的使用带有 root 权限的文件管理器将证书文件移动到对应的目录（我这里就是）；而对于出厂版本较高的手机，system 分区可能是不可写的，需要采用额外的奇技淫巧。",[18,363,364,367,370,373,376,379],{},[21,365,366],{},"1、通过 ADB 将 HTTP Toolkit CA 证书推送到设备上。",[21,368,369],{},"2、从 /system/etc/security/cacerts/ 中复制所有系统证书到临时目录。",[21,371,372],{},"3、在 /system/etc/security/cacerts/ 上面挂载一个 tmpfs 内存文件系统。这实际上将一个可写的全新空文件系统放在了 /system 的一小部分上面。 将复制的系统证书移回到该挂载点。",[21,374,375],{},"4、将 HTTP Toolkit CA 证书也移动到该挂载点。",[21,377,378],{},"5、更新临时挂载点中所有文件的权限为 644，并将系统文件的 SELinux 标签设置为 system_file，以使其看起来像是合法的 Android 系统文件。",[21,380,381,382,387,388,63],{},"——",[48,383,386],{"href":384,"rel":385},"http://91fans.com.cn/post/certificate/",[52],"《安卓高版本安装系统证书 HTTPS 抓包 - 终极解决方案》"," 「",[48,389,392],{"href":390,"rel":391},"http://web.archive.org/web/20240801045307/http://91fans.com.cn/post/certificate/#gsc.tab=0",[52],"archived here",[28,394,396],{"id":395},"让被抓包的应用流量经过-mitm-代理服务器","让被抓包的应用流量经过 mitm 代理服务器",[21,398,399],{},"mitmproxy 默认会在 pc 端的 8080 端口开启一个 http 代理服务器，我们要做的就是想办法让待抓包的应用流量被这个 http 代理服务器所代理。",[290,401,403],{"className":292,"code":402,"language":294,"meta":196,"style":196},"[zhullyb@Archlinux ~]$ ip -br a\nlo               UNKNOWN        127.0.0.1/8 ::1/128\nenp0s31f6        UP             172.16.0.255/25 fe80::2df9:2927:cd44:65c/64\nwlp0s20f3        UP             192.168.20.212/24 fe80::a6bc:919:281e:dcab/64\ndocker0          DOWN           172.17.0.1/16 fe80::42:d1ff:febe:d513/64\n",[242,404,405,410,424,439,453],{"__ignoreMap":196},[298,406,407],{"class":300,"line":301},[298,408,409],{"class":316},"[zhullyb@Archlinux ~]$ ip -br a\n",[298,411,412,415,418,421],{"class":300,"line":197},[298,413,414],{"class":304},"lo",[298,416,417],{"class":312},"               UNKNOWN",[298,419,420],{"class":312},"        127.0.0.1/8",[298,422,423],{"class":312}," ::1/128\n",[298,425,427,430,433,436],{"class":300,"line":426},3,[298,428,429],{"class":304},"enp0s31f6",[298,431,432],{"class":312},"        UP",[298,434,435],{"class":312},"             172.16.0.255/25",[298,437,438],{"class":312}," fe80::2df9:2927:cd44:65c/64\n",[298,440,442,445,447,450],{"class":300,"line":441},4,[298,443,444],{"class":304},"wlp0s20f3",[298,446,432],{"class":312},[298,448,449],{"class":312},"             192.168.20.212/24",[298,451,452],{"class":312}," fe80::a6bc:919:281e:dcab/64\n",[298,454,456,459,462,465],{"class":300,"line":455},5,[298,457,458],{"class":304},"docker0",[298,460,461],{"class":312},"          DOWN",[298,463,464],{"class":312},"           172.17.0.1/16",[298,466,467],{"class":312}," fe80::42:d1ff:febe:d513/64\n",[21,469,470,471,475],{},"在这里我们能看到本机的无线网卡地址是 192.168.20.212，所以 http 代理服务器的地址就是 ",[48,472,473],{"href":473,"rel":474},"http://192.168.20.212:8080",[52]," 。（如果你的有线网卡和手机在同一局域网下，当然也可以用有线网卡的 ip 地址）",[21,477,478],{},"我们当然可以在安卓手机的 WIFI 连接页面填入 http 代理地址。",[21,480,481],{},[34,482],{"alt":196,"src":483},"https://static.031130.xyz/uploads/2024/08/12/66ab548080ed6.webp",[21,485,486],{},"但这对我来说似乎并不是一个好主意：一来并不是所有的应用都会默认使用 http 代理服务器，二来这回导致抓包目标不明确，非目标应用的流量也会经过代理服务器。",[21,488,489],{},"我选择了 Nekobox 这个常见的代理软件，它支持 http 代理服务器，且允许分应用代理。",[21,491,492],{},[34,493],{"alt":196,"src":494},"https://static.031130.xyz/uploads/2024/08/12/66ab54f08dfd6.webp",[21,496,497],{},"可以看到能正常抓取 https 流量",[21,499,500],{},[34,501],{"alt":196,"src":502},"https://static.031130.xyz/uploads/2024/08/12/66ab5970a6ac7.webp",[28,504,185],{"id":185},[80,506,507,514,521,528,534],{},[83,508,509],{},[48,510,513],{"href":511,"rel":512},"https://ibukifalling.github.io/2023/06/07/Android-app-packet-capture/",[52],"安卓应用防抓包机制及一些绕过",[83,515,516],{},[48,517,520],{"href":518,"rel":519},"https://chorer.github.io/2022/05/19/A-%E5%AE%89%E5%8D%937.0%E7%B3%BB%E7%BB%9F%E6%8A%93%E5%8C%85%E6%96%B9%E6%A1%88/",[52],"安卓7.0+系统抓包方案",[83,522,523],{},[48,524,527],{"href":525,"rel":526},"https://www.cnblogs.com/snad/p/17449454.html",[52],"frida抓包",[83,529,530],{},[48,531,533],{"href":268,"rel":532},[52],"gojue/ecapture",[83,535,536],{},[48,537,540],{"href":538,"rel":539},"http://91fans.com.cn/post/certificate/#gsc.tab=0",[52],"安卓高版本安装系统证书 HTTPS 抓包 - 终极解决方案",[542,543,544],"style",{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":196,"searchDepth":197,"depth":197,"links":546},[547,548,549,550],{"id":277,"depth":197,"text":277},{"id":287,"depth":197,"text":288},{"id":395,"depth":197,"text":396},{"id":185,"depth":197,"text":185},{"title":552,"date":553,"path":554,"tags":555,"body":559},"为中柏 N100 小主机开启来电自启","2024-07-22 23:31:51","/2024/07/22/enable-ac-power-loss-for-jumper-n100",[556,557,558],"Hardware","HomeServer","笔记",{"type":15,"value":560,"toc":594},[561,564,567,570,575,578,589],[21,562,563],{},"因为收到通知，寝室过两天要断电 20 分钟，所以需要打开 N100 家里云的来电自启功能。",[21,565,566],{},"正常关机短暂等待数秒后，开机，狂按 Delete 键进入 BIOS。",[21,568,569],{},"在 Advanced 选项中选择「OEM Configuration」",[21,571,572],{},[34,573],{"alt":196,"src":574},"https://static.031130.xyz/uploads/2024/08/12/669e7e6ae10a4.webp",[21,576,577],{},"可以在最后一行「AC Power Loss」中选择模式。",[80,579,580,583,586],{},[83,581,582],{},"Power Off: 关闭相关功能。",[83,584,585],{},"Power On: 传统意义上的来电自启，只要接通电源就会自启动。",[83,587,588],{},"Last State: 只有在上次关机是意外断电导致时，接通电源才会自启动。",[21,590,591],{},[34,592],{"alt":196,"src":593},"https://static.031130.xyz/uploads/2024/08/12/669e7e5ab7ad6.webp",{"title":196,"searchDepth":197,"depth":197,"links":595},[],{"title":597,"date":598,"path":599,"tags":600,"body":604},"我的博客被完整地反向代理，并自动翻译成了繁体中文","2024-07-18 11:22:37","/2024/07/18/my-blog-is-completely-proxied-and-translated-into-traditional-chinese",[601,12,13,602,603],"Blog","waline","umami",{"type":15,"value":605,"toc":1582},[606,610,613,616,622,631,634,640,643,649,712,718,721,728,731,734,737,742,753,760,765,768,773,776,781,787,790,793,799,801,808,838,842,847,858,1167,1171,1174,1178,1186,1516,1519,1525,1527,1530,1536,1543,1547,1554,1559,1568,1571,1574,1579],[28,607,609],{"id":608},"_20240820更新","2024.08.20更新",[21,611,612],{},"我将境外的 Github Pages 解析停了，所有流量全部指向我的 HK 的 vps。",[21,614,615],{},"访问对方站点 /?about/ 时，在我服务器 /about/ 收到了一个奇怪的请求，访问对方别的路径时也会在我服务器的对应路径收到请求，UA 伪装成了 Google 家的爬虫:",[21,617,618],{},[34,619],{"alt":620,"src":621},"caddy 日志","https://static.031130.xyz/uploads/2024/08/20/82e8dc389f081.webp",[21,623,624,625,630],{},"（关于为什么有 Mozilla 字段，可以参见 ",[48,626,629],{"href":627,"rel":628},"https://imbearchild.cyou/archives/2024/04/yes-browser-are-faking-to-be-firefox/",[52],"《是的，所有现代浏览器都假装自己是火狐》","）",[21,632,633],{},"这个 ip 的归属地是新加坡 Cogent，合理怀疑是对方的源站 IP（也有可能只是对方用于请求的爬虫 ip）。直接通过 ip 访问对方站点，发现是 lnmp 的安装成功提示:",[21,635,636],{},[34,637],{"alt":638,"src":639},"ip 访问","https://static.031130.xyz/uploads/2024/08/20/4d181fd0bcc11.webp",[21,641,642],{},"我注意到对方站点在 html 结尾处加了如下字段",[21,644,645],{},[34,646],{"alt":647,"src":648},"这里是直接请求的 archive 存档，所以有 archive 前缀","https://static.031130.xyz/uploads/2024/08/20/057a829ec9e4a.webp",[290,650,654],{"className":651,"code":652,"language":653,"meta":196,"style":196},"language-html shiki shiki-themes one-light one-dark-pro","\u003C!-- freevslinks -->\u003Cdiv style=\"display:none\">\u003Ca href=\"http://www.xxfseo.com/?time=1721267439\">xxfseo.com\u003C/a>\u003C/div>\u003C!-- /freevslinks -->\n","html",[242,655,656],{"__ignoreMap":196},[298,657,658,662,665,668,671,674,677,681,683,686,688,691,693,696,699,701,704,706,709],{"class":300,"line":301},[298,659,661],{"class":660},"sW2Sy","\u003C!-- freevslinks -->",[298,663,664],{"class":316},"\u003C",[298,666,667],{"class":308},"div",[298,669,670],{"class":326}," style",[298,672,673],{"class":316},"=",[298,675,676],{"class":312},"\"",[298,678,680],{"class":679},"s-4uI","display:none",[298,682,676],{"class":312},[298,684,685],{"class":316},">\u003C",[298,687,48],{"class":308},[298,689,690],{"class":326}," href",[298,692,673],{"class":316},[298,694,695],{"class":312},"\"http://www.xxfseo.com/?time=1721267439\"",[298,697,698],{"class":316},">xxfseo.com\u003C/",[298,700,48],{"class":308},[298,702,703],{"class":316},">\u003C/",[298,705,667],{"class":308},[298,707,708],{"class":316},">",[298,710,711],{"class":660},"\u003C!-- /freevslinks -->\n",[21,713,714],{},[34,715],{"alt":716,"src":717},"官网","https://static.031130.xyz/uploads/2024/08/20/b0449632623b2.webp",[21,719,720],{},"似乎是专业产生互联网垃圾的组织。",[21,722,723,724,727],{},"我目前已经屏蔽了来自 ",[242,725,726],{},"154.39.149.128"," 这个 ip 的访问请求，对方的站点暂时性崩盘，以后可能会换用别的 ip 来爬也说不准，先到此为止吧。",[729,730],"hr",{},[28,732,733],{"id":733},"现象",[21,735,736],{},"今早打开我的流量统计网站，发现我的博客有一个神奇的 referer",[21,738,739],{},[34,740],{"alt":196,"src":741},"https://static.031130.xyz/uploads/2024/08/12/66989d79e740c.webp",[21,743,744,745,750],{},"顶着我博客用的 favicon，但竟然不是我的域名。点进去一看，发现我的博客被翻译成了繁体中文，而且语句读上去也不是很通畅。",[48,746,749],{"href":747,"rel":748},"https://web.archive.org/web/20240718015038/https://theodorelobas.com/",[52],"Archived here.",[34,751],{"alt":196,"src":752},"https://static.031130.xyz/uploads/2024/08/12/66ab4ffa4eda3.webp",[21,754,755,756],{},"再打开关于页一看，把我的博客域名给干掉了，只留下一个反代域名。",[48,757,749],{"href":758,"rel":759},"http://web.archive.org/web/20240718034705/https://theodorelobas.com/?about/",[52],[21,761,762],{},[34,763],{"alt":196,"src":764},"https://static.031130.xyz/uploads/2024/08/12/66989f7f73b90.webp",[21,766,767],{},"随机打开一个幸运页面，使用 F12 控制台查看流量情况，发现 umami 统计和 waline 评论都用的我个人部署的",[21,769,770],{},[34,771],{"alt":196,"src":772},"https://static.031130.xyz/uploads/2024/08/12/6698a0bf39f8d.webp",[21,774,775],{},"查询 ip 归属地，是老朋友 Cloudflare 泛播",[21,777,778],{},[34,779],{"alt":196,"src":780},"https://static.031130.xyz/uploads/2024/08/12/6698a101845a2.webp",[21,782,783],{},[34,784],{"alt":785,"src":786},"url 上不明所以的问号","https://static.031130.xyz/uploads/2024/08/12/6698a2dd3d78a.webp",[21,788,789],{},"结合 url 上不明所以的问号，推测应该是 cloudflare workers 反向代理 + 调用翻译 api + 关键词替换。我小小更新了某个页面，发现对方站点也立马更新了，基本可以确定是反向代理。",[21,791,792],{},"whois 查询没有获得任何有用信息，一眼望去全是隐私保护。",[21,794,795],{},[34,796],{"alt":797,"src":798},"whois 信息","https://static.031130.xyz/uploads/2024/08/12/6698a2deaa9d0.webp",[729,800],{},[21,802,803,804,807],{},"事先声明，我的博客采用",[242,805,806],{},"CC BY-NC-SA 4.0","，我个人是非常欢迎任何人注明出处的情况下搬运甚至翻译我的文章的，甚至允许搬运到 csdn——只要你不开收费访问。但这种反代行为我是非常抵触的。",[122,809,810,820,826,832,835],{},[83,811,812,813,815,816],{},"文章被翻译成了繁体中文，但没有注明是翻译稿，直接把我本人的网名用繁体写了上去，这并不符合 ",[242,814,806],{}," 的要求。",[34,817],{"alt":818,"src":819},"如果修改了原文需要做出说明","https://static.031130.xyz/uploads/2024/08/12/669929695144b.webp",[83,821,822,823],{},"翻译质量很差，就连机翻都不应有这种奇怪的同义词替换，问了问熟悉繁中的朋友说是港台也没有这种用法，像是故意洗稿。",[34,824],{"alt":196,"src":825},"https://static.031130.xyz/uploads/2024/08/12/6699bdbab5f0a.webp",[83,827,828,829],{},"反向代理了我的整个网站，但把我关于页上的博客链接给去掉了，我不认为这是善意的反代行为。",[48,830,749],{"href":758,"rel":831},[52],[83,833,834],{},"仍然在使用我的 waline 评论和 umami 统计。",[83,836,837],{},"没有给我任何事先的邮件说明或者评论留言，whois 开隐私保护的情况下，我找不到任何方法去联系这位域名的持有者。",[28,839,841],{"id":840},"怎么办","怎么办？",[843,844,846],"h3",{"id":845},"植入-js-进行跳转","植入 js 进行跳转",[21,848,849,850,853,854,857],{},"因为对方同步的及时性很强，高度怀疑是 cloudflare workers 反向代理，且评论和流量统计都直接原模原样用的是我的 js，我就注入一个 js 检测 host，如果不是我的域名或者本地调试时使用的 ",[242,851,852],{},"127.0.0.1"," or ",[242,855,856],{},"localhost","，则清空页面内容，给出文字提示，五秒后跳转到我的博客。代码如下:",[290,859,863],{"className":860,"code":861,"language":862,"meta":196,"style":196},"language-javascript shiki shiki-themes one-light one-dark-pro","const host = window.location.host\nif (host !== 'zhul.in' && ! host.startsWith('localhost') && ! host.startsWith('127.0.0.1')) {\n    document.body.innerHTML = [\n        '\u003Cdiv style=\"margin: auto;\">',\n        '\u003Ch1>当前页面并非本文作者的主页，将在五秒后跳转。\u003C/h1>',\n        '\u003Cbr />',\n        '\u003Ch1>请此站点持有者联系我: zhullyb@outlook.com\u003C/h1>',\n        '\u003C/div>',\n    ].join('')\n    document.body.style = [\n        'background-color: white;',\n        'color: black;',\n        'text-align: center;',\n        'font-size: 50px;',\n        'width: 100vw;',\n        'height: 100vh;',\n        'display: flex;',\n    ].join('')\n    setTimeout(() => {\n        window.location.href = 'https://zhul.in'\n    }, 5000)\n}\n","javascript",[242,864,865,895,954,974,982,989,997,1005,1013,1030,1047,1055,1063,1071,1079,1087,1095,1103,1116,1131,1151,1161],{"__ignoreMap":196},[298,866,867,871,875,879,883,886,890,892],{"class":300,"line":301},[298,868,870],{"class":869},"sLKXg","const",[298,872,874],{"class":873},"sNmU0"," host",[298,876,878],{"class":877},"s_Sar"," =",[298,880,882],{"class":881},"s7GmK"," window",[298,884,885],{"class":316},".",[298,887,889],{"class":888},"s2QsP","location",[298,891,885],{"class":316},[298,893,894],{"class":308},"host\n",[298,896,897,900,903,907,910,913,916,919,921,923,926,929,932,935,938,940,942,944,946,948,951],{"class":300,"line":197},[298,898,899],{"class":869},"if",[298,901,902],{"class":316}," (",[298,904,906],{"class":905},"sz0mV","host",[298,908,909],{"class":877}," !==",[298,911,912],{"class":312}," 'zhul.in'",[298,914,915],{"class":877}," &&",[298,917,918],{"class":877}," !",[298,920,874],{"class":881},[298,922,885],{"class":316},[298,924,925],{"class":304},"startsWith",[298,927,928],{"class":316},"(",[298,930,931],{"class":312},"'localhost'",[298,933,934],{"class":316},") ",[298,936,937],{"class":877},"&&",[298,939,918],{"class":877},[298,941,874],{"class":881},[298,943,885],{"class":316},[298,945,925],{"class":304},[298,947,928],{"class":316},[298,949,950],{"class":312},"'127.0.0.1'",[298,952,953],{"class":316},")) {\n",[298,955,956,959,961,964,966,969,971],{"class":300,"line":426},[298,957,958],{"class":881},"    document",[298,960,885],{"class":316},[298,962,963],{"class":888},"body",[298,965,885],{"class":316},[298,967,968],{"class":308},"innerHTML",[298,970,878],{"class":877},[298,972,973],{"class":316}," [\n",[298,975,976,979],{"class":300,"line":441},[298,977,978],{"class":312},"        '\u003Cdiv style=\"margin: auto;\">'",[298,980,981],{"class":316},",\n",[298,983,984,987],{"class":300,"line":455},[298,985,986],{"class":312},"        '\u003Ch1>当前页面并非本文作者的主页，将在五秒后跳转。\u003C/h1>'",[298,988,981],{"class":316},[298,990,992,995],{"class":300,"line":991},6,[298,993,994],{"class":312},"        '\u003Cbr />'",[298,996,981],{"class":316},[298,998,1000,1003],{"class":300,"line":999},7,[298,1001,1002],{"class":312},"        '\u003Ch1>请此站点持有者联系我: zhullyb@outlook.com\u003C/h1>'",[298,1004,981],{"class":316},[298,1006,1008,1011],{"class":300,"line":1007},8,[298,1009,1010],{"class":312},"        '\u003C/div>'",[298,1012,981],{"class":316},[298,1014,1016,1019,1022,1024,1027],{"class":300,"line":1015},9,[298,1017,1018],{"class":316},"    ].",[298,1020,1021],{"class":304},"join",[298,1023,928],{"class":316},[298,1025,1026],{"class":312},"''",[298,1028,1029],{"class":316},")\n",[298,1031,1033,1035,1037,1039,1041,1043,1045],{"class":300,"line":1032},10,[298,1034,958],{"class":881},[298,1036,885],{"class":316},[298,1038,963],{"class":888},[298,1040,885],{"class":316},[298,1042,542],{"class":308},[298,1044,878],{"class":877},[298,1046,973],{"class":316},[298,1048,1050,1053],{"class":300,"line":1049},11,[298,1051,1052],{"class":312},"        'background-color: white;'",[298,1054,981],{"class":316},[298,1056,1058,1061],{"class":300,"line":1057},12,[298,1059,1060],{"class":312},"        'color: black;'",[298,1062,981],{"class":316},[298,1064,1066,1069],{"class":300,"line":1065},13,[298,1067,1068],{"class":312},"        'text-align: center;'",[298,1070,981],{"class":316},[298,1072,1074,1077],{"class":300,"line":1073},14,[298,1075,1076],{"class":312},"        'font-size: 50px;'",[298,1078,981],{"class":316},[298,1080,1082,1085],{"class":300,"line":1081},15,[298,1083,1084],{"class":312},"        'width: 100vw;'",[298,1086,981],{"class":316},[298,1088,1090,1093],{"class":300,"line":1089},16,[298,1091,1092],{"class":312},"        'height: 100vh;'",[298,1094,981],{"class":316},[298,1096,1098,1101],{"class":300,"line":1097},17,[298,1099,1100],{"class":312},"        'display: flex;'",[298,1102,981],{"class":316},[298,1104,1106,1108,1110,1112,1114],{"class":300,"line":1105},18,[298,1107,1018],{"class":316},[298,1109,1021],{"class":304},[298,1111,928],{"class":316},[298,1113,1026],{"class":312},[298,1115,1029],{"class":316},[298,1117,1119,1122,1125,1128],{"class":300,"line":1118},19,[298,1120,1121],{"class":304},"    setTimeout",[298,1123,1124],{"class":316},"(() ",[298,1126,1127],{"class":869},"=>",[298,1129,1130],{"class":316}," {\n",[298,1132,1134,1137,1139,1141,1143,1146,1148],{"class":300,"line":1133},20,[298,1135,1136],{"class":881},"        window",[298,1138,885],{"class":316},[298,1140,889],{"class":888},[298,1142,885],{"class":316},[298,1144,1145],{"class":308},"href",[298,1147,878],{"class":877},[298,1149,1150],{"class":312}," 'https://zhul.in'\n",[298,1152,1153,1156,1159],{"class":300,"line":3},[298,1154,1155],{"class":316},"    }, ",[298,1157,1158],{"class":326},"5000",[298,1160,1029],{"class":316},[298,1162,1164],{"class":300,"line":1163},22,[298,1165,1166],{"class":316},"}\n",[843,1168,1170],{"id":1169},"给-waline-和-umami-设置限制","给 waline 和 umami 设置限制",[21,1172,1173],{},"我博客使用的 waline 和 umami 均是我自己在 vercel 上架设的，我自然可以根据访客的 referer 来判断请求的来源。不过看了下，vercel.json 文件并不能直接实现这个需求，可能需要我们自己来编写一些简易的中间件。",[1175,1176,1177],"h4",{"id":602},"Waline",[21,1179,1180,1181,260],{},"waline 文档中有明确提到，waline 基于 Koa 框架开发，可以",[48,1182,1185],{"href":1183,"rel":1184},"https://waline.js.org/reference/server/plugin.html#%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%88%B6%E4%BD%9C",[52],"自行编写中间件",[290,1187,1191],{"className":1188,"code":1189,"language":1190,"meta":196,"style":196},"language-js shiki shiki-themes one-light one-dark-pro","// example/index.cjs\nconst Application = require('@waline/vercel');\n\nmodule.exports = Application({\n    plugins: [\n        {\n            middlewares: [\n                async (ctx, next) => {\n                    const referer = ctx.request.headers['referer'];\n                    if (referer) {\n                        if (\n                            !referer.include('localhost') &&\n                            !referer.include('127.0.0.1') &&\n                            !referer.include('zhul.in')\n                        ) {\n                            ctx.status = 403\n                            ctx.body = 'Forbidden'\n                            return\n                        }\n                    }\n                    await next();\n                },\n            ]\n        }\n    ],\n    async postSave(comment) {\n        // do what ever you want after comment saved\n    },\n});\n","js",[242,1192,1193,1198,1218,1224,1241,1252,1257,1266,1289,1323,1336,1344,1365,1383,1400,1405,1420,1433,1438,1443,1448,1459,1464,1470,1476,1482,1498,1504,1510],{"__ignoreMap":196},[298,1194,1195],{"class":300,"line":301},[298,1196,1197],{"class":660},"// example/index.cjs\n",[298,1199,1200,1202,1205,1207,1210,1212,1215],{"class":300,"line":197},[298,1201,870],{"class":869},[298,1203,1204],{"class":873}," Application",[298,1206,878],{"class":877},[298,1208,1209],{"class":304}," require",[298,1211,928],{"class":316},[298,1213,1214],{"class":312},"'@waline/vercel'",[298,1216,1217],{"class":316},");\n",[298,1219,1220],{"class":300,"line":426},[298,1221,1223],{"emptyLinePlaceholder":1222},true,"\n",[298,1225,1226,1229,1231,1234,1236,1238],{"class":300,"line":441},[298,1227,1228],{"class":888},"module",[298,1230,885],{"class":316},[298,1232,1233],{"class":888},"exports",[298,1235,878],{"class":877},[298,1237,1204],{"class":304},[298,1239,1240],{"class":316},"({\n",[298,1242,1243,1246,1250],{"class":300,"line":455},[298,1244,1245],{"class":308},"    plugins",[298,1247,1249],{"class":1248},"st7oF",":",[298,1251,973],{"class":316},[298,1253,1254],{"class":300,"line":991},[298,1255,1256],{"class":316},"        {\n",[298,1258,1259,1262,1264],{"class":300,"line":999},[298,1260,1261],{"class":308},"            middlewares",[298,1263,1249],{"class":1248},[298,1265,973],{"class":316},[298,1267,1268,1271,1273,1277,1280,1283,1285,1287],{"class":300,"line":1007},[298,1269,1270],{"class":869},"                async",[298,1272,902],{"class":316},[298,1274,1276],{"class":1275},"s8iYz","ctx",[298,1278,1279],{"class":316},", ",[298,1281,1282],{"class":1275},"next",[298,1284,934],{"class":316},[298,1286,1127],{"class":869},[298,1288,1130],{"class":316},[298,1290,1291,1294,1297,1299,1302,1304,1308,1310,1314,1317,1320],{"class":300,"line":1015},[298,1292,1293],{"class":869},"                    const",[298,1295,1296],{"class":873}," referer",[298,1298,878],{"class":877},[298,1300,1301],{"class":881}," ctx",[298,1303,885],{"class":316},[298,1305,1307],{"class":1306},"sC09Y","request",[298,1309,885],{"class":316},[298,1311,1313],{"class":1312},"sj4iG","headers",[298,1315,1316],{"class":316},"[",[298,1318,1319],{"class":312},"'referer'",[298,1321,1322],{"class":316},"];\n",[298,1324,1325,1328,1330,1333],{"class":300,"line":1032},[298,1326,1327],{"class":869},"                    if",[298,1329,902],{"class":316},[298,1331,1332],{"class":905},"referer",[298,1334,1335],{"class":316},") {\n",[298,1337,1338,1341],{"class":300,"line":1049},[298,1339,1340],{"class":869},"                        if",[298,1342,1343],{"class":316}," (\n",[298,1345,1346,1349,1351,1353,1356,1358,1360,1362],{"class":300,"line":1057},[298,1347,1348],{"class":877},"                            !",[298,1350,1332],{"class":881},[298,1352,885],{"class":316},[298,1354,1355],{"class":304},"include",[298,1357,928],{"class":316},[298,1359,931],{"class":312},[298,1361,934],{"class":316},[298,1363,1364],{"class":877},"&&\n",[298,1366,1367,1369,1371,1373,1375,1377,1379,1381],{"class":300,"line":1065},[298,1368,1348],{"class":877},[298,1370,1332],{"class":881},[298,1372,885],{"class":316},[298,1374,1355],{"class":304},[298,1376,928],{"class":316},[298,1378,950],{"class":312},[298,1380,934],{"class":316},[298,1382,1364],{"class":877},[298,1384,1385,1387,1389,1391,1393,1395,1398],{"class":300,"line":1073},[298,1386,1348],{"class":877},[298,1388,1332],{"class":881},[298,1390,885],{"class":316},[298,1392,1355],{"class":304},[298,1394,928],{"class":316},[298,1396,1397],{"class":312},"'zhul.in'",[298,1399,1029],{"class":316},[298,1401,1402],{"class":300,"line":1081},[298,1403,1404],{"class":316},"                        ) {\n",[298,1406,1407,1410,1412,1415,1417],{"class":300,"line":1089},[298,1408,1409],{"class":881},"                            ctx",[298,1411,885],{"class":316},[298,1413,1414],{"class":1312},"status",[298,1416,878],{"class":877},[298,1418,1419],{"class":326}," 403\n",[298,1421,1422,1424,1426,1428,1430],{"class":300,"line":1097},[298,1423,1409],{"class":881},[298,1425,885],{"class":316},[298,1427,963],{"class":1312},[298,1429,878],{"class":877},[298,1431,1432],{"class":312}," 'Forbidden'\n",[298,1434,1435],{"class":300,"line":1105},[298,1436,1437],{"class":869},"                            return\n",[298,1439,1440],{"class":300,"line":1118},[298,1441,1442],{"class":316},"                        }\n",[298,1444,1445],{"class":300,"line":1133},[298,1446,1447],{"class":316},"                    }\n",[298,1449,1450,1453,1456],{"class":300,"line":3},[298,1451,1452],{"class":869},"                    await",[298,1454,1455],{"class":304}," next",[298,1457,1458],{"class":316},"();\n",[298,1460,1461],{"class":300,"line":1163},[298,1462,1463],{"class":316},"                },\n",[298,1465,1467],{"class":300,"line":1466},23,[298,1468,1469],{"class":316},"            ]\n",[298,1471,1473],{"class":300,"line":1472},24,[298,1474,1475],{"class":316},"        }\n",[298,1477,1479],{"class":300,"line":1478},25,[298,1480,1481],{"class":316},"    ],\n",[298,1483,1485,1488,1491,1493,1496],{"class":300,"line":1484},26,[298,1486,1487],{"class":869},"    async",[298,1489,1490],{"class":304}," postSave",[298,1492,928],{"class":316},[298,1494,1495],{"class":1275},"comment",[298,1497,1335],{"class":316},[298,1499,1501],{"class":300,"line":1500},27,[298,1502,1503],{"class":660},"        // do what ever you want after comment saved\n",[298,1505,1507],{"class":300,"line":1506},28,[298,1508,1509],{"class":316},"    },\n",[298,1511,1513],{"class":300,"line":1512},29,[298,1514,1515],{"class":316},"});\n",[21,1517,1518],{},"成效立竿见影",[21,1520,1521],{},[34,1522],{"alt":1523,"src":1524},"效果图","https://static.031130.xyz/uploads/2024/08/12/6698d6570a780.webp",[1175,1526,603],{"id":603},[21,1528,1529],{},"对 umami 的第一次请求是 script.js，这个请求是因为 html 头部添加了 umami 的 script 链接，这一次请求是不带有 referer 的，因此，对方站点使用我的 umami 统计并不会给我的博客访问统计造成错乱——umami 能够自行分辨对方的站点是否是当初添加网站时填写的站点。但我不能忍的地方在与 umami 的数据库会记录对方站点的流量情况，这占用了我的数据库空间。",[21,1531,1532],{},[34,1533],{"alt":1534,"src":1535},"数据库导出文件","https://static.031130.xyz/uploads/2024/08/12/6698d9c326739.webp",[21,1537,1538,1539,1542],{},"umami 使用 nextjs 开发，似乎并没有给我留可供自定义的接口，贸然修改源码则可能会在下次 merge 官方代码时遇到麻烦。为了给自己省点事，我选择不再让博客加载 ",[242,1540,1541],{},"https://umami.zhul.in/script.js"," ，而是将其中的内容复制保存下来，添加基于 host 的判断条件来决定是否向自建的 umami 服务发起请求。",[843,1544,1546],{"id":1545},"尝试向-cloudflare-举报滥用行为","尝试向 cloudflare 举报滥用行为",[21,1548,1549,1550],{},"cloudflare 是允许提交滥用举报的，这个域名正在使用 cloudflare 提供服务，因此我可以尝试举报，链接在这里: ",[48,1551,1552],{"href":1552,"rel":1553},"https://www.cloudflare.com/zh-cn/trust-hub/reporting-abuse/",[52],[21,1555,1556],{},[34,1557],{"alt":196,"src":1558},"https://static.031130.xyz/uploads/2024/08/12/669926eddb16e.webp",[21,1560,1561,1562,1564,1565,1567],{},"类别就可以选 DCMA，因为对方没有遵守 ",[242,1563,806],{}," 协议给我的文章做出合理的署名，且我的博客关于页面不属于 ",[242,1566,806],{}," 的范畴，对方是没有理由去对这一页做出二次分发的行为的。",[21,1569,1570],{},"不过我暂时还没这么做，我期待着我前面的几个方案能够奏效，我仍寄希望于对方会及时和我沟通，我也不太想为此去填一张额外的烦人的表单。",[28,1572,1573],{"id":1573},"最终效果",[21,1575,1576],{},[34,1577],{"alt":196,"src":1578},"https://static.031130.xyz/uploads/2024/08/12/66992ad0d2890.gif",[542,1580,1581],{},"html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .s-4uI, html code.shiki .s-4uI{--shiki-default:#383A42;--shiki-dark:#98C379}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .sNmU0, html code.shiki .sNmU0{--shiki-default:#986801;--shiki-dark:#E5C07B}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .s7GmK, html code.shiki .s7GmK{--shiki-default:#383A42;--shiki-dark:#E5C07B}html pre.shiki code .s2QsP, html code.shiki .s2QsP{--shiki-default:#E45649;--shiki-dark:#E5C07B}html pre.shiki code .sz0mV, html code.shiki .sz0mV{--shiki-default:#383A42;--shiki-dark:#E06C75}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .st7oF, html code.shiki .st7oF{--shiki-default:#0184BC;--shiki-dark:#ABB2BF}html pre.shiki code .s8iYz, html code.shiki .s8iYz{--shiki-default:#383A42;--shiki-default-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic}html pre.shiki code .sC09Y, html code.shiki .sC09Y{--shiki-default:#C18401;--shiki-dark:#E5C07B}html pre.shiki code .sj4iG, html code.shiki .sj4iG{--shiki-default:#C18401;--shiki-dark:#E06C75}",{"title":196,"searchDepth":197,"depth":197,"links":1583},[1584,1585,1586,1591],{"id":608,"depth":197,"text":609},{"id":733,"depth":197,"text":733},{"id":840,"depth":197,"text":841,"children":1587},[1588,1589,1590],{"id":845,"depth":426,"text":846},{"id":1169,"depth":426,"text":1170},{"id":1545,"depth":426,"text":1546},{"id":1573,"depth":197,"text":1573},{"title":1593,"date":1594,"path":1595,"tags":1596,"body":1599},"尝试体验 Fedora COPR 中的 allow SSH 功能","2024-07-15 11:14:12","/2024/07/15/try-ssh-connection-in-fedora-copr",[1597,1598,212],"Fedora","Experience",{"type":15,"value":1600,"toc":1754},[1601,1604,1609,1612,1623,1626,1629,1632,1637,1640,1645,1648,1653,1656,1662,1665,1671,1674,1680,1683,1689,1692,1695,1722,1725,1745,1748],[21,1602,1603],{},"在今年的早些时候，我在 COPR 看到了一个新出现的名为「allow SSH」的按钮。",[21,1605,1606],{},[34,1607],{"alt":196,"src":1608},"https://static.031130.xyz/uploads/2024/08/12/6694949de2921.webp",[21,1610,1611],{},"我在 COPR 的 User Documentation 中找到了对应的描述。",[18,1613,1614],{},[21,1615,1616,1617,1622],{},"Sometimes it is useful to manually debug failed builds not locally but within the Copr infrastructure. That’s why it is possible to allow SSH access to a copr builder. More information in the ",[48,1618,1621],{"href":1619,"rel":1620},"https://frostyx.cz/posts/ssh-access-to-copr-builders",[52],"SSH access to Copr builders"," blog post.",[21,1624,1625],{},"COPR 的这项功能允许包维护者远程访问自己没有的 CPU 架构或 Linux 发行版的 Linux 环境，大大减少打包时的痛点。",[28,1627,1628],{"id":1628},"开始使用",[21,1630,1631],{},"尝试点击按钮，获得如下界面，可以填写自己的 ssh 公钥，最多可以选择两台设备，如果选择的设备数量大于 2，则剩下的人物会维持在 pending 状态，直到被你 ssh 连接的构建机完成对应的构建任务。",[21,1633,1634],{},[34,1635],{"alt":196,"src":1636},"https://static.031130.xyz/uploads/2024/08/12/66949782e9177.webp",[21,1638,1639],{},"在该次构建的详情页面，等待 backend.log 按钮出现",[21,1641,1642],{},[34,1643],{"alt":196,"src":1644},"https://static.031130.xyz/uploads/2024/08/12/6694ca668003e.webp",[21,1646,1647],{},"在这个 url 对应的文件中，我们可以找到需要的 ssh 命令",[21,1649,1650],{},[34,1651],{"alt":196,"src":1652},"https://static.031130.xyz/uploads/2024/08/12/6694988c63899.webp",[21,1654,1655],{},"使用对应的 ssh 命令即可连上构建服务器",[21,1657,1658],{},[34,1659],{"alt":1660,"src":1661},"连接成功","https://static.031130.xyz/uploads/2024/08/12/669499b25cd1b.webp",[21,1663,1664],{},"先跑个 neofetch 看看，双核 16G，看着还行。",[21,1666,1667],{},[34,1668],{"alt":1669,"src":1670},"neofetch","https://static.031130.xyz/uploads/2024/08/12/669499b56e156.webp",[21,1672,1673],{},"随手跑了个 speedtest，竟然是千兆上下传对等的网速。",[21,1675,1676],{},[34,1677],{"alt":1678,"src":1679},"speedtest 结果","https://static.031130.xyz/uploads/2024/08/12/6694bc062f6a3.webp",[21,1681,1682],{},"在这台机子上，我们可以使用 builder-live.log 中的命令手动触发一次构建（不过我这里跑了一半就报错了，疑似是系统不够完善）",[21,1684,1685],{},[34,1686],{"alt":1687,"src":1688},"构建命令","https://static.031130.xyz/uploads/2024/08/12/6694b09a57e06.webp",[21,1690,1691],{},"不过很可惜，COPR 似乎并没有给我们中途去干预/调试构建过程的方案，仅仅是提供了一个可供自由操作的 Linux 环境。使用 copr-rpmbuild 命令可以进行对应的构建，但构建过程依然是在沙箱内进行，且没有给中途暂停/调试的机会。如果需要一步步手动的构建，还是建议使用 rpmbuild 命令进行。",[28,1693,1694],{"id":1694},"杂项",[80,1696,1697,1704,1710,1716],{},[83,1698,1699,1700,1703],{},"使用 ",[242,1701,1702],{},"copr-builder help"," 命令可以获取打包机的提示信息",[83,1705,1699,1706,1709],{},[242,1707,1708],{},"copr-builder show"," 命令查看剩余时间",[83,1711,1699,1712,1715],{},[242,1713,1714],{},"copr-builder prolong"," 可以延长打包机的有效时长",[83,1717,1699,1718,1721],{},[242,1719,1720],{},"copr-builder release"," 可以销毁当前的打包机环境",[28,1723,1724],{"id":1724},"限制",[80,1726,1727,1730,1733,1736,1739,1742],{},[83,1728,1729],{},"由于安全原因，构建结束后，只有 spec 文件和日志可以被存储到 copr 对应项目的服务器。打包机会使用一个独特的沙箱防止其构建产物被二次使用，哪怕是同一个用户都不行。",[83,1731,1732],{},"为了避免资源艾琳娜贵妃，同一用户在同一时刻最多只能使用两台具有 ssh 访问权限的打包机。",[83,1734,1735],{},"由于上面的两套规定，当 copr 构建失败时并不能自动启动 SSH 访问权限，需要用户手动在面板上 resubmit 当前任务并选择使用 SSH 访问权限。",[83,1737,1738],{},"打包机在默认情况下 1 小时后自动销毁，除非你手动申请延长时间，最长为 48 小时。",[83,1740,1741],{},"有些打包机只有 IPv6 的访问地址，你没得选。如果你无法连接 IPv6 网络，你可以取消当前的任务并重新发布并期待能给你下发一台具有 IPv4 访问地址的打包机（其实非常少），或者使用代理。",[83,1743,1744],{},"如果 SRPM 构建失败，则不能 resubmit 当前任务。这是 COPR 的实现逻辑问题，未来可能得到改善。",[28,1746,1747],{"id":1747},"参考",[21,1749,1750],{},[48,1751,1753],{"href":1619,"rel":1752},[52],"「SSH access to Copr builders」",{"title":196,"searchDepth":197,"depth":197,"links":1755},[1756,1757,1758,1759],{"id":1628,"depth":197,"text":1628},{"id":1694,"depth":197,"text":1694},{"id":1724,"depth":197,"text":1724},{"id":1747,"depth":197,"text":1747},{"title":1761,"date":1762,"path":1763,"tags":1764,"body":1766},"在 Arch Linux 下配置使用 HP Laser 103w 打印机无线打印","2024-07-14 18:30:33","/2024/07/14/config-hp-laser-103w-printer-for-archlinux",[213,556,212,1765,557,558],"Printer",{"type":15,"value":1767,"toc":2018},[1768,1771,1774,1777,1783,1787,1796,1799,1815,1829,1837,1856,1867,1893,1895,1902,1916,1923,1926,1943,1964,1979,1982,1985,1991,1994,1997,2003,2006,2012,2015],[21,1769,1770],{},"我寝室有一台使用 wifi 连接的 HP Laser 103w 打印机，这些天刚好布置了新的 HomeServer，因此来记录一下这台打印机的配置过程，根据 HP 官网驱动包的名字「HP Laser 100 and HP Color Laser 150 Printer series Print Driver」推断，此过程应该能适用于所有的 HP Laser 100 及 HP Color Laser 150 系列的打印机。",[28,1772,1773],{"id":1773},"打印机联网",[21,1775,1776],{},"首先使用 Windows 操作系统完成打印机的联网工作，在路由器的网页管理界面可以看到这台打印机的局域网 ip 是 192.168.123.20 ，记录备用。如果有条件的话，尽量将打印机的 MAC 地址与 IP 地址绑定，避免路由器将该 IP 分配给别的设备。",[21,1778,1779],{},[34,1780],{"alt":1781,"src":1782},"路由器的网页管理界面","https://static.031130.xyz/uploads/2024/08/12/6693aa41c079b.webp",[28,1784,1786],{"id":1785},"安装-cups","安装 CUPS",[21,1788,1789,1790,1795],{},"随后按照 ArchWiki 的 ",[48,1791,1794],{"href":1792,"rel":1793},"https://wiki.archlinux.org/title/CUPS",[52],"CUPS 页面","进行相关配置，CUPS 是苹果公司开源的打印系统，是目前 Linux 下最主流的打印方案。",[21,1797,1798],{},"首先安装 cups ，如果需要「打印为 pdf」的功能，可以选装 cups-pdf。",[290,1800,1802],{"className":292,"code":1801,"language":294,"meta":196,"style":196},"pacman -S cups\n",[242,1803,1804],{"__ignoreMap":196},[298,1805,1806,1809,1812],{"class":300,"line":301},[298,1807,1808],{"class":304},"pacman",[298,1810,1811],{"class":326}," -S",[298,1813,1814],{"class":312}," cups\n",[290,1816,1818],{"className":292,"code":1817,"language":294,"meta":196,"style":196},"pacman -S cups-pdf\n",[242,1819,1820],{"__ignoreMap":196},[298,1821,1822,1824,1826],{"class":300,"line":301},[298,1823,1808],{"class":304},[298,1825,1811],{"class":326},[298,1827,1828],{"class":312}," cups-pdf\n",[21,1830,1831,1832,1836],{},"接着需要启动 cups 的服务，如果需要使用 cups 自带的 webui，可以直接启用 cups.service，这样就能在 ",[48,1833,1834],{"href":1834,"rel":1835},"http://localhost:631",[52]," 看到对应的配置页面。",[290,1838,1840],{"className":292,"code":1839,"language":294,"meta":196,"style":196},"systemctl enable cups.service --now\n",[242,1841,1842],{"__ignoreMap":196},[298,1843,1844,1847,1850,1853],{"class":300,"line":301},[298,1845,1846],{"class":304},"systemctl",[298,1848,1849],{"class":312}," enable",[298,1851,1852],{"class":312}," cups.service",[298,1854,1855],{"class":326}," --now\n",[21,1857,1858,1859,1862,1863,1866],{},"而如果你正在使用一些集成度较高的 DE 如 KDE 或 GNOME，可以安装 DE 对应的打印机管理程序。在 Arch Linux 下，KDE 自带的打印机管理程序包名为 ",[242,1860,1861],{},"print-manager","，此外还需要安装安装 ",[242,1864,1865],{},"system-config-printer"," 打印机功能支持软件包。这种方案则不需要启动 cups.service，只需要启动 cups.socket 即可。",[290,1868,1870],{"className":292,"code":1869,"language":294,"meta":196,"style":196},"pacman -S print-manager system-config-printer\nsystemctl enable cups.socket\n",[242,1871,1872,1884],{"__ignoreMap":196},[298,1873,1874,1876,1878,1881],{"class":300,"line":301},[298,1875,1808],{"class":304},[298,1877,1811],{"class":326},[298,1879,1880],{"class":312}," print-manager",[298,1882,1883],{"class":312}," system-config-printer\n",[298,1885,1886,1888,1890],{"class":300,"line":197},[298,1887,1846],{"class":304},[298,1889,1849],{"class":312},[298,1891,1892],{"class":312}," cups.socket\n",[28,1894,1694],{"id":1694},[21,1896,1897,1898,1901],{},"在常规的流程中，通常会安装 ",[242,1899,1900],{},"ghostscript"," 来适应 Non-PDF 打印机，这台 HP Laser 103w 也不例外。",[290,1903,1905],{"className":292,"code":1904,"language":294,"meta":196,"style":196},"pacman -S ghostscript\n",[242,1906,1907],{"__ignoreMap":196},[298,1908,1909,1911,1913],{"class":300,"line":301},[298,1910,1808],{"class":304},[298,1912,1811],{"class":326},[298,1914,1915],{"class":312}," ghostscript\n",[21,1917,1918,1919,1922],{},"如果是 PostScript 打印机可能还需要安装 ",[242,1920,1921],{},"gsfonts"," 包，但我这里不需要。",[28,1924,1925],{"id":1925},"安装驱动",[21,1927,1928,1929,1932,1933,1936,1937,1942],{},"OpenPrinting 维护的 ",[242,1930,1931],{},"foomatic"," 为很大一部分打印机提供的驱动文件，Gutenprint 维护的 gutenprint 包也包含了佳能(Canon)、爱普生(Epson)、利盟(Lexmark)、索尼(Sony)、奥林巴斯(Olympus) 以及 PCL 打印机的驱动程序。如果你的打印机型号和我的不同，可以尝试安装这些组织维护的驱动。具体的安装方法同样可以在 ArchWiki 的 ",[48,1934,1794],{"href":1792,"rel":1935},[52],"找到。我上一台打印机 HP LaserJet 1020 所需的驱动是在 ",[48,1938,1941],{"href":1939,"rel":1940},"https://aur.archlinux.org/packages/foo2zjs-nightly",[52],"AUR/foo2zjs-nightly"," 中取得的。",[21,1944,1945,1946,1951,1952,1957,1958,1963],{},"但 HP Laser 103w 的驱动程序都不在这些软件包中，在 HP 的官网我们可以找到",[48,1947,1950],{"href":1948,"rel":1949},"https://support.hp.com/cn-zh/drivers/hp-laser-100-printer-series/model/2100769190",[52],"这个页面","，包含了 HP Laser 103w 的 Linux 驱动",[48,1953,1956],{"href":1954,"rel":1955},"https://ftp.hp.com/pub/softlib/software13/printers/CLP150/uld-hp_V1.00.39.12_00.15.tar.gz",[52],"下载地址","（已在 web.archive.org 存档）。通过下载下来的文件名，我们可以看见名字为 uld-hp，理论上可以直接通过压缩包内的安装脚本进行安装，但我通过这个名字顺藤摸瓜，找到了 ",[48,1959,1962],{"href":1960,"rel":1961},"https://aur.archlinux.org/packages/hpuld",[52],"AUR/hpuld"," 可以直接进行安装。",[290,1965,1967],{"className":292,"code":1966,"language":294,"meta":196,"style":196},"yay -S hpuld\n",[242,1968,1969],{"__ignoreMap":196},[298,1970,1971,1974,1976],{"class":300,"line":301},[298,1972,1973],{"class":304},"yay",[298,1975,1811],{"class":326},[298,1977,1978],{"class":312}," hpuld\n",[28,1980,1981],{"id":1981},"添加打印机",[21,1983,1984],{},"打开设置中的打印机设置后，选择添加打印机，CUPS 直接帮我们找到了局域网下的打印机，并自动开始搜索驱动程序（虽然没搜到）。",[21,1986,1987],{},[34,1988],{"alt":1989,"src":1990},"自动搜索","https://static.031130.xyz/uploads/2024/08/12/6693b6e81f9c4.webp",[21,1992,1993],{},"但如果没能自动检测到打印机，也可以使用手动选项中的 AppSocket/HP JetDirect 手动输入打印机的 ip 地址进行配置。",[21,1995,1996],{},"紧接着就到了选择驱动程序的阶段，厂商选择 HP，能够找到「HP Laser 10x Series」的选项，直接选择。",[21,1998,1999],{},[34,2000],{"alt":2001,"src":2002},"选择驱动","https://static.031130.xyz/uploads/2024/08/12/6693b76b9c1ca.webp",[21,2004,2005],{},"接着就可以完成打印机的添加。",[21,2007,2008],{},[34,2009],{"alt":2010,"src":2011},"完成添加","https://static.031130.xyz/uploads/2024/08/12/6693b7ba82d99.webp",[21,2013,2014],{},"随后便能正常打印文件啦！",[542,2016,2017],{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":196,"searchDepth":197,"depth":197,"links":2019},[2020,2021,2022,2023,2024],{"id":1773,"depth":197,"text":1773},{"id":1785,"depth":197,"text":1786},{"id":1694,"depth":197,"text":1694},{"id":1925,"depth":197,"text":1925},{"id":1981,"depth":197,"text":1981},{"title":2026,"date":2027,"path":2028,"tags":2029,"body":2034},"使用动态公网 ip + ddns 实现 rustdesk 的 ip 直连","2024-06-30 18:15:00","/2024/06/30/dynamic-public-ip-and-ddns-for-rustdesk",[212,2030,2031,2032,2033,557],"OpenSource Project","Shell Script","Rustdesk","Router",{"type":15,"value":2035,"toc":2172},[2036,2039,2042,2045,2049,2052,2055,2060,2063,2078,2126,2129,2132,2135,2138,2143,2146,2151,2158,2161,2164,2169],[21,2037,2038],{},"最近跟风整了一台 n100 的迷你主机装了个 Archlinux 当 HomeServer，搭配上了显卡欺骗器，平常一直远程使用，因此需要实现稳定的远程桌面连接。开源软件 Rustdesk 本身对 Linux 的适配尚可，可惜官方提供的服务器位于境外，且前一阵子因为诈骗相关的风波使得官方对连接做出了一些限制，应当使用自建服务器或者 ip 直连。",[21,2040,2041],{},"单从网络安全的角度出发，最佳实践应该是通过 wireguard 或者别的协议先接入局域网，然后使用局域网内的 ip 直连，这是最稳妥的，但我有点懒，而且我可能会在多个设备上都有控制 HomeServer 的需求，给所有设备配置 wireguard 是一件挺麻烦的事情，因此我决定放弃安全性，直接公网裸奔。",[21,2043,2044],{},"在学校宿舍的电信宽带提供了一个动态公网 ip，因此只需要设置好 ddns 和端口转发就可以拿到一个固定的 domain + port 提供给 rustdesk 直连。",[28,2046,2048],{"id":2047},"在被控端-rustdesk-允许直连访问","在被控端 Rustdesk 允许直连访问",[21,2050,2051],{},"在「设置」中的「安全」一栏选择「解锁安全设置」，拉到最下面的「安全」栏，勾选「允许 IP 直接访问」，并选择一个端口，范围在 1000 ~35535 之间且不要被本地的其他程序占用，Rustdesk 的默认值为 21118。",[21,2053,2054],{},"可以直接在局域网内的另一台设备进行测试，直接在 Rustdesk 中输入被控端的局域网 ip 和刚刚设置的端口，看看能不能访问得通，如果不行可能需要排查一下被控端访问墙设置的问题。",[21,2056,2057],{},[34,2058],{"alt":196,"src":2059},"https://static.031130.xyz/uploads/2024/08/12/66814701cf7ce.webp",[28,2061,2062],{"id":2062},"ddns",[21,2064,2065,2066,2071,2072,2077],{},"由于我的域名是交给 cloudflare 进行解析的，就找了个",[48,2067,2070],{"href":2068,"rel":2069},"https://github.com/yulewang/cloudflare-api-v4-ddns/",[52],"支持 cloudflare 的 ddns 脚本","，大致的部署过程可以参考 ",[48,2073,2076],{"href":2074,"rel":2075},"https://www.rclogs.com/2023/06/%25e8%2587%25aa%25e5%25bb%25ba%25e5%259f%25ba%25e4%25ba%258ecloudflare%25e7%259a%2584ddns",[52],"「自建基于Cloudflare的DDNS」","，不过我小改了一下脚本中获取公网 ipv4 的方式，直接 ssh 到路由器上获取当前的 ipv4 地址，不依赖外部的服务。",[290,2079,2081],{"className":292,"code":2080,"language":294,"meta":196,"style":196},"WAN_IP=`ssh -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa root@192.168.1.1 'ip -br a' | grep pppoe-wan | awk '{print $3}'`\n",[242,2082,2083],{"__ignoreMap":196},[298,2084,2085,2088,2091,2094,2097,2100,2103,2106,2109,2112,2115,2118,2120,2123],{"class":300,"line":301},[298,2086,2087],{"class":308},"WAN_IP",[298,2089,673],{"class":2090},"sknuh",[298,2092,2093],{"class":312},"`",[298,2095,2096],{"class":304},"ssh",[298,2098,2099],{"class":326}," -o",[298,2101,2102],{"class":312}," HostKeyAlgorithms=+ssh-rsa ",[298,2104,2105],{"class":326},"-o",[298,2107,2108],{"class":312}," PubkeyAcceptedKeyTypes=+ssh-rsa root@192.168.1.1 'ip -br a' ",[298,2110,2111],{"class":316},"|",[298,2113,2114],{"class":304}," grep",[298,2116,2117],{"class":312}," pppoe-wan ",[298,2119,2111],{"class":316},[298,2121,2122],{"class":304}," awk",[298,2124,2125],{"class":312}," '{print $3}'`\n",[21,2127,2128],{},"理论上来说，有不少路由器自身就支持不少域名解析商",[28,2130,2131],{"id":2131},"端口转发",[21,2133,2134],{},"端口转发需要在路由器的后台设置进行，我这里路由器使用的是 openwrt 系统，大部分路由器应该都支持这个操作。",[21,2136,2137],{},"在「网络」-「防火墙」",[21,2139,2140],{},[34,2141],{"alt":196,"src":2142},"https://static.031130.xyz/uploads/2024/08/12/6681635804e68.webp",[21,2144,2145],{},"选择「端口转发」",[21,2147,2148],{},[34,2149],{"alt":196,"src":2150},"https://static.031130.xyz/uploads/2024/08/12/66817e416534c.webp",[21,2152,2153,2154,2157],{},"新建端口转发，共享名随便填，外部端口是你最终要在主控端输入的端口，内部 IP 地址是被控机 的 IP 地址，可以用 ",[242,2155,2156],{},"ip -br a"," 命令看到，内部端口就是上文在 Rustdesk 指定的端口号。",[28,2159,2160],{"id":2160},"效果",[21,2162,2163],{},"可以直接在主控端口输入 ddns 的域名和端口号，实现远程控制",[21,2165,2166],{},[34,2167],{"alt":196,"src":2168},"https://static.031130.xyz/uploads/2024/08/12/66817f77aae7e.webp",[542,2170,2171],{},"html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sknuh, html code.shiki .sknuh{--shiki-default:#383A42;--shiki-dark:#56B6C2}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":196,"searchDepth":197,"depth":197,"links":2173},[2174,2175,2176,2177],{"id":2047,"depth":197,"text":2048},{"id":2062,"depth":197,"text":2062},{"id":2131,"depth":197,"text":2131},{"id":2160,"depth":197,"text":2160},{"title":2179,"date":2180,"path":2181,"tags":2182,"body":2185},"使用 Windows 虚拟机运行虚拟专用网客户端为 Linux 提供内网环境","2024-05-23 01:07:44","/2024/05/23/setup-network-environment-for-non-linux-vpn-client-with-virtual-machine",[212,2183,2184,12],"Windows","Virtual Machine",{"type":15,"value":2186,"toc":2285},[2187,2190,2193,2198,2201,2204,2207,2212,2215,2220,2229,2235,2238,2242,2245,2249,2258,2263,2266,2271,2274,2277,2282],[28,2188,2189],{"id":2189},"起因",[21,2191,2192],{},"最近在某家公司实习，公司内部的 git 部署在内网环境上，需要通过虚拟专用网的客户端（天翼云的 AONE）才能够正常访问。很可惜，客户端只提供了 Windows 和 MacOS 的版本。",[21,2194,2195],{},[34,2196],{"alt":196,"src":2197},"https://static.031130.xyz/uploads/2024/08/12/664e29866c1ab.webp",[21,2199,2200],{},"工作的代码总是要提交的，我也不想改变我的开发环境，又不希望在 Windows 上使用 git-for-windows 这个近乎简陋的工具进行代码提交，更别说还有一些别的内网服务接下来可能也会用到。所以最好的办法就是在 Linux 下也配置好能够访问内网的环境。",[28,2202,2203],{"id":2203},"理论",[21,2205,2206],{},"在 Windows 下使用 AONE 的网络拓扑是这样的",[21,2208,2209],{},[34,2210],{"alt":196,"src":2211},"https://static.031130.xyz/uploads/2024/08/12/664e2b93de6f9.webp",[21,2213,2214],{},"而我的方案则是使用 Windows 虚拟机开启 AONE，并在这台虚拟机上开一个 socks5 server 负责代理 Linux 宿主机需要打到内网服务的流量。网络拓扑如下",[21,2216,2217],{},[34,2218],{"alt":196,"src":2219},"https://static.031130.xyz/uploads/2024/08/12/664e2e1b0da09.webp",[21,2221,2222,2223,2228],{},"根据 bilibili 上",[48,2224,2227],{"href":2225,"rel":2226},"https://www.bilibili.com/video/BV11M4y1J7zP/",[52],"技术蛋老师的视频总结","，我们应该选择使用网卡桥接的网络配置，只有这个配置方式同时支持「宿主->虚拟机」和 「虚拟机->互联网」的网络。",[21,2230,2231],{},[34,2232],{"alt":2233,"src":2234},"图片来源: bilibili 技术蛋老师","https://static.031130.xyz/uploads/2024/08/12/664e2fbb4a36b.webp",[28,2236,2237],{"id":2237},"实操",[843,2239,2241],{"id":2240},"在-windows-虚拟机中开启虚拟专用网客户端","在 Windows 虚拟机中开启虚拟专用网客户端",[21,2243,2244],{},"开启 AONE，不做赘述",[843,2246,2248],{"id":2247},"开启-socks-server监听地址为-0000-或者设置为宿主机的-ip-地址","开启 socks server，监听地址为 0.0.0.0 （或者设置为宿主机的 IP 地址）",[21,2250,2251,2252,2257],{},"在「",[48,2253,2256],{"href":2254,"rel":2255},"https://imbearchild.cyou/",[52],"熊孩子(BearChild)","」的推荐下，我这里采用的是大名鼎鼎的二级射线（某 V 字开头的常见软件），直接从 GIthub Release 中下载 Windows X64 的压缩包，简单配置下即可，如果没有什么特殊需求的话可以只修改图中的两处配置。",[21,2259,2260],{},[34,2261],{"alt":196,"src":2262},"https://static.031130.xyz/uploads/2024/08/12/664e328cd83b3.webp",[21,2264,2265],{},"在终端中通过该软件的 run 命令即可开启服务",[21,2267,2268],{},[34,2269],{"alt":196,"src":2270},"https://static.031130.xyz/uploads/2024/08/12/664e32e6c350a.webp",[843,2272,2273],{"id":2273},"在宿主机进行测试",[21,2275,2276],{},"我这里使用的是 mzz2017 编写的 gg 命令进行代理，代理服务器的 ip 地址使用虚拟机下 ipconfig 命令获得的 ip 地址，端口号则对应上面配置文件中的 port 参数。",[21,2278,2279],{},[34,2280],{"alt":196,"src":2281},"https://static.031130.xyz/uploads/2024/08/12/664e33c3e8320.webp",[21,2283,2284],{},"这里 curl 百度得到了正确的相应，说明通道是通的，gg 也可以用于代理浏览器。经实测能够正常访问公司内网服务，不便在博客中展示。",{"title":196,"searchDepth":197,"depth":197,"links":2286},[2287,2288,2289],{"id":2189,"depth":197,"text":2189},{"id":2203,"depth":197,"text":2203},{"id":2237,"depth":197,"text":2237,"children":2290},[2291,2292,2293],{"id":2240,"depth":426,"text":2241},{"id":2247,"depth":426,"text":2248},{"id":2273,"depth":426,"text":2273},{"title":2295,"date":2296,"path":2297,"tags":2298,"body":2300},"以 Archlinux 中 makepkg 的方式打开 rpmbuild","2024-05-03 22:48:39","/2024/05/03/open-rpmbuild-in-the-way-of-archlinux-makepkg",[213,1597,2299,212],"RPM Package",{"type":15,"value":2301,"toc":2646},[2302,2305,2312,2377,2392,2399,2439,2446,2449,2452,2455,2468,2471,2486,2494,2497,2500,2503,2511,2514,2517,2520,2545,2552,2572,2579,2584,2591,2594,2601,2619,2622,2625,2632,2638,2640,2643],[21,2303,2304],{},"在 Redhat 系的发行版上打包软件的时候，会发现与 Archlinux 完全不同的思路。",[21,2306,2307,2308,2311],{},"Fedora 所代表的 Redhat 阵营一看就是那种宏大叙事的大型发行版，rpmbuild 在默认情况下会在 $HOME/rpmbuild 下的一系列文件夹进行构建过程。使用 ",[242,2309,2310],{},"rpmdev-setuptree"," 命令会创建好下面这些目录进行构建。",[290,2313,2315],{"className":292,"code":2314,"language":294,"meta":196,"style":196},"$ tree rpmbuild\nrpmbuild\n├── BUILD\n├── BUILDROOT\n├── RPMS\n├── SOURCES\n├── SPECS\n└── SRPMS\n",[242,2316,2317,2328,2333,2341,2348,2355,2362,2369],{"__ignoreMap":196},[298,2318,2319,2322,2325],{"class":300,"line":301},[298,2320,2321],{"class":304},"$",[298,2323,2324],{"class":312}," tree",[298,2326,2327],{"class":312}," rpmbuild\n",[298,2329,2330],{"class":300,"line":197},[298,2331,2332],{"class":304},"rpmbuild\n",[298,2334,2335,2338],{"class":300,"line":426},[298,2336,2337],{"class":304},"├──",[298,2339,2340],{"class":312}," BUILD\n",[298,2342,2343,2345],{"class":300,"line":441},[298,2344,2337],{"class":304},[298,2346,2347],{"class":312}," BUILDROOT\n",[298,2349,2350,2352],{"class":300,"line":455},[298,2351,2337],{"class":304},[298,2353,2354],{"class":312}," RPMS\n",[298,2356,2357,2359],{"class":300,"line":991},[298,2358,2337],{"class":304},[298,2360,2361],{"class":312}," SOURCES\n",[298,2363,2364,2366],{"class":300,"line":999},[298,2365,2337],{"class":304},[298,2367,2368],{"class":312}," SPECS\n",[298,2370,2371,2374],{"class":300,"line":1007},[298,2372,2373],{"class":304},"└──",[298,2375,2376],{"class":312}," SRPMS\n",[21,2378,2379,2380,2385,2386,2391],{},"Fedora 将所有的软件的构建都集中在一个 rpmbuild 目录中，BUILD 是编译时使用的，BUILDROOT 是最终安装目录，RPMS 是存放最终产物的，SOURCES 是存放源码等文件的，SPECS 是存放指导构建过程的 spec 文件的，而 SRPMS 是 RH 系为了 reproducibility 而单独将 spec 和源文件打包的产物。除了 rpmbuild 命令以外，Fedora 还有一套使用容器构建 rpm 包的 ",[48,2381,2384],{"href":2382,"rel":2383},"https://fedoraproject.org/wiki/Using_Mock_to_test_package_builds",[52],"mock"," 构建系统，与 Archlinux 的 ",[48,2387,2390],{"href":2388,"rel":2389},"https://archlinux.org/packages/extra/any/devtools/",[52],"devtools"," 类似，这里不作过多叙述。",[21,2393,2394,2395,2398],{},"反观 Arch 的构建目录，",[92,2396,2397],{},"就有一股浓浓的小作坊气味","。每个软件包自己拥有一个目录，指导构建过程的 PKGBUILD 文件、源文件和最终的产物都放在这个目录下，目录下的 src 和 pkg 文件夹分别对应 rpm 的 BUILD 和 BUILDROOT，前者是源文件被解压的目录和编译过程进行的目录，后者是软件最终的安装目录。",[290,2400,2402],{"className":292,"code":2401,"language":294,"meta":196,"style":196},"$ tree repo\nrepo\n├── src\n├── pkg\n└── PKGBUILD\n",[242,2403,2404,2413,2418,2425,2432],{"__ignoreMap":196},[298,2405,2406,2408,2410],{"class":300,"line":301},[298,2407,2321],{"class":304},[298,2409,2324],{"class":312},[298,2411,2412],{"class":312}," repo\n",[298,2414,2415],{"class":300,"line":197},[298,2416,2417],{"class":304},"repo\n",[298,2419,2420,2422],{"class":300,"line":426},[298,2421,2337],{"class":304},[298,2423,2424],{"class":312}," src\n",[298,2426,2427,2429],{"class":300,"line":441},[298,2428,2337],{"class":304},[298,2430,2431],{"class":312}," pkg\n",[298,2433,2434,2436],{"class":300,"line":455},[298,2435,2373],{"class":304},[298,2437,2438],{"class":312}," PKGBUILD\n",[21,2440,2441,2442,2445],{},"好巧不巧，我偏偏习惯这个小作坊气息的 arch build system，每个软件包独享一个自己的目录，",[92,2443,2444],{},"干净又卫生","。我自然也希望在 Fedora 下打 rpm 包的时候能够使用类似 Archlinux 下 makepkg 使用的目录结构。",[28,2447,2448],{"id":2448},"简单了解",[21,2450,2451],{},"在了解一系列 rpmbuild 中宏（macros）相关的知识后，我意识到这并非不可能。",[21,2453,2454],{},"使用如下的命令可以获取目前系统中定义的所有宏",[290,2456,2458],{"className":292,"code":2457,"language":294,"meta":196,"style":196},"rpm --showrc\n",[242,2459,2460],{"__ignoreMap":196},[298,2461,2462,2465],{"class":300,"line":301},[298,2463,2464],{"class":304},"rpm",[298,2466,2467],{"class":326}," --showrc\n",[21,2469,2470],{},"而可以使用如下命令检查某一个宏目前被定义成了什么值",[290,2472,2474],{"className":292,"code":2473,"language":294,"meta":196,"style":196},"rpm --eval \"%{_topdir}\"\n",[242,2475,2476],{"__ignoreMap":196},[298,2477,2478,2480,2483],{"class":300,"line":301},[298,2479,2464],{"class":304},[298,2481,2482],{"class":326}," --eval",[298,2484,2485],{"class":312}," \"%{_topdir}\"\n",[21,2487,2488,2489,2493],{},"更多关于宏的描述可以在 ",[48,2490,2491],{"href":2491,"rel":2492},"https://rpm-software-management.github.io/rpm/manual/macros.html",[52]," 获取",[28,2495,2496],{"id":2496},"修改路径",[21,2498,2499],{},"我们可以把定义成 $HOME/rpmbuild 的 %_topdir 重新定义成当前目录。",[21,2501,2502],{},"在 $HOME/.rpmmacros 中，去除顶部对 %_topdir 的定义，重新填上以下这些定义，即可初步完成我想要的效果。",[290,2504,2509],{"className":2505,"code":2507,"language":2508},[2506],"language-text","%_topdir    %(pwd)\n%_builddir %{_topdir}/src\n%_buildrootdir %{_topdir}/pkg\n%_rpmdir %{_topdir}\n%_sourcedir %{_topdir}\n%_specdir %{_topdir}\n%_srcrpmdir %{_topdir}\n","text",[242,2510,2507],{"__ignoreMap":196},[21,2512,2513],{},"现在在任何一个目录下执行 rpmbuild 相关命令，都会把 src 认为是构建目录，pkg 是最后安装目录，spec 文件和源文件早当前文件夹下，构建产物在当前文件夹下的 x86_64（或者别的架构名，这一层目录我还没有找到应该如何去掉）下。",[28,2515,2516],{"id":2516},"自动安装依赖文件",[21,2518,2519],{},"Fedora 中的 rpmbuild 不带有 makepkg -s 的功能，不能自动安装依赖。不过这也不意味着需要自己傻傻地去翻 spec 看看需要哪些构建依赖。可以使用 dnf 的 builddep 命令实现",[290,2521,2523],{"className":292,"code":2522,"language":294,"meta":196,"style":196},"sudo dnf builddep ./*.spec\n",[242,2524,2525],{"__ignoreMap":196},[298,2526,2527,2530,2533,2536,2539,2542],{"class":300,"line":301},[298,2528,2529],{"class":304},"sudo",[298,2531,2532],{"class":312}," dnf",[298,2534,2535],{"class":312}," builddep",[298,2537,2538],{"class":312}," ./",[298,2540,2541],{"class":888},"*",[298,2543,2544],{"class":312},".spec\n",[21,2546,2547,2548,2551],{},"不过 dnf 没有什么完成构建后自动卸载依赖的选项。",[92,2549,2550],{},"这些依赖装完以后就一辈子赖在你的电脑上了","，才不是，可以在构建完成后使用 dnf 自带的后悔药功能撤销上一条命令执行的效果。",[290,2553,2555],{"className":292,"code":2554,"language":294,"meta":196,"style":196},"sudo dnf history undo 0\n",[242,2556,2557],{"__ignoreMap":196},[298,2558,2559,2561,2563,2566,2569],{"class":300,"line":301},[298,2560,2529],{"class":304},[298,2562,2532],{"class":312},[298,2564,2565],{"class":312}," history",[298,2567,2568],{"class":312}," undo",[298,2570,2571],{"class":326}," 0\n",[21,2573,2574,2575,2578],{},"不过如果在 builddep 过程中，dnf 从 updates 源里更新了一些软件，那么它在 undo 时可能就没法获取更新前的软件版本。会有 ",[242,2576,2577],{},"Cannot find rpm nevra","  的提示",[21,2580,2581],{},[34,2582],{"alt":196,"src":2583},"https://static.031130.xyz/uploads/2024/08/12/6635018238ffa.webp",[21,2585,2586,2587,2590],{},"可以使用 ",[242,2588,2589],{},"--skip-broken"," 命令跳过那些没法找到老版本的软件，继续卸载其余的软件。",[28,2592,2593],{"id":2593},"自动下载源文件",[21,2595,2596,2597,2600],{},"很多使用 spec 中会在 source 里写上下载地址，而不是附上源码文件。rpm 似乎因为一些原因禁止了 rpmbuild 自动下载源文件的功能。可以通过在使用 rpmbuild 的时候带上 ",[242,2598,2599],{},"--undefine=_disable_source_fetch"," 取消定义这个行为，或者干脆在调用 rpmbuild 之前执行一遍",[290,2602,2604],{"className":292,"code":2603,"language":294,"meta":196,"style":196},"spectool -gR *.spec\n",[242,2605,2606],{"__ignoreMap":196},[298,2607,2608,2611,2614,2617],{"class":300,"line":301},[298,2609,2610],{"class":304},"spectool",[298,2612,2613],{"class":326}," -gR",[298,2615,2616],{"class":888}," *",[298,2618,2544],{"class":312},[21,2620,2621],{},"这样也能自动下载源文件。",[28,2623,2624],{"id":2624},"构建行为",[21,2626,2627,2628,2631],{},"makepkg 的默认构建行为就是只构建最终的安装包，Archlinux 中并没有 Fedora 那样打 source rpm 保证 reproduceability 的行为，这在 rpmbuild 中对应的是 ",[242,2629,2630],{},"-bb"," 选项。",[21,2633,1699,2634,2637],{},[242,2635,2636],{},"rpmbuild -bb *.spec"," 即可",[729,2639],{},[21,2641,2642],{},"上面介绍完了 rpmbuild 和 makepkg 的主要差异，应该可以自己搓一个 rpmbuild-wrapper 去实现以 makepkg 的方式打开 rpmbuild 的目标了，具体的 wrapper 脚本我就不放出来献丑了。",[542,2644,2645],{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .s2QsP, html code.shiki .s2QsP{--shiki-default:#E45649;--shiki-dark:#E5C07B}",{"title":196,"searchDepth":197,"depth":197,"links":2647},[2648,2649,2650,2651,2652],{"id":2448,"depth":197,"text":2448},{"id":2496,"depth":197,"text":2496},{"id":2516,"depth":197,"text":2516},{"id":2593,"depth":197,"text":2593},{"id":2624,"depth":197,"text":2624},{"title":2654,"date":2655,"path":2656,"tags":2657,"body":2659},"使用 Github Action 更新用于 rpm 打包的 spec 文件","2024-04-29 19:19:54","/2024/04/29/update-a-rpm-spec-by-github-action",[1597,2299,2658],"Github Action",{"type":15,"value":2660,"toc":2996},[2661,2668,2677,2680,2682,2685,2734,2737,2773,2776,2810,2813,2885,2888,2945,2948,2985,2993],[21,2662,2663,2664,2667],{},"有一些软件包的上游本身就是使用 Github Action 发版的，每次 commit 都会触发 Github Action 去构建并分发新版本，使用构建时的时间日期作为版本号。针对这种包，手动更新费时费力，而规范的 specfile 应当是更新 ",[242,2665,2666],{},"%changelog"," 的，因此应当是使用 rpmdev-bumpspec 命令。只不过 rpmdev-bumpspec 需要在 rpm 系发行版或者装有 rpm 系列依赖包的发行版下执行，这不是随随便便一个 Linux 环境就能运行的。",[21,2669,2670,2671,2676],{},"我找到了 ",[48,2672,2675],{"href":2673,"rel":2674},"https://github.com/netoarmando/rpmdev-bumpspec-action",[52],"netoarmando/rpmdev-bumpspec-action"," 这个 Github Action，它通过启动一个 Fedora 的 docker 实现了使用 rpmdev-bumpspec 的效果。虽然 release 中只有一个 2021 年构建的 v1 版本，~~但 Fedora 的版本高低不影响 rpmdev-bumpspec 的效果。~~但每次 Github Action 执行时都会使用 fedora:latest 的 docker 重新构建一遍，不用担心 fedora 版本过低。",[21,2678,2679],{},"于是我们便解决了最核心的问题——处理 spec 文件。接下来只要补充好头尾的步骤即可。",[729,2681],{},[21,2683,2684],{},"首先使用 actions/checkout 释出仓库内的文件",[290,2686,2690],{"className":2687,"code":2688,"language":2689,"meta":196,"style":196},"language-yaml shiki shiki-themes one-light one-dark-pro","- name: Checkout\n  uses: actions/checkout@v2\n  with:\n    fetch-depth: 0\n","yaml",[242,2691,2692,2706,2716,2724],{"__ignoreMap":196},[298,2693,2694,2697,2700,2703],{"class":300,"line":301},[298,2695,2696],{"class":316},"- ",[298,2698,2699],{"class":308},"name",[298,2701,2702],{"class":316},": ",[298,2704,2705],{"class":312},"Checkout\n",[298,2707,2708,2711,2713],{"class":300,"line":197},[298,2709,2710],{"class":308},"  uses",[298,2712,2702],{"class":316},[298,2714,2715],{"class":312},"actions/checkout@v2\n",[298,2717,2718,2721],{"class":300,"line":426},[298,2719,2720],{"class":308},"  with",[298,2722,2723],{"class":316},":\n",[298,2725,2726,2729,2731],{"class":300,"line":441},[298,2727,2728],{"class":308},"    fetch-depth",[298,2730,2702],{"class":316},[298,2732,2733],{"class":326},"0\n",[21,2735,2736],{},"通过 shell 命令获取仓库内 spec 文件的版本号，存入 $GITHUB_ENV",[290,2738,2740],{"className":2687,"code":2739,"language":2689,"meta":196,"style":196},"- name: Get Current Version\n  run: |\n    CURRENT_VERSION=`grep -E '^Version:' *.spec | awk '{print $2}'`\n    echo \"CURRENT_VERSION=$CURRENT_VERSION\" >> $GITHUB_ENV\n",[242,2741,2742,2753,2763,2768],{"__ignoreMap":196},[298,2743,2744,2746,2748,2750],{"class":300,"line":301},[298,2745,2696],{"class":316},[298,2747,2699],{"class":308},[298,2749,2702],{"class":316},[298,2751,2752],{"class":312},"Get Current Version\n",[298,2754,2755,2758,2760],{"class":300,"line":197},[298,2756,2757],{"class":308},"  run",[298,2759,2702],{"class":316},[298,2761,2762],{"class":869},"|\n",[298,2764,2765],{"class":300,"line":426},[298,2766,2767],{"class":312},"    CURRENT_VERSION=`grep -E '^Version:' *.spec | awk '{print $2}'`\n",[298,2769,2770],{"class":300,"line":441},[298,2771,2772],{"class":312},"    echo \"CURRENT_VERSION=$CURRENT_VERSION\" >> $GITHUB_ENV\n",[21,2774,2775],{},"通过 Github API 获取目标软件的最新版本号，存入 $GITHUB_ENV",[290,2777,2779],{"className":2687,"code":2778,"language":2689,"meta":196,"style":196},"- name: Export latest geoip version\n  run: |\n    NEW_VERSION=`curl -s https://api.github.com/repos/{user_name}/{repo_name}/releases/latest | jq -r '.tag_name' | sed 's/v//g'`\n    echo \"NEW_VERSION=$NEW_VERSION\" >> $GITHUB_ENV\n",[242,2780,2781,2792,2800,2805],{"__ignoreMap":196},[298,2782,2783,2785,2787,2789],{"class":300,"line":301},[298,2784,2696],{"class":316},[298,2786,2699],{"class":308},[298,2788,2702],{"class":316},[298,2790,2791],{"class":312},"Export latest geoip version\n",[298,2793,2794,2796,2798],{"class":300,"line":197},[298,2795,2757],{"class":308},[298,2797,2702],{"class":316},[298,2799,2762],{"class":869},[298,2801,2802],{"class":300,"line":426},[298,2803,2804],{"class":312},"    NEW_VERSION=`curl -s https://api.github.com/repos/{user_name}/{repo_name}/releases/latest | jq -r '.tag_name' | sed 's/v//g'`\n",[298,2806,2807],{"class":300,"line":441},[298,2808,2809],{"class":312},"    echo \"NEW_VERSION=$NEW_VERSION\" >> $GITHUB_ENV\n",[21,2811,2812],{},"当仓库内 spec 版本号与软件最新版本号不一致时，运行 rpmdev-bumpspec",[290,2814,2816],{"className":2687,"code":2815,"language":2689,"meta":196,"style":196},"- name: Run rpmdev-bumpspec action\n  if: ${{ env.CURRENT_VERSION != env.NEW_VERSION }}\n  uses: netoarmando/rpmdev-bumpspec-action@v1\n  with: \n    specfile: '{filename}'\n    new: ${{ env.NEW_VERSION }}\n    userstring: \"username \u003Cusername@mail.com>\"\n",[242,2817,2818,2829,2839,2848,2855,2865,2875],{"__ignoreMap":196},[298,2819,2820,2822,2824,2826],{"class":300,"line":301},[298,2821,2696],{"class":316},[298,2823,2699],{"class":308},[298,2825,2702],{"class":316},[298,2827,2828],{"class":312},"Run rpmdev-bumpspec action\n",[298,2830,2831,2834,2836],{"class":300,"line":197},[298,2832,2833],{"class":308},"  if",[298,2835,2702],{"class":316},[298,2837,2838],{"class":312},"${{ env.CURRENT_VERSION != env.NEW_VERSION }}\n",[298,2840,2841,2843,2845],{"class":300,"line":426},[298,2842,2710],{"class":308},[298,2844,2702],{"class":316},[298,2846,2847],{"class":312},"netoarmando/rpmdev-bumpspec-action@v1\n",[298,2849,2850,2852],{"class":300,"line":441},[298,2851,2720],{"class":308},[298,2853,2854],{"class":316},": \n",[298,2856,2857,2860,2862],{"class":300,"line":455},[298,2858,2859],{"class":308},"    specfile",[298,2861,2702],{"class":316},[298,2863,2864],{"class":312},"'{filename}'\n",[298,2866,2867,2870,2872],{"class":300,"line":991},[298,2868,2869],{"class":308},"    new",[298,2871,2702],{"class":316},[298,2873,2874],{"class":312},"${{ env.NEW_VERSION }}\n",[298,2876,2877,2880,2882],{"class":300,"line":999},[298,2878,2879],{"class":308},"    userstring",[298,2881,2702],{"class":316},[298,2883,2884],{"class":312},"\"username \u003Cusername@mail.com>\"\n",[21,2886,2887],{},"当仓库内 spec 版本号与软件最新版本号不一致时，保存更改，推入仓库。",[290,2889,2891],{"className":2687,"code":2890,"language":2689,"meta":196,"style":196},"- name: Commit changes\n  if: ${{ env.CURRENT_VERSION != env.NEW_VERSION }}\n  run: |\n    git config --local user.email \"zhullyb@outlook.com\"\n    git config --local user.name \"zhullyb\"\n    git add .\n    git commit -m \"upgpkg: v2ray-geoip@${{ env.NEW_VERSION }}\"\n    git push\n",[242,2892,2893,2904,2912,2920,2925,2930,2935,2940],{"__ignoreMap":196},[298,2894,2895,2897,2899,2901],{"class":300,"line":301},[298,2896,2696],{"class":316},[298,2898,2699],{"class":308},[298,2900,2702],{"class":316},[298,2902,2903],{"class":312},"Commit changes\n",[298,2905,2906,2908,2910],{"class":300,"line":197},[298,2907,2833],{"class":308},[298,2909,2702],{"class":316},[298,2911,2838],{"class":312},[298,2913,2914,2916,2918],{"class":300,"line":426},[298,2915,2757],{"class":308},[298,2917,2702],{"class":316},[298,2919,2762],{"class":869},[298,2921,2922],{"class":300,"line":441},[298,2923,2924],{"class":312},"    git config --local user.email \"zhullyb@outlook.com\"\n",[298,2926,2927],{"class":300,"line":455},[298,2928,2929],{"class":312},"    git config --local user.name \"zhullyb\"\n",[298,2931,2932],{"class":300,"line":991},[298,2933,2934],{"class":312},"    git add .\n",[298,2936,2937],{"class":300,"line":999},[298,2938,2939],{"class":312},"    git commit -m \"upgpkg: v2ray-geoip@${{ env.NEW_VERSION }}\"\n",[298,2941,2942],{"class":300,"line":1007},[298,2943,2944],{"class":312},"    git push\n",[21,2946,2947],{},"（可选）当仓库内 spec 版本号与软件最新版本号不一致时，通过 curl 语句触发 copr 的 webhook，让 copr 进行构建。",[290,2949,2951],{"className":2687,"code":2950,"language":2689,"meta":196,"style":196},"- name: trigger copr webhook\n  if: ${{ env.CURRENT_VERSION != env.NEW_VERSION }}\n  run: |\n    curl -X POST ${{ secrets.COPR_HOOK_URL }}v2ray-geoip/\n",[242,2952,2953,2964,2972,2980],{"__ignoreMap":196},[298,2954,2955,2957,2959,2961],{"class":300,"line":301},[298,2956,2696],{"class":316},[298,2958,2699],{"class":308},[298,2960,2702],{"class":316},[298,2962,2963],{"class":312},"trigger copr webhook\n",[298,2965,2966,2968,2970],{"class":300,"line":197},[298,2967,2833],{"class":308},[298,2969,2702],{"class":316},[298,2971,2838],{"class":312},[298,2973,2974,2976,2978],{"class":300,"line":426},[298,2975,2757],{"class":308},[298,2977,2702],{"class":316},[298,2979,2762],{"class":869},[298,2981,2982],{"class":300,"line":441},[298,2983,2984],{"class":312},"    curl -X POST ${{ secrets.COPR_HOOK_URL }}v2ray-geoip/\n",[21,2986,2987,2988],{},"最终的 yml 文件可以参考",[48,2989,2992],{"href":2990,"rel":2991},"https://github.com/v2rayA/v2raya-copr/blob/master/.github/workflows/upgpkg-v2ray-geoip.yml",[52],"这里",[542,2994,2995],{},"html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}",{"title":196,"searchDepth":197,"depth":197,"links":2997},[],127,1761739879746]