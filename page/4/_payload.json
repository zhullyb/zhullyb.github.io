[{"data":1,"prerenderedAt":2910},["ShallowReactive",2],{"randomIndex/page/4/":3,"index-page-4":4,"posts-total":2909},2,[5,205,556,601,1504,1672,1937,2089,2205,2564],{"title":6,"date":7,"path":8,"tags":9,"body":14},"自建图床小记一——图床架构与 DNS 解析","2024-08-12 17:07:11","/2024/08/12/new-picbed-based-on-cloudflare-and-upyun",[10,11,12,13],"CDN","图床","Network","Cloudflare",{"type":15,"value":16,"toc":195},"minimark",[17,24,27,31,38,41,44,55,69,73,76,79,102,108,112,118,121,133,139,142,148,153,156,160,166,169,175,183,186],[18,19,20],"blockquote",{},[21,22,23],"p",{},"一直以来，我使用的都是使用付费的第三方图床，可惜最近几年为了节省成本，境内的稳定性出现了一些问题。过去一年中光是我本人遇到的无法访问的情况就有三四次，其中两次持续时间超过 2 小时，甚至有网友特意来 at 我告知我博客使用的图床出问题了，还有两次是在我作品验收前 24 小时内出现，幸亏我及时切换了资源链接。此外，境外 CDN 也从原先的 Cloudflare 换掉了，目前海外的解析结果似乎只有一个在美国的节点，其余地区（尤其是日本香港新加坡等常用的落地地区）的访问质量不佳，Google 的 page speed test 甚至提示我的图片拖慢了网站加载速度。",[21,25,26],{},"基于上述种种原因，我开始选择自建图床，前前后后折腾了快一周后，新图床终于投入使用，目前我的博客已经完成了所有图片资源的切换。",[28,29,30],"h2",{"id":30},"架构设计",[21,32,33],{},[34,35],"img",{"alt":36,"src":37},"图床架构设计图","https://static.031130.xyz/uploads/2024/08/12/80402e4da4ef7.webp",[21,39,40],{},"这一套架构使用 Dnspod 免费版实现在境内外的解析分流，将境内的流量导向又拍云 CDN 为境内的访客提供服务，在境外使用量大管饱的 Cloudflare CDN 节省成本，为全球提供加速访问。",[28,42,43],{"id":43},"为什么是又拍云",[21,45,46,47,54],{},"如你所见，我的博客底部挂了又拍云的 logo。",[48,49,53],"a",{"href":50,"rel":51},"https://www.upyun.com/league",[52],"nofollow","又拍云联盟","为个人开发者提供了每个月 10GB 存储和 15GB 的免费 CDN 流量，在每年通过申请后会以 67 元无门槛代金券的形式发放到账号，也不用担心某个月超了一点点而付出额外的费用。",[21,56,57,58,63,64],{},"相比之下，七牛云虽然控制台的前端 UI 不错，但出了这种事情导致其在我心里印象分极差: 「",[48,59,62],{"href":60,"rel":61},"https://blog.hanlin.press/2024/07/From-Shanxi-to-Qiniu/",[52],"从山西联通到组播IP：七牛云的奇怪视角（附分析和后日谈）","」",[48,65,68],{"href":66,"rel":67},"https://archive.md/ONeu3",[52],"Archived Here",[28,70,72],{"id":71},"为什么是-cloudflare-r2","为什么是 Cloudflare R2",[21,74,75],{},"作为自己的图床，必须要保证稳定性，境内访问的稳定性可以先放到一边，最重要的就是保证源文件的稳定性。不同于在自己的 VPS 上存储图片的方案，使用 Cloudflare R2 作为储存不需要关注 VPS 到期以后的图片迁移问题。使用 Cloudflare R2 作为储存，免费用量对于个人站点来说绰绰有余，在 10GB 存储容量超出之前不用考虑别的问题，也不用担心资金支持不下去导致的麻烦。而不使用又拍云提供的 10GB 存储也可以节省这部分的代金券金额，让代金券尽可能多的抵扣境内 CDN 流量带来的费用。",[28,77,78],{"id":78},"需要的东西",[80,81,82,86,89,96],"ul",{},[83,84,85],"li",{},"两个或两个以上的域名（其中一个需要备案）",[83,87,88],{},"Cloudflare 所支持的境外支付方式（PayPal 账号 / Visa Card / Master Card），用于开通 Cloudflare R2 和 Cloudflare SaaS 接入",[83,90,91,95],{},[92,93,94],"del",{},"很多很多钱","（其实没有很多，又拍云联盟每年的 67 元抵用券在我这里看来完全是够用的）",[83,97,98,99],{},"聪明的大脑，能够快速敲击键盘的双手，",[92,100,101],{},"能够支持你熬夜的心脏",[21,103,104],{},[105,106,107],"em",{},"* 在这一套架构中引入了香港 VPS 进行反向代理，一来是防止国内 CDN 与 Cloudflare 的网络连接质量过差导致的回源失败，二来也是方便我在没有国际联网的情况下进行图片的上传，但如果没有条件其实是可以去掉的。",[28,109,111],{"id":110},"dns-解析","DNS 解析",[21,113,114],{},[34,115],{"alt":116,"src":117},"DNS 解析方案 1","https://static.031130.xyz/uploads/2024/08/13/03d8243b67593.webp",[21,119,120],{},"如上图，将图床域名 NS 接入 DnsPod，工具人域名 NS 接入 Cloudflare 即可实现境内外分流的效果。",[122,123,124,127,130],"ol",{},[83,125,126],{},"图床访问域名在境外 CNAME 解析到工具人域名",[83,128,129],{},"图床访问域名在境内 CNAME 解析到境内 CDN 服务商",[83,131,132],{},"工具人域名在 Cloudflare 上解析到任何站点都行，只需点亮解析时 Cloudflare CDN 代理按钮即可生效。",[21,134,135],{},[34,136],{"alt":137,"src":138},"代理按钮","https://static.031130.xyz/uploads/2024/08/13/a0387d2919850.webp",[21,140,141],{},"但如果你的备案域名已经通过 NS 接入了 Cloudflare，可以采用下面这套架构。",[21,143,144],{},[34,145],{"alt":146,"src":147},"DNS 解析方案 2","https://static.031130.xyz/uploads/2024/08/13/d03d7b3155514.webp",[21,149,150],{},[105,151,152],{},"* 解析方案 2 中的图床访问域名和工具人域名可以是同属于同一二级域名的不同子域名",[21,154,155],{},"这种方案要多一步，把图床访问域名 CNAME 解析到用于分流的工具人域名。",[28,157,159],{"id":158},"cloudflare-saas-接入","Cloudflare SaaS 接入",[21,161,162],{},[34,163],{"alt":164,"src":165},"SaaS 接入","https://static.031130.xyz/uploads/2024/08/13/eb7186205b380.webp",[21,167,168],{},"SaaS 接入大概就是如图所示，此外还要配置 Cloudflare Workers 的域名访问",[21,170,171],{},[34,172],{"alt":173,"src":174},"Cloudflare Workers 域名访问","https://static.031130.xyz/uploads/2024/08/13/782a665cabe05.webp",[21,176,177,178,182],{},"这样就能保证在境外访问图床域名时将请求打到 Cloudflare Workers 上了，关于使用 Cloudflare Workers 构建图床 Restful API 相关的内容我放在",[48,179,181],{"href":180},"/2024/08/13/build-restful-api-for-cloudflare-r2-with-cloudflare-workers/","下一篇博客","讲。",[28,184,185],{"id":185},"参见",[80,187,188],{},[83,189,190],{},[48,191,194],{"href":192,"rel":193},"https://www.eallion.com/cdn-cname-cloudflare/",[52],"图床 CDN CNAME 接入 Cloudflare SaaS 实现分流",{"title":196,"searchDepth":3,"depth":3,"links":197},"",[198,199,200,201,202,203,204],{"id":30,"depth":3,"text":30},{"id":43,"depth":3,"text":43},{"id":71,"depth":3,"text":72},{"id":78,"depth":3,"text":78},{"id":110,"depth":3,"text":111},{"id":158,"depth":3,"text":159},{"id":185,"depth":3,"text":185},{"title":206,"date":207,"path":208,"tags":209,"body":214},"在 Linux 下使用 mitmproxy 抓取安卓手机上的 HTTPS 流量","2024-07-31 16:02:28","/2024/07/31/capture-android-https-traffic-on-linux-with-mitmproxy",[210,12,211,212,213],"mitmproxy","Linux","Archlinux","Android",{"type":15,"value":215,"toc":550},[216,219,222,260,271,274,277,284,288,352,358,361,392,396,399,473,481,484,489,492,495,500,503,508,510,546],[21,217,218],{},"纵使安卓下有小黄鸟 HttpCanary 这种抓包神器，但手机一块 6 英寸的小屏实在是不方便分析流量情况，还得是 PC 的屏幕更大一些，处理起流量信息来更得心应手一些。",[21,220,221],{},"把话说在前面，目前的安卓抓包有不小的限制",[80,223,224,227],{},[83,225,226],{},"Android 7 以下的版本: 直接以普通用户的权限安装 ssl 证书即可被信任",[83,228,229,230],{},"Android 7 以上的版本:\n",[80,231,232,245],{},[83,233,234,235,239,240,244],{},"安全性较低的应用: ",[236,237,238],"strong",{},"需要使用 root 权限","将证书移动至 ",[241,242,243],"code",{},"/system/etc/security/cacerts","使证书被系统信任",[83,246,247,248,253,254,259],{},"安全性较高的应用（比如微信 7.0 以上的版本）: 在满足上一条条件的情况下，需要阻止第三方应用使用自带的 ssl 证书信任范围（绕过 SSL Pinning）。通常情况下需要额外的手段对目标应用进行篡改，比如使用 ",[48,249,252],{"href":250,"rel":251},"https://github.com/Fuzion24/JustTrustMe",[52],"justTrustMe"," 这个 xposed 模块，或者 ",[48,255,258],{"href":256,"rel":257},"https://github.com/frida/frida/",[52],"frida","。",[18,261,262],{},[21,263,264,265,270],{},"除此之外，Linux 版本 >= 5.5 的安卓设备也可以使用 ",[48,266,269],{"href":267,"rel":268},"https://github.com/gojue/ecapture",[52],"eCapture"," 这款基于 eBPF Linux 内核模块实现的抓包软件，算是种奇技淫巧。",[21,272,273],{},"本文只讨论 Android 7 以上版本中安全性较低的应用，因为我当前的抓包目标局限于一款安全性不高的外包软件。",[28,275,276],{"id":276},"基本操作",[21,278,279,280,63],{},"见「",[48,281,283],{"href":282},"/2024/02/29/capture-https-traffic-on-linux-with-mitmproxy/","在 Linux 下使用 mitmproxy 抓取 HTTPS 流量",[28,285,287],{"id":286},"安装-ssl-证书","安装 ssl 证书",[289,290,294],"pre",{"className":291,"code":292,"language":293,"meta":196,"style":196},"language-bash shiki shiki-themes github-light github-dark","cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem $(openssl x509 -subject_hash_old -in $HOME/.mitmproxy/mitmproxy-ca-cert.pem | head -n 1).0\n","bash",[241,295,296],{"__ignoreMap":196},[297,298,301,305,309,313,316,319,322,326,329,331,333,337,340,343,346,349],"span",{"class":299,"line":300},"line",1,[297,302,304],{"class":303},"sScJk","cp",[297,306,308],{"class":307},"sVt8B"," $HOME",[297,310,312],{"class":311},"sZZnC","/.mitmproxy/mitmproxy-ca-cert.pem",[297,314,315],{"class":307}," $(",[297,317,318],{"class":303},"openssl",[297,320,321],{"class":311}," x509",[297,323,325],{"class":324},"sj4cs"," -subject_hash_old",[297,327,328],{"class":324}," -in",[297,330,308],{"class":307},[297,332,312],{"class":311},[297,334,336],{"class":335},"szBVR"," |",[297,338,339],{"class":303}," head",[297,341,342],{"class":324}," -n",[297,344,345],{"class":324}," 1",[297,347,348],{"class":307},")",[297,350,351],{"class":311},".0\n",[21,353,354,355,357],{},"此时我们就可以在家目录下找到一个以 .0 结尾的证书文件，我们的目标是将其放到手机的 ",[241,356,243],{}," 路径下。",[21,359,360],{},"对于一些出厂安卓版本较低、system 分区采用可变文件系统的手机，我们可以很轻松的使用带有 root 权限的文件管理器将证书文件移动到对应的目录（我这里就是）；而对于出厂版本较高的手机，system 分区可能是不可写的，需要采用额外的奇技淫巧。",[18,362,363,366,369,372,375,378],{},[21,364,365],{},"1、通过 ADB 将 HTTP Toolkit CA 证书推送到设备上。",[21,367,368],{},"2、从 /system/etc/security/cacerts/ 中复制所有系统证书到临时目录。",[21,370,371],{},"3、在 /system/etc/security/cacerts/ 上面挂载一个 tmpfs 内存文件系统。这实际上将一个可写的全新空文件系统放在了 /system 的一小部分上面。 将复制的系统证书移回到该挂载点。",[21,373,374],{},"4、将 HTTP Toolkit CA 证书也移动到该挂载点。",[21,376,377],{},"5、更新临时挂载点中所有文件的权限为 644，并将系统文件的 SELinux 标签设置为 system_file，以使其看起来像是合法的 Android 系统文件。",[21,379,380,381,386,387,63],{},"——",[48,382,385],{"href":383,"rel":384},"http://91fans.com.cn/post/certificate/",[52],"《安卓高版本安装系统证书 HTTPS 抓包 - 终极解决方案》"," 「",[48,388,391],{"href":389,"rel":390},"http://web.archive.org/web/20240801045307/http://91fans.com.cn/post/certificate/#gsc.tab=0",[52],"archived here",[28,393,395],{"id":394},"让被抓包的应用流量经过-mitm-代理服务器","让被抓包的应用流量经过 mitm 代理服务器",[21,397,398],{},"mitmproxy 默认会在 pc 端的 8080 端口开启一个 http 代理服务器，我们要做的就是想办法让待抓包的应用流量被这个 http 代理服务器所代理。",[289,400,402],{"className":291,"code":401,"language":293,"meta":196,"style":196},"[zhullyb@Archlinux ~]$ ip -br a\nlo               UNKNOWN        127.0.0.1/8 ::1/128\nenp0s31f6        UP             172.16.0.255/25 fe80::2df9:2927:cd44:65c/64\nwlp0s20f3        UP             192.168.20.212/24 fe80::a6bc:919:281e:dcab/64\ndocker0          DOWN           172.17.0.1/16 fe80::42:d1ff:febe:d513/64\n",[241,403,404,415,429,444,458],{"__ignoreMap":196},[297,405,406,409,412],{"class":299,"line":300},[297,407,408],{"class":307},"[zhullyb@Archlinux ",[297,410,411],{"class":335},"~",[297,413,414],{"class":307},"]$ ip -br a\n",[297,416,417,420,423,426],{"class":299,"line":3},[297,418,419],{"class":303},"lo",[297,421,422],{"class":311},"               UNKNOWN",[297,424,425],{"class":311},"        127.0.0.1/8",[297,427,428],{"class":311}," ::1/128\n",[297,430,432,435,438,441],{"class":299,"line":431},3,[297,433,434],{"class":303},"enp0s31f6",[297,436,437],{"class":311},"        UP",[297,439,440],{"class":311},"             172.16.0.255/25",[297,442,443],{"class":311}," fe80::2df9:2927:cd44:65c/64\n",[297,445,447,450,452,455],{"class":299,"line":446},4,[297,448,449],{"class":303},"wlp0s20f3",[297,451,437],{"class":311},[297,453,454],{"class":311},"             192.168.20.212/24",[297,456,457],{"class":311}," fe80::a6bc:919:281e:dcab/64\n",[297,459,461,464,467,470],{"class":299,"line":460},5,[297,462,463],{"class":303},"docker0",[297,465,466],{"class":311},"          DOWN",[297,468,469],{"class":311},"           172.17.0.1/16",[297,471,472],{"class":311}," fe80::42:d1ff:febe:d513/64\n",[21,474,475,476,480],{},"在这里我们能看到本机的无线网卡地址是 192.168.20.212，所以 http 代理服务器的地址就是 ",[48,477,478],{"href":478,"rel":479},"http://192.168.20.212:8080",[52]," 。（如果你的有线网卡和手机在同一局域网下，当然也可以用有线网卡的 ip 地址）",[21,482,483],{},"我们当然可以在安卓手机的 WIFI 连接页面填入 http 代理地址。",[21,485,486],{},[34,487],{"alt":196,"src":488},"https://static.031130.xyz/uploads/2024/08/12/66ab548080ed6.webp",[21,490,491],{},"但这对我来说似乎并不是一个好主意：一来并不是所有的应用都会默认使用 http 代理服务器，二来这回导致抓包目标不明确，非目标应用的流量也会经过代理服务器。",[21,493,494],{},"我选择了 Nekobox 这个常见的代理软件，它支持 http 代理服务器，且允许分应用代理。",[21,496,497],{},[34,498],{"alt":196,"src":499},"https://static.031130.xyz/uploads/2024/08/12/66ab54f08dfd6.webp",[21,501,502],{},"可以看到能正常抓取 https 流量",[21,504,505],{},[34,506],{"alt":196,"src":507},"https://static.031130.xyz/uploads/2024/08/12/66ab5970a6ac7.webp",[28,509,185],{"id":185},[80,511,512,519,526,533,539],{},[83,513,514],{},[48,515,518],{"href":516,"rel":517},"https://ibukifalling.github.io/2023/06/07/Android-app-packet-capture/",[52],"安卓应用防抓包机制及一些绕过",[83,520,521],{},[48,522,525],{"href":523,"rel":524},"https://chorer.github.io/2022/05/19/A-%E5%AE%89%E5%8D%937.0%E7%B3%BB%E7%BB%9F%E6%8A%93%E5%8C%85%E6%96%B9%E6%A1%88/",[52],"安卓7.0+系统抓包方案",[83,527,528],{},[48,529,532],{"href":530,"rel":531},"https://www.cnblogs.com/snad/p/17449454.html",[52],"frida抓包",[83,534,535],{},[48,536,538],{"href":267,"rel":537},[52],"gojue/ecapture",[83,540,541],{},[48,542,545],{"href":543,"rel":544},"http://91fans.com.cn/post/certificate/#gsc.tab=0",[52],"安卓高版本安装系统证书 HTTPS 抓包 - 终极解决方案",[547,548,549],"style",{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":196,"searchDepth":3,"depth":3,"links":551},[552,553,554,555],{"id":276,"depth":3,"text":276},{"id":286,"depth":3,"text":287},{"id":394,"depth":3,"text":395},{"id":185,"depth":3,"text":185},{"title":557,"date":558,"path":559,"tags":560,"body":564},"为中柏 N100 小主机开启来电自启","2024-07-22 23:31:51","/2024/07/22/enable-ac-power-loss-for-jumper-n100",[561,562,563],"Hardware","HomeServer","笔记",{"type":15,"value":565,"toc":599},[566,569,572,575,580,583,594],[21,567,568],{},"因为收到通知，寝室过两天要断电 20 分钟，所以需要打开 N100 家里云的来电自启功能。",[21,570,571],{},"正常关机短暂等待数秒后，开机，狂按 Delete 键进入 BIOS。",[21,573,574],{},"在 Advanced 选项中选择「OEM Configuration」",[21,576,577],{},[34,578],{"alt":196,"src":579},"https://static.031130.xyz/uploads/2024/08/12/669e7e6ae10a4.webp",[21,581,582],{},"可以在最后一行「AC Power Loss」中选择模式。",[80,584,585,588,591],{},[83,586,587],{},"Power Off: 关闭相关功能。",[83,589,590],{},"Power On: 传统意义上的来电自启，只要接通电源就会自启动。",[83,592,593],{},"Last State: 只有在上次关机是意外断电导致时，接通电源才会自启动。",[21,595,596],{},[34,597],{"alt":196,"src":598},"https://static.031130.xyz/uploads/2024/08/12/669e7e5ab7ad6.webp",{"title":196,"searchDepth":3,"depth":3,"links":600},[],{"title":602,"date":603,"path":604,"tags":605,"body":609},"我的博客被完整地反向代理，并自动翻译成了繁体中文","2024-07-18 11:22:37","/2024/07/18/my-blog-is-completely-proxied-and-translated-into-traditional-chinese",[606,12,13,607,608],"Blog","waline","umami",{"type":15,"value":610,"toc":1494},[611,615,618,621,627,636,639,645,648,654,712,718,721,728,731,734,737,742,753,760,765,768,773,776,781,787,790,793,799,801,808,838,842,847,858,1119,1123,1126,1130,1138,1428,1431,1437,1439,1442,1448,1455,1459,1466,1471,1480,1483,1486,1491],[28,612,614],{"id":613},"_20240820更新","2024.08.20更新",[21,616,617],{},"我将境外的 Github Pages 解析停了，所有流量全部指向我的 HK 的 vps。",[21,619,620],{},"访问对方站点 /?about/ 时，在我服务器 /about/ 收到了一个奇怪的请求，访问对方别的路径时也会在我服务器的对应路径收到请求，UA 伪装成了 Google 家的爬虫:",[21,622,623],{},[34,624],{"alt":625,"src":626},"caddy 日志","https://static.031130.xyz/uploads/2024/08/20/82e8dc389f081.webp",[21,628,629,630,635],{},"（关于为什么有 Mozilla 字段，可以参见 ",[48,631,634],{"href":632,"rel":633},"https://imbearchild.cyou/archives/2024/04/yes-browser-are-faking-to-be-firefox/",[52],"《是的，所有现代浏览器都假装自己是火狐》","）",[21,637,638],{},"这个 ip 的归属地是新加坡 Cogent，合理怀疑是对方的源站 IP（也有可能只是对方用于请求的爬虫 ip）。直接通过 ip 访问对方站点，发现是 lnmp 的安装成功提示:",[21,640,641],{},[34,642],{"alt":643,"src":644},"ip 访问","https://static.031130.xyz/uploads/2024/08/20/4d181fd0bcc11.webp",[21,646,647],{},"我注意到对方站点在 html 结尾处加了如下字段",[21,649,650],{},[34,651],{"alt":652,"src":653},"这里是直接请求的 archive 存档，所以有 archive 前缀","https://static.031130.xyz/uploads/2024/08/20/057a829ec9e4a.webp",[289,655,659],{"className":656,"code":657,"language":658,"meta":196,"style":196},"language-html shiki shiki-themes github-light github-dark","\u003C!-- freevslinks -->\u003Cdiv style=\"display:none\">\u003Ca href=\"http://www.xxfseo.com/?time=1721267439\">xxfseo.com\u003C/a>\u003C/div>\u003C!-- /freevslinks -->\n","html",[241,660,661],{"__ignoreMap":196},[297,662,663,667,670,674,677,680,683,686,688,691,693,696,699,701,704,706,709],{"class":299,"line":300},[297,664,666],{"class":665},"sJ8bj","\u003C!-- freevslinks -->",[297,668,669],{"class":307},"\u003C",[297,671,673],{"class":672},"s9eBZ","div",[297,675,676],{"class":303}," style",[297,678,679],{"class":307},"=",[297,681,682],{"class":311},"\"display:none\"",[297,684,685],{"class":307},">\u003C",[297,687,48],{"class":672},[297,689,690],{"class":303}," href",[297,692,679],{"class":307},[297,694,695],{"class":311},"\"http://www.xxfseo.com/?time=1721267439\"",[297,697,698],{"class":307},">xxfseo.com\u003C/",[297,700,48],{"class":672},[297,702,703],{"class":307},">\u003C/",[297,705,673],{"class":672},[297,707,708],{"class":307},">",[297,710,711],{"class":665},"\u003C!-- /freevslinks -->\n",[21,713,714],{},[34,715],{"alt":716,"src":717},"官网","https://static.031130.xyz/uploads/2024/08/20/b0449632623b2.webp",[21,719,720],{},"似乎是专业产生互联网垃圾的组织。",[21,722,723,724,727],{},"我目前已经屏蔽了来自 ",[241,725,726],{},"154.39.149.128"," 这个 ip 的访问请求，对方的站点暂时性崩盘，以后可能会换用别的 ip 来爬也说不准，先到此为止吧。",[729,730],"hr",{},[28,732,733],{"id":733},"现象",[21,735,736],{},"今早打开我的流量统计网站，发现我的博客有一个神奇的 referer",[21,738,739],{},[34,740],{"alt":196,"src":741},"https://static.031130.xyz/uploads/2024/08/12/66989d79e740c.webp",[21,743,744,745,750],{},"顶着我博客用的 favicon，但竟然不是我的域名。点进去一看，发现我的博客被翻译成了繁体中文，而且语句读上去也不是很通畅。",[48,746,749],{"href":747,"rel":748},"https://web.archive.org/web/20240718015038/https://theodorelobas.com/",[52],"Archived here.",[34,751],{"alt":196,"src":752},"https://static.031130.xyz/uploads/2024/08/12/66ab4ffa4eda3.webp",[21,754,755,756],{},"再打开关于页一看，把我的博客域名给干掉了，只留下一个反代域名。",[48,757,749],{"href":758,"rel":759},"http://web.archive.org/web/20240718034705/https://theodorelobas.com/?about/",[52],[21,761,762],{},[34,763],{"alt":196,"src":764},"https://static.031130.xyz/uploads/2024/08/12/66989f7f73b90.webp",[21,766,767],{},"随机打开一个幸运页面，使用 F12 控制台查看流量情况，发现 umami 统计和 waline 评论都用的我个人部署的",[21,769,770],{},[34,771],{"alt":196,"src":772},"https://static.031130.xyz/uploads/2024/08/12/6698a0bf39f8d.webp",[21,774,775],{},"查询 ip 归属地，是老朋友 Cloudflare 泛播",[21,777,778],{},[34,779],{"alt":196,"src":780},"https://static.031130.xyz/uploads/2024/08/12/6698a101845a2.webp",[21,782,783],{},[34,784],{"alt":785,"src":786},"url 上不明所以的问号","https://static.031130.xyz/uploads/2024/08/12/6698a2dd3d78a.webp",[21,788,789],{},"结合 url 上不明所以的问号，推测应该是 cloudflare workers 反向代理 + 调用翻译 api + 关键词替换。我小小更新了某个页面，发现对方站点也立马更新了，基本可以确定是反向代理。",[21,791,792],{},"whois 查询没有获得任何有用信息，一眼望去全是隐私保护。",[21,794,795],{},[34,796],{"alt":797,"src":798},"whois 信息","https://static.031130.xyz/uploads/2024/08/12/6698a2deaa9d0.webp",[729,800],{},[21,802,803,804,807],{},"事先声明，我的博客采用",[241,805,806],{},"CC BY-NC-SA 4.0","，我个人是非常欢迎任何人注明出处的情况下搬运甚至翻译我的文章的，甚至允许搬运到 csdn——只要你不开收费访问。但这种反代行为我是非常抵触的。",[122,809,810,820,826,832,835],{},[83,811,812,813,815,816],{},"文章被翻译成了繁体中文，但没有注明是翻译稿，直接把我本人的网名用繁体写了上去，这并不符合 ",[241,814,806],{}," 的要求。",[34,817],{"alt":818,"src":819},"如果修改了原文需要做出说明","https://static.031130.xyz/uploads/2024/08/12/669929695144b.webp",[83,821,822,823],{},"翻译质量很差，就连机翻都不应有这种奇怪的同义词替换，问了问熟悉繁中的朋友说是港台也没有这种用法，像是故意洗稿。",[34,824],{"alt":196,"src":825},"https://static.031130.xyz/uploads/2024/08/12/6699bdbab5f0a.webp",[83,827,828,829],{},"反向代理了我的整个网站，但把我关于页上的博客链接给去掉了，我不认为这是善意的反代行为。",[48,830,749],{"href":758,"rel":831},[52],[83,833,834],{},"仍然在使用我的 waline 评论和 umami 统计。",[83,836,837],{},"没有给我任何事先的邮件说明或者评论留言，whois 开隐私保护的情况下，我找不到任何方法去联系这位域名的持有者。",[28,839,841],{"id":840},"怎么办","怎么办？",[843,844,846],"h3",{"id":845},"植入-js-进行跳转","植入 js 进行跳转",[21,848,849,850,853,854,857],{},"因为对方同步的及时性很强，高度怀疑是 cloudflare workers 反向代理，且评论和流量统计都直接原模原样用的是我的 js，我就注入一个 js 检测 host，如果不是我的域名或者本地调试时使用的 ",[241,851,852],{},"127.0.0.1"," or ",[241,855,856],{},"localhost","，则清空页面内容，给出文字提示，五秒后跳转到我的博客。代码如下:",[289,859,863],{"className":860,"code":861,"language":862,"meta":196,"style":196},"language-javascript shiki shiki-themes github-light github-dark","const host = window.location.host\nif (host !== 'zhul.in' && ! host.startsWith('localhost') && ! host.startsWith('127.0.0.1')) {\n    document.body.innerHTML = [\n        '\u003Cdiv style=\"margin: auto;\">',\n        '\u003Ch1>当前页面并非本文作者的主页，将在五秒后跳转。\u003C/h1>',\n        '\u003Cbr />',\n        '\u003Ch1>请此站点持有者联系我: zhullyb@outlook.com\u003C/h1>',\n        '\u003C/div>',\n    ].join('')\n    document.body.style = [\n        'background-color: white;',\n        'color: black;',\n        'text-align: center;',\n        'font-size: 50px;',\n        'width: 100vw;',\n        'height: 100vh;',\n        'display: flex;',\n    ].join('')\n    setTimeout(() => {\n        window.location.href = 'https://zhul.in'\n    }, 5000)\n}\n","javascript",[241,864,865,879,931,941,949,956,964,972,980,997,1007,1015,1023,1031,1039,1047,1055,1063,1076,1091,1102,1113],{"__ignoreMap":196},[297,866,867,870,873,876],{"class":299,"line":300},[297,868,869],{"class":335},"const",[297,871,872],{"class":324}," host",[297,874,875],{"class":335}," =",[297,877,878],{"class":307}," window.location.host\n",[297,880,881,884,887,890,893,896,899,902,905,908,911,914,917,919,921,923,925,928],{"class":299,"line":3},[297,882,883],{"class":335},"if",[297,885,886],{"class":307}," (host ",[297,888,889],{"class":335},"!==",[297,891,892],{"class":311}," 'zhul.in'",[297,894,895],{"class":335}," &&",[297,897,898],{"class":335}," !",[297,900,901],{"class":307}," host.",[297,903,904],{"class":303},"startsWith",[297,906,907],{"class":307},"(",[297,909,910],{"class":311},"'localhost'",[297,912,913],{"class":307},") ",[297,915,916],{"class":335},"&&",[297,918,898],{"class":335},[297,920,901],{"class":307},[297,922,904],{"class":303},[297,924,907],{"class":307},[297,926,927],{"class":311},"'127.0.0.1'",[297,929,930],{"class":307},")) {\n",[297,932,933,936,938],{"class":299,"line":431},[297,934,935],{"class":307},"    document.body.innerHTML ",[297,937,679],{"class":335},[297,939,940],{"class":307}," [\n",[297,942,943,946],{"class":299,"line":446},[297,944,945],{"class":311},"        '\u003Cdiv style=\"margin: auto;\">'",[297,947,948],{"class":307},",\n",[297,950,951,954],{"class":299,"line":460},[297,952,953],{"class":311},"        '\u003Ch1>当前页面并非本文作者的主页，将在五秒后跳转。\u003C/h1>'",[297,955,948],{"class":307},[297,957,959,962],{"class":299,"line":958},6,[297,960,961],{"class":311},"        '\u003Cbr />'",[297,963,948],{"class":307},[297,965,967,970],{"class":299,"line":966},7,[297,968,969],{"class":311},"        '\u003Ch1>请此站点持有者联系我: zhullyb@outlook.com\u003C/h1>'",[297,971,948],{"class":307},[297,973,975,978],{"class":299,"line":974},8,[297,976,977],{"class":311},"        '\u003C/div>'",[297,979,948],{"class":307},[297,981,983,986,989,991,994],{"class":299,"line":982},9,[297,984,985],{"class":307},"    ].",[297,987,988],{"class":303},"join",[297,990,907],{"class":307},[297,992,993],{"class":311},"''",[297,995,996],{"class":307},")\n",[297,998,1000,1003,1005],{"class":299,"line":999},10,[297,1001,1002],{"class":307},"    document.body.style ",[297,1004,679],{"class":335},[297,1006,940],{"class":307},[297,1008,1010,1013],{"class":299,"line":1009},11,[297,1011,1012],{"class":311},"        'background-color: white;'",[297,1014,948],{"class":307},[297,1016,1018,1021],{"class":299,"line":1017},12,[297,1019,1020],{"class":311},"        'color: black;'",[297,1022,948],{"class":307},[297,1024,1026,1029],{"class":299,"line":1025},13,[297,1027,1028],{"class":311},"        'text-align: center;'",[297,1030,948],{"class":307},[297,1032,1034,1037],{"class":299,"line":1033},14,[297,1035,1036],{"class":311},"        'font-size: 50px;'",[297,1038,948],{"class":307},[297,1040,1042,1045],{"class":299,"line":1041},15,[297,1043,1044],{"class":311},"        'width: 100vw;'",[297,1046,948],{"class":307},[297,1048,1050,1053],{"class":299,"line":1049},16,[297,1051,1052],{"class":311},"        'height: 100vh;'",[297,1054,948],{"class":307},[297,1056,1058,1061],{"class":299,"line":1057},17,[297,1059,1060],{"class":311},"        'display: flex;'",[297,1062,948],{"class":307},[297,1064,1066,1068,1070,1072,1074],{"class":299,"line":1065},18,[297,1067,985],{"class":307},[297,1069,988],{"class":303},[297,1071,907],{"class":307},[297,1073,993],{"class":311},[297,1075,996],{"class":307},[297,1077,1079,1082,1085,1088],{"class":299,"line":1078},19,[297,1080,1081],{"class":303},"    setTimeout",[297,1083,1084],{"class":307},"(() ",[297,1086,1087],{"class":335},"=>",[297,1089,1090],{"class":307}," {\n",[297,1092,1094,1097,1099],{"class":299,"line":1093},20,[297,1095,1096],{"class":307},"        window.location.href ",[297,1098,679],{"class":335},[297,1100,1101],{"class":311}," 'https://zhul.in'\n",[297,1103,1105,1108,1111],{"class":299,"line":1104},21,[297,1106,1107],{"class":307},"    }, ",[297,1109,1110],{"class":324},"5000",[297,1112,996],{"class":307},[297,1114,1116],{"class":299,"line":1115},22,[297,1117,1118],{"class":307},"}\n",[843,1120,1122],{"id":1121},"给-waline-和-umami-设置限制","给 waline 和 umami 设置限制",[21,1124,1125],{},"我博客使用的 waline 和 umami 均是我自己在 vercel 上架设的，我自然可以根据访客的 referer 来判断请求的来源。不过看了下，vercel.json 文件并不能直接实现这个需求，可能需要我们自己来编写一些简易的中间件。",[1127,1128,1129],"h4",{"id":607},"Waline",[21,1131,1132,1133,259],{},"waline 文档中有明确提到，waline 基于 Koa 框架开发，可以",[48,1134,1137],{"href":1135,"rel":1136},"https://waline.js.org/reference/server/plugin.html#%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%88%B6%E4%BD%9C",[52],"自行编写中间件",[289,1139,1143],{"className":1140,"code":1141,"language":1142,"meta":196,"style":196},"language-js shiki shiki-themes github-light github-dark","// example/index.cjs\nconst Application = require('@waline/vercel');\n\nmodule.exports = Application({\n    plugins: [\n        {\n            middlewares: [\n                async (ctx, next) => {\n                    const referer = ctx.request.headers['referer'];\n                    if (referer) {\n                        if (\n                            !referer.include('localhost') &&\n                            !referer.include('127.0.0.1') &&\n                            !referer.include('zhul.in')\n                        ) {\n                            ctx.status = 403\n                            ctx.body = 'Forbidden'\n                            return\n                        }\n                    }\n                    await next();\n                },\n            ]\n        }\n    ],\n    async postSave(comment) {\n        // do what ever you want after comment saved\n    },\n});\n","js",[241,1144,1145,1150,1170,1176,1194,1199,1204,1209,1233,1252,1260,1268,1288,1304,1319,1324,1334,1344,1349,1354,1359,1370,1375,1381,1387,1393,1410,1416,1422],{"__ignoreMap":196},[297,1146,1147],{"class":299,"line":300},[297,1148,1149],{"class":665},"// example/index.cjs\n",[297,1151,1152,1154,1157,1159,1162,1164,1167],{"class":299,"line":3},[297,1153,869],{"class":335},[297,1155,1156],{"class":324}," Application",[297,1158,875],{"class":335},[297,1160,1161],{"class":303}," require",[297,1163,907],{"class":307},[297,1165,1166],{"class":311},"'@waline/vercel'",[297,1168,1169],{"class":307},");\n",[297,1171,1172],{"class":299,"line":431},[297,1173,1175],{"emptyLinePlaceholder":1174},true,"\n",[297,1177,1178,1181,1184,1187,1189,1191],{"class":299,"line":446},[297,1179,1180],{"class":324},"module",[297,1182,1183],{"class":307},".",[297,1185,1186],{"class":324},"exports",[297,1188,875],{"class":335},[297,1190,1156],{"class":303},[297,1192,1193],{"class":307},"({\n",[297,1195,1196],{"class":299,"line":460},[297,1197,1198],{"class":307},"    plugins: [\n",[297,1200,1201],{"class":299,"line":958},[297,1202,1203],{"class":307},"        {\n",[297,1205,1206],{"class":299,"line":966},[297,1207,1208],{"class":307},"            middlewares: [\n",[297,1210,1211,1214,1217,1221,1224,1227,1229,1231],{"class":299,"line":974},[297,1212,1213],{"class":335},"                async",[297,1215,1216],{"class":307}," (",[297,1218,1220],{"class":1219},"s4XuR","ctx",[297,1222,1223],{"class":307},", ",[297,1225,1226],{"class":1219},"next",[297,1228,913],{"class":307},[297,1230,1087],{"class":335},[297,1232,1090],{"class":307},[297,1234,1235,1238,1241,1243,1246,1249],{"class":299,"line":982},[297,1236,1237],{"class":335},"                    const",[297,1239,1240],{"class":324}," referer",[297,1242,875],{"class":335},[297,1244,1245],{"class":307}," ctx.request.headers[",[297,1247,1248],{"class":311},"'referer'",[297,1250,1251],{"class":307},"];\n",[297,1253,1254,1257],{"class":299,"line":999},[297,1255,1256],{"class":335},"                    if",[297,1258,1259],{"class":307}," (referer) {\n",[297,1261,1262,1265],{"class":299,"line":1009},[297,1263,1264],{"class":335},"                        if",[297,1266,1267],{"class":307}," (\n",[297,1269,1270,1273,1276,1279,1281,1283,1285],{"class":299,"line":1017},[297,1271,1272],{"class":335},"                            !",[297,1274,1275],{"class":307},"referer.",[297,1277,1278],{"class":303},"include",[297,1280,907],{"class":307},[297,1282,910],{"class":311},[297,1284,913],{"class":307},[297,1286,1287],{"class":335},"&&\n",[297,1289,1290,1292,1294,1296,1298,1300,1302],{"class":299,"line":1025},[297,1291,1272],{"class":335},[297,1293,1275],{"class":307},[297,1295,1278],{"class":303},[297,1297,907],{"class":307},[297,1299,927],{"class":311},[297,1301,913],{"class":307},[297,1303,1287],{"class":335},[297,1305,1306,1308,1310,1312,1314,1317],{"class":299,"line":1033},[297,1307,1272],{"class":335},[297,1309,1275],{"class":307},[297,1311,1278],{"class":303},[297,1313,907],{"class":307},[297,1315,1316],{"class":311},"'zhul.in'",[297,1318,996],{"class":307},[297,1320,1321],{"class":299,"line":1041},[297,1322,1323],{"class":307},"                        ) {\n",[297,1325,1326,1329,1331],{"class":299,"line":1049},[297,1327,1328],{"class":307},"                            ctx.status ",[297,1330,679],{"class":335},[297,1332,1333],{"class":324}," 403\n",[297,1335,1336,1339,1341],{"class":299,"line":1057},[297,1337,1338],{"class":307},"                            ctx.body ",[297,1340,679],{"class":335},[297,1342,1343],{"class":311}," 'Forbidden'\n",[297,1345,1346],{"class":299,"line":1065},[297,1347,1348],{"class":335},"                            return\n",[297,1350,1351],{"class":299,"line":1078},[297,1352,1353],{"class":307},"                        }\n",[297,1355,1356],{"class":299,"line":1093},[297,1357,1358],{"class":307},"                    }\n",[297,1360,1361,1364,1367],{"class":299,"line":1104},[297,1362,1363],{"class":335},"                    await",[297,1365,1366],{"class":303}," next",[297,1368,1369],{"class":307},"();\n",[297,1371,1372],{"class":299,"line":1115},[297,1373,1374],{"class":307},"                },\n",[297,1376,1378],{"class":299,"line":1377},23,[297,1379,1380],{"class":307},"            ]\n",[297,1382,1384],{"class":299,"line":1383},24,[297,1385,1386],{"class":307},"        }\n",[297,1388,1390],{"class":299,"line":1389},25,[297,1391,1392],{"class":307},"    ],\n",[297,1394,1396,1399,1402,1404,1407],{"class":299,"line":1395},26,[297,1397,1398],{"class":335},"    async",[297,1400,1401],{"class":303}," postSave",[297,1403,907],{"class":307},[297,1405,1406],{"class":1219},"comment",[297,1408,1409],{"class":307},") {\n",[297,1411,1413],{"class":299,"line":1412},27,[297,1414,1415],{"class":665},"        // do what ever you want after comment saved\n",[297,1417,1419],{"class":299,"line":1418},28,[297,1420,1421],{"class":307},"    },\n",[297,1423,1425],{"class":299,"line":1424},29,[297,1426,1427],{"class":307},"});\n",[21,1429,1430],{},"成效立竿见影",[21,1432,1433],{},[34,1434],{"alt":1435,"src":1436},"效果图","https://static.031130.xyz/uploads/2024/08/12/6698d6570a780.webp",[1127,1438,608],{"id":608},[21,1440,1441],{},"对 umami 的第一次请求是 script.js，这个请求是因为 html 头部添加了 umami 的 script 链接，这一次请求是不带有 referer 的，因此，对方站点使用我的 umami 统计并不会给我的博客访问统计造成错乱——umami 能够自行分辨对方的站点是否是当初添加网站时填写的站点。但我不能忍的地方在与 umami 的数据库会记录对方站点的流量情况，这占用了我的数据库空间。",[21,1443,1444],{},[34,1445],{"alt":1446,"src":1447},"数据库导出文件","https://static.031130.xyz/uploads/2024/08/12/6698d9c326739.webp",[21,1449,1450,1451,1454],{},"umami 使用 nextjs 开发，似乎并没有给我留可供自定义的接口，贸然修改源码则可能会在下次 merge 官方代码时遇到麻烦。为了给自己省点事，我选择不再让博客加载 ",[241,1452,1453],{},"https://umami.zhul.in/script.js"," ，而是将其中的内容复制保存下来，添加基于 host 的判断条件来决定是否向自建的 umami 服务发起请求。",[843,1456,1458],{"id":1457},"尝试向-cloudflare-举报滥用行为","尝试向 cloudflare 举报滥用行为",[21,1460,1461,1462],{},"cloudflare 是允许提交滥用举报的，这个域名正在使用 cloudflare 提供服务，因此我可以尝试举报，链接在这里: ",[48,1463,1464],{"href":1464,"rel":1465},"https://www.cloudflare.com/zh-cn/trust-hub/reporting-abuse/",[52],[21,1467,1468],{},[34,1469],{"alt":196,"src":1470},"https://static.031130.xyz/uploads/2024/08/12/669926eddb16e.webp",[21,1472,1473,1474,1476,1477,1479],{},"类别就可以选 DCMA，因为对方没有遵守 ",[241,1475,806],{}," 协议给我的文章做出合理的署名，且我的博客关于页面不属于 ",[241,1478,806],{}," 的范畴，对方是没有理由去对这一页做出二次分发的行为的。",[21,1481,1482],{},"不过我暂时还没这么做，我期待着我前面的几个方案能够奏效，我仍寄希望于对方会及时和我沟通，我也不太想为此去填一张额外的烦人的表单。",[28,1484,1485],{"id":1485},"最终效果",[21,1487,1488],{},[34,1489],{"alt":196,"src":1490},"https://static.031130.xyz/uploads/2024/08/12/66992ad0d2890.gif",[547,1492,1493],{},"html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .s4XuR, html code.shiki .s4XuR{--shiki-default:#E36209;--shiki-dark:#FFAB70}",{"title":196,"searchDepth":3,"depth":3,"links":1495},[1496,1497,1498,1503],{"id":613,"depth":3,"text":614},{"id":733,"depth":3,"text":733},{"id":840,"depth":3,"text":841,"children":1499},[1500,1501,1502],{"id":845,"depth":431,"text":846},{"id":1121,"depth":431,"text":1122},{"id":1457,"depth":431,"text":1458},{"id":1485,"depth":3,"text":1485},{"title":1505,"date":1506,"path":1507,"tags":1508,"body":1511},"尝试体验 Fedora COPR 中的 allow SSH 功能","2024-07-15 11:14:12","/2024/07/15/try-ssh-connection-in-fedora-copr",[1509,1510,211],"Fedora","Experience",{"type":15,"value":1512,"toc":1666},[1513,1516,1521,1524,1535,1538,1541,1544,1549,1552,1557,1560,1565,1568,1574,1577,1583,1586,1592,1595,1601,1604,1607,1634,1637,1657,1660],[21,1514,1515],{},"在今年的早些时候，我在 COPR 看到了一个新出现的名为「allow SSH」的按钮。",[21,1517,1518],{},[34,1519],{"alt":196,"src":1520},"https://static.031130.xyz/uploads/2024/08/12/6694949de2921.webp",[21,1522,1523],{},"我在 COPR 的 User Documentation 中找到了对应的描述。",[18,1525,1526],{},[21,1527,1528,1529,1534],{},"Sometimes it is useful to manually debug failed builds not locally but within the Copr infrastructure. That’s why it is possible to allow SSH access to a copr builder. More information in the ",[48,1530,1533],{"href":1531,"rel":1532},"https://frostyx.cz/posts/ssh-access-to-copr-builders",[52],"SSH access to Copr builders"," blog post.",[21,1536,1537],{},"COPR 的这项功能允许包维护者远程访问自己没有的 CPU 架构或 Linux 发行版的 Linux 环境，大大减少打包时的痛点。",[28,1539,1540],{"id":1540},"开始使用",[21,1542,1543],{},"尝试点击按钮，获得如下界面，可以填写自己的 ssh 公钥，最多可以选择两台设备，如果选择的设备数量大于 2，则剩下的人物会维持在 pending 状态，直到被你 ssh 连接的构建机完成对应的构建任务。",[21,1545,1546],{},[34,1547],{"alt":196,"src":1548},"https://static.031130.xyz/uploads/2024/08/12/66949782e9177.webp",[21,1550,1551],{},"在该次构建的详情页面，等待 backend.log 按钮出现",[21,1553,1554],{},[34,1555],{"alt":196,"src":1556},"https://static.031130.xyz/uploads/2024/08/12/6694ca668003e.webp",[21,1558,1559],{},"在这个 url 对应的文件中，我们可以找到需要的 ssh 命令",[21,1561,1562],{},[34,1563],{"alt":196,"src":1564},"https://static.031130.xyz/uploads/2024/08/12/6694988c63899.webp",[21,1566,1567],{},"使用对应的 ssh 命令即可连上构建服务器",[21,1569,1570],{},[34,1571],{"alt":1572,"src":1573},"连接成功","https://static.031130.xyz/uploads/2024/08/12/669499b25cd1b.webp",[21,1575,1576],{},"先跑个 neofetch 看看，双核 16G，看着还行。",[21,1578,1579],{},[34,1580],{"alt":1581,"src":1582},"neofetch","https://static.031130.xyz/uploads/2024/08/12/669499b56e156.webp",[21,1584,1585],{},"随手跑了个 speedtest，竟然是千兆上下传对等的网速。",[21,1587,1588],{},[34,1589],{"alt":1590,"src":1591},"speedtest 结果","https://static.031130.xyz/uploads/2024/08/12/6694bc062f6a3.webp",[21,1593,1594],{},"在这台机子上，我们可以使用 builder-live.log 中的命令手动触发一次构建（不过我这里跑了一半就报错了，疑似是系统不够完善）",[21,1596,1597],{},[34,1598],{"alt":1599,"src":1600},"构建命令","https://static.031130.xyz/uploads/2024/08/12/6694b09a57e06.webp",[21,1602,1603],{},"不过很可惜，COPR 似乎并没有给我们中途去干预/调试构建过程的方案，仅仅是提供了一个可供自由操作的 Linux 环境。使用 copr-rpmbuild 命令可以进行对应的构建，但构建过程依然是在沙箱内进行，且没有给中途暂停/调试的机会。如果需要一步步手动的构建，还是建议使用 rpmbuild 命令进行。",[28,1605,1606],{"id":1606},"杂项",[80,1608,1609,1616,1622,1628],{},[83,1610,1611,1612,1615],{},"使用 ",[241,1613,1614],{},"copr-builder help"," 命令可以获取打包机的提示信息",[83,1617,1611,1618,1621],{},[241,1619,1620],{},"copr-builder show"," 命令查看剩余时间",[83,1623,1611,1624,1627],{},[241,1625,1626],{},"copr-builder prolong"," 可以延长打包机的有效时长",[83,1629,1611,1630,1633],{},[241,1631,1632],{},"copr-builder release"," 可以销毁当前的打包机环境",[28,1635,1636],{"id":1636},"限制",[80,1638,1639,1642,1645,1648,1651,1654],{},[83,1640,1641],{},"由于安全原因，构建结束后，只有 spec 文件和日志可以被存储到 copr 对应项目的服务器。打包机会使用一个独特的沙箱防止其构建产物被二次使用，哪怕是同一个用户都不行。",[83,1643,1644],{},"为了避免资源艾琳娜贵妃，同一用户在同一时刻最多只能使用两台具有 ssh 访问权限的打包机。",[83,1646,1647],{},"由于上面的两套规定，当 copr 构建失败时并不能自动启动 SSH 访问权限，需要用户手动在面板上 resubmit 当前任务并选择使用 SSH 访问权限。",[83,1649,1650],{},"打包机在默认情况下 1 小时后自动销毁，除非你手动申请延长时间，最长为 48 小时。",[83,1652,1653],{},"有些打包机只有 IPv6 的访问地址，你没得选。如果你无法连接 IPv6 网络，你可以取消当前的任务并重新发布并期待能给你下发一台具有 IPv4 访问地址的打包机（其实非常少），或者使用代理。",[83,1655,1656],{},"如果 SRPM 构建失败，则不能 resubmit 当前任务。这是 COPR 的实现逻辑问题，未来可能得到改善。",[28,1658,1659],{"id":1659},"参考",[21,1661,1662],{},[48,1663,1665],{"href":1531,"rel":1664},[52],"「SSH access to Copr builders」",{"title":196,"searchDepth":3,"depth":3,"links":1667},[1668,1669,1670,1671],{"id":1540,"depth":3,"text":1540},{"id":1606,"depth":3,"text":1606},{"id":1636,"depth":3,"text":1636},{"id":1659,"depth":3,"text":1659},{"title":1673,"date":1674,"path":1675,"tags":1676,"body":1678},"在 Arch Linux 下配置使用 HP Laser 103w 打印机无线打印","2024-07-14 18:30:33","/2024/07/14/config-hp-laser-103w-printer-for-archlinux",[212,561,211,1677,562,563],"Printer",{"type":15,"value":1679,"toc":1930},[1680,1683,1686,1689,1695,1699,1708,1711,1727,1741,1749,1768,1779,1805,1807,1814,1828,1835,1838,1855,1876,1891,1894,1897,1903,1906,1909,1915,1918,1924,1927],[21,1681,1682],{},"我寝室有一台使用 wifi 连接的 HP Laser 103w 打印机，这些天刚好布置了新的 HomeServer，因此来记录一下这台打印机的配置过程，根据 HP 官网驱动包的名字「HP Laser 100 and HP Color Laser 150 Printer series Print Driver」推断，此过程应该能适用于所有的 HP Laser 100 及 HP Color Laser 150 系列的打印机。",[28,1684,1685],{"id":1685},"打印机联网",[21,1687,1688],{},"首先使用 Windows 操作系统完成打印机的联网工作，在路由器的网页管理界面可以看到这台打印机的局域网 ip 是 192.168.123.20 ，记录备用。如果有条件的话，尽量将打印机的 MAC 地址与 IP 地址绑定，避免路由器将该 IP 分配给别的设备。",[21,1690,1691],{},[34,1692],{"alt":1693,"src":1694},"路由器的网页管理界面","https://static.031130.xyz/uploads/2024/08/12/6693aa41c079b.webp",[28,1696,1698],{"id":1697},"安装-cups","安装 CUPS",[21,1700,1701,1702,1707],{},"随后按照 ArchWiki 的 ",[48,1703,1706],{"href":1704,"rel":1705},"https://wiki.archlinux.org/title/CUPS",[52],"CUPS 页面","进行相关配置，CUPS 是苹果公司开源的打印系统，是目前 Linux 下最主流的打印方案。",[21,1709,1710],{},"首先安装 cups ，如果需要「打印为 pdf」的功能，可以选装 cups-pdf。",[289,1712,1714],{"className":291,"code":1713,"language":293,"meta":196,"style":196},"pacman -S cups\n",[241,1715,1716],{"__ignoreMap":196},[297,1717,1718,1721,1724],{"class":299,"line":300},[297,1719,1720],{"class":303},"pacman",[297,1722,1723],{"class":324}," -S",[297,1725,1726],{"class":311}," cups\n",[289,1728,1730],{"className":291,"code":1729,"language":293,"meta":196,"style":196},"pacman -S cups-pdf\n",[241,1731,1732],{"__ignoreMap":196},[297,1733,1734,1736,1738],{"class":299,"line":300},[297,1735,1720],{"class":303},[297,1737,1723],{"class":324},[297,1739,1740],{"class":311}," cups-pdf\n",[21,1742,1743,1744,1748],{},"接着需要启动 cups 的服务，如果需要使用 cups 自带的 webui，可以直接启用 cups.service，这样就能在 ",[48,1745,1746],{"href":1746,"rel":1747},"http://localhost:631",[52]," 看到对应的配置页面。",[289,1750,1752],{"className":291,"code":1751,"language":293,"meta":196,"style":196},"systemctl enable cups.service --now\n",[241,1753,1754],{"__ignoreMap":196},[297,1755,1756,1759,1762,1765],{"class":299,"line":300},[297,1757,1758],{"class":303},"systemctl",[297,1760,1761],{"class":311}," enable",[297,1763,1764],{"class":311}," cups.service",[297,1766,1767],{"class":324}," --now\n",[21,1769,1770,1771,1774,1775,1778],{},"而如果你正在使用一些集成度较高的 DE 如 KDE 或 GNOME，可以安装 DE 对应的打印机管理程序。在 Arch Linux 下，KDE 自带的打印机管理程序包名为 ",[241,1772,1773],{},"print-manager","，此外还需要安装安装 ",[241,1776,1777],{},"system-config-printer"," 打印机功能支持软件包。这种方案则不需要启动 cups.service，只需要启动 cups.socket 即可。",[289,1780,1782],{"className":291,"code":1781,"language":293,"meta":196,"style":196},"pacman -S print-manager system-config-printer\nsystemctl enable cups.socket\n",[241,1783,1784,1796],{"__ignoreMap":196},[297,1785,1786,1788,1790,1793],{"class":299,"line":300},[297,1787,1720],{"class":303},[297,1789,1723],{"class":324},[297,1791,1792],{"class":311}," print-manager",[297,1794,1795],{"class":311}," system-config-printer\n",[297,1797,1798,1800,1802],{"class":299,"line":3},[297,1799,1758],{"class":303},[297,1801,1761],{"class":311},[297,1803,1804],{"class":311}," cups.socket\n",[28,1806,1606],{"id":1606},[21,1808,1809,1810,1813],{},"在常规的流程中，通常会安装 ",[241,1811,1812],{},"ghostscript"," 来适应 Non-PDF 打印机，这台 HP Laser 103w 也不例外。",[289,1815,1817],{"className":291,"code":1816,"language":293,"meta":196,"style":196},"pacman -S ghostscript\n",[241,1818,1819],{"__ignoreMap":196},[297,1820,1821,1823,1825],{"class":299,"line":300},[297,1822,1720],{"class":303},[297,1824,1723],{"class":324},[297,1826,1827],{"class":311}," ghostscript\n",[21,1829,1830,1831,1834],{},"如果是 PostScript 打印机可能还需要安装 ",[241,1832,1833],{},"gsfonts"," 包，但我这里不需要。",[28,1836,1837],{"id":1837},"安装驱动",[21,1839,1840,1841,1844,1845,1848,1849,1854],{},"OpenPrinting 维护的 ",[241,1842,1843],{},"foomatic"," 为很大一部分打印机提供的驱动文件，Gutenprint 维护的 gutenprint 包也包含了佳能(Canon)、爱普生(Epson)、利盟(Lexmark)、索尼(Sony)、奥林巴斯(Olympus) 以及 PCL 打印机的驱动程序。如果你的打印机型号和我的不同，可以尝试安装这些组织维护的驱动。具体的安装方法同样可以在 ArchWiki 的 ",[48,1846,1706],{"href":1704,"rel":1847},[52],"找到。我上一台打印机 HP LaserJet 1020 所需的驱动是在 ",[48,1850,1853],{"href":1851,"rel":1852},"https://aur.archlinux.org/packages/foo2zjs-nightly",[52],"AUR/foo2zjs-nightly"," 中取得的。",[21,1856,1857,1858,1863,1864,1869,1870,1875],{},"但 HP Laser 103w 的驱动程序都不在这些软件包中，在 HP 的官网我们可以找到",[48,1859,1862],{"href":1860,"rel":1861},"https://support.hp.com/cn-zh/drivers/hp-laser-100-printer-series/model/2100769190",[52],"这个页面","，包含了 HP Laser 103w 的 Linux 驱动",[48,1865,1868],{"href":1866,"rel":1867},"https://ftp.hp.com/pub/softlib/software13/printers/CLP150/uld-hp_V1.00.39.12_00.15.tar.gz",[52],"下载地址","（已在 web.archive.org 存档）。通过下载下来的文件名，我们可以看见名字为 uld-hp，理论上可以直接通过压缩包内的安装脚本进行安装，但我通过这个名字顺藤摸瓜，找到了 ",[48,1871,1874],{"href":1872,"rel":1873},"https://aur.archlinux.org/packages/hpuld",[52],"AUR/hpuld"," 可以直接进行安装。",[289,1877,1879],{"className":291,"code":1878,"language":293,"meta":196,"style":196},"yay -S hpuld\n",[241,1880,1881],{"__ignoreMap":196},[297,1882,1883,1886,1888],{"class":299,"line":300},[297,1884,1885],{"class":303},"yay",[297,1887,1723],{"class":324},[297,1889,1890],{"class":311}," hpuld\n",[28,1892,1893],{"id":1893},"添加打印机",[21,1895,1896],{},"打开设置中的打印机设置后，选择添加打印机，CUPS 直接帮我们找到了局域网下的打印机，并自动开始搜索驱动程序（虽然没搜到）。",[21,1898,1899],{},[34,1900],{"alt":1901,"src":1902},"自动搜索","https://static.031130.xyz/uploads/2024/08/12/6693b6e81f9c4.webp",[21,1904,1905],{},"但如果没能自动检测到打印机，也可以使用手动选项中的 AppSocket/HP JetDirect 手动输入打印机的 ip 地址进行配置。",[21,1907,1908],{},"紧接着就到了选择驱动程序的阶段，厂商选择 HP，能够找到「HP Laser 10x Series」的选项，直接选择。",[21,1910,1911],{},[34,1912],{"alt":1913,"src":1914},"选择驱动","https://static.031130.xyz/uploads/2024/08/12/6693b76b9c1ca.webp",[21,1916,1917],{},"接着就可以完成打印机的添加。",[21,1919,1920],{},[34,1921],{"alt":1922,"src":1923},"完成添加","https://static.031130.xyz/uploads/2024/08/12/6693b7ba82d99.webp",[21,1925,1926],{},"随后便能正常打印文件啦！",[547,1928,1929],{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":196,"searchDepth":3,"depth":3,"links":1931},[1932,1933,1934,1935,1936],{"id":1685,"depth":3,"text":1685},{"id":1697,"depth":3,"text":1698},{"id":1606,"depth":3,"text":1606},{"id":1837,"depth":3,"text":1837},{"id":1893,"depth":3,"text":1893},{"title":1938,"date":1939,"path":1940,"tags":1941,"body":1946},"使用动态公网 ip + ddns 实现 rustdesk 的 ip 直连","2024-06-30 18:15:00","/2024/06/30/dynamic-public-ip-and-ddns-for-rustdesk",[211,1942,1943,1944,1945,562],"OpenSource Project","Shell Script","Rustdesk","Router",{"type":15,"value":1947,"toc":2083},[1948,1951,1954,1957,1961,1964,1967,1972,1975,1990,2037,2040,2043,2046,2049,2054,2057,2062,2069,2072,2075,2080],[21,1949,1950],{},"最近跟风整了一台 n100 的迷你主机装了个 Archlinux 当 HomeServer，搭配上了显卡欺骗器，平常一直远程使用，因此需要实现稳定的远程桌面连接。开源软件 Rustdesk 本身对 Linux 的适配尚可，可惜官方提供的服务器位于境外，且前一阵子因为诈骗相关的风波使得官方对连接做出了一些限制，应当使用自建服务器或者 ip 直连。",[21,1952,1953],{},"单从网络安全的角度出发，最佳实践应该是通过 wireguard 或者别的协议先接入局域网，然后使用局域网内的 ip 直连，这是最稳妥的，但我有点懒，而且我可能会在多个设备上都有控制 HomeServer 的需求，给所有设备配置 wireguard 是一件挺麻烦的事情，因此我决定放弃安全性，直接公网裸奔。",[21,1955,1956],{},"在学校宿舍的电信宽带提供了一个动态公网 ip，因此只需要设置好 ddns 和端口转发就可以拿到一个固定的 domain + port 提供给 rustdesk 直连。",[28,1958,1960],{"id":1959},"在被控端-rustdesk-允许直连访问","在被控端 Rustdesk 允许直连访问",[21,1962,1963],{},"在「设置」中的「安全」一栏选择「解锁安全设置」，拉到最下面的「安全」栏，勾选「允许 IP 直接访问」，并选择一个端口，范围在 1000 ~35535 之间且不要被本地的其他程序占用，Rustdesk 的默认值为 21118。",[21,1965,1966],{},"可以直接在局域网内的另一台设备进行测试，直接在 Rustdesk 中输入被控端的局域网 ip 和刚刚设置的端口，看看能不能访问得通，如果不行可能需要排查一下被控端访问墙设置的问题。",[21,1968,1969],{},[34,1970],{"alt":196,"src":1971},"https://static.031130.xyz/uploads/2024/08/12/66814701cf7ce.webp",[28,1973,1974],{"id":1974},"ddns",[21,1976,1977,1978,1983,1984,1989],{},"由于我的域名是交给 cloudflare 进行解析的，就找了个",[48,1979,1982],{"href":1980,"rel":1981},"https://github.com/yulewang/cloudflare-api-v4-ddns/",[52],"支持 cloudflare 的 ddns 脚本","，大致的部署过程可以参考 ",[48,1985,1988],{"href":1986,"rel":1987},"https://www.rclogs.com/2023/06/%25e8%2587%25aa%25e5%25bb%25ba%25e5%259f%25ba%25e4%25ba%258ecloudflare%25e7%259a%2584ddns",[52],"「自建基于Cloudflare的DDNS」","，不过我小改了一下脚本中获取公网 ipv4 的方式，直接 ssh 到路由器上获取当前的 ipv4 地址，不依赖外部的服务。",[289,1991,1993],{"className":291,"code":1992,"language":293,"meta":196,"style":196},"WAN_IP=`ssh -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa root@192.168.1.1 'ip -br a' | grep pppoe-wan | awk '{print $3}'`\n",[241,1994,1995],{"__ignoreMap":196},[297,1996,1997,2000,2002,2005,2008,2011,2014,2017,2020,2023,2026,2029,2031,2034],{"class":299,"line":300},[297,1998,1999],{"class":307},"WAN_IP",[297,2001,679],{"class":335},[297,2003,2004],{"class":311},"`",[297,2006,2007],{"class":303},"ssh",[297,2009,2010],{"class":324}," -o",[297,2012,2013],{"class":311}," HostKeyAlgorithms=+ssh-rsa ",[297,2015,2016],{"class":324},"-o",[297,2018,2019],{"class":311}," PubkeyAcceptedKeyTypes=+ssh-rsa root@192.168.1.1 'ip -br a' ",[297,2021,2022],{"class":335},"|",[297,2024,2025],{"class":303}," grep",[297,2027,2028],{"class":311}," pppoe-wan ",[297,2030,2022],{"class":335},[297,2032,2033],{"class":303}," awk",[297,2035,2036],{"class":311}," '{print $3}'`\n",[21,2038,2039],{},"理论上来说，有不少路由器自身就支持不少域名解析商",[28,2041,2042],{"id":2042},"端口转发",[21,2044,2045],{},"端口转发需要在路由器的后台设置进行，我这里路由器使用的是 openwrt 系统，大部分路由器应该都支持这个操作。",[21,2047,2048],{},"在「网络」-「防火墙」",[21,2050,2051],{},[34,2052],{"alt":196,"src":2053},"https://static.031130.xyz/uploads/2024/08/12/6681635804e68.webp",[21,2055,2056],{},"选择「端口转发」",[21,2058,2059],{},[34,2060],{"alt":196,"src":2061},"https://static.031130.xyz/uploads/2024/08/12/66817e416534c.webp",[21,2063,2064,2065,2068],{},"新建端口转发，共享名随便填，外部端口是你最终要在主控端输入的端口，内部 IP 地址是被控机 的 IP 地址，可以用 ",[241,2066,2067],{},"ip -br a"," 命令看到，内部端口就是上文在 Rustdesk 指定的端口号。",[28,2070,2071],{"id":2071},"效果",[21,2073,2074],{},"可以直接在主控端口输入 ddns 的域名和端口号，实现远程控制",[21,2076,2077],{},[34,2078],{"alt":196,"src":2079},"https://static.031130.xyz/uploads/2024/08/12/66817f77aae7e.webp",[547,2081,2082],{},"html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":196,"searchDepth":3,"depth":3,"links":2084},[2085,2086,2087,2088],{"id":1959,"depth":3,"text":1960},{"id":1974,"depth":3,"text":1974},{"id":2042,"depth":3,"text":2042},{"id":2071,"depth":3,"text":2071},{"title":2090,"date":2091,"path":2092,"tags":2093,"body":2096},"使用 Windows 虚拟机运行虚拟专用网客户端为 Linux 提供内网环境","2024-05-23 01:07:44","/2024/05/23/setup-network-environment-for-non-linux-vpn-client-with-virtual-machine",[211,2094,2095,12],"Windows","Virtual Machine",{"type":15,"value":2097,"toc":2196},[2098,2101,2104,2109,2112,2115,2118,2123,2126,2131,2140,2146,2149,2153,2156,2160,2169,2174,2177,2182,2185,2188,2193],[28,2099,2100],{"id":2100},"起因",[21,2102,2103],{},"最近在某家公司实习，公司内部的 git 部署在内网环境上，需要通过虚拟专用网的客户端（天翼云的 AONE）才能够正常访问。很可惜，客户端只提供了 Windows 和 MacOS 的版本。",[21,2105,2106],{},[34,2107],{"alt":196,"src":2108},"https://static.031130.xyz/uploads/2024/08/12/664e29866c1ab.webp",[21,2110,2111],{},"工作的代码总是要提交的，我也不想改变我的开发环境，又不希望在 Windows 上使用 git-for-windows 这个近乎简陋的工具进行代码提交，更别说还有一些别的内网服务接下来可能也会用到。所以最好的办法就是在 Linux 下也配置好能够访问内网的环境。",[28,2113,2114],{"id":2114},"理论",[21,2116,2117],{},"在 Windows 下使用 AONE 的网络拓扑是这样的",[21,2119,2120],{},[34,2121],{"alt":196,"src":2122},"https://static.031130.xyz/uploads/2024/08/12/664e2b93de6f9.webp",[21,2124,2125],{},"而我的方案则是使用 Windows 虚拟机开启 AONE，并在这台虚拟机上开一个 socks5 server 负责代理 Linux 宿主机需要打到内网服务的流量。网络拓扑如下",[21,2127,2128],{},[34,2129],{"alt":196,"src":2130},"https://static.031130.xyz/uploads/2024/08/12/664e2e1b0da09.webp",[21,2132,2133,2134,2139],{},"根据 bilibili 上",[48,2135,2138],{"href":2136,"rel":2137},"https://www.bilibili.com/video/BV11M4y1J7zP/",[52],"技术蛋老师的视频总结","，我们应该选择使用网卡桥接的网络配置，只有这个配置方式同时支持「宿主->虚拟机」和 「虚拟机->互联网」的网络。",[21,2141,2142],{},[34,2143],{"alt":2144,"src":2145},"图片来源: bilibili 技术蛋老师","https://static.031130.xyz/uploads/2024/08/12/664e2fbb4a36b.webp",[28,2147,2148],{"id":2148},"实操",[843,2150,2152],{"id":2151},"在-windows-虚拟机中开启虚拟专用网客户端","在 Windows 虚拟机中开启虚拟专用网客户端",[21,2154,2155],{},"开启 AONE，不做赘述",[843,2157,2159],{"id":2158},"开启-socks-server监听地址为-0000-或者设置为宿主机的-ip-地址","开启 socks server，监听地址为 0.0.0.0 （或者设置为宿主机的 IP 地址）",[21,2161,2162,2163,2168],{},"在「",[48,2164,2167],{"href":2165,"rel":2166},"https://imbearchild.cyou/",[52],"熊孩子(BearChild)","」的推荐下，我这里采用的是大名鼎鼎的二级射线（某 V 字开头的常见软件），直接从 GIthub Release 中下载 Windows X64 的压缩包，简单配置下即可，如果没有什么特殊需求的话可以只修改图中的两处配置。",[21,2170,2171],{},[34,2172],{"alt":196,"src":2173},"https://static.031130.xyz/uploads/2024/08/12/664e328cd83b3.webp",[21,2175,2176],{},"在终端中通过该软件的 run 命令即可开启服务",[21,2178,2179],{},[34,2180],{"alt":196,"src":2181},"https://static.031130.xyz/uploads/2024/08/12/664e32e6c350a.webp",[843,2183,2184],{"id":2184},"在宿主机进行测试",[21,2186,2187],{},"我这里使用的是 mzz2017 编写的 gg 命令进行代理，代理服务器的 ip 地址使用虚拟机下 ipconfig 命令获得的 ip 地址，端口号则对应上面配置文件中的 port 参数。",[21,2189,2190],{},[34,2191],{"alt":196,"src":2192},"https://static.031130.xyz/uploads/2024/08/12/664e33c3e8320.webp",[21,2194,2195],{},"这里 curl 百度得到了正确的相应，说明通道是通的，gg 也可以用于代理浏览器。经实测能够正常访问公司内网服务，不便在博客中展示。",{"title":196,"searchDepth":3,"depth":3,"links":2197},[2198,2199,2200],{"id":2100,"depth":3,"text":2100},{"id":2114,"depth":3,"text":2114},{"id":2148,"depth":3,"text":2148,"children":2201},[2202,2203,2204],{"id":2151,"depth":431,"text":2152},{"id":2158,"depth":431,"text":2159},{"id":2184,"depth":431,"text":2184},{"title":2206,"date":2207,"path":2208,"tags":2209,"body":2211},"以 Archlinux 中 makepkg 的方式打开 rpmbuild","2024-05-03 22:48:39","/2024/05/03/open-rpmbuild-in-the-way-of-archlinux-makepkg",[212,1509,2210,211],"RPM Package",{"type":15,"value":2212,"toc":2557},[2213,2216,2223,2288,2303,2310,2350,2357,2360,2363,2366,2379,2382,2397,2405,2408,2411,2414,2422,2425,2428,2431,2456,2463,2483,2490,2495,2502,2505,2512,2530,2533,2536,2543,2549,2551,2554],[21,2214,2215],{},"在 Redhat 系的发行版上打包软件的时候，会发现与 Archlinux 完全不同的思路。",[21,2217,2218,2219,2222],{},"Fedora 所代表的 Redhat 阵营一看就是那种宏大叙事的大型发行版，rpmbuild 在默认情况下会在 $HOME/rpmbuild 下的一系列文件夹进行构建过程。使用 ",[241,2220,2221],{},"rpmdev-setuptree"," 命令会创建好下面这些目录进行构建。",[289,2224,2226],{"className":291,"code":2225,"language":293,"meta":196,"style":196},"$ tree rpmbuild\nrpmbuild\n├── BUILD\n├── BUILDROOT\n├── RPMS\n├── SOURCES\n├── SPECS\n└── SRPMS\n",[241,2227,2228,2239,2244,2252,2259,2266,2273,2280],{"__ignoreMap":196},[297,2229,2230,2233,2236],{"class":299,"line":300},[297,2231,2232],{"class":303},"$",[297,2234,2235],{"class":311}," tree",[297,2237,2238],{"class":311}," rpmbuild\n",[297,2240,2241],{"class":299,"line":3},[297,2242,2243],{"class":303},"rpmbuild\n",[297,2245,2246,2249],{"class":299,"line":431},[297,2247,2248],{"class":303},"├──",[297,2250,2251],{"class":311}," BUILD\n",[297,2253,2254,2256],{"class":299,"line":446},[297,2255,2248],{"class":303},[297,2257,2258],{"class":311}," BUILDROOT\n",[297,2260,2261,2263],{"class":299,"line":460},[297,2262,2248],{"class":303},[297,2264,2265],{"class":311}," RPMS\n",[297,2267,2268,2270],{"class":299,"line":958},[297,2269,2248],{"class":303},[297,2271,2272],{"class":311}," SOURCES\n",[297,2274,2275,2277],{"class":299,"line":966},[297,2276,2248],{"class":303},[297,2278,2279],{"class":311}," SPECS\n",[297,2281,2282,2285],{"class":299,"line":974},[297,2283,2284],{"class":303},"└──",[297,2286,2287],{"class":311}," SRPMS\n",[21,2289,2290,2291,2296,2297,2302],{},"Fedora 将所有的软件的构建都集中在一个 rpmbuild 目录中，BUILD 是编译时使用的，BUILDROOT 是最终安装目录，RPMS 是存放最终产物的，SOURCES 是存放源码等文件的，SPECS 是存放指导构建过程的 spec 文件的，而 SRPMS 是 RH 系为了 reproducibility 而单独将 spec 和源文件打包的产物。除了 rpmbuild 命令以外，Fedora 还有一套使用容器构建 rpm 包的 ",[48,2292,2295],{"href":2293,"rel":2294},"https://fedoraproject.org/wiki/Using_Mock_to_test_package_builds",[52],"mock"," 构建系统，与 Archlinux 的 ",[48,2298,2301],{"href":2299,"rel":2300},"https://archlinux.org/packages/extra/any/devtools/",[52],"devtools"," 类似，这里不作过多叙述。",[21,2304,2305,2306,2309],{},"反观 Arch 的构建目录，",[92,2307,2308],{},"就有一股浓浓的小作坊气味","。每个软件包自己拥有一个目录，指导构建过程的 PKGBUILD 文件、源文件和最终的产物都放在这个目录下，目录下的 src 和 pkg 文件夹分别对应 rpm 的 BUILD 和 BUILDROOT，前者是源文件被解压的目录和编译过程进行的目录，后者是软件最终的安装目录。",[289,2311,2313],{"className":291,"code":2312,"language":293,"meta":196,"style":196},"$ tree repo\nrepo\n├── src\n├── pkg\n└── PKGBUILD\n",[241,2314,2315,2324,2329,2336,2343],{"__ignoreMap":196},[297,2316,2317,2319,2321],{"class":299,"line":300},[297,2318,2232],{"class":303},[297,2320,2235],{"class":311},[297,2322,2323],{"class":311}," repo\n",[297,2325,2326],{"class":299,"line":3},[297,2327,2328],{"class":303},"repo\n",[297,2330,2331,2333],{"class":299,"line":431},[297,2332,2248],{"class":303},[297,2334,2335],{"class":311}," src\n",[297,2337,2338,2340],{"class":299,"line":446},[297,2339,2248],{"class":303},[297,2341,2342],{"class":311}," pkg\n",[297,2344,2345,2347],{"class":299,"line":460},[297,2346,2284],{"class":303},[297,2348,2349],{"class":311}," PKGBUILD\n",[21,2351,2352,2353,2356],{},"好巧不巧，我偏偏习惯这个小作坊气息的 arch build system，每个软件包独享一个自己的目录，",[92,2354,2355],{},"干净又卫生","。我自然也希望在 Fedora 下打 rpm 包的时候能够使用类似 Archlinux 下 makepkg 使用的目录结构。",[28,2358,2359],{"id":2359},"简单了解",[21,2361,2362],{},"在了解一系列 rpmbuild 中宏（macros）相关的知识后，我意识到这并非不可能。",[21,2364,2365],{},"使用如下的命令可以获取目前系统中定义的所有宏",[289,2367,2369],{"className":291,"code":2368,"language":293,"meta":196,"style":196},"rpm --showrc\n",[241,2370,2371],{"__ignoreMap":196},[297,2372,2373,2376],{"class":299,"line":300},[297,2374,2375],{"class":303},"rpm",[297,2377,2378],{"class":324}," --showrc\n",[21,2380,2381],{},"而可以使用如下命令检查某一个宏目前被定义成了什么值",[289,2383,2385],{"className":291,"code":2384,"language":293,"meta":196,"style":196},"rpm --eval \"%{_topdir}\"\n",[241,2386,2387],{"__ignoreMap":196},[297,2388,2389,2391,2394],{"class":299,"line":300},[297,2390,2375],{"class":303},[297,2392,2393],{"class":324}," --eval",[297,2395,2396],{"class":311}," \"%{_topdir}\"\n",[21,2398,2399,2400,2404],{},"更多关于宏的描述可以在 ",[48,2401,2402],{"href":2402,"rel":2403},"https://rpm-software-management.github.io/rpm/manual/macros.html",[52]," 获取",[28,2406,2407],{"id":2407},"修改路径",[21,2409,2410],{},"我们可以把定义成 $HOME/rpmbuild 的 %_topdir 重新定义成当前目录。",[21,2412,2413],{},"在 $HOME/.rpmmacros 中，去除顶部对 %_topdir 的定义，重新填上以下这些定义，即可初步完成我想要的效果。",[289,2415,2420],{"className":2416,"code":2418,"language":2419},[2417],"language-text","%_topdir    %(pwd)\n%_builddir %{_topdir}/src\n%_buildrootdir %{_topdir}/pkg\n%_rpmdir %{_topdir}\n%_sourcedir %{_topdir}\n%_specdir %{_topdir}\n%_srcrpmdir %{_topdir}\n","text",[241,2421,2418],{"__ignoreMap":196},[21,2423,2424],{},"现在在任何一个目录下执行 rpmbuild 相关命令，都会把 src 认为是构建目录，pkg 是最后安装目录，spec 文件和源文件早当前文件夹下，构建产物在当前文件夹下的 x86_64（或者别的架构名，这一层目录我还没有找到应该如何去掉）下。",[28,2426,2427],{"id":2427},"自动安装依赖文件",[21,2429,2430],{},"Fedora 中的 rpmbuild 不带有 makepkg -s 的功能，不能自动安装依赖。不过这也不意味着需要自己傻傻地去翻 spec 看看需要哪些构建依赖。可以使用 dnf 的 builddep 命令实现",[289,2432,2434],{"className":291,"code":2433,"language":293,"meta":196,"style":196},"sudo dnf builddep ./*.spec\n",[241,2435,2436],{"__ignoreMap":196},[297,2437,2438,2441,2444,2447,2450,2453],{"class":299,"line":300},[297,2439,2440],{"class":303},"sudo",[297,2442,2443],{"class":311}," dnf",[297,2445,2446],{"class":311}," builddep",[297,2448,2449],{"class":311}," ./",[297,2451,2452],{"class":324},"*",[297,2454,2455],{"class":311},".spec\n",[21,2457,2458,2459,2462],{},"不过 dnf 没有什么完成构建后自动卸载依赖的选项。",[92,2460,2461],{},"这些依赖装完以后就一辈子赖在你的电脑上了","，才不是，可以在构建完成后使用 dnf 自带的后悔药功能撤销上一条命令执行的效果。",[289,2464,2466],{"className":291,"code":2465,"language":293,"meta":196,"style":196},"sudo dnf history undo 0\n",[241,2467,2468],{"__ignoreMap":196},[297,2469,2470,2472,2474,2477,2480],{"class":299,"line":300},[297,2471,2440],{"class":303},[297,2473,2443],{"class":311},[297,2475,2476],{"class":311}," history",[297,2478,2479],{"class":311}," undo",[297,2481,2482],{"class":324}," 0\n",[21,2484,2485,2486,2489],{},"不过如果在 builddep 过程中，dnf 从 updates 源里更新了一些软件，那么它在 undo 时可能就没法获取更新前的软件版本。会有 ",[241,2487,2488],{},"Cannot find rpm nevra","  的提示",[21,2491,2492],{},[34,2493],{"alt":196,"src":2494},"https://static.031130.xyz/uploads/2024/08/12/6635018238ffa.webp",[21,2496,2497,2498,2501],{},"可以使用 ",[241,2499,2500],{},"--skip-broken"," 命令跳过那些没法找到老版本的软件，继续卸载其余的软件。",[28,2503,2504],{"id":2504},"自动下载源文件",[21,2506,2507,2508,2511],{},"很多使用 spec 中会在 source 里写上下载地址，而不是附上源码文件。rpm 似乎因为一些原因禁止了 rpmbuild 自动下载源文件的功能。可以通过在使用 rpmbuild 的时候带上 ",[241,2509,2510],{},"--undefine=_disable_source_fetch"," 取消定义这个行为，或者干脆在调用 rpmbuild 之前执行一遍",[289,2513,2515],{"className":291,"code":2514,"language":293,"meta":196,"style":196},"spectool -gR *.spec\n",[241,2516,2517],{"__ignoreMap":196},[297,2518,2519,2522,2525,2528],{"class":299,"line":300},[297,2520,2521],{"class":303},"spectool",[297,2523,2524],{"class":324}," -gR",[297,2526,2527],{"class":324}," *",[297,2529,2455],{"class":311},[21,2531,2532],{},"这样也能自动下载源文件。",[28,2534,2535],{"id":2535},"构建行为",[21,2537,2538,2539,2542],{},"makepkg 的默认构建行为就是只构建最终的安装包，Archlinux 中并没有 Fedora 那样打 source rpm 保证 reproduceability 的行为，这在 rpmbuild 中对应的是 ",[241,2540,2541],{},"-bb"," 选项。",[21,2544,1611,2545,2548],{},[241,2546,2547],{},"rpmbuild -bb *.spec"," 即可",[729,2550],{},[21,2552,2553],{},"上面介绍完了 rpmbuild 和 makepkg 的主要差异，应该可以自己搓一个 rpmbuild-wrapper 去实现以 makepkg 的方式打开 rpmbuild 的目标了，具体的 wrapper 脚本我就不放出来献丑了。",[547,2555,2556],{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}",{"title":196,"searchDepth":3,"depth":3,"links":2558},[2559,2560,2561,2562,2563],{"id":2359,"depth":3,"text":2359},{"id":2407,"depth":3,"text":2407},{"id":2427,"depth":3,"text":2427},{"id":2504,"depth":3,"text":2504},{"id":2535,"depth":3,"text":2535},{"title":2565,"date":2566,"path":2567,"tags":2568,"body":2570},"使用 Github Action 更新用于 rpm 打包的 spec 文件","2024-04-29 19:19:54","/2024/04/29/update-a-rpm-spec-by-github-action",[1509,2210,2569],"Github Action",{"type":15,"value":2571,"toc":2907},[2572,2579,2588,2591,2593,2596,2645,2648,2684,2687,2721,2724,2796,2799,2856,2859,2896,2904],[21,2573,2574,2575,2578],{},"有一些软件包的上游本身就是使用 Github Action 发版的，每次 commit 都会触发 Github Action 去构建并分发新版本，使用构建时的时间日期作为版本号。针对这种包，手动更新费时费力，而规范的 specfile 应当是更新 ",[241,2576,2577],{},"%changelog"," 的，因此应当是使用 rpmdev-bumpspec 命令。只不过 rpmdev-bumpspec 需要在 rpm 系发行版或者装有 rpm 系列依赖包的发行版下执行，这不是随随便便一个 Linux 环境就能运行的。",[21,2580,2581,2582,2587],{},"我找到了 ",[48,2583,2586],{"href":2584,"rel":2585},"https://github.com/netoarmando/rpmdev-bumpspec-action",[52],"netoarmando/rpmdev-bumpspec-action"," 这个 Github Action，它通过启动一个 Fedora 的 docker 实现了使用 rpmdev-bumpspec 的效果。虽然 release 中只有一个 2021 年构建的 v1 版本，~~但 Fedora 的版本高低不影响 rpmdev-bumpspec 的效果。~~但每次 Github Action 执行时都会使用 fedora:latest 的 docker 重新构建一遍，不用担心 fedora 版本过低。",[21,2589,2590],{},"于是我们便解决了最核心的问题——处理 spec 文件。接下来只要补充好头尾的步骤即可。",[729,2592],{},[21,2594,2595],{},"首先使用 actions/checkout 释出仓库内的文件",[289,2597,2601],{"className":2598,"code":2599,"language":2600,"meta":196,"style":196},"language-yaml shiki shiki-themes github-light github-dark","- name: Checkout\n  uses: actions/checkout@v2\n  with:\n    fetch-depth: 0\n","yaml",[241,2602,2603,2617,2627,2635],{"__ignoreMap":196},[297,2604,2605,2608,2611,2614],{"class":299,"line":300},[297,2606,2607],{"class":307},"- ",[297,2609,2610],{"class":672},"name",[297,2612,2613],{"class":307},": ",[297,2615,2616],{"class":311},"Checkout\n",[297,2618,2619,2622,2624],{"class":299,"line":3},[297,2620,2621],{"class":672},"  uses",[297,2623,2613],{"class":307},[297,2625,2626],{"class":311},"actions/checkout@v2\n",[297,2628,2629,2632],{"class":299,"line":431},[297,2630,2631],{"class":672},"  with",[297,2633,2634],{"class":307},":\n",[297,2636,2637,2640,2642],{"class":299,"line":446},[297,2638,2639],{"class":672},"    fetch-depth",[297,2641,2613],{"class":307},[297,2643,2644],{"class":324},"0\n",[21,2646,2647],{},"通过 shell 命令获取仓库内 spec 文件的版本号，存入 $GITHUB_ENV",[289,2649,2651],{"className":2598,"code":2650,"language":2600,"meta":196,"style":196},"- name: Get Current Version\n  run: |\n    CURRENT_VERSION=`grep -E '^Version:' *.spec | awk '{print $2}'`\n    echo \"CURRENT_VERSION=$CURRENT_VERSION\" >> $GITHUB_ENV\n",[241,2652,2653,2664,2674,2679],{"__ignoreMap":196},[297,2654,2655,2657,2659,2661],{"class":299,"line":300},[297,2656,2607],{"class":307},[297,2658,2610],{"class":672},[297,2660,2613],{"class":307},[297,2662,2663],{"class":311},"Get Current Version\n",[297,2665,2666,2669,2671],{"class":299,"line":3},[297,2667,2668],{"class":672},"  run",[297,2670,2613],{"class":307},[297,2672,2673],{"class":335},"|\n",[297,2675,2676],{"class":299,"line":431},[297,2677,2678],{"class":311},"    CURRENT_VERSION=`grep -E '^Version:' *.spec | awk '{print $2}'`\n",[297,2680,2681],{"class":299,"line":446},[297,2682,2683],{"class":311},"    echo \"CURRENT_VERSION=$CURRENT_VERSION\" >> $GITHUB_ENV\n",[21,2685,2686],{},"通过 Github API 获取目标软件的最新版本号，存入 $GITHUB_ENV",[289,2688,2690],{"className":2598,"code":2689,"language":2600,"meta":196,"style":196},"- name: Export latest geoip version\n  run: |\n    NEW_VERSION=`curl -s https://api.github.com/repos/{user_name}/{repo_name}/releases/latest | jq -r '.tag_name' | sed 's/v//g'`\n    echo \"NEW_VERSION=$NEW_VERSION\" >> $GITHUB_ENV\n",[241,2691,2692,2703,2711,2716],{"__ignoreMap":196},[297,2693,2694,2696,2698,2700],{"class":299,"line":300},[297,2695,2607],{"class":307},[297,2697,2610],{"class":672},[297,2699,2613],{"class":307},[297,2701,2702],{"class":311},"Export latest geoip version\n",[297,2704,2705,2707,2709],{"class":299,"line":3},[297,2706,2668],{"class":672},[297,2708,2613],{"class":307},[297,2710,2673],{"class":335},[297,2712,2713],{"class":299,"line":431},[297,2714,2715],{"class":311},"    NEW_VERSION=`curl -s https://api.github.com/repos/{user_name}/{repo_name}/releases/latest | jq -r '.tag_name' | sed 's/v//g'`\n",[297,2717,2718],{"class":299,"line":446},[297,2719,2720],{"class":311},"    echo \"NEW_VERSION=$NEW_VERSION\" >> $GITHUB_ENV\n",[21,2722,2723],{},"当仓库内 spec 版本号与软件最新版本号不一致时，运行 rpmdev-bumpspec",[289,2725,2727],{"className":2598,"code":2726,"language":2600,"meta":196,"style":196},"- name: Run rpmdev-bumpspec action\n  if: ${{ env.CURRENT_VERSION != env.NEW_VERSION }}\n  uses: netoarmando/rpmdev-bumpspec-action@v1\n  with: \n    specfile: '{filename}'\n    new: ${{ env.NEW_VERSION }}\n    userstring: \"username \u003Cusername@mail.com>\"\n",[241,2728,2729,2740,2750,2759,2766,2776,2786],{"__ignoreMap":196},[297,2730,2731,2733,2735,2737],{"class":299,"line":300},[297,2732,2607],{"class":307},[297,2734,2610],{"class":672},[297,2736,2613],{"class":307},[297,2738,2739],{"class":311},"Run rpmdev-bumpspec action\n",[297,2741,2742,2745,2747],{"class":299,"line":3},[297,2743,2744],{"class":672},"  if",[297,2746,2613],{"class":307},[297,2748,2749],{"class":311},"${{ env.CURRENT_VERSION != env.NEW_VERSION }}\n",[297,2751,2752,2754,2756],{"class":299,"line":431},[297,2753,2621],{"class":672},[297,2755,2613],{"class":307},[297,2757,2758],{"class":311},"netoarmando/rpmdev-bumpspec-action@v1\n",[297,2760,2761,2763],{"class":299,"line":446},[297,2762,2631],{"class":672},[297,2764,2765],{"class":307},": \n",[297,2767,2768,2771,2773],{"class":299,"line":460},[297,2769,2770],{"class":672},"    specfile",[297,2772,2613],{"class":307},[297,2774,2775],{"class":311},"'{filename}'\n",[297,2777,2778,2781,2783],{"class":299,"line":958},[297,2779,2780],{"class":672},"    new",[297,2782,2613],{"class":307},[297,2784,2785],{"class":311},"${{ env.NEW_VERSION }}\n",[297,2787,2788,2791,2793],{"class":299,"line":966},[297,2789,2790],{"class":672},"    userstring",[297,2792,2613],{"class":307},[297,2794,2795],{"class":311},"\"username \u003Cusername@mail.com>\"\n",[21,2797,2798],{},"当仓库内 spec 版本号与软件最新版本号不一致时，保存更改，推入仓库。",[289,2800,2802],{"className":2598,"code":2801,"language":2600,"meta":196,"style":196},"- name: Commit changes\n  if: ${{ env.CURRENT_VERSION != env.NEW_VERSION }}\n  run: |\n    git config --local user.email \"zhullyb@outlook.com\"\n    git config --local user.name \"zhullyb\"\n    git add .\n    git commit -m \"upgpkg: v2ray-geoip@${{ env.NEW_VERSION }}\"\n    git push\n",[241,2803,2804,2815,2823,2831,2836,2841,2846,2851],{"__ignoreMap":196},[297,2805,2806,2808,2810,2812],{"class":299,"line":300},[297,2807,2607],{"class":307},[297,2809,2610],{"class":672},[297,2811,2613],{"class":307},[297,2813,2814],{"class":311},"Commit changes\n",[297,2816,2817,2819,2821],{"class":299,"line":3},[297,2818,2744],{"class":672},[297,2820,2613],{"class":307},[297,2822,2749],{"class":311},[297,2824,2825,2827,2829],{"class":299,"line":431},[297,2826,2668],{"class":672},[297,2828,2613],{"class":307},[297,2830,2673],{"class":335},[297,2832,2833],{"class":299,"line":446},[297,2834,2835],{"class":311},"    git config --local user.email \"zhullyb@outlook.com\"\n",[297,2837,2838],{"class":299,"line":460},[297,2839,2840],{"class":311},"    git config --local user.name \"zhullyb\"\n",[297,2842,2843],{"class":299,"line":958},[297,2844,2845],{"class":311},"    git add .\n",[297,2847,2848],{"class":299,"line":966},[297,2849,2850],{"class":311},"    git commit -m \"upgpkg: v2ray-geoip@${{ env.NEW_VERSION }}\"\n",[297,2852,2853],{"class":299,"line":974},[297,2854,2855],{"class":311},"    git push\n",[21,2857,2858],{},"（可选）当仓库内 spec 版本号与软件最新版本号不一致时，通过 curl 语句触发 copr 的 webhook，让 copr 进行构建。",[289,2860,2862],{"className":2598,"code":2861,"language":2600,"meta":196,"style":196},"- name: trigger copr webhook\n  if: ${{ env.CURRENT_VERSION != env.NEW_VERSION }}\n  run: |\n    curl -X POST ${{ secrets.COPR_HOOK_URL }}v2ray-geoip/\n",[241,2863,2864,2875,2883,2891],{"__ignoreMap":196},[297,2865,2866,2868,2870,2872],{"class":299,"line":300},[297,2867,2607],{"class":307},[297,2869,2610],{"class":672},[297,2871,2613],{"class":307},[297,2873,2874],{"class":311},"trigger copr webhook\n",[297,2876,2877,2879,2881],{"class":299,"line":3},[297,2878,2744],{"class":672},[297,2880,2613],{"class":307},[297,2882,2749],{"class":311},[297,2884,2885,2887,2889],{"class":299,"line":431},[297,2886,2668],{"class":672},[297,2888,2613],{"class":307},[297,2890,2673],{"class":335},[297,2892,2893],{"class":299,"line":446},[297,2894,2895],{"class":311},"    curl -X POST ${{ secrets.COPR_HOOK_URL }}v2ray-geoip/\n",[21,2897,2898,2899],{},"最终的 yml 文件可以参考",[48,2900,2903],{"href":2901,"rel":2902},"https://github.com/v2rayA/v2raya-copr/blob/master/.github/workflows/upgpkg-v2ray-geoip.yml",[52],"这里",[547,2905,2906],{},"html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}",{"title":196,"searchDepth":3,"depth":3,"links":2908},[],127,1761699272823]