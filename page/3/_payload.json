[{"data":1,"prerenderedAt":6051},["ShallowReactive",2],{"randomIndex/page/3/":3,"index-page-3":4,"posts-total":6050},0,[5,438,1652,2092,2369,2758,3145,3203,4749,5311],{"title":6,"date":7,"path":8,"tags":9,"body":12},"为 Hexo 添加 follow 认证","2024-10-23 23:11:32","/2024/10/23/follow-cert-for-hexo-feed",[10,11],"Hexo","Follow",{"type":13,"value":14,"toc":434},"minimark",[15,19,23,30,33,36,46,53,59,65,76,109,168,171,174,185,196,295,301,306,309,361,414,417,420,422,430],[16,17,18],"h2",{"id":18},"前言",[20,21,22],"p",{},"Follow 从今天开始不需要邀请码就可以开始使用部分功能了，除了只能订阅五个订阅源、成就系统没开放、签到不能获得 power 以外，还有部分功能没有解锁（如下图）",[20,24,25],{},[26,27],"img",{"alt":28,"src":29},"","https://static.031130.xyz/uploads/2024/10/23/d3a69a7bcde58.webp",[20,31,32],{},"我注意到 Follow 的认证机制目前对于 Hexo 用户还是相对不友好的，起码对于 Hexo 用户来说。",[20,34,35],{},"「内容」方案要我们在网页（也可能是 rss，follow 没有给出非常明确的指示）上添加非常明显的一段文本，我并不是很喜欢这种行为。",[37,38,43],"pre",{"className":39,"code":41,"language":42},[40],"language-text","This message is used to verify that this feed (feedId:56144913816835091) belongs to me (userId:70410173045150720). Join me in enjoying the next generation information browser https://follow.is.\n","text",[44,45,41],"code",{"__ignoreMap":28},[20,47,48,49,52],{},"「描述」方案要求我们在 rss 的 xml 文件的 ",[44,50,51],{},"\u003Cdescription />"," 字段添加一段丑丑的代码。无论是使用 follow 的读者还是其他 rss reader 的读者都会看到博客的 description 中含有一段丑丑的代码，这对于强迫症的我来说是无法忍受的，更别提 atom 类型的订阅根本没有这个字段。",[37,54,57],{"className":55,"code":56,"language":42},[40],"feedId:56144913816835091+userId:70410173045150720\n",[44,58,56],{"__ignoreMap":28},[20,60,61],{},[26,62],{"alt":63,"src":64},"即使是在 follow 中，这样的文字也是非常眨眼","https://static.031130.xyz/uploads/2024/10/23/10dfda54f4dcc.webp",[20,66,67,68,71,72,75],{},"「RSS 标签」方案是我唯一能接受的方案，这个方案需要我们在 rss 的 xml 文件中添加一个名为 ",[44,69,70],{},"\u003Cfollow_challenge>"," 的标签，或者是 json 文件中的一个 ",[44,73,74],{},"follow_challenge"," 对象。虽然具有一定的侵入性，但对于读者来说不会受到影响——应该没有除了 follow 以外的 rss reader 对这个字段进行解析。",[37,77,81],{"className":78,"code":79,"language":80,"meta":28,"style":28},"language-xml shiki shiki-themes github-light github-dark","\u003Cfollow_challenge>\n    \u003CfeedId>56144913816835091\u003C/feedId>\n    \u003CuserId>70410173045150720\u003C/userId>\n\u003C/follow_challenge>\n","xml",[44,82,83,91,97,103],{"__ignoreMap":28},[84,85,88],"span",{"class":86,"line":87},"line",1,[84,89,90],{},"\u003Cfollow_challenge>\n",[84,92,94],{"class":86,"line":93},2,[84,95,96],{},"    \u003CfeedId>56144913816835091\u003C/feedId>\n",[84,98,100],{"class":86,"line":99},3,[84,101,102],{},"    \u003CuserId>70410173045150720\u003C/userId>\n",[84,104,106],{"class":86,"line":105},4,[84,107,108],{},"\u003C/follow_challenge>\n",[37,110,114],{"className":111,"code":112,"language":113,"meta":28,"style":28},"language-json shiki shiki-themes github-light github-dark","{\n  \"follow_challenge\": {\n    \"feed_id\": \"56144913816835091\",\n    \"user_id\": \"70410173045150720\"\n  }\n}\n","json",[44,115,116,122,131,146,156,162],{"__ignoreMap":28},[84,117,118],{"class":86,"line":87},[84,119,121],{"class":120},"sVt8B","{\n",[84,123,124,128],{"class":86,"line":93},[84,125,127],{"class":126},"sj4cs","  \"follow_challenge\"",[84,129,130],{"class":120},": {\n",[84,132,133,136,139,143],{"class":86,"line":99},[84,134,135],{"class":126},"    \"feed_id\"",[84,137,138],{"class":120},": ",[84,140,142],{"class":141},"sZZnC","\"56144913816835091\"",[84,144,145],{"class":120},",\n",[84,147,148,151,153],{"class":86,"line":105},[84,149,150],{"class":126},"    \"user_id\"",[84,152,138],{"class":120},[84,154,155],{"class":141},"\"70410173045150720\"\n",[84,157,159],{"class":86,"line":158},5,[84,160,161],{"class":120},"  }\n",[84,163,165],{"class":86,"line":164},6,[84,166,167],{"class":120},"}\n",[16,169,170],{"id":170},"正篇",[20,172,173],{},"那么问题来了，Hexo 用户应该如何使用「RSS 标签」的方案给我们的博客进行 Follow 认证呢？",[20,175,176,177,184],{},"首先确认前提，我在使用 ",[178,179,183],"a",{"href":180,"rel":181},"https://github.com/hexojs/hexo-generator-feed",[182],"nofollow","hexo-generator-feed"," 这个 npm 库来生成 Hexo 博客的 rss 订阅文件。",[20,186,187,188,191,192,195],{},"在项目的 README 文件中，我们知道可以在 ",[44,189,190],{},"_config.yml"," 文件中指定 rss 生成时使用的模板文件。模板文件位于 ",[44,193,194],{},"./node_modules/hexo-generator-feed"," 路径下，atom.xml 和 rss2.xml 就是这个库所使用的模板文件。我正在使用 atom，所以我把 atom.xml 复制一份放到博客的根目录下魔改模板。下面是 _config.yml 的 feed 配置，你可以看到我在最后两行指定了 template 模板文件。",[37,197,201],{"className":198,"code":199,"language":200,"meta":28,"style":28},"language-yml shiki shiki-themes github-light github-dark","feed:\n    type: atom\n    path: rss.xml\n    limit: 0\n    hub:\n    content: true\n    content_limit:\n    content_limit_delim: ' '\n    template:\n      - atom.xml\n","yml",[44,202,203,212,222,232,242,249,259,267,278,286],{"__ignoreMap":28},[84,204,205,209],{"class":86,"line":87},[84,206,208],{"class":207},"s9eBZ","feed",[84,210,211],{"class":120},":\n",[84,213,214,217,219],{"class":86,"line":93},[84,215,216],{"class":207},"    type",[84,218,138],{"class":120},[84,220,221],{"class":141},"atom\n",[84,223,224,227,229],{"class":86,"line":99},[84,225,226],{"class":207},"    path",[84,228,138],{"class":120},[84,230,231],{"class":141},"rss.xml\n",[84,233,234,237,239],{"class":86,"line":105},[84,235,236],{"class":207},"    limit",[84,238,138],{"class":120},[84,240,241],{"class":126},"0\n",[84,243,244,247],{"class":86,"line":158},[84,245,246],{"class":207},"    hub",[84,248,211],{"class":120},[84,250,251,254,256],{"class":86,"line":164},[84,252,253],{"class":207},"    content",[84,255,138],{"class":120},[84,257,258],{"class":126},"true\n",[84,260,262,265],{"class":86,"line":261},7,[84,263,264],{"class":207},"    content_limit",[84,266,211],{"class":120},[84,268,270,273,275],{"class":86,"line":269},8,[84,271,272],{"class":207},"    content_limit_delim",[84,274,138],{"class":120},[84,276,277],{"class":141},"' '\n",[84,279,281,284],{"class":86,"line":280},9,[84,282,283],{"class":207},"    template",[84,285,211],{"class":120},[84,287,289,292],{"class":86,"line":288},10,[84,290,291],{"class":120},"      - ",[84,293,294],{"class":141},"atom.xml\n",[20,296,297,298,300],{},"如果是个人用途，其实可以直接硬编码，在文件的倒数第二行把我们复制的 ",[44,299,70],{}," 放进去。",[20,302,303],{},[26,304],{"alt":28,"src":305},"https://static.031130.xyz/uploads/2024/10/23/fae341d7985ea.webp",[20,307,308],{},"或者如果我们想要写得考究一些，那么可以是下面这个样子的",[37,310,312],{"className":198,"code":311,"language":200,"meta":28,"style":28},"feed:\n  template:\n    - atom.xml\n  follow_challenge:\n    feedId: 56144913816835091\n    userId: 70410173045150720\n",[44,313,314,320,327,334,341,351],{"__ignoreMap":28},[84,315,316,318],{"class":86,"line":87},[84,317,208],{"class":207},[84,319,211],{"class":120},[84,321,322,325],{"class":86,"line":93},[84,323,324],{"class":207},"  template",[84,326,211],{"class":120},[84,328,329,332],{"class":86,"line":99},[84,330,331],{"class":120},"    - ",[84,333,294],{"class":141},[84,335,336,339],{"class":86,"line":105},[84,337,338],{"class":207},"  follow_challenge",[84,340,211],{"class":120},[84,342,343,346,348],{"class":86,"line":158},[84,344,345],{"class":207},"    feedId",[84,347,138],{"class":120},[84,349,350],{"class":126},"56144913816835091\n",[84,352,353,356,358],{"class":86,"line":164},[84,354,355],{"class":207},"    userId",[84,357,138],{"class":120},[84,359,360],{"class":126},"70410173045150720\n",[37,362,364],{"className":78,"code":363,"language":80,"meta":28,"style":28},"\u003C!-- //... -->\n  {% endfor %}\n  {% if config.feed.follow_challenge %}\n    \u003Cfollow_challenge>\n      \u003CfeedId>{{ config.feed.follow_challenge.feedId }}\u003C/feedId>\n      \u003CuserId>{{ config.feed.follow_challenge.userId }}\u003C/userId>\n    \u003C/follow_challenge>\n  {% endif %}\n\u003C/feed>\n",[44,365,366,374,379,384,389,394,399,404,409],{"__ignoreMap":28},[84,367,368,371],{"class":86,"line":87},[84,369,370],{},"\u003C!--",[84,372,373],{}," //... -->\n",[84,375,376],{"class":86,"line":93},[84,377,378],{},"  {% endfor %}\n",[84,380,381],{"class":86,"line":99},[84,382,383],{},"  {% if config.feed.follow_challenge %}\n",[84,385,386],{"class":86,"line":105},[84,387,388],{},"    \u003Cfollow_challenge>\n",[84,390,391],{"class":86,"line":158},[84,392,393],{},"      \u003CfeedId>{{ config.feed.follow_challenge.feedId }}\u003C/feedId>\n",[84,395,396],{"class":86,"line":164},[84,397,398],{},"      \u003CuserId>{{ config.feed.follow_challenge.userId }}\u003C/userId>\n",[84,400,401],{"class":86,"line":261},[84,402,403],{},"    \u003C/follow_challenge>\n",[84,405,406],{"class":86,"line":269},[84,407,408],{},"  {% endif %}\n",[84,410,411],{"class":86,"line":280},[84,412,413],{},"\u003C/feed>\n",[415,416],"hr",{},[20,418,419],{},"（说起来，这两个小改动一改，其实完全可以上传 npmjs.com 作为一个新的插件，不过我有点懒了）",[415,421],{},[20,423,424,425],{},"文末附一个 follow 邀请码: ",[84,426,429],{"className":427},[428],"heimu","6O0oBazB9s",[431,432,433],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}",{"title":28,"searchDepth":93,"depth":93,"links":435},[436,437],{"id":18,"depth":93,"text":18},{"id":170,"depth":93,"text":170},{"title":439,"date":440,"path":441,"tags":442,"body":445},"使用 GPT 对 waline 的评论进行审查","2024-10-12 16:11:06","/2024/10/12/use-gpt-to-review-waline-comments",[443,444],"waline","GPT",{"type":13,"value":446,"toc":1650},[447,450,465,468,474,483,492,1109,1124,1127,1130,1133,1413,1416,1427,1433,1451,1456,1586,1591,1639,1642,1647],[20,448,449],{},"前一阵子收到了这么一条来自 waline 的评论提醒。",[451,452,453],"blockquote",{},[20,454,455,456,460,461],{},"New comment on 竹林里有冰的博客\n【网站名称】：竹林里有冰的博客\n【评论者昵称】：专业数据库\n【评论者邮箱】：",[178,457,459],{"href":458},"mailto:rakhiranijhhg@gmail.com","rakhiranijhhg@gmail.com","\n【内容】：总之，优化专业数据库对于保持数据准确性、提高系统性能和推动业务成功至关重要。通过遵循本文中概述的策略，您可以提高数据库操作的效率并释放新的增长机会。\n【地址】：",[178,462,463],{"href":463,"rel":464},"https://zhul.in/2021/04/04/yay-more/#66f7a8889ab78865d5f5ae19",[182],[20,466,467],{},"评论的内容不仅透露着一股 AI 味，还和文章内容可谓是一点关系都没有，点开评论者的网站一看，一股塑料机翻味，怕是又是个来蹭 SEO 的广告哥。",[20,469,470],{},[26,471],{"alt":472,"src":473},"广告哥留下的网站","https://static.031130.xyz/uploads/2024/10/07/4673580090861.webp",[20,475,476,477,482],{},"根据 ",[178,478,481],{"href":479,"rel":480},"https://waline.js.org/advanced/faq.html#%E5%8F%91%E5%B8%83%E8%AF%84%E8%AE%BA%E5%BE%88%E6%85%A2%E6%80%8E%E4%B9%88%E5%8A%9E",[182],"waline 的官方文档","所言，waline 是使用了 Akismet 提供的垃圾内容检测服务的。可惜它似乎对 AI 生成的垃圾没有分辨能力。因此我计划使用 GPT 代替 Akismet 对 waline 的新评论进行审核。",[20,484,485,486,491],{},"walinejs/plugin 提供了一个 ",[178,487,490],{"href":488,"rel":489},"https://github.com/walinejs/plugins/blob/master/packages/tencent-tms/index.js",[182],"tencent-cms"," 的插件，功能是使用腾讯云的内容审查接口审查评论内容，这和我们需要的功能很像，主体部分和调用方法可以直接借鉴。",[37,493,497],{"className":494,"code":495,"language":496,"meta":28,"style":28},"language-javascript shiki shiki-themes github-light github-dark","// index.js\n\nconst tencentcloud = require(\"tencentcloud-sdk-nodejs-tms\");\nconst TmsClient = tencentcloud.tms.v20201229.Client;\n\n\nmodule.exports = function({secretId, secretKey, region}) {\n  if (!secretId || !secretKey || !region) {\n    return {};\n  }\n\n  const clientConfig = {\n    credential: {\n      secretId,\n      secretKey,\n    },\n    region,\n    profile: {\n      httpProfile: {\n        endpoint: \"tms.tencentcloudapi.com\",\n      },\n    },\n  };\n  \n  return {\n    hooks: {\n      async preSave(data) {\n        const { userInfo } = this.ctx.state;\n        const isAdmin = userInfo.type === 'administrator';\n        // ignore admin comment\n        if (isAdmin) {\n          return;\n        }\n\n        const client = new TmsClient(clientConfig);\n        try {\n          const resp = await client.TextModeration({ Content: data.comment });\n          if (!resp.Suggestion) {\n            throw new Error('Suggestion is empty. Tencent Cloud TMS info:', resp);\n          }\n\n          switch(resp.Suggestion) {\n            case 'Pass':\n              data.status = 'approved';\n              break;\n            case 'Block':\n              data.status = 'spam';\n              break;\n              case 'Review':\n              default:\n                data.status = 'waiting';\n                break;\n          }\n        } catch(e) {\n          console.log(e);\n          data.status = 'waiting';\n        }\n      },\n    },\n  };\n}\n","javascript",[44,498,499,505,511,536,548,552,556,593,623,631,635,640,654,660,666,672,678,684,690,696,707,713,718,724,730,738,744,761,785,807,813,822,830,836,841,859,867,890,903,922,928,933,942,953,966,974,984,996,1003,1014,1022,1035,1043,1048,1060,1072,1084,1089,1094,1099,1104],{"__ignoreMap":28},[84,500,501],{"class":86,"line":87},[84,502,504],{"class":503},"sJ8bj","// index.js\n",[84,506,507],{"class":86,"line":93},[84,508,510],{"emptyLinePlaceholder":509},true,"\n",[84,512,513,517,520,523,527,530,533],{"class":86,"line":99},[84,514,516],{"class":515},"szBVR","const",[84,518,519],{"class":126}," tencentcloud",[84,521,522],{"class":515}," =",[84,524,526],{"class":525},"sScJk"," require",[84,528,529],{"class":120},"(",[84,531,532],{"class":141},"\"tencentcloud-sdk-nodejs-tms\"",[84,534,535],{"class":120},");\n",[84,537,538,540,543,545],{"class":86,"line":105},[84,539,516],{"class":515},[84,541,542],{"class":126}," TmsClient",[84,544,522],{"class":515},[84,546,547],{"class":120}," tencentcloud.tms.v20201229.Client;\n",[84,549,550],{"class":86,"line":158},[84,551,510],{"emptyLinePlaceholder":509},[84,553,554],{"class":86,"line":164},[84,555,510],{"emptyLinePlaceholder":509},[84,557,558,561,564,567,569,572,575,579,582,585,587,590],{"class":86,"line":261},[84,559,560],{"class":126},"module",[84,562,563],{"class":120},".",[84,565,566],{"class":126},"exports",[84,568,522],{"class":515},[84,570,571],{"class":515}," function",[84,573,574],{"class":120},"({",[84,576,578],{"class":577},"s4XuR","secretId",[84,580,581],{"class":120},", ",[84,583,584],{"class":577},"secretKey",[84,586,581],{"class":120},[84,588,589],{"class":577},"region",[84,591,592],{"class":120},"}) {\n",[84,594,595,598,601,604,607,610,613,616,618,620],{"class":86,"line":269},[84,596,597],{"class":515},"  if",[84,599,600],{"class":120}," (",[84,602,603],{"class":515},"!",[84,605,606],{"class":120},"secretId ",[84,608,609],{"class":515},"||",[84,611,612],{"class":515}," !",[84,614,615],{"class":120},"secretKey ",[84,617,609],{"class":515},[84,619,612],{"class":515},[84,621,622],{"class":120},"region) {\n",[84,624,625,628],{"class":86,"line":280},[84,626,627],{"class":515},"    return",[84,629,630],{"class":120}," {};\n",[84,632,633],{"class":86,"line":288},[84,634,161],{"class":120},[84,636,638],{"class":86,"line":637},11,[84,639,510],{"emptyLinePlaceholder":509},[84,641,643,646,649,651],{"class":86,"line":642},12,[84,644,645],{"class":515},"  const",[84,647,648],{"class":126}," clientConfig",[84,650,522],{"class":515},[84,652,653],{"class":120}," {\n",[84,655,657],{"class":86,"line":656},13,[84,658,659],{"class":120},"    credential: {\n",[84,661,663],{"class":86,"line":662},14,[84,664,665],{"class":120},"      secretId,\n",[84,667,669],{"class":86,"line":668},15,[84,670,671],{"class":120},"      secretKey,\n",[84,673,675],{"class":86,"line":674},16,[84,676,677],{"class":120},"    },\n",[84,679,681],{"class":86,"line":680},17,[84,682,683],{"class":120},"    region,\n",[84,685,687],{"class":86,"line":686},18,[84,688,689],{"class":120},"    profile: {\n",[84,691,693],{"class":86,"line":692},19,[84,694,695],{"class":120},"      httpProfile: {\n",[84,697,699,702,705],{"class":86,"line":698},20,[84,700,701],{"class":120},"        endpoint: ",[84,703,704],{"class":141},"\"tms.tencentcloudapi.com\"",[84,706,145],{"class":120},[84,708,710],{"class":86,"line":709},21,[84,711,712],{"class":120},"      },\n",[84,714,716],{"class":86,"line":715},22,[84,717,677],{"class":120},[84,719,721],{"class":86,"line":720},23,[84,722,723],{"class":120},"  };\n",[84,725,727],{"class":86,"line":726},24,[84,728,729],{"class":120},"  \n",[84,731,733,736],{"class":86,"line":732},25,[84,734,735],{"class":515},"  return",[84,737,653],{"class":120},[84,739,741],{"class":86,"line":740},26,[84,742,743],{"class":120},"    hooks: {\n",[84,745,747,750,753,755,758],{"class":86,"line":746},27,[84,748,749],{"class":515},"      async",[84,751,752],{"class":525}," preSave",[84,754,529],{"class":120},[84,756,757],{"class":577},"data",[84,759,760],{"class":120},") {\n",[84,762,764,767,770,773,776,779,782],{"class":86,"line":763},28,[84,765,766],{"class":515},"        const",[84,768,769],{"class":120}," { ",[84,771,772],{"class":126},"userInfo",[84,774,775],{"class":120}," } ",[84,777,778],{"class":515},"=",[84,780,781],{"class":126}," this",[84,783,784],{"class":120},".ctx.state;\n",[84,786,788,790,793,795,798,801,804],{"class":86,"line":787},29,[84,789,766],{"class":515},[84,791,792],{"class":126}," isAdmin",[84,794,522],{"class":515},[84,796,797],{"class":120}," userInfo.type ",[84,799,800],{"class":515},"===",[84,802,803],{"class":141}," 'administrator'",[84,805,806],{"class":120},";\n",[84,808,810],{"class":86,"line":809},30,[84,811,812],{"class":503},"        // ignore admin comment\n",[84,814,816,819],{"class":86,"line":815},31,[84,817,818],{"class":515},"        if",[84,820,821],{"class":120}," (isAdmin) {\n",[84,823,825,828],{"class":86,"line":824},32,[84,826,827],{"class":515},"          return",[84,829,806],{"class":120},[84,831,833],{"class":86,"line":832},33,[84,834,835],{"class":120},"        }\n",[84,837,839],{"class":86,"line":838},34,[84,840,510],{"emptyLinePlaceholder":509},[84,842,844,846,849,851,854,856],{"class":86,"line":843},35,[84,845,766],{"class":515},[84,847,848],{"class":126}," client",[84,850,522],{"class":515},[84,852,853],{"class":515}," new",[84,855,542],{"class":525},[84,857,858],{"class":120},"(clientConfig);\n",[84,860,862,865],{"class":86,"line":861},36,[84,863,864],{"class":515},"        try",[84,866,653],{"class":120},[84,868,870,873,876,878,881,884,887],{"class":86,"line":869},37,[84,871,872],{"class":515},"          const",[84,874,875],{"class":126}," resp",[84,877,522],{"class":515},[84,879,880],{"class":515}," await",[84,882,883],{"class":120}," client.",[84,885,886],{"class":525},"TextModeration",[84,888,889],{"class":120},"({ Content: data.comment });\n",[84,891,893,896,898,900],{"class":86,"line":892},38,[84,894,895],{"class":515},"          if",[84,897,600],{"class":120},[84,899,603],{"class":515},[84,901,902],{"class":120},"resp.Suggestion) {\n",[84,904,906,909,911,914,916,919],{"class":86,"line":905},39,[84,907,908],{"class":515},"            throw",[84,910,853],{"class":515},[84,912,913],{"class":525}," Error",[84,915,529],{"class":120},[84,917,918],{"class":141},"'Suggestion is empty. Tencent Cloud TMS info:'",[84,920,921],{"class":120},", resp);\n",[84,923,925],{"class":86,"line":924},40,[84,926,927],{"class":120},"          }\n",[84,929,931],{"class":86,"line":930},41,[84,932,510],{"emptyLinePlaceholder":509},[84,934,936,939],{"class":86,"line":935},42,[84,937,938],{"class":515},"          switch",[84,940,941],{"class":120},"(resp.Suggestion) {\n",[84,943,945,948,951],{"class":86,"line":944},43,[84,946,947],{"class":515},"            case",[84,949,950],{"class":141}," 'Pass'",[84,952,211],{"class":120},[84,954,956,959,961,964],{"class":86,"line":955},44,[84,957,958],{"class":120},"              data.status ",[84,960,778],{"class":515},[84,962,963],{"class":141}," 'approved'",[84,965,806],{"class":120},[84,967,969,972],{"class":86,"line":968},45,[84,970,971],{"class":515},"              break",[84,973,806],{"class":120},[84,975,977,979,982],{"class":86,"line":976},46,[84,978,947],{"class":515},[84,980,981],{"class":141}," 'Block'",[84,983,211],{"class":120},[84,985,987,989,991,994],{"class":86,"line":986},47,[84,988,958],{"class":120},[84,990,778],{"class":515},[84,992,993],{"class":141}," 'spam'",[84,995,806],{"class":120},[84,997,999,1001],{"class":86,"line":998},48,[84,1000,971],{"class":515},[84,1002,806],{"class":120},[84,1004,1006,1009,1012],{"class":86,"line":1005},49,[84,1007,1008],{"class":515},"              case",[84,1010,1011],{"class":141}," 'Review'",[84,1013,211],{"class":120},[84,1015,1017,1020],{"class":86,"line":1016},50,[84,1018,1019],{"class":515},"              default",[84,1021,211],{"class":120},[84,1023,1025,1028,1030,1033],{"class":86,"line":1024},51,[84,1026,1027],{"class":120},"                data.status ",[84,1029,778],{"class":515},[84,1031,1032],{"class":141}," 'waiting'",[84,1034,806],{"class":120},[84,1036,1038,1041],{"class":86,"line":1037},52,[84,1039,1040],{"class":515},"                break",[84,1042,806],{"class":120},[84,1044,1046],{"class":86,"line":1045},53,[84,1047,927],{"class":120},[84,1049,1051,1054,1057],{"class":86,"line":1050},54,[84,1052,1053],{"class":120},"        } ",[84,1055,1056],{"class":515},"catch",[84,1058,1059],{"class":120},"(e) {\n",[84,1061,1063,1066,1069],{"class":86,"line":1062},55,[84,1064,1065],{"class":120},"          console.",[84,1067,1068],{"class":525},"log",[84,1070,1071],{"class":120},"(e);\n",[84,1073,1075,1078,1080,1082],{"class":86,"line":1074},56,[84,1076,1077],{"class":120},"          data.status ",[84,1079,778],{"class":515},[84,1081,1032],{"class":141},[84,1083,806],{"class":120},[84,1085,1087],{"class":86,"line":1086},57,[84,1088,835],{"class":120},[84,1090,1092],{"class":86,"line":1091},58,[84,1093,712],{"class":120},[84,1095,1097],{"class":86,"line":1096},59,[84,1098,677],{"class":120},[84,1100,1102],{"class":86,"line":1101},60,[84,1103,723],{"class":120},[84,1105,1107],{"class":86,"line":1106},61,[84,1108,167],{"class":120},[20,1110,1111,1112,1117,1118,1123],{},"可以看到，我们需要在这个被 module.exports 导出的函数中，return 一个对象，如果使用 hooks 编写的话可以调用",[178,1113,1116],{"href":1114,"rel":1115},"https://waline.js.org/reference/server/config.html#%E8%AF%84%E8%AE%BA-hooks",[182],"一些生命周期 hook",": 在 preSave 阶段，我们可以通过标注 data.status 参数来反馈评论类型。approved 为接受，spam 为垃圾邮件，waiting 为等待人工审核；除此之外，还可以",[178,1119,1122],{"href":1120,"rel":1121},"https://waline.js.org/reference/server/plugin.html#%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%88%B6%E4%BD%9C",[182],"基于 Koa 中间件制作插件","，文档中有具体的描述。",[20,1125,1126],{},"index.js 顶部是需要引入的依赖。当然，如果需要引入外部的第三方包的话，需要在 packages.json 中加入需要的依赖（使用包管理器的命令进行安装）。",[20,1128,1129],{},"有了这些基础知识，就能手搓一个基于 GPT 的评论审查插件。",[20,1131,1132],{},"OpenAI 提供的是标准的 Restful API，本身的鉴权逻辑也不复杂，其实没必要调用 SDK，直接使用 fetch 调用就行。",[37,1134,1136],{"className":494,"code":1135,"language":496,"meta":28,"style":28},"const doReview = async (comment) => {\n  const response = await fetch(openaiBaseUrl + '/v1/chat/completions', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${openaiApiKey}`,\n    },\n    body: JSON.stringify({\n      model: openaiModel,\n      messages: [\n        {\n          role: 'system',\n          content: prompt\n        },\n        {\n          role: 'user',\n          content: comment,\n        },\n      ],\n    }),\n  });\n  const data = await response.json();\n  if (data && data.choices && data.choices.length > 0) {\n    return data.choices[0].message.content;\n  } else {\n    return 'waiting';\n  }\n}\n",[44,1137,1138,1163,1189,1199,1204,1216,1234,1238,1254,1259,1264,1269,1279,1284,1289,1293,1302,1307,1311,1316,1321,1326,1345,1374,1387,1397,1405,1409],{"__ignoreMap":28},[84,1139,1140,1142,1145,1147,1150,1152,1155,1158,1161],{"class":86,"line":87},[84,1141,516],{"class":515},[84,1143,1144],{"class":525}," doReview",[84,1146,522],{"class":515},[84,1148,1149],{"class":515}," async",[84,1151,600],{"class":120},[84,1153,1154],{"class":577},"comment",[84,1156,1157],{"class":120},") ",[84,1159,1160],{"class":515},"=>",[84,1162,653],{"class":120},[84,1164,1165,1167,1170,1172,1174,1177,1180,1183,1186],{"class":86,"line":93},[84,1166,645],{"class":515},[84,1168,1169],{"class":126}," response",[84,1171,522],{"class":515},[84,1173,880],{"class":515},[84,1175,1176],{"class":525}," fetch",[84,1178,1179],{"class":120},"(openaiBaseUrl ",[84,1181,1182],{"class":515},"+",[84,1184,1185],{"class":141}," '/v1/chat/completions'",[84,1187,1188],{"class":120},", {\n",[84,1190,1191,1194,1197],{"class":86,"line":99},[84,1192,1193],{"class":120},"    method: ",[84,1195,1196],{"class":141},"'POST'",[84,1198,145],{"class":120},[84,1200,1201],{"class":86,"line":105},[84,1202,1203],{"class":120},"    headers: {\n",[84,1205,1206,1209,1211,1214],{"class":86,"line":158},[84,1207,1208],{"class":141},"      'Content-Type'",[84,1210,138],{"class":120},[84,1212,1213],{"class":141},"'application/json'",[84,1215,145],{"class":120},[84,1217,1218,1221,1223,1226,1229,1232],{"class":86,"line":164},[84,1219,1220],{"class":141},"      'Authorization'",[84,1222,138],{"class":120},[84,1224,1225],{"class":141},"`Bearer ${",[84,1227,1228],{"class":120},"openaiApiKey",[84,1230,1231],{"class":141},"}`",[84,1233,145],{"class":120},[84,1235,1236],{"class":86,"line":261},[84,1237,677],{"class":120},[84,1239,1240,1243,1246,1248,1251],{"class":86,"line":269},[84,1241,1242],{"class":120},"    body: ",[84,1244,1245],{"class":126},"JSON",[84,1247,563],{"class":120},[84,1249,1250],{"class":525},"stringify",[84,1252,1253],{"class":120},"({\n",[84,1255,1256],{"class":86,"line":280},[84,1257,1258],{"class":120},"      model: openaiModel,\n",[84,1260,1261],{"class":86,"line":288},[84,1262,1263],{"class":120},"      messages: [\n",[84,1265,1266],{"class":86,"line":637},[84,1267,1268],{"class":120},"        {\n",[84,1270,1271,1274,1277],{"class":86,"line":642},[84,1272,1273],{"class":120},"          role: ",[84,1275,1276],{"class":141},"'system'",[84,1278,145],{"class":120},[84,1280,1281],{"class":86,"line":656},[84,1282,1283],{"class":120},"          content: prompt\n",[84,1285,1286],{"class":86,"line":662},[84,1287,1288],{"class":120},"        },\n",[84,1290,1291],{"class":86,"line":668},[84,1292,1268],{"class":120},[84,1294,1295,1297,1300],{"class":86,"line":674},[84,1296,1273],{"class":120},[84,1298,1299],{"class":141},"'user'",[84,1301,145],{"class":120},[84,1303,1304],{"class":86,"line":680},[84,1305,1306],{"class":120},"          content: comment,\n",[84,1308,1309],{"class":86,"line":686},[84,1310,1288],{"class":120},[84,1312,1313],{"class":86,"line":692},[84,1314,1315],{"class":120},"      ],\n",[84,1317,1318],{"class":86,"line":698},[84,1319,1320],{"class":120},"    }),\n",[84,1322,1323],{"class":86,"line":709},[84,1324,1325],{"class":120},"  });\n",[84,1327,1328,1330,1333,1335,1337,1340,1342],{"class":86,"line":715},[84,1329,645],{"class":515},[84,1331,1332],{"class":126}," data",[84,1334,522],{"class":515},[84,1336,880],{"class":515},[84,1338,1339],{"class":120}," response.",[84,1341,113],{"class":525},[84,1343,1344],{"class":120},"();\n",[84,1346,1347,1349,1352,1355,1358,1360,1363,1366,1369,1372],{"class":86,"line":720},[84,1348,597],{"class":515},[84,1350,1351],{"class":120}," (data ",[84,1353,1354],{"class":515},"&&",[84,1356,1357],{"class":120}," data.choices ",[84,1359,1354],{"class":515},[84,1361,1362],{"class":120}," data.choices.",[84,1364,1365],{"class":126},"length",[84,1367,1368],{"class":515}," >",[84,1370,1371],{"class":126}," 0",[84,1373,760],{"class":120},[84,1375,1376,1378,1381,1384],{"class":86,"line":726},[84,1377,627],{"class":515},[84,1379,1380],{"class":120}," data.choices[",[84,1382,1383],{"class":126},"0",[84,1385,1386],{"class":120},"].message.content;\n",[84,1388,1389,1392,1395],{"class":86,"line":732},[84,1390,1391],{"class":120},"  } ",[84,1393,1394],{"class":515},"else",[84,1396,653],{"class":120},[84,1398,1399,1401,1403],{"class":86,"line":740},[84,1400,627],{"class":515},[84,1402,1032],{"class":141},[84,1404,806],{"class":120},[84,1406,1407],{"class":86,"line":746},[84,1408,161],{"class":120},[84,1410,1411],{"class":86,"line":763},[84,1412,167],{"class":120},[20,1414,1415],{},"再配合相应的封装，一款基于 GPT 的 waline 评论审核插件就完成了",[1417,1418,1419],"ul",{},[1420,1421,1422],"li",{},[178,1423,1426],{"href":1424,"rel":1425},"https://github.com/zhullyb/waline-plugin-llm-reviewer",[182],"zhullyb/waline-plugin-llm-reviewer",[20,1428,1429],{},[1430,1431,1432],"strong",{},"如何安装",[37,1434,1438],{"className":1435,"code":1436,"language":1437,"meta":28,"style":28},"language-bash shiki shiki-themes github-light github-dark","npm install waline-plugin-llm-reviewer\n","bash",[44,1439,1440],{"__ignoreMap":28},[84,1441,1442,1445,1448],{"class":86,"line":87},[84,1443,1444],{"class":525},"npm",[84,1446,1447],{"class":141}," install",[84,1449,1450],{"class":141}," waline-plugin-llm-reviewer\n",[20,1452,1453],{},[1430,1454,1455],{},"如何使用",[37,1457,1459],{"className":494,"code":1458,"language":496,"meta":28,"style":28},"// index.js\nconst Waline = require('@waline/vercel');\nconst GPTReviewer = require('waline-plugin-llm-reviewer');\n\nmodule.exports = Waline({\n  plugins: [\n    GptReviewer({\n        openaiBaseUrl: process.env.OPENAI_BASE_URL,\n        openaiModel: process.env.OPENAI_MODEL,\n        openaiApiKey: process.env.OPENAI_API_KEY,\n        openaiPrompt: process.env.OPENAI_PROMPT,\n    })\n  ]\n});\n",[44,1460,1461,1465,1483,1501,1505,1519,1524,1531,1541,1551,1561,1571,1576,1581],{"__ignoreMap":28},[84,1462,1463],{"class":86,"line":87},[84,1464,504],{"class":503},[84,1466,1467,1469,1472,1474,1476,1478,1481],{"class":86,"line":93},[84,1468,516],{"class":515},[84,1470,1471],{"class":126}," Waline",[84,1473,522],{"class":515},[84,1475,526],{"class":525},[84,1477,529],{"class":120},[84,1479,1480],{"class":141},"'@waline/vercel'",[84,1482,535],{"class":120},[84,1484,1485,1487,1490,1492,1494,1496,1499],{"class":86,"line":99},[84,1486,516],{"class":515},[84,1488,1489],{"class":126}," GPTReviewer",[84,1491,522],{"class":515},[84,1493,526],{"class":525},[84,1495,529],{"class":120},[84,1497,1498],{"class":141},"'waline-plugin-llm-reviewer'",[84,1500,535],{"class":120},[84,1502,1503],{"class":86,"line":105},[84,1504,510],{"emptyLinePlaceholder":509},[84,1506,1507,1509,1511,1513,1515,1517],{"class":86,"line":158},[84,1508,560],{"class":126},[84,1510,563],{"class":120},[84,1512,566],{"class":126},[84,1514,522],{"class":515},[84,1516,1471],{"class":525},[84,1518,1253],{"class":120},[84,1520,1521],{"class":86,"line":164},[84,1522,1523],{"class":120},"  plugins: [\n",[84,1525,1526,1529],{"class":86,"line":261},[84,1527,1528],{"class":525},"    GptReviewer",[84,1530,1253],{"class":120},[84,1532,1533,1536,1539],{"class":86,"line":269},[84,1534,1535],{"class":120},"        openaiBaseUrl: process.env.",[84,1537,1538],{"class":126},"OPENAI_BASE_URL",[84,1540,145],{"class":120},[84,1542,1543,1546,1549],{"class":86,"line":280},[84,1544,1545],{"class":120},"        openaiModel: process.env.",[84,1547,1548],{"class":126},"OPENAI_MODEL",[84,1550,145],{"class":120},[84,1552,1553,1556,1559],{"class":86,"line":288},[84,1554,1555],{"class":120},"        openaiApiKey: process.env.",[84,1557,1558],{"class":126},"OPENAI_API_KEY",[84,1560,145],{"class":120},[84,1562,1563,1566,1569],{"class":86,"line":637},[84,1564,1565],{"class":120},"        openaiPrompt: process.env.",[84,1567,1568],{"class":126},"OPENAI_PROMPT",[84,1570,145],{"class":120},[84,1572,1573],{"class":86,"line":642},[84,1574,1575],{"class":120},"    })\n",[84,1577,1578],{"class":86,"line":656},[84,1579,1580],{"class":120},"  ]\n",[84,1582,1583],{"class":86,"line":662},[84,1584,1585],{"class":120},"});\n",[20,1587,1588],{},[1430,1589,1590],{},"环境变量",[1417,1592,1593,1607,1615,1623,1631],{},[1420,1594,1595,1598,1599,1606],{},[44,1596,1597],{},"ASISMET_KEY",": Waline 使用的反垃圾评论服务，",[1430,1600,1601,1602,1605],{},"建议设置为 ",[44,1603,1604],{},"false"," 以禁用","。",[1420,1608,1609,1611,1612],{},[44,1610,1538],{},": API 基础 URL。例如 ",[44,1613,1614],{},"https://api.openai.com",[1420,1616,1617,1619,1620],{},[44,1618,1548],{},": 模型名称。例如 ",[44,1621,1622],{},"gpt-4o-mini",[1420,1624,1625,1627,1628],{},[44,1626,1558],{},": API 密钥。例如 ",[44,1629,1630],{},"ak-xxxxxx",[1420,1632,1633,1635,1636],{},[44,1634,1568],{},"(可选): 模型的提示。例如 ",[44,1637,1638],{},"这是一个评论审查: ",[20,1640,1641],{},"在 waline 中设置好对应的环境变量，使用 npm 安装好对应的包，就算大功告成了。",[20,1643,1644],{},[26,1645],{"alt":28,"src":1646},"https://static.031130.xyz/uploads/2024/10/12/45f06a78286de.webp",[431,1648,1649],{},"html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .s4XuR, html code.shiki .s4XuR{--shiki-default:#E36209;--shiki-dark:#FFAB70}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":28,"searchDepth":93,"depth":93,"links":1651},[],{"title":1653,"date":1654,"path":1655,"tags":1656,"body":1658},"基于 JavaScript 的 Hexo Fluid 主题 banner 随机背景图实现","2024-09-25 00:00:42","/2024/09/25/random-banner-backgroud-image-implement-for-hexo-fluid-with-javascript",[1657,10],"JavaScript",{"type":13,"value":1659,"toc":2079},[1660,1664,1673,1679,1684,1692,1698,1701,1704,1707,1711,1714,1718,1721,1724,1739,1745,1749,1752,1801,1804,1813,2053,2056,2064,2067,2076],[16,1661,1663],{"id":1662},"为什么要换掉随机图片-api","为什么要换掉随机图片 API",[20,1665,1666,1667,1672],{},"因为 API 太慢了。根据 ",[178,1668,1671],{"href":1669,"rel":1670},"https://pagespeed.web.dev/",[182],"PageSpeed"," 的测速，使用 API 的图片加载时间来到了整整 2.5s，这似乎有些不可忍受。",[20,1674,1675],{},[26,1676],{"alt":1677,"src":1678},"PageSpeed 测速","https://static.031130.xyz/uploads/2024/09/25/3ef1a17bca955.webp",[1680,1681,1683],"h3",{"id":1682},"vercel-冷启动问题","Vercel 冷启动问题",[20,1685,1686,1687,1691],{},"当初年少无知，为了实现 banner 随机背景图，选择了",[178,1688,1690],{"href":1689},"/2021/05/21/create-a-random-picture-api-with-vercel/","使用 vercel 创建随机图片 API","。这带来了一些问题，首先 vercel 在站点一段时间没人访问以后会进入一种类似休眠的模式，下一次启动将会经历一个冷启动（cold start）的过程。我认为这对于一个图片背景的随机 API 而言是不可忍受的。",[20,1693,1694],{},[26,1695],{"alt":1696,"src":1697},"冷启动","https://static.031130.xyz/uploads/2024/09/24/f8cb9fd7a963e.webp",[20,1699,1700],{},"观察图上就可以发现，第一次访问时花费了 1.9 秒，第二次只需要 0.5 秒，这是因为第一次是冷启动，需要花费更多时间。",[1680,1702,1703],{"id":1703},"多一次网络请求",[20,1705,1706],{},"抛开冷启动不谈，引入 API 就会导致一次额外的网络请求。访客的浏览器将会先请求随机图片 API，然后根据 API 返回的 302 相应去请求真正的图片，而且这一过程是没法并行的，只能串行执行，这会浪费更多的等待时间。",[1680,1708,1710],{"id":1709},"vercel-在大陆境内的访问质量","Vercel 在大陆境内的访问质量",[20,1712,1713],{},"Vercel 在大陆境内的访问质量其实并不算好，即使是使用了所谓的优选节点，也不一定能保证整个大陆境内大部分访客都有不错的访问质量，因此使用 Vercel 搭建 API 的行为并不是最优解。",[16,1715,1717],{"id":1716},"转向-javascript-实现","转向 JavaScript 实现",[20,1719,1720],{},"这个方案本身没多少复杂的，只不过是三年前的我对前端一无所知不敢操刀罢了。",[1680,1722,1723],{"id":1723},"删除原有的背景图",[20,1725,1726,1727,1730,1731,1734,1735,1738],{},"在 ",[44,1728,1729],{},"_config.fluid.yml"," 中，将所有的 ",[44,1732,1733],{},"banner_img:"," 字段全部置空，防止其加载默认的 ",[44,1736,1737],{},"/img/default.png"," 而白白浪费用户的流量。这个字段一共在配置文件中出现了九次。",[20,1740,1741],{},[26,1742],{"alt":1743,"src":1744},"字段置空","https://static.031130.xyz/uploads/2024/09/25/70bd0b27f5aad.webp",[1680,1746,1748],{"id":1747},"添加-js","添加 js",[20,1750,1751],{},"我们的目标是修改 id 为 banner 的 div 块的 backgroud 的 css 属性，Hexo Fluid 默认的生成内容是这样的",[37,1753,1757],{"className":1754,"code":1755,"language":1756,"meta":28,"style":28},"language-html shiki shiki-themes github-light github-dark","\u003Cdiv id=\"banner\" class=\"banner\" parallax=true style=\"background: url('/img/default.png') no-repeat center center; background-size: cover;\">\n","html",[44,1758,1759],{"__ignoreMap":28},[84,1760,1761,1764,1767,1770,1772,1775,1778,1780,1782,1785,1787,1790,1793,1795,1798],{"class":86,"line":87},[84,1762,1763],{"class":120},"\u003C",[84,1765,1766],{"class":207},"div",[84,1768,1769],{"class":525}," id",[84,1771,778],{"class":120},[84,1773,1774],{"class":141},"\"banner\"",[84,1776,1777],{"class":525}," class",[84,1779,778],{"class":120},[84,1781,1774],{"class":141},[84,1783,1784],{"class":525}," parallax",[84,1786,778],{"class":120},[84,1788,1789],{"class":141},"true",[84,1791,1792],{"class":525}," style",[84,1794,778],{"class":120},[84,1796,1797],{"class":141},"\"background: url('/img/default.png') no-repeat center center; background-size: cover;\"",[84,1799,1800],{"class":120},">\n",[20,1802,1803],{},"我们可以通过 id 来定位这个元素，修改其 style.background 属性。",[20,1805,1806,1807,1812],{},"可以在任何地方引入下面的 js 代码，在这篇名为",[178,1808,1811],{"href":1809,"rel":1810},"https://www.zywvvd.com/notes/hexo/theme/fluid/fluid-add-umami/fluid-add-umami/",[182],"《Fluid -23- 添加 Umami 统计》"," 的文章里的方案是可供参考的。",[37,1814,1816],{"className":494,"code":1815,"language":496,"meta":28,"style":28},"const imgs = [\n    \"https://example.com/1.jpg\",\n    \"https://example.com/2.jpg\",\n    \"https://example.com/3.jpg\",\n    \"https://example.com/4.jpg\",\n    \"https://example.com/5.jpg\",\n    \"https://example.com/6.jpg\",\n    \"https://example.com/7.jpg\",\n    \"https://example.com/8.jpg\",\n    \"https://example.com/9.jpg\",\n    \"https://example.com/10.jpg\",\n    \"https://example.com/11.jpg\",\n    \"https://example.com/12.jpg\",\n    \"https://example.com/13.jpg\",\n    \"https://example.com/14.jpg\",\n    \"https://example.com/15.jpg\",\n    \"https://example.com/16.jpg\",\n    \"https://example.com/17.jpg\",\n    \"https://example.com/18.jpg\",\n    \"https://example.com/19.jpg\",\n    \"https://example.com/20.jpg\",\n]\n\nconst luck_img = imgs[Math.floor(Math.random() * imgs.length)]\nconst banner = document.getElementById('banner')\nbanner.style.background = `url(${luck_img}) center center / cover no-repeat`\n",[44,1817,1818,1830,1837,1844,1851,1858,1865,1872,1879,1886,1893,1900,1907,1914,1921,1928,1935,1942,1949,1956,1963,1970,1975,1979,2014,2037],{"__ignoreMap":28},[84,1819,1820,1822,1825,1827],{"class":86,"line":87},[84,1821,516],{"class":515},[84,1823,1824],{"class":126}," imgs",[84,1826,522],{"class":515},[84,1828,1829],{"class":120}," [\n",[84,1831,1832,1835],{"class":86,"line":93},[84,1833,1834],{"class":141},"    \"https://example.com/1.jpg\"",[84,1836,145],{"class":120},[84,1838,1839,1842],{"class":86,"line":99},[84,1840,1841],{"class":141},"    \"https://example.com/2.jpg\"",[84,1843,145],{"class":120},[84,1845,1846,1849],{"class":86,"line":105},[84,1847,1848],{"class":141},"    \"https://example.com/3.jpg\"",[84,1850,145],{"class":120},[84,1852,1853,1856],{"class":86,"line":158},[84,1854,1855],{"class":141},"    \"https://example.com/4.jpg\"",[84,1857,145],{"class":120},[84,1859,1860,1863],{"class":86,"line":164},[84,1861,1862],{"class":141},"    \"https://example.com/5.jpg\"",[84,1864,145],{"class":120},[84,1866,1867,1870],{"class":86,"line":261},[84,1868,1869],{"class":141},"    \"https://example.com/6.jpg\"",[84,1871,145],{"class":120},[84,1873,1874,1877],{"class":86,"line":269},[84,1875,1876],{"class":141},"    \"https://example.com/7.jpg\"",[84,1878,145],{"class":120},[84,1880,1881,1884],{"class":86,"line":280},[84,1882,1883],{"class":141},"    \"https://example.com/8.jpg\"",[84,1885,145],{"class":120},[84,1887,1888,1891],{"class":86,"line":288},[84,1889,1890],{"class":141},"    \"https://example.com/9.jpg\"",[84,1892,145],{"class":120},[84,1894,1895,1898],{"class":86,"line":637},[84,1896,1897],{"class":141},"    \"https://example.com/10.jpg\"",[84,1899,145],{"class":120},[84,1901,1902,1905],{"class":86,"line":642},[84,1903,1904],{"class":141},"    \"https://example.com/11.jpg\"",[84,1906,145],{"class":120},[84,1908,1909,1912],{"class":86,"line":656},[84,1910,1911],{"class":141},"    \"https://example.com/12.jpg\"",[84,1913,145],{"class":120},[84,1915,1916,1919],{"class":86,"line":662},[84,1917,1918],{"class":141},"    \"https://example.com/13.jpg\"",[84,1920,145],{"class":120},[84,1922,1923,1926],{"class":86,"line":668},[84,1924,1925],{"class":141},"    \"https://example.com/14.jpg\"",[84,1927,145],{"class":120},[84,1929,1930,1933],{"class":86,"line":674},[84,1931,1932],{"class":141},"    \"https://example.com/15.jpg\"",[84,1934,145],{"class":120},[84,1936,1937,1940],{"class":86,"line":680},[84,1938,1939],{"class":141},"    \"https://example.com/16.jpg\"",[84,1941,145],{"class":120},[84,1943,1944,1947],{"class":86,"line":686},[84,1945,1946],{"class":141},"    \"https://example.com/17.jpg\"",[84,1948,145],{"class":120},[84,1950,1951,1954],{"class":86,"line":692},[84,1952,1953],{"class":141},"    \"https://example.com/18.jpg\"",[84,1955,145],{"class":120},[84,1957,1958,1961],{"class":86,"line":698},[84,1959,1960],{"class":141},"    \"https://example.com/19.jpg\"",[84,1962,145],{"class":120},[84,1964,1965,1968],{"class":86,"line":709},[84,1966,1967],{"class":141},"    \"https://example.com/20.jpg\"",[84,1969,145],{"class":120},[84,1971,1972],{"class":86,"line":715},[84,1973,1974],{"class":120},"]\n",[84,1976,1977],{"class":86,"line":720},[84,1978,510],{"emptyLinePlaceholder":509},[84,1980,1981,1983,1986,1988,1991,1994,1997,2000,2003,2006,2009,2011],{"class":86,"line":726},[84,1982,516],{"class":515},[84,1984,1985],{"class":126}," luck_img",[84,1987,522],{"class":515},[84,1989,1990],{"class":120}," imgs[Math.",[84,1992,1993],{"class":525},"floor",[84,1995,1996],{"class":120},"(Math.",[84,1998,1999],{"class":525},"random",[84,2001,2002],{"class":120},"() ",[84,2004,2005],{"class":515},"*",[84,2007,2008],{"class":120}," imgs.",[84,2010,1365],{"class":126},[84,2012,2013],{"class":120},")]\n",[84,2015,2016,2018,2021,2023,2026,2029,2031,2034],{"class":86,"line":732},[84,2017,516],{"class":515},[84,2019,2020],{"class":126}," banner",[84,2022,522],{"class":515},[84,2024,2025],{"class":120}," document.",[84,2027,2028],{"class":525},"getElementById",[84,2030,529],{"class":120},[84,2032,2033],{"class":141},"'banner'",[84,2035,2036],{"class":120},")\n",[84,2038,2039,2042,2044,2047,2050],{"class":86,"line":740},[84,2040,2041],{"class":120},"banner.style.background ",[84,2043,778],{"class":515},[84,2045,2046],{"class":141}," `url(${",[84,2048,2049],{"class":120},"luck_img",[84,2051,2052],{"class":141},"}) center center / cover no-repeat`\n",[16,2054,2055],{"id":2055},"成果",[20,2057,2058,2059,2063],{},"博客能够在不引入外部 api 的情况下通过 js 自主实现随机的 banner 背景图，",[2060,2061,2062],"del",{},"但 pagespeed 的测速结果并没有明显好转","，因为 pagespeed 模拟了低速 4G 的访问速度，无论如何都无法提升大文件的加载速度。不过避免了多一次网络请求后，打开页面时的加载速度确实有提升。",[16,2065,2066],{"id":2066},"参见",[1417,2068,2069],{},[1420,2070,2071],{},[178,2072,2075],{"href":2073,"rel":2074},"https://vercel.com/guides/how-can-i-improve-serverless-function-lambda-cold-start-performance-on-vercel",[182],"How can I improve function cold start performance on Vercel?",[431,2077,2078],{},"html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}",{"title":28,"searchDepth":93,"depth":93,"links":2080},[2081,2086,2090,2091],{"id":1662,"depth":93,"text":1663,"children":2082},[2083,2084,2085],{"id":1682,"depth":99,"text":1683},{"id":1703,"depth":99,"text":1703},{"id":1709,"depth":99,"text":1710},{"id":1716,"depth":93,"text":1717,"children":2087},[2088,2089],{"id":1723,"depth":99,"text":1723},{"id":1747,"depth":99,"text":1748},{"id":2055,"depth":93,"text":2055},{"id":2066,"depth":93,"text":2066},{"title":2093,"date":2094,"path":2095,"tags":2096,"body":2101},"使用向日葵智能插座 C2 用电记录推算宿舍上次烧水时间","2024-09-24 05:17:47","/2024/09/24/log-last-water-boiling-water-with-sunlogin-adapter-power-consumption",[2097,2098,2099,2100],"IoT","Python","Hardware","Bot",{"type":13,"value":2102,"toc":2367},[2103,2109,2115,2122,2138,2144,2151,2157,2172,2175,2181,2184,2258,2272,2275,2352,2355,2358,2364],[20,2104,2105,2106],{},"我宿舍里入口处有一张公用的桌子，上面有一个烧水壶。根据生活经验，当用手摸烧水壶外壳能感受到明显热量时，水壶内的水大概是两小时内烧的，绝对能喝；但如果用手摸烧水壶外壳感受不到明显热量时，水壶内的水就不知道是什么时候烧的了，可能是三小时前，也可能是三天前。此时，在不寻求外部科学仪器介入的情况下，唯一能做的是询问寝室成员上一次水是谁烧的，是什么时候烧的。但寝室成员并不总是能够及时回答，可能在睡觉，也可能不在寝室里，",[2060,2107,2108],{},"还有可能出现记忆错乱。",[20,2110,2111,2112],{},"因此，",[1430,2113,2114],{},"我们需要一种可靠的方案获取上一次烧水时间。",[20,2116,2117,2118,2121],{},"前两天陪黄老板出门吃宵夜的时候和他提到了这个难题，我提出在烧水壶附近加装物理按钮，按动时向局域网内的 HomeServer 发送请求记录准确的烧水时间。他提出可以在烧水壶前加装智能插座，使用智能插座的耗电量来推算上一次烧水时间。这是一个可行方案，上次烧水时间不需要分钟级的精准度，",[1430,2119,2120],{},"小时级的精准度在这个需求上完全够用","，这是一个更好的方案。",[20,2123,2124,2125,2129,2130,2133,2134,2137],{},"在「",[178,2126,2128],{"href":2127},"/2023/11/01/unveiling-sunflower-smart-adapter-api-intercepting-utilizing-api-android-packet-sniffing/","使用 Root 后的安卓手机获取向日葵智能插座 C2 的开关 api","」这篇文章中，我有过抓包向日葵官方 app 的流量数据的经验，这一次直接故技重施。很可惜，我发现",[1430,2131,2132],{},"用电量数据","并不能直接从局域网内向智能插座获取，",[1430,2135,2136],{},"必须要从向日葵官方的服务器拉下来","。其实想想也知道，用电数据一旦精确到小时级，日积月累下来会对硬件的存储提出一定的挑战，而比较合理的方案就是由硬件向官方的服务器每小时通信一次记录下来。",[20,2139,2140],{},[26,2141],{"alt":2142,"src":2143},"抓包","https://static.031130.xyz/uploads/2024/09/24/bd6b0bdbab1da.webp",[20,2145,2146,2147,2150],{},"不过好消息是，",[1430,2148,2149],{},"官方服务器的这个接口并没有进行鉴权","，不需要进行额外的操作，一条 curl 命令都能下载下来。",[20,2152,2153],{},[26,2154],{"alt":2155,"src":2156},"curl 命令下载用电量数据","https://static.031130.xyz/uploads/2024/09/24/bf4ad72e00044.webp",[37,2158,2162],{"className":2159,"code":2160,"language":2161,"meta":28,"style":28},"language-shell shiki shiki-themes github-light github-dark","https://sl-api.oray.com/smartplug/powerconsumes/${SN}\n","shell",[44,2163,2164],{"__ignoreMap":28},[84,2165,2166,2169],{"class":86,"line":87},[84,2167,2168],{"class":525},"https://sl-api.oray.com/smartplug/powerconsumes/$",[84,2170,2171],{"class":141},"{SN}\n",[20,2173,2174],{},"SN 码也不需要自己去抓包，直接在官方应用的设备关于页面就能看到。",[20,2176,2177],{},[26,2178],{"alt":2179,"src":2180},"关于页面","https://static.031130.xyz/uploads/2024/09/24/edca671f53571.webp",[20,2182,2183],{},"json 数据的结构很明显，最外层是一个 Array，里面有若干个 object",[37,2185,2187],{"className":111,"code":2186,"language":113,"meta":28,"style":28},"[\n  {\n    \"consume\": 0,\n    \"starttime\": 1727125200,\n    \"endtime\": 1727128740,\n    \"index\": 0\n  },\n...\n]\n",[44,2188,2189,2194,2199,2210,2222,2234,2243,2248,2254],{"__ignoreMap":28},[84,2190,2191],{"class":86,"line":87},[84,2192,2193],{"class":120},"[\n",[84,2195,2196],{"class":86,"line":93},[84,2197,2198],{"class":120},"  {\n",[84,2200,2201,2204,2206,2208],{"class":86,"line":99},[84,2202,2203],{"class":126},"    \"consume\"",[84,2205,138],{"class":120},[84,2207,1383],{"class":126},[84,2209,145],{"class":120},[84,2211,2212,2215,2217,2220],{"class":86,"line":105},[84,2213,2214],{"class":126},"    \"starttime\"",[84,2216,138],{"class":120},[84,2218,2219],{"class":126},"1727125200",[84,2221,145],{"class":120},[84,2223,2224,2227,2229,2232],{"class":86,"line":158},[84,2225,2226],{"class":126},"    \"endtime\"",[84,2228,138],{"class":120},[84,2230,2231],{"class":126},"1727128740",[84,2233,145],{"class":120},[84,2235,2236,2239,2241],{"class":86,"line":164},[84,2237,2238],{"class":126},"    \"index\"",[84,2240,138],{"class":120},[84,2242,241],{"class":126},[84,2244,2245],{"class":86,"line":261},[84,2246,2247],{"class":120},"  },\n",[84,2249,2250],{"class":86,"line":269},[84,2251,2253],{"class":2252},"s7hpK","...\n",[84,2255,2256],{"class":86,"line":280},[84,2257,1974],{"class":120},[1417,2259,2260,2263,2266,2269],{},[1420,2261,2262],{},"consume: 这段时间消耗的用电量，单位 Wh",[1420,2264,2265],{},"starttime: 开始时间，unix 时间戳",[1420,2267,2268],{},"endtime: 结束时间，unix 时间戳",[1420,2270,2271],{},"index: 智能插座的第几个孔位（为插排预留的参数，智能插座只有 0 这一个位置）",[20,2273,2274],{},"所以我们要做的就是每小时下载一次这个 json 文件，需要时从 json 中寻找上一次用电量较高的小时，取那个小时的 starttime 时间戳转换为东八区人类可读的时间即可。",[37,2276,2280],{"className":2277,"code":2278,"language":2279,"meta":28,"style":28},"language-python shiki shiki-themes github-light github-dark","def last_water():\n    with open('power.json', 'r') as f:\n        powers = json.load(f)\n    for i in powers:\n        if i.get('consume') >= 30:\n            t = i.get('starttime')\n            break\n    last_water_time = datetime.datetime.fromtimestamp(t)\n    now = datetime.datetime.now()\n    time_delta = now - last_water_time\n    sec = time_delta.total_seconds()\n    hours = sec / 3600\n    lwt_str = last_water_time.strftime('%m月%d日%H点')\n    return f\"上次烧水时间为「{lwt_str}」，距离现在「{hours:.2f}」小时\"\n","python",[44,2281,2282,2287,2292,2297,2302,2307,2312,2317,2322,2327,2332,2337,2342,2347],{"__ignoreMap":28},[84,2283,2284],{"class":86,"line":87},[84,2285,2286],{},"def last_water():\n",[84,2288,2289],{"class":86,"line":93},[84,2290,2291],{},"    with open('power.json', 'r') as f:\n",[84,2293,2294],{"class":86,"line":99},[84,2295,2296],{},"        powers = json.load(f)\n",[84,2298,2299],{"class":86,"line":105},[84,2300,2301],{},"    for i in powers:\n",[84,2303,2304],{"class":86,"line":158},[84,2305,2306],{},"        if i.get('consume') >= 30:\n",[84,2308,2309],{"class":86,"line":164},[84,2310,2311],{},"            t = i.get('starttime')\n",[84,2313,2314],{"class":86,"line":261},[84,2315,2316],{},"            break\n",[84,2318,2319],{"class":86,"line":269},[84,2320,2321],{},"    last_water_time = datetime.datetime.fromtimestamp(t)\n",[84,2323,2324],{"class":86,"line":280},[84,2325,2326],{},"    now = datetime.datetime.now()\n",[84,2328,2329],{"class":86,"line":288},[84,2330,2331],{},"    time_delta = now - last_water_time\n",[84,2333,2334],{"class":86,"line":637},[84,2335,2336],{},"    sec = time_delta.total_seconds()\n",[84,2338,2339],{"class":86,"line":642},[84,2340,2341],{},"    hours = sec / 3600\n",[84,2343,2344],{"class":86,"line":656},[84,2345,2346],{},"    lwt_str = last_water_time.strftime('%m月%d日%H点')\n",[84,2348,2349],{"class":86,"line":662},[84,2350,2351],{},"    return f\"上次烧水时间为「{lwt_str}」，距离现在「{hours:.2f}」小时\"\n",[20,2353,2354],{},"至于每小时下载的任务，我这里是使用 crontab + curl 命令实现的，用 python 写个死循环跑也可以。",[20,2356,2357],{},"那么数据都取到了，剩下的就是人机交互的部分，这部分夸张点的可以写 web，写小程序，甚至写个安卓应用挂个桌面插件，想怎么做都可以。我这里就单纯将数据接入 qqbot 扔到了宿舍群，简单写了个关键词触发。",[20,2359,2360],{},[26,2361],{"alt":2362,"src":2363},"宿舍群","https://static.031130.xyz/uploads/2024/09/24/1a0637d61471f.webp",[431,2365,2366],{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .s7hpK, html code.shiki .s7hpK{--shiki-default:#B31D28;--shiki-default-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic}",{"title":28,"searchDepth":93,"depth":93,"links":2368},[],{"title":2370,"date":2371,"path":2372,"tags":2373,"body":2379},"使用 Caddy 反向代理 dockerhub 需要几步？","2024-09-21 01:29:17","/2024/09/21/how-to-reverse-proxy-dockerhub-with-caddy",[2374,2375,2376,2377,2378],"Caddy","Docker","mitmproxy","Network","Linux",{"type":13,"value":2380,"toc":2750},[2381,2384,2387,2390,2393,2401,2404,2413,2460,2463,2479,2485,2503,2506,2512,2515,2521,2525,2531,2536,2541,2547,2552,2555,2561,2564,2657,2660,2664,2675,2690,2693,2707,2710,2712,2719,2725,2728,2731,2733,2740,2747],[20,2382,2383],{},"几个月前，由于众所周知的原因，中国大陆境内失去了所有公共的 dockerhub 镜像（或者说是反代）。网上随即涌现了一批自建 dockerhub 反代的，有用 Cloudflare Workers 的，也有用 nginx 的，甚至还有自建 registry 的。",[20,2385,2386],{},"我使用 caddy 去反代 dockerhub 的原因很简单，一是配置简单，二是通过一台国内访问质量良好的境外服务器进行反向代理的访问质量会比 Cloudflare 减速器好很多。",[20,2388,2389],{},"在网上一阵搜索后，并没有发现任何使用 caddy 去反向代理 dockerhub 的文章， 于是本文应运而生。",[16,2391,2392],{"id":2392},"遇事不决先抓包",[20,2394,2395,2396,2400],{},"为了弄清楚 docker 从 dockerhub 拉取镜像的过程，需要先对网络请求进行抓包。具体的抓包方案我使用的是 mitmproxy，手动信任 ssl 证书的操作在「",[178,2397,2399],{"href":2398},"/2024/02/29/capture-https-traffic-on-linux-with-mitmproxy/","在 Linux 下使用 mitmproxy 抓取 HTTPS 流量","」这篇文章中已经讲过了，只需要配置 dockerd 使用本机的 8080 端口进行代理即可。",[20,2402,2403],{},"docker pull 时，是调用 dockerd 进行镜像拉取，而 dockerd 在绝大多数发行版上都是由 systemd 进程直接启用了，在 shell 中直接设置环境变量的方式并不能进行代理，而透明代理的方案会引入大量无关请求，增加流量分析的难度。",[20,2405,2406,2407,2412],{},"比较好的方案是直接在 systemd 服务这一层设置好代理的环境变量，我这里参考的是「",[178,2408,2411],{"href":2409,"rel":2410},"https://yeasy.gitbook.io/docker_practice/advanced_network/http_https_proxy",[182],"配置 HTTP/HTTPS 网络代理 | Docker — 从入门到实践","」这篇文章。",[37,2414,2416],{"className":1435,"code":2415,"language":1437,"meta":28,"style":28},"$ cat /etc/systemd/system/docker.service.d/http-proxy.conf \n\n[Service]\nEnvironment=\"HTTP_PROXY=http://127.0.0.1:8080\"\nEnvironment=\"HTTPS_PROXY=http://127.0.0.1:8080\"\n",[44,2417,2418,2432,2436,2441,2451],{"__ignoreMap":28},[84,2419,2420,2423,2426,2429],{"class":86,"line":87},[84,2421,2422],{"class":525},"$",[84,2424,2425],{"class":141}," cat",[84,2427,2428],{"class":141}," /etc/systemd/system/docker.service.d/http-proxy.conf",[84,2430,2431],{"class":120}," \n",[84,2433,2434],{"class":86,"line":93},[84,2435,510],{"emptyLinePlaceholder":509},[84,2437,2438],{"class":86,"line":99},[84,2439,2440],{"class":120},"[Service]\n",[84,2442,2443,2446,2448],{"class":86,"line":105},[84,2444,2445],{"class":120},"Environment",[84,2447,778],{"class":515},[84,2449,2450],{"class":141},"\"HTTP_PROXY=http://127.0.0.1:8080\"\n",[84,2452,2453,2455,2457],{"class":86,"line":158},[84,2454,2445],{"class":120},[84,2456,778],{"class":515},[84,2458,2459],{"class":141},"\"HTTPS_PROXY=http://127.0.0.1:8080\"\n",[20,2461,2462],{},"重启完 systemd 服务，万事俱备，我拉取了一个较小的 docker 镜像，顺利得到了预期的结果。",[37,2464,2466],{"className":1435,"code":2465,"language":1437,"meta":28,"style":28},"docker pull svenstaro/miniserve:latest\n",[44,2467,2468],{"__ignoreMap":28},[84,2469,2470,2473,2476],{"class":86,"line":87},[84,2471,2472],{"class":525},"docker",[84,2474,2475],{"class":141}," pull",[84,2477,2478],{"class":141}," svenstaro/miniserve:latest\n",[20,2480,2481],{},[26,2482],{"alt":2483,"src":2484},"抓包结果","https://static.031130.xyz/uploads/2024/09/21/acbee0959be78.webp",[20,2486,2487,2488,2491,2492,2495,2496,2498,2499,2502],{},"docker 先请求了 ",[44,2489,2490],{},"registry-1.docker.io"," 得到了 401 的 http 状态码后转去访问了 ",[44,2493,2494],{},"auth.docker.io","，得到了 Authorization 字段以后重新请求 ",[44,2497,2490],{},"，获取源数据后被 307 转发到了 ",[44,2500,2501],{},"production.cloudflare.docker.com"," 上。",[20,2504,2505],{},"其中，第一个 401 响应的响应头中，用 WWW-Authenticate 字段标注了 auth 鉴权的域",[20,2507,2508],{},[26,2509],{"alt":2510,"src":2511},"WWW-Authenticate","https://static.031130.xyz/uploads/2024/09/21/e905c55e76a25.webp",[20,2513,2514],{},"而 307 响应的响应头中，使用 Location 字段标注了被转发到的 url",[20,2516,2517],{},[26,2518],{"alt":2519,"src":2520},"Location","https://static.031130.xyz/uploads/2024/09/21/6a2e0bf6a8284.webp",[16,2522,2524],{"id":2523},"三个域名都需要反向代理嘛","三个域名都需要反向代理嘛？",[20,2526,2527,2528,2530],{},"首先，作为我们提供反代服务的入口，",[44,2529,2490],{}," 一定是需要代理的，否则就无法提供反代后的服务。",[20,2532,2533,2535],{},[44,2534,2494],{}," 只出现了一次，需要反代嘛？根据它在境内的访问质量，恐怕是需要反代的。",[20,2537,2538],{},[26,2539],{"alt":2494,"src":2540},"https://static.031130.xyz/uploads/2024/09/21/4a70c8cac6a4c.webp",[20,2542,2543,2544,2546],{},"最后就是 ",[44,2545,2501],{}," ，这也是我们最终下载镜像文件的地方，99% 以上的流量都是打到这里去的，而 cloudflare 在境内的访问质量是知名的减速器，完全不可以信赖。",[20,2548,2549],{},[1430,2550,2551],{},"因此，三个域名都需要反代。",[16,2553,2554],{"id":2554},"如何反代",[20,2556,2557,2558,2560],{},"分三个域名各自代理，在 ",[44,2559,2490],{}," 那一块进行特殊处理，将响应头中的 WWW-Authenticate 和 location 字段进行关键词替换，将原域名替换为反代域名。",[20,2562,2563],{},"最后的成果大概就是这个样子:",[37,2565,2569],{"className":2566,"code":2567,"language":2568,"meta":28,"style":28},"language-caddyfile shiki shiki-themes github-light github-dark","dockerhub.example.com {\n    reverse_proxy https://registry-1.docker.io {\n        header_up Host {http.reverse_proxy.upstream.hostport}\n        header_down WWW-Authenticate \"https://auth.docker.io\" \"https://auth.dockerhub.example.com\"\n        header_down Location \"https://production.cloudflare.docker.com\" \"https://production.dockerhub.example.com\"\n    }\n}\n\nauth.dockerhub.example.com {\n    reverse_proxy https://auth.docker.io {\n        header_up Host {http.reverse_proxy.upstream.hostport}\n    }\n}\n\nproduction.dockerhub.example.com {\n    reverse_proxy https://production.cloudflare.docker.com {\n        header_up Host {http.reverse_proxy.upstream.hostport}\n    }\n}\n","caddyfile",[44,2570,2571,2576,2581,2586,2591,2596,2601,2605,2609,2614,2619,2623,2627,2631,2635,2640,2645,2649,2653],{"__ignoreMap":28},[84,2572,2573],{"class":86,"line":87},[84,2574,2575],{},"dockerhub.example.com {\n",[84,2577,2578],{"class":86,"line":93},[84,2579,2580],{},"    reverse_proxy https://registry-1.docker.io {\n",[84,2582,2583],{"class":86,"line":99},[84,2584,2585],{},"        header_up Host {http.reverse_proxy.upstream.hostport}\n",[84,2587,2588],{"class":86,"line":105},[84,2589,2590],{},"        header_down WWW-Authenticate \"https://auth.docker.io\" \"https://auth.dockerhub.example.com\"\n",[84,2592,2593],{"class":86,"line":158},[84,2594,2595],{},"        header_down Location \"https://production.cloudflare.docker.com\" \"https://production.dockerhub.example.com\"\n",[84,2597,2598],{"class":86,"line":164},[84,2599,2600],{},"    }\n",[84,2602,2603],{"class":86,"line":261},[84,2604,167],{},[84,2606,2607],{"class":86,"line":269},[84,2608,510],{"emptyLinePlaceholder":509},[84,2610,2611],{"class":86,"line":280},[84,2612,2613],{},"auth.dockerhub.example.com {\n",[84,2615,2616],{"class":86,"line":288},[84,2617,2618],{},"    reverse_proxy https://auth.docker.io {\n",[84,2620,2621],{"class":86,"line":637},[84,2622,2585],{},[84,2624,2625],{"class":86,"line":642},[84,2626,2600],{},[84,2628,2629],{"class":86,"line":656},[84,2630,167],{},[84,2632,2633],{"class":86,"line":662},[84,2634,510],{"emptyLinePlaceholder":509},[84,2636,2637],{"class":86,"line":668},[84,2638,2639],{},"production.dockerhub.example.com {\n",[84,2641,2642],{"class":86,"line":674},[84,2643,2644],{},"    reverse_proxy https://production.cloudflare.docker.com {\n",[84,2646,2647],{"class":86,"line":680},[84,2648,2585],{},[84,2650,2651],{"class":86,"line":686},[84,2652,2600],{},[84,2654,2655],{"class":86,"line":692},[84,2656,167],{},[20,2658,2659],{},"PS: 推荐后两个域名使用 CNAME 解析到第一个域名，这样后面更改解析的时候更方便一些。",[16,2661,2663],{"id":2662},"如何设置-docker-使用反代","如何设置 docker 使用反代",[20,2665,2666,2667,2670,2671,2674],{},"可以直接在 ",[44,2668,2669],{},"docker pull"," 和 ",[44,2672,2673],{},"docker run"," 的命令前加上域名，比如原本的",[37,2676,2678],{"className":1435,"code":2677,"language":1437,"meta":28,"style":28},"docker run hello-world\n",[44,2679,2680],{"__ignoreMap":28},[84,2681,2682,2684,2687],{"class":86,"line":87},[84,2683,2472],{"class":525},[84,2685,2686],{"class":141}," run",[84,2688,2689],{"class":141}," hello-world\n",[20,2691,2692],{},"改成",[37,2694,2696],{"className":1435,"code":2695,"language":1437,"meta":28,"style":28},"docker run dockerhub.example.com/library/hello-world\n",[44,2697,2698],{"__ignoreMap":28},[84,2699,2700,2702,2704],{"class":86,"line":87},[84,2701,2472],{"class":525},[84,2703,2686],{"class":141},[84,2705,2706],{"class":141}," dockerhub.example.com/library/hello-world\n",[20,2708,2709],{},"（如果原本的镜像由 dockerhub 官方提供，没有用户名，路径需要加上 “library”）",[415,2711],{},[20,2713,2714,2715,2718],{},"也可以选择以前的方案，创建或修改 ",[44,2716,2717],{},"/etc/docker/daemon.json","：",[37,2720,2723],{"className":2721,"code":2722,"language":42},[40],"sudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json \u003C\u003C-'EOF'\n{\n    \"registry-mirrors\": [\n        \"https://dockerhub.example.com\"\n    ]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n",[44,2724,2722],{"__ignoreMap":28},[16,2726,2727],{"id":2727},"验证",[20,2729,2730],{},"一般来说，能够在中国大陆境内的网络质量下较快地下拉镜像本身就代表反代成功了，但保险起见可以像本文的第一部分一样抓个包，看看是不是都走了自己的域名了。",[16,2732,2066],{"id":2066},[20,2734,2735],{},[178,2736,2739],{"href":2737,"rel":2738},"https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6",[182],"国内的 Docker Hub 镜像加速器，由国内教育机构与各大云服务商提供的镜像加速服务",[20,2741,2742],{},[178,2743,2746],{"href":2744,"rel":2745},"https://blog.hentioe.dev/posts/unhindered-accesss-dockerhub.html",[182],"无障碍访问 Docker Hub 的各种方法（自建 registry、Cloudflare 加速、Nginx 反代、代理 Docker 网络） | 绅士喵",[431,2748,2749],{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":28,"searchDepth":93,"depth":93,"links":2751},[2752,2753,2754,2755,2756,2757],{"id":2392,"depth":93,"text":2392},{"id":2523,"depth":93,"text":2524},{"id":2554,"depth":93,"text":2554},{"id":2662,"depth":93,"text":2663},{"id":2727,"depth":93,"text":2727},{"id":2066,"depth":93,"text":2066},{"title":2759,"date":2760,"path":2761,"tags":2762,"body":2766},"将 Rustdesk 中继服务从 Arch Linux 迁移至 Debian","2024-09-20 03:20:38","/2024/09/20/migrate-rustdesk-server-from-arch-to-debian",[2763,2764,2765,2378],"Rustdesk","Archlinux","Debian",{"type":13,"value":2767,"toc":3136},[2768,2771,2787,2790,2794,2808,2814,2818,3027,3030,3033,3036,3039,3046,3052,3055,3061,3064,3067,3082,3085,3088,3094,3099,3102,3105,3110,3112,3133],[20,2769,2770],{},"这次迁移主要是两方面原因，一来是我安装了 Arch Linux 的 VPS 要过期了，续费价格过高，没有续费的动力；二来是手上的 VPS 越来越多，逐渐意识到 Arch Linux 作为滚动发行版，每次安装新的软件都要 Syu 甚至重启系统，实在没有太多的精力去维护，这也是为什么 Arch Linux 仅适合桌面发行版。",[20,2772,2773,2774,2779,2780,2670,2783,2786],{},"原本在 Arch Linux 上部署的 rustdesk server 我是按照这篇文章「",[178,2775,2778],{"href":2776,"rel":2777},"https://www.liyp.cc/archives/1698241638248",[182],"(水文)在archlinux上部署rustdesk服务端","」部署的。本身没什么技巧，直接从 AUR 安装现成的 rustdesk-server-bin，使用 systemctl 启用 ",[44,2781,2782],{},"rustdesk-server-hbbr.service",[44,2784,2785],{},"rustdesk-server-hbbs.service"," 两个服务即可。",[20,2788,2789],{},"Rustdesk 现在为 Debian 提供了官方的中继服务器的 deb 包，而谷歌搜了一圈都是下载 zip 包使用 pm2 管理进程，故写下此文。",[16,2791,2793],{"id":2792},"备份原服务器的-rustdesk-密钥","备份原服务器的 rustdesk 密钥",[20,2795,2796,2797,2800,2801,2670,2804,2807],{},"AUR 上的安装方案将密钥放在 ",[44,2798,2799],{},"/opt/rustdesk-server/data"," 直接用 sftp 获取 ",[44,2802,2803],{},"id_ed25519",[44,2805,2806],{},"id_ed25519.pub"," 两个文件就行。如果是新部署的没有这两个文件也没事，rustdesk 服务在启动时可以自动创建，只不过需要在客户端重新输入公钥。",[37,2809,2812],{"className":2810,"code":2811,"language":42},[40],"sftp> get /opt/rustdesk-server/data/id_ed25519\nsftp> get /opt/rustdesk-server/data/id_ed25519.pub\n",[44,2813,2811],{"__ignoreMap":28},[16,2815,2817],{"id":2816},"在新服务器上下载-deb-包进行安装","在新服务器上下载 deb 包，进行安装",[37,2819,2821],{"className":1435,"code":2820,"language":1437,"meta":28,"style":28},"apt install -y curl jq\nversion=$(curl -s https://api.github.com/repos/rustdesk/rustdesk-server/releases/latest | jq .tag_name)\n\nhbbr_deb=rustdesk-server-hbbr_${version:1:-1}_amd64.deb\nhbbs_deb=rustdesk-server-hbbs_${version:1:-1}_amd64.deb\nutils_deb=rustdesk-server-utils_${version:1:-1}_amd64.deb\n\nfor deb in $hbbr_deb $hbbs_deb $utils_deb\ndo\n    curl -L https://github.com/rustdesk/rustdesk-server/releases/download/${version:1:-1}/${deb} -o ${deb}\ndone\n\ndpkg -i $hbbr_deb $hbbs_deb $utils_deb\nrm $hbbr_deb $hbbs_deb $utils_deb\n",[44,2822,2823,2839,2869,2873,2901,2923,2945,2949,2963,2968,3001,3006,3010,3020],{"__ignoreMap":28},[84,2824,2825,2828,2830,2833,2836],{"class":86,"line":87},[84,2826,2827],{"class":525},"apt",[84,2829,1447],{"class":141},[84,2831,2832],{"class":126}," -y",[84,2834,2835],{"class":141}," curl",[84,2837,2838],{"class":141}," jq\n",[84,2840,2841,2844,2846,2849,2852,2855,2858,2861,2864,2867],{"class":86,"line":93},[84,2842,2843],{"class":120},"version",[84,2845,778],{"class":515},[84,2847,2848],{"class":120},"$(",[84,2850,2851],{"class":525},"curl",[84,2853,2854],{"class":126}," -s",[84,2856,2857],{"class":141}," https://api.github.com/repos/rustdesk/rustdesk-server/releases/latest",[84,2859,2860],{"class":515}," |",[84,2862,2863],{"class":525}," jq",[84,2865,2866],{"class":141}," .tag_name",[84,2868,2036],{"class":120},[84,2870,2871],{"class":86,"line":99},[84,2872,510],{"emptyLinePlaceholder":509},[84,2874,2875,2878,2880,2883,2886,2889,2892,2895,2898],{"class":86,"line":105},[84,2876,2877],{"class":120},"hbbr_deb",[84,2879,778],{"class":515},[84,2881,2882],{"class":141},"rustdesk-server-hbbr_",[84,2884,2885],{"class":120},"${version",[84,2887,2888],{"class":515},":",[84,2890,2891],{"class":120},"1",[84,2893,2894],{"class":515},":-",[84,2896,2897],{"class":120},"1}",[84,2899,2900],{"class":141},"_amd64.deb\n",[84,2902,2903,2906,2908,2911,2913,2915,2917,2919,2921],{"class":86,"line":158},[84,2904,2905],{"class":120},"hbbs_deb",[84,2907,778],{"class":515},[84,2909,2910],{"class":141},"rustdesk-server-hbbs_",[84,2912,2885],{"class":120},[84,2914,2888],{"class":515},[84,2916,2891],{"class":120},[84,2918,2894],{"class":515},[84,2920,2897],{"class":120},[84,2922,2900],{"class":141},[84,2924,2925,2928,2930,2933,2935,2937,2939,2941,2943],{"class":86,"line":164},[84,2926,2927],{"class":120},"utils_deb",[84,2929,778],{"class":515},[84,2931,2932],{"class":141},"rustdesk-server-utils_",[84,2934,2885],{"class":120},[84,2936,2888],{"class":515},[84,2938,2891],{"class":120},[84,2940,2894],{"class":515},[84,2942,2897],{"class":120},[84,2944,2900],{"class":141},[84,2946,2947],{"class":86,"line":261},[84,2948,510],{"emptyLinePlaceholder":509},[84,2950,2951,2954,2957,2960],{"class":86,"line":269},[84,2952,2953],{"class":515},"for",[84,2955,2956],{"class":120}," deb ",[84,2958,2959],{"class":515},"in",[84,2961,2962],{"class":120}," $hbbr_deb $hbbs_deb $utils_deb\n",[84,2964,2965],{"class":86,"line":280},[84,2966,2967],{"class":515},"do\n",[84,2969,2970,2973,2976,2979,2981,2983,2985,2987,2989,2992,2995,2998],{"class":86,"line":288},[84,2971,2972],{"class":525},"    curl",[84,2974,2975],{"class":126}," -L",[84,2977,2978],{"class":141}," https://github.com/rustdesk/rustdesk-server/releases/download/",[84,2980,2885],{"class":120},[84,2982,2888],{"class":515},[84,2984,2891],{"class":120},[84,2986,2894],{"class":515},[84,2988,2897],{"class":120},[84,2990,2991],{"class":141},"/",[84,2993,2994],{"class":120},"${deb} ",[84,2996,2997],{"class":126},"-o",[84,2999,3000],{"class":120}," ${deb}\n",[84,3002,3003],{"class":86,"line":637},[84,3004,3005],{"class":515},"done\n",[84,3007,3008],{"class":86,"line":642},[84,3009,510],{"emptyLinePlaceholder":509},[84,3011,3012,3015,3018],{"class":86,"line":656},[84,3013,3014],{"class":525},"dpkg",[84,3016,3017],{"class":126}," -i",[84,3019,2962],{"class":120},[84,3021,3022,3025],{"class":86,"line":662},[84,3023,3024],{"class":525},"rm",[84,3026,2962],{"class":120},[20,3028,3029],{},"简单写了个脚本，仅适用 amd64，也没做异常处理，如果服务器在大陆境内需要自行解决 github 下载时可能出现的网络波动问题。",[20,3031,3032],{},"dpkg 安装结束后默认会启用两个 systemd 服务并开机自启，所以不需要使用 systemctl 手动启用。",[16,3034,3035],{"id":3035},"替换密钥",[20,3037,3038],{},"将刚刚备份的一个公钥和一个私钥放在 Debian 服务器的相应路径，问题是这个路径在哪里呢？",[20,3040,3041,3042,3045],{},"通过翻看 rustdesk 的 service 文件，我们大概可以定位到是在 ",[44,3043,3044],{},"/var/lib/rustdesk-server/"," 路径下的",[20,3047,3048],{},[26,3049],{"alt":3050,"src":3051},"service 问价你","https://static.031130.xyz/uploads/2024/09/20/59d08477f8a0b.webp",[20,3053,3054],{},"直接对两个密钥文件进行替换，重启 rustdesk 相关的两个 service 服务即可。",[20,3056,3057],{},[26,3058],{"alt":3059,"src":3060},"密钥文件","https://static.031130.xyz/uploads/2024/09/20/527c5b1151a57.webp",[16,3062,3063],{"id":3063},"开放服务器防火墙",[20,3065,3066],{},"需要开放如下端口，记得 Linux 的防火墙和云服务供应商面板（如果有的话）上都要开放",[1417,3068,3069,3076],{},[1420,3070,3071,3072,3075],{},"TCP(",[1430,3073,3074],{},"21115, 21116, 21117, 21118, 21119",")",[1420,3077,3078,3079,3075],{},"UDP(",[1430,3080,3081],{},"21116",[16,3083,3084],{"id":3084},"客户端设置",[20,3086,3087],{},"id_ed25519.pub 对应客户端中需要输入的 Key，大概长成下面这个样子",[37,3089,3092],{"className":3090,"code":3091,"language":42},[40],"rdtxujYccRLXwXOu2KR3V9cGgP51lEdSmE0HJHGNkn4=\n",[44,3093,3091],{"__ignoreMap":28},[20,3095,3096],{},[26,3097],{"alt":28,"src":3098},"https://static.031130.xyz/uploads/2024/09/20/cc715265b8b37.webp",[20,3100,3101],{},"ID 服务器直接输入中继服务器的 ip 或者解析到对应 ip 的域名即可，另外两个地址可以不填，RustDesk会自动推导（如果没有特别设定）",[16,3103,3104],{"id":3104},"成果展示",[20,3106,3107],{},[26,3108],{"alt":3104,"src":3109},"https://static.031130.xyz/uploads/2024/09/20/3108bac773390.webp",[16,3111,2066],{"id":2066},[1417,3113,3114,3121,3128],{},[1420,3115,3116],{},[178,3117,3120],{"href":3118,"rel":3119},"https://rustdesk.com/docs/en/self-host/rustdesk-server-oss/install/",[182],"Installation :: Documentation for RustDesk",[1420,3122,3123],{},[178,3124,3127],{"href":3125,"rel":3126},"https://catcat.blog/rustdesk-debian-%E8%87%AA%E5%BB%BA%E4%B8%AD%E7%BB%A7%E6%9C%8D%E5%8A%A1%E5%99%A8.html",[182],"RustDesk Debian 自建中继服务器",[1420,3129,3130],{},[178,3131,2778],{"href":2776,"rel":3132},[182],[431,3134,3135],{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":28,"searchDepth":93,"depth":93,"links":3137},[3138,3139,3140,3141,3142,3143,3144],{"id":2792,"depth":93,"text":2793},{"id":2816,"depth":93,"text":2817},{"id":3035,"depth":93,"text":3035},{"id":3063,"depth":93,"text":3063},{"id":3084,"depth":93,"text":3084},{"id":3104,"depth":93,"text":3104},{"id":2066,"depth":93,"text":2066},{"title":3146,"date":3147,"path":3148,"tags":3149,"body":3152},"自建图床小记五——费用","2024-08-21 00:05:15","/2024/08/21/self-host-cdn-expense",[3150,3151],"图床","CDN",{"type":13,"value":3153,"toc":3201},[3154,3157,3163,3166,3169,3175,3181,3187,3190,3196],[20,3155,3156],{},"自建的图床自 8 月 13 日正式启用以来，已经过去一周多了，具体的费用是多少呢？原先设计的 0 额外投入有没有实现呢？",[20,3158,3159],{},[26,3160],{"alt":3161,"src":3162},"博客访问统计","https://static.031130.xyz/uploads/2024/08/21/74605f0ef84a9.webp",[20,3164,3165],{},"这是我的博客访问统计，在这一周多的时间内，一共有 1.27k 次页面访问，被 671 个访客访问了 769 次，平均下来每天也有一百多次的页面访问。",[20,3167,3168],{},"Cloudflare Workers 和 Cloudflare R2 的免费额度全部够用，用量全部小于免费额度的 1%。",[20,3170,3171],{},[26,3172],{"alt":3173,"src":3174},"R2 的免费额度","https://static.031130.xyz/uploads/2024/08/21/96ec475817b8f.webp",[20,3176,3177],{},[26,3178],{"alt":3179,"src":3180},"R2 的用量","https://static.031130.xyz/uploads/2024/08/21/7a26d392e6c90.webp",[20,3182,3183],{},[26,3184],{"alt":3185,"src":3186},"Cloudflare Workers 过去 24 小时内的请求次数","https://static.031130.xyz/uploads/2024/08/21/31a7f3c316b47.webp",[20,3188,3189],{},"又拍云联盟每年可以领取 67 元的代金券，平均每天控制在 0.18 元内即可实现白嫖。",[20,3191,3192],{},[26,3193],{"alt":3194,"src":3195},"又拍云账单","https://static.031130.xyz/uploads/2024/08/21/1c4eeac63a2fb.webp",[20,3197,3198],{},[1430,3199,3200],{},"可以看到，这一套图床在我博客当前和可见的未来的访客情况下，在不被人恶意刷流量的情况下，是不需要投入除域名续费以外的其他成本的。",{"title":28,"searchDepth":93,"depth":93,"links":3202},[],{"title":3204,"date":3205,"path":3206,"tags":3207,"body":3209},"自建图床小记四——上传脚本编写与图片迁移","2024-08-20 23:12:30","/2024/08/20/picbed-upload-script-and-image-migration",[2098,3150,2378,2377,3208],"Shell Script",{"type":13,"value":3210,"toc":4745},[3211,3228,3231,3234,3240,4222,4249,4285,4295,4298,4391,4412,4420,4423,4426,4429,4742],[20,3212,3213,3214,3218,3219,2670,3223,3227],{},"前面三篇小记分别讲述了",[178,3215,3217],{"href":3216},"/2024/08/12/new-picbed-based-on-cloudflare-and-upyun/","图床的整体架构","、",[178,3220,3222],{"href":3221},"/2024/08/13/build-restful-api-for-cloudflare-r2-with-cloudflare-workers/","用 Workers 构建 Restful API",[178,3224,3226],{"href":3225},"/2024/08/14/auto-renew-ssl-certificate-and-deploy-to-upyun-with-github-action/","自动更新部署 SSL 证书","，这一篇c处理由此带来的图片上传问题，主要是要为 Typora 编写自动上传脚本，并为博客原有的图片进行迁移。",[16,3229,3230],{"id":3230},"自动上传脚本",[20,3232,3233],{},"主要还是给 Typora 用，实现这种效果",[20,3235,3236],{},[26,3237],{"alt":3238,"src":3239},"Typora 自动上传","https://static.031130.xyz/uploads/2024/08/12/62f3b881e3c4c.gif",[37,3241,3243],{"className":1435,"code":3242,"language":1437,"meta":28,"style":28},"#!/bin/bash\n\nHOST=\"upload.example.com\"\nCDN_HOST=\"cdn.example.com\"\nUPLOAD_PATH=\"uploads/$(date +%Y/%m/%d)\"\n\nAUTH_TOKEN=\"1145141919810\"\n\nwebp=false\nmarkdown=false\nforce=false\nkeep=false\n\nwhile getopts \":mwfkp:\" opt; do\n    case $opt in\n        m|markdown) markdown=true ;;\n        w|webp) webp=true ;;\n        f|force) force=true ;;\n        k|keep) keep=true ;;\n        p|path) UPLOAD_PATH=$OPTARG ;;\n        \\?) echo \"Invalid option: -$OPTARG\" ;;\n    esac\ndone\nshift $((OPTIND - 1))\n\nUPLOAD_URL=\"https://$HOST/$UPLOAD_PATH\"\nif [[ \"$UPLOAD_URL\" == */ ]]; then\n    UPLOAD_URL=\"${UPLOAD_URL%?}\"\nfi\n\nfor image in \"$@\"; do\n    if [ \"$webp\" = true ]; then\n        cwebp -quiet \"$image\" -o \"${image%.*}.webp\"\n        image=\"${image%.*}.webp\"\n    fi\n\n    if [ \"$keep\" = true ]; then\n        FILENAME=$(basename \"$image\")\n    else\n        FILENAME=\"$(md5sum $image | cut -c 1-13).$(basename $image | cut -d. -f2)\"\n    fi\n\n    if [ \"$force\" = true ]; then\n        UPLOAD_RESPONSE=$(curl -s -X PUT \"${UPLOAD_URL}/$FILENAME\" \\\n            -w \"%{http_code}\" \\\n            --data-binary @\"$image\" \\\n            -H \"X-Custom-Auth-Key: $AUTH_TOKEN\" \\\n            -H \"Overwrite: true\" \\\n        )\n    else\n        UPLOAD_RESPONSE=$(curl -s -X PUT \"${UPLOAD_URL}/$FILENAME\" \\\n            -w \"%{http_code}\" \\\n            --data-binary @\"$image\" \\\n            -H \"X-Custom-Auth-Key: $AUTH_TOKEN\" \\\n        )\n    fi\n\n    UPLOAD_HTTP_CODE=$(echo \"$UPLOAD_RESPONSE\" | tail -n1)\n    \n    if [ -n \"$UPLOAD_PATH\" ]; then\n        CDN_URL=\"https://$CDN_HOST/$UPLOAD_PATH/$FILENAME\"\n    else\n        CDN_URL=\"https://$CDN_HOST/$FILENAME\"\n    fi\n\n    if [ \"$UPLOAD_HTTP_CODE\" != \"200\" ]; then\n        echo \"上传失败: $UPLOAD_RESPONSE\"\n        continue\n    fi\n\n    if [ \"$markdown\" = true ]; then\n        echo \"![](${CDN_URL})\"\n    else\n        echo \"${CDN_URL}\"\n    fi\ndone\n",[44,3244,3245,3250,3254,3264,3274,3290,3294,3304,3308,3318,3327,3336,3345,3349,3368,3379,3402,3422,3442,3462,3482,3503,3508,3512,3532,3536,3557,3584,3602,3607,3611,3632,3657,3690,3709,3714,3718,3739,3759,3764,3807,3811,3815,3836,3870,3880,3894,3909,3918,3923,3927,3955,3963,3975,3987,3991,3995,3999,4028,4033,4052,4074,4079,4096,4101,4106,4130,4143,4149,4154,4159,4181,4195,4200,4212,4217],{"__ignoreMap":28},[84,3246,3247],{"class":86,"line":87},[84,3248,3249],{"class":503},"#!/bin/bash\n",[84,3251,3252],{"class":86,"line":93},[84,3253,510],{"emptyLinePlaceholder":509},[84,3255,3256,3259,3261],{"class":86,"line":99},[84,3257,3258],{"class":120},"HOST",[84,3260,778],{"class":515},[84,3262,3263],{"class":141},"\"upload.example.com\"\n",[84,3265,3266,3269,3271],{"class":86,"line":105},[84,3267,3268],{"class":120},"CDN_HOST",[84,3270,778],{"class":515},[84,3272,3273],{"class":141},"\"cdn.example.com\"\n",[84,3275,3276,3279,3281,3284,3287],{"class":86,"line":158},[84,3277,3278],{"class":120},"UPLOAD_PATH",[84,3280,778],{"class":515},[84,3282,3283],{"class":141},"\"uploads/$(",[84,3285,3286],{"class":525},"date",[84,3288,3289],{"class":141}," +%Y/%m/%d)\"\n",[84,3291,3292],{"class":86,"line":164},[84,3293,510],{"emptyLinePlaceholder":509},[84,3295,3296,3299,3301],{"class":86,"line":261},[84,3297,3298],{"class":120},"AUTH_TOKEN",[84,3300,778],{"class":515},[84,3302,3303],{"class":141},"\"1145141919810\"\n",[84,3305,3306],{"class":86,"line":269},[84,3307,510],{"emptyLinePlaceholder":509},[84,3309,3310,3313,3315],{"class":86,"line":280},[84,3311,3312],{"class":120},"webp",[84,3314,778],{"class":515},[84,3316,3317],{"class":141},"false\n",[84,3319,3320,3323,3325],{"class":86,"line":288},[84,3321,3322],{"class":120},"markdown",[84,3324,778],{"class":515},[84,3326,3317],{"class":141},[84,3328,3329,3332,3334],{"class":86,"line":637},[84,3330,3331],{"class":120},"force",[84,3333,778],{"class":515},[84,3335,3317],{"class":141},[84,3337,3338,3341,3343],{"class":86,"line":642},[84,3339,3340],{"class":120},"keep",[84,3342,778],{"class":515},[84,3344,3317],{"class":141},[84,3346,3347],{"class":86,"line":656},[84,3348,510],{"emptyLinePlaceholder":509},[84,3350,3351,3354,3357,3360,3363,3366],{"class":86,"line":662},[84,3352,3353],{"class":515},"while",[84,3355,3356],{"class":126}," getopts",[84,3358,3359],{"class":141}," \":mwfkp:\"",[84,3361,3362],{"class":141}," opt",[84,3364,3365],{"class":120},"; ",[84,3367,2967],{"class":515},[84,3369,3370,3373,3376],{"class":86,"line":668},[84,3371,3372],{"class":515},"    case",[84,3374,3375],{"class":120}," $opt ",[84,3377,3378],{"class":515},"in\n",[84,3380,3381,3385,3388,3390,3392,3395,3397,3399],{"class":86,"line":674},[84,3382,3384],{"class":3383},"sA_wV","        m",[84,3386,3387],{"class":515},"|",[84,3389,3322],{"class":3383},[84,3391,3075],{"class":515},[84,3393,3394],{"class":120}," markdown",[84,3396,778],{"class":515},[84,3398,1789],{"class":141},[84,3400,3401],{"class":120}," ;;\n",[84,3403,3404,3407,3409,3411,3413,3416,3418,3420],{"class":86,"line":680},[84,3405,3406],{"class":3383},"        w",[84,3408,3387],{"class":515},[84,3410,3312],{"class":3383},[84,3412,3075],{"class":515},[84,3414,3415],{"class":120}," webp",[84,3417,778],{"class":515},[84,3419,1789],{"class":141},[84,3421,3401],{"class":120},[84,3423,3424,3427,3429,3431,3433,3436,3438,3440],{"class":86,"line":686},[84,3425,3426],{"class":3383},"        f",[84,3428,3387],{"class":515},[84,3430,3331],{"class":3383},[84,3432,3075],{"class":515},[84,3434,3435],{"class":120}," force",[84,3437,778],{"class":515},[84,3439,1789],{"class":141},[84,3441,3401],{"class":120},[84,3443,3444,3447,3449,3451,3453,3456,3458,3460],{"class":86,"line":692},[84,3445,3446],{"class":3383},"        k",[84,3448,3387],{"class":515},[84,3450,3340],{"class":3383},[84,3452,3075],{"class":515},[84,3454,3455],{"class":120}," keep",[84,3457,778],{"class":515},[84,3459,1789],{"class":141},[84,3461,3401],{"class":120},[84,3463,3464,3467,3469,3472,3474,3477,3479],{"class":86,"line":698},[84,3465,3466],{"class":3383},"        p",[84,3468,3387],{"class":515},[84,3470,3471],{"class":3383},"path",[84,3473,3075],{"class":515},[84,3475,3476],{"class":120}," UPLOAD_PATH",[84,3478,778],{"class":515},[84,3480,3481],{"class":120},"$OPTARG ;;\n",[84,3483,3484,3487,3489,3492,3495,3498,3501],{"class":86,"line":709},[84,3485,3486],{"class":126},"        \\?",[84,3488,3075],{"class":515},[84,3490,3491],{"class":126}," echo",[84,3493,3494],{"class":141}," \"Invalid option: -",[84,3496,3497],{"class":120},"$OPTARG",[84,3499,3500],{"class":141},"\"",[84,3502,3401],{"class":120},[84,3504,3505],{"class":86,"line":715},[84,3506,3507],{"class":515},"    esac\n",[84,3509,3510],{"class":86,"line":720},[84,3511,3005],{"class":515},[84,3513,3514,3517,3520,3523,3526,3529],{"class":86,"line":726},[84,3515,3516],{"class":126},"shift",[84,3518,3519],{"class":120}," $((",[84,3521,3522],{"class":525},"OPTIND",[84,3524,3525],{"class":141}," -",[84,3527,3528],{"class":126}," 1",[84,3530,3531],{"class":120},"))\n",[84,3533,3534],{"class":86,"line":732},[84,3535,510],{"emptyLinePlaceholder":509},[84,3537,3538,3541,3543,3546,3549,3551,3554],{"class":86,"line":740},[84,3539,3540],{"class":120},"UPLOAD_URL",[84,3542,778],{"class":515},[84,3544,3545],{"class":141},"\"https://",[84,3547,3548],{"class":120},"$HOST",[84,3550,2991],{"class":141},[84,3552,3553],{"class":120},"$UPLOAD_PATH",[84,3555,3556],{"class":141},"\"\n",[84,3558,3559,3562,3565,3567,3570,3572,3575,3578,3581],{"class":86,"line":746},[84,3560,3561],{"class":515},"if",[84,3563,3564],{"class":120}," [[ ",[84,3566,3500],{"class":141},[84,3568,3569],{"class":120},"$UPLOAD_URL",[84,3571,3500],{"class":141},[84,3573,3574],{"class":515}," ==",[84,3576,3577],{"class":515}," *",[84,3579,3580],{"class":120},"/ ]]; ",[84,3582,3583],{"class":515},"then\n",[84,3585,3586,3589,3591,3594,3596,3599],{"class":86,"line":763},[84,3587,3588],{"class":120},"    UPLOAD_URL",[84,3590,778],{"class":515},[84,3592,3593],{"class":141},"\"${",[84,3595,3540],{"class":120},[84,3597,3598],{"class":515},"%",[84,3600,3601],{"class":141},"?}\"\n",[84,3603,3604],{"class":86,"line":787},[84,3605,3606],{"class":515},"fi\n",[84,3608,3609],{"class":86,"line":809},[84,3610,510],{"emptyLinePlaceholder":509},[84,3612,3613,3615,3618,3620,3623,3626,3628,3630],{"class":86,"line":815},[84,3614,2953],{"class":515},[84,3616,3617],{"class":120}," image ",[84,3619,2959],{"class":515},[84,3621,3622],{"class":141}," \"",[84,3624,3625],{"class":126},"$@",[84,3627,3500],{"class":141},[84,3629,3365],{"class":120},[84,3631,2967],{"class":515},[84,3633,3634,3637,3640,3642,3645,3647,3649,3652,3655],{"class":86,"line":824},[84,3635,3636],{"class":515},"    if",[84,3638,3639],{"class":120}," [ ",[84,3641,3500],{"class":141},[84,3643,3644],{"class":120},"$webp",[84,3646,3500],{"class":141},[84,3648,522],{"class":515},[84,3650,3651],{"class":126}," true",[84,3653,3654],{"class":120}," ]; ",[84,3656,3583],{"class":515},[84,3658,3659,3662,3665,3667,3670,3672,3675,3678,3681,3683,3685,3687],{"class":86,"line":832},[84,3660,3661],{"class":525},"        cwebp",[84,3663,3664],{"class":126}," -quiet",[84,3666,3622],{"class":141},[84,3668,3669],{"class":120},"$image",[84,3671,3500],{"class":141},[84,3673,3674],{"class":126}," -o",[84,3676,3677],{"class":141}," \"${",[84,3679,3680],{"class":120},"image",[84,3682,3598],{"class":515},[84,3684,563],{"class":141},[84,3686,2005],{"class":515},[84,3688,3689],{"class":141},"}.webp\"\n",[84,3691,3692,3695,3697,3699,3701,3703,3705,3707],{"class":86,"line":838},[84,3693,3694],{"class":120},"        image",[84,3696,778],{"class":515},[84,3698,3593],{"class":141},[84,3700,3680],{"class":120},[84,3702,3598],{"class":515},[84,3704,563],{"class":141},[84,3706,2005],{"class":515},[84,3708,3689],{"class":141},[84,3710,3711],{"class":86,"line":843},[84,3712,3713],{"class":515},"    fi\n",[84,3715,3716],{"class":86,"line":861},[84,3717,510],{"emptyLinePlaceholder":509},[84,3719,3720,3722,3724,3726,3729,3731,3733,3735,3737],{"class":86,"line":869},[84,3721,3636],{"class":515},[84,3723,3639],{"class":120},[84,3725,3500],{"class":141},[84,3727,3728],{"class":120},"$keep",[84,3730,3500],{"class":141},[84,3732,522],{"class":515},[84,3734,3651],{"class":126},[84,3736,3654],{"class":120},[84,3738,3583],{"class":515},[84,3740,3741,3744,3746,3748,3751,3753,3755,3757],{"class":86,"line":892},[84,3742,3743],{"class":120},"        FILENAME",[84,3745,778],{"class":515},[84,3747,2848],{"class":120},[84,3749,3750],{"class":525},"basename",[84,3752,3622],{"class":141},[84,3754,3669],{"class":120},[84,3756,3500],{"class":141},[84,3758,2036],{"class":120},[84,3760,3761],{"class":86,"line":905},[84,3762,3763],{"class":515},"    else\n",[84,3765,3766,3768,3770,3773,3776,3779,3781,3784,3787,3790,3792,3794,3796,3798,3801,3804],{"class":86,"line":924},[84,3767,3743],{"class":120},[84,3769,778],{"class":515},[84,3771,3772],{"class":141},"\"$(",[84,3774,3775],{"class":525},"md5sum",[84,3777,3778],{"class":120}," $image",[84,3780,2860],{"class":515},[84,3782,3783],{"class":525}," cut",[84,3785,3786],{"class":126}," -c",[84,3788,3789],{"class":141}," 1-13).$(",[84,3791,3750],{"class":525},[84,3793,3778],{"class":120},[84,3795,2860],{"class":515},[84,3797,3783],{"class":525},[84,3799,3800],{"class":126}," -d.",[84,3802,3803],{"class":126}," -f2",[84,3805,3806],{"class":141},")\"\n",[84,3808,3809],{"class":86,"line":930},[84,3810,3713],{"class":515},[84,3812,3813],{"class":86,"line":935},[84,3814,510],{"emptyLinePlaceholder":509},[84,3816,3817,3819,3821,3823,3826,3828,3830,3832,3834],{"class":86,"line":944},[84,3818,3636],{"class":515},[84,3820,3639],{"class":120},[84,3822,3500],{"class":141},[84,3824,3825],{"class":120},"$force",[84,3827,3500],{"class":141},[84,3829,522],{"class":515},[84,3831,3651],{"class":126},[84,3833,3654],{"class":120},[84,3835,3583],{"class":515},[84,3837,3838,3841,3843,3845,3847,3849,3852,3855,3857,3859,3862,3865,3867],{"class":86,"line":955},[84,3839,3840],{"class":120},"        UPLOAD_RESPONSE",[84,3842,778],{"class":515},[84,3844,2848],{"class":120},[84,3846,2851],{"class":525},[84,3848,2854],{"class":126},[84,3850,3851],{"class":126}," -X",[84,3853,3854],{"class":141}," PUT",[84,3856,3677],{"class":141},[84,3858,3540],{"class":120},[84,3860,3861],{"class":141},"}/",[84,3863,3864],{"class":120},"$FILENAME",[84,3866,3500],{"class":141},[84,3868,3869],{"class":126}," \\\n",[84,3871,3872,3875,3878],{"class":86,"line":968},[84,3873,3874],{"class":126},"            -w",[84,3876,3877],{"class":141}," \"%{http_code}\"",[84,3879,3869],{"class":126},[84,3881,3882,3885,3888,3890,3892],{"class":86,"line":976},[84,3883,3884],{"class":126},"            --data-binary",[84,3886,3887],{"class":141}," @\"",[84,3889,3669],{"class":120},[84,3891,3500],{"class":141},[84,3893,3869],{"class":126},[84,3895,3896,3899,3902,3905,3907],{"class":86,"line":986},[84,3897,3898],{"class":126},"            -H",[84,3900,3901],{"class":141}," \"X-Custom-Auth-Key: ",[84,3903,3904],{"class":120},"$AUTH_TOKEN",[84,3906,3500],{"class":141},[84,3908,3869],{"class":126},[84,3910,3911,3913,3916],{"class":86,"line":998},[84,3912,3898],{"class":126},[84,3914,3915],{"class":141}," \"Overwrite: true\"",[84,3917,3869],{"class":126},[84,3919,3920],{"class":86,"line":1005},[84,3921,3922],{"class":120},"        )\n",[84,3924,3925],{"class":86,"line":1016},[84,3926,3763],{"class":515},[84,3928,3929,3931,3933,3935,3937,3939,3941,3943,3945,3947,3949,3951,3953],{"class":86,"line":1024},[84,3930,3840],{"class":120},[84,3932,778],{"class":515},[84,3934,2848],{"class":120},[84,3936,2851],{"class":525},[84,3938,2854],{"class":126},[84,3940,3851],{"class":126},[84,3942,3854],{"class":141},[84,3944,3677],{"class":141},[84,3946,3540],{"class":120},[84,3948,3861],{"class":141},[84,3950,3864],{"class":120},[84,3952,3500],{"class":141},[84,3954,3869],{"class":126},[84,3956,3957,3959,3961],{"class":86,"line":1037},[84,3958,3874],{"class":126},[84,3960,3877],{"class":141},[84,3962,3869],{"class":126},[84,3964,3965,3967,3969,3971,3973],{"class":86,"line":1045},[84,3966,3884],{"class":126},[84,3968,3887],{"class":141},[84,3970,3669],{"class":120},[84,3972,3500],{"class":141},[84,3974,3869],{"class":126},[84,3976,3977,3979,3981,3983,3985],{"class":86,"line":1050},[84,3978,3898],{"class":126},[84,3980,3901],{"class":141},[84,3982,3904],{"class":120},[84,3984,3500],{"class":141},[84,3986,3869],{"class":126},[84,3988,3989],{"class":86,"line":1062},[84,3990,3922],{"class":120},[84,3992,3993],{"class":86,"line":1074},[84,3994,3713],{"class":515},[84,3996,3997],{"class":86,"line":1086},[84,3998,510],{"emptyLinePlaceholder":509},[84,4000,4001,4004,4006,4008,4011,4013,4016,4018,4020,4023,4026],{"class":86,"line":1091},[84,4002,4003],{"class":120},"    UPLOAD_HTTP_CODE",[84,4005,778],{"class":515},[84,4007,2848],{"class":120},[84,4009,4010],{"class":126},"echo",[84,4012,3622],{"class":141},[84,4014,4015],{"class":120},"$UPLOAD_RESPONSE",[84,4017,3500],{"class":141},[84,4019,2860],{"class":515},[84,4021,4022],{"class":525}," tail",[84,4024,4025],{"class":126}," -n1",[84,4027,2036],{"class":120},[84,4029,4030],{"class":86,"line":1096},[84,4031,4032],{"class":120},"    \n",[84,4034,4035,4037,4039,4042,4044,4046,4048,4050],{"class":86,"line":1101},[84,4036,3636],{"class":515},[84,4038,3639],{"class":120},[84,4040,4041],{"class":515},"-n",[84,4043,3622],{"class":141},[84,4045,3553],{"class":120},[84,4047,3500],{"class":141},[84,4049,3654],{"class":120},[84,4051,3583],{"class":515},[84,4053,4054,4057,4059,4061,4064,4066,4068,4070,4072],{"class":86,"line":1106},[84,4055,4056],{"class":120},"        CDN_URL",[84,4058,778],{"class":515},[84,4060,3545],{"class":141},[84,4062,4063],{"class":120},"$CDN_HOST",[84,4065,2991],{"class":141},[84,4067,3553],{"class":120},[84,4069,2991],{"class":141},[84,4071,3864],{"class":120},[84,4073,3556],{"class":141},[84,4075,4077],{"class":86,"line":4076},62,[84,4078,3763],{"class":515},[84,4080,4082,4084,4086,4088,4090,4092,4094],{"class":86,"line":4081},63,[84,4083,4056],{"class":120},[84,4085,778],{"class":515},[84,4087,3545],{"class":141},[84,4089,4063],{"class":120},[84,4091,2991],{"class":141},[84,4093,3864],{"class":120},[84,4095,3556],{"class":141},[84,4097,4099],{"class":86,"line":4098},64,[84,4100,3713],{"class":515},[84,4102,4104],{"class":86,"line":4103},65,[84,4105,510],{"emptyLinePlaceholder":509},[84,4107,4109,4111,4113,4115,4118,4120,4123,4126,4128],{"class":86,"line":4108},66,[84,4110,3636],{"class":515},[84,4112,3639],{"class":120},[84,4114,3500],{"class":141},[84,4116,4117],{"class":120},"$UPLOAD_HTTP_CODE",[84,4119,3500],{"class":141},[84,4121,4122],{"class":515}," !=",[84,4124,4125],{"class":141}," \"200\"",[84,4127,3654],{"class":120},[84,4129,3583],{"class":515},[84,4131,4133,4136,4139,4141],{"class":86,"line":4132},67,[84,4134,4135],{"class":126},"        echo",[84,4137,4138],{"class":141}," \"上传失败: ",[84,4140,4015],{"class":120},[84,4142,3556],{"class":141},[84,4144,4146],{"class":86,"line":4145},68,[84,4147,4148],{"class":515},"        continue\n",[84,4150,4152],{"class":86,"line":4151},69,[84,4153,3713],{"class":515},[84,4155,4157],{"class":86,"line":4156},70,[84,4158,510],{"emptyLinePlaceholder":509},[84,4160,4162,4164,4166,4168,4171,4173,4175,4177,4179],{"class":86,"line":4161},71,[84,4163,3636],{"class":515},[84,4165,3639],{"class":120},[84,4167,3500],{"class":141},[84,4169,4170],{"class":120},"$markdown",[84,4172,3500],{"class":141},[84,4174,522],{"class":515},[84,4176,3651],{"class":126},[84,4178,3654],{"class":120},[84,4180,3583],{"class":515},[84,4182,4184,4186,4189,4192],{"class":86,"line":4183},72,[84,4185,4135],{"class":126},[84,4187,4188],{"class":141}," \"![](${",[84,4190,4191],{"class":120},"CDN_URL",[84,4193,4194],{"class":141},"})\"\n",[84,4196,4198],{"class":86,"line":4197},73,[84,4199,3763],{"class":515},[84,4201,4203,4205,4207,4209],{"class":86,"line":4202},74,[84,4204,4135],{"class":126},[84,4206,3677],{"class":141},[84,4208,4191],{"class":120},[84,4210,4211],{"class":141},"}\"\n",[84,4213,4215],{"class":86,"line":4214},75,[84,4216,3713],{"class":515},[84,4218,4220],{"class":86,"line":4219},76,[84,4221,3005],{"class":515},[20,4223,4224,4225,3218,4228,2670,4231,4234,4235,4237,4238,2670,4240,4242,4243,2670,4245,4248],{},"这一次使用 Cloudflare Workers 构建的 Restful API 很有意思，使用了 ",[44,4226,4227],{},"GET",[44,4229,4230],{},"PUT",[44,4232,4233],{},"DELETE"," 三个请求类型。",[44,4236,4227],{}," 请求很常见，是用来获取图片的，",[44,4239,4230],{},[44,4241,4233],{}," 在 web 开发就不如 ",[44,4244,4227],{},[44,4246,4247],{},"POST"," 常见了，这一次也是让我体会到了这两个 http verb 在 Storage Bucket 操作中是有多么形象了。",[1417,4250,4251,4274],{},[1420,4252,4253,4255,4256,4259,4260,4263,4264,4267,4268,4270,4271,4273],{},[44,4254,4230],{}," - 从直观上来讲，就是将某个文件放到目标位置",[4257,4258],"br",{},"打个比方，我向 ",[44,4261,4262],{},"https://cdn.example.com/img/avatar.webp"," 打了一个请求，并带上了要上传的文件，那就意味着我将这个文件放到了 Storage Bucket 的 ",[44,4265,4266],{},"/img/avatar.webp"," 这个位置，所以我在上传后，应该就能用 ",[44,4269,4227],{}," 请求我刚才 ",[44,4272,4230],{}," 的那个 URL 获取我刚才上传的东西。如果那个路径存在文件，那么默认行为是直接覆盖。",[1420,4275,4276,4278,4279,4281,4282,4284],{},[44,4277,4233],{}," - 删除目标路径的文件",[4257,4280],{},"和 ",[44,4283,4230],{}," 一样，我在请求对应 URL 后，Storage Bucket 中对应 URL 路径的资源应该被删除。",[20,4286,4287,2670,4289,4291,4292,4294],{},[44,4288,4230],{},[44,4290,4233],{}," 这两个 Http Verb 让我们更像是在对一个真实的文件系统进行操作，而非那种传统的使用 ",[44,4293,4247],{}," 上传的图床那样，我们并不通过 POST 请求上传一个文件，然后获取资源最终被放置位置的 URL —— 我们自己决定资源被存放的位置。",[20,4296,4297],{},"在这个 Shell 脚本中，引入了四个可选选项",[37,4299,4301],{"className":1435,"code":4300,"language":1437,"meta":28,"style":28},"    m|markdown) markdown=true ;;\n    w|webp) webp=true ;;\n    f|force) force=true ;;\n    k|keep) keep=true ;;\n    p|path) UPLOAD_PATH=$OPTARG ;;\n",[44,4302,4303,4321,4339,4357,4375],{"__ignoreMap":28},[84,4304,4305,4308,4310,4312,4315,4317,4319],{"class":86,"line":87},[84,4306,4307],{"class":525},"    m",[84,4309,3387],{"class":515},[84,4311,3322],{"class":525},[84,4313,4314],{"class":120},") markdown",[84,4316,778],{"class":515},[84,4318,1789],{"class":141},[84,4320,3401],{"class":120},[84,4322,4323,4326,4328,4330,4333,4335,4337],{"class":86,"line":93},[84,4324,4325],{"class":525},"    w",[84,4327,3387],{"class":515},[84,4329,3312],{"class":525},[84,4331,4332],{"class":120},") webp",[84,4334,778],{"class":515},[84,4336,1789],{"class":141},[84,4338,3401],{"class":120},[84,4340,4341,4344,4346,4348,4351,4353,4355],{"class":86,"line":99},[84,4342,4343],{"class":525},"    f",[84,4345,3387],{"class":515},[84,4347,3331],{"class":525},[84,4349,4350],{"class":120},") force",[84,4352,778],{"class":515},[84,4354,1789],{"class":141},[84,4356,3401],{"class":120},[84,4358,4359,4362,4364,4366,4369,4371,4373],{"class":86,"line":105},[84,4360,4361],{"class":525},"    k",[84,4363,3387],{"class":515},[84,4365,3340],{"class":525},[84,4367,4368],{"class":120},") keep",[84,4370,778],{"class":515},[84,4372,1789],{"class":141},[84,4374,3401],{"class":120},[84,4376,4377,4380,4382,4384,4387,4389],{"class":86,"line":158},[84,4378,4379],{"class":525},"    p",[84,4381,3387],{"class":515},[84,4383,3471],{"class":525},[84,4385,4386],{"class":120},") UPLOAD_PATH",[84,4388,778],{"class":515},[84,4390,3481],{"class":120},[1417,4392,4393,4400,4403,4406,4409],{},[1420,4394,4395,4396,4399],{},"markdown 选项决定返回值是否以 ",[44,4397,4398],{},"![]()"," 这种 URL 格式返回",[1420,4401,4402],{},"webp 决定上传过程中是否将图片转为 webp 后再上传",[1420,4404,4405],{},"force 决定如果遇到文件路径冲突，是否强制覆盖云端的文件",[1420,4407,4408],{},"keep 决定是否保留文件原有的文件名进行上传",[1420,4410,4411],{},"path 决定文件具体被存放的路径（或者使用默认的路径）",[20,4413,4414,4416,4417,4419],{},[44,4415,3258],{}," 是图床用于上传的地址，",[44,4418,3268],{}," 是图床用于被方可访问的地址。",[20,4421,4422],{},"由于急着用，也没考虑协程的处理方式，等等看后期有没有时间用 Python 重写吧。",[16,4424,4425],{"id":4425},"博客图床迁移脚本",[20,4427,4428],{},"因为只用一次，所以也没使用协程或者多线程的方式去上传文件——毕竟图片不多，也就两三百张。",[37,4430,4432],{"className":2277,"code":4431,"language":2279,"meta":28,"style":28},"import os\nimport re\nimport requests\n\n# 哪些后缀的文件需要检测是否存在老图床的 URL 并进行迁移？\nfile_extension = [\n    '.md',\n    '.yml',\n    '.html'\n]\n\npic_urls = []\n\n_files = []\n\n# 用于匹配老图床的正则表达式，这里是按照 lsky pro 的格式编写的\npattern = r'https://cdn.example.com/\\d{4}/\\d{2}/\\d{2}/[a-z0-9]{13}\\.[a-z]{3,4}'\n\n# 图片的上传部分，需要先从原 url 中下载图片，在上传到新图床中，如果需要的话可以在中途转换为 webp 格式\ndef upload(url):\n    \"\"\"\n    此处的返回值应该是新的 url\n    \"\"\"\n\n# 遍历目标后缀文件名的文件，如果存在老图床的 url，则将 url 加入到 pic_urls 列表中，并将这个文件的文件名（相对路径）添加到 _files 列表中\nfor root, dirs, files in os.walk(\".\"):\n    for file in files:\n        if file.endswith(tuple(file_extension)):\n            file_name = os.path.join(root, file)\n            with open(file_name, 'r') as f:\n                content = f.read()\n            urls = re.findall(pattern, content)\n            if urls:\n                pic_urls.extend(urls)\n                _files.append(file_name)\n\n# 先转为集合，再转回列表，进行去重\npic_urls = list(set(pic_urls))\nprint(\"共找到图片：\", len(pic_urls))\n\nurl_dict = {}\n\n# 将列表中的图片进行上传，每张图片最多尝试三次上传，如果三次都失败，则保留原连接\nfor i,u in enumerate(pci_urls, start=1):\n    for t in range(1,4):\n        try:\n            new_u = upload(u)\n            continue\n        except:\n            if t == 3:\n                new_u = u\n                print(f\"{u} 无法上传：{e}\")\n    url_dict[u] = new_u\n    print(f\"{i} / {len(pic_urls)}\")\n\n# 对 _files 列表中的文件一一完成替换\nfor file in _files:\n    with open(file, 'r') as f:\n        content = f.read()\n    for k, v in url_dict.items():\n        content = content.replace(k, v)\n    with open(file, 'w') as f:\n        f.write(content)\n    print(\"完成替换：\", file)\n",[44,4433,4434,4439,4444,4449,4453,4458,4463,4468,4473,4478,4482,4486,4491,4495,4500,4504,4509,4514,4518,4523,4528,4533,4538,4542,4546,4551,4556,4561,4566,4571,4576,4581,4586,4591,4596,4601,4605,4610,4615,4620,4624,4629,4633,4638,4643,4648,4653,4658,4663,4668,4673,4678,4683,4688,4693,4697,4702,4707,4712,4717,4722,4727,4732,4737],{"__ignoreMap":28},[84,4435,4436],{"class":86,"line":87},[84,4437,4438],{},"import os\n",[84,4440,4441],{"class":86,"line":93},[84,4442,4443],{},"import re\n",[84,4445,4446],{"class":86,"line":99},[84,4447,4448],{},"import requests\n",[84,4450,4451],{"class":86,"line":105},[84,4452,510],{"emptyLinePlaceholder":509},[84,4454,4455],{"class":86,"line":158},[84,4456,4457],{},"# 哪些后缀的文件需要检测是否存在老图床的 URL 并进行迁移？\n",[84,4459,4460],{"class":86,"line":164},[84,4461,4462],{},"file_extension = [\n",[84,4464,4465],{"class":86,"line":261},[84,4466,4467],{},"    '.md',\n",[84,4469,4470],{"class":86,"line":269},[84,4471,4472],{},"    '.yml',\n",[84,4474,4475],{"class":86,"line":280},[84,4476,4477],{},"    '.html'\n",[84,4479,4480],{"class":86,"line":288},[84,4481,1974],{},[84,4483,4484],{"class":86,"line":637},[84,4485,510],{"emptyLinePlaceholder":509},[84,4487,4488],{"class":86,"line":642},[84,4489,4490],{},"pic_urls = []\n",[84,4492,4493],{"class":86,"line":656},[84,4494,510],{"emptyLinePlaceholder":509},[84,4496,4497],{"class":86,"line":662},[84,4498,4499],{},"_files = []\n",[84,4501,4502],{"class":86,"line":668},[84,4503,510],{"emptyLinePlaceholder":509},[84,4505,4506],{"class":86,"line":674},[84,4507,4508],{},"# 用于匹配老图床的正则表达式，这里是按照 lsky pro 的格式编写的\n",[84,4510,4511],{"class":86,"line":680},[84,4512,4513],{},"pattern = r'https://cdn.example.com/\\d{4}/\\d{2}/\\d{2}/[a-z0-9]{13}\\.[a-z]{3,4}'\n",[84,4515,4516],{"class":86,"line":686},[84,4517,510],{"emptyLinePlaceholder":509},[84,4519,4520],{"class":86,"line":692},[84,4521,4522],{},"# 图片的上传部分，需要先从原 url 中下载图片，在上传到新图床中，如果需要的话可以在中途转换为 webp 格式\n",[84,4524,4525],{"class":86,"line":698},[84,4526,4527],{},"def upload(url):\n",[84,4529,4530],{"class":86,"line":709},[84,4531,4532],{},"    \"\"\"\n",[84,4534,4535],{"class":86,"line":715},[84,4536,4537],{},"    此处的返回值应该是新的 url\n",[84,4539,4540],{"class":86,"line":720},[84,4541,4532],{},[84,4543,4544],{"class":86,"line":726},[84,4545,510],{"emptyLinePlaceholder":509},[84,4547,4548],{"class":86,"line":732},[84,4549,4550],{},"# 遍历目标后缀文件名的文件，如果存在老图床的 url，则将 url 加入到 pic_urls 列表中，并将这个文件的文件名（相对路径）添加到 _files 列表中\n",[84,4552,4553],{"class":86,"line":740},[84,4554,4555],{},"for root, dirs, files in os.walk(\".\"):\n",[84,4557,4558],{"class":86,"line":746},[84,4559,4560],{},"    for file in files:\n",[84,4562,4563],{"class":86,"line":763},[84,4564,4565],{},"        if file.endswith(tuple(file_extension)):\n",[84,4567,4568],{"class":86,"line":787},[84,4569,4570],{},"            file_name = os.path.join(root, file)\n",[84,4572,4573],{"class":86,"line":809},[84,4574,4575],{},"            with open(file_name, 'r') as f:\n",[84,4577,4578],{"class":86,"line":815},[84,4579,4580],{},"                content = f.read()\n",[84,4582,4583],{"class":86,"line":824},[84,4584,4585],{},"            urls = re.findall(pattern, content)\n",[84,4587,4588],{"class":86,"line":832},[84,4589,4590],{},"            if urls:\n",[84,4592,4593],{"class":86,"line":838},[84,4594,4595],{},"                pic_urls.extend(urls)\n",[84,4597,4598],{"class":86,"line":843},[84,4599,4600],{},"                _files.append(file_name)\n",[84,4602,4603],{"class":86,"line":861},[84,4604,510],{"emptyLinePlaceholder":509},[84,4606,4607],{"class":86,"line":869},[84,4608,4609],{},"# 先转为集合，再转回列表，进行去重\n",[84,4611,4612],{"class":86,"line":892},[84,4613,4614],{},"pic_urls = list(set(pic_urls))\n",[84,4616,4617],{"class":86,"line":905},[84,4618,4619],{},"print(\"共找到图片：\", len(pic_urls))\n",[84,4621,4622],{"class":86,"line":924},[84,4623,510],{"emptyLinePlaceholder":509},[84,4625,4626],{"class":86,"line":930},[84,4627,4628],{},"url_dict = {}\n",[84,4630,4631],{"class":86,"line":935},[84,4632,510],{"emptyLinePlaceholder":509},[84,4634,4635],{"class":86,"line":944},[84,4636,4637],{},"# 将列表中的图片进行上传，每张图片最多尝试三次上传，如果三次都失败，则保留原连接\n",[84,4639,4640],{"class":86,"line":955},[84,4641,4642],{},"for i,u in enumerate(pci_urls, start=1):\n",[84,4644,4645],{"class":86,"line":968},[84,4646,4647],{},"    for t in range(1,4):\n",[84,4649,4650],{"class":86,"line":976},[84,4651,4652],{},"        try:\n",[84,4654,4655],{"class":86,"line":986},[84,4656,4657],{},"            new_u = upload(u)\n",[84,4659,4660],{"class":86,"line":998},[84,4661,4662],{},"            continue\n",[84,4664,4665],{"class":86,"line":1005},[84,4666,4667],{},"        except:\n",[84,4669,4670],{"class":86,"line":1016},[84,4671,4672],{},"            if t == 3:\n",[84,4674,4675],{"class":86,"line":1024},[84,4676,4677],{},"                new_u = u\n",[84,4679,4680],{"class":86,"line":1037},[84,4681,4682],{},"                print(f\"{u} 无法上传：{e}\")\n",[84,4684,4685],{"class":86,"line":1045},[84,4686,4687],{},"    url_dict[u] = new_u\n",[84,4689,4690],{"class":86,"line":1050},[84,4691,4692],{},"    print(f\"{i} / {len(pic_urls)}\")\n",[84,4694,4695],{"class":86,"line":1062},[84,4696,510],{"emptyLinePlaceholder":509},[84,4698,4699],{"class":86,"line":1074},[84,4700,4701],{},"# 对 _files 列表中的文件一一完成替换\n",[84,4703,4704],{"class":86,"line":1086},[84,4705,4706],{},"for file in _files:\n",[84,4708,4709],{"class":86,"line":1091},[84,4710,4711],{},"    with open(file, 'r') as f:\n",[84,4713,4714],{"class":86,"line":1096},[84,4715,4716],{},"        content = f.read()\n",[84,4718,4719],{"class":86,"line":1101},[84,4720,4721],{},"    for k, v in url_dict.items():\n",[84,4723,4724],{"class":86,"line":1106},[84,4725,4726],{},"        content = content.replace(k, v)\n",[84,4728,4729],{"class":86,"line":4076},[84,4730,4731],{},"    with open(file, 'w') as f:\n",[84,4733,4734],{"class":86,"line":4081},[84,4735,4736],{},"        f.write(content)\n",[84,4738,4739],{"class":86,"line":4098},[84,4740,4741],{},"    print(\"完成替换：\", file)\n",[431,4743,4744],{},"html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sA_wV, html code.shiki .sA_wV{--shiki-default:#032F62;--shiki-dark:#DBEDFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":28,"searchDepth":93,"depth":93,"links":4746},[4747,4748],{"id":3230,"depth":93,"text":3230},{"id":4425,"depth":93,"text":4425},{"title":4750,"date":4751,"path":4752,"tags":4753,"body":4756},"自建图床小记三—— SSL 证书的自动更新与部署","2024-08-14 10:35:18","/2024/08/14/auto-renew-ssl-certificate-and-deploy-to-upyun-with-github-action",[2100,3151,4754,2377,2378,4755,3150],"Github Action","SSL",{"type":13,"value":4757,"toc":5299},[4758,4762,4765,4768,4772,4775,4778,4784,4787,4790,4796,4799,4803,4806,4815,4818,4821,4827,4833,4836,4842,4845,4885,4888,4894,4900,4904,4913,4920,4925,4961,4965,4995,4999,5029,5033,5082,5085,5114,5118,5157,5160,5169,5265,5271,5273,5296],[16,4759,4761],{"id":4760},"为什么要自动更新","为什么要自动更新？",[20,4763,4764],{},"众所周知，为站点开启 https 访问需要获得对应 host 的 ssl 证书，而如果希望证书被访客的浏览器所信任，需要拿到由 Certificate Authority (CA) 签发的 ssl 证书。在前一阵子那波 BAT 等大厂提供的云服务停止发放免费的由 TrustAsia/DigiCert 签发的一年有效期免费 ssl 证书之后，市面上已经没有被广泛信任的 CA 签发的免费的一年有效期的 ssl 证书了，于是不得不用回由 Let's Encrypt/ZeroSSL 等 CA 签发三个月免费证书。",[20,4766,4767],{},"但话又说回来，三个月有效期确实不太够，一年有效期的证书就一年一更，手动申请部署也不麻烦；三个月有效期的证书手动就有点麻烦了——我一般会在证书到期的前 15 天进行更新，防止最后几天自己太忙了没时间管。",[16,4769,4771],{"id":4770},"这套图床架构的自动更新有没有困难","这套图床架构的自动更新有没有困难？",[1680,4773,4774],{"id":4774},"境外",[20,4776,4777],{},"通过 Cloudflare SaaS 接入的域名通过验证后会自动获得由 Cloudflare 提供的由 Google Trust Services 签发的证书，不需要我们操心。",[20,4779,4780],{},[26,4781],{"alt":4782,"src":4783},"SSL Certificate provided by Cloudflare","https://static.031130.xyz/uploads/2024/08/14/831d714565906.webp",[1680,4785,4786],{"id":4786},"境内",[20,4788,4789],{},"咱选用的又拍云 CDN 提供了免费的 Let's Encrypt 证书及其自动续期服务，但需要我们把图床访问域名的 DNS CNAME 解析到他们家。",[20,4791,4792],{},[26,4793],{"alt":4794,"src":4795},"SSL Certificate provided by upyun","https://static.031130.xyz/uploads/2024/08/14/b16f7752ef522.webp",[20,4797,4798],{},"这里有个问题，我们这套图床架构在境外的解析是解析到 Cloudflare 的，不可能通过 Let's Encrypt 的 acme challenge。如果使用 upyun 申请 ssl 证书，则意味着每次更新都要我们手动将境外的 dns 解析记录暂时解析到又拍云，待证书更新成功后再解析回 Cloudflare，非常麻烦。",[16,4800,4802],{"id":4801},"使用-github-action-跑-acmesh-获取-ssl-证书","使用 Github Action 跑 acme.sh 获取 ssl 证书",[20,4804,4805],{},"本着「能使用长期免费稳定服务就使用长期免费稳定服务」的思想，决定使用 Github Action 申请 ssl 证书。",[20,4807,4808,4809,4814],{},"在 Github Action 跑 acme.sh 获取 ssl 证书意味着不能使用 http 文件检验的方式检验域名所有权，需要使用 dns 检验。截至本文写作时间，acme.sh 已经支持了 150+ 个主流的 DNS 解析商（Managed DNS providers）的 api，针对不支持 api 修改 dns 解析记录的，还可以使用 ",[178,4810,4813],{"href":4811,"rel":4812},"https://github.com/acmesh-official/acme.sh/wiki/DNS-alias-mode",[182],"DNS alias 模式","——即将需要申请 ssl 证书的域名先 cname 到一个工具人域名上，将工具人域名通过 NS 解析到 acme.sh 支持的 DNS 解析商，进而实现 CA 对域名所有权的验证。",[1680,4816,4817],{"id":4817},"先在本地跑起来",[20,4819,4820],{},"我采用的是 Cloudflare，直接在个人资料页创建一个具有编辑 DNS 权限的 API 令牌",[20,4822,4823],{},[26,4824],{"alt":4825,"src":4826},"创建令牌","https://static.031130.xyz/uploads/2024/08/14/c0262d4aea708.webp",[20,4828,4829],{},[26,4830],{"alt":4831,"src":4832},"获得令牌","https://static.031130.xyz/uploads/2024/08/14/f30bfc93970bc.webp",[20,4834,4835],{},"随后在自己的域名页面，找到区域 ID 和 账户 ID",[20,4837,4838],{},[26,4839],{"alt":4840,"src":4841},"区域 ID 和 账户 ID","https://static.031130.xyz/uploads/2024/08/14/4c8d4a2019812.webp",[20,4843,4844],{},"在自己的本机安装 acme.sh,设置好 Cloudflare DNS 的几个变量",[37,4846,4848],{"className":1435,"code":4847,"language":1437,"meta":28,"style":28},"export CF_Token=\"\"\nexport CF_Account_ID=\"\"\nexport CF_Zone_ID=\"\"\n",[44,4849,4850,4863,4874],{"__ignoreMap":28},[84,4851,4852,4855,4858,4860],{"class":86,"line":87},[84,4853,4854],{"class":515},"export",[84,4856,4857],{"class":120}," CF_Token",[84,4859,778],{"class":515},[84,4861,4862],{"class":141},"\"\"\n",[84,4864,4865,4867,4870,4872],{"class":86,"line":93},[84,4866,4854],{"class":515},[84,4868,4869],{"class":120}," CF_Account_ID",[84,4871,778],{"class":515},[84,4873,4862],{"class":141},[84,4875,4876,4878,4881,4883],{"class":86,"line":99},[84,4877,4854],{"class":515},[84,4879,4880],{"class":120}," CF_Zone_ID",[84,4882,778],{"class":515},[84,4884,4862],{"class":141},[20,4886,4887],{},"随后可以尝试使用 acme.sh 签发 ssl 证书",[37,4889,4892],{"className":4890,"code":4891,"language":42},[40],"acme.sh --issue --dns dns_cf -d cdn.example.com\n",[44,4893,4891],{"__ignoreMap":28},[20,4895,4896],{},[26,4897],{"alt":4898,"src":4899},"ssl 证书到手","https://static.031130.xyz/uploads/2024/08/14/c78bc5afa3641.webp",[1680,4901,4903],{"id":4902},"上-github-action","上 Github Action",[20,4905,4906,4907,4912],{},"原本是打算直接用 ",[178,4908,4911],{"href":4909,"rel":4910},"https://github.com/Menci/acme",[182],"Menci/acme"," 这个 Action的，可惜遇到了点问题。",[20,4914,4915,4916,4919],{},"在我本地，Cloudflare 相关的 Token 和 ID 并没有被写入到 account.conf，而是被写在 ",[44,4917,4918],{},"cdn.example.com_ecc/cdn.exampe.com.conf","，大概就没办法直接用这个 Action 了，不得不转去手搓。不过好在 Menci/acme 中还是能抄到不少的。",[4921,4922,4924],"h4",{"id":4923},"压缩本地的-ca-文件夹","压缩本地的 ca 文件夹",[37,4926,4928],{"className":1435,"code":4927,"language":1437,"meta":28,"style":28},"cd $HOME/.acme.sh/ && tar cz ca | base64 -w0\n",[44,4929,4930],{"__ignoreMap":28},[84,4931,4932,4935,4938,4941,4944,4947,4950,4953,4955,4958],{"class":86,"line":87},[84,4933,4934],{"class":126},"cd",[84,4936,4937],{"class":120}," $HOME",[84,4939,4940],{"class":141},"/.acme.sh/",[84,4942,4943],{"class":120}," && ",[84,4945,4946],{"class":525},"tar",[84,4948,4949],{"class":141}," cz",[84,4951,4952],{"class":141}," ca",[84,4954,2860],{"class":515},[84,4956,4957],{"class":525}," base64",[84,4959,4960],{"class":126}," -w0\n",[4921,4962,4964],{"id":4963},"安装-acmesh","安装 acme.sh",[37,4966,4970],{"className":4967,"code":4968,"language":4969,"meta":28,"style":28},"language-yaml shiki shiki-themes github-light github-dark","- name: Install acme.sh\n  run: curl https://get.acme.sh | sh\n","yaml",[44,4971,4972,4985],{"__ignoreMap":28},[84,4973,4974,4977,4980,4982],{"class":86,"line":87},[84,4975,4976],{"class":120},"- ",[84,4978,4979],{"class":207},"name",[84,4981,138],{"class":120},[84,4983,4984],{"class":141},"Install acme.sh\n",[84,4986,4987,4990,4992],{"class":86,"line":93},[84,4988,4989],{"class":207},"  run",[84,4991,138],{"class":120},[84,4993,4994],{"class":141},"curl https://get.acme.sh | sh\n",[4921,4996,4998],{"id":4997},"解压-ca-文件夹","解压 ca 文件夹",[37,5000,5002],{"className":4967,"code":5001,"language":4969,"meta":28,"style":28},"- name: Extract account files for acme.sh\n  run: |\n    echo \"${{ secrets.ACME_SH_ACCOUNT_TAR }}\" | base64 -d | tar -C ~/.acme.sh -xz\n",[44,5003,5004,5015,5024],{"__ignoreMap":28},[84,5005,5006,5008,5010,5012],{"class":86,"line":87},[84,5007,4976],{"class":120},[84,5009,4979],{"class":207},[84,5011,138],{"class":120},[84,5013,5014],{"class":141},"Extract account files for acme.sh\n",[84,5016,5017,5019,5021],{"class":86,"line":93},[84,5018,4989],{"class":207},[84,5020,138],{"class":120},[84,5022,5023],{"class":515},"|\n",[84,5025,5026],{"class":86,"line":99},[84,5027,5028],{"class":141},"    echo \"${{ secrets.ACME_SH_ACCOUNT_TAR }}\" | base64 -d | tar -C ~/.acme.sh -xz\n",[4921,5030,5032],{"id":5031},"执行-acmesh-申请证书","执行 acme.sh 申请证书",[37,5034,5036],{"className":4967,"code":5035,"language":4969,"meta":28,"style":28},"- name: Issue Certificate\n  run: |\n    export CF_Token=\"${{ secrets.CF_TOKEN }}\"\n    export CF_Zone_ID=\"${{ secrets.CF_ZONE_ID }}\"\n    export CF_Account_ID=\"${{ secrets.CF_ACCOUNT_ID }}\"\n    mkdir -p output\n    ~/.acme.sh/acme.sh --issue --dns dns_cf --force -d ${{ env.domain }} --fullchain-file output/fullchain.pem --key-file output/key.pem\n",[44,5037,5038,5049,5057,5062,5067,5072,5077],{"__ignoreMap":28},[84,5039,5040,5042,5044,5046],{"class":86,"line":87},[84,5041,4976],{"class":120},[84,5043,4979],{"class":207},[84,5045,138],{"class":120},[84,5047,5048],{"class":141},"Issue Certificate\n",[84,5050,5051,5053,5055],{"class":86,"line":93},[84,5052,4989],{"class":207},[84,5054,138],{"class":120},[84,5056,5023],{"class":515},[84,5058,5059],{"class":86,"line":99},[84,5060,5061],{"class":141},"    export CF_Token=\"${{ secrets.CF_TOKEN }}\"\n",[84,5063,5064],{"class":86,"line":105},[84,5065,5066],{"class":141},"    export CF_Zone_ID=\"${{ secrets.CF_ZONE_ID }}\"\n",[84,5068,5069],{"class":86,"line":158},[84,5070,5071],{"class":141},"    export CF_Account_ID=\"${{ secrets.CF_ACCOUNT_ID }}\"\n",[84,5073,5074],{"class":86,"line":164},[84,5075,5076],{"class":141},"    mkdir -p output\n",[84,5078,5079],{"class":86,"line":261},[84,5080,5081],{"class":141},"    ~/.acme.sh/acme.sh --issue --dns dns_cf --force -d ${{ env.domain }} --fullchain-file output/fullchain.pem --key-file output/key.pem\n",[4921,5083,5084],{"id":5084},"压缩证书",[37,5086,5088],{"className":4967,"code":5087,"language":4969,"meta":28,"style":28},"- name: zip Certificate\n  run: |\n    zip -j output/${{ env.domain }}_$(date +%Y%m%d).zip output/fullchain.pem output/key.pem\n",[44,5089,5090,5101,5109],{"__ignoreMap":28},[84,5091,5092,5094,5096,5098],{"class":86,"line":87},[84,5093,4976],{"class":120},[84,5095,4979],{"class":207},[84,5097,138],{"class":120},[84,5099,5100],{"class":141},"zip Certificate\n",[84,5102,5103,5105,5107],{"class":86,"line":93},[84,5104,4989],{"class":207},[84,5106,138],{"class":120},[84,5108,5023],{"class":515},[84,5110,5111],{"class":86,"line":99},[84,5112,5113],{"class":141},"    zip -j output/${{ env.domain }}_$(date +%Y%m%d).zip output/fullchain.pem output/key.pem\n",[4921,5115,5117],{"id":5116},"通过-tg-bot-发送压缩包给自己","通过 tg bot 发送压缩包给自己",[37,5119,5121],{"className":4967,"code":5120,"language":4969,"meta":28,"style":28},"- name: Push Certificate\n  run: |\n    TG_BOT_TOKEN=\"${{ secrets.TG_BOT_TOKEN }}\"\n    TG_CHAT_ID=\"${{ secrets.TG_CHAT_ID }}\"\n    curl -s -X POST https://api.telegram.org/bot${TG_BOT_TOKEN}/sendDocument -F chat_id=${TG_CHAT_ID} -F document=\"@output/${{ env.domain }}_$(date +%Y%m%d).zip\"\n",[44,5122,5123,5134,5142,5147,5152],{"__ignoreMap":28},[84,5124,5125,5127,5129,5131],{"class":86,"line":87},[84,5126,4976],{"class":120},[84,5128,4979],{"class":207},[84,5130,138],{"class":120},[84,5132,5133],{"class":141},"Push Certificate\n",[84,5135,5136,5138,5140],{"class":86,"line":93},[84,5137,4989],{"class":207},[84,5139,138],{"class":120},[84,5141,5023],{"class":515},[84,5143,5144],{"class":86,"line":99},[84,5145,5146],{"class":141},"    TG_BOT_TOKEN=\"${{ secrets.TG_BOT_TOKEN }}\"\n",[84,5148,5149],{"class":86,"line":105},[84,5150,5151],{"class":141},"    TG_CHAT_ID=\"${{ secrets.TG_CHAT_ID }}\"\n",[84,5153,5154],{"class":86,"line":158},[84,5155,5156],{"class":141},"    curl -s -X POST https://api.telegram.org/bot${TG_BOT_TOKEN}/sendDocument -F chat_id=${TG_CHAT_ID} -F document=\"@output/${{ env.domain }}_$(date +%Y%m%d).zip\"\n",[4921,5158,5159],{"id":5159},"部署到又拍云",[20,5161,5162,5163,5168],{},"这里使用的是 ",[178,5164,5167],{"href":5165,"rel":5166},"https://github.com/Menci/deploy-certificate-to-upyun/",[182],"menci/deploy-certificate-to-upyun","。由于又拍云没有提供上传 ssl 证书的 api，因此只能通过模拟用户登陆的方式实现。",[37,5170,5172],{"className":4967,"code":5171,"language":4969,"meta":28,"style":28},"- name: Deploy To Upyun\n  uses: Menci/deploy-certificate-to-upyun@beta-v2\n  with:\n    subaccount-username: ${{ secrets.UPYUN_SUBACCOUNT_USERNAME }}\n    subaccount-password: ${{ secrets.UPYUN_SUBACCOUNT_PASSWORD }}\n    fullchain-file: output/fullchain.pem\n    key-file: output/key.pem\n    domains: |\n      ${{ env.domain }}\n    delete-unused-certificates: true\n",[44,5173,5174,5185,5195,5202,5212,5222,5232,5242,5251,5256],{"__ignoreMap":28},[84,5175,5176,5178,5180,5182],{"class":86,"line":87},[84,5177,4976],{"class":120},[84,5179,4979],{"class":207},[84,5181,138],{"class":120},[84,5183,5184],{"class":141},"Deploy To Upyun\n",[84,5186,5187,5190,5192],{"class":86,"line":93},[84,5188,5189],{"class":207},"  uses",[84,5191,138],{"class":120},[84,5193,5194],{"class":141},"Menci/deploy-certificate-to-upyun@beta-v2\n",[84,5196,5197,5200],{"class":86,"line":99},[84,5198,5199],{"class":207},"  with",[84,5201,211],{"class":120},[84,5203,5204,5207,5209],{"class":86,"line":105},[84,5205,5206],{"class":207},"    subaccount-username",[84,5208,138],{"class":120},[84,5210,5211],{"class":141},"${{ secrets.UPYUN_SUBACCOUNT_USERNAME }}\n",[84,5213,5214,5217,5219],{"class":86,"line":158},[84,5215,5216],{"class":207},"    subaccount-password",[84,5218,138],{"class":120},[84,5220,5221],{"class":141},"${{ secrets.UPYUN_SUBACCOUNT_PASSWORD }}\n",[84,5223,5224,5227,5229],{"class":86,"line":164},[84,5225,5226],{"class":207},"    fullchain-file",[84,5228,138],{"class":120},[84,5230,5231],{"class":141},"output/fullchain.pem\n",[84,5233,5234,5237,5239],{"class":86,"line":261},[84,5235,5236],{"class":207},"    key-file",[84,5238,138],{"class":120},[84,5240,5241],{"class":141},"output/key.pem\n",[84,5243,5244,5247,5249],{"class":86,"line":269},[84,5245,5246],{"class":207},"    domains",[84,5248,138],{"class":120},[84,5250,5023],{"class":515},[84,5252,5253],{"class":86,"line":280},[84,5254,5255],{"class":141},"      ${{ env.domain }}\n",[84,5257,5258,5261,5263],{"class":86,"line":288},[84,5259,5260],{"class":207},"    delete-unused-certificates",[84,5262,138],{"class":120},[84,5264,258],{"class":126},[20,5266,5267],{},[26,5268],{"alt":5269,"src":5270},"SSL 证书成功部署到又拍云","https://static.031130.xyz/uploads/2024/08/14/222a754d25c97.webp",[16,5272,2066],{"id":2066},[1417,5274,5275,5282,5289],{},[1420,5276,5277],{},[178,5278,5281],{"href":5279,"rel":5280},"https://blog.men.ci/ssl-with-github-actions/",[182],"使用 GitHub Actions 自动申请与部署 ACME SSL 证书",[1420,5283,5284],{},[178,5285,5288],{"href":5286,"rel":5287},"https://shiping.date/82.html",[182],"（续）acme.sh脚本使用新cloudflare api令牌申请证书",[1420,5290,5291],{},[178,5292,5295],{"href":5293,"rel":5294},"https://github.com/acmesh-official/acme.sh",[182],"acmesh-official/acme.sh",[431,5297,5298],{},"html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}",{"title":28,"searchDepth":93,"depth":93,"links":5300},[5301,5302,5306,5310],{"id":4760,"depth":93,"text":4761},{"id":4770,"depth":93,"text":4771,"children":5303},[5304,5305],{"id":4774,"depth":99,"text":4774},{"id":4786,"depth":99,"text":4786},{"id":4801,"depth":93,"text":4802,"children":5307},[5308,5309],{"id":4817,"depth":99,"text":4817},{"id":4902,"depth":99,"text":4903},{"id":2066,"depth":93,"text":2066},{"title":5312,"date":5313,"path":5314,"tags":5315,"body":5317},"自建图床小记二——使用 Workers 为 R2 构建 Restful API","2024-08-13 22:58:26","/2024/08/13/build-restful-api-for-cloudflare-r2-with-cloudflare-workers",[3150,5316,1657,2098],"Cloudflare",{"type":13,"value":5318,"toc":6032},[5319,5323,5326,5330,5336,5340,5346,5348,5353,5357,5360,5363,5370,5376,5379,5386,5388,5393,5397,5400,5403,5409,5413,5418,5433,5438,5442,5445,5449,5462,5468,5470,5475,5479,5482,5490,5494,5497,5813,5816,5830,5833,5837,5840,5845,5849,5852,5855,5924,5927,5934,5937,5940,5999,6001,6029],[16,5320,5322],{"id":5321},"访问-r2-的两种方式","访问 R2 的两种方式",[20,5324,5325],{},"一般来说，想要访问 Cloudflare R2 中的文件，会有两种方式。",[1680,5327,5329],{"id":5328},"一种是在-r2-的设置界面设置自定义域","一种是在 R2 的设置界面设置自定义域",[20,5331,5332],{},[26,5333],{"alt":5334,"src":5335},"设置自定义域","https://static.031130.xyz/uploads/2024/08/13/61fe9ede194af.webp",[1680,5337,5339],{"id":5338},"另一种是通过-cloudflare-workers-进行访问","另一种是通过 Cloudflare Workers 进行访问",[20,5341,5342],{},[26,5343],{"alt":5344,"src":5345},"通过 Cloudflare Workers","https://static.031130.xyz/uploads/2024/08/13/846164273571d.webp",[415,5347],{},[20,5349,5350],{},[1430,5351,5352],{},"那么应该选择哪种？选择 Cloudflare Workers！",[16,5354,5356],{"id":5355},"为什么是-cloudflare-workers","为什么是 Cloudflare Workers？",[20,5358,5359],{},"要回答这个问题比较困难，但可以回答另一个问题——「为什么不设置自定义域实现直接访问？」",[1680,5361,5362],{"id":5362},"自定义域的访问存在限制",[20,5364,5365,5366,5369],{},"设置自定义域的访问方式存在较多的限制，让我们先来复习一下",[178,5367,5368],{"href":3216},"上一篇博客中","提到的 DNS 解析方案 1",[20,5371,5372],{},[26,5373],{"alt":5374,"src":5375},"DNS 解析方案 1","https://static.031130.xyz/uploads/2024/08/13/03d8243b67593.webp",[20,5377,5378],{},"在这里，我们需要将图床访问域名通过 NS 接入 DnsPod 实现境内外的分流，但 R2 所允许设置的自定义域必须是通过 NS 接入 Cloudflare 的，这存在冲突。那如果我们先将自定义域设置为通过 NS 接入 Cloudflare 的工具人域名，再将图床访问域名通过 CNAME 解析到工具人域名会不会有问题呢？恭喜你获得 403 Forbidden。",[20,5380,5381,5382,5385],{},"如果通过",[178,5383,5384],{"href":3216},"上一篇文章","中的 DNS 解析方案 2 来进行 DNS 解析，能不能成功设置为 Cloudflare R2 的自定义域呢？也不行，Cloudflare R2 的自定义域会占用域名的解析，这意味着你无法将图床访问域名解析到用于分流的工具人域名。",[415,5387],{},[20,5389,5390],{},[1430,5391,5392],{},"结论：截至本文写作时间，设置自定义域的方案不适用于 DNS 分流的图床架构。",[1680,5394,5396],{"id":5395},"如何上传文件到-cloudflare-r2","如何上传文件到 Cloudflare R2？",[4921,5398,5399],{"id":5399},"网页端直接上传",[20,5401,5402],{},"最简单的上传方式是直接在 Cloudflare 进行网页上传，但这种方案不适合自动化脚本，也没法接入 Typora",[20,5404,5405],{},[26,5406],{"alt":5407,"src":5408},"直接在网页端进行上传","https://static.031130.xyz/uploads/2024/08/13/b4d1b5b3edfae.webp",[4921,5410,5412],{"id":5411},"使用-amazon-s3-的兼容-api","使用 Amazon S3 的兼容 API",[5414,5415,5417],"h5",{"id":5416},"手动调用-s3-api","手动调用 S3 API",[20,5419,5420,5421,5426,5427,5432],{},"Cloudflare R2 被设计为兼容 Amazon S3 的存储方案，自然兼容 Amazon S3 的上传 API，在 ",[178,5422,5425],{"href":5423,"rel":5424},"https://developers.cloudflare.com/r2/api/s3/api/",[182],"Cloudflare Docs 中有关于 S3 API 的实现情况","记载，大部分接口功能都是实现了的。但。。。但 S3 使用的是 ",[178,5428,5431],{"href":5429,"rel":5430},"https://docs.aws.amazon.com/zh_cn/IAM/latest/UserGuide/create-signed-request.html",[182],"AWS Signature"," 作为鉴权，你不会希望在每个自动化程序中都自己实现一次的。。。",[20,5434,5435],{},[26,5436],{"alt":5437,"src":5437},"https://docs.aws.amazon.com/zh_cn/IAM/latest/UserGuide/images/sigV4-using-auth-header.png",[5414,5439,5441],{"id":5440},"使用-aws-cli-等-sdk","使用 aws-cli 等 SDK",[20,5443,5444],{},"使用 aws-cli 可以自动实现计算 AWS Signature，这是一种可行的方案，但我可能会在别的服务中使用到我的图床，不是所有的服务所处的环境都能够执行 shell 命令，也不是所有的编程语言都有现成的 SDK 可用。",[4921,5446,5448],{"id":5447},"使用-cloudflare-workers-构建-restful-api","使用 Cloudflare Workers 构建 Restful API",[20,5450,5451,5456,5457,1606],{},[178,5452,5455],{"href":5453,"rel":5454},"https://developers.cloudflare.com/r2/api/workers/workers-api-usage/#5-access-your-r2-bucket-from-your-worker",[182],"在 Cloudflare Docs 中明确提出可以使用 Cloudflare Workers 访问 Cloudflare R2 Bucket，","通过 Workers 设置界面的按钮，可以非常方便的将 R2 Bucket 作为一个 R2Object 绑定到 JavaScript 的一个变量中，",[178,5458,5461],{"href":5459,"rel":5460},"https://developers.cloudflare.com/r2/api/workers/workers-api-reference/",[182],"这里有相关的开发文档",[20,5463,5464],{},[26,5465],{"alt":5466,"src":5467},"绑定为变量","https://static.031130.xyz/uploads/2024/08/13/45e58b47f3aeb.webp",[415,5469],{},[20,5471,5472],{},[1430,5473,5474],{},"结论: 从易用性上来看，使用 Cloudflare Workers 构建 Restful API 这种上传文件的方案是最为合适的。",[16,5476,5478],{"id":5477},"使用-cloudflare-workers-构建-restful-api-的方案有没有什么缺点","使用 Cloudflare Workers 构建 Restful API 的方案有没有什么缺点？",[20,5480,5481],{},"有。",[1417,5483,5484,5487],{},[1420,5485,5486],{},"Cloudflare Workers 的每日额度是有限的，在极端的流量下可能会用完（应该不会吧？）",[1420,5488,5489],{},"Cloudflare Workers 的内存限制为 128MB，在上传下载 > 100MB 的文件时可能会出错。有这种体积上传需求的场景建议使用别的上传方案。",[16,5491,5493],{"id":5492},"如何构建","如何构建？",[20,5495,5496],{},"直接贴代码",[37,5498,5500],{"className":494,"code":5499,"language":496,"meta":28,"style":28},"const hasValidHeader = (request, env) => {\n    return request.headers.get('X-Custom-Auth-Key') === env.AUTH_KEY_SECRET;\n};\n\nfunction authorizeRequest(request, env, key) {\n    switch (request.method) {\n        case 'PUT':\n        case 'DELETE':\n            return hasValidHeader(request, env);\n        case 'GET':\n            return true;\n        default:\n            return false;\n    }\n}\n\nexport default {\n    async fetch(request, env) {\n        const url = new URL(request.url);\n        const key = decodeURI(url.pathname.slice(1));\n\n        if (!authorizeRequest(request, env, key)) {\n            return new Response('Forbidden\\n', { status: 403 });\n        }\n\n        switch (request.method) {\n            case 'PUT':\n                const objectExists = await env.MY_BUCKET.get(key);\n\n                if (objectExists !== null) {\n                    if (request.headers.get('Overwrite') !== 'true') {\n                        return new Response('Object Already Exists\\n', { status: 409 });\n                    }\n                }\n\n                await env.MY_BUCKET.put(key, request.body);\n                return new Response(`Put ${key} successfully!\\n`);\n\n            case 'GET':\n                const object = await env.MY_BUCKET.get(key);\n\n                if (object === null) {\n                    return new Response('Object Not Found\\n', { status: 404 });\n                }\n\n                const headers = new Headers();\n                object.writeHttpMetadata(headers);\n                headers.set('etag', object.httpEtag);\n\n                return new Response(object.body, {\n                    headers,\n                });\n            case 'DELETE':\n                await env.MY_BUCKET.delete(key);\n                return new Response('Deleted!\\n');\n\n            default:\n                return new Response('Method Not Allowed\\n', {\n                    status: 405,\n                    headers: {\n                        Allow: 'PUT, GET, DELETE',\n                    },\n                });\n        }\n    },\n};\n",[44,5501,5502,5507,5512,5517,5521,5526,5531,5536,5541,5546,5551,5556,5561,5566,5570,5574,5578,5583,5588,5593,5598,5602,5607,5612,5616,5620,5625,5630,5635,5639,5644,5649,5654,5659,5664,5668,5673,5678,5682,5687,5692,5696,5701,5706,5710,5714,5719,5724,5729,5733,5738,5743,5748,5753,5758,5763,5767,5772,5777,5782,5787,5792,5797,5801,5805,5809],{"__ignoreMap":28},[84,5503,5504],{"class":86,"line":87},[84,5505,5506],{},"const hasValidHeader = (request, env) => {\n",[84,5508,5509],{"class":86,"line":93},[84,5510,5511],{},"    return request.headers.get('X-Custom-Auth-Key') === env.AUTH_KEY_SECRET;\n",[84,5513,5514],{"class":86,"line":99},[84,5515,5516],{},"};\n",[84,5518,5519],{"class":86,"line":105},[84,5520,510],{"emptyLinePlaceholder":509},[84,5522,5523],{"class":86,"line":158},[84,5524,5525],{},"function authorizeRequest(request, env, key) {\n",[84,5527,5528],{"class":86,"line":164},[84,5529,5530],{},"    switch (request.method) {\n",[84,5532,5533],{"class":86,"line":261},[84,5534,5535],{},"        case 'PUT':\n",[84,5537,5538],{"class":86,"line":269},[84,5539,5540],{},"        case 'DELETE':\n",[84,5542,5543],{"class":86,"line":280},[84,5544,5545],{},"            return hasValidHeader(request, env);\n",[84,5547,5548],{"class":86,"line":288},[84,5549,5550],{},"        case 'GET':\n",[84,5552,5553],{"class":86,"line":637},[84,5554,5555],{},"            return true;\n",[84,5557,5558],{"class":86,"line":642},[84,5559,5560],{},"        default:\n",[84,5562,5563],{"class":86,"line":656},[84,5564,5565],{},"            return false;\n",[84,5567,5568],{"class":86,"line":662},[84,5569,2600],{},[84,5571,5572],{"class":86,"line":668},[84,5573,167],{},[84,5575,5576],{"class":86,"line":674},[84,5577,510],{"emptyLinePlaceholder":509},[84,5579,5580],{"class":86,"line":680},[84,5581,5582],{},"export default {\n",[84,5584,5585],{"class":86,"line":686},[84,5586,5587],{},"    async fetch(request, env) {\n",[84,5589,5590],{"class":86,"line":692},[84,5591,5592],{},"        const url = new URL(request.url);\n",[84,5594,5595],{"class":86,"line":698},[84,5596,5597],{},"        const key = decodeURI(url.pathname.slice(1));\n",[84,5599,5600],{"class":86,"line":709},[84,5601,510],{"emptyLinePlaceholder":509},[84,5603,5604],{"class":86,"line":715},[84,5605,5606],{},"        if (!authorizeRequest(request, env, key)) {\n",[84,5608,5609],{"class":86,"line":720},[84,5610,5611],{},"            return new Response('Forbidden\\n', { status: 403 });\n",[84,5613,5614],{"class":86,"line":726},[84,5615,835],{},[84,5617,5618],{"class":86,"line":732},[84,5619,510],{"emptyLinePlaceholder":509},[84,5621,5622],{"class":86,"line":740},[84,5623,5624],{},"        switch (request.method) {\n",[84,5626,5627],{"class":86,"line":746},[84,5628,5629],{},"            case 'PUT':\n",[84,5631,5632],{"class":86,"line":763},[84,5633,5634],{},"                const objectExists = await env.MY_BUCKET.get(key);\n",[84,5636,5637],{"class":86,"line":787},[84,5638,510],{"emptyLinePlaceholder":509},[84,5640,5641],{"class":86,"line":809},[84,5642,5643],{},"                if (objectExists !== null) {\n",[84,5645,5646],{"class":86,"line":815},[84,5647,5648],{},"                    if (request.headers.get('Overwrite') !== 'true') {\n",[84,5650,5651],{"class":86,"line":824},[84,5652,5653],{},"                        return new Response('Object Already Exists\\n', { status: 409 });\n",[84,5655,5656],{"class":86,"line":832},[84,5657,5658],{},"                    }\n",[84,5660,5661],{"class":86,"line":838},[84,5662,5663],{},"                }\n",[84,5665,5666],{"class":86,"line":843},[84,5667,510],{"emptyLinePlaceholder":509},[84,5669,5670],{"class":86,"line":861},[84,5671,5672],{},"                await env.MY_BUCKET.put(key, request.body);\n",[84,5674,5675],{"class":86,"line":869},[84,5676,5677],{},"                return new Response(`Put ${key} successfully!\\n`);\n",[84,5679,5680],{"class":86,"line":892},[84,5681,510],{"emptyLinePlaceholder":509},[84,5683,5684],{"class":86,"line":905},[84,5685,5686],{},"            case 'GET':\n",[84,5688,5689],{"class":86,"line":924},[84,5690,5691],{},"                const object = await env.MY_BUCKET.get(key);\n",[84,5693,5694],{"class":86,"line":930},[84,5695,510],{"emptyLinePlaceholder":509},[84,5697,5698],{"class":86,"line":935},[84,5699,5700],{},"                if (object === null) {\n",[84,5702,5703],{"class":86,"line":944},[84,5704,5705],{},"                    return new Response('Object Not Found\\n', { status: 404 });\n",[84,5707,5708],{"class":86,"line":955},[84,5709,5663],{},[84,5711,5712],{"class":86,"line":968},[84,5713,510],{"emptyLinePlaceholder":509},[84,5715,5716],{"class":86,"line":976},[84,5717,5718],{},"                const headers = new Headers();\n",[84,5720,5721],{"class":86,"line":986},[84,5722,5723],{},"                object.writeHttpMetadata(headers);\n",[84,5725,5726],{"class":86,"line":998},[84,5727,5728],{},"                headers.set('etag', object.httpEtag);\n",[84,5730,5731],{"class":86,"line":1005},[84,5732,510],{"emptyLinePlaceholder":509},[84,5734,5735],{"class":86,"line":1016},[84,5736,5737],{},"                return new Response(object.body, {\n",[84,5739,5740],{"class":86,"line":1024},[84,5741,5742],{},"                    headers,\n",[84,5744,5745],{"class":86,"line":1037},[84,5746,5747],{},"                });\n",[84,5749,5750],{"class":86,"line":1045},[84,5751,5752],{},"            case 'DELETE':\n",[84,5754,5755],{"class":86,"line":1050},[84,5756,5757],{},"                await env.MY_BUCKET.delete(key);\n",[84,5759,5760],{"class":86,"line":1062},[84,5761,5762],{},"                return new Response('Deleted!\\n');\n",[84,5764,5765],{"class":86,"line":1074},[84,5766,510],{"emptyLinePlaceholder":509},[84,5768,5769],{"class":86,"line":1086},[84,5770,5771],{},"            default:\n",[84,5773,5774],{"class":86,"line":1091},[84,5775,5776],{},"                return new Response('Method Not Allowed\\n', {\n",[84,5778,5779],{"class":86,"line":1096},[84,5780,5781],{},"                    status: 405,\n",[84,5783,5784],{"class":86,"line":1101},[84,5785,5786],{},"                    headers: {\n",[84,5788,5789],{"class":86,"line":1106},[84,5790,5791],{},"                        Allow: 'PUT, GET, DELETE',\n",[84,5793,5794],{"class":86,"line":4076},[84,5795,5796],{},"                    },\n",[84,5798,5799],{"class":86,"line":4081},[84,5800,5747],{},[84,5802,5803],{"class":86,"line":4098},[84,5804,835],{},[84,5806,5807],{"class":86,"line":4103},[84,5808,677],{},[84,5810,5811],{"class":86,"line":4108},[84,5812,5516],{},[20,5814,5815],{},"代码的大部分都是基于 Cloudflare Docs 中给出的样例，修改了几个小的优化点",[1417,5817,5818,5821,5827],{},[1420,5819,5820],{},"删除了 ALLOW_LIST 部分代码，默认所有文件都是可以被访问的",[1420,5822,5823,5824],{},"在上传一个文件时，如果目标路径存在同名文件，则不直接覆盖，而是返回 409 的异常 HTTP 相应，如果想要强制覆盖，则需要在 Http Header 中加入 ",[44,5825,5826],{},"Overwrite: true",[1420,5828,5829],{},"解出请求路径时，使用 decodeURI( ) 方法先进行解码，解决文件路径中含有中文时会导致请求失败的问题。",[20,5831,5832],{},"填入代码后，还需要绑定两个变量，一个是 R2 Bucket",[20,5834,5835],{},[26,5836],{"alt":28,"src":5467},[20,5838,5839],{},"另一个是自己的管理密码",[20,5841,5842],{},[26,5843],{"alt":28,"src":5844},"https://static.031130.xyz/uploads/2024/08/14/96da1f62f5fe7.webp",[16,5846,5848],{"id":5847},"如何使用-cloudflare-workers-构建的-restful-api-进行文件操作","如何使用 Cloudflare Workers 构建的 Restful API 进行文件操作？",[1680,5850,5851],{"id":5851},"上传",[20,5853,5854],{},"以 python 为例，上传一个文件 1MB.bin 到 /example/ 目录下，上传的 url 就是文件最终的存在路径。",[37,5856,5858],{"className":2277,"code":5857,"language":2279,"meta":28,"style":28},"import requests\n\nAUTH_KEY_SECRET='1145141919810'\n\nwith open('1MB.bin', ''rb) as f:\n    file_content = f.read()\n    \nrequests.put(\n    'https://r2.example.workers.dev/example/1MB.bin',\n    headers={\n        'X-Custom-Auth-Key': AUTH_KEY_SECRET,\n        'Overwrite': True   # 如果不需要强制覆盖可以删除这一行\n    }\n)\n",[44,5859,5860,5864,5868,5873,5877,5882,5887,5891,5896,5901,5906,5911,5916,5920],{"__ignoreMap":28},[84,5861,5862],{"class":86,"line":87},[84,5863,4448],{},[84,5865,5866],{"class":86,"line":93},[84,5867,510],{"emptyLinePlaceholder":509},[84,5869,5870],{"class":86,"line":99},[84,5871,5872],{},"AUTH_KEY_SECRET='1145141919810'\n",[84,5874,5875],{"class":86,"line":105},[84,5876,510],{"emptyLinePlaceholder":509},[84,5878,5879],{"class":86,"line":158},[84,5880,5881],{},"with open('1MB.bin', ''rb) as f:\n",[84,5883,5884],{"class":86,"line":164},[84,5885,5886],{},"    file_content = f.read()\n",[84,5888,5889],{"class":86,"line":261},[84,5890,4032],{},[84,5892,5893],{"class":86,"line":269},[84,5894,5895],{},"requests.put(\n",[84,5897,5898],{"class":86,"line":280},[84,5899,5900],{},"    'https://r2.example.workers.dev/example/1MB.bin',\n",[84,5902,5903],{"class":86,"line":288},[84,5904,5905],{},"    headers={\n",[84,5907,5908],{"class":86,"line":637},[84,5909,5910],{},"        'X-Custom-Auth-Key': AUTH_KEY_SECRET,\n",[84,5912,5913],{"class":86,"line":642},[84,5914,5915],{},"        'Overwrite': True   # 如果不需要强制覆盖可以删除这一行\n",[84,5917,5918],{"class":86,"line":656},[84,5919,2600],{},[84,5921,5922],{"class":86,"line":662},[84,5923,2036],{},[1680,5925,5926],{"id":5926},"访问",[20,5928,5929,5930,5933],{},"通过浏览器直接访问 ",[44,5931,5932],{},"https://r2.example.workers.dev/example/1MB.bin"," 应该就能访问到",[1680,5935,5936],{"id":5936},"删除",[20,5938,5939],{},"仍然以 python 为例，删除刚才的文件",[37,5941,5943],{"className":2277,"code":5942,"language":2279,"meta":28,"style":28},"import requests\n\nAUTH_KEY_SECRET='1145141919810'\n\nwith open('1MB.bin', ''rb) as f:\n    file_content = f.read()\n    \nrequests.delete(\n    'https://r2.example.workers.dev/example/1MB.bin',\n    headers={\n        'X-Custom-Auth-Key': AUTH_KEY_SECRET\n    }\n)\n",[44,5944,5945,5949,5953,5957,5961,5965,5969,5973,5978,5982,5986,5991,5995],{"__ignoreMap":28},[84,5946,5947],{"class":86,"line":87},[84,5948,4448],{},[84,5950,5951],{"class":86,"line":93},[84,5952,510],{"emptyLinePlaceholder":509},[84,5954,5955],{"class":86,"line":99},[84,5956,5872],{},[84,5958,5959],{"class":86,"line":105},[84,5960,510],{"emptyLinePlaceholder":509},[84,5962,5963],{"class":86,"line":158},[84,5964,5881],{},[84,5966,5967],{"class":86,"line":164},[84,5968,5886],{},[84,5970,5971],{"class":86,"line":261},[84,5972,4032],{},[84,5974,5975],{"class":86,"line":269},[84,5976,5977],{},"requests.delete(\n",[84,5979,5980],{"class":86,"line":280},[84,5981,5900],{},[84,5983,5984],{"class":86,"line":288},[84,5985,5905],{},[84,5987,5988],{"class":86,"line":637},[84,5989,5990],{},"        'X-Custom-Auth-Key': AUTH_KEY_SECRET\n",[84,5992,5993],{"class":86,"line":642},[84,5994,2600],{},[84,5996,5997],{"class":86,"line":656},[84,5998,2036],{},[16,6000,2066],{"id":2066},[1417,6002,6003,6010,6016,6023],{},[1420,6004,6005],{},[178,6006,6009],{"href":6007,"rel":6008},"https://blog.yswtrue.com/yong-cloudflare-de-r2-he-worker-lai-zuo-wen-jian-tuo-guan/",[182],"用 cloudflare 的 R2 和 worker 来做文件托管",[1420,6011,6012],{},[178,6013,6015],{"href":5459,"rel":6014},[182],"Workers API reference",[1420,6017,6018],{},[178,6019,6022],{"href":6020,"rel":6021},"https://developers.cloudflare.com/r2/api/workers/workers-api-usage/",[182],"Use R2 from Workers",[1420,6024,6025],{},[178,6026,6028],{"href":5429,"rel":6027},[182],"创建已签名的 AWS API 请求",[431,6030,6031],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":28,"searchDepth":93,"depth":93,"links":6033},[6034,6038,6042,6043,6044,6049],{"id":5321,"depth":93,"text":5322,"children":6035},[6036,6037],{"id":5328,"depth":99,"text":5329},{"id":5338,"depth":99,"text":5339},{"id":5355,"depth":93,"text":5356,"children":6039},[6040,6041],{"id":5362,"depth":99,"text":5362},{"id":5395,"depth":99,"text":5396},{"id":5477,"depth":93,"text":5478},{"id":5492,"depth":93,"text":5493},{"id":5847,"depth":93,"text":5848,"children":6045},[6046,6047,6048],{"id":5851,"depth":99,"text":5851},{"id":5926,"depth":99,"text":5926},{"id":5936,"depth":99,"text":5936},{"id":2066,"depth":93,"text":2066},127,1761699626881]