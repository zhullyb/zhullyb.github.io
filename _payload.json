[{"data":1,"prerenderedAt":7213},["ShallowReactive",2],{"randomIndex/":3,"index-page-1":4,"posts-total":7212},11,[5,963,1339,1552,1959,3634,4872,5747,6272,6981],{"title":6,"date":7,"path":8,"tags":9,"body":13},"Nuxt Content v3 中数组字段的筛选困境与性能优化","2025-10-20 21:52:59","/2025/10/20/nuxt-content-v3-z-array-query-challenge",[10,11,12],"Nuxt","Nuxt Content","JavaScript",{"type":14,"value":15,"toc":957},"minimark",[16,34,37,101,108,113,123,215,230,390,400,410,414,417,661,667,685,692,697,701,714,732,738,752,904,907,917,923,929,934,937,944,953],[17,18,19,20,24,25,28,29,33],"p",{},"Nuxt Content 是 Nuxt 生态中用于处理 Markdown、YAML 等内容的强大模块。最近，我在使用 ",[21,22,23],"strong",{},"Nuxt v4 + Nuxt Content v3"," 重构博客（原为 Hexo）时，遇到了一个棘手的问题：v3 版本的默认查询 API ",[21,26,27],{},"并未直接提供","对数组字段进行“包含”（",[30,31,32],"code",{},"$contains","）操作的支持。",[17,35,36],{},"例如，这是我的正在写的这篇博客的 Front Matter：",[38,39,44],"pre",{"className":40,"code":41,"language":42,"meta":43,"style":43},"language-markdown shiki shiki-themes github-light github-dark","---\ntitle: Nuxt Content v3 中数组字段的筛选困境\ndate: 2025-10-20 21:52:59\nsticky:\ntags:\n- Nuxt\n- Nuxt Content\n- JavaScript\n---\n","markdown","",[30,45,46,54,60,66,72,78,84,90,96],{"__ignoreMap":43},[47,48,51],"span",{"class":49,"line":50},"line",1,[47,52,53],{},"---\n",[47,55,57],{"class":49,"line":56},2,[47,58,59],{},"title: Nuxt Content v3 中数组字段的筛选困境\n",[47,61,63],{"class":49,"line":62},3,[47,64,65],{},"date: 2025-10-20 21:52:59\n",[47,67,69],{"class":49,"line":68},4,[47,70,71],{},"sticky:\n",[47,73,75],{"class":49,"line":74},5,[47,76,77],{},"tags:\n",[47,79,81],{"class":49,"line":80},6,[47,82,83],{},"- Nuxt\n",[47,85,87],{"class":49,"line":86},7,[47,88,89],{},"- Nuxt Content\n",[47,91,93],{"class":49,"line":92},8,[47,94,95],{},"- JavaScript\n",[47,97,99],{"class":49,"line":98},9,[47,100,53],{},[17,102,103,104,107],{},"我的目标是创建一个 ",[21,105,106],{},"Tag 页面","，列出所有包含特定 Tag（例如 'Nuxt'）的文章。",[109,110,112],"h2",{"id":111},"v2-的便捷与-v3-的限制","v2 的便捷与 v3 的限制",[17,114,115,116,119,120,122],{},"在 Nuxt Content v2 中，数据基于文件系统存储，查询方式是对文件内容的抽象，模拟了类似 ",[21,117,118],{},"MongoDB 的 JSON 文档查询","语法。我们可以轻松地使用 ",[30,121,32],{}," 方法获取所有包含 “Nuxt” 标签的文章：",[38,124,128],{"className":125,"code":126,"language":127,"meta":43,"style":43},"language-typescript shiki shiki-themes github-light github-dark","const tag = decodeURIComponent(route.params.tag as string)\n\nconst articles = await queryContent('posts')\n  .where({ tags: { $contains: tag } })  // ✅ v2 中的 MongoDB Style 查询\n  .find()\n","typescript",[30,129,130,160,166,190,205],{"__ignoreMap":43},[47,131,132,136,140,143,147,151,154,157],{"class":49,"line":50},[47,133,135],{"class":134},"szBVR","const",[47,137,139],{"class":138},"sj4cs"," tag",[47,141,142],{"class":134}," =",[47,144,146],{"class":145},"sScJk"," decodeURIComponent",[47,148,150],{"class":149},"sVt8B","(route.params.tag ",[47,152,153],{"class":134},"as",[47,155,156],{"class":138}," string",[47,158,159],{"class":149},")\n",[47,161,162],{"class":49,"line":56},[47,163,165],{"emptyLinePlaceholder":164},true,"\n",[47,167,168,170,173,175,178,181,184,188],{"class":49,"line":62},[47,169,135],{"class":134},[47,171,172],{"class":138}," articles",[47,174,142],{"class":134},[47,176,177],{"class":134}," await",[47,179,180],{"class":145}," queryContent",[47,182,183],{"class":149},"(",[47,185,187],{"class":186},"sZZnC","'posts'",[47,189,159],{"class":149},[47,191,192,195,198,201],{"class":49,"line":68},[47,193,194],{"class":149},"  .",[47,196,197],{"class":145},"where",[47,199,200],{"class":149},"({ tags: { $contains: tag } })  ",[47,202,204],{"class":203},"sJ8bj","// ✅ v2 中的 MongoDB Style 查询\n",[47,206,207,209,212],{"class":49,"line":74},[47,208,194],{"class":149},[47,210,211],{"class":145},"find",[47,213,214],{"class":149},"()\n",[17,216,217,218,225,226,229],{},"但在使用 ",[21,219,220,221,224],{},"Nuxt Content v3 的 ",[30,222,223],{},"queryCollection"," API"," 时，我们很自然地会尝试使用 ",[30,227,228],{},".where()"," 方法进行筛选：",[38,231,233],{"className":125,"code":232,"language":127,"meta":43,"style":43},"const tag = decodeURIComponent(route.params.tag as string)\n\nconst { data } = await useAsyncData(`tag-${tag}`, () =>\n    queryCollection('posts')\n        .where(tag, 'in', 'tags')  // ❌ 这样会报错，因为第一次参数必须是字段名\n        .order('date', 'DESC')\n        .select('title', 'date', 'path', 'tags')\n        .all()\n)\n",[30,234,235,253,257,295,306,331,350,377,386],{"__ignoreMap":43},[47,236,237,239,241,243,245,247,249,251],{"class":49,"line":50},[47,238,135],{"class":134},[47,240,139],{"class":138},[47,242,142],{"class":134},[47,244,146],{"class":145},[47,246,150],{"class":149},[47,248,153],{"class":134},[47,250,156],{"class":138},[47,252,159],{"class":149},[47,254,255],{"class":49,"line":56},[47,256,165],{"emptyLinePlaceholder":164},[47,258,259,261,264,267,270,273,275,278,280,283,286,289,292],{"class":49,"line":62},[47,260,135],{"class":134},[47,262,263],{"class":149}," { ",[47,265,266],{"class":138},"data",[47,268,269],{"class":149}," } ",[47,271,272],{"class":134},"=",[47,274,177],{"class":134},[47,276,277],{"class":145}," useAsyncData",[47,279,183],{"class":149},[47,281,282],{"class":186},"`tag-${",[47,284,285],{"class":149},"tag",[47,287,288],{"class":186},"}`",[47,290,291],{"class":149},", () ",[47,293,294],{"class":134},"=>\n",[47,296,297,300,302,304],{"class":49,"line":68},[47,298,299],{"class":145},"    queryCollection",[47,301,183],{"class":149},[47,303,187],{"class":186},[47,305,159],{"class":149},[47,307,308,311,313,316,319,322,325,328],{"class":49,"line":74},[47,309,310],{"class":149},"        .",[47,312,197],{"class":145},[47,314,315],{"class":149},"(tag, ",[47,317,318],{"class":186},"'in'",[47,320,321],{"class":149},", ",[47,323,324],{"class":186},"'tags'",[47,326,327],{"class":149},")  ",[47,329,330],{"class":203},"// ❌ 这样会报错，因为第一次参数必须是字段名\n",[47,332,333,335,338,340,343,345,348],{"class":49,"line":80},[47,334,310],{"class":149},[47,336,337],{"class":145},"order",[47,339,183],{"class":149},[47,341,342],{"class":186},"'date'",[47,344,321],{"class":149},[47,346,347],{"class":186},"'DESC'",[47,349,159],{"class":149},[47,351,352,354,357,359,362,364,366,368,371,373,375],{"class":49,"line":86},[47,353,310],{"class":149},[47,355,356],{"class":145},"select",[47,358,183],{"class":149},[47,360,361],{"class":186},"'title'",[47,363,321],{"class":149},[47,365,342],{"class":186},[47,367,321],{"class":149},[47,369,370],{"class":186},"'path'",[47,372,321],{"class":149},[47,374,324],{"class":186},[47,376,159],{"class":149},[47,378,379,381,384],{"class":49,"line":92},[47,380,310],{"class":149},[47,382,383],{"class":145},"all",[47,385,214],{"class":149},[47,387,388],{"class":49,"line":98},[47,389,159],{"class":149},[17,391,392,393,395,396,399],{},"遗憾的是，这样是行不通的。",[30,394,228],{}," 的方法签名要求字段名必须作为首个参数传入：",[30,397,398],{},"where(field: keyof Collection | string, operator: SqlOperator, value?: unknown)","。",[17,401,402,403,406,407,409],{},"由于 Nuxt Content v3 ",[21,404,405],{},"底层采用 SQLite 作为本地数据库","，所有查询都必须遵循类 SQL 语法。如果设计时未提供针对数组字段的内置操作符（例如 ",[30,408,32],{}," 的 SQL 等价形式），最终的解决方案往往会显得比较“别扭”。",[109,411,413],{"id":412},"初版实现牺牲性能的全量拉取","初版实现：牺牲性能的“全量拉取”",[17,415,416],{},"本着“尽快重构，后续优化”的思路，我写出了以下代码：",[38,418,420],{"className":125,"code":419,"language":127,"meta":43,"style":43},"// 初版实现：全量拉取后使用 JS 筛选\nconst allPosts = (\n    await useAsyncData(`tag-${route.params.tag}`, () =>\n        queryCollection('posts')\n            .order('date', 'DESC')\n            .select('title', 'date', 'path', 'tags')\n            .all()\n    )\n).data as Ref\u003CPost[]>\n\nconst Posts = computed(() => {\n    return allPosts.value.filter(post =>\n        typeof post.tags?.map === 'function'\n            ? post.tags?.includes(decodeURIComponent(route.params.tag as string))\n            : false\n    )\n})\n",[30,421,422,427,439,469,480,497,521,529,534,553,558,579,600,615,641,650,655],{"__ignoreMap":43},[47,423,424],{"class":49,"line":50},[47,425,426],{"class":203},"// 初版实现：全量拉取后使用 JS 筛选\n",[47,428,429,431,434,436],{"class":49,"line":56},[47,430,135],{"class":134},[47,432,433],{"class":145}," allPosts",[47,435,142],{"class":134},[47,437,438],{"class":149}," (\n",[47,440,441,444,446,448,450,453,456,459,461,463,465,467],{"class":49,"line":62},[47,442,443],{"class":134},"    await",[47,445,277],{"class":145},[47,447,183],{"class":149},[47,449,282],{"class":186},[47,451,452],{"class":149},"route",[47,454,455],{"class":186},".",[47,457,458],{"class":149},"params",[47,460,455],{"class":186},[47,462,285],{"class":149},[47,464,288],{"class":186},[47,466,291],{"class":149},[47,468,294],{"class":134},[47,470,471,474,476,478],{"class":49,"line":68},[47,472,473],{"class":145},"        queryCollection",[47,475,183],{"class":149},[47,477,187],{"class":186},[47,479,159],{"class":149},[47,481,482,485,487,489,491,493,495],{"class":49,"line":74},[47,483,484],{"class":149},"            .",[47,486,337],{"class":145},[47,488,183],{"class":149},[47,490,342],{"class":186},[47,492,321],{"class":149},[47,494,347],{"class":186},[47,496,159],{"class":149},[47,498,499,501,503,505,507,509,511,513,515,517,519],{"class":49,"line":80},[47,500,484],{"class":149},[47,502,356],{"class":145},[47,504,183],{"class":149},[47,506,361],{"class":186},[47,508,321],{"class":149},[47,510,342],{"class":186},[47,512,321],{"class":149},[47,514,370],{"class":186},[47,516,321],{"class":149},[47,518,324],{"class":186},[47,520,159],{"class":149},[47,522,523,525,527],{"class":49,"line":86},[47,524,484],{"class":149},[47,526,383],{"class":145},[47,528,214],{"class":149},[47,530,531],{"class":49,"line":92},[47,532,533],{"class":149},"    )\n",[47,535,536,539,541,544,547,550],{"class":49,"line":98},[47,537,538],{"class":149},").data ",[47,540,153],{"class":134},[47,542,543],{"class":145}," Ref",[47,545,546],{"class":149},"\u003C",[47,548,549],{"class":145},"Post",[47,551,552],{"class":149},"[]>\n",[47,554,556],{"class":49,"line":555},10,[47,557,165],{"emptyLinePlaceholder":164},[47,559,560,562,565,567,570,573,576],{"class":49,"line":3},[47,561,135],{"class":134},[47,563,564],{"class":138}," Posts",[47,566,142],{"class":134},[47,568,569],{"class":145}," computed",[47,571,572],{"class":149},"(() ",[47,574,575],{"class":134},"=>",[47,577,578],{"class":149}," {\n",[47,580,582,585,588,591,593,597],{"class":49,"line":581},12,[47,583,584],{"class":134},"    return",[47,586,587],{"class":149}," allPosts.value.",[47,589,590],{"class":145},"filter",[47,592,183],{"class":149},[47,594,596],{"class":595},"s4XuR","post",[47,598,599],{"class":134}," =>\n",[47,601,603,606,609,612],{"class":49,"line":602},13,[47,604,605],{"class":134},"        typeof",[47,607,608],{"class":149}," post.tags?.map ",[47,610,611],{"class":134},"===",[47,613,614],{"class":186}," 'function'\n",[47,616,618,621,624,627,629,632,634,636,638],{"class":49,"line":617},14,[47,619,620],{"class":134},"            ?",[47,622,623],{"class":149}," post.tags?.",[47,625,626],{"class":145},"includes",[47,628,183],{"class":149},[47,630,631],{"class":145},"decodeURIComponent",[47,633,150],{"class":149},[47,635,153],{"class":134},[47,637,156],{"class":138},[47,639,640],{"class":149},"))\n",[47,642,644,647],{"class":49,"line":643},15,[47,645,646],{"class":134},"            :",[47,648,649],{"class":138}," false\n",[47,651,653],{"class":49,"line":652},16,[47,654,533],{"class":149},[47,656,658],{"class":49,"line":657},17,[47,659,660],{"class":149},"})\n",[17,662,663,664],{},"这种方法虽然满足了需求，但也带来了明显的性能代价：",[21,665,666],{},"_payload.json 文件体积的膨胀。",[17,668,669,670,673,674,677,678,681,682,684],{},"在 Nuxt 项目中，",[30,671,672],{},"_payload.json"," 用于存储 ",[30,675,676],{},"useAsyncData"," 的结果等动态数据。在全量拉取的方案下，",[21,679,680],{},"每一个 Tag 页面"," 都会加载包含所有文章信息的 ",[30,683,672],{},"，造成数据冗余。很多 Tag 页面仅需一两篇文章的数据，却被迫加载了全部文章信息，严重影响了性能。",[17,686,687],{},[688,689],"img",{"alt":690,"src":691},"tags 目录占据了 2.9MiB，是所有目录中最大的","https://static.031130.xyz/uploads/2025/10/20/a748878c03c64.webp",[17,693,694],{},[688,695],{"alt":672,"src":696},"https://static.031130.xyz/uploads/2025/10/20/8ef786d873da1.webp",[109,698,700],{"id":699},"讨巧方案利用-sqlite-的存储特性进行优化","讨巧方案：利用 SQLite 的存储特性进行优化",[17,702,703,704,706,707,399],{},"为了减少 ",[30,705,676],{}," 返回的查询结果，我查阅了 Nuxt Content 的 GitHub Discussions，发现",[708,709,713],"a",{"href":710,"rel":711},"https://github.com/nuxt/content/discussions/2955",[712],"nofollow","在 v3.alpha.8 版本时就有人提出了一种“巧妙”的解决方案",[17,715,716,717,727,728,731],{},"由于 Nuxt Content v3 使用 SQLite 数据库，原本在 Front Matter 中定义的 ",[21,718,719,722,723,726],{},[30,720,721],{},"tags"," 数组（通过 ",[30,724,725],{},"z.array()"," 定义）最终会以 JSON 字符串的形式存储","在数据库中（具体格式可在 ",[30,729,730],{},".nuxt/content/sql_dump.txt"," 文件中查看）。",[17,733,734],{},[688,735],{"alt":736,"src":737},"sql_dump.txt","https://static.031130.xyz/uploads/2025/10/20/b70036c55bb29.webp",[17,739,740,741,744,745,751],{},"这意味着我们可以利用 SQLite 的",[21,742,743],{},"字符串操作","特性，通过 ",[21,746,747,750],{},[30,748,749],{},"LIKE"," 动词配合通配符","来完成数组包含的筛选，本质上是查询 JSON 字符串是否包含特定子串：",[38,753,755],{"className":125,"code":754,"language":127,"meta":43,"style":43},"const tag = decodeURIComponent(route.params.tag as string)\n\nconst { data } = await useAsyncData(`tag-${route.params.tag}`, () =>\n    queryCollection('posts')\n        .where('tags', 'LIKE', `%\"${tag}\"%`)\n        .order('date', 'DESC')\n        .select('title', 'date', 'path', 'tags')\n        .all()\n)\n",[30,756,757,775,779,815,825,852,868,892,900],{"__ignoreMap":43},[47,758,759,761,763,765,767,769,771,773],{"class":49,"line":50},[47,760,135],{"class":134},[47,762,139],{"class":138},[47,764,142],{"class":134},[47,766,146],{"class":145},[47,768,150],{"class":149},[47,770,153],{"class":134},[47,772,156],{"class":138},[47,774,159],{"class":149},[47,776,777],{"class":49,"line":56},[47,778,165],{"emptyLinePlaceholder":164},[47,780,781,783,785,787,789,791,793,795,797,799,801,803,805,807,809,811,813],{"class":49,"line":62},[47,782,135],{"class":134},[47,784,263],{"class":149},[47,786,266],{"class":138},[47,788,269],{"class":149},[47,790,272],{"class":134},[47,792,177],{"class":134},[47,794,277],{"class":145},[47,796,183],{"class":149},[47,798,282],{"class":186},[47,800,452],{"class":149},[47,802,455],{"class":186},[47,804,458],{"class":149},[47,806,455],{"class":186},[47,808,285],{"class":149},[47,810,288],{"class":186},[47,812,291],{"class":149},[47,814,294],{"class":134},[47,816,817,819,821,823],{"class":49,"line":68},[47,818,299],{"class":145},[47,820,183],{"class":149},[47,822,187],{"class":186},[47,824,159],{"class":149},[47,826,827,829,831,833,835,837,840,842,845,847,850],{"class":49,"line":74},[47,828,310],{"class":149},[47,830,197],{"class":145},[47,832,183],{"class":149},[47,834,324],{"class":186},[47,836,321],{"class":149},[47,838,839],{"class":186},"'LIKE'",[47,841,321],{"class":149},[47,843,844],{"class":186},"`%\"${",[47,846,285],{"class":149},[47,848,849],{"class":186},"}\"%`",[47,851,159],{"class":149},[47,853,854,856,858,860,862,864,866],{"class":49,"line":80},[47,855,310],{"class":149},[47,857,337],{"class":145},[47,859,183],{"class":149},[47,861,342],{"class":186},[47,863,321],{"class":149},[47,865,347],{"class":186},[47,867,159],{"class":149},[47,869,870,872,874,876,878,880,882,884,886,888,890],{"class":49,"line":86},[47,871,310],{"class":149},[47,873,356],{"class":145},[47,875,183],{"class":149},[47,877,361],{"class":186},[47,879,321],{"class":149},[47,881,342],{"class":186},[47,883,321],{"class":149},[47,885,370],{"class":186},[47,887,321],{"class":149},[47,889,324],{"class":186},[47,891,159],{"class":149},[47,893,894,896,898],{"class":49,"line":92},[47,895,310],{"class":149},[47,897,383],{"class":145},[47,899,214],{"class":149},[47,901,902],{"class":49,"line":98},[47,903,159],{"class":149},[17,905,906],{},"下面是优化后重新生成的文件占用，体积减小还是非常显著的",[908,909,910,914],"ul",{},[911,912,913],"li",{},"tags 目录体积: 2.9MiB -> 1.4MiB",[911,915,916],{},"单个 _payload.json 的体积: 23.1KiB -> 1.01 KiB",[17,918,919,920,922],{},"通过这种方法，我们成功将查询逻辑下推到了数据库层，避免了不必要的全量数据传输，显著降低了单个目录中 ",[30,921,672],{}," 的体积，实现了性能优化。",[17,924,925],{},[688,926],{"alt":927,"src":928},"tags 目录体积下降","https://static.031130.xyz/uploads/2025/10/20/007e72e7b476d.webp",[17,930,931],{},[688,932],{"alt":672,"src":933},"https://static.031130.xyz/uploads/2025/10/20/17ba3ccbbdf9e.webp",[109,935,936],{"id":936},"参见",[17,938,939],{},[708,940,943],{"href":941,"rel":942},"https://content.nuxt.com/docs/utils/query-collection#wherefield-keyof-collection-string-operator-sqloperator-value-unknown",[712],"queryCollection - Nuxt Content",[17,945,946],{},[708,947,949,950,952],{"href":710,"rel":948},[712],"How do you query ",[30,951,725],{}," fields (e.g. tags) in the latest nuxt-content module (v3.alpha.8) · nuxt/content · Discussion #2955",[954,955,956],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}html pre.shiki code .s4XuR, html code.shiki .s4XuR{--shiki-default:#E36209;--shiki-dark:#FFAB70}",{"title":43,"searchDepth":56,"depth":56,"links":958},[959,960,961,962],{"id":111,"depth":56,"text":112},{"id":412,"depth":56,"text":413},{"id":699,"depth":56,"text":700},{"id":936,"depth":56,"text":936},{"title":964,"date":965,"path":966,"tags":967,"body":974},"后 OCSP 时代，浏览器如何应对证书吊销新挑战","2025-10-16 15:38:50","/2025/10/16/how-s-mozilla-crlite-going-now",[968,969,970,971,972,973],"SSL","Firefox","Web PKI","OCSP","CRLSets","CRLite",{"type":14,"value":975,"toc":1329},[976,979,988,997,1008,1013,1017,1028,1031,1038,1048,1055,1060,1067,1071,1074,1077,1085,1089,1092,1101,1122,1125,1129,1132,1145,1148,1172,1191,1194,1201,1204,1207,1211,1214,1238,1245,1251,1253],[17,977,978],{},"2023 年 8 月，CA/Browser Forum 通过了一项投票——不再强制要求 Let’s Encrypt 等公开信任的 CA 设立 OCSP Server",[17,980,981,982,987],{},"2024 年 7 月，Let's Encrypt 发布",[708,983,986],{"href":984,"rel":985},"https://letsencrypt.org/2024/07/23/replacing-ocsp-with-crls",[712],"博客","，披露其计划关闭 OCSP Server",[17,989,990,991,996],{},"同年 12 月，Let's Encrypt 发布",[708,992,995],{"href":993,"rel":994},"https://letsencrypt.org/2024/12/05/ending-ocsp",[712],"其关闭 OCSP Server 的时间计划表","，大致情况如下：",[908,998,999,1002,1005],{},[911,1000,1001],{},"2025 年 1 月 30 日 - Let’s Encrypt 不再接受新的包含 OCSP Must-Staple 扩展的证书签发请求，除非你的账号先前申请过此类证书",[911,1003,1004],{},"2025 年 5 月 7 日 - Let's Encrypt 新签发的证书将加入 CRL URLs，不再包含 OCSP URLs，并且所有新的包含 OCSP Must-Staple 扩展的证书签发请求都将被拒绝",[911,1006,1007],{},"2025 年 8 月 6 日 - Let's Encrypt 关闭 OCSP 服务器",[17,1009,1010],{},[21,1011,1012],{},"Let's Encrypt 是全世界最大的免费 SSL 证书颁发机构，而这一举动标志着我们已逐渐步入后 OCSP 时代。",[109,1014,1016],{"id":1015},"ocsp-的困境性能与隐私的权衡","OCSP 的困境：性能与隐私的权衡",[17,1018,1019,1020,1023,1024,1027],{},"Let's Encrypt 这一举动的背后，是人们对 OCSP（在线证书状态协议）长久以来累积的不满。OCSP 作为一种实时查询证书有效性的方式，最初的设想很美好：当浏览器访问一个网站时，它可以向 ",[21,1021,1022],{},"CA（证书颁发机构）"," 的 OCSP 服务器发送一个简短的请求，询问该证书是否仍然有效。这似乎比下载一个巨大的 ",[21,1025,1026],{},"CRL（证书吊销列表）"," 要高效得多。",[17,1029,1030],{},"然而，OCSP 在实际应用中暴露出众多缺陷：",[17,1032,1033,1034,1037],{},"首先是",[21,1035,1036],{},"性能问题","。尽管单个请求很小，但当数百万用户同时访问网站时，OCSP 服务器需要处理海量的实时查询。这不仅给 CA 带来了巨大的服务器压力，也增加了用户访问网站的延迟。如果 OCSP 服务器响应缓慢甚至宕机，浏览器可能会因为无法确认证书状态而中断连接，或者为了用户体验而不得不“睁一只眼闭一只眼”，这都削弱了 OCSP 的安全性。",[17,1039,1040,1041,1044,1045],{},"更严重的是",[21,1042,1043],{},"隐私问题","。每一次 OCSP 查询，都相当于向 CA 报告了用户的访问行为。这意味着 CA 能够知道某个用户在何时访问了哪个网站。虽然 OCSP 查询本身不包含个人身份信息，但将这些信息与 IP 地址等数据结合起来，CA 完全可以建立起用户的浏览习惯画像。对于重视隐私的用户和开发者来说，这种“无声的监视”是不可接受的。",[21,1046,1047],{},"即使 CA 故意不保留这些信息，地区法律也可能强制 CA 收集这些信息。",[17,1049,1050,1051,1054],{},"再者，OCSP  还存在设计上的",[21,1052,1053],{},"安全缺陷","。由于担心连接超时影响用户体验，浏览器通常默认采用 soft-fail 机制：一旦无法连接 OCSP  服务器，便会选择放行而非阻断连接。攻击者恰恰可以利用这一点，通过阻断客户端与 OCSP  服务器之间的通信，使查询始终超时，从而轻松绕过证书状态验证。",[1056,1057,1059],"h3",{"id":1058},"ocsp-装订-ocsp-stapling","OCSP 装订 (OCSP stapling)",[17,1061,1062,1063,399],{},"基于上面这些缺陷，我们有了 OCSP 装订 (OCSP stapling) 方案，这",[708,1064,1066],{"href":1065},"/2024/11/19/firefox-is-the-only-mainstream-brower-doing-online-certificate-revocation-checks/#OCSP-%E8%A3%85%E8%AE%A2-OCSP-stapling","在我去年的博客里讲过，欢迎回顾",[1056,1068,1070],{"id":1069},"强制-ocsp-装订-ocsp-must-staple","强制 OCSP 装订 (OCSP Must-Staple)",[17,1072,1073],{},"OCSP Must-Staple 是一个在 ssl 证书申请时的拓展项，该扩展会告知浏览器：若在证书中识别到此扩展，则不得向证书颁发机构发送查询请求，而应在握手阶段获取装订式副本。若未能获得有效副本，浏览器应拒绝连接。",[17,1075,1076],{},"这项功能赋予了浏览器开发者 hard-fail 的勇气，但在 OCSP 淡出历史之前，Let's Encrypt 似乎是唯一支持这一拓展的主流 CA，并且这项功能并没有得到广泛使用。",[17,1078,1079,1080,399],{},"~~本来不想介绍这项功能的（因为根本没人用），但考虑到这东西快入土了，还是给它在中文互联网中立个碑，~~更多信息参考 ",[708,1081,1084],{"href":1082,"rel":1083},"https://letsencrypt.org/2024/12/05/ending-ocsp#must-staple",[712],"Let's Encrypt 的博客",[109,1086,1088],{"id":1087},"chromium-的方案弱水三千只取一瓢","Chromium 的方案：弱水三千只取一瓢",[17,1090,1091],{},"OCSP 的隐私和性能问题并非秘密，浏览器厂商们早就开始了各自的探索。2012 年，Chrome 默认禁用了 CRLs、OCSP 检查，转向自行设计的证书校验机制。",[17,1093,1094,1095,1100],{},"众所周知，吊销列表可以非常庞大。如果浏览器需要下载和解析一个完整的全球吊销列表，那将是一场性能灾难（Mozilla 团队在",[708,1096,1099],{"href":1097,"rel":1098},"https://hacks.mozilla.org/2025/08/crlite-fast-private-and-comprehensive-certificate-revocation-checking-in-firefox/",[712],"今年的博客","中提到，从 3000 个活跃的 CRL 下载的文件大小将达到 300MB）。Chromium 团队通过分析历史数据发现，大多数被吊销的证书属于少数高风险类别，例如证书颁发机构（CA）本身被攻破、或者某些大型网站的证书被吊销。基于此洞察，CRLSets 采取了以下策略：",[1102,1103,1104,1110,1116],"ol",{},[911,1105,1106,1109],{},[21,1107,1108],{},"分层吊销","：Chromium 不会下载所有被吊销的证书信息，而是由 Google 团队维护一个精简的、包含“最重要”吊销信息的列表。这个列表会定期更新并通过 Chrome 浏览器更新推送给用户。",[911,1111,1112,1115],{},[21,1113,1114],{},"精简高效","：这个列表体积非常小，目前大概只有 600KB。它包含了那些一旦被滥用就会造成大规模安全事故的证书，例如 CA 的中间证书、或者一些知名网站（如 Google、Facebook）的证书。",[911,1117,1118,1121],{},[21,1119,1120],{},"牺牲部分安全性","：这种方案的缺点也很明显——它无法覆盖所有的证书吊销情况。对于一个普通网站的证书被吊销，CRLSets 大概率无法检测到。根据 Mozilla 今年的博客所说，CRLSets 只包含了 1%~2% 的未过期的被吊销证书信息。",[17,1123,1124],{},"虽然 CRLSets 是一种“不完美”的解决方案，但它在性能和可用性之间找到了一个平衡点。它确保了用户在访问主流网站时的基础安全，同时避免了 OCSP 带来的性能和隐私开销。对于 Chromium 而言，与其追求一个在现实中难以完美实现的 OCSP 方案，不如集中精力解决最紧迫的安全威胁。",[109,1126,1128],{"id":1127},"firefox-的方案从-crls-到-crlite","Firefox 的方案：从 CRLs 到 CRLite",[17,1130,1131],{},"与 Chromium 的“只取一瓢”策略不同，Firefox 的开发者们一直在寻找一种既能保证全面性，又能解决性能问题的方案。",[17,1133,1134,1135,1137,1138,1141,1142,399],{},"为了解决这个问题，Mozilla 提出了一个创新的方案：",[21,1136,973],{},"。CRLite 的设计理念是通过",[21,1139,1140],{},"哈希函数和布隆过滤器","等数据结构，将庞大的证书吊销列表压缩成一个",[21,1143,1144],{},"小巧、可下载且易于本地验证的格式",[17,1146,1147],{},"CRLite 的工作原理可以简单概括为：",[1102,1149,1150,1156,1166],{},[911,1151,1152,1155],{},[21,1153,1154],{},"数据压缩","：CA 定期生成其全部吊销证书的列表。",[911,1157,1158,1161,1162,1165],{},[21,1159,1160],{},"服务器处理","：Mozilla 的服务器会收集这些列表，并使用加密哈希函数和布隆过滤器等技术，将所有吊销证书的信息",[21,1163,1164],{},"编码","成一个非常紧凑的数据结构。",[911,1167,1168,1171],{},[21,1169,1170],{},"客户端验证","：浏览器下载这个压缩文件，当访问网站时，只需本地对证书进行哈希计算，然后查询这个本地文件，就能快速判断该证书是否已被吊销。",[17,1173,1174,1175,1178,1179,1182,1183,1186,1187,1190],{},"与 CRLSets 相比，CRLite 的优势在于它能够实现",[21,1176,1177],{},"对所有吊销证书的全面覆盖","，同时保持",[21,1180,1181],{},"极小的体积","。更重要的是，它",[21,1184,1185],{},"完全在本地完成验证","，这意味着浏览器",[21,1188,1189],{},"无需向任何第三方服务器发送请求","，从而彻底解决了 OCSP 的隐私问题。",[17,1192,1193],{},"Firefox 当前的策略为每 12 小时对 CRLite 数据进行一次增量更新，每日的下载数据大约为 300KB；每 45 天进行一次全量的快照同步，下载数据约为 4MB。",[17,1195,1196,1197],{},"Mozilla 开放了他们的数据看板，你可以在这里找到近期的 CRLite 数据大小：",[708,1198,1199],{"href":1199,"rel":1200},"https://yardstick.mozilla.org/dashboard/snapshot/c1WZrxGkNxdm9oZp7xVvGUEFJCELfApN",[712],[17,1202,1203],{},"自 2025 年 4 月 1 日发布的 Firefox Desktop 137 版本起，Firefox 开始逐步以 CRLite 替换 OCSP 校验；同年 8 月 19 日，Firefox Desktop 142 针对 DV 证书正式弃用 OCSP 检验。",[17,1205,1206],{},"CRLite 已经成为 Firefox 未来证书吊销验证的核心方案，它代表了对性能、隐私和安全性的全面追求。",[109,1208,1210],{"id":1209},"后-ocsp-时代的展望","后 OCSP 时代的展望",[17,1212,1213],{},"随着 Let's Encrypt 等主要 CA 关闭 OCSP 服务，OCSP 的时代正在加速落幕。我们可以看到，浏览器厂商们已经开始各自探索更高效、更安全的替代方案。",[908,1215,1216,1226],{},[911,1217,1218,1221,1222,1225],{},[21,1219,1220],{},"Chromium"," 凭借其 CRLSets 方案，在",[21,1223,1224],{},"性能和关键安全保障","之间取得了务实的平衡。",[911,1227,1228,1230,1231,1233,1234,1237],{},[21,1229,969],{}," 则通过 ",[21,1232,973],{}," 这一技术创新，试图在",[21,1235,1236],{},"全面性、隐私和性能","三者之间找到最佳的解决方案。",[17,1239,1240,1241,1244],{},"这些方案的共同点是：",[21,1242,1243],{},"将证书吊销验证从实时在线查询（OCSP）转变为本地化验证","，从而规避了 OCSP 固有的性能瓶颈和隐私风险。",[17,1246,1247,1248],{},"未来，证书吊销的生态系统将不再依赖单一的、中心化的 OCSP 服务器。取而代之的是，一个更加多元、分布式和智能化的新时代正在到来。",[21,1249,1250],{},"OCSP 这一技术可能逐渐被淘汰，但它所试图解决的“证书吊销”这一核心安全问题，将永远是浏览器和网络安全社区关注的重点。",[109,1252,936],{"id":936},[908,1254,1255,1261,1268,1275,1282,1288,1294,1301,1308,1315,1322],{},[911,1256,1257],{},[708,1258,1260],{"href":1097,"rel":1259},[712],"CRLite: Fast, private, and comprehensive certificate revocation checking in Firefox - Mozilla Hacks - the Web developer blog",[911,1262,1263],{},[708,1264,1267],{"href":1265,"rel":1266},"https://www.feistyduck.com/newsletter/issue_121_the_slow_death_of_ocsp",[712],"The Slow Death of OCSP | Feisty Duck",[911,1269,1270],{},[708,1271,1274],{"href":1272,"rel":1273},"https://github.com/mozilla/crlite",[712],"mozilla/crlite: Compact certificate revocation lists for the WebPKI",[911,1276,1277],{},[708,1278,1281],{"href":1279,"rel":1280},"https://letsencrypt.org/2025/08/06/ocsp-service-has-reached-end-of-life",[712],"OCSP Service Has Reached End of Life - Let's Encrypt",[911,1283,1284],{},[708,1285,1287],{"href":993,"rel":1286},[712],"Ending OCSP Support in 2025 - Let's Encrypt",[911,1289,1290],{},[708,1291,1293],{"href":984,"rel":1292},[712],"Intent to End OCSP Service - Let's Encrypt",[911,1295,1296],{},[708,1297,1300],{"href":1298,"rel":1299},"https://www.chromium.org/Home/chromium-security/crlsets/",[712],"CRLSets - The Chromium Projects",[911,1302,1303],{},[708,1304,1307],{"href":1305,"rel":1306},"https://www.pcworld.com/article/474296/google_chrome_will_no_longer_check_for_revoked_ssl_certificates_online-2.html",[712],"Google Chrome Will No Longer Check for Revoked SSL Certificates Online | PCWorld",[911,1309,1310],{},[708,1311,1314],{"href":1312,"rel":1313},"https://www.zdnet.com/article/chrome-does-certificate-revocation-better/",[712],"Chrome does certificate revocation better | ZDNET",[911,1316,1317],{},[708,1318,1321],{"href":1319,"rel":1320},"https://www.hats-land.com/WIP/2025-technical-and-analysis-of-mainstream-clientbrowser-certificate-revocation-verification-mechanism.html",[712],"主流客户端/浏览器证书吊销验证机制技术对与分析 | 帽之岛, Hat's Land",[911,1323,1324],{},[708,1325,1328],{"href":1326,"rel":1327},"https://blog.gslin.org/archives/2025/02/02/12239/ocsp-%E7%9A%84%E6%B7%A1%E5%87%BA/",[712],"OCSP 的淡出… – Gea-Suan Lin's BLOG",{"title":43,"searchDepth":56,"depth":56,"links":1330},[1331,1335,1336,1337,1338],{"id":1015,"depth":56,"text":1016,"children":1332},[1333,1334],{"id":1058,"depth":62,"text":1059},{"id":1069,"depth":62,"text":1070},{"id":1087,"depth":56,"text":1088},{"id":1127,"depth":56,"text":1128},{"id":1209,"depth":56,"text":1210},{"id":936,"depth":56,"text":936},{"title":1340,"date":1341,"path":1342,"tags":1343,"body":1348},"初试 Github Action Self-hosted Runner，想说爱你不容易","2025-09-05 05:54:17","/2025/09/05/first-try-of-github-action-self-hosted-runner",[1344,1345,1346,1347],"Github","Github Action","CI/CD","Experience",{"type":14,"value":1349,"toc":1546},[1350,1364,1367,1378,1381,1384,1387,1392,1395,1400,1403,1408,1413,1416,1421,1424,1429,1433,1436,1463,1466,1473,1478,1495,1514,1521,1525,1536,1543],[17,1351,1352,1353,1358,1359,399],{},"在今年八月的时候，我这边所在的一个 Github Organization 在私有项目开发阶段频繁触发 CI，耗尽了 Github 为免费计划 (Free Plan) 提供的",[708,1354,1357],{"href":1355,"rel":1356},"https://docs.github.com/en/get-started/learning-about-github/githubs-plans#github-free-for-organizations",[712],"每月 2000 分钟 Action 额度","（所有私有仓库共享，公有仓库不计）。大致看了下，CI 流设置得是合理的，那么就要另寻他法看看有没有办法去提供更宽裕的资源，因此也就盯上了文章标题中所提到的 ",[708,1360,1363],{"href":1361,"rel":1362},"https://docs.github.com/en/actions/concepts/runners/self-hosted-runners",[712],"Github Action Self-hosted Runner",[17,1365,1366],{},"对于这个 Self-hosted Runner，与 Github 官方提供的 runner 相比，主要有以下几个优势",[908,1368,1369,1372,1375],{},[911,1370,1371],{},"针对私有仓库，拥有无限制的 Action 运行时长",[911,1373,1374],{},"可以自行搭配更强大的硬件计算能力和内存",[911,1376,1377],{},"可以接入内网环境，方便与内网/局域网设备通信",[109,1379,1380],{"id":1380},"配置安装",[17,1382,1383],{},"由于不清楚需要的网络环境，我这次测试直接选用了一台闲置的香港 vps，4核4G + 80G 硬盘 + 1Gbps 大口子的配置，除了硬盘读写稍微拉胯一些，别的地方可以说是拉满了。",[17,1385,1386],{},"Self-hosted Runner 的配置本身是相当直接和清晰的，照着官方提供的方案基本没什么问题。",[17,1388,1389],{},[688,1390],{"alt":43,"src":1391},"https://static.031130.xyz/uploads/2025/09/05/7c0475cdb1aa9.webp",[17,1393,1394],{},"三个主流平台都有，如果好好加以利用，应该可以涵盖包括 iPhone 应用打包等一系列的需求。",[17,1396,1397],{},[688,1398],{"alt":43,"src":1399},"https://static.031130.xyz/uploads/2025/09/05/96ff7cb263da1.webp",[17,1401,1402],{},"在观察一下我这边拿到手的 2.328.0 版本的 runner 安装文件压缩包的体积在 220MB 左右，内置了 node20 和 node24 各两个版本的运行环境。",[17,1404,1405],{},[688,1406],{"alt":43,"src":1407},"https://static.031130.xyz/uploads/2025/09/05/f775e3bcd2cdc.webp",[17,1409,1410],{},[688,1411],{"alt":43,"src":1412},"https://static.031130.xyz/uploads/2025/09/05/d0d4fe4611a40.webp",[17,1414,1415],{},"在执行完 config.sh 后，当前目录下就会多出一个 svc.sh，可以帮助利用这东西来调用 systemd 实现进程守护之类的需求。",[17,1417,1418],{},[688,1419],{"alt":43,"src":1420},"https://static.031130.xyz/uploads/2025/09/05/43c6b19038def.webp",[17,1422,1423],{},"再次刷新网页，就可以看到 Self-hosted Runner 处于已经上线的状态了",[17,1425,1426],{},[688,1427],{"alt":43,"src":1428},"https://static.031130.xyz/uploads/2025/09/05/6dad15beff900.webp",[109,1430,1432],{"id":1431},"指定-action-采用自己的-runner","指定 Action 采用自己的 Runner",[17,1434,1435],{},"这一步很简单，只需在原 Action 的 yml 文件中改变 runs-on 字段即可",[38,1437,1441],{"className":1438,"code":1439,"language":1440,"meta":43,"style":43},"language-diff shiki shiki-themes github-light github-dark","jobs:\n  run:\n+    runs-on: self-hosted\n-    runs-on: ubuntu-latest\n","diff",[30,1442,1443,1448,1453,1458],{"__ignoreMap":43},[47,1444,1445],{"class":49,"line":50},[47,1446,1447],{},"jobs:\n",[47,1449,1450],{"class":49,"line":56},[47,1451,1452],{},"  run:\n",[47,1454,1455],{"class":49,"line":62},[47,1456,1457],{},"+    runs-on: self-hosted\n",[47,1459,1460],{"class":49,"line":68},[47,1461,1462],{},"-    runs-on: ubuntu-latest\n",[109,1464,1465],{"id":1465},"实测",[17,1467,1468,1469,1472],{},"当我满心欢喜地将 CI 流程从 Github 官方的 runner 切换到自托管的 runner 后，问题很快就浮现了，而这也正是我“爱不起来”的主要原因。问题集中体现在我习以为常的 ",[30,1470,1471],{},"setup-python"," 这一由 Github 官方维护的 Github Action Flow 中，提示 3.12 版本没找到。",[17,1474,1475],{},[688,1476],{"alt":43,"src":1477},"https://static.031130.xyz/uploads/2025/09/05/1c93947170a85.webp",[17,1479,1480,1481,1484,1485,1488,1489,1494],{},"在 Github 官方提供的虚拟环境中，这些 Action 会为我们准备好指定版本的开发环境。例如，",[30,1482,1483],{},"uses: actions/setup-python"," 加上 ",[30,1486,1487],{},"with: python-version: '3.12'"," 就会自动在环境中安装并配置好 Python 3.12.x。我对此已经习以为常，认为这是一个“开箱即用”的功能。但在 Self-hosted Runner 上，情况略有些不同。setup-python 在",[708,1490,1493],{"href":1491,"rel":1492},"https://github.com/actions/setup-python/blob/main/docs/advanced-usage.md#using-setup-python-with-a-self-hosted-runner",[712],"文档","中指出",[1496,1497,1498],"blockquote",{},[17,1499,1500,1501,1506,1507,1510,1511,1513],{},"Python distributions are only available for the same ",[708,1502,1505],{"href":1503,"rel":1504},"https://github.com/actions/runner-images#available-images",[712],"environments"," that GitHub Actions hosted environments are available for. If you are using an unsupported version of Ubuntu such as ",[30,1508,1509],{},"19.04"," or another Linux distribution such as Fedora, ",[30,1512,1471],{}," may not work.",[17,1515,1516,1517,1520],{},"setup-python 这个 Action ",[21,1518,1519],{},"只支持 Github Action 所采用的同款操作系统","，而我 VPS 的 Debian 不受支持，因此有这个误报，同时也给我的 Debian 判了死刑。",[109,1522,1524],{"id":1523},"症结所在对-self-hosted-runner-的误解","症结所在：对 Self-hosted Runner 的误解",[17,1526,1527,1528,1531,1532,1535],{},"我潜意识里认为，Self-hosted Runner 仅仅是将计算成本从 Github 服务器转移到了本地，而 ",[30,1529,1530],{},"actions/setup-python"," 这种官方标准动作，理应会像 Github-hosted Runner 中那样，优雅地为我下载、安装、并配置好我需要的一切。然而，",[21,1533,1534],{},"Self-hosted  Runner 的本质只是从 Github 接收任务，并在当前的操作系统环境中执行指令","，并不保证和 Github 官方提供的 Runner 的运行环境一致。",[17,1537,1538,1539,1542],{},"Self-hosted Runner 不是一个开箱即用的“服务”，而是",[21,1540,1541],{},"一个需要你亲自管理的“基础设施”","。你需要负责服务器的安装、配置、安全更新、依赖管理、磁盘清理等一系列运维工作。它更适合那些对 CI/CD 有更高阶需求的团队或个人：比如 CI/CD 消费大户、需要特定硬件（如 ARM、GPU）进行构建的团队、或者 CI 流程深度依赖内部网络资源的企业。对于像我这样只是愿意拿出更多的本地计算资源来获取更多 Action 运行时长的普通开发者而言，它带来的运维心智负担，似乎是有一点重了。",[954,1544,1545],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":43,"searchDepth":56,"depth":56,"links":1547},[1548,1549,1550,1551],{"id":1380,"depth":56,"text":1380},{"id":1431,"depth":56,"text":1432},{"id":1465,"depth":56,"text":1465},{"id":1523,"depth":56,"text":1524},{"title":1553,"date":1554,"path":1555,"tags":1556,"body":1563},"DNS 解析时长毁了我精心设计的图床网络架构","2025-08-11 00:06:40","/2025/08/11/dns-resolve-time-destroyed-my-optimization-for-pic-cdn",[1557,1558,1559,1560,1561,1562],"CDN","图床","DNS","Network","Cloudflare","Dnspod",{"type":14,"value":1564,"toc":1957},[1565,1572,1577,1583,1593,1598,1687,1702,1707,1710,1782,1787,1790,1795,1818,1823,1834],[17,1566,1567,1568,1571],{},"去年夏天，我兴致勃勃地写了好几篇博文，详细讲述了我如何搭建博客图床。核心目标很明确：",[21,1569,1570],{},"分地区解析 DNS","，让国内外的访客都能嗖嗖地加载图片，体验拉满。想法嘛，绝对是走在技术前沿的，堪称完美！然而……现实它总是喜欢给你来点小惊喜，对吧？",[17,1573,1574],{},[688,1575],{"alt":43,"src":1576},"https://static.031130.xyz/uploads/2025/08/11/26306b2a483ba.webp",[17,1578,1579,1582],{},[21,1580,1581],{},"955 毫秒！"," 看到这个 DNS  解析时长的时候，我差点把刚喝下去的霸王茶姬喷在屏幕上。这简直就是一个隐形刺客，在我精心设计的图床网络架构背后，悄咪咪地给了致命一击。想象一下，访客满怀期待地点开你的博客，结果光是为了搞清楚图片服务器在哪，就要等上差不多一秒钟？这体验优化了个寂寞啊！",[17,1584,1585,1586,1589,1590,399],{},"为啥之前没发现？这得“感谢”",[21,1587,1588],{},"DNS 缓存","这位老好人。它勤勤恳恳地帮后来的访客记住了答案，让我的本地测试和复访测试都一片祥和。直到最近，有群友向我反馈了首次访问时图片的加载速度过慢，我才如梦初醒。再结合最近为了秋招准备的八股文中里面关于 DNS 解析那套繁琐的流程（递归查询、权威查询、根域名、顶级域名……查个地址堪比查户口本），我瞬间锁定了罪魁祸首：",[21,1591,1592],{},"首次访问时的 DNS 解析延迟",[17,1594,1595],{},[21,1596,1597],{},"来，复盘一下我那“曲折离奇”的 DNS 寻址之旅（访客视角）：",[1102,1599,1600,1609,1622,1639,1651,1667,1682],{},[911,1601,1602],{},[21,1603,1604,1605,1608],{},"访客想访问 ",[30,1606,1607],{},"static.031130.xyz"," 的图片。",[911,1610,1611,1618,1619,1621],{},[21,1612,1613,1614,1617],{},"查 ",[30,1615,1616],{},"031130.xyz"," 的权威 DNS："," 问了一圈，发现权威服务器原来在 ",[21,1620,1561],{}," (国外)。",[911,1623,1624,1627,1628,1630,1631,1634,1635,1638],{},[21,1625,1626],{},"Cloudflare 权威服务器回复："," “哦，",[30,1629,1607],{}," 啊？它是个马甲 (",[30,1632,1633],{},"CNAME",")，真身是 ",[30,1636,1637],{},"cdn-cname.zhul.in","，你去找它吧！”",[911,1640,1641,1646,1647,1650],{},[21,1642,1613,1643,1617],{},[30,1644,1645],{},"zhul.in"," 这次权威服务器在 ",[21,1648,1649],{},"DNSPod"," (国内)。",[911,1652,1653,1656,1657,1659,1660,1662,1663,1666],{},[21,1654,1655],{},"DNSPod 权威服务器回复 (针对国内用户)："," “",[30,1658,1637],{}," 也是个马甲 (",[30,1661,1633],{},")，它实际是 ",[30,1664,1665],{},"small-storage-cdn.b0.aicdn.com","，接着找！”",[911,1668,1669,1674,1675,1677,1678,1681],{},[21,1670,1613,1671,1673],{},[30,1672,1665],{},"："," 最终，它可能还会再 ",[30,1676,1633],{}," 到类似 ",[30,1679,1680],{},"nm.aicdn.com"," 这样的 CDN 节点主机名。",[911,1683,1684],{},[21,1685,1686],{},"最终获得 IP 地址，开始连接 CDN 节点下载图片。",[17,1688,1689,1690,1693,1694,1697,1698,1701],{},"发现问题没？",[21,1691,1692],{},"关键的第一步和第二步，权威 DNS 查询指向了国外的 Cloudflare！"," 对于国内用户，虽然最终解析到的 CDN 节点 (",[30,1695,1696],{},"small-storage-cdn.b0.aicdn.com/nm.aicdn.com",") 是国内的、速度飞快，但光是",[21,1699,1700],{},"前两步跨越重洋的 DNS 查询","，就足够让首次访问的用户体验跌入谷底。那个 955ms 的解析时长，基本就是花在跟国外 DNS 服务器“跨国聊天”上了。",[17,1703,1704],{},[21,1705,1706],{},"优化方案：三管齐下，围剿 DNS 延迟",[17,1708,1709],{},"既然找到了病根，就得下猛药：",[1102,1711,1712,1730,1742],{},[911,1713,1714,1721,1722,1725,1726,1729],{},[21,1715,1716,1717,1720],{},"DNS 预取 (",[30,1718,1719],{},"dns-prefetch","):"," 在博客的 HTML ",[30,1723,1724],{},"\u003Chead>"," 里，早早地加上 ",[30,1727,1728],{},"\u003Clink rel=\"dns-prefetch\" href=\"//static.031130.xyz\">","。这相当于浏览器在渲染页面时，就悄悄开始解析图床域名了，等真需要加载图片时，DNS 结果可能已经准备好了，神不知鬼不觉。当然也可以使用 preconnect 等等更激进的策略，但本文着重讲 DNS 解析，因此不做拓展。",[911,1731,1732,1735,1736,1738,1739,1741],{},[21,1733,1734],{},"延长 DNS 记录的 TTL (生存时间)："," 把 ",[30,1737,1607],{}," 这个 ",[30,1740,1633],{}," 记录的 TTL 值调大。以前都设置得较短，方便快速切换。现在为了缓存，适当延长（比如几小时甚至一天）。这样，一旦有用户解析过，本地 DNS 服务器就能记住更久，后续用户（包括同一用户再次访问）就能直接从缓存拿到结果，省掉跨国查询。",[911,1743,1744,1747,1748,1750,1751,1754,1755,1758,1759],{},[21,1745,1746],{},"釜底抽薪：迁移权威 DNS！"," 这是最核心的一步。直接把 ",[30,1749,1616],{}," 域名的",[21,1752,1753],{},"权威 DNS 服务器","，从 Cloudflare ",[21,1756,1757],{},"搬回国内 DNSPod","。这样一来：\n",[908,1760,1761,1767,1779],{},[911,1762,1763,1764,1766],{},"访客的递归 DNS 服务器查询 ",[30,1765,1616],{}," 的权威服务器时，直接找到的就是国内的 DNSPod，响应飞快。",[911,1768,1769,1770,1772,1773,1775,1776,1778],{},"DNSPod 直接告诉递归服务器 ",[30,1771,1607],{}," -> ",[30,1774,1665],{}," 完全在国内完成，丝般顺滑，不需要 ",[30,1777,1637],{}," 当分区域解析的工具人",[911,1780,1781],{},"整个 DNS 解析链路都在国内高速完成，首次访问的 955ms 噩梦彻底拜拜。",[17,1783,1784],{},[21,1785,1786],{},"效果如何？",[17,1788,1789],{},"受限于 DNS 缓存带来的测试困难，最终的效果确实很难在短时间内测试出来。但迁移权威 DNS 到 DNSPod + 调整 TTL +  加上预取之后，再测试首次访问的 DNS 解析时间总算是降到了可接受的程度，这才是 CDN  优化该有的样子！",[17,1791,1792],{},[21,1793,1794],{},"教训总结：",[908,1796,1797,1803,1812],{},[911,1798,1799,1802],{},[21,1800,1801],{},"别让 DNS 成为性能短板！"," 尤其是在涉及多地优化时，权威 DNS 的地理位置对首次访问延迟至关重要。能用国内的权威，就别用国外的。",[911,1804,1805,1808,1809,1811],{},[21,1806,1807],{},"缓存是好东西，但首次访问是软肋。"," 善用 ",[30,1810,1719],{}," 和合理设置 TTL 能有效缓解。",[911,1813,1814,1817],{},[21,1815,1816],{},"监控和用户反馈是金。"," 自己的测试环境往往有缓存“美化”，真实世界的首次访问体验要靠更细致的监控和用户的火眼金睛（感谢反馈的朋友！）。",[17,1819,1820],{},[21,1821,1822],{},"!!! 超级重要补充：警惕 CNAME 拉平 !!!",[17,1824,1825,1826,1833],{},"最后，必须给各位提个醒！如果你和我一样，需要依赖分地区解析来让访客访问到最近的 CDN 节点（比如让国内走国内CDN，国外走Cloudflare），那么千万要",[21,1827,1828,1829,1832],{},"避开 ",[30,1830,1831],{},"CNAME Flattening"," (CNAME 拉平) 这个“优化”方案","！",[908,1835,1836,1869,1881,1916],{},[911,1837,1838,1841,1842,1844,1845,1772,1848,1851,1852,1854,1855,1858,1859,1862,1863,1866,1867,399],{},[21,1839,1840],{},"CNAME 拉平是什么？"," 简单说，就是权威 DNS 服务器（比如 Cloudflare）看到你设置了一个 ",[30,1843,1633],{}," 记录（比如 ",[30,1846,1847],{},"static.example.com",[30,1849,1850],{},"cdn.cname.target.com","），它主动帮你去找 ",[30,1853,1850],{}," 的最终 ",[30,1856,1857],{},"A","/",[30,1860,1861],{},"AAAA"," 记录 (IP地址)，然后把 ",[21,1864,1865],{},"最终的 IP 地址"," 直接返回给查询者，而不是返回 ",[30,1868,1633],{},[911,1870,1871,1874,1875,1673,1878],{},[21,1872,1873],{},"听起来很美好？它确实能减少 CNAME 链的长度！"," 但它有个",[21,1876,1877],{},"致命缺点",[21,1879,1880],{},"权威 DNS 服务器在拉平解析时，会丢掉分地区解析的上下文！",[911,1882,1883,1886,1887,1890,1891,1894,1895,1898,1899,1901,1902,1904,1905,1907,1908,1911,1912,1915],{},[21,1884,1885],{},"为什么失效？"," 分地区解析 (",[30,1888,1889],{},"DNS View"," 或 ",[30,1892,1893],{},"GeoDNS",") 的功能是",[21,1896,1897],{},"在权威 DNS 服务器层面实现的","。当权威服务器执行 ",[30,1900,1633],{}," 拉平时，它是在它自己所在的位置去查询 ",[30,1903,1850],{}," 的 IP。比如你的权威 DNS 在 Cloudflare (美国节点)，它拉平查询时，拿到的 ",[30,1906,1850],{}," 的 IP ",[21,1909,1910],{},"大概率是给美国用户用的最优 IP","。然后它把这个 IP ",[21,1913,1914],{},"返回给了所有地区的查询者","，包括中国用户！你精心配置的让中国用户解析到国内 CDN IP 的策略就完全失效了！",[911,1917,1918,1921,1922,1928,1929,1932,1933,1935,1936,321,1939,1942,1943,1945,1946,1948,1949,1772,1951,1953,1954,1956],{},[21,1919,1920],{},"结论："," 如果你需要 ",[21,1923,1924,1925,1927],{},"分地区解析 (",[30,1926,1893],{},")"," 功能，",[21,1930,1931],{},"绝对不要","在你希望应用分地区解析的域名上启用 ",[30,1934,1831],{}," (或 ",[30,1937,1938],{},"ALIAS",[30,1940,1941],{},"ANAME"," 等实现类似拉平效果的功能)。老老实实用 ",[30,1944,1633],{}," 指向另一个支持 ",[30,1947,1893],{}," 的域名（就像我初始方案里 ",[30,1950,1607],{},[30,1952,1637],{},"，而 ",[30,1955,1645],{}," 在 DNSPod 上做分地区解析），才能保证你的分流策略正确执行。",{"title":43,"searchDepth":56,"depth":56,"links":1958},[],{"title":1960,"date":1961,"path":1962,"tags":1963,"body":1969},"Vue Markdown 渲染优化实战(下)：告别 DOM 操作，拥抱 AST 与函数式渲染","2025-07-13 00:01:35","/2025/07/13/vue-markdown-render-improvement-2",[1964,1965,1966,12,1967,1968],"Vue.js","Markdown","AST","Web","unified",{"type":14,"value":1970,"toc":3621},[1971,1979,1994,1997,2000,2003,2013,2023,2027,2036,2053,2063,2066,2081,2085,2106,2109,2113,2123,2153,2157,2160,2181,2184,2330,2333,2585,2589,2596,2608,2611,3071,3075,3082,3355,3358,3468,3472,3475,3581,3585,3588,3612,3615,3618],[109,1972,1974,1975,1978],{"id":1973},"上回回顾当-morphdom-遇上-vue","上回回顾：当 ",[30,1976,1977],{},"morphdom"," 遇上 Vue",[17,1980,1981,1982,1986,1987,1990,1991,1993],{},"在",[708,1983,1985],{"href":1984},"/2025/07/12/vue-markdown-render-improvement-1/","上一篇文章","中，我们经历了一场 Markdown 渲染的性能优化之旅。从最原始的 ",[30,1988,1989],{},"v-html"," 全量刷新，到按块更新，最终我们请出了 ",[30,1992,1977],{}," 这个“终极武器”。它通过直接比对和操作真实 DOM，以最小的代价更新视图，完美解决了实时渲染中的性能瓶颈和交互状态丢失问题。",[17,1995,1996],{},"然而，一个根本性问题始终存在：在 Vue 的地盘里，绕过 Vue 的虚拟 DOM (Virtual DOM) 和 Diff 算法，直接用一个第三方库去“动刀”真实 DOM，总感觉有些“旁门左道”。这就像在一个精密的自动化工厂里，引入了一个老师傅拿着锤子和扳手进行手动修补。虽然活干得漂亮，但总觉得破坏了原有的工作流，不够“Vue”。",[17,1998,1999],{},"那么，有没有一种更优雅、更“原生”的方式，让我们既能享受精准更新的快感，又能完全融入 Vue 的生态体系呢？",[17,2001,2002],{},"带着这个问题，我询问了前端群里的伙伴们。",[1496,2004,2005],{},[17,2006,2007,2008],{},"如果就要做一个渲染器，你这个思路不是最佳实践。每次更新时，你都生成全量的虚拟 HTML，然后再对 HTML 做减法来优化性能。然而，每次更新的增量部分是明确的，为什么不直接用这部分增量去做加法？增量部分通过 markdown-it 的库无法直接获取，但更好的做法是在这一步进行改造：先解析 Markdown 的结构，再利用 Vue 的动态渲染能力生成 DOM。这样，DOM 的复用就可以借助 Vue 自身的能力来实现。—— ",[708,2009,2012],{"href":2010,"rel":2011},"https://site.j10c.cc/",[712],"j10c",[1496,2014,2015],{},[17,2016,2017,2018],{},"可以用 unified 结合 remark-parse 插件，将 markdown 字符串解析为 ast，然后根据 ast 使用 render func 进行渲染即可。—— bii & ",[708,2019,2022],{"href":2020,"rel":2021},"https://github.com/nekomeowww",[712],"nekomeowww",[109,2024,2026],{"id":2025},"新思路从字符串转换到结构化渲染","新思路：从“字符串转换”到“结构化渲染”",[17,2028,2029,2030,2032,2033,2035],{},"我们之前的方案，无论是 ",[30,2031,1989],{}," 还是 ",[30,2034,1977],{},"，其核心思路都是：",[17,2037,2038,1772,2041,1772,2044,1772,2047,1772,2050],{},[30,2039,2040],{},"Markdown 字符串",[30,2042,2043],{},"markdown-it",[30,2045,2046],{},"HTML 字符串",[30,2048,2049],{},"浏览器/morphdom",[30,2051,2052],{},"DOM",[17,2054,2055,2056,2058,2059,2062],{},"这条链路的问题在于，从 ",[30,2057,2046],{}," 这一步开始，我们就丢失了 Markdown 的",[21,2060,2061],{},"原始结构信息","。我们得到的是一堆非结构化的文本，Vue 无法理解其内在逻辑，只能将其囫囵吞下。",[17,2064,2065],{},"而新的思路则是将流程改造为：",[17,2067,2068,1772,2070,1772,2073,1772,2076,1772,2079],{},[30,2069,2040],{},[30,2071,2072],{},"AST (抽象语法树)",[30,2074,2075],{},"Vue VNodes (虚拟节点)",[30,2077,2078],{},"Vue",[30,2080,2052],{},[1056,2082,2084],{"id":2083},"什么是-ast","什么是 AST？",[17,2086,2087,2090,2091,2094,2095,2098,2099,2102,2103,399],{},[21,2088,2089],{},"AST (Abstract Syntax Tree)"," ，即抽象语法树，是源代码或标记语言的结构化表示。它将一长串的文本，解析成一个层级分明的树状对象。对于 Markdown 来说，一个一级标题会变成一个 ",[30,2092,2093],{},"type: 'heading', depth: 1"," 的节点，一个段落会变成一个 ",[30,2096,2097],{},"type: 'paragraph'"," 的节点，而段落里的文字，则是 ",[30,2100,2101],{},"paragraph"," 节点的 ",[30,2104,2105],{},"children",[17,2107,2108],{},"一旦我们将 Markdown 转换成 AST，就相当于拥有了整个文档的“结构图纸”。我们不再是面对一堆模糊的 HTML 字符串，而是面对一个清晰、可编程的 JavaScript 对象。",[1056,2110,2112],{"id":2111},"我们的新工具unified-与-remark","我们的新工具：unified 与 remark",[17,2114,2115,2116,2119,2120,2122],{},"为了实现 ",[30,2117,2118],{},"Markdown -> AST"," 的转换，我们引入 ",[30,2121,1968],{}," 生态。",[908,2124,2125,2134],{},[911,2126,2127,2133],{},[21,2128,2129],{},[708,2130,1968],{"href":2131,"rel":2132},"https://github.com/unifiedjs/unified",[712],": 一个强大的内容处理引擎。你可以把它想象成一条流水线，原始文本是原料，通过添加不同的“插件”来对它进行解析、转换和序列化。",[911,2135,2136,2143,2144,2146,2147,2152],{},[21,2137,2138],{},[708,2139,2142],{"href":2140,"rel":2141},"https://github.com/remarkjs/remark",[712],"remark-parse",": 一个 ",[30,2145,1968],{}," 插件，专门负责将 Markdown 文本解析成 AST（具体来说是 ",[708,2148,2151],{"href":2149,"rel":2150},"https://github.com/syntax-tree/mdast",[712],"mdast"," 格式）。",[109,2154,2156],{"id":2155},"第一步将-markdown-解析为-ast","第一步：将 Markdown 解析为 AST",[17,2158,2159],{},"首先，我们需要安装相关依赖：",[38,2161,2165],{"className":2162,"code":2163,"language":2164,"meta":43,"style":43},"language-bash shiki shiki-themes github-light github-dark","npm install unified remark-parse\n","bash",[30,2166,2167],{"__ignoreMap":43},[47,2168,2169,2172,2175,2178],{"class":49,"line":50},[47,2170,2171],{"class":145},"npm",[47,2173,2174],{"class":186}," install",[47,2176,2177],{"class":186}," unified",[47,2179,2180],{"class":186}," remark-parse\n",[17,2182,2183],{},"然后，我们可以轻松地将 Markdown 字符串转换为 AST：",[38,2185,2189],{"className":2186,"code":2187,"language":2188,"meta":43,"style":43},"language-javascript shiki shiki-themes github-light github-dark","import { unified } from 'unified'\nimport remarkParse from 'remark-parse'\n\nconst markdownContent = '# Hello, AST!\\n\\nThis is a paragraph.'\n\n// 创建一个处理器实例\nconst processor = unified().use(remarkParse)\n\n// 解析 Markdown 内容\nconst ast = processor.parse(markdownContent)\n\nconsole.log(JSON.stringify(ast, null, 2))\n","javascript",[30,2190,2191,2205,2217,2221,2239,2243,2248,2268,2272,2277,2295,2299],{"__ignoreMap":43},[47,2192,2193,2196,2199,2202],{"class":49,"line":50},[47,2194,2195],{"class":134},"import",[47,2197,2198],{"class":149}," { unified } ",[47,2200,2201],{"class":134},"from",[47,2203,2204],{"class":186}," 'unified'\n",[47,2206,2207,2209,2212,2214],{"class":49,"line":56},[47,2208,2195],{"class":134},[47,2210,2211],{"class":149}," remarkParse ",[47,2213,2201],{"class":134},[47,2215,2216],{"class":186}," 'remark-parse'\n",[47,2218,2219],{"class":49,"line":62},[47,2220,165],{"emptyLinePlaceholder":164},[47,2222,2223,2225,2228,2230,2233,2236],{"class":49,"line":68},[47,2224,135],{"class":134},[47,2226,2227],{"class":138}," markdownContent",[47,2229,142],{"class":134},[47,2231,2232],{"class":186}," '# Hello, AST!",[47,2234,2235],{"class":138},"\\n\\n",[47,2237,2238],{"class":186},"This is a paragraph.'\n",[47,2240,2241],{"class":49,"line":74},[47,2242,165],{"emptyLinePlaceholder":164},[47,2244,2245],{"class":49,"line":80},[47,2246,2247],{"class":203},"// 创建一个处理器实例\n",[47,2249,2250,2252,2255,2257,2259,2262,2265],{"class":49,"line":86},[47,2251,135],{"class":134},[47,2253,2254],{"class":138}," processor",[47,2256,142],{"class":134},[47,2258,2177],{"class":145},[47,2260,2261],{"class":149},"().",[47,2263,2264],{"class":145},"use",[47,2266,2267],{"class":149},"(remarkParse)\n",[47,2269,2270],{"class":49,"line":92},[47,2271,165],{"emptyLinePlaceholder":164},[47,2273,2274],{"class":49,"line":98},[47,2275,2276],{"class":203},"// 解析 Markdown 内容\n",[47,2278,2279,2281,2284,2286,2289,2292],{"class":49,"line":555},[47,2280,135],{"class":134},[47,2282,2283],{"class":138}," ast",[47,2285,142],{"class":134},[47,2287,2288],{"class":149}," processor.",[47,2290,2291],{"class":145},"parse",[47,2293,2294],{"class":149},"(markdownContent)\n",[47,2296,2297],{"class":49,"line":3},[47,2298,165],{"emptyLinePlaceholder":164},[47,2300,2301,2304,2307,2309,2312,2314,2317,2320,2323,2325,2328],{"class":49,"line":581},[47,2302,2303],{"class":149},"console.",[47,2305,2306],{"class":145},"log",[47,2308,183],{"class":149},[47,2310,2311],{"class":138},"JSON",[47,2313,455],{"class":149},[47,2315,2316],{"class":145},"stringify",[47,2318,2319],{"class":149},"(ast, ",[47,2321,2322],{"class":138},"null",[47,2324,321],{"class":149},[47,2326,2327],{"class":138},"2",[47,2329,640],{"class":149},[17,2331,2332],{},"运行以上代码，我们将得到一个如下所示的 JSON 对象，这就是我们梦寐以求的 AST：",[38,2334,2338],{"className":2335,"code":2336,"language":2337,"meta":43,"style":43},"language-json shiki shiki-themes github-light github-dark","{\n  \"type\": \"root\",\n  \"children\": [\n    {\n      \"type\": \"heading\",\n      \"depth\": 1,\n      \"children\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"Hello, AST!\",\n          \"position\": { ... }\n        }\n      ],\n      \"position\": { ... }\n    },\n    {\n      \"type\": \"paragraph\",\n      \"children\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"This is a paragraph.\",\n          \"position\": { ... }\n        }\n      ],\n      \"position\": { ... }\n    }\n  ],\n  \"position\": { ... }\n}\n","json",[30,2339,2340,2345,2359,2367,2372,2384,2396,2403,2408,2420,2432,2447,2452,2457,2468,2473,2477,2488,2495,2500,2511,2523,2534,2539,2544,2555,2561,2567,2579],{"__ignoreMap":43},[47,2341,2342],{"class":49,"line":50},[47,2343,2344],{"class":149},"{\n",[47,2346,2347,2350,2353,2356],{"class":49,"line":56},[47,2348,2349],{"class":138},"  \"type\"",[47,2351,2352],{"class":149},": ",[47,2354,2355],{"class":186},"\"root\"",[47,2357,2358],{"class":149},",\n",[47,2360,2361,2364],{"class":49,"line":62},[47,2362,2363],{"class":138},"  \"children\"",[47,2365,2366],{"class":149},": [\n",[47,2368,2369],{"class":49,"line":68},[47,2370,2371],{"class":149},"    {\n",[47,2373,2374,2377,2379,2382],{"class":49,"line":74},[47,2375,2376],{"class":138},"      \"type\"",[47,2378,2352],{"class":149},[47,2380,2381],{"class":186},"\"heading\"",[47,2383,2358],{"class":149},[47,2385,2386,2389,2391,2394],{"class":49,"line":80},[47,2387,2388],{"class":138},"      \"depth\"",[47,2390,2352],{"class":149},[47,2392,2393],{"class":138},"1",[47,2395,2358],{"class":149},[47,2397,2398,2401],{"class":49,"line":86},[47,2399,2400],{"class":138},"      \"children\"",[47,2402,2366],{"class":149},[47,2404,2405],{"class":49,"line":92},[47,2406,2407],{"class":149},"        {\n",[47,2409,2410,2413,2415,2418],{"class":49,"line":98},[47,2411,2412],{"class":138},"          \"type\"",[47,2414,2352],{"class":149},[47,2416,2417],{"class":186},"\"text\"",[47,2419,2358],{"class":149},[47,2421,2422,2425,2427,2430],{"class":49,"line":555},[47,2423,2424],{"class":138},"          \"value\"",[47,2426,2352],{"class":149},[47,2428,2429],{"class":186},"\"Hello, AST!\"",[47,2431,2358],{"class":149},[47,2433,2434,2437,2440,2444],{"class":49,"line":3},[47,2435,2436],{"class":138},"          \"position\"",[47,2438,2439],{"class":149},": { ",[47,2441,2443],{"class":2442},"s7hpK","...",[47,2445,2446],{"class":149}," }\n",[47,2448,2449],{"class":49,"line":581},[47,2450,2451],{"class":149},"        }\n",[47,2453,2454],{"class":49,"line":602},[47,2455,2456],{"class":149},"      ],\n",[47,2458,2459,2462,2464,2466],{"class":49,"line":617},[47,2460,2461],{"class":138},"      \"position\"",[47,2463,2439],{"class":149},[47,2465,2443],{"class":2442},[47,2467,2446],{"class":149},[47,2469,2470],{"class":49,"line":643},[47,2471,2472],{"class":149},"    },\n",[47,2474,2475],{"class":49,"line":652},[47,2476,2371],{"class":149},[47,2478,2479,2481,2483,2486],{"class":49,"line":657},[47,2480,2376],{"class":138},[47,2482,2352],{"class":149},[47,2484,2485],{"class":186},"\"paragraph\"",[47,2487,2358],{"class":149},[47,2489,2491,2493],{"class":49,"line":2490},18,[47,2492,2400],{"class":138},[47,2494,2366],{"class":149},[47,2496,2498],{"class":49,"line":2497},19,[47,2499,2407],{"class":149},[47,2501,2503,2505,2507,2509],{"class":49,"line":2502},20,[47,2504,2412],{"class":138},[47,2506,2352],{"class":149},[47,2508,2417],{"class":186},[47,2510,2358],{"class":149},[47,2512,2514,2516,2518,2521],{"class":49,"line":2513},21,[47,2515,2424],{"class":138},[47,2517,2352],{"class":149},[47,2519,2520],{"class":186},"\"This is a paragraph.\"",[47,2522,2358],{"class":149},[47,2524,2526,2528,2530,2532],{"class":49,"line":2525},22,[47,2527,2436],{"class":138},[47,2529,2439],{"class":149},[47,2531,2443],{"class":2442},[47,2533,2446],{"class":149},[47,2535,2537],{"class":49,"line":2536},23,[47,2538,2451],{"class":149},[47,2540,2542],{"class":49,"line":2541},24,[47,2543,2456],{"class":149},[47,2545,2547,2549,2551,2553],{"class":49,"line":2546},25,[47,2548,2461],{"class":138},[47,2550,2439],{"class":149},[47,2552,2443],{"class":2442},[47,2554,2446],{"class":149},[47,2556,2558],{"class":49,"line":2557},26,[47,2559,2560],{"class":149},"    }\n",[47,2562,2564],{"class":49,"line":2563},27,[47,2565,2566],{"class":149},"  ],\n",[47,2568,2570,2573,2575,2577],{"class":49,"line":2569},28,[47,2571,2572],{"class":138},"  \"position\"",[47,2574,2439],{"class":149},[47,2576,2443],{"class":2442},[47,2578,2446],{"class":149},[47,2580,2582],{"class":49,"line":2581},29,[47,2583,2584],{"class":149},"}\n",[109,2586,2588],{"id":2587},"第二步从-ast-到-vue-vnodes","第二步：从 AST 到 Vue VNodes",[17,2590,2591,2592,2595],{},"拿到了 AST，下一步就是将这个“结构图纸”真正地“施工”成用户可见的界面。在 Vue 的世界里，描述 UI 的蓝图就是虚拟节点 (VNode)，而 ",[30,2593,2594],{},"h()"," 函数（即 hyperscript）就是创建 VNode 的画笔。",[17,2597,2598,2599,321,2602,321,2604,2607],{},"我们的任务是编写一个渲染函数，它能够递归地遍历 AST，并为每一种节点类型（",[30,2600,2601],{},"heading",[30,2603,2101],{},[30,2605,2606],{},"text"," 等）生成对应的 VNode。",[17,2609,2610],{},"下面是一个简单的渲染函数实现：",[38,2612,2614],{"className":2186,"code":2613,"language":2188,"meta":43,"style":43},"function renderAst(node) {\n  if (!node) return null\n  switch (node.type) {\n    case 'root':\n      return h('div', {}, node.children.map(renderAst))\n    case 'paragraph':\n      return h('p', {}, node.children.map(renderAst))\n    case 'text':\n      return node.value\n    case 'emphasis':\n      return h('em', {}, node.children.map(renderAst))\n    case 'strong':\n      return h('strong', {}, node.children.map(renderAst))\n    case 'inlineCode':\n      return h('code', {}, node.value)\n    case 'heading':\n      return h('h' + node.depth, {}, node.children.map(renderAst))\n    case 'code':\n      return h('pre', {}, [h('code', {}, node.value)])\n    case 'list':\n      return h(node.ordered ? 'ol' : 'ul', {}, node.children.map(renderAst))\n    case 'listItem':\n      return h('li', {}, node.children.map(renderAst))\n    case 'thematicBreak':\n      return h('hr')\n    case 'blockquote':\n      return h('blockquote', {}, node.children.map(renderAst))\n    case 'link':\n      return h('a', { href: node.url, target: '_blank' }, node.children.map(renderAst))\n    default:\n      // 其它未实现类型\n      return h('span', { }, `[${node.type}]`)\n  }\n}\n",[30,2615,2616,2632,2652,2660,2671,2693,2702,2719,2728,2735,2744,2761,2770,2787,2796,2810,2819,2840,2849,2873,2882,2909,2918,2935,2944,2957,2966,2983,2992,3016,3024,3030,3060,3066],{"__ignoreMap":43},[47,2617,2618,2621,2624,2626,2629],{"class":49,"line":50},[47,2619,2620],{"class":134},"function",[47,2622,2623],{"class":145}," renderAst",[47,2625,183],{"class":149},[47,2627,2628],{"class":595},"node",[47,2630,2631],{"class":149},") {\n",[47,2633,2634,2637,2640,2643,2646,2649],{"class":49,"line":56},[47,2635,2636],{"class":134},"  if",[47,2638,2639],{"class":149}," (",[47,2641,2642],{"class":134},"!",[47,2644,2645],{"class":149},"node) ",[47,2647,2648],{"class":134},"return",[47,2650,2651],{"class":138}," null\n",[47,2653,2654,2657],{"class":49,"line":62},[47,2655,2656],{"class":134},"  switch",[47,2658,2659],{"class":149}," (node.type) {\n",[47,2661,2662,2665,2668],{"class":49,"line":68},[47,2663,2664],{"class":134},"    case",[47,2666,2667],{"class":186}," 'root'",[47,2669,2670],{"class":149},":\n",[47,2672,2673,2676,2679,2681,2684,2687,2690],{"class":49,"line":74},[47,2674,2675],{"class":134},"      return",[47,2677,2678],{"class":145}," h",[47,2680,183],{"class":149},[47,2682,2683],{"class":186},"'div'",[47,2685,2686],{"class":149},", {}, node.children.",[47,2688,2689],{"class":145},"map",[47,2691,2692],{"class":149},"(renderAst))\n",[47,2694,2695,2697,2700],{"class":49,"line":80},[47,2696,2664],{"class":134},[47,2698,2699],{"class":186}," 'paragraph'",[47,2701,2670],{"class":149},[47,2703,2704,2706,2708,2710,2713,2715,2717],{"class":49,"line":86},[47,2705,2675],{"class":134},[47,2707,2678],{"class":145},[47,2709,183],{"class":149},[47,2711,2712],{"class":186},"'p'",[47,2714,2686],{"class":149},[47,2716,2689],{"class":145},[47,2718,2692],{"class":149},[47,2720,2721,2723,2726],{"class":49,"line":92},[47,2722,2664],{"class":134},[47,2724,2725],{"class":186}," 'text'",[47,2727,2670],{"class":149},[47,2729,2730,2732],{"class":49,"line":98},[47,2731,2675],{"class":134},[47,2733,2734],{"class":149}," node.value\n",[47,2736,2737,2739,2742],{"class":49,"line":555},[47,2738,2664],{"class":134},[47,2740,2741],{"class":186}," 'emphasis'",[47,2743,2670],{"class":149},[47,2745,2746,2748,2750,2752,2755,2757,2759],{"class":49,"line":3},[47,2747,2675],{"class":134},[47,2749,2678],{"class":145},[47,2751,183],{"class":149},[47,2753,2754],{"class":186},"'em'",[47,2756,2686],{"class":149},[47,2758,2689],{"class":145},[47,2760,2692],{"class":149},[47,2762,2763,2765,2768],{"class":49,"line":581},[47,2764,2664],{"class":134},[47,2766,2767],{"class":186}," 'strong'",[47,2769,2670],{"class":149},[47,2771,2772,2774,2776,2778,2781,2783,2785],{"class":49,"line":602},[47,2773,2675],{"class":134},[47,2775,2678],{"class":145},[47,2777,183],{"class":149},[47,2779,2780],{"class":186},"'strong'",[47,2782,2686],{"class":149},[47,2784,2689],{"class":145},[47,2786,2692],{"class":149},[47,2788,2789,2791,2794],{"class":49,"line":617},[47,2790,2664],{"class":134},[47,2792,2793],{"class":186}," 'inlineCode'",[47,2795,2670],{"class":149},[47,2797,2798,2800,2802,2804,2807],{"class":49,"line":643},[47,2799,2675],{"class":134},[47,2801,2678],{"class":145},[47,2803,183],{"class":149},[47,2805,2806],{"class":186},"'code'",[47,2808,2809],{"class":149},", {}, node.value)\n",[47,2811,2812,2814,2817],{"class":49,"line":652},[47,2813,2664],{"class":134},[47,2815,2816],{"class":186}," 'heading'",[47,2818,2670],{"class":149},[47,2820,2821,2823,2825,2827,2830,2833,2836,2838],{"class":49,"line":657},[47,2822,2675],{"class":134},[47,2824,2678],{"class":145},[47,2826,183],{"class":149},[47,2828,2829],{"class":186},"'h'",[47,2831,2832],{"class":134}," +",[47,2834,2835],{"class":149}," node.depth, {}, node.children.",[47,2837,2689],{"class":145},[47,2839,2692],{"class":149},[47,2841,2842,2844,2847],{"class":49,"line":2490},[47,2843,2664],{"class":134},[47,2845,2846],{"class":186}," 'code'",[47,2848,2670],{"class":149},[47,2850,2851,2853,2855,2857,2860,2863,2866,2868,2870],{"class":49,"line":2497},[47,2852,2675],{"class":134},[47,2854,2678],{"class":145},[47,2856,183],{"class":149},[47,2858,2859],{"class":186},"'pre'",[47,2861,2862],{"class":149},", {}, [",[47,2864,2865],{"class":145},"h",[47,2867,183],{"class":149},[47,2869,2806],{"class":186},[47,2871,2872],{"class":149},", {}, node.value)])\n",[47,2874,2875,2877,2880],{"class":49,"line":2502},[47,2876,2664],{"class":134},[47,2878,2879],{"class":186}," 'list'",[47,2881,2670],{"class":149},[47,2883,2884,2886,2888,2891,2894,2897,2900,2903,2905,2907],{"class":49,"line":2513},[47,2885,2675],{"class":134},[47,2887,2678],{"class":145},[47,2889,2890],{"class":149},"(node.ordered ",[47,2892,2893],{"class":134},"?",[47,2895,2896],{"class":186}," 'ol'",[47,2898,2899],{"class":134}," :",[47,2901,2902],{"class":186}," 'ul'",[47,2904,2686],{"class":149},[47,2906,2689],{"class":145},[47,2908,2692],{"class":149},[47,2910,2911,2913,2916],{"class":49,"line":2525},[47,2912,2664],{"class":134},[47,2914,2915],{"class":186}," 'listItem'",[47,2917,2670],{"class":149},[47,2919,2920,2922,2924,2926,2929,2931,2933],{"class":49,"line":2536},[47,2921,2675],{"class":134},[47,2923,2678],{"class":145},[47,2925,183],{"class":149},[47,2927,2928],{"class":186},"'li'",[47,2930,2686],{"class":149},[47,2932,2689],{"class":145},[47,2934,2692],{"class":149},[47,2936,2937,2939,2942],{"class":49,"line":2541},[47,2938,2664],{"class":134},[47,2940,2941],{"class":186}," 'thematicBreak'",[47,2943,2670],{"class":149},[47,2945,2946,2948,2950,2952,2955],{"class":49,"line":2546},[47,2947,2675],{"class":134},[47,2949,2678],{"class":145},[47,2951,183],{"class":149},[47,2953,2954],{"class":186},"'hr'",[47,2956,159],{"class":149},[47,2958,2959,2961,2964],{"class":49,"line":2557},[47,2960,2664],{"class":134},[47,2962,2963],{"class":186}," 'blockquote'",[47,2965,2670],{"class":149},[47,2967,2968,2970,2972,2974,2977,2979,2981],{"class":49,"line":2563},[47,2969,2675],{"class":134},[47,2971,2678],{"class":145},[47,2973,183],{"class":149},[47,2975,2976],{"class":186},"'blockquote'",[47,2978,2686],{"class":149},[47,2980,2689],{"class":145},[47,2982,2692],{"class":149},[47,2984,2985,2987,2990],{"class":49,"line":2569},[47,2986,2664],{"class":134},[47,2988,2989],{"class":186}," 'link'",[47,2991,2670],{"class":149},[47,2993,2994,2996,2998,3000,3003,3006,3009,3012,3014],{"class":49,"line":2581},[47,2995,2675],{"class":134},[47,2997,2678],{"class":145},[47,2999,183],{"class":149},[47,3001,3002],{"class":186},"'a'",[47,3004,3005],{"class":149},", { href: node.url, target: ",[47,3007,3008],{"class":186},"'_blank'",[47,3010,3011],{"class":149}," }, node.children.",[47,3013,2689],{"class":145},[47,3015,2692],{"class":149},[47,3017,3019,3022],{"class":49,"line":3018},30,[47,3020,3021],{"class":134},"    default",[47,3023,2670],{"class":149},[47,3025,3027],{"class":49,"line":3026},31,[47,3028,3029],{"class":203},"      // 其它未实现类型\n",[47,3031,3033,3035,3037,3039,3042,3045,3048,3050,3052,3055,3058],{"class":49,"line":3032},32,[47,3034,2675],{"class":134},[47,3036,2678],{"class":145},[47,3038,183],{"class":149},[47,3040,3041],{"class":186},"'span'",[47,3043,3044],{"class":149},", { }, ",[47,3046,3047],{"class":186},"`[${",[47,3049,2628],{"class":149},[47,3051,455],{"class":186},[47,3053,3054],{"class":149},"type",[47,3056,3057],{"class":186},"}]`",[47,3059,159],{"class":149},[47,3061,3063],{"class":49,"line":3062},33,[47,3064,3065],{"class":149},"  }\n",[47,3067,3069],{"class":49,"line":3068},34,[47,3070,2584],{"class":149},[109,3072,3074],{"id":3073},"第三步封装-vue-组件","第三步：封装 Vue 组件",[17,3076,3077,3078,3081],{},"整合上述逻辑，我们可以构建一个 Vue 组件。鉴于直接生成 VNode 的特性，采用函数式组件或显式 ",[30,3079,3080],{},"render"," 函数最为适宜。",[38,3083,3087],{"className":3084,"code":3085,"language":3086,"meta":43,"style":43},"language-vue shiki shiki-themes github-light github-dark","\u003Ctemplate>\n  \u003Ccomponent :is=\"VNodeTree\" />\n\u003C/template>\n\n\u003Cscript setup>\nimport { computed, h, shallowRef, watchEffect } from 'vue'\nimport { unified } from 'unified'\nimport remarkParse from 'remark-parse'\n\nconst props = defineProps({\n  mdText: {\n    type: String,\n    default: ''\n  }\n})\n\nconst ast = shallowRef(null)\nconst parser = unified().use(remarkParse)\n\nwatchEffect(() => {\n  ast.value = parser.parse(props.mdText)\n})\n\n// AST 渲染函数 (同上文 renderAst 函数)\nfunction renderAst(node) { ... }\n\nconst VNodeTree = computed(() => renderAst(ast.value))\n\n\u003C/script>\n","vue",[30,3088,3089,3100,3119,3128,3132,3144,3156,3166,3176,3180,3195,3200,3205,3213,3217,3221,3225,3242,3259,3263,3274,3289,3293,3297,3302,3319,3323,3343,3347],{"__ignoreMap":43},[47,3090,3091,3093,3097],{"class":49,"line":50},[47,3092,546],{"class":149},[47,3094,3096],{"class":3095},"s9eBZ","template",[47,3098,3099],{"class":149},">\n",[47,3101,3102,3105,3108,3111,3113,3116],{"class":49,"line":56},[47,3103,3104],{"class":149},"  \u003C",[47,3106,3107],{"class":3095},"component",[47,3109,3110],{"class":145}," :is",[47,3112,272],{"class":149},[47,3114,3115],{"class":186},"\"VNodeTree\"",[47,3117,3118],{"class":149}," />\n",[47,3120,3121,3124,3126],{"class":49,"line":62},[47,3122,3123],{"class":149},"\u003C/",[47,3125,3096],{"class":3095},[47,3127,3099],{"class":149},[47,3129,3130],{"class":49,"line":68},[47,3131,165],{"emptyLinePlaceholder":164},[47,3133,3134,3136,3139,3142],{"class":49,"line":74},[47,3135,546],{"class":149},[47,3137,3138],{"class":3095},"script",[47,3140,3141],{"class":145}," setup",[47,3143,3099],{"class":149},[47,3145,3146,3148,3151,3153],{"class":49,"line":80},[47,3147,2195],{"class":134},[47,3149,3150],{"class":149}," { computed, h, shallowRef, watchEffect } ",[47,3152,2201],{"class":134},[47,3154,3155],{"class":186}," 'vue'\n",[47,3157,3158,3160,3162,3164],{"class":49,"line":86},[47,3159,2195],{"class":134},[47,3161,2198],{"class":149},[47,3163,2201],{"class":134},[47,3165,2204],{"class":186},[47,3167,3168,3170,3172,3174],{"class":49,"line":92},[47,3169,2195],{"class":134},[47,3171,2211],{"class":149},[47,3173,2201],{"class":134},[47,3175,2216],{"class":186},[47,3177,3178],{"class":49,"line":98},[47,3179,165],{"emptyLinePlaceholder":164},[47,3181,3182,3184,3187,3189,3192],{"class":49,"line":555},[47,3183,135],{"class":134},[47,3185,3186],{"class":138}," props",[47,3188,142],{"class":134},[47,3190,3191],{"class":145}," defineProps",[47,3193,3194],{"class":149},"({\n",[47,3196,3197],{"class":49,"line":3},[47,3198,3199],{"class":149},"  mdText: {\n",[47,3201,3202],{"class":49,"line":581},[47,3203,3204],{"class":149},"    type: String,\n",[47,3206,3207,3210],{"class":49,"line":602},[47,3208,3209],{"class":149},"    default: ",[47,3211,3212],{"class":186},"''\n",[47,3214,3215],{"class":49,"line":617},[47,3216,3065],{"class":149},[47,3218,3219],{"class":49,"line":643},[47,3220,660],{"class":149},[47,3222,3223],{"class":49,"line":652},[47,3224,165],{"emptyLinePlaceholder":164},[47,3226,3227,3229,3231,3233,3236,3238,3240],{"class":49,"line":657},[47,3228,135],{"class":134},[47,3230,2283],{"class":138},[47,3232,142],{"class":134},[47,3234,3235],{"class":145}," shallowRef",[47,3237,183],{"class":149},[47,3239,2322],{"class":138},[47,3241,159],{"class":149},[47,3243,3244,3246,3249,3251,3253,3255,3257],{"class":49,"line":2490},[47,3245,135],{"class":134},[47,3247,3248],{"class":138}," parser",[47,3250,142],{"class":134},[47,3252,2177],{"class":145},[47,3254,2261],{"class":149},[47,3256,2264],{"class":145},[47,3258,2267],{"class":149},[47,3260,3261],{"class":49,"line":2497},[47,3262,165],{"emptyLinePlaceholder":164},[47,3264,3265,3268,3270,3272],{"class":49,"line":2502},[47,3266,3267],{"class":145},"watchEffect",[47,3269,572],{"class":149},[47,3271,575],{"class":134},[47,3273,578],{"class":149},[47,3275,3276,3279,3281,3284,3286],{"class":49,"line":2513},[47,3277,3278],{"class":149},"  ast.value ",[47,3280,272],{"class":134},[47,3282,3283],{"class":149}," parser.",[47,3285,2291],{"class":145},[47,3287,3288],{"class":149},"(props.mdText)\n",[47,3290,3291],{"class":49,"line":2525},[47,3292,660],{"class":149},[47,3294,3295],{"class":49,"line":2536},[47,3296,165],{"emptyLinePlaceholder":164},[47,3298,3299],{"class":49,"line":2541},[47,3300,3301],{"class":203},"// AST 渲染函数 (同上文 renderAst 函数)\n",[47,3303,3304,3306,3308,3310,3312,3315,3317],{"class":49,"line":2546},[47,3305,2620],{"class":134},[47,3307,2623],{"class":145},[47,3309,183],{"class":149},[47,3311,2628],{"class":595},[47,3313,3314],{"class":149},") { ",[47,3316,2443],{"class":134},[47,3318,2446],{"class":149},[47,3320,3321],{"class":49,"line":2557},[47,3322,165],{"emptyLinePlaceholder":164},[47,3324,3325,3327,3330,3332,3334,3336,3338,3340],{"class":49,"line":2563},[47,3326,135],{"class":134},[47,3328,3329],{"class":138}," VNodeTree",[47,3331,142],{"class":134},[47,3333,569],{"class":145},[47,3335,572],{"class":149},[47,3337,575],{"class":134},[47,3339,2623],{"class":145},[47,3341,3342],{"class":149},"(ast.value))\n",[47,3344,3345],{"class":49,"line":2569},[47,3346,165],{"emptyLinePlaceholder":164},[47,3348,3349,3351,3353],{"class":49,"line":2581},[47,3350,3123],{"class":149},[47,3352,3138],{"class":3095},[47,3354,3099],{"class":149},[17,3356,3357],{},"现在就可以像使用普通组件一样使用它了：",[38,3359,3361],{"className":3084,"code":3360,"language":3086,"meta":43,"style":43},"\u003Ctemplate>\n  \u003CMarkdownRenderer :mdText=\"markdownContent\" />\n\u003C/template>\n\n\u003Cscript setup>\nimport { ref } from 'vue'\nimport MarkdownRenderer from './MarkdownRenderer.vue'\n\nconst markdownContent = ref('# Hello Vue\\n\\nThis is rendered via AST!')\n\u003C/script>\n",[30,3362,3363,3371,3388,3396,3400,3410,3421,3433,3437,3460],{"__ignoreMap":43},[47,3364,3365,3367,3369],{"class":49,"line":50},[47,3366,546],{"class":149},[47,3368,3096],{"class":3095},[47,3370,3099],{"class":149},[47,3372,3373,3375,3378,3381,3383,3386],{"class":49,"line":56},[47,3374,3104],{"class":149},[47,3376,3377],{"class":3095},"MarkdownRenderer",[47,3379,3380],{"class":145}," :mdText",[47,3382,272],{"class":149},[47,3384,3385],{"class":186},"\"markdownContent\"",[47,3387,3118],{"class":149},[47,3389,3390,3392,3394],{"class":49,"line":62},[47,3391,3123],{"class":149},[47,3393,3096],{"class":3095},[47,3395,3099],{"class":149},[47,3397,3398],{"class":49,"line":68},[47,3399,165],{"emptyLinePlaceholder":164},[47,3401,3402,3404,3406,3408],{"class":49,"line":74},[47,3403,546],{"class":149},[47,3405,3138],{"class":3095},[47,3407,3141],{"class":145},[47,3409,3099],{"class":149},[47,3411,3412,3414,3417,3419],{"class":49,"line":80},[47,3413,2195],{"class":134},[47,3415,3416],{"class":149}," { ref } ",[47,3418,2201],{"class":134},[47,3420,3155],{"class":186},[47,3422,3423,3425,3428,3430],{"class":49,"line":86},[47,3424,2195],{"class":134},[47,3426,3427],{"class":149}," MarkdownRenderer ",[47,3429,2201],{"class":134},[47,3431,3432],{"class":186}," './MarkdownRenderer.vue'\n",[47,3434,3435],{"class":49,"line":92},[47,3436,165],{"emptyLinePlaceholder":164},[47,3438,3439,3441,3443,3445,3448,3450,3453,3455,3458],{"class":49,"line":98},[47,3440,135],{"class":134},[47,3442,2227],{"class":138},[47,3444,142],{"class":134},[47,3446,3447],{"class":145}," ref",[47,3449,183],{"class":149},[47,3451,3452],{"class":186},"'# Hello Vue",[47,3454,2235],{"class":138},[47,3456,3457],{"class":186},"This is rendered via AST!'",[47,3459,159],{"class":149},[47,3461,3462,3464,3466],{"class":49,"line":555},[47,3463,3123],{"class":149},[47,3465,3138],{"class":3095},[47,3467,3099],{"class":149},[109,3469,3471],{"id":3470},"ast-方案的巨大优势","AST 方案的巨大优势",[17,3473,3474],{},"切换到 AST 赛道后，我们获得了前所未有的超能力：",[1102,3476,3477,3489,3562,3575],{},[911,3478,3479,3482,3483,3485,3486,3488],{},[21,3480,3481],{},"原生集成，性能卓越","：我们不再需要 ",[30,3484,1989],{}," 的暴力刷新，也不再需要 ",[30,3487,1977],{}," 这样的“外援”。所有更新都交由 Vue 自己的 Diff 算法处理，这不仅性能极高，而且完全符合 Vue 的设计哲学，是真正的“自己人”。",[911,3490,3491,3494,3495],{},[21,3492,3493],{},"高度灵活性与可扩展性","：AST 作为可编程的 JavaScript 对象，为定制化处理提供了坚实基础：\n",[908,3496,3497,3519,3541],{},[911,3498,3499,3502,3503,3506,3507,3510,3511,3514,3515,3518],{},[21,3500,3501],{},"元素替换","：可将原生元素（如 ",[30,3504,3505],{},"\u003Ch2>","）无缝替换为自定义 Vue 组件（如 ",[30,3508,3509],{},"\u003CFancyHeading>","），仅在 ",[30,3512,3513],{},"renderAst"," 函数中调整对应 ",[30,3516,3517],{},"case"," 逻辑即可。",[911,3520,3521,3524,3525,3528,3529,3532,3533,3536,3537,3540],{},[21,3522,3523],{},"逻辑注入","：可便捷地为外部链接 ",[30,3526,3527],{},"\u003Ca>"," 添加 ",[30,3530,3531],{},"target=\"_blank\""," 与 ",[30,3534,3535],{},"rel=\"noopener noreferrer\""," 属性，或为图片 ",[30,3538,3539],{},"\u003Cimg>"," 包裹懒加载组件，此类操作在 AST 层面易于实现。",[911,3542,3543,3546,3547,3549,3550,3553,3554,3557,3558,3561],{},[21,3544,3545],{},"生态集成","：充分利用 ",[30,3548,1968],{}," 丰富的插件生态（如 ",[30,3551,3552],{},"remark-gfm"," 支持 GFM 语法，",[30,3555,3556],{},"remark-prism"," 实现代码高亮），仅需在处理器链中引入相应插件（",[30,3559,3560],{},".use(pluginName)","）。",[911,3563,3564,3567,3568,3571,3572,3574],{},[21,3565,3566],{},"关注点分离","：解析逻辑（",[30,3569,3570],{},"remark","）、渲染逻辑（",[30,3573,3513],{},"）和业务逻辑（Vue 组件）被清晰地分离开来，代码结构更清晰，维护性更强。",[911,3576,3577,3580],{},[21,3578,3579],{},"类型安全与可预测性","：相较于操作字符串或原始 HTML，基于结构化 AST 的渲染逻辑更易于进行类型校验与逻辑推理。",[109,3582,3584],{"id":3583},"结论从功能实现到架构优化的演进","结论：从功能实现到架构优化的演进",[17,3586,3587],{},"回顾优化历程：",[908,3589,3590,3595,3601,3606],{},[911,3591,3592,3594],{},[21,3593,1989],{},"：实现简单，但存在性能与安全性隐患。",[911,3596,3597,3600],{},[21,3598,3599],{},"分块更新","：缓解了部分性能问题，但方案存在局限性。",[911,3602,3603,3605],{},[21,3604,1977],{},"：有效提升了性能与用户体验，但与 Vue 核心机制存在隔阂。",[911,3607,3608,3611],{},[21,3609,3610],{},"AST + 函数式渲染","：回归 Vue 原生范式，提供了性能、灵活性、可维护性俱佳的终极解决方案。",[17,3613,3614],{},"通过采用 AST，我们不仅解决了具体的技术挑战，更重要的是实现了思维范式的转变——从面向结果（HTML 字符串）的编程，转向面向过程与结构（AST）的编程。这使我们能够深入内容本质，从而实现对渲染流程的精确控制。",[17,3616,3617],{},"本次从“全量刷新”到“结构化渲染”的优化实践，不仅是一次性能提升的技术过程，更是一次深入理解现代前端工程化思想的系统性探索。最终实现的 Markdown 渲染方案，在性能、功能性与架构优雅性上均达到了较高水准。",[954,3619,3620],{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}html pre.shiki code .s7hpK, html code.shiki .s7hpK{--shiki-default:#B31D28;--shiki-default-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic}html pre.shiki code .s4XuR, html code.shiki .s4XuR{--shiki-default:#E36209;--shiki-dark:#FFAB70}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}",{"title":43,"searchDepth":56,"depth":56,"links":3622},[3623,3625,3629,3630,3631,3632,3633],{"id":1973,"depth":56,"text":3624},"上回回顾：当 morphdom 遇上 Vue",{"id":2025,"depth":56,"text":2026,"children":3626},[3627,3628],{"id":2083,"depth":62,"text":2084},{"id":2111,"depth":62,"text":2112},{"id":2155,"depth":56,"text":2156},{"id":2587,"depth":56,"text":2588},{"id":3073,"depth":56,"text":3074},{"id":3470,"depth":56,"text":3471},{"id":3583,"depth":56,"text":3584},{"title":3635,"date":3636,"path":3637,"tags":3638,"body":3640},"Vue Markdown 渲染优化实战(上)：从暴力刷新、分块更新到 Morphdom 的华丽变身","2025-07-12 20:48:56","/2025/07/12/vue-markdown-render-improvement-1",[1964,1965,12,1967,3639],"HTML",{"type":14,"value":3641,"toc":4861},[3642,3645,3648,3675,3679,3682,3685,3695,3698,3883,3887,3894,3905,3917,3925,3928,4396,4400,4403,4407,4415,4421,4432,4442,4445,4448,4813,4817,4820,4826,4831,4837,4840,4846,4852,4858],[109,3643,3644],{"id":3644},"需求背景",[17,3646,3647],{},"在最近接手的 AI 需求中，需要实现一个类似 ChatGPT 的对话交互界面。其核心流程是：后端通过 SSE（Server-Sent  Events）协议，持续地将 AI 生成的 Markdown 格式文本片段推送到前端。前端负责动态接收并拼接这些 Markdown  片段，最终将拼接完成的 Markdown 文本实时渲染并显示在用户界面上。",[17,3649,3650,3651,3656,3657,3662,3663,3668,3669,3674],{},"Markdown 渲染并不是什么罕见的需求，尤其是在 LLM 相关落地产品满天飞的当下。不同于 React 生态拥有一个 14k+ star 的著名第三方库——",[708,3652,3655],{"href":3653,"rel":3654},"https://github.com/remarkjs/react-markdown",[712],"react-markdown","，Vue 这边似乎暂时还没有一个仍在活跃维护的、star 数量不低（起码得 2k+ 吧？）的 markdown 渲染库。",[708,3658,3661],{"href":3659,"rel":3660},"https://github.com/cloudacy/vue-markdown-render#readme",[712],"cloudacy/vue-markdown-render"," 最后一次发版在一年前，但截止本文写作时间只有 103 个 star；",[708,3664,3667],{"href":3665,"rel":3666},"https://github.com/miaolz123/vue-markdown",[712],"miaolz123/vue-markdown"," 有 2k star，但最后一次 commit 已经是 7 年前了；",[708,3670,3673],{"href":3671,"rel":3672},"https://github.com/zhaoxuhui1122/vue-markdown",[712],"zhaoxuhui1122/vue-markdown"," 更是 archived 状态。",[109,3676,3678],{"id":3677},"第一版方案简单粗暴的-v-html","第一版方案：简单粗暴的 v-html",[17,3680,3681],{},"简单调研了一圈，发现 Vue 生态里确实缺少一个能打的 Markdown 渲染库。既然没有现成的轮子，那咱就自己造一个！",[17,3683,3684],{},"根据大部分文章以及 LLM 的推荐，我们首先采用 markdown-it 这个第三方库将 markdown 转换为 html 字符串，再通过 v-html 传入。",[17,3686,3687,3690,3691,3694],{},[21,3688,3689],{},"PS:"," 我们这里假设 Markdown 内容是可信的（比如由我们自己的 AI 生成）。如果内容来自用户输入，一定要使用 ",[30,3692,3693],{},"DOMPurify"," 这类库来防止 XSS 攻击，避免给网站“开天窗”哦！",[17,3696,3697],{},"示例代码如下：",[38,3699,3701],{"className":3084,"code":3700,"language":3086,"meta":43,"style":43},"\u003Ctemplate>\n  \u003Cdiv v-html=\"renderedHtml\">\u003C/div>\n\u003C/template>\n\n\u003Cscript setup>\nimport { computed, onMounted, ref } from 'vue';\nimport MarkdownIt from 'markdown-it';\n\nconst markdownContent = ref('');\nconst md = new MarkdownIt();\n\nconst renderedHtml = computed(() => md.render(markdownContent.value))\n\nonMounted(() => {\n  // markdownContent.value = await fetch() ...\n})\n\u003C/script>\n",[30,3702,3703,3711,3733,3741,3745,3755,3770,3784,3788,3806,3824,3828,3851,3855,3866,3871,3875],{"__ignoreMap":43},[47,3704,3705,3707,3709],{"class":49,"line":50},[47,3706,546],{"class":149},[47,3708,3096],{"class":3095},[47,3710,3099],{"class":149},[47,3712,3713,3715,3718,3721,3723,3726,3729,3731],{"class":49,"line":56},[47,3714,3104],{"class":149},[47,3716,3717],{"class":3095},"div",[47,3719,3720],{"class":145}," v-html",[47,3722,272],{"class":149},[47,3724,3725],{"class":186},"\"renderedHtml\"",[47,3727,3728],{"class":149},">\u003C/",[47,3730,3717],{"class":3095},[47,3732,3099],{"class":149},[47,3734,3735,3737,3739],{"class":49,"line":62},[47,3736,3123],{"class":149},[47,3738,3096],{"class":3095},[47,3740,3099],{"class":149},[47,3742,3743],{"class":49,"line":68},[47,3744,165],{"emptyLinePlaceholder":164},[47,3746,3747,3749,3751,3753],{"class":49,"line":74},[47,3748,546],{"class":149},[47,3750,3138],{"class":3095},[47,3752,3141],{"class":145},[47,3754,3099],{"class":149},[47,3756,3757,3759,3762,3764,3767],{"class":49,"line":80},[47,3758,2195],{"class":134},[47,3760,3761],{"class":149}," { computed, onMounted, ref } ",[47,3763,2201],{"class":134},[47,3765,3766],{"class":186}," 'vue'",[47,3768,3769],{"class":149},";\n",[47,3771,3772,3774,3777,3779,3782],{"class":49,"line":86},[47,3773,2195],{"class":134},[47,3775,3776],{"class":149}," MarkdownIt ",[47,3778,2201],{"class":134},[47,3780,3781],{"class":186}," 'markdown-it'",[47,3783,3769],{"class":149},[47,3785,3786],{"class":49,"line":92},[47,3787,165],{"emptyLinePlaceholder":164},[47,3789,3790,3792,3794,3796,3798,3800,3803],{"class":49,"line":98},[47,3791,135],{"class":134},[47,3793,2227],{"class":138},[47,3795,142],{"class":134},[47,3797,3447],{"class":145},[47,3799,183],{"class":149},[47,3801,3802],{"class":186},"''",[47,3804,3805],{"class":149},");\n",[47,3807,3808,3810,3813,3815,3818,3821],{"class":49,"line":555},[47,3809,135],{"class":134},[47,3811,3812],{"class":138}," md",[47,3814,142],{"class":134},[47,3816,3817],{"class":134}," new",[47,3819,3820],{"class":145}," MarkdownIt",[47,3822,3823],{"class":149},"();\n",[47,3825,3826],{"class":49,"line":3},[47,3827,165],{"emptyLinePlaceholder":164},[47,3829,3830,3832,3835,3837,3839,3841,3843,3846,3848],{"class":49,"line":581},[47,3831,135],{"class":134},[47,3833,3834],{"class":138}," renderedHtml",[47,3836,142],{"class":134},[47,3838,569],{"class":145},[47,3840,572],{"class":149},[47,3842,575],{"class":134},[47,3844,3845],{"class":149}," md.",[47,3847,3080],{"class":145},[47,3849,3850],{"class":149},"(markdownContent.value))\n",[47,3852,3853],{"class":49,"line":602},[47,3854,165],{"emptyLinePlaceholder":164},[47,3856,3857,3860,3862,3864],{"class":49,"line":617},[47,3858,3859],{"class":145},"onMounted",[47,3861,572],{"class":149},[47,3863,575],{"class":134},[47,3865,578],{"class":149},[47,3867,3868],{"class":49,"line":643},[47,3869,3870],{"class":203},"  // markdownContent.value = await fetch() ...\n",[47,3872,3873],{"class":49,"line":652},[47,3874,660],{"class":149},[47,3876,3877,3879,3881],{"class":49,"line":657},[47,3878,3123],{"class":149},[47,3880,3138],{"class":3095},[47,3882,3099],{"class":149},[109,3884,3886],{"id":3885},"进化版给-markdown-分块更新","进化版：给 Markdown 分块更新",[17,3888,3889,3890,3893],{},"上述方案虽然能实现基础渲染，但在实时更新场景下存在明显缺陷：",[21,3891,3892],{},"每次接收到新的 Markdown 片段，整个文档都会触发全量重渲染","。即使只有最后一行是新增内容，整个文档的 DOM 也会被完全替换。这导致两个核心问题：",[1102,3895,3896,3902],{},[911,3897,3898,3899,3901],{},"**性能顶不住：**Markdown 内容增长时，",[30,3900,2043],{}," 解析和 DOM 重建的开销呈线性上升。",[911,3903,3904],{},"**交互状态丢失：**全量刷新会把用户当前的操作状态冲掉。最明显的就是，如果你选中了某段文字，一刷新，选中状态就没了！",[17,3906,3907,3908,3913,3914,3916],{},"为了解决这两个问题，",[708,3909,3912],{"href":3910,"rel":3911},"https://juejin.cn/post/7480900772386734143",[712],"我们在网上找到了分块渲染的方案"," —— 把 Markdown 按两个连续的换行符 (",[30,3915,2235],{},") 切成一块一块的。这样每次更新，只重新渲染最后一块新的，前面的老块直接复用缓存。好处很明显：",[908,3918,3919,3922],{},[911,3920,3921],{},"用户如果选中了前面块里的文字，下次更新时选中状态不会丢（因为前面的块没动）。",[911,3923,3924],{},"需要重新渲染的 DOM 变少了，性能自然就上来了。",[17,3926,3927],{},"代码调整后像这样：",[38,3929,3931],{"className":3084,"code":3930,"language":3086,"meta":43,"style":43},"\u003Ctemplate>\n  \u003Cdiv>\n    \u003Cdiv\n      v-for=\"(block, idx) in renderedBlocks\"\n      :key=\"idx\"\n      v-html=\"block\"\n      class=\"markdown-block\"\n    >\u003C/div>\n  \u003C/div>\n\u003C/template>\n\n\u003Cscript setup>\nimport { ref, computed, watch } from 'vue'\nimport MarkdownIt from 'markdown-it'\n\nconst markdownContent = ref('')\nconst md = new MarkdownIt()\n\nconst renderedBlocks = ref([])\nconst blockCache = ref([])\n\nwatch(\n  markdownContent,\n  (newContent, oldContent) => {\n    const blocks = newContent.split(/\\n{2,}/)\n    // 只重新渲染最后一个块，其余用缓存\n    // 处理块减少、块增多的场景\n    blockCache.value.length = blocks.length\n    for (let i = 0; i \u003C blocks.length; i++) {\n      // 只渲染最后一个，或新块\n      if (i === blocks.length - 1 || !blockCache.value[i]) {\n        blockCache.value[i] = md.render(blocks[i] || '')\n      }\n      // 其余块直接复用\n    }\n    renderedBlocks.value = blockCache.value.slice()\n  },\n  { immediate: true }\n)\n\nonMounted(() => {\n  // markdownContent.value = await fetch() ...\n})\n\u003C/script>\n",[30,3932,3933,3941,3949,3957,3967,3977,3987,3997,4006,4015,4023,4027,4037,4048,4059,4063,4079,4093,4097,4111,4124,4128,4136,4141,4161,4191,4196,4201,4217,4252,4257,4286,4308,4313,4318,4323,4339,4345,4356,4361,4366,4377,4382,4387],{"__ignoreMap":43},[47,3934,3935,3937,3939],{"class":49,"line":50},[47,3936,546],{"class":149},[47,3938,3096],{"class":3095},[47,3940,3099],{"class":149},[47,3942,3943,3945,3947],{"class":49,"line":56},[47,3944,3104],{"class":149},[47,3946,3717],{"class":3095},[47,3948,3099],{"class":149},[47,3950,3951,3954],{"class":49,"line":62},[47,3952,3953],{"class":149},"    \u003C",[47,3955,3956],{"class":3095},"div\n",[47,3958,3959,3962,3964],{"class":49,"line":68},[47,3960,3961],{"class":145},"      v-for",[47,3963,272],{"class":149},[47,3965,3966],{"class":186},"\"(block, idx) in renderedBlocks\"\n",[47,3968,3969,3972,3974],{"class":49,"line":74},[47,3970,3971],{"class":145},"      :key",[47,3973,272],{"class":149},[47,3975,3976],{"class":186},"\"idx\"\n",[47,3978,3979,3982,3984],{"class":49,"line":80},[47,3980,3981],{"class":145},"      v-html",[47,3983,272],{"class":149},[47,3985,3986],{"class":186},"\"block\"\n",[47,3988,3989,3992,3994],{"class":49,"line":86},[47,3990,3991],{"class":145},"      class",[47,3993,272],{"class":149},[47,3995,3996],{"class":186},"\"markdown-block\"\n",[47,3998,3999,4002,4004],{"class":49,"line":92},[47,4000,4001],{"class":149},"    >\u003C/",[47,4003,3717],{"class":3095},[47,4005,3099],{"class":149},[47,4007,4008,4011,4013],{"class":49,"line":98},[47,4009,4010],{"class":149},"  \u003C/",[47,4012,3717],{"class":3095},[47,4014,3099],{"class":149},[47,4016,4017,4019,4021],{"class":49,"line":555},[47,4018,3123],{"class":149},[47,4020,3096],{"class":3095},[47,4022,3099],{"class":149},[47,4024,4025],{"class":49,"line":3},[47,4026,165],{"emptyLinePlaceholder":164},[47,4028,4029,4031,4033,4035],{"class":49,"line":581},[47,4030,546],{"class":149},[47,4032,3138],{"class":3095},[47,4034,3141],{"class":145},[47,4036,3099],{"class":149},[47,4038,4039,4041,4044,4046],{"class":49,"line":602},[47,4040,2195],{"class":134},[47,4042,4043],{"class":149}," { ref, computed, watch } ",[47,4045,2201],{"class":134},[47,4047,3155],{"class":186},[47,4049,4050,4052,4054,4056],{"class":49,"line":617},[47,4051,2195],{"class":134},[47,4053,3776],{"class":149},[47,4055,2201],{"class":134},[47,4057,4058],{"class":186}," 'markdown-it'\n",[47,4060,4061],{"class":49,"line":643},[47,4062,165],{"emptyLinePlaceholder":164},[47,4064,4065,4067,4069,4071,4073,4075,4077],{"class":49,"line":652},[47,4066,135],{"class":134},[47,4068,2227],{"class":138},[47,4070,142],{"class":134},[47,4072,3447],{"class":145},[47,4074,183],{"class":149},[47,4076,3802],{"class":186},[47,4078,159],{"class":149},[47,4080,4081,4083,4085,4087,4089,4091],{"class":49,"line":657},[47,4082,135],{"class":134},[47,4084,3812],{"class":138},[47,4086,142],{"class":134},[47,4088,3817],{"class":134},[47,4090,3820],{"class":145},[47,4092,214],{"class":149},[47,4094,4095],{"class":49,"line":2490},[47,4096,165],{"emptyLinePlaceholder":164},[47,4098,4099,4101,4104,4106,4108],{"class":49,"line":2497},[47,4100,135],{"class":134},[47,4102,4103],{"class":138}," renderedBlocks",[47,4105,142],{"class":134},[47,4107,3447],{"class":145},[47,4109,4110],{"class":149},"([])\n",[47,4112,4113,4115,4118,4120,4122],{"class":49,"line":2502},[47,4114,135],{"class":134},[47,4116,4117],{"class":138}," blockCache",[47,4119,142],{"class":134},[47,4121,3447],{"class":145},[47,4123,4110],{"class":149},[47,4125,4126],{"class":49,"line":2513},[47,4127,165],{"emptyLinePlaceholder":164},[47,4129,4130,4133],{"class":49,"line":2525},[47,4131,4132],{"class":145},"watch",[47,4134,4135],{"class":149},"(\n",[47,4137,4138],{"class":49,"line":2536},[47,4139,4140],{"class":149},"  markdownContent,\n",[47,4142,4143,4146,4149,4151,4154,4157,4159],{"class":49,"line":2541},[47,4144,4145],{"class":149},"  (",[47,4147,4148],{"class":595},"newContent",[47,4150,321],{"class":149},[47,4152,4153],{"class":595},"oldContent",[47,4155,4156],{"class":149},") ",[47,4158,575],{"class":134},[47,4160,578],{"class":149},[47,4162,4163,4166,4169,4171,4174,4177,4179,4181,4184,4187,4189],{"class":49,"line":2546},[47,4164,4165],{"class":134},"    const",[47,4167,4168],{"class":138}," blocks",[47,4170,142],{"class":134},[47,4172,4173],{"class":149}," newContent.",[47,4175,4176],{"class":145},"split",[47,4178,183],{"class":149},[47,4180,1858],{"class":186},[47,4182,4183],{"class":138},"\\n",[47,4185,4186],{"class":134},"{2,}",[47,4188,1858],{"class":186},[47,4190,159],{"class":149},[47,4192,4193],{"class":49,"line":2557},[47,4194,4195],{"class":203},"    // 只重新渲染最后一个块，其余用缓存\n",[47,4197,4198],{"class":49,"line":2563},[47,4199,4200],{"class":203},"    // 处理块减少、块增多的场景\n",[47,4202,4203,4206,4209,4211,4214],{"class":49,"line":2569},[47,4204,4205],{"class":149},"    blockCache.value.",[47,4207,4208],{"class":138},"length",[47,4210,142],{"class":134},[47,4212,4213],{"class":149}," blocks.",[47,4215,4216],{"class":138},"length\n",[47,4218,4219,4222,4224,4227,4230,4232,4235,4238,4240,4242,4244,4247,4250],{"class":49,"line":2581},[47,4220,4221],{"class":134},"    for",[47,4223,2639],{"class":149},[47,4225,4226],{"class":134},"let",[47,4228,4229],{"class":149}," i ",[47,4231,272],{"class":134},[47,4233,4234],{"class":138}," 0",[47,4236,4237],{"class":149},"; i ",[47,4239,546],{"class":134},[47,4241,4213],{"class":149},[47,4243,4208],{"class":138},[47,4245,4246],{"class":149},"; i",[47,4248,4249],{"class":134},"++",[47,4251,2631],{"class":149},[47,4253,4254],{"class":49,"line":3018},[47,4255,4256],{"class":203},"      // 只渲染最后一个，或新块\n",[47,4258,4259,4262,4265,4267,4269,4271,4274,4277,4280,4283],{"class":49,"line":3026},[47,4260,4261],{"class":134},"      if",[47,4263,4264],{"class":149}," (i ",[47,4266,611],{"class":134},[47,4268,4213],{"class":149},[47,4270,4208],{"class":138},[47,4272,4273],{"class":134}," -",[47,4275,4276],{"class":138}," 1",[47,4278,4279],{"class":134}," ||",[47,4281,4282],{"class":134}," !",[47,4284,4285],{"class":149},"blockCache.value[i]) {\n",[47,4287,4288,4291,4293,4295,4297,4300,4303,4306],{"class":49,"line":3032},[47,4289,4290],{"class":149},"        blockCache.value[i] ",[47,4292,272],{"class":134},[47,4294,3845],{"class":149},[47,4296,3080],{"class":145},[47,4298,4299],{"class":149},"(blocks[i] ",[47,4301,4302],{"class":134},"||",[47,4304,4305],{"class":186}," ''",[47,4307,159],{"class":149},[47,4309,4310],{"class":49,"line":3062},[47,4311,4312],{"class":149},"      }\n",[47,4314,4315],{"class":49,"line":3068},[47,4316,4317],{"class":203},"      // 其余块直接复用\n",[47,4319,4321],{"class":49,"line":4320},35,[47,4322,2560],{"class":149},[47,4324,4326,4329,4331,4334,4337],{"class":49,"line":4325},36,[47,4327,4328],{"class":149},"    renderedBlocks.value ",[47,4330,272],{"class":134},[47,4332,4333],{"class":149}," blockCache.value.",[47,4335,4336],{"class":145},"slice",[47,4338,214],{"class":149},[47,4340,4342],{"class":49,"line":4341},37,[47,4343,4344],{"class":149},"  },\n",[47,4346,4348,4351,4354],{"class":49,"line":4347},38,[47,4349,4350],{"class":149},"  { immediate: ",[47,4352,4353],{"class":138},"true",[47,4355,2446],{"class":149},[47,4357,4359],{"class":49,"line":4358},39,[47,4360,159],{"class":149},[47,4362,4364],{"class":49,"line":4363},40,[47,4365,165],{"emptyLinePlaceholder":164},[47,4367,4369,4371,4373,4375],{"class":49,"line":4368},41,[47,4370,3859],{"class":145},[47,4372,572],{"class":149},[47,4374,575],{"class":134},[47,4376,578],{"class":149},[47,4378,4380],{"class":49,"line":4379},42,[47,4381,3870],{"class":203},[47,4383,4385],{"class":49,"line":4384},43,[47,4386,660],{"class":149},[47,4388,4390,4392,4394],{"class":49,"line":4389},44,[47,4391,3123],{"class":149},[47,4393,3138],{"class":3095},[47,4395,3099],{"class":149},[109,4397,4399],{"id":4398},"终极武器用-morphdom-实现精准更新","终极武器：用 morphdom 实现精准更新",[17,4401,4402],{},"分块渲染虽然解决了大部分问题，但遇到 Markdown 列表就有点力不从心了。因为 Markdown 语法里，列表项之间通常只有一个换行符，整个列表会被当成一个大块。想象一下一个几百项的列表，哪怕只更新最后一项，整个列表块也要全部重来，前面的问题又回来了。",[1056,4404,4406],{"id":4405},"morphdom-是何方神圣","morphdom 是何方神圣？",[17,4408,4409,4411,4412,399],{},[30,4410,1977],{}," 是一个仅 5KB（gzip 后）的 JavaScript 库，核心功能是：",[21,4413,4414],{},"接收两个 DOM 节点（或 HTML 字符串），计算出最小化的 DOM 操作，将第一个节点 “变形” 为第二个节点，而非直接替换",[17,4416,4417,4418,1673],{},"其工作原理类似虚拟 DOM 的 Diff 算法，但",[21,4419,4420],{},"直接操作真实 DOM",[1102,4422,4423,4426,4429],{},[911,4424,4425],{},"对比新旧 DOM 的标签名、属性、文本内容等；",[911,4427,4428],{},"仅对差异部分执行增 / 删 / 改操作（如修改文本、更新属性、移动节点位置）；",[911,4430,4431],{},"未变化的 DOM 节点会被完整保留，包括其事件监听、滚动位置、选中状态等。",[17,4433,4434,4435,4438,4439,4441],{},"Markdown 把列表当整体，但生成的 HTML 里，每个列表项 (",[30,4436,4437],{},"\u003Cli>",") 都是独立的！",[30,4440,1977],{}," 在更新后面的列表项时，能保证前面的列表项纹丝不动，状态自然就保住了。",[17,4443,4444],{},"这不就是我们梦寐以求的效果吗？在 Markdown 实时更新的同时，最大程度留住用户的操作状态，还能省掉一堆不必要的 DOM 操作！",[1056,4446,4447],{"id":4447},"示例代码",[38,4449,4451],{"className":3084,"code":4450,"language":3086,"meta":43,"style":43},"\u003Ctemplate>\n  \u003Cdiv ref=\"markdownContainer\" class=\"markdown-container\">\n    \u003Cdiv id=\"md-root\">\u003C/div>\n  \u003C/div>\n\u003C/template>\n\n\u003Cscript setup>\nimport { nextTick, ref, watch } from 'vue';\nimport MarkdownIt from 'markdown-it';\nimport morphdom from 'morphdom';\n\nconst markdownContent = ref('');\nconst markdownContainer = ref(null);\nconst md = new MarkdownIt();\n    \nconst render = () => {\n  if (!markdownContainer.value.querySelector('#md-root')) return;\n  \n  const newHtml = `\u003Cdiv id=\"md-root\">` + md.render(markdownContent.value) + `\u003C/div>`\n\n  morphdom(markdownContainer.value, newHtml, {\n    childrenOnly: true\n  });\n}\n\nwatch(markdownContent, () => {\n    render()\n});\n    \nonMounted(async () => {\n  // 等待 Dom 被挂载上\n  await nextTick()\n  render()\n})\n\u003C/script>\n\n",[30,4452,4453,4461,4484,4504,4512,4520,4524,4534,4547,4559,4573,4577,4593,4610,4624,4629,4645,4671,4676,4704,4708,4716,4724,4729,4733,4737,4748,4755,4760,4764,4779,4784,4794,4801,4805],{"__ignoreMap":43},[47,4454,4455,4457,4459],{"class":49,"line":50},[47,4456,546],{"class":149},[47,4458,3096],{"class":3095},[47,4460,3099],{"class":149},[47,4462,4463,4465,4467,4469,4471,4474,4477,4479,4482],{"class":49,"line":56},[47,4464,3104],{"class":149},[47,4466,3717],{"class":3095},[47,4468,3447],{"class":145},[47,4470,272],{"class":149},[47,4472,4473],{"class":186},"\"markdownContainer\"",[47,4475,4476],{"class":145}," class",[47,4478,272],{"class":149},[47,4480,4481],{"class":186},"\"markdown-container\"",[47,4483,3099],{"class":149},[47,4485,4486,4488,4490,4493,4495,4498,4500,4502],{"class":49,"line":62},[47,4487,3953],{"class":149},[47,4489,3717],{"class":3095},[47,4491,4492],{"class":145}," id",[47,4494,272],{"class":149},[47,4496,4497],{"class":186},"\"md-root\"",[47,4499,3728],{"class":149},[47,4501,3717],{"class":3095},[47,4503,3099],{"class":149},[47,4505,4506,4508,4510],{"class":49,"line":68},[47,4507,4010],{"class":149},[47,4509,3717],{"class":3095},[47,4511,3099],{"class":149},[47,4513,4514,4516,4518],{"class":49,"line":74},[47,4515,3123],{"class":149},[47,4517,3096],{"class":3095},[47,4519,3099],{"class":149},[47,4521,4522],{"class":49,"line":80},[47,4523,165],{"emptyLinePlaceholder":164},[47,4525,4526,4528,4530,4532],{"class":49,"line":86},[47,4527,546],{"class":149},[47,4529,3138],{"class":3095},[47,4531,3141],{"class":145},[47,4533,3099],{"class":149},[47,4535,4536,4538,4541,4543,4545],{"class":49,"line":92},[47,4537,2195],{"class":134},[47,4539,4540],{"class":149}," { nextTick, ref, watch } ",[47,4542,2201],{"class":134},[47,4544,3766],{"class":186},[47,4546,3769],{"class":149},[47,4548,4549,4551,4553,4555,4557],{"class":49,"line":98},[47,4550,2195],{"class":134},[47,4552,3776],{"class":149},[47,4554,2201],{"class":134},[47,4556,3781],{"class":186},[47,4558,3769],{"class":149},[47,4560,4561,4563,4566,4568,4571],{"class":49,"line":555},[47,4562,2195],{"class":134},[47,4564,4565],{"class":149}," morphdom ",[47,4567,2201],{"class":134},[47,4569,4570],{"class":186}," 'morphdom'",[47,4572,3769],{"class":149},[47,4574,4575],{"class":49,"line":3},[47,4576,165],{"emptyLinePlaceholder":164},[47,4578,4579,4581,4583,4585,4587,4589,4591],{"class":49,"line":581},[47,4580,135],{"class":134},[47,4582,2227],{"class":138},[47,4584,142],{"class":134},[47,4586,3447],{"class":145},[47,4588,183],{"class":149},[47,4590,3802],{"class":186},[47,4592,3805],{"class":149},[47,4594,4595,4597,4600,4602,4604,4606,4608],{"class":49,"line":602},[47,4596,135],{"class":134},[47,4598,4599],{"class":138}," markdownContainer",[47,4601,142],{"class":134},[47,4603,3447],{"class":145},[47,4605,183],{"class":149},[47,4607,2322],{"class":138},[47,4609,3805],{"class":149},[47,4611,4612,4614,4616,4618,4620,4622],{"class":49,"line":617},[47,4613,135],{"class":134},[47,4615,3812],{"class":138},[47,4617,142],{"class":134},[47,4619,3817],{"class":134},[47,4621,3820],{"class":145},[47,4623,3823],{"class":149},[47,4625,4626],{"class":49,"line":643},[47,4627,4628],{"class":149},"    \n",[47,4630,4631,4633,4636,4638,4641,4643],{"class":49,"line":652},[47,4632,135],{"class":134},[47,4634,4635],{"class":145}," render",[47,4637,142],{"class":134},[47,4639,4640],{"class":149}," () ",[47,4642,575],{"class":134},[47,4644,578],{"class":149},[47,4646,4647,4649,4651,4653,4656,4659,4661,4664,4667,4669],{"class":49,"line":657},[47,4648,2636],{"class":134},[47,4650,2639],{"class":149},[47,4652,2642],{"class":134},[47,4654,4655],{"class":149},"markdownContainer.value.",[47,4657,4658],{"class":145},"querySelector",[47,4660,183],{"class":149},[47,4662,4663],{"class":186},"'#md-root'",[47,4665,4666],{"class":149},")) ",[47,4668,2648],{"class":134},[47,4670,3769],{"class":149},[47,4672,4673],{"class":49,"line":2490},[47,4674,4675],{"class":149},"  \n",[47,4677,4678,4681,4684,4686,4689,4691,4693,4695,4698,4701],{"class":49,"line":2497},[47,4679,4680],{"class":134},"  const",[47,4682,4683],{"class":138}," newHtml",[47,4685,142],{"class":134},[47,4687,4688],{"class":186}," `\u003Cdiv id=\"md-root\">`",[47,4690,2832],{"class":134},[47,4692,3845],{"class":149},[47,4694,3080],{"class":145},[47,4696,4697],{"class":149},"(markdownContent.value) ",[47,4699,4700],{"class":134},"+",[47,4702,4703],{"class":186}," `\u003C/div>`\n",[47,4705,4706],{"class":49,"line":2502},[47,4707,165],{"emptyLinePlaceholder":164},[47,4709,4710,4713],{"class":49,"line":2513},[47,4711,4712],{"class":145},"  morphdom",[47,4714,4715],{"class":149},"(markdownContainer.value, newHtml, {\n",[47,4717,4718,4721],{"class":49,"line":2525},[47,4719,4720],{"class":149},"    childrenOnly: ",[47,4722,4723],{"class":138},"true\n",[47,4725,4726],{"class":49,"line":2536},[47,4727,4728],{"class":149},"  });\n",[47,4730,4731],{"class":49,"line":2541},[47,4732,2584],{"class":149},[47,4734,4735],{"class":49,"line":2546},[47,4736,165],{"emptyLinePlaceholder":164},[47,4738,4739,4741,4744,4746],{"class":49,"line":2557},[47,4740,4132],{"class":145},[47,4742,4743],{"class":149},"(markdownContent, () ",[47,4745,575],{"class":134},[47,4747,578],{"class":149},[47,4749,4750,4753],{"class":49,"line":2563},[47,4751,4752],{"class":145},"    render",[47,4754,214],{"class":149},[47,4756,4757],{"class":49,"line":2569},[47,4758,4759],{"class":149},"});\n",[47,4761,4762],{"class":49,"line":2581},[47,4763,4628],{"class":149},[47,4765,4766,4768,4770,4773,4775,4777],{"class":49,"line":3018},[47,4767,3859],{"class":145},[47,4769,183],{"class":149},[47,4771,4772],{"class":134},"async",[47,4774,4640],{"class":149},[47,4776,575],{"class":134},[47,4778,578],{"class":149},[47,4780,4781],{"class":49,"line":3026},[47,4782,4783],{"class":203},"  // 等待 Dom 被挂载上\n",[47,4785,4786,4789,4792],{"class":49,"line":3032},[47,4787,4788],{"class":134},"  await",[47,4790,4791],{"class":145}," nextTick",[47,4793,214],{"class":149},[47,4795,4796,4799],{"class":49,"line":3062},[47,4797,4798],{"class":145},"  render",[47,4800,214],{"class":149},[47,4802,4803],{"class":49,"line":3068},[47,4804,660],{"class":149},[47,4806,4807,4809,4811],{"class":49,"line":4320},[47,4808,3123],{"class":149},[47,4810,3138],{"class":3095},[47,4812,3099],{"class":149},[1056,4814,4816],{"id":4815},"眼见为实demo-对比","眼见为实：Demo 对比",[17,4818,4819],{},"下面这个 iframe 里放了个对比 Demo，展示了不同方案的效果差异。",[17,4821,4822,4825],{},[21,4823,4824],{},"小技巧："," 如果你用的是 Chrome、Edge 这类 Chromium 内核的浏览器，打开开发者工具 (DevTools)，找到“渲染”(Rendering) 标签页，勾选「突出显示重绘区域(Paint flashing)」。这样你就能直观看到每次更新时，哪些部分被重新绘制了——重绘区域越少，性能越好！",[17,4827,4828],{},[688,4829],{"alt":43,"src":4830},"https://static.031130.xyz/uploads/2025/07/12/d5721c40fb076.webp",[4832,4833],"iframe",{"src":4834,"width":4835,"height":4836,"allowFullScreen":164},"https://static.031130.xyz/demo/morphdom-vs-markdown-chunk.html","100%",500,[109,4838,4839],{"id":4839},"阶段性成果",[17,4841,4842,4843,4845],{},"从最开始的“暴力全量刷新”，到“聪明点的分块更新”，再到如今“精准手术刀般的 ",[30,4844,1977],{}," 更新”，我们一步步把那些不必要的渲染开销给砍掉了，最终搞出了一个既快又能留住用户状态的 Markdown 实时渲染方案。",[17,4847,4848,4849,4851],{},"不过，用 ",[30,4850,1977],{}," 这个第三方库来直接操作 Vue 组件里的 DOM，总觉得有点...不够“Vue”？它虽然解决了核心的性能和状态问题，但在 Vue 的世界里这么玩，多少有点旁门左道的意思。",[17,4853,4854,4857],{},[21,4855,4856],{},"下篇预告："," 在下一篇文章里，咱们就来聊聊，在 Vue 的世界里，有没有更优雅、更“原生”的方案来搞定 Markdown 的精准更新？敬请期待！",[954,4859,4860],{},"html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s4XuR, html code.shiki .s4XuR{--shiki-default:#E36209;--shiki-dark:#FFAB70}",{"title":43,"searchDepth":56,"depth":56,"links":4862},[4863,4864,4865,4866,4871],{"id":3644,"depth":56,"text":3644},{"id":3677,"depth":56,"text":3678},{"id":3885,"depth":56,"text":3886},{"id":4398,"depth":56,"text":4399,"children":4867},[4868,4869,4870],{"id":4405,"depth":62,"text":4406},{"id":4447,"depth":62,"text":4447},{"id":4815,"depth":62,"text":4816},{"id":4839,"depth":56,"text":4839},{"title":4873,"date":4874,"path":4875,"tags":4876,"body":4879},"node-sass 迁移至 dart-sass 踩坑实录","2025-07-05 17:57:02","/2025/07/05/node-sass-migration-to-dart-sass",[1967,1964,4877,4878,12],"Sass","CSS",{"type":14,"value":4880,"toc":5725},[4881,4884,4895,4899,4914,4917,4949,4952,4956,4959,4963,4972,4975,4984,5031,5034,5037,5040,5070,5079,5082,5086,5090,5114,5118,5232,5236,5245,5283,5287,5290,5356,5359,5363,5366,5369,5395,5398,5439,5448,5453,5457,5466,5473,5525,5528,5583,5586,5609,5612,5614,5722],[109,4882,4883],{"id":4883},"更新目标",[908,4885,4886,4889,4892],{},[911,4887,4888],{},"node-sass -> sass ( dart-sass )",[911,4890,4891],{},"减少影响面，非必要不更新其他依赖的版本",[911,4893,4894],{},"在前两条基础上，看看能否提升 node.js 的版本",[109,4896,4898],{"id":4897},"抛弃-node-sass-的理由","抛弃 node-sass 的理由",[908,4900,4901,4908,4911],{},[911,4902,4903],{},[708,4904,4907],{"href":4905,"rel":4906},"https://sass-lang.com/blog/libsass-is-deprecated/",[712],"node-sass 已经停止维护，dart-sass 是 sass 官方主推的继任者",[911,4909,4910],{},"node-sass 在 windows 下的安装非常麻烦，npm 安装时需要开发机上同时装有 python2 和 Microsoft Visual C++",[911,4912,4913],{},"在安装 node-sass 时，需要从 Github 拉取资源，在特定网络环境下成功率并不高",[109,4915,4916],{"id":4916},"项目依赖版本现状",[908,4918,4919,4924,4929,4934,4939,4944],{},[911,4920,4921],{},[30,4922,4923],{},"node@^12",[911,4925,4926],{},[30,4927,4928],{},"vue@^2",[911,4930,4931],{},[30,4932,4933],{},"webpack@^3",[911,4935,4936],{},[30,4937,4938],{},"vue-loader@^14",[911,4940,4941],{},[30,4942,4943],{},"sass-loader@^7.0.3",[911,4945,4946],{},[30,4947,4948],{},"node-sass@^4",[109,4950,4951],{"id":4951},"更新思路",[1056,4953,4955],{"id":4954},"nodejs","node.js",[17,4957,4958],{},"webpack 官方并没有提供 webpack 3 支持的最高 node 版本，且即使 webpack 官方支持，webpack 的相关插件也未必支持。因此 node 版本能否更新就只能自己试。好在尽管这个项目的 CI/CD 跑在 node 12，但我日常都在用 node 14 开发，因此顺势将 node 版本提升至 14。",[1056,4960,4962],{"id":4961},"webpacksass-loader","webpack、sass-loader",[17,4964,4965,4966,4971],{},"webpack 的版本目前处于非必要不更新的定时炸弹状态，基于现有的 webpack 3 限制，所支持的最高 sass-loader 版本就是 ^7 （ sass-loader 在 ",[708,4967,4970],{"href":4968,"rel":4969},"https://github.com/webpack-contrib/sass-loader/blob/v8.0.0/CHANGELOG.md",[712],"8.0.0 版本的更新日志","中明确指出 8.0.0 版本需要 webpack 4.36.0）。",[17,4973,4974],{},"如果项目中 sass-loader@^7 支持使用 dart-sass 就可以不更新 sass-loader，也就不必更新 webpack 版本；反之，就需要同步更新 webpack 至 4，再视情况定下 sass-loader 的版本。",[17,4976,4977,4978,4983],{},"那么到底支不支持呢？我在 ",[708,4979,4982],{"href":4980,"rel":4981},"https://www.webpackjs.com/loaders/sass-loader/",[712],"webpack 官方文档介绍 sass-loader 的页面","找到了这样一段 package.json 片段",[38,4985,4987],{"className":2335,"code":4986,"language":2337,"meta":43,"style":43},"{\n  \"devDependencies\": {\n    \"sass-loader\": \"^7.2.0\",\n    \"sass\": \"^1.22.10\"\n  }\n}\n",[30,4988,4989,4993,5001,5013,5023,5027],{"__ignoreMap":43},[47,4990,4991],{"class":49,"line":50},[47,4992,2344],{"class":149},[47,4994,4995,4998],{"class":49,"line":56},[47,4996,4997],{"class":138},"  \"devDependencies\"",[47,4999,5000],{"class":149},": {\n",[47,5002,5003,5006,5008,5011],{"class":49,"line":62},[47,5004,5005],{"class":138},"    \"sass-loader\"",[47,5007,2352],{"class":149},[47,5009,5010],{"class":186},"\"^7.2.0\"",[47,5012,2358],{"class":149},[47,5014,5015,5018,5020],{"class":49,"line":68},[47,5016,5017],{"class":138},"    \"sass\"",[47,5019,2352],{"class":149},[47,5021,5022],{"class":186},"\"^1.22.10\"\n",[47,5024,5025],{"class":49,"line":74},[47,5026,3065],{"class":149},[47,5028,5029],{"class":49,"line":80},[47,5030,2584],{"class":149},[17,5032,5033],{},"这证明起码在 sass-loader@7.2.0 这一版本就已经支持 dart-sass 了，因此 webpack 版本可以停留在 ^3，而 sass-loader 暂时停留在 7.0.3 版本，如果后续有问题可以更新到 ^7 版本中最新的 7.3.1 版本。",[1056,5035,5036],{"id":5036},"dart-sass",[17,5038,5039],{},"sass-loader@^7 所支持的最高 sass 我并没有查到，Github Copilot 信誓旦旦地告诉我",[1496,5041,5042,5047,5052,5057],{},[17,5043,5044],{},[21,5045,5046],{},"官方文档引用：",[1496,5048,5049],{},[17,5050,5051],{},"sass-loader@^7.0.0 requires node-sass >=4.0.0 or sass >=1.3.0, \u003C=1.26.5.",[17,5053,5054],{},[21,5055,5056],{},"建议：",[908,5058,5059],{},[911,5060,5061,5062,5065,5066,5069],{},"如果需要使用更高版本的 ",[30,5063,5064],{},"sass","，请升级到 ",[30,5067,5068],{},"sass-loader"," 8 或更高版本。",[17,5071,5072,5073,5078],{},"但事实上，我并没有在互联网上找到这段文本的蛛丝马迹。并且在 sass 的 ~1.26 版本中最后一个版本是 1.26.11 而非 1.26.5，",[708,5074,5077],{"href":5075,"rel":5076},"https://docs.npmjs.com/about-semantic-versioning",[712],"根据常见的 npm 版本号原则","，major version 和 minor version 不变，只改变了 patch version 的发版一般只有 bugfix 而没有 breaking change，不至于从 1.26.5 更新到 1.26.11 就突然不支持 sass-loader 7 了，因此更可能是 AI 幻觉或者是训练数据受限。",[17,5080,5081],{},"出于谨慎考虑，最终决定采用 webpack 官方文档中提到的 sass 1.22 的最后一个版本，也就是 1.22.12。",[109,5083,5085],{"id":5084},"分析完成动手更新","分析完成，动手更新",[1056,5087,5089],{"id":5088},"第一步卸载-node-sass安装-sass12212","第一步，卸载 node-sass，安装 sass@^1.22.12",[38,5091,5093],{"className":2162,"code":5092,"language":2164,"meta":43,"style":43},"npm uninstall node-sass\nnpm install sass@^1.22.12\n",[30,5094,5095,5105],{"__ignoreMap":43},[47,5096,5097,5099,5102],{"class":49,"line":50},[47,5098,2171],{"class":145},[47,5100,5101],{"class":186}," uninstall",[47,5103,5104],{"class":186}," node-sass\n",[47,5106,5107,5109,5111],{"class":49,"line":56},[47,5108,2171],{"class":145},[47,5110,2174],{"class":186},[47,5112,5113],{"class":186}," sass@^1.22.12\n",[1056,5115,5117],{"id":5116},"第二步更新-webpack-配置非必须","第二步，更新 webpack 配置（非必须）",[38,5119,5121],{"className":1438,"code":5120,"language":1440,"meta":43,"style":43},"module.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.(scss|sass)$/,\n        use: [\n          'style-loader',\n          'css-loader',\n          {\n            loader: 'sass-loader',\n+            options: {\n+                // 事实上，这一行在大部分 sass-loader 版本中不用加，sass-loader 能自动检测本地是 sass 还是 node-sass\n+                implementation: require('sass')\n+              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n",[30,5122,5123,5128,5133,5138,5143,5148,5153,5158,5163,5168,5173,5178,5183,5188,5193,5198,5203,5208,5213,5218,5223,5227],{"__ignoreMap":43},[47,5124,5125],{"class":49,"line":50},[47,5126,5127],{},"module.exports = {\n",[47,5129,5130],{"class":49,"line":56},[47,5131,5132],{},"  // ...\n",[47,5134,5135],{"class":49,"line":62},[47,5136,5137],{},"  module: {\n",[47,5139,5140],{"class":49,"line":68},[47,5141,5142],{},"    rules: [\n",[47,5144,5145],{"class":49,"line":74},[47,5146,5147],{},"      {\n",[47,5149,5150],{"class":49,"line":80},[47,5151,5152],{},"        test: /\\.(scss|sass)$/,\n",[47,5154,5155],{"class":49,"line":86},[47,5156,5157],{},"        use: [\n",[47,5159,5160],{"class":49,"line":92},[47,5161,5162],{},"          'style-loader',\n",[47,5164,5165],{"class":49,"line":98},[47,5166,5167],{},"          'css-loader',\n",[47,5169,5170],{"class":49,"line":555},[47,5171,5172],{},"          {\n",[47,5174,5175],{"class":49,"line":3},[47,5176,5177],{},"            loader: 'sass-loader',\n",[47,5179,5180],{"class":49,"line":581},[47,5181,5182],{},"+            options: {\n",[47,5184,5185],{"class":49,"line":602},[47,5186,5187],{},"+                // 事实上，这一行在大部分 sass-loader 版本中不用加，sass-loader 能自动检测本地是 sass 还是 node-sass\n",[47,5189,5190],{"class":49,"line":617},[47,5191,5192],{},"+                implementation: require('sass')\n",[47,5194,5195],{"class":49,"line":643},[47,5196,5197],{},"+              },\n",[47,5199,5200],{"class":49,"line":652},[47,5201,5202],{},"            },\n",[47,5204,5205],{"class":49,"line":657},[47,5206,5207],{},"          },\n",[47,5209,5210],{"class":49,"line":2490},[47,5211,5212],{},"        ],\n",[47,5214,5215],{"class":49,"line":2497},[47,5216,5217],{},"      },\n",[47,5219,5220],{"class":49,"line":2502},[47,5221,5222],{},"    ],\n",[47,5224,5225],{"class":49,"line":2513},[47,5226,4344],{},[47,5228,5229],{"class":49,"line":2525},[47,5230,5231],{},"};\n",[1056,5233,5235],{"id":5234},"第三步批量替换-deep-语法为-v-deep","第三步，批量替换 /deep/ 语法为 ::v-deep",[17,5237,5238,5239,5244],{},"因为 ",[708,5240,5243],{"href":5241,"rel":5242},"https://chromestatus.com/feature/4964279606312960",[712],"/deep/ 写法在 2017 年被弃用"," ，/deep/ 变成了不受支持的深度作用选择器，node-sass 凭借其出色的容错性能够继续提供兼容，但 dart-sass 则不支持这种写法。于是需要将 /deep/ 语法批量替换成 ::v-deep 写法，这种写法虽然在 vue 的后续 rfc 被放弃了，但直至今日依然在事实上被支持。",[38,5246,5248],{"className":2162,"code":5247,"language":2164,"meta":43,"style":43},"# 大概就是这么个意思，用 vscode 的批量替换其实也行\nsed -i 's#\\s*/deep/\\s*# ::v-deep #g' $(grep -rl '/deep/' .)\n",[30,5249,5250,5255],{"__ignoreMap":43},[47,5251,5252],{"class":49,"line":50},[47,5253,5254],{"class":203},"# 大概就是这么个意思，用 vscode 的批量替换其实也行\n",[47,5256,5257,5260,5263,5266,5269,5272,5275,5278,5281],{"class":49,"line":56},[47,5258,5259],{"class":145},"sed",[47,5261,5262],{"class":138}," -i",[47,5264,5265],{"class":186}," 's#\\s*/deep/\\s*# ::v-deep #g'",[47,5267,5268],{"class":149}," $(",[47,5270,5271],{"class":145},"grep",[47,5273,5274],{"class":138}," -rl",[47,5276,5277],{"class":186}," '/deep/'",[47,5279,5280],{"class":186}," .",[47,5282,159],{"class":149},[1056,5284,5286],{"id":5285},"第四步修复其他-sass-语法错误","第四步，修复其他 sass 语法错误",[17,5288,5289],{},"在迁移的过程中，我发现项目中有一些不规范的写法，node-sass 凭借出色的鲁棒性不吭一声强行解析，而 dart-sass 则干不了这粗活。因此需要根据编译时的报错手动修复一下这些语法错误，我这里一共遇到两种。",[38,5291,5293],{"className":1438,"code":5292,"language":1440,"meta":43,"style":43},"// 多打了一个冒号\n.foo {\n-  color:: #fff;\n+  color: #fff;\n}\n\n// :nth-last-child 没指定数字\n.bar {\n-  &:nth-last-child() {\n+  &:nth-last-child(1) {\n      margin-bottom: 0;\n  }\n}\n",[30,5294,5295,5300,5305,5310,5315,5319,5323,5328,5333,5338,5343,5348,5352],{"__ignoreMap":43},[47,5296,5297],{"class":49,"line":50},[47,5298,5299],{},"// 多打了一个冒号\n",[47,5301,5302],{"class":49,"line":56},[47,5303,5304],{},".foo {\n",[47,5306,5307],{"class":49,"line":62},[47,5308,5309],{},"-  color:: #fff;\n",[47,5311,5312],{"class":49,"line":68},[47,5313,5314],{},"+  color: #fff;\n",[47,5316,5317],{"class":49,"line":74},[47,5318,2584],{},[47,5320,5321],{"class":49,"line":80},[47,5322,165],{"emptyLinePlaceholder":164},[47,5324,5325],{"class":49,"line":86},[47,5326,5327],{},"// :nth-last-child 没指定数字\n",[47,5329,5330],{"class":49,"line":92},[47,5331,5332],{},".bar {\n",[47,5334,5335],{"class":49,"line":98},[47,5336,5337],{},"-  &:nth-last-child() {\n",[47,5339,5340],{"class":49,"line":555},[47,5341,5342],{},"+  &:nth-last-child(1) {\n",[47,5344,5345],{"class":49,"line":3},[47,5346,5347],{},"      margin-bottom: 0;\n",[47,5349,5350],{"class":49,"line":581},[47,5351,3065],{},[47,5353,5354],{"class":49,"line":602},[47,5355,2584],{},[109,5357,5358],{"id":5358},"踩坑",[1056,5360,5362],{"id":5361},"v-deep-样式不生效","::v-deep 样式不生效",[17,5364,5365],{},"依赖更新完后看了两眼好像是没问题，就推测试环境了。结果一天没到就被同事 call 了，::v-deep 这种深度作用选择器居然没有生效？",[17,5367,5368],{},"抱着试一试的态度，GPT 给了如下回答",[1496,5370,5371],{},[17,5372,5373,5374,5377,5378,5381,5382,5388,5389,5392,5393,3561],{},"在 ",[21,5375,5376],{},"Vue 2 + vue-loader + Sass"," 的组合下，",[21,5379,5380],{},"这种写法是正确的","，",[21,5383,5384,5385],{},"前提是你的构建工具链支持 ",[30,5386,5387],{},"::v-deep"," 语法（如 ",[30,5390,5391],{},"vue-loader@15"," 及以上版本 + ",[30,5394,5068],{},[17,5396,5397],{},"虽说我依然没有查证到为什么更新 vue-loader@15 才能使用 ::v-deep 语法，但对 vue-loader 进行更新后，::v-deep 语法确实生效了。在撰写本文时，我找到了些许蛛丝马迹，可能能解释这一问题。",[1102,5399,5400,5414],{},[911,5401,5402,5403,5408,5409,399],{},"vue-loader 在 ",[708,5404,5407],{"href":5405,"rel":5406},"https://vue-loader-v14.vuejs.org/en/features/scoped-css.html#deep-selectors",[712],"14 版本的官方文档","就是没有 ::v-deep 写法的示例，",[708,5410,5413],{"href":5411,"rel":5412},"https://github.com/vuejs/vue-loader/commit/2585d254fc774386a898887467fbdd30eb864b53",[712],"这一示例一直在 vue-loader 15.7.0 版本发布后才被加入",[911,5415,5416,5417,5424,5427,5428,5433,5434],{},"vue-cli 的 Github Issue 评论区中有人提到",[1496,5418,5419],{},[17,5420,5421,5423],{},[30,5422,5387],{}," implemented in @vue/component-compiler-utils v2.6.0, should work after you reinstall the deps.",[5425,5426],"br",{},"而 vue-loader 在 15.0.0-beta.1 版本才",[708,5429,5432],{"href":5430,"rel":5431},"https://github.com/vuejs/vue-loader/commit/e32cd0e4372fcc6f13b6c307402713807516d71c#diff-7ae45ad102eab3b6d7e7896acd08c427a9b25b346470d7bc6507b6481575d519",[712],"将 @vue/component-compiler-utils 加入到自己的 dependencies 中","，并直到 vue-loader 15.7.1 中才",[708,5435,5438],{"href":5436,"rel":5437},"https://github.com/vuejs/vue-loader/commit/c359a38db0fbb4135fc97114baec3cd557d4123a",[712],"将其 @vue/component-compiler-utils 的版本号更新到满足要求的 ^3.0.0",[17,5440,5441,5442,5447],{},"那能否升级到 vue-loader 16 甚至 17 版本呢？不行，在 ",[708,5443,5446],{"href":5444,"rel":5445},"https://github.com/vuejs/vue-loader/releases/tag/v16.1.2",[712],"vue-loader v16.1.2 的更新日志","中明确写道",[1496,5449,5450],{},[17,5451,5452],{},"Note: vue-loader v16 is for Vue 3 only.",[1056,5454,5456],{"id":5455},"vue-loader-14-15-breaking-change","vue-loader 14 -> 15 breaking change",[17,5458,5459,5460,5465],{},"vue-loader 从 14 往上迁移时，不修改 webpack 配置直接跑会遇到 vue 语法不识别的问题。具体表现为 .vue 文件命名都是正确有效的语法，但构建开发时编译器就是不认，报语法错误。vue-loader 官方有一份",[708,5461,5464],{"href":5462,"rel":5463},"https://vue-loader.vuejs.org/migrating.html",[712],"迁移文档","，需要注意一下。",[38,5467,5471],{"className":5468,"code":5470,"language":2606},[5469],"language-text","ERROR in ./src/......\nModule parse failed: Unexpected token(1:0)\nYou may need an appropriate loader to handle this file type.\n",[30,5472,5470],{"__ignoreMap":43},[38,5474,5476],{"className":1438,"code":5475,"language":1440,"meta":43,"style":43},"// ...\nimport path from 'path'\n+const VueLoaderPlugin = require('vue-loader/lib/plugin')\n\n// ...\n\n  plugins: [\n+    new VueLoaderPlugin()\n    // ...\n  ]\n",[30,5477,5478,5483,5488,5493,5497,5501,5505,5510,5515,5520],{"__ignoreMap":43},[47,5479,5480],{"class":49,"line":50},[47,5481,5482],{},"// ...\n",[47,5484,5485],{"class":49,"line":56},[47,5486,5487],{},"import path from 'path'\n",[47,5489,5490],{"class":49,"line":62},[47,5491,5492],{},"+const VueLoaderPlugin = require('vue-loader/lib/plugin')\n",[47,5494,5495],{"class":49,"line":68},[47,5496,165],{"emptyLinePlaceholder":164},[47,5498,5499],{"class":49,"line":74},[47,5500,5482],{},[47,5502,5503],{"class":49,"line":80},[47,5504,165],{"emptyLinePlaceholder":164},[47,5506,5507],{"class":49,"line":86},[47,5508,5509],{},"  plugins: [\n",[47,5511,5512],{"class":49,"line":92},[47,5513,5514],{},"+    new VueLoaderPlugin()\n",[47,5516,5517],{"class":49,"line":98},[47,5518,5519],{},"    // ...\n",[47,5521,5522],{"class":49,"line":555},[47,5523,5524],{},"  ]\n",[17,5526,5527],{},"除此之外，在我这个项目中需要额外移除 webpack 配置中针对 .vue 文件的 babel-loader",[38,5529,5531],{"className":1438,"code":5530,"language":1440,"meta":43,"style":43},"{\n  test: /\\.vue$/,\n  use: [\n-    {\n-      loader: 'babel-loader'\n-    },\n    {\n      loader: 'vue-loader',\n    }\n  ]\n}\n",[30,5532,5533,5537,5542,5547,5552,5557,5562,5566,5571,5575,5579],{"__ignoreMap":43},[47,5534,5535],{"class":49,"line":50},[47,5536,2344],{},[47,5538,5539],{"class":49,"line":56},[47,5540,5541],{},"  test: /\\.vue$/,\n",[47,5543,5544],{"class":49,"line":62},[47,5545,5546],{},"  use: [\n",[47,5548,5549],{"class":49,"line":68},[47,5550,5551],{},"-    {\n",[47,5553,5554],{"class":49,"line":74},[47,5555,5556],{},"-      loader: 'babel-loader'\n",[47,5558,5559],{"class":49,"line":80},[47,5560,5561],{},"-    },\n",[47,5563,5564],{"class":49,"line":86},[47,5565,2371],{},[47,5567,5568],{"class":49,"line":92},[47,5569,5570],{},"      loader: 'vue-loader',\n",[47,5572,5573],{"class":49,"line":98},[47,5574,2560],{},[47,5576,5577],{"class":49,"line":555},[47,5578,5524],{},[47,5580,5581],{"class":49,"line":3},[47,5582,2584],{},[109,5584,5585],{"id":5585},"最终更新情况",[908,5587,5588,5595,5602],{},[911,5589,5590,1772,5592],{},[30,5591,4923],{},[30,5593,5594],{},"node@^14",[911,5596,5597,1772,5599],{},[30,5598,4938],{},[30,5600,5601],{},"vue-loader@^15",[911,5603,5604,1772,5606],{},[30,5605,4948],{},[30,5607,5608],{},"sass@^1.22.12",[17,5610,5611],{},"其余依赖版本维持不变",[109,5613,936],{"id":936},[908,5615,5616,5633,5640,5646,5652,5659,5666,5672,5678,5684,5690,5696,5702,5709,5716],{},[911,5617,5618],{},[708,5619,5622,5623,5625,5626,5629,5630,5632],{"href":5620,"rel":5621},"https://juejin.cn/post/7327094228350500914",[712],"node-sass更换为dart-sass",[30,5624,5036],{}," 和 ",[30,5627,5628],{},"node-sass","都是用来将",[30,5631,5064],{},"编译成 - 掘金",[911,5634,5635],{},[708,5636,5639],{"href":5637,"rel":5638},"https://sunchenggit.github.io/2021/01/13/node-sass%E8%BF%81%E7%A7%BBdart-sass/",[712],"node-sass迁移dart-sass | Bolg",[911,5641,5642],{},[708,5643,5645],{"href":4980,"rel":5644},[712],"sass-loader | webpack 中文文档 | webpack中文文档 | webpack中文网",[911,5647,5648],{},[708,5649,5651],{"href":4905,"rel":5650},[712],"Sass: LibSass is Deprecated",[911,5653,5654],{},[708,5655,5658],{"href":5656,"rel":5657},"https://www.npmjs.com/package/sass?activeTab=versions",[712],"sass - npm",[911,5660,5661],{},[708,5662,5665],{"href":5663,"rel":5664},"https://www.npmjs.com/package/node-sass",[712],"node-sass - npm",[911,5667,5668],{},[708,5669,5671],{"href":5075,"rel":5670},[712],"About semantic versioning | npm Docs",[911,5673,5674],{},[708,5675,5677],{"href":5241,"rel":5676},[712],"Make /deep/ behave like the descendant combinator \" \" in CSS live profile (in css file or inside of \u003Cstyle>) - Chrome Platform Status",[911,5679,5680],{},[708,5681,5683],{"href":4968,"rel":5682},[712],"sass-loader/CHANGELOG.md at v8.0.0 · webpack-contrib/sass-loader",[911,5685,5686],{},[708,5687,5689],{"href":5444,"rel":5688},[712],"Release v16.1.2 · vuejs/vue-loader",[911,5691,5692],{},[708,5693,5695],{"href":5430,"rel":5694},[712],"refactor: use @vue/component-compiler-utils · vuejs/vue-loader@e32cd0e",[911,5697,5698],{},[708,5699,5701],{"href":5436,"rel":5700},[712],"chore: update @vue/component-compiler-utils to v3 · vuejs/vue-loader@c359a38",[911,5703,5704],{},[708,5705,5708],{"href":5706,"rel":5707},"https://github.com/vuejs/vue-cli/issues/3399#issuecomment-466319019",[712],"dart-sass does not support /deep/ selector · Issue #3399 · vuejs/vue-cli",[911,5710,5711],{},[708,5712,5715],{"href":5713,"rel":5714},"https://vue-loader-v14.vuejs.org/en/features/scoped-css.html",[712],"Scoped CSS · vue-loader v14",[911,5717,5718],{},[708,5719,5721],{"href":5462,"rel":5720},[712],"Migrating from v14 | Vue Loader",[954,5723,5724],{},"html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}",{"title":43,"searchDepth":56,"depth":56,"links":5726},[5727,5728,5729,5730,5735,5741,5745,5746],{"id":4883,"depth":56,"text":4883},{"id":4897,"depth":56,"text":4898},{"id":4916,"depth":56,"text":4916},{"id":4951,"depth":56,"text":4951,"children":5731},[5732,5733,5734],{"id":4954,"depth":62,"text":4955},{"id":4961,"depth":62,"text":4962},{"id":5036,"depth":62,"text":5036},{"id":5084,"depth":56,"text":5085,"children":5736},[5737,5738,5739,5740],{"id":5088,"depth":62,"text":5089},{"id":5116,"depth":62,"text":5117},{"id":5234,"depth":62,"text":5235},{"id":5285,"depth":62,"text":5286},{"id":5358,"depth":56,"text":5358,"children":5742},[5743,5744],{"id":5361,"depth":62,"text":5362},{"id":5455,"depth":62,"text":5456},{"id":5585,"depth":56,"text":5585},{"id":936,"depth":56,"text":936},{"title":5748,"date":5749,"path":5750,"tags":5751,"body":5753},"前端中的量子力学——一打开 F12 就消失的 Bug","2025-06-08 01:22:13","/2025/06/08/front-end-bug-gone-when-open-devtool",[1967,3639,4878,12,5752],"Debug",{"type":14,"value":5754,"toc":6265},[5755,5759,5762,5770,5772,5778,5781,5795,5799,5802,5925,5928,5931,5934,5937,5943,5946,5980,5984,5997,6000,6067,6070,6201,6204,6207,6211,6218,6229,6232,6237,6239,6262],[109,5756,5758],{"id":5757},"前端量子态现象的首次观测","前端「量子态」现象的首次观测",[17,5760,5761],{},"这事说来也邪乎，半个月前吃着火锅唱着歌，在工位上嘎嘎写码，发现一个诡异的 bug。作为如假包换的人类程序员，写出 bug 是再正常不过的事情了，但这 bug 邪门就邪门在我一打开 F12 的 DevTools 观察相关的 dom 结构，这 bug 就自动消失了；再把 DevTools 一关，Ctrl + F5 一刷新页面，Bug 又出现了。",[17,5763,5764,5765],{},"下面是使用 iframe 引入的 ",[708,5766,5769],{"href":5767,"rel":5768},"https://static.031130.xyz/demo/scroll-jump-bug.html",[712],"demo",[4832,5771],{"src":5767,"width":4835,"height":4836,"allowFullScreen":164},[17,5773,5774],{},[688,5775],{"alt":5776,"src":5777},"“观测”指南","https://static.031130.xyz/uploads/2025/06/08/65620d31fce6f.webp",[17,5779,5780],{},"这 Bug 给我整得脑瓜子嗡嗡的，我又不是物理学家，写个前端怎么量子力学的观察者效应都给我整出来了（？",[1496,5782,5783,5789,5792],{},[17,5784,5785,5788],{},[21,5786,5787],{},"观测者效应","（Observer effect），是指“观测”这种行为对被观测对象造成一定影响的效应。",[17,5790,5791],{},"在量子力学实验中，如果要测算一个电子所处的速度，就要用两个光子隔一段时间去撞击这个电子，但第一个光子就已经把这个电子撞飞了，便改变了电子的原有速度，我们便无法测出真正准确的速度（不确定原理）。时间流逝的快慢也会受到观测者的影响，用很高的频率去观测粒子的衰变，反而使得粒子长时间不衰变。",[17,5793,5794],{},"——wikipedia",[109,5796,5798],{"id":5797},"量子迷雾浏览器机制","量子迷雾❌浏览器机制✅",[17,5800,5801],{},"这里先稍微解释一下 demo 中的代码片段:",[38,5803,5805],{"className":2186,"code":5804,"language":2188,"meta":43,"style":43},"if (scrollIndex >= groupLength) {\n  setTimeout(() => {\n    wrapper.style.transition = \"none\";\n    scrollIndex = 0;\n    wrapper.style.transform = `translateY(-${crollIndex * itemHeight}px)`;\n\n    requestAnimationFrame(() => {\n      wrapper.style.transition = \"transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)\";\n    });\n  }, 500);\n}\n",[30,5806,5807,5821,5832,5844,5855,5879,5883,5894,5906,5911,5921],{"__ignoreMap":43},[47,5808,5809,5812,5815,5818],{"class":49,"line":50},[47,5810,5811],{"class":134},"if",[47,5813,5814],{"class":149}," (scrollIndex ",[47,5816,5817],{"class":134},">=",[47,5819,5820],{"class":149}," groupLength) {\n",[47,5822,5823,5826,5828,5830],{"class":49,"line":56},[47,5824,5825],{"class":145},"  setTimeout",[47,5827,572],{"class":149},[47,5829,575],{"class":134},[47,5831,578],{"class":149},[47,5833,5834,5837,5839,5842],{"class":49,"line":62},[47,5835,5836],{"class":149},"    wrapper.style.transition ",[47,5838,272],{"class":134},[47,5840,5841],{"class":186}," \"none\"",[47,5843,3769],{"class":149},[47,5845,5846,5849,5851,5853],{"class":49,"line":68},[47,5847,5848],{"class":149},"    scrollIndex ",[47,5850,272],{"class":134},[47,5852,4234],{"class":138},[47,5854,3769],{"class":149},[47,5856,5857,5860,5862,5865,5868,5871,5874,5877],{"class":49,"line":74},[47,5858,5859],{"class":149},"    wrapper.style.transform ",[47,5861,272],{"class":134},[47,5863,5864],{"class":186}," `translateY(-${",[47,5866,5867],{"class":149},"crollIndex",[47,5869,5870],{"class":134}," *",[47,5872,5873],{"class":149}," itemHeight",[47,5875,5876],{"class":186},"}px)`",[47,5878,3769],{"class":149},[47,5880,5881],{"class":49,"line":80},[47,5882,165],{"emptyLinePlaceholder":164},[47,5884,5885,5888,5890,5892],{"class":49,"line":86},[47,5886,5887],{"class":145},"    requestAnimationFrame",[47,5889,572],{"class":149},[47,5891,575],{"class":134},[47,5893,578],{"class":149},[47,5895,5896,5899,5901,5904],{"class":49,"line":92},[47,5897,5898],{"class":149},"      wrapper.style.transition ",[47,5900,272],{"class":134},[47,5902,5903],{"class":186}," \"transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)\"",[47,5905,3769],{"class":149},[47,5907,5908],{"class":49,"line":98},[47,5909,5910],{"class":149},"    });\n",[47,5912,5913,5916,5919],{"class":49,"line":555},[47,5914,5915],{"class":149},"  }, ",[47,5917,5918],{"class":138},"500",[47,5920,3805],{"class":149},[47,5922,5923],{"class":49,"line":3},[47,5924,2584],{"class":149},[17,5926,5927],{},"我这边拿到的需求是需要写一个无限滚动的轮播标题列表，每次展示三个，2 秒后标题列表整体上移，原本的第一个标题就移出可视范围了，下面会新补充一个新的标题列表。（可能解释的不清楚，但各位应该都看过上面的 demo 了）",[17,5929,5930],{},"当列表滚动到最底部的时候，我先取消 transition 过渡动画效果，趁机将整体列表平移到上一次可视范围内出现相同的三个标题的位置，再把 transition 过渡动画的效果加回来，这样就能在视觉上造成无限滚动的效果。",[17,5932,5933],{},"但问题就出在明明把 transition 属性取消了，但这一次平移仍然触发了过渡动画效果。",[17,5935,5936],{},"说实话，这是我短暂的码农生涯当中最绝望的一次，一方面是遇到的 bug 过于逆天以至于说出去都可能没人信，一方面是遇上这种问题是完全不能指望搜索引擎能给出什么解决方案的——毕竟我自己都不知道该怎么组织关键词进行搜索。",[17,5938,5939],{},[688,5940],{"alt":5941,"src":5942},"这是小麦茶，带我入坑前端的学长","https://static.031130.xyz/uploads/2025/06/08/475a61b332454.webp",[17,5944,5945],{},"于是抱着试一试的心态，把相关代码喂给 ChatGPT-4o 看看能不能问出个所以然来。",[1496,5947,5948,5962],{},[17,5949,5950,5951,5954,5955,5958,5959,399],{},"你描述的现象——“",[21,5952,5953],{},"滚动第九次时列表出现突兀的自下而上跳动","，而",[21,5956,5957],{},"打开 F12 时不会出现问题","”——",[21,5960,5961],{},"几乎可以确定是由于浏览器在某些渲染状态下跳过了某些帧（帧率波动）或者定时器精度的问题导致动画突变",[17,5963,5964,5965,5968,5969,5972,5973,5976,5977,399],{},"这种问题多半发生在“使用 ",[30,5966,5967],{},"setInterval"," 控制动画”和“切换样式（transition）时机不当”所引起的 ",[21,5970,5971],{},"过渡跳帧问题","，而打开 DevTools 会 ",[21,5974,5975],{},"强制刷新帧或提高定时器精度","，从而",[21,5978,5979],{},"掩盖了这个问题",[109,5981,5983],{"id":5982},"太好了是-requestanimationframe我们有救了","太好了，是 requestAnimationFrame，我们有救了",[1496,5985,5986,5994],{},[17,5987,5988,5993],{},[21,5989,5990],{},[30,5991,5992],{},"window.requestAnimationFrame()"," 方法会告诉浏览器你希望执行一个动画。它要求浏览器在下一次重绘之前，调用用户提供的回调函数。",[17,5995,5996],{},"——MDN",[17,5998,5999],{},"这是 GPT 给出的方案，非常有效",[38,6001,6003],{"className":1438,"code":6002,"language":1440,"meta":43,"style":43},"if (scrollIndex >= groupLength) {\n  setTimeout(() => {\n    wrapper.style.transition = \"none\";\n    scrollIndex = 0;\n    wrapper.style.transform = `translateY(-${crollIndex * itemHeight}px)`;\n\n    requestAnimationFrame(() => {\n+      requestAnimationFrame(() => {\n         wrapper.style.transition = \"transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)\";\n+      });\n    });\n  }, 500);\n}\n",[30,6004,6005,6010,6015,6020,6025,6030,6034,6039,6044,6049,6054,6058,6063],{"__ignoreMap":43},[47,6006,6007],{"class":49,"line":50},[47,6008,6009],{},"if (scrollIndex >= groupLength) {\n",[47,6011,6012],{"class":49,"line":56},[47,6013,6014],{},"  setTimeout(() => {\n",[47,6016,6017],{"class":49,"line":62},[47,6018,6019],{},"    wrapper.style.transition = \"none\";\n",[47,6021,6022],{"class":49,"line":68},[47,6023,6024],{},"    scrollIndex = 0;\n",[47,6026,6027],{"class":49,"line":74},[47,6028,6029],{},"    wrapper.style.transform = `translateY(-${crollIndex * itemHeight}px)`;\n",[47,6031,6032],{"class":49,"line":80},[47,6033,165],{"emptyLinePlaceholder":164},[47,6035,6036],{"class":49,"line":86},[47,6037,6038],{},"    requestAnimationFrame(() => {\n",[47,6040,6041],{"class":49,"line":92},[47,6042,6043],{},"+      requestAnimationFrame(() => {\n",[47,6045,6046],{"class":49,"line":98},[47,6047,6048],{},"         wrapper.style.transition = \"transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)\";\n",[47,6050,6051],{"class":49,"line":555},[47,6052,6053],{},"+      });\n",[47,6055,6056],{"class":49,"line":3},[47,6057,5910],{},[47,6059,6060],{"class":49,"line":581},[47,6061,6062],{},"  }, 500);\n",[47,6064,6065],{"class":49,"line":602},[47,6066,2584],{},[17,6068,6069],{},"如果觉得嵌套两层 requestAnimationFrame 比较难理解，那下面的代码是等效的",[38,6071,6073],{"className":2186,"code":6072,"language":2188,"meta":43,"style":43},"if (scrollIndex >= groupLength) {\n  setTimeout(() => {\n    scrollIndex = 0;\n\n    requestAnimationFrame(() => {\n      // 第一帧\n      wrapper.style.transition = \"none\";\n      wrapper.style.transform = `translateY(-${crollIndex * itemHeight}px)`;\n      // 第二帧\n      requestAnimationFrame(() => {\n        wrapper.style.transition = \"transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)\";\n      });\n    });\n  }, 500);\n}\n",[30,6074,6075,6085,6095,6105,6109,6119,6124,6134,6153,6158,6169,6180,6185,6189,6197],{"__ignoreMap":43},[47,6076,6077,6079,6081,6083],{"class":49,"line":50},[47,6078,5811],{"class":134},[47,6080,5814],{"class":149},[47,6082,5817],{"class":134},[47,6084,5820],{"class":149},[47,6086,6087,6089,6091,6093],{"class":49,"line":56},[47,6088,5825],{"class":145},[47,6090,572],{"class":149},[47,6092,575],{"class":134},[47,6094,578],{"class":149},[47,6096,6097,6099,6101,6103],{"class":49,"line":62},[47,6098,5848],{"class":149},[47,6100,272],{"class":134},[47,6102,4234],{"class":138},[47,6104,3769],{"class":149},[47,6106,6107],{"class":49,"line":68},[47,6108,165],{"emptyLinePlaceholder":164},[47,6110,6111,6113,6115,6117],{"class":49,"line":74},[47,6112,5887],{"class":145},[47,6114,572],{"class":149},[47,6116,575],{"class":134},[47,6118,578],{"class":149},[47,6120,6121],{"class":49,"line":80},[47,6122,6123],{"class":203},"      // 第一帧\n",[47,6125,6126,6128,6130,6132],{"class":49,"line":86},[47,6127,5898],{"class":149},[47,6129,272],{"class":134},[47,6131,5841],{"class":186},[47,6133,3769],{"class":149},[47,6135,6136,6139,6141,6143,6145,6147,6149,6151],{"class":49,"line":92},[47,6137,6138],{"class":149},"      wrapper.style.transform ",[47,6140,272],{"class":134},[47,6142,5864],{"class":186},[47,6144,5867],{"class":149},[47,6146,5870],{"class":134},[47,6148,5873],{"class":149},[47,6150,5876],{"class":186},[47,6152,3769],{"class":149},[47,6154,6155],{"class":49,"line":98},[47,6156,6157],{"class":203},"      // 第二帧\n",[47,6159,6160,6163,6165,6167],{"class":49,"line":555},[47,6161,6162],{"class":145},"      requestAnimationFrame",[47,6164,572],{"class":149},[47,6166,575],{"class":134},[47,6168,578],{"class":149},[47,6170,6171,6174,6176,6178],{"class":49,"line":3},[47,6172,6173],{"class":149},"        wrapper.style.transition ",[47,6175,272],{"class":134},[47,6177,5903],{"class":186},[47,6179,3769],{"class":149},[47,6181,6182],{"class":49,"line":581},[47,6183,6184],{"class":149},"      });\n",[47,6186,6187],{"class":49,"line":602},[47,6188,5910],{"class":149},[47,6190,6191,6193,6195],{"class":49,"line":617},[47,6192,5915],{"class":149},[47,6194,5918],{"class":138},[47,6196,3805],{"class":149},[47,6198,6199],{"class":49,"line":643},[47,6200,2584],{"class":149},[17,6202,6203],{},"总之，我们需要杜绝浏览器将设置 transform 偏移值（瞬移列表位置）与恢复 transition 动画两件事合并到同一帧里去，而两层嵌套的 requestAnimationFrame 方法能很好的解决这个问题",[4832,6205],{"src":6206,"width":4835,"height":4836,"allowFullScreen":164},"https://static.031130.xyz/demo/scroll-jump-bug-fixed.html",[109,6208,6210],{"id":6209},"驯服量子态前端开发者的新技能","驯服量子态：前端开发者的新技能",[17,6212,6213,6214,6217],{},"就这样，通过使用两层",[30,6215,6216],{},"requestAnimationFrame","，我们成功驯服了这个\"量子态\"的bug。现在无论是否打开F12，它都会乖乖地按照我们的预期滚动，不再玩消失的把戏。",[17,6219,6220,6221,6225,6226,6228],{},"看来，在前端的世界里，我们不仅要懂JavaScript，",[6222,6223,6224],"del",{},"还得懂点量子力学","。下次再遇到这种\"一观测就消失\"的bug，不妨试试这个\"量子纠缠解决方案\"——双重",[30,6227,6216],{},"，没准就能让bug从\"量子态\"坍缩成\"稳定态\"呢！",[17,6230,6231],{},"当然，如果你有更神奇的 debug 经历，欢迎分享你的经历——毕竟，在代码的宇宙里，我们永远不知道下一个bug会以怎样的形态出现。也许，这就是编程的乐趣（？）所在吧！",[1496,6233,6234],{},[17,6235,6236],{},"本文由 ChatGPT 与 DeepSeek 协助撰写，但 bug 是真人真事（泪）。",[109,6238,936],{"id":936},[908,6240,6241,6248,6255],{},[911,6242,6243],{},[708,6244,6247],{"href":6245,"rel":6246},"https://zh.wikipedia.org/wiki/%E8%A7%82%E6%B5%8B%E8%80%85%E6%95%88%E5%BA%94",[712],"观测者效应 - 维基百科，自由的百科全书",[911,6249,6250],{},[708,6251,6254],{"href":6252,"rel":6253},"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame",[712],"Window：requestAnimationFrame() 方法 - Web API | MDN",[911,6256,6257],{},[708,6258,6261],{"href":6259,"rel":6260},"https://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html",[712],"网页性能管理详解 - 阮一峰的网络日志",[954,6263,6264],{},"html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}",{"title":43,"searchDepth":56,"depth":56,"links":6266},[6267,6268,6269,6270,6271],{"id":5757,"depth":56,"text":5758},{"id":5797,"depth":56,"text":5798},{"id":5982,"depth":56,"text":5983},{"id":6209,"depth":56,"text":6210},{"id":936,"depth":56,"text":936},{"title":6273,"date":6274,"path":6275,"tags":6276,"body":6277},"2025 年，如何为 web 页面上展示的视频选择合适的压缩算法？","2025-06-02 20:59:10","/2025/06/02/choosing-the-right-video-compression-format-for-web-in-2025",[3639,1967,1560],{"type":14,"value":6278,"toc":6965},[6279,6282,6286,6290,6293,6298,6303,6309,6315,6318,6323,6327,6330,6337,6340,6346,6350,6360,6365,6368,6371,6374,6378,6381,6388,6391,6394,6397,6400,6403,6639,6643,6646,6652,6659,6663,6674,6761,6767,6770,6774,6781,6787,6793,6797,6800,6806,6809,6812,6815,6818,6827,6829,6962],[17,6280,6281],{},"事情的起因是需要在网页上展示一个时长约为 5 分钟的产品展示视频，拿到的 H264 编码的原文件有 60MB 大。高达 1646 Kbps 码率的视频文件通过网络传输，烧 cdn 流量费用不说，对于弱网环境下的用户体验也绝对不会好。因此必须在兼顾浏览器兼容性（太好了不用管 IE）的情况下，使用更现代的视频压缩算法进行压缩。",[109,6283,6285],{"id":6284},"哪些压缩算法是目前的主流","哪些压缩算法是目前的主流？",[1056,6287,6289],{"id":6288},"av1","AV1",[17,6291,6292],{},"AV1 作为目前压缩效率最高的主流视频编码格式，在 2025 年的今天已经在 YouTube、Netflix、Bilibili 等视频网站全面铺开，毫无疑问是最值得优先考虑的选择；除了优异的压缩效率以外，AV1 免版税的优势使得各硬件厂商和浏览器内核开发者可以无所顾忌的将 AV1 编码的支持添加到自己的产品中。",[17,6294,6295],{},[688,6296],{"alt":43,"src":6297},"https://static.031130.xyz/uploads/2025/06/02/aec1af1718064.webp",[17,6299,6300],{},[688,6301],{"alt":43,"src":6302},"https://static.031130.xyz/uploads/2025/06/02/76a312b5a668b.webp",[17,6304,6305,6306],{},"可惜的是，Safari 并没有对 AV1 编码添加软解支持，只有在搭载 Apple M3 及后续生产的 Mac 和 iPhone 15 Pro 后续的机型才拥有硬解 AV1 的能力，在此之前生产的产品均无法使用 Safari 播放 AV1 编码的视频。",[6222,6307,6308],{},"我宣布 Safari 已经成为当代 IE，妥妥阻碍 Web 发展的绊脚石",[17,6310,6311],{},[688,6312],{"alt":6313,"src":6314},"Safari 在搭载 M2Pro 处理器的 Macbook Pro 上直接罢工了","https://static.031130.xyz/uploads/2025/06/02/01ddcc3948406.webp",[17,6316,6317],{},"除此之外，AV1 在压制视频时对设备的要求较高。在桌面端的消费级显卡中，目前只有 NVIDIA RTX 40 系、AMD Radeon RX 7000 系、IntelArc A380 及后续的产品拥有 AV1 的编码（encode）支持。而 Apple M 系列芯片至今没有任何一款产品拥有对 AV1 编码的硬件支持。这也导致我在我搭载 Intel Core i7-1165G7 的 ThinkPad 上使用 AV1 编码压缩视频时被迫使用 libaom-av1 进行软件编码，1080p 的视频压缩效率为 0.0025x 的速率，五分钟的视频要压一天多的时间。",[17,6319,6320],{},[688,6321],{"alt":43,"src":6322},"https://static.031130.xyz/uploads/2025/06/02/923ca02e1d835.webp",[1056,6324,6326],{"id":6325},"h265-hevc","H.265 / HEVC",[17,6328,6329],{},"作为 H.264 / AVC 的下一代继任者，H.265（又称 HEVC）的表现可谓是一手好牌打得稀巴烂。HEVC 由多个专利池（如 MPEG LA、HEVC Advance 和 Velos Media）管理，授权费用高且分散，昂贵的专利授权费用严重限制了它的普及速度和范围，尤其是在开放生态和网页端应用中。",[17,6331,6332,6333,6336],{},"Chromium / Firefox 不愿意当承担专利授权费的冤大头，拒绝在当今世界最大的两个开源浏览器内核中添加默认的 H.265 软解支持，目前主流浏览器普遍采用",[21,6334,6335],{},"能硬解就硬解，硬解不了就摆烂","的支持策略。Firefox on Linux 倒是另辟蹊径，不仅会尝试使用硬解，还会尝试使用用户在电脑上装的 ffmpeg 软解曲线救国。不过好在毕竟是 2013 年就确定的标准，现在大部分硬件厂商都集体被摁着脖子交了专利授权费以保证产品竞争力，Apple 更是 HEVC 的一等公民，保证了全系产品的 HEVC 解码能力。",[17,6338,6339],{},"目前未覆盖到的场景主要是 Chromium / Firefox on Windows 7 和 Chromium on Linux（包括 UOS、麒麟等一众国产 Linux 发行版）。",[17,6341,6342],{},[688,6343],{"alt":6344,"src":6345},"在 Linux 上不支持硬解 H.265 的 Chrome 直接把视频当作音频播放了","https://static.031130.xyz/uploads/2025/06/02/2e8e5100f645a.webp",[1056,6347,6349],{"id":6348},"vp9","VP9",[17,6351,6352,6353,6356,6357],{},"VP9 是 Google 于 2013 年推出的视频编码格式，作为 H.264 的继任者之一，在压缩效率上接近 H.265（HEVC），但最大的杀手锏是——",[21,6354,6355],{},"彻底免专利费","。这也让 VP9 成为 Google 对 HEVC 高额授权费用的掀桌式回应：",[21,6358,6359],{},"你们慢慢吃，我开一桌免费的。",[17,6361,6362],{},[688,6363],{"alt":43,"src":6364},"https://static.031130.xyz/uploads/2025/06/03/a9b473a3bd120.webp",[17,6366,6367],{},"借着免专利的东风和 Google 自家产品矩阵的强推，VP9 在 YouTube、WebRTC 乃至 Chrome 浏览器中迅速站稳了脚跟。特别是在 AV1 普及之前，VP9 几乎是网页视频播放领域的事实标准，甚至逼得苹果这个“编解码俱乐部元老”在 macOS 11 Big Sur 和 iOS 14 上的 Safari 破天荒地加入了 VP9 支持（尽管 VP9 in webm 的支持稍晚一些，具体见上表）。",[17,6369,6370],{},"VP9 的软解码支持基本无死角：Chromium、Firefox、Edge 都原生支持，Safari 也一反常态地“从了”。硬件解码方面，从 Intel Skylake（第六代酷睿）开始，NVIDIA GTX 950 及以上、AMD Vega 和 RDNA 系显卡基本都具备完整的 VP9 解码能力——总之，只要不是博物馆级别的老电脑，就能愉快播放 VP9 视频。",[17,6372,6373],{},"当然，编码仍是 VP9 的短板。Google 官方提供的开源实现 libvpx，速度比不上 x264/x265 等老牌选手，在缺乏硬件加速的场景下，仍然属于“关机前压一宿”的那种体验。不过相比 AV1 的 libaom-av1，VP9 至少还能算“可用”，适合轻量化应用、实时通信或是对压制速度敏感的用户，而早在 7 代 Intel 的 Kaby Lake 系列产品就已经引入了 VP9 的硬件编码支持，各家硬件厂商对 VP9 硬件编码的支持发展到今天还算不错。",[1056,6375,6377],{"id":6376},"h264-avc","H.264 / AVC",[17,6379,6380],{},"作为“老将出马一个顶俩”的代表，H.264 / AVC 无疑是过去二十年视频编码领域的霸主。自 2003 年标准确定以来，凭借良好的压缩效率、广泛的硬件支持和相对合理的专利授权策略，H.264 迅速成为从网络视频、蓝光光盘到直播、监控乃至手机录像的默认选择。如果你打开一个视频网站的视频流、下载一个在线视频、剪辑一个 vlog，大概率都绕不开 H.264 的身影。",[17,6382,6383,6384,6387],{},"H.264 的最大优势在于——",[21,6385,6386],{},"兼容性无敌","。不夸张地说，只要是带屏幕的设备，就能播放 H.264 视频。软解？早在十几年前的浏览器和媒体播放器中就已普及；硬解？从 Intel Sandy Bridge、NVIDIA Fermi、AMD VLIW4 这些“史前”架构开始就已加入对 H.264 的完整支持——你甚至可以在树莓派、智能冰箱上流畅播放 H.264 视频。",[17,6389,6390],{},"虽然 H.264 同样存在和 H.265 相同的专利问题，但其授权策略明显更温和——MPEG LA 提供的专利池授权门槛较低，且不向免费网络视频收取费用，使得包括 Chromium、Firefox 在内的浏览器都默认集成了 H.264 的软解功能。Apple 和 Microsoft 更是早早将其作为视频编码和解码的第一公民，Safari 和 Edge 天生支持 H.264，不存在任何兼容性烦恼。",[17,6392,6393],{},"当然，作为一项 20 多年前的技术，H.264 在压缩效率上已经明显落后于 VP9、HEVC 和 AV1。相同画质下，H.264 的码率要比 AV1 高出 30～50%，在追求极致带宽利用或存储节省的应用场景中就显得有些力不从心。然而在今天这个“能播比好看更重要”的现实环境中，H.264 依然是默认方案，是“稳健老哥”的代名词。",[17,6395,6396],{},"所以，即便 AV1、HEVC、VP9 各有亮点，H.264 依旧凭借“老、稳、全”三大核心竞争力，在 2025 年依然牢牢占据着视频生态链的中枢地位——只要这个世界还有浏览器不支持 AV1（可恶的 Safari 不支持软解），服务器不想烧钱转码视频，或用户设备太老，H.264 就不会退场。",[1056,6398,6399],{"id":6399},"小结",[17,6401,6402],{},"在视频编码方面，浏览器不再是那个能靠一己之力抹平硬件和系统差异的超人，所以总有一些特殊情况是表格中无法涵盖的。",[6404,6405,6406,6431],"table",{},[6407,6408,6409],"thead",{},[6410,6411,6412,6416,6419,6422,6425,6428],"tr",{},[6413,6414,6415],"th",{},"编解码器",[6413,6417,6418],{},"压缩效率",[6413,6420,6421],{},"浏览器",[6413,6423,6424],{},"桌面端支持",[6413,6426,6427],{},"移动端支持",[6413,6429,6430],{},"备注",[6432,6433,6434,6453,6469,6492,6513,6530,6547,6563,6577,6594,6611,6625],"tbody",{},[6410,6435,6436,6439,6442,6445,6448,6450],{},[6437,6438,6289],"td",{},[6437,6440,6441],{},"★★★",[6437,6443,6444],{},"Chrome / Chromium",[6437,6446,6447],{},"是 (v70+，发布于 2018 年 10 月)",[6437,6449,6447],{},[6437,6451,6452],{},"硬解优先，软解后备",[6410,6454,6455,6457,6459,6461,6464,6467],{},[6437,6456],{},[6437,6458],{},[6437,6460,969],{},[6437,6462,6463],{},"是 (v67+，发布于 2019 年 5 月)",[6437,6465,6466],{},"是 (v113+，发布于 2023 年 5 月)",[6437,6468,6452],{},[6410,6470,6471,6473,6475,6478,6481,6483],{},[6437,6472],{},[6437,6474],{},[6437,6476,6477],{},"Safari",[6437,6479,6480],{},"不完全支持 (仅近两年的产品支持)",[6437,6482,6480],{},[6437,6484,6485,6488,6489],{},[21,6486,6487],{},"仅支持硬解"," (M3, A17 Pro 系芯片后开始支持)，",[21,6490,6491],{},"无软解支持",[6410,6493,6494,6497,6500,6502,6505,6507],{},[6437,6495,6496],{},"HEVC (H.265)",[6437,6498,6499],{},"★★☆",[6437,6501,6444],{},[6437,6503,6504],{},"不完全支持",[6437,6506,6504],{},[6437,6508,6509,6512],{},[21,6510,6511],{},"仅支持硬解，无软解支持","（Windows 可从微软商店安装付费的软解插件）",[6410,6514,6515,6517,6519,6521,6523,6525],{},[6437,6516],{},[6437,6518],{},[6437,6520,969],{},[6437,6522,6504],{},[6437,6524,6504],{},[6437,6526,6527,6529],{},[21,6528,6511],{},"（Linux 可依赖系统 ffmpeg 实现软解）",[6410,6531,6532,6534,6536,6538,6541,6544],{},[6437,6533],{},[6437,6535],{},[6437,6537,6477],{},[6437,6539,6540],{},"近期设备全部支持 (macOS High Sierra+，发布于 2017 年 6 月)",[6437,6542,6543],{},"近期设备全部支持 (iOS 11+，发布于 2017 年 10 月)",[6437,6545,6546],{},"苹果是 H.265 一等公民",[6410,6548,6549,6551,6553,6555,6558,6560],{},[6437,6550,6349],{},[6437,6552,6499],{},[6437,6554,6444],{},[6437,6556,6557],{},"是",[6437,6559,6557],{},[6437,6561,6562],{},"支持良好",[6410,6564,6565,6567,6569,6571,6573,6575],{},[6437,6566],{},[6437,6568],{},[6437,6570,969],{},[6437,6572,6557],{},[6437,6574,6557],{},[6437,6576,6562],{},[6410,6578,6579,6581,6583,6585,6588,6591],{},[6437,6580],{},[6437,6582],{},[6437,6584,6477],{},[6437,6586,6587],{},"是 (v14.1+，发布于 2021 年 4 月)",[6437,6589,6590],{},"是 (iOS 17.4+，发布于 2024 年 3 月)",[6437,6592,6593],{},"支持稍晚（此处指兼容 vp9 的 webm 时间，vp9 in WebRTC 的兼容时间更早）",[6410,6595,6596,6599,6602,6604,6606,6608],{},[6437,6597,6598],{},"H.264 (AVC)",[6437,6600,6601],{},"★☆☆",[6437,6603,6444],{},[6437,6605,6557],{},[6437,6607,6557],{},[6437,6609,6610],{},"通用",[6410,6612,6613,6615,6617,6619,6621,6623],{},[6437,6614],{},[6437,6616],{},[6437,6618,969],{},[6437,6620,6557],{},[6437,6622,6557],{},[6437,6624,6610],{},[6410,6626,6627,6629,6631,6633,6635,6637],{},[6437,6628],{},[6437,6630],{},[6437,6632,6477],{},[6437,6634,6557],{},[6437,6636,6557],{},[6437,6638,6610],{},[109,6640,6642],{"id":6641},"怎么选","怎么选？",[17,6644,6645],{},"我们不是专业的视频托管平台，不像 YouTube、Bilibili 那样专业到可以向用户提供多种分辨率、压缩算法的选择。",[17,6647,6648],{},[688,6649],{"alt":6650,"src":6651},"Bilibili 为用户提供了三种压缩算法的视频源","https://static.031130.xyz/uploads/2025/06/03/096484dbc0f3a.webp",[17,6653,6654,6655,6658],{},"最终的选择策略，必须在",[21,6656,6657],{},"压缩效率、播放兼容性、编码耗时","等维度之间做出权衡。",[1056,6660,6662],{"id":6661},"选择一av1-挑大梁h264-保兼容","选择一：AV1 挑大梁，H.264 保兼容",[17,6664,6665,6666,6669,6670,6673],{},"现代浏览器支持在 ",[30,6667,6668],{},"\u003Cvideo>"," 标签中使用 ",[30,6671,6672],{},"\u003Csource>"," 标签和 MIME type 让浏览器按需播放",[38,6675,6679],{"className":6676,"code":6677,"language":6678,"meta":43,"style":43},"language-html shiki shiki-themes github-light github-dark","\u003Cvideo controls poster=\"preview.jpg\">\n  \u003Csource src=\"video.av1.webm\" type='video/webm; codecs=\"av01\"' />\n  \u003Csource src=\"video.h264.mp4\" type='video/mp4' />\n  当前浏览器不支持视频播放\n\u003C/video>\n","html",[30,6680,6681,6701,6726,6748,6753],{"__ignoreMap":43},[47,6682,6683,6685,6688,6691,6694,6696,6699],{"class":49,"line":50},[47,6684,546],{"class":149},[47,6686,6687],{"class":3095},"video",[47,6689,6690],{"class":145}," controls",[47,6692,6693],{"class":145}," poster",[47,6695,272],{"class":149},[47,6697,6698],{"class":186},"\"preview.jpg\"",[47,6700,3099],{"class":149},[47,6702,6703,6705,6708,6711,6713,6716,6719,6721,6724],{"class":49,"line":56},[47,6704,3104],{"class":149},[47,6706,6707],{"class":3095},"source",[47,6709,6710],{"class":145}," src",[47,6712,272],{"class":149},[47,6714,6715],{"class":186},"\"video.av1.webm\"",[47,6717,6718],{"class":145}," type",[47,6720,272],{"class":149},[47,6722,6723],{"class":186},"'video/webm; codecs=\"av01\"'",[47,6725,3118],{"class":149},[47,6727,6728,6730,6732,6734,6736,6739,6741,6743,6746],{"class":49,"line":62},[47,6729,3104],{"class":149},[47,6731,6707],{"class":3095},[47,6733,6710],{"class":145},[47,6735,272],{"class":149},[47,6737,6738],{"class":186},"\"video.h264.mp4\"",[47,6740,6718],{"class":145},[47,6742,272],{"class":149},[47,6744,6745],{"class":186},"'video/mp4'",[47,6747,3118],{"class":149},[47,6749,6750],{"class":49,"line":68},[47,6751,6752],{"class":149},"  当前浏览器不支持视频播放\n",[47,6754,6755,6757,6759],{"class":49,"line":74},[47,6756,3123],{"class":149},[47,6758,6687],{"class":3095},[47,6760,3099],{"class":149},[17,6762,6763,6764,6766],{},"通过这样的写法，浏览器会自动选择最先能解码的 ",[30,6765,6707],{},"，无需写复杂的判断逻辑或使用 JavaScript 动态切换。默认的 AV1 编码在最大程度上减少了传输流量降低成本，享受现代浏览器与设备的压缩红利；而 H.264 则作为兜底方案，保证了在不支持 AV1 的 Safari 等老旧设备上的回放兼容性。",[17,6768,6769],{},"然而这个选择可能并不是太合适，一方面我手上最先进的处理器 Apple M4 并不支持硬件编码 AV1 视频，5 分钟的视频压完需要整整 3 个小时，如果还需要视压缩质量来回调整压缩参数重新压上几次，那可真是遭老罪了；另一方面，即使 Chromium / Firefox 等主流浏览器内核现在都支持 AV1 的软解，但在一些硬件较老的设备上播放 AV1 编码的视频可能让用户的电脑风扇原地起飞，这一点在 YouTube 大力推广 AV1 的时候就曾遭到不少用户的诟病。",[1056,6771,6773],{"id":6772},"选择二vp9-独挑大梁","选择二：VP9 独挑大梁",[17,6775,6776,6777,6780],{},"考虑到 AV1 编码的高昂成本和",[6222,6778,6779],{},"用户电脑风扇原地起飞的风险","，VP9 也是一个非常具有竞争力的选择。VP9 在主流浏览器中得到了非常好的兼容，因此可以考虑放弃 H.264 的 fallback 方案独挑大梁。而 VP9 硬件编码在近几年的硬件设备上的普遍支持也给足了我勇气，让我可以多次调整压缩质量重新压缩，找一个在文件体积和画面清晰度之间的 sweet point。",[17,6782,6783],{},[6784,6785,6786],"em",{},"由于是 VP9 独挑大梁，因此大多数人可能会考虑使用与 VP9 最为适配的 webm 格式封装视频。但目前在 webm 中最广泛使用的音频编码 opus 在 Safari 上的兼容性并不是太好（在 2024 年 3 月发布的 Safari 17.4 才开始支持），建议斟酌一下是不是继续用回 AAC 编码，并将视频封装在 mp4 中。",[17,6788,6789],{},[688,6790],{"alt":6791,"src":6792},"https://caniuse.com/opus","https://static.031130.xyz/uploads/2025/06/03/ec3b5dbcbcc29.webp",[109,6794,6796],{"id":6795},"音频码率太高再砍一刀","音频码率太高？再砍一刀",[17,6798,6799],{},"上面说了那么多的视频压缩算法，其实只是局限于视频画面的压缩，音频这一块其实还能再压一点出来。",[38,6801,6804],{"className":6802,"code":6803,"language":2606},[5469],"Stream #0:1[0x2](und): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, stereo, fltp, 128 kb/s (default)\n",[30,6805,6803],{"__ignoreMap":43},[17,6807,6808],{},"一个介绍产品的视频，在音频部分采用了 48000 Hz 双声道采样，码率高达 128 kbps，说实话有点奢侈。我直接砍成 64 kbps 单声道，又省下 2MB 的文件大小。",[109,6810,6811],{"id":6811},"写在最后",[17,6813,6814],{},"对于前端开发者来说，视频压缩算法的选择早已不是单纯的“压得小不小”问题，而是一场在设备能力、浏览器兼容性、用户体验与开发成本之间的博弈。我们既要跟上技术演进的节奏，拥抱 AV1、VP9 等更高效的编解码器，也要在实际项目中照顾到现实中的设备分布和播放环境。",[17,6816,6817],{},"在理想与落地之间，我们所能做的，就是充分利用 HTML5 提供的容错机制，搭配好合适的编码策略和封装格式，让网页上的每一段视频都能在合适的设备上、以合理的代价播放出来。",[17,6819,6820,6821,6823,6824,6826],{},"毕竟，Web 从来不缺“能不能做”，缺的是“做得优雅”。如果说编码器是硬件工程师和视频平台的战场，那 ",[30,6822,6668],{}," 标签下的这几行 ",[30,6825,6672],{},"，才是属于我们前端工程师的战壕。",[109,6828,936],{"id":936},[908,6830,6831,6838,6845,6852,6859,6866,6873,6880,6886,6893,6900,6907,6914,6921,6928,6935,6945,6952,6959],{},[911,6832,6833],{},[708,6834,6837],{"href":6835,"rel":6836},"https://developer.mozilla.org/zh-CN/docs/Web/Media/Guides/Formats/Video_codecs",[712],"网页视频编码指南 - Web 媒体技术 | MDN",[911,6839,6840],{},[708,6841,6844],{"href":6842,"rel":6843},"https://research.netflix.com/research-area/video-encoding-and-quality",[712],"Encoding & Quality - Netflix Research",[911,6846,6847],{},[708,6848,6851],{"href":6849,"rel":6850},"https://optiview.dolby.com/resources/blog/playback/how-the-vp9-codec-supports-now-streaming-to-apple-devices-more/",[712],"How the VP9 Codec Supports Now Streaming to Apple Devices & More | dolby.io",[911,6853,6854],{},[708,6855,6858],{"href":6856,"rel":6857},"https://www.chromium.org/audio-video/",[712],"Audio/Video | The Chromium Project",[911,6860,6861],{},[708,6862,6865],{"href":6863,"rel":6864},"https://caniuse.com/av1",[712],"AV1 video format | Can I use... Support tables for HTML5, CSS3, etc",[911,6867,6868],{},[708,6869,6872],{"href":6870,"rel":6871},"https://caniuse.com/webm",[712],"WebM video format | Can I use... Support tables for HTML5, CSS3, etc",[911,6874,6875],{},[708,6876,6879],{"href":6877,"rel":6878},"https://caniuse.com/hevc",[712],"HEVC/H.265 video format | Can I use... Support tables for HTML5, CSS3, etc",[911,6881,6882],{},[708,6883,6885],{"href":6791,"rel":6884},[712],"Opus audio format | Can I use... Support tables for HTML5, CSS3, etc",[911,6887,6888],{},[708,6889,6892],{"href":6890,"rel":6891},"https://caniuse.com/mpeg4",[712],"MPEG-4/H.264 video format | Can I use... Support tables for HTML5, CSS3, etc",[911,6894,6895],{},[708,6896,6899],{"href":6897,"rel":6898},"https://en.wikipedia.org/wiki/AV1",[712],"AV1 - Wikipedia",[911,6901,6902],{},[708,6903,6906],{"href":6904,"rel":6905},"https://en.wikipedia.org/wiki/High_Efficiency_Video_Coding",[712],"High Efficiency Video Coding - Wikipedia",[911,6908,6909],{},[708,6910,6913],{"href":6911,"rel":6912},"https://en.wikipedia.org/wiki/VP9",[712],"VP9 - Wikipedia",[911,6915,6916],{},[708,6917,6920],{"href":6918,"rel":6919},"https://en.wikipedia.org/wiki/Advanced_Video_Coding",[712],"Advanced Video Coding - Wikipedia",[911,6922,6923],{},[708,6924,6927],{"href":6925,"rel":6926},"https://www.intel.com/content/www/us/en/developer/articles/technical/encode-and-decode-capabilities-for-7th-generation-intel-core-processors-and-newer.html",[712],"Encode and Decode Capabilities for 7th Generation Intel® Core™...",[911,6929,6930],{},[708,6931,6934],{"href":6932,"rel":6933},"https://zh.wikipedia.org/zh-cn/MacOS_High_Sierra",[712],"macOS High Sierra - 维基百科，自由的百科全书",[911,6936,6937],{},[708,6938,6941,6942],{"href":6939,"rel":6940},"https://www.androidpolice.com/2018/10/17/chrome-70-adds-av1-video-support-improves-pwas-windows-apk-download/",[712],"Chrome 70 adds AV1 video support, improves PWAs on Windows, and more ",[47,6943,6944],{},"APK Download",[911,6946,6947],{},[708,6948,6951],{"href":6949,"rel":6950},"https://www.mozilla.org/en-US/firefox/android/113.0/releasenotes/",[712],"Firefox for Android 113.0, See All New Features, Updates and Fixes",[911,6953,6954],{},[708,6955,6958],{"href":6956,"rel":6957},"https://www.bilibili.com/video/BV1nW4y1V7kR/",[712],"视频网站的“蓝光”是怎么骗你的？——视频画质全解析【柴知道】_哔哩哔哩_bilibili",[911,6960,6961],{},"《4K 清晰度不如4年前，视频变糊是你的错觉吗》- 原视频已 404",[954,6963,6964],{},"html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":43,"searchDepth":56,"depth":56,"links":6966},[6967,6974,6978,6979,6980],{"id":6284,"depth":56,"text":6285,"children":6968},[6969,6970,6971,6972,6973],{"id":6288,"depth":62,"text":6289},{"id":6325,"depth":62,"text":6326},{"id":6348,"depth":62,"text":6349},{"id":6376,"depth":62,"text":6377},{"id":6399,"depth":62,"text":6399},{"id":6641,"depth":56,"text":6642,"children":6975},[6976,6977],{"id":6661,"depth":62,"text":6662},{"id":6772,"depth":62,"text":6773},{"id":6795,"depth":56,"text":6796},{"id":6811,"depth":56,"text":6811},{"id":936,"depth":56,"text":936},{"title":6982,"date":6983,"path":6984,"tags":6985,"body":6986},"el-image 和 el-table 怎么就打架了？Stacking Context 是什么？","2025-05-31 00:29:40","/2025/05/31/el-image-and-el-table-why-the-fight-and-what-is-a-stacking-context",[1964,12,4878,3639,1967],{"type":14,"value":6987,"toc":7203},[6988,6991,6997,7004,7006,7009,7014,7017,7022,7060,7063,7067,7070,7073,7085,7088,7092,7095,7124,7128,7132,7135,7138,7141,7144,7154,7161,7163,7200],[17,6989,6990],{},"这是精弘内部的图床开发时遇到的事情，大一的小朋友反馈说 el-image 和 el-table 打架了。",[17,6992,6993],{},[688,6994],{"alt":6995,"src":6996},"截图","https://static.031130.xyz/uploads/2025/05/31/c6674f6f13955.webp",[17,6998,6999,7003],{},[708,7000,5769],{"href":7001,"rel":7002},"https://static.031130.xyz/demo/el-image-el-table-conflict.html",[712]," 的 iframe 引入",[4832,7005],{"src":7001,"width":4835,"height":4836,"allowFullScreen":164},[17,7007,7008],{},"看到后面的表格透出 el-image 的预览层，我的第一反应是叫小朋友去检查 z-index 是否正确，el-image 的 mask 遮罩的 z-index 是否大于表格。",[17,7010,7011],{},[688,7012],{"alt":43,"src":7013},"https://static.031130.xyz/uploads/2025/05/31/1c20b4ea0b37e.webp",[17,7015,7016],{},"经过我本地调试，发现 z-index 的设置确实没问题，但后面的元素为什么会透出来？谷歌搜索一番，找到了这篇文章",[17,7018,7019],{},[688,7020],{"alt":43,"src":7021},"https://static.031130.xyz/uploads/2025/05/31/99845899e3524.webp",[1496,7023,7024,7027],{},[17,7025,7026],{},"给 el-table 加一行如下代码即可",[38,7028,7032],{"className":7029,"code":7030,"language":7031,"meta":43,"style":43},"language-css shiki shiki-themes github-light github-dark",".el-table__cell {\n    position: static !important;\n}\n","css",[30,7033,7034,7041,7056],{"__ignoreMap":43},[47,7035,7036,7039],{"class":49,"line":50},[47,7037,7038],{"class":145},".el-table__cell",[47,7040,578],{"class":149},[47,7042,7043,7046,7048,7051,7054],{"class":49,"line":56},[47,7044,7045],{"class":138},"    position",[47,7047,2352],{"class":149},[47,7049,7050],{"class":138},"static",[47,7052,7053],{"class":134}," !important",[47,7055,3769],{"class":149},[47,7057,7058],{"class":49,"line":62},[47,7059,2584],{"class":149},[17,7061,7062],{},"经本地调试确认，这一方案确实能解决问题，但为什么呢？这就涉及到 Stacking Context （层叠上下文）了。",[109,7064,7066],{"id":7065},"stacking-context层叠上下文究竟是什么","Stacking Context（层叠上下文）究竟是什么？",[17,7068,7069],{},"简单来说，Stacking Context 可以被类比成画布。在同一块画布上，z-index 值越高的元素就处于越上方，会覆盖掉 z-index 较低的元素，这也是为什么我最开始让检查 z-index 的设置是否有问题。但问题出在 Stacking Context 也是有上下顺序之分的。",[17,7071,7072],{},"现在假设我们有 A、B 两块画布，在 A 上有一个设置了 z-index 为 1145141919810 的元素。那这个元素具备非常高的优先级，理应出现在浏览器窗口的最上方。但如果 B 画布的优先级高于 A 画布，那么 B 元素上的所有元素都会优先显示（当了躺赢狗）。那么画布靠什么来决定优先级呢？",[908,7074,7075,7080],{},[911,7076,7077],{},[21,7078,7079],{},"处于同级的 Stacking Context 之间靠 z-index 值来区分优先级",[911,7081,7082],{},[21,7083,7084],{},"对于 z-index 值相同的 Stacking Context，在 html 文档中位置靠后的元素拥有更高的优先级",[17,7086,7087],{},"第二条规则也能解释为什么在上面的 demo 中，只有在表格中位置排在图片元素后面的元素出现了透出来的情况。",[109,7089,7091],{"id":7090},"所以为什么-el-image-和-el-table-打架了","所以为什么 el-image 和 el-table 打架了？",[17,7093,7094],{},"这次的冲突主要是下面两个因素引起的",[1102,7096,7097,7113],{},[911,7098,7099,7100,7103,7104,7106,7110,7112],{},"el-table 给每个 cell 都设置了 ",[30,7101,7102],{},"position: relative"," 的 css 属性，而 position 被设为 relative 时，当前元素就会生成一个 Stacking Context。",[5425,7105],{},[688,7107],{"alt":7108,"src":7109},"image-20250531013029154","https://static.031130.xyz/uploads/2025/05/31/9df43b865b3c6.webp",[5425,7111],{},"所以我们这么一个有十个格子的表格，其实就生成了十个画布。而这其中每个画布 z-index 都为 1。根据刚才的规则，在图片格子后面的那些格子对应的 html 代码片段在整体的 html 文档中更靠后，所以他们的优先级都高于图片格子。",[911,7114,7115,7116,7118,7121,7123],{},"el-image 的预览功能所展开的遮罩层处于 el-image 标签内部",[5425,7117],{},[688,7119],{"alt":43,"src":7120},"https://static.031130.xyz/uploads/2025/05/31/f18a2b54afd63.webp",[5425,7122],{},"上图中橙色部分是 el-image 在预览时提供的遮罩，可以看到 element-plus 组件的 image 预览的默认行为是将预览时所需要的遮罩层直接放在 \u003Cel-image> \u003C/el-image> 标签内部，这导致 el-image 的遮罩层被困在一个低优先级的 Stacking Context 中，后面的格子里的内容就是能凭借高优先级透过来。",[109,7125,7127],{"id":7126},"所以解决方案是什么","所以解决方案是什么？",[1056,7129,7131],{"id":7130},"更改-position-值在这里确实是可行的","更改 position 值在这里确实是可行的",[17,7133,7134],{},"上面我谷歌搜到的将 el-table 中 cell 的 position 值强制设为 static 确实是有效的，因为 static 不会创建新的 Stacking Context，这样就不会有现在的问题。",[1056,7136,7137],{"id":7137},"将需要出现在最顶层的代码放置在优先级最大的位置是更常见的方案",[17,7139,7140],{},"但别的组件库在处理这个需求时，一般会将预览时提供的遮罩的 html 代码片段直接插入到 body 标签内部的最尾部，并设置一个相对比较大的 z-index 值，以确保这个遮罩层能够获得最高的优先级，以此能出现在屏幕的最上方。（像一些 dialog 对话框、popover 悬浮框也都是这个原理）。",[17,7142,7143],{},"事实上，element-plus 组件库也提供了这个功能",[1496,7145,7146],{},[17,7147,7148,7151,7152],{},[21,7149,7150],{},"preview-teleported:"," image-viewer 是否插入至 body 元素上。嵌套的父元素属性会发生修改时应该将此属性设置为 ",[30,7153,4353],{},[17,7155,7156,7157,7160],{},"所以在使用 el-image 时传入一个 ",[30,7158,7159],{},":preview-teleported=\"true\""," 是一个更普适的方案，因为我们并不能确保 el-image 的父元素除了 el-table 的 cell 以外还有什么其他的父元素会创建新的 Stacking Context。",[109,7162,936],{"id":936},[908,7164,7165,7172,7179,7186,7193],{},[911,7166,7167],{},[708,7168,7171],{"href":7169,"rel":7170},"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_positioned_layout/Stacking_context",[712],"层叠上下文 - CSS：层叠样式表 | MDN",[911,7173,7174],{},[708,7175,7178],{"href":7176,"rel":7177},"https://juejin.cn/post/6844903667175260174",[712],"彻底搞懂CSS层叠上下文、层叠等级、层叠顺序、z-index最近，在项目中遇到一个关于CSS中元素z-index属性的问 - 掘金",[911,7180,7181],{},[708,7182,7185],{"href":7183,"rel":7184},"https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/",[712],"深入理解CSS中的层叠上下文和层叠顺序 «  张鑫旭-鑫空间-鑫生活",[911,7187,7188],{},[708,7189,7192],{"href":7190,"rel":7191},"https://element-plus.org/zh-CN/component/image.html",[712],"Image 图片 | Element Plus",[911,7194,7195],{},[708,7196,7199],{"href":7197,"rel":7198},"https://blog.csdn.net/qq_61402485/article/details/131202117",[712],"element ui e-image 和e-table一起使用显示问题_el-table el-image-CSDN博客",[954,7201,7202],{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":43,"searchDepth":56,"depth":56,"links":7204},[7205,7206,7207,7211],{"id":7065,"depth":56,"text":7066},{"id":7090,"depth":56,"text":7091},{"id":7126,"depth":56,"text":7127,"children":7208},[7209,7210],{"id":7130,"depth":62,"text":7131},{"id":7137,"depth":62,"text":7137},{"id":936,"depth":56,"text":936},127,1761699271874]