[{"data":1,"prerenderedAt":382},["ShallowReactive",2],{"post-2023-12-27-php-and-vuejs-project-deploy-on-caddy":3,"surround-2023-12-27-php-and-vuejs-project-deploy-on-caddy":370,"randomIndex/2023/12/27/php-and-vuejs-project-deploy-on-caddy/":381},{"id":4,"title":5,"body":6,"date":353,"description":53,"extension":354,"meta":355,"navigation":356,"path":357,"rawbody":358,"seo":359,"stem":360,"sticky":361,"tags":362,"__hash__":369},"posts/posts/php-and-vuejs-project-deploy-on-caddy.md","vuejs、php、caddy 与 docker —— web 期末大作业上云部署",{"type":7,"value":8,"toc":345},"minimark",[9,29,33,44,47,89,98,115,122,193,208,213,216,223,231,234,237,244,270,273,276,287,291,294,300,323,327,334,341],[10,11,12,16,23,26],"blockquote",{},[13,14,15],"p",{},"这学期修了一门叫《用HTML5 和 PHP编写JavaScript，jQuery 和 AJAX脚本》的 web 课（对，听起来很奇怪的名字）。期末大作业是写一个影评系统，前端允许使用框架，后端仅允许使用 php，具体的作业要求如下",[13,17,18],{},[19,20],"img",{"alt":21,"src":22},"作业要求","https://static.031130.xyz/uploads/2024/08/12/658c4c3128ae4.webp",[13,24,25],{},"（源码会在验收结束以后开源）",[13,27,28],{},"大作业写了得要有三个礼拜，工作时长加起来得有 30 个小时，想着验收之前上线一段时间积累一些评论数据，验收的时候也会更加顺利一些，于是就开始尝试在服务器上部署。部署的过程还是比较复杂的，所以写下这篇博客记录一下。",[30,31,32],"h2",{"id":32},"后端部分",[13,34,35,36,43],{},"早前有",[37,38,42],"a",{"href":39,"rel":40},"https://zhul.in/2021/10/21/picuploader-on-archlinux-with-caddy/",[41],"nofollow","《PicUploader使用系列（一）——在Archlinux上使用Caddy部署PicUploader》","的经验，便觉得使用 Caddy + php-fpm 部署的方式多少有点麻烦了，这次便尝试了使用 Docker 部署、Caddy 反代的方式。",[13,45,46],{},"Dockerfile 如下:",[48,49,54],"pre",{"className":50,"code":51,"language":52,"meta":53,"style":53},"language-dockerfile shiki shiki-themes one-light one-dark-pro","FROM php:8-apache\nRUN docker-php-ext-install mysqli\nRUN a2enmod rewrite\nCOPY . /var/www/html\nEXPOSE 80\n","dockerfile","",[55,56,57,65,71,77,83],"code",{"__ignoreMap":53},[58,59,62],"span",{"class":60,"line":61},"line",1,[58,63,64],{},"FROM php:8-apache\n",[58,66,68],{"class":60,"line":67},2,[58,69,70],{},"RUN docker-php-ext-install mysqli\n",[58,72,74],{"class":60,"line":73},3,[58,75,76],{},"RUN a2enmod rewrite\n",[58,78,80],{"class":60,"line":79},4,[58,81,82],{},"COPY . /var/www/html\n",[58,84,86],{"class":60,"line":85},5,[58,87,88],{},"EXPOSE 80\n",[13,90,91,92,97],{},"在后端的根目录下有一个 .htaccess 文件，将所有的请求都交给 index.php 来处理，这样就可以根据我的",[37,93,96],{"href":94,"rel":95},"https://zhul.in/2023/12/12/php-simple-rest-api/",[41],"上一篇博客","中所提到的方式去构建不使用任何 php 框架实现的简易 router 效果",[48,99,103],{"className":100,"code":101,"language":102,"meta":53,"style":53},"language-htaccess shiki shiki-themes one-light one-dark-pro","RewriteEngine On\nRewriteRule ^(.*) index.php [QSA,L]\n","htaccess",[55,104,105,110],{"__ignoreMap":53},[58,106,107],{"class":60,"line":61},[58,108,109],{},"RewriteEngine On\n",[58,111,112],{"class":60,"line":67},[58,113,114],{},"RewriteRule ^(.*) index.php [QSA,L]\n",[13,116,117,118,121],{},"构建 Docker 镜像时使用 ",[55,119,120],{},"docker build . -t mrs-php"," 命令，运行 docker 容器时使用命令",[48,123,127],{"className":124,"code":125,"language":126,"meta":53,"style":53},"language-bash shiki shiki-themes one-light one-dark-pro","docker run -d \\\n    -p 7788:80 \\\n    --name mrs-php \\\n    -v /path/to/uploads:/var/www/html/uploads \\\n    --restart unless-stopped \\\n    mrs-php\n","bash",[55,128,129,147,157,167,177,187],{"__ignoreMap":53},[58,130,131,135,139,143],{"class":60,"line":61},[58,132,134],{"class":133},"sAdtL","docker",[58,136,138],{"class":137},"sDhpE"," run",[58,140,142],{"class":141},"sAGMh"," -d",[58,144,146],{"class":145},"s_Sar"," \\\n",[58,148,149,152,155],{"class":60,"line":67},[58,150,151],{"class":141},"    -p",[58,153,154],{"class":137}," 7788:80",[58,156,146],{"class":145},[58,158,159,162,165],{"class":60,"line":73},[58,160,161],{"class":141},"    --name",[58,163,164],{"class":137}," mrs-php",[58,166,146],{"class":145},[58,168,169,172,175],{"class":60,"line":79},[58,170,171],{"class":141},"    -v",[58,173,174],{"class":137}," /path/to/uploads:/var/www/html/uploads",[58,176,146],{"class":145},[58,178,179,182,185],{"class":60,"line":85},[58,180,181],{"class":141},"    --restart",[58,183,184],{"class":137}," unless-stopped",[58,186,146],{"class":145},[58,188,190],{"class":60,"line":189},6,[58,191,192],{"class":137},"    mrs-php\n",[13,194,195,196,199,200,203,204,207],{},"这样，后端就在 7788 端口上开起来了，后续 Caddy 只要将打到 ",[55,197,198],{},"/api/*"," 和 ",[55,201,202],{},"/uploads/*"," 的请求转发到 7788 端口即可，避免了使用 php-fpm 时需要的配置。",[55,205,206],{},"uploads"," 目录是用来存放图片的，我将这个路径挂在在宿主机的目录下，方便备份导入等操作。",[209,210,212],"h3",{"id":211},"mysql-连接时的小插曲","mysql 连接时的小插曲",[13,214,215],{},"需要注意的是，在 Docker 容器中运行的 php 如果想要访问宿主机上的 mysql，需要注意修改 mysql 服务器的 ip 地址，并允许 mysql 接收来自非本机的请求。",[13,217,218,219,222],{},"在宿主机中运行 ",[55,220,221],{},"ip -br a"," 命令可以看到 docker 所采用的虚拟网卡的 ip 地址",[48,224,229],{"className":225,"code":227,"language":228},[226],"language-text","docker0          UP             172.17.0.1/16 fe80::42:eff:febf:b26c/64\n","text",[55,230,227],{"__ignoreMap":53},[13,232,233],{},"我这边得到的 ip 地址是 172.17.0.1，所以在 php 那边访问的数据库 ip 地址就应该是 172.17.0.1，而非 localhost 或者 127.0.0.1",[13,235,236],{},"此外，需要允许宿主机的 mysql 接收来自 Docker 容器的请求",[13,238,239,240,243],{},"使用 ",[55,241,242],{},"docker network inspect bridge"," 命令可以查到 docker 容器的 ip 地址，接着需要去允许来自这个 ip 的请求。建议去网上自行搜索，因为 mysql 语句我自己也不熟悉。我使用的 mysql 版本是 8，语句似乎和以前的版本不兼容？我使用下面三个命令轮着输就好了（有时候报错，有时侯又不报错），有大佬懂的话评论区讲讲。",[48,245,249],{"className":246,"code":247,"language":248,"meta":53,"style":53},"language-mysql shiki shiki-themes one-light one-dark-pro","use mysql;\nGRANT ALL ON *.* TO 'root'@'%';\nupdate user set host='%' where user='root';\nGRANT ALL ON *.* TO 'root'@'%';\n","mysql",[55,250,251,256,261,266],{"__ignoreMap":53},[58,252,253],{"class":60,"line":61},[58,254,255],{},"use mysql;\n",[58,257,258],{"class":60,"line":67},[58,259,260],{},"GRANT ALL ON *.* TO 'root'@'%';\n",[58,262,263],{"class":60,"line":73},[58,264,265],{},"update user set host='%' where user='root';\n",[58,267,268],{"class":60,"line":79},[58,269,260],{},[30,271,272],{"id":272},"前端部分",[13,274,275],{},"前端部分部署起来没什么难度",[13,277,278,279,282,283,286],{},"我使用的是 vite 开发的 vuejs 项目，直接使用 ",[55,280,281],{},"pnpm build"," 构建出静态文件，然后放入了 ",[55,284,285],{},"/var/www/mrs"," 目录，这部分没什么可说的",[30,288,290],{"id":289},"caddy-配置","Caddy 配置",[13,292,293],{},"Caddy 配置如下",[48,295,298],{"className":296,"code":297,"language":228},[226],"example.com {\n    handle /api/* {\n        reverse_proxy localhost:7788\n    }\n\n    handle /uploads/* {\n        reverse_proxy localhost:7788\n    }\n\n    handle /* {\n        root * /var/www/mrs\n        file_server\n        try_files {path} /\n    }\n}\n",[55,299,297],{"__ignoreMap":53},[13,301,302,303,199,305,307,308,311,312,315,316,319,320,322],{},"将打到 ",[55,304,198],{},[55,306,202],{}," 都交给 7788 端口的后端进行处理，前端部分要使用 ",[55,309,310],{},"try_files"," 将请求都指向 ",[55,313,314],{},"/"," 或 ",[55,317,318],{},"/index.html"," 交由 vue-router 处理，否则 caddy 就找不到对应的文件了。这里我尝试过使用 route 关键词代替 handle，但 ",[55,321,310],{}," 的功能没有生效，这两者的区别官方文档中有提到，但我没看懂，等我以后看看有没有机会去折腾了。",[30,324,326],{"id":325},"参考","参考:",[13,328,329],{},[37,330,333],{"href":331,"rel":332},"https://homeboyc.cn/blog/%E4%BD%BF%E7%94%A8caddy%E9%85%8D%E7%BD%AE%E5%90%8C%E4%B8%80%E5%9F%9F%E5%90%8D%E4%B8%8B%E7%9A%84%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB/",[41],"使用Caddy配置同一域名下的前后分离",[13,335,336],{},[37,337,340],{"href":338,"rel":339},"https://blog.lyh543.cn/notes/linux/caddy.html",[41],"Caddy 2",[342,343,344],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}",{"title":53,"searchDepth":67,"depth":67,"links":346},[347,350,351,352],{"id":32,"depth":67,"text":32,"children":348},[349],{"id":211,"depth":73,"text":212},{"id":272,"depth":67,"text":272},{"id":289,"depth":67,"text":290},{"id":325,"depth":67,"text":326},"2023-12-27 22:09:00","md",{},true,"/2023/12/27/php-and-vuejs-project-deploy-on-caddy","---\ntitle: vuejs、php、caddy 与 docker —— web 期末大作业上云部署\ndate: 2023-12-27 22:09:00\nsticky:\ntags:\n- PHP\n- Caddy\n- Vue.js\n- Network\n- Docker\n- Web\n---\n\n> 这学期修了一门叫《用HTML5 和 PHP编写JavaScript，jQuery 和 AJAX脚本》的 web 课（对，听起来很奇怪的名字）。期末大作业是写一个影评系统，前端允许使用框架，后端仅允许使用 php，具体的作业要求如下\n>\n> ![作业要求](https://static.031130.xyz/uploads/2024/08/12/658c4c3128ae4.webp)\n>\n> （源码会在验收结束以后开源）\n>\n> 大作业写了得要有三个礼拜，工作时长加起来得有 30 个小时，想着验收之前上线一段时间积累一些评论数据，验收的时候也会更加顺利一些，于是就开始尝试在服务器上部署。部署的过程还是比较复杂的，所以写下这篇博客记录一下。\n\n## 后端部分\n\n早前有[《PicUploader使用系列（一）——在Archlinux上使用Caddy部署PicUploader》](https://zhul.in/2021/10/21/picuploader-on-archlinux-with-caddy/)的经验，便觉得使用 Caddy + php-fpm 部署的方式多少有点麻烦了，这次便尝试了使用 Docker 部署、Caddy 反代的方式。\n\nDockerfile 如下:\n\n```dockerfile\nFROM php:8-apache\nRUN docker-php-ext-install mysqli\nRUN a2enmod rewrite\nCOPY . /var/www/html\nEXPOSE 80\n```\n\n在后端的根目录下有一个 .htaccess 文件，将所有的请求都交给 index.php 来处理，这样就可以根据我的[上一篇博客](https://zhul.in/2023/12/12/php-simple-rest-api/)中所提到的方式去构建不使用任何 php 框架实现的简易 router 效果\n\n```htaccess\nRewriteEngine On\nRewriteRule ^(.*) index.php [QSA,L]\n```\n\n构建 Docker 镜像时使用 `docker build . -t mrs-php` 命令，运行 docker 容器时使用命令\n\n```bash\ndocker run -d \\\n    -p 7788:80 \\\n    --name mrs-php \\\n    -v /path/to/uploads:/var/www/html/uploads \\\n    --restart unless-stopped \\\n    mrs-php\n```\n\n这样，后端就在 7788 端口上开起来了，后续 Caddy 只要将打到 `/api/*` 和 `/uploads/*` 的请求转发到 7788 端口即可，避免了使用 php-fpm 时需要的配置。`uploads` 目录是用来存放图片的，我将这个路径挂在在宿主机的目录下，方便备份导入等操作。\n\n### mysql 连接时的小插曲\n\n需要注意的是，在 Docker 容器中运行的 php 如果想要访问宿主机上的 mysql，需要注意修改 mysql 服务器的 ip 地址，并允许 mysql 接收来自非本机的请求。\n\n在宿主机中运行 `ip -br a` 命令可以看到 docker 所采用的虚拟网卡的 ip 地址\n\n```\ndocker0          UP             172.17.0.1/16 fe80::42:eff:febf:b26c/64\n```\n\n我这边得到的 ip 地址是 172.17.0.1，所以在 php 那边访问的数据库 ip 地址就应该是 172.17.0.1，而非 localhost 或者 127.0.0.1\n\n此外，需要允许宿主机的 mysql 接收来自 Docker 容器的请求\n\n使用 `docker network inspect bridge` 命令可以查到 docker 容器的 ip 地址，接着需要去允许来自这个 ip 的请求。建议去网上自行搜索，因为 mysql 语句我自己也不熟悉。我使用的 mysql 版本是 8，语句似乎和以前的版本不兼容？我使用下面三个命令轮着输就好了（有时候报错，有时侯又不报错），有大佬懂的话评论区讲讲。\n\n```mysql\nuse mysql;\nGRANT ALL ON *.* TO 'root'@'%';\nupdate user set host='%' where user='root';\nGRANT ALL ON *.* TO 'root'@'%';\n```\n\n## 前端部分\n\n前端部分部署起来没什么难度\n\n我使用的是 vite 开发的 vuejs 项目，直接使用 `pnpm build` 构建出静态文件，然后放入了 `/var/www/mrs` 目录，这部分没什么可说的\n\n## Caddy 配置\n\nCaddy 配置如下\n\n```\nexample.com {\n    handle /api/* {\n        reverse_proxy localhost:7788\n    }\n\n    handle /uploads/* {\n        reverse_proxy localhost:7788\n    }\n\n    handle /* {\n        root * /var/www/mrs\n        file_server\n        try_files {path} /\n    }\n}\n```\n\n将打到 `/api/*` 和 `/uploads/*` 都交给 7788 端口的后端进行处理，前端部分要使用 `try_files` 将请求都指向 `/` 或 `/index.html` 交由 vue-router 处理，否则 caddy 就找不到对应的文件了。这里我尝试过使用 route 关键词代替 handle，但 `try_files` 的功能没有生效，这两者的区别官方文档中有提到，但我没看懂，等我以后看看有没有机会去折腾了。\n\n## 参考:\n\n[使用Caddy配置同一域名下的前后分离](https://homeboyc.cn/blog/%E4%BD%BF%E7%94%A8caddy%E9%85%8D%E7%BD%AE%E5%90%8C%E4%B8%80%E5%9F%9F%E5%90%8D%E4%B8%8B%E7%9A%84%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB/)\n\n[Caddy 2](https://blog.lyh543.cn/notes/linux/caddy.html)\n",{"title":5,"description":53},"posts/php-and-vuejs-project-deploy-on-caddy",false,[363,364,365,366,367,368],"PHP","Caddy","Vue.js","Network","Docker","Web","DjTPmeWy7wBioWhJj74kvb2dnhldKU2jJsDiEgss2BA",[371,376],{"title":372,"path":373,"stem":374,"date":375,"children":-1},"结合 Vue.js 与 php 完成的 web 期末大作业，讲讲前后端分离站点开发与部署中可能遇到的 CORS 跨域问题","/2024/01/10/cors-when-using-splited-frontend-and-backend","posts/cors-when-using-splited-frontend-and-backend","2024-01-10 23:55:36",{"title":377,"path":378,"stem":379,"date":380,"children":-1},"【翻译】使用 PHP 构建简单的 REST API","/2023/12/12/php-simple-rest-api","posts/php-simple-rest-api","2023-12-12 13:07:32",10,1761837273581]