[{"data":1,"prerenderedAt":381},["ShallowReactive",2],{"post-2023-12-27-php-and-vuejs-project-deploy-on-caddy":3,"surround-2023-12-27-php-and-vuejs-project-deploy-on-caddy":369,"randomIndex/2023/12/27/php-and-vuejs-project-deploy-on-caddy/":380},{"id":4,"title":5,"body":6,"date":352,"description":53,"extension":353,"meta":354,"navigation":355,"path":356,"rawbody":357,"seo":358,"stem":359,"sticky":360,"tags":361,"__hash__":368},"posts/posts/php-and-vuejs-project-deploy-on-caddy.md","vuejs、php、caddy 与 docker —— web 期末大作业上云部署",{"type":7,"value":8,"toc":344},"minimark",[9,29,33,44,47,89,98,115,122,192,207,212,215,222,230,233,236,243,269,272,275,286,290,293,299,322,326,333,340],[10,11,12,16,23,26],"blockquote",{},[13,14,15],"p",{},"这学期修了一门叫《用HTML5 和 PHP编写JavaScript，jQuery 和 AJAX脚本》的 web 课（对，听起来很奇怪的名字）。期末大作业是写一个影评系统，前端允许使用框架，后端仅允许使用 php，具体的作业要求如下",[13,17,18],{},[19,20],"img",{"alt":21,"src":22},"作业要求","https://static.031130.xyz/uploads/2024/08/12/658c4c3128ae4.webp",[13,24,25],{},"（源码会在验收结束以后开源）",[13,27,28],{},"大作业写了得要有三个礼拜，工作时长加起来得有 30 个小时，想着验收之前上线一段时间积累一些评论数据，验收的时候也会更加顺利一些，于是就开始尝试在服务器上部署。部署的过程还是比较复杂的，所以写下这篇博客记录一下。",[30,31,32],"h2",{"id":32},"后端部分",[13,34,35,36,43],{},"早前有",[37,38,42],"a",{"href":39,"rel":40},"https://zhul.in/2021/10/21/picuploader-on-archlinux-with-caddy/",[41],"nofollow","《PicUploader使用系列（一）——在Archlinux上使用Caddy部署PicUploader》","的经验，便觉得使用 Caddy + php-fpm 部署的方式多少有点麻烦了，这次便尝试了使用 Docker 部署、Caddy 反代的方式。",[13,45,46],{},"Dockerfile 如下:",[48,49,54],"pre",{"className":50,"code":51,"language":52,"meta":53,"style":53},"language-dockerfile shiki shiki-themes github-light github-dark","FROM php:8-apache\nRUN docker-php-ext-install mysqli\nRUN a2enmod rewrite\nCOPY . /var/www/html\nEXPOSE 80\n","dockerfile","",[55,56,57,65,71,77,83],"code",{"__ignoreMap":53},[58,59,62],"span",{"class":60,"line":61},"line",1,[58,63,64],{},"FROM php:8-apache\n",[58,66,68],{"class":60,"line":67},2,[58,69,70],{},"RUN docker-php-ext-install mysqli\n",[58,72,74],{"class":60,"line":73},3,[58,75,76],{},"RUN a2enmod rewrite\n",[58,78,80],{"class":60,"line":79},4,[58,81,82],{},"COPY . /var/www/html\n",[58,84,86],{"class":60,"line":85},5,[58,87,88],{},"EXPOSE 80\n",[13,90,91,92,97],{},"在后端的根目录下有一个 .htaccess 文件，将所有的请求都交给 index.php 来处理，这样就可以根据我的",[37,93,96],{"href":94,"rel":95},"https://zhul.in/2023/12/12/php-simple-rest-api/",[41],"上一篇博客","中所提到的方式去构建不使用任何 php 框架实现的简易 router 效果",[48,99,103],{"className":100,"code":101,"language":102,"meta":53,"style":53},"language-htaccess shiki shiki-themes github-light github-dark","RewriteEngine On\nRewriteRule ^(.*) index.php [QSA,L]\n","htaccess",[55,104,105,110],{"__ignoreMap":53},[58,106,107],{"class":60,"line":61},[58,108,109],{},"RewriteEngine On\n",[58,111,112],{"class":60,"line":67},[58,113,114],{},"RewriteRule ^(.*) index.php [QSA,L]\n",[13,116,117,118,121],{},"构建 Docker 镜像时使用 ",[55,119,120],{},"docker build . -t mrs-php"," 命令，运行 docker 容器时使用命令",[48,123,127],{"className":124,"code":125,"language":126,"meta":53,"style":53},"language-bash shiki shiki-themes github-light github-dark","docker run -d \\\n    -p 7788:80 \\\n    --name mrs-php \\\n    -v /path/to/uploads:/var/www/html/uploads \\\n    --restart unless-stopped \\\n    mrs-php\n","bash",[55,128,129,146,156,166,176,186],{"__ignoreMap":53},[58,130,131,135,139,143],{"class":60,"line":61},[58,132,134],{"class":133},"sScJk","docker",[58,136,138],{"class":137},"sZZnC"," run",[58,140,142],{"class":141},"sj4cs"," -d",[58,144,145],{"class":141}," \\\n",[58,147,148,151,154],{"class":60,"line":67},[58,149,150],{"class":141},"    -p",[58,152,153],{"class":137}," 7788:80",[58,155,145],{"class":141},[58,157,158,161,164],{"class":60,"line":73},[58,159,160],{"class":141},"    --name",[58,162,163],{"class":137}," mrs-php",[58,165,145],{"class":141},[58,167,168,171,174],{"class":60,"line":79},[58,169,170],{"class":141},"    -v",[58,172,173],{"class":137}," /path/to/uploads:/var/www/html/uploads",[58,175,145],{"class":141},[58,177,178,181,184],{"class":60,"line":85},[58,179,180],{"class":141},"    --restart",[58,182,183],{"class":137}," unless-stopped",[58,185,145],{"class":141},[58,187,189],{"class":60,"line":188},6,[58,190,191],{"class":137},"    mrs-php\n",[13,193,194,195,198,199,202,203,206],{},"这样，后端就在 7788 端口上开起来了，后续 Caddy 只要将打到 ",[55,196,197],{},"/api/*"," 和 ",[55,200,201],{},"/uploads/*"," 的请求转发到 7788 端口即可，避免了使用 php-fpm 时需要的配置。",[55,204,205],{},"uploads"," 目录是用来存放图片的，我将这个路径挂在在宿主机的目录下，方便备份导入等操作。",[208,209,211],"h3",{"id":210},"mysql-连接时的小插曲","mysql 连接时的小插曲",[13,213,214],{},"需要注意的是，在 Docker 容器中运行的 php 如果想要访问宿主机上的 mysql，需要注意修改 mysql 服务器的 ip 地址，并允许 mysql 接收来自非本机的请求。",[13,216,217,218,221],{},"在宿主机中运行 ",[55,219,220],{},"ip -br a"," 命令可以看到 docker 所采用的虚拟网卡的 ip 地址",[48,223,228],{"className":224,"code":226,"language":227},[225],"language-text","docker0          UP             172.17.0.1/16 fe80::42:eff:febf:b26c/64\n","text",[55,229,226],{"__ignoreMap":53},[13,231,232],{},"我这边得到的 ip 地址是 172.17.0.1，所以在 php 那边访问的数据库 ip 地址就应该是 172.17.0.1，而非 localhost 或者 127.0.0.1",[13,234,235],{},"此外，需要允许宿主机的 mysql 接收来自 Docker 容器的请求",[13,237,238,239,242],{},"使用 ",[55,240,241],{},"docker network inspect bridge"," 命令可以查到 docker 容器的 ip 地址，接着需要去允许来自这个 ip 的请求。建议去网上自行搜索，因为 mysql 语句我自己也不熟悉。我使用的 mysql 版本是 8，语句似乎和以前的版本不兼容？我使用下面三个命令轮着输就好了（有时候报错，有时侯又不报错），有大佬懂的话评论区讲讲。",[48,244,248],{"className":245,"code":246,"language":247,"meta":53,"style":53},"language-mysql shiki shiki-themes github-light github-dark","use mysql;\nGRANT ALL ON *.* TO 'root'@'%';\nupdate user set host='%' where user='root';\nGRANT ALL ON *.* TO 'root'@'%';\n","mysql",[55,249,250,255,260,265],{"__ignoreMap":53},[58,251,252],{"class":60,"line":61},[58,253,254],{},"use mysql;\n",[58,256,257],{"class":60,"line":67},[58,258,259],{},"GRANT ALL ON *.* TO 'root'@'%';\n",[58,261,262],{"class":60,"line":73},[58,263,264],{},"update user set host='%' where user='root';\n",[58,266,267],{"class":60,"line":79},[58,268,259],{},[30,270,271],{"id":271},"前端部分",[13,273,274],{},"前端部分部署起来没什么难度",[13,276,277,278,281,282,285],{},"我使用的是 vite 开发的 vuejs 项目，直接使用 ",[55,279,280],{},"pnpm build"," 构建出静态文件，然后放入了 ",[55,283,284],{},"/var/www/mrs"," 目录，这部分没什么可说的",[30,287,289],{"id":288},"caddy-配置","Caddy 配置",[13,291,292],{},"Caddy 配置如下",[48,294,297],{"className":295,"code":296,"language":227},[225],"example.com {\n    handle /api/* {\n        reverse_proxy localhost:7788\n    }\n\n    handle /uploads/* {\n        reverse_proxy localhost:7788\n    }\n\n    handle /* {\n        root * /var/www/mrs\n        file_server\n        try_files {path} /\n    }\n}\n",[55,298,296],{"__ignoreMap":53},[13,300,301,302,198,304,306,307,310,311,314,315,318,319,321],{},"将打到 ",[55,303,197],{},[55,305,201],{}," 都交给 7788 端口的后端进行处理，前端部分要使用 ",[55,308,309],{},"try_files"," 将请求都指向 ",[55,312,313],{},"/"," 或 ",[55,316,317],{},"/index.html"," 交由 vue-router 处理，否则 caddy 就找不到对应的文件了。这里我尝试过使用 route 关键词代替 handle，但 ",[55,320,309],{}," 的功能没有生效，这两者的区别官方文档中有提到，但我没看懂，等我以后看看有没有机会去折腾了。",[30,323,325],{"id":324},"参考","参考:",[13,327,328],{},[37,329,332],{"href":330,"rel":331},"https://homeboyc.cn/blog/%E4%BD%BF%E7%94%A8caddy%E9%85%8D%E7%BD%AE%E5%90%8C%E4%B8%80%E5%9F%9F%E5%90%8D%E4%B8%8B%E7%9A%84%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB/",[41],"使用Caddy配置同一域名下的前后分离",[13,334,335],{},[37,336,339],{"href":337,"rel":338},"https://blog.lyh543.cn/notes/linux/caddy.html",[41],"Caddy 2",[341,342,343],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}",{"title":53,"searchDepth":67,"depth":67,"links":345},[346,349,350,351],{"id":32,"depth":67,"text":32,"children":347},[348],{"id":210,"depth":73,"text":211},{"id":271,"depth":67,"text":271},{"id":288,"depth":67,"text":289},{"id":324,"depth":67,"text":325},"2023-12-27 22:09:00","md",{},true,"/2023/12/27/php-and-vuejs-project-deploy-on-caddy","---\ntitle: vuejs、php、caddy 与 docker —— web 期末大作业上云部署\ndate: 2023-12-27 22:09:00\nsticky:\ntags:\n- PHP\n- Caddy\n- Vue.js\n- Network\n- Docker\n- Web\n---\n\n> 这学期修了一门叫《用HTML5 和 PHP编写JavaScript，jQuery 和 AJAX脚本》的 web 课（对，听起来很奇怪的名字）。期末大作业是写一个影评系统，前端允许使用框架，后端仅允许使用 php，具体的作业要求如下\n>\n> ![作业要求](https://static.031130.xyz/uploads/2024/08/12/658c4c3128ae4.webp)\n>\n> （源码会在验收结束以后开源）\n>\n> 大作业写了得要有三个礼拜，工作时长加起来得有 30 个小时，想着验收之前上线一段时间积累一些评论数据，验收的时候也会更加顺利一些，于是就开始尝试在服务器上部署。部署的过程还是比较复杂的，所以写下这篇博客记录一下。\n\n## 后端部分\n\n早前有[《PicUploader使用系列（一）——在Archlinux上使用Caddy部署PicUploader》](https://zhul.in/2021/10/21/picuploader-on-archlinux-with-caddy/)的经验，便觉得使用 Caddy + php-fpm 部署的方式多少有点麻烦了，这次便尝试了使用 Docker 部署、Caddy 反代的方式。\n\nDockerfile 如下:\n\n```dockerfile\nFROM php:8-apache\nRUN docker-php-ext-install mysqli\nRUN a2enmod rewrite\nCOPY . /var/www/html\nEXPOSE 80\n```\n\n在后端的根目录下有一个 .htaccess 文件，将所有的请求都交给 index.php 来处理，这样就可以根据我的[上一篇博客](https://zhul.in/2023/12/12/php-simple-rest-api/)中所提到的方式去构建不使用任何 php 框架实现的简易 router 效果\n\n```htaccess\nRewriteEngine On\nRewriteRule ^(.*) index.php [QSA,L]\n```\n\n构建 Docker 镜像时使用 `docker build . -t mrs-php` 命令，运行 docker 容器时使用命令\n\n```bash\ndocker run -d \\\n    -p 7788:80 \\\n    --name mrs-php \\\n    -v /path/to/uploads:/var/www/html/uploads \\\n    --restart unless-stopped \\\n    mrs-php\n```\n\n这样，后端就在 7788 端口上开起来了，后续 Caddy 只要将打到 `/api/*` 和 `/uploads/*` 的请求转发到 7788 端口即可，避免了使用 php-fpm 时需要的配置。`uploads` 目录是用来存放图片的，我将这个路径挂在在宿主机的目录下，方便备份导入等操作。\n\n### mysql 连接时的小插曲\n\n需要注意的是，在 Docker 容器中运行的 php 如果想要访问宿主机上的 mysql，需要注意修改 mysql 服务器的 ip 地址，并允许 mysql 接收来自非本机的请求。\n\n在宿主机中运行 `ip -br a` 命令可以看到 docker 所采用的虚拟网卡的 ip 地址\n\n```\ndocker0          UP             172.17.0.1/16 fe80::42:eff:febf:b26c/64\n```\n\n我这边得到的 ip 地址是 172.17.0.1，所以在 php 那边访问的数据库 ip 地址就应该是 172.17.0.1，而非 localhost 或者 127.0.0.1\n\n此外，需要允许宿主机的 mysql 接收来自 Docker 容器的请求\n\n使用 `docker network inspect bridge` 命令可以查到 docker 容器的 ip 地址，接着需要去允许来自这个 ip 的请求。建议去网上自行搜索，因为 mysql 语句我自己也不熟悉。我使用的 mysql 版本是 8，语句似乎和以前的版本不兼容？我使用下面三个命令轮着输就好了（有时候报错，有时侯又不报错），有大佬懂的话评论区讲讲。\n\n```mysql\nuse mysql;\nGRANT ALL ON *.* TO 'root'@'%';\nupdate user set host='%' where user='root';\nGRANT ALL ON *.* TO 'root'@'%';\n```\n\n## 前端部分\n\n前端部分部署起来没什么难度\n\n我使用的是 vite 开发的 vuejs 项目，直接使用 `pnpm build` 构建出静态文件，然后放入了 `/var/www/mrs` 目录，这部分没什么可说的\n\n## Caddy 配置\n\nCaddy 配置如下\n\n```\nexample.com {\n    handle /api/* {\n        reverse_proxy localhost:7788\n    }\n\n    handle /uploads/* {\n        reverse_proxy localhost:7788\n    }\n\n    handle /* {\n        root * /var/www/mrs\n        file_server\n        try_files {path} /\n    }\n}\n```\n\n将打到 `/api/*` 和 `/uploads/*` 都交给 7788 端口的后端进行处理，前端部分要使用 `try_files` 将请求都指向 `/` 或 `/index.html` 交由 vue-router 处理，否则 caddy 就找不到对应的文件了。这里我尝试过使用 route 关键词代替 handle，但 `try_files` 的功能没有生效，这两者的区别官方文档中有提到，但我没看懂，等我以后看看有没有机会去折腾了。\n\n## 参考:\n\n[使用Caddy配置同一域名下的前后分离](https://homeboyc.cn/blog/%E4%BD%BF%E7%94%A8caddy%E9%85%8D%E7%BD%AE%E5%90%8C%E4%B8%80%E5%9F%9F%E5%90%8D%E4%B8%8B%E7%9A%84%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB/)\n\n[Caddy 2](https://blog.lyh543.cn/notes/linux/caddy.html)\n",{"title":5,"description":53},"posts/php-and-vuejs-project-deploy-on-caddy",false,[362,363,364,365,366,367],"PHP","Caddy","Vue.js","Network","Docker","Web","zYc0olStY-s61PTOnRxyT-6_WyBYOXzPgiVFMYrBuSE",[370,375],{"title":371,"path":372,"stem":373,"date":374,"children":-1},"结合 Vue.js 与 php 完成的 web 期末大作业，讲讲前后端分离站点开发与部署中可能遇到的 CORS 跨域问题","/2024/01/10/cors-when-using-splited-frontend-and-backend","posts/cors-when-using-splited-frontend-and-backend","2024-01-10 23:55:36",{"title":376,"path":377,"stem":378,"date":379,"children":-1},"【翻译】使用 PHP 构建简单的 REST API","/2023/12/12/php-simple-rest-api","posts/php-simple-rest-api","2023-12-12 13:07:32",10,1761699272206]