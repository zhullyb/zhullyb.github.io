[{"data":1,"prerenderedAt":1539},["ShallowReactive",2],{"post-2023-12-12-php-simple-rest-api":3,"surround-2023-12-12-php-simple-rest-api":1528,"randomIndex/2023/12/12/php-simple-rest-api/":184},{"id":4,"title":5,"body":6,"date":1516,"description":110,"extension":1517,"meta":1518,"navigation":250,"path":1519,"rawbody":1520,"seo":1521,"stem":1522,"sticky":1523,"tags":1524,"__hash__":1527},"posts/posts/php-simple-rest-api.md","【翻译】使用 PHP 构建简单的 REST API",{"type":7,"value":8,"toc":1494},"minimark",[9,22,26,35,44,47,50,63,66,69,72,80,83,87,90,93,97,100,111,114,120,123,126,134,137,140,143,146,149,188,191,194,200,203,211,215,218,221,224,290,293,296,303,306,309,312,321,324,339,342,345,363,366,579,582,589,592,595,598,641,648,651,654,663,666,675,678,681,684,709,715,718,780,787,794,799,802,868,875,880,883,971,976,979,1044,1049,1052,1055,1058,1412,1415,1418,1446,1449,1458,1461,1464,1467,1470,1473,1490],[10,11,12],"blockquote",{},[13,14,15,16],"p",{},"我这学期有一门偏向前端的 WEB 课程，期末大作业要求使用 PHP 作为后端语言实现一个简单的影评系统，应该是不允许使用框架，使用中文关键字在搜索引擎上搜了一阵子似乎没有可供参考的案例，后来就找到了这篇博客，当中的许多观点与我不谋而合，因此我将这篇博客翻译成中文，原文戳这里: ",[17,18,19],"a",{"href":19,"rel":20},"https://amirkamizi.com/blog/php-simple-rest-api",[21],"nofollow",[23,24,25],"h2",{"id":25},"介绍",[13,27,28,29,34],{},"上周 @rapid_api 发了一个非常好的关于",[17,30,33],{"href":31,"rel":32},"https://twitter.com/Rapid_API/status/1486423046424563714",[21],"使用 nodejs 和 express 创建 REST API"," 的教程帖子。我想要帮助你使用 PHP 开发同样简单的 REST API。",[13,36,37,38,43],{},"首先，如果你不了解 REST API，请务必查看这个 ",[17,39,42],{"href":40,"rel":41},"https://twitter.com/Rapid_API/status/1452932706967461890",[21],"Twitter 帖子","。",[23,45,46],{"id":46},"目标",[13,48,49],{},"在我们开始之前，我想提一句，当我写这篇帖子的时候，我想确保：",[51,52,53,57,60],"ol",{},[54,55,56],"li",{},"我使用单纯的 PHP，不使用框架",[54,58,59],{},"我使用最简单的函数和结构体以便所有人都可以理解并跟上",[54,61,62],{},"我将主体部分分开",[13,64,65],{},"现在让我们开始吧",[23,67,68],{"id":68},"准备",[13,70,71],{},"在我本地的机器上，我创建了一个叫 api 的文件夹于 xampp > htdocs，在里面有一个叫 index.php 的文件",[13,73,74,75],{},"如果你没有 xampp 或者你不知道如何把 php 跑起来，请务必查看",[17,76,79],{"href":77,"rel":78},"https://amirkamizi.com/blog/introduction-to-php",[21],"这篇文章",[13,81,82],{},"现在，如果你尝试访问 localhost/api，你将得到一个空的响应，因为 index.php 文件是空的",[23,84,86],{"id":85},"优雅的-url","优雅的 URL",[13,88,89],{},"项目中，我们需要处理的第一件事是 url",[13,91,92],{},"REST API 的关键特性之一是每一个 url 负责一个资源和一个操作",[94,95,96],"h3",{"id":96},"问题",[13,98,99],{},"这时候如果我创建一个 users.php，我需要访问",[101,102,107],"pre",{"className":103,"code":105,"language":106},[104],"language-text","localhost/api/users.php\n","text",[108,109,105],"code",{"__ignoreMap":110},"",[13,112,113],{},"我需要为每一个 user id 创建一个新的文件",[101,115,118],{"className":116,"code":117,"language":106},[104],"localhost/api/users/1.php\nlocalhost/api/users/2.php\n",[108,119,117],{"__ignoreMap":110},[13,121,122],{},"以此类推。",[13,124,125],{},"这种方案有两个问题",[51,127,128,131],{},[54,129,130],{},"为每个用户创建一个新文件是非常无聊和耗时的",[54,132,133],{},"路由不优雅，每个路径后面都带有 .php",[94,135,136],{"id":136},"解决方案",[13,138,139],{},"让我们解决这个问题。",[13,141,142],{},"正如我所提到的，我不想使用任何框架，并且我想使用最简单的、最让人能够理解的方案",[13,144,145],{},"让我们看看如何解决这个问题",[13,147,148],{},"在 api 文件夹下创建一个叫 .htaccess 的文件，并且将下面的文本复制进去",[101,150,154],{"className":151,"code":152,"language":153,"meta":110,"style":110},"language-htaccess shiki shiki-themes one-light one-dark-pro","RewriteEngine On\nRewriteBase /api\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(.+)$ index.php [QSA,L]\n","htaccess",[108,155,156,164,170,176,182],{"__ignoreMap":110},[157,158,161],"span",{"class":159,"line":160},"line",1,[157,162,163],{},"RewriteEngine On\n",[157,165,167],{"class":159,"line":166},2,[157,168,169],{},"RewriteBase /api\n",[157,171,173],{"class":159,"line":172},3,[157,174,175],{},"RewriteCond %{REQUEST_FILENAME} !-d\n",[157,177,179],{"class":159,"line":178},4,[157,180,181],{},"RewriteCond %{REQUEST_FILENAME} !-f\n",[157,183,185],{"class":159,"line":184},5,[157,186,187],{},"RewriteRule ^(.+)$ index.php [QSA,L]\n",[13,189,190],{},"我们告诉服务器，将所有指向 /api 的请求都转发到 index.php 文件",[13,192,193],{},"现在，所有的 url 都指向 index.php 了，比如下面的 url 都是指向 index.php 的",[101,195,198],{"className":196,"code":197,"language":106},[104],"api/users\napi/users/10\napi/users/5\n",[108,199,197],{"__ignoreMap":110},[13,201,202],{},"现在我们同时解决了这两个问题",[51,204,205,208],{},[54,206,207],{},"所有的 url 都被一个文件处理",[54,209,210],{},"url 都很优雅，结尾处没有 .php",[23,212,214],{"id":213},"uri","URI",[13,216,217],{},"但如何知道用户请求的是哪个 uri 呢？",[13,219,220],{},"很简单，使用 $_SERVER 超全局变量",[13,222,223],{},"让我们来看一些例子",[101,225,229],{"className":226,"code":227,"language":228,"meta":110,"style":110},"language-php shiki shiki-themes one-light one-dark-pro","// url api/users\necho $_SERVER['REQUEST_URI'];\n// /api/users\n\n// url api/users/5\necho $_SERVER['REQUEST_URI'];\n// /api/users/5\n\n// url api\necho $_SERVER['REQUEST_URI'];\n// /api\n","php",[108,230,231,236,241,246,252,257,262,268,273,279,284],{"__ignoreMap":110},[157,232,233],{"class":159,"line":160},[157,234,235],{},"// url api/users\n",[157,237,238],{"class":159,"line":166},[157,239,240],{},"echo $_SERVER['REQUEST_URI'];\n",[157,242,243],{"class":159,"line":172},[157,244,245],{},"// /api/users\n",[157,247,248],{"class":159,"line":178},[157,249,251],{"emptyLinePlaceholder":250},true,"\n",[157,253,254],{"class":159,"line":184},[157,255,256],{},"// url api/users/5\n",[157,258,260],{"class":159,"line":259},6,[157,261,240],{},[157,263,265],{"class":159,"line":264},7,[157,266,267],{},"// /api/users/5\n",[157,269,271],{"class":159,"line":270},8,[157,272,251],{"emptyLinePlaceholder":250},[157,274,276],{"class":159,"line":275},9,[157,277,278],{},"// url api\n",[157,280,282],{"class":159,"line":281},10,[157,283,240],{},[157,285,287],{"class":159,"line":286},11,[157,288,289],{},"// /api\n",[13,291,292],{},"看见了吗？这就是我们所需要的",[13,294,295],{},"现在，使用一个简单的 if 或者 switch 语句，我们就可以处理不同的路径了",[13,297,298,299,43],{},"如果你从来没有用过这些语句，去读",[17,300,79],{"href":301,"rel":302},"https://amirkamizi.com/blog/php-conditionals",[21],[23,304,305],{"id":305},"请求方法",[13,307,308],{},"接下来，我们需要从请求中获取请求的方法，以查看它是GET、POST、PUT、PATCH还是DELETE。",[13,310,311],{},"你可以从 $_SERVER 超全局数组中获取这个信息。",[101,313,315],{"className":226,"code":314,"language":228,"meta":110,"style":110},"$_SERVER['REQUEST_METHOD']\n",[108,316,317],{"__ignoreMap":110},[157,318,319],{"class":159,"line":160},[157,320,314],{},[13,322,323],{},"让我们将这两个值存储在变量中：",[101,325,327],{"className":226,"code":326,"language":228,"meta":110,"style":110},"$uri = $_SERVER['REQUEST_URI'];\n$method = $_SERVER['REQUEST_METHOD'];\n",[108,328,329,334],{"__ignoreMap":110},[157,330,331],{"class":159,"line":160},[157,332,333],{},"$uri = $_SERVER['REQUEST_URI'];\n",[157,335,336],{"class":159,"line":166},[157,337,338],{},"$method = $_SERVER['REQUEST_METHOD'];\n",[13,340,341],{},"我们可以在一个简单的 switch 语句中使用这两个变量来处理不同的请求。",[13,343,344],{},"我们需要判断以下请求",[346,347,348,351,354,357,360],"ul",{},[54,349,350],{},"api/users 的 GET 请求",[54,352,353],{},"api/users/{id} 的 GET 请求",[54,355,356],{},"api/users 的 POST 请求",[54,358,359],{},"api/users/{id} 的 PUT 请求",[54,361,362],{},"api/users/{id} 的 DELETE 请求",[13,364,365],{},"让我们编写针对上述请求的 switch 语句",[101,367,369],{"className":226,"code":368,"language":228,"meta":110,"style":110},"switch ($method | $uri) {\n   /*\n   * Path: GET /api/users\n   * Task: show all the users\n   */\n   case ($method == 'GET' && $uri == '/api/users'):\n       break;\n   /*\n   * Path: GET /api/users/{id}\n   * Task: get one user\n   */\n   case ($method == 'GET' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n       break;\n   /*\n   * Path: POST /api/users\n   * Task: store one user\n   */\n   case ($method == 'POST' && $uri == '/api/users'):\n       break;\n   /*\n   * Path: PUT /api/users/{id}\n   * Task: update one user\n   */\n   case ($method == 'PUT' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n       break;\n   /*\n   * Path: DELETE /api/users/{id}\n   * Task: delete one user\n   */\n   case ($method == 'DELETE' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n       break;\n   /*\n   * Path: ?\n   * Task: this path doesn't match any of the defined paths\n   *      throw an error\n   */\n   default:\n       break;\n}\n",[108,370,371,376,381,386,391,396,401,406,410,415,420,424,430,435,440,446,452,457,463,468,473,479,485,490,496,501,506,512,518,523,529,534,539,545,551,557,562,568,573],{"__ignoreMap":110},[157,372,373],{"class":159,"line":160},[157,374,375],{},"switch ($method | $uri) {\n",[157,377,378],{"class":159,"line":166},[157,379,380],{},"   /*\n",[157,382,383],{"class":159,"line":172},[157,384,385],{},"   * Path: GET /api/users\n",[157,387,388],{"class":159,"line":178},[157,389,390],{},"   * Task: show all the users\n",[157,392,393],{"class":159,"line":184},[157,394,395],{},"   */\n",[157,397,398],{"class":159,"line":259},[157,399,400],{},"   case ($method == 'GET' && $uri == '/api/users'):\n",[157,402,403],{"class":159,"line":264},[157,404,405],{},"       break;\n",[157,407,408],{"class":159,"line":270},[157,409,380],{},[157,411,412],{"class":159,"line":275},[157,413,414],{},"   * Path: GET /api/users/{id}\n",[157,416,417],{"class":159,"line":281},[157,418,419],{},"   * Task: get one user\n",[157,421,422],{"class":159,"line":286},[157,423,395],{},[157,425,427],{"class":159,"line":426},12,[157,428,429],{},"   case ($method == 'GET' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n",[157,431,433],{"class":159,"line":432},13,[157,434,405],{},[157,436,438],{"class":159,"line":437},14,[157,439,380],{},[157,441,443],{"class":159,"line":442},15,[157,444,445],{},"   * Path: POST /api/users\n",[157,447,449],{"class":159,"line":448},16,[157,450,451],{},"   * Task: store one user\n",[157,453,455],{"class":159,"line":454},17,[157,456,395],{},[157,458,460],{"class":159,"line":459},18,[157,461,462],{},"   case ($method == 'POST' && $uri == '/api/users'):\n",[157,464,466],{"class":159,"line":465},19,[157,467,405],{},[157,469,471],{"class":159,"line":470},20,[157,472,380],{},[157,474,476],{"class":159,"line":475},21,[157,477,478],{},"   * Path: PUT /api/users/{id}\n",[157,480,482],{"class":159,"line":481},22,[157,483,484],{},"   * Task: update one user\n",[157,486,488],{"class":159,"line":487},23,[157,489,395],{},[157,491,493],{"class":159,"line":492},24,[157,494,495],{},"   case ($method == 'PUT' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n",[157,497,499],{"class":159,"line":498},25,[157,500,405],{},[157,502,504],{"class":159,"line":503},26,[157,505,380],{},[157,507,509],{"class":159,"line":508},27,[157,510,511],{},"   * Path: DELETE /api/users/{id}\n",[157,513,515],{"class":159,"line":514},28,[157,516,517],{},"   * Task: delete one user\n",[157,519,521],{"class":159,"line":520},29,[157,522,395],{},[157,524,526],{"class":159,"line":525},30,[157,527,528],{},"   case ($method == 'DELETE' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n",[157,530,532],{"class":159,"line":531},31,[157,533,405],{},[157,535,537],{"class":159,"line":536},32,[157,538,380],{},[157,540,542],{"class":159,"line":541},33,[157,543,544],{},"   * Path: ?\n",[157,546,548],{"class":159,"line":547},34,[157,549,550],{},"   * Task: this path doesn't match any of the defined paths\n",[157,552,554],{"class":159,"line":553},35,[157,555,556],{},"   *      throw an error\n",[157,558,560],{"class":159,"line":559},36,[157,561,395],{},[157,563,565],{"class":159,"line":564},37,[157,566,567],{},"   default:\n",[157,569,571],{"class":159,"line":570},38,[157,572,405],{},[157,574,576],{"class":159,"line":575},39,[157,577,578],{},"}\n",[13,580,581],{},"当我们想要在 switch 语句中使用两个变量，我们可以使用 | 符号",[13,583,584,585,43],{},"如果你想知道 preg_match 是如何工作的，看",[17,586,79],{"href":587,"rel":588},"https://amirkamizi.com/blog/php-regular-expressions",[21],[23,590,591],{"id":591},"数据库",[13,593,594],{},"现在是说说数据。储存数据的最好方法是将数据储存在数据库中。但在这篇教程中，我不想使用数据库。因此，我们使用一个 json 文件当作数据库来保证数据的持久性。",[13,596,597],{},"我的 json 文件看起来长成这个样子：",[101,599,603],{"className":600,"code":601,"language":602,"meta":110,"style":110},"language-json shiki shiki-themes one-light one-dark-pro","{\n   \"1\": \"Pratham\",\n   \"2\": \"Amir\"\n}\n","json",[108,604,605,611,627,637],{"__ignoreMap":110},[157,606,607],{"class":159,"line":160},[157,608,610],{"class":609},"s5ixo","{\n",[157,612,613,617,620,624],{"class":159,"line":166},[157,614,616],{"class":615},"sJa8x","   \"1\"",[157,618,619],{"class":609},": ",[157,621,623],{"class":622},"sDhpE","\"Pratham\"",[157,625,626],{"class":609},",\n",[157,628,629,632,634],{"class":159,"line":172},[157,630,631],{"class":615},"   \"2\"",[157,633,619],{"class":609},[157,635,636],{"class":622},"\"Amir\"\n",[157,638,639],{"class":159,"line":178},[157,640,578],{"class":609},[13,642,643,644],{},"如果你想知道如何使用 json，看",[17,645,79],{"href":646,"rel":647},"https://amirkamizi.com/blog/php-xml-and-json",[21],[13,649,650],{},"我加载 json 数据并将其转换为数组，然后在 php 使用他们。如果我想要更改数据，我将数组转换回 json 并将其重新写入文件。",[13,652,653],{},"要将整个文件作为一个字符串读取并存储在变量中，我使用：",[101,655,657],{"className":226,"code":656,"language":228,"meta":110,"style":110},"file_get_contents($jsonFile);\n",[108,658,659],{"__ignoreMap":110},[157,660,661],{"class":159,"line":160},[157,662,656],{},[13,664,665],{},"而要将json写入文件，我使用：",[101,667,669],{"className":226,"code":668,"language":228,"meta":110,"style":110},"file_put_contents($jsonFile, $data);\n",[108,670,671],{"__ignoreMap":110},[157,672,673],{"class":159,"line":160},[157,674,668],{},[13,676,677],{},"好了，现在我们的数据库处理好了，让我们开始处理所有的路径。",[13,679,680],{},"我使用 Postman 发送请求并查看响应。",[23,682,683],{"id":683},"获取所有用户",[101,685,687],{"className":226,"code":686,"language":228,"meta":110,"style":110},"case ($method == 'GET' && $uri == '/api/users'):\n   header('Content-Type: application/json');\n   echo json_encode($users, JSON_PRETTY_PRINT);\n   break;\n",[108,688,689,694,699,704],{"__ignoreMap":110},[157,690,691],{"class":159,"line":160},[157,692,693],{},"case ($method == 'GET' && $uri == '/api/users'):\n",[157,695,696],{"class":159,"line":166},[157,697,698],{},"   header('Content-Type: application/json');\n",[157,700,701],{"class":159,"line":172},[157,702,703],{},"   echo json_encode($users, JSON_PRETTY_PRINT);\n",[157,705,706],{"class":159,"line":178},[157,707,708],{},"   break;\n",[13,710,711],{},[712,713],"img",{"alt":110,"src":714},"https://static.031130.xyz/uploads/2024/08/12/6577fcdf64a96.webp",[23,716,717],{"id":717},"获取单个用户",[101,719,721],{"className":226,"code":720,"language":228,"meta":110,"style":110},"case ($method == 'GET' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n   header('Content-Type: application/json');\n   // get the id\n   $id = basename($uri);\n   if (!array_key_exists($id, $users)) {\n       http_response_code(404);\n       echo json_encode(['error' => 'user does not exist']);\n       break;\n   }\n   $responseData = [$id => $users[$id]];\n   echo json_encode($responseData, JSON_PRETTY_PRINT);\n   break;\n",[108,722,723,728,732,737,742,747,752,757,761,766,771,776],{"__ignoreMap":110},[157,724,725],{"class":159,"line":160},[157,726,727],{},"case ($method == 'GET' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n",[157,729,730],{"class":159,"line":166},[157,731,698],{},[157,733,734],{"class":159,"line":172},[157,735,736],{},"   // get the id\n",[157,738,739],{"class":159,"line":178},[157,740,741],{},"   $id = basename($uri);\n",[157,743,744],{"class":159,"line":184},[157,745,746],{},"   if (!array_key_exists($id, $users)) {\n",[157,748,749],{"class":159,"line":259},[157,750,751],{},"       http_response_code(404);\n",[157,753,754],{"class":159,"line":264},[157,755,756],{},"       echo json_encode(['error' => 'user does not exist']);\n",[157,758,759],{"class":159,"line":270},[157,760,405],{},[157,762,763],{"class":159,"line":275},[157,764,765],{},"   }\n",[157,767,768],{"class":159,"line":281},[157,769,770],{},"   $responseData = [$id => $users[$id]];\n",[157,772,773],{"class":159,"line":286},[157,774,775],{},"   echo json_encode($responseData, JSON_PRETTY_PRINT);\n",[157,777,778],{"class":159,"line":426},[157,779,708],{},[13,781,782,786],{},[783,784,785],"strong",{},"basename","($uri) 会将 uri 的最后一部分给我。比如一个 api/users/10 这样的路径，它会返回 10.",[13,788,789,790,793],{},"然后我使用 ",[783,791,792],{},"array_key_exists"," 检查是否存在一个 id 为 10 的用户",[13,795,796],{},[712,797],{"alt":110,"src":798},"https://static.031130.xyz/uploads/2024/08/12/6577fd77c3d06.webp",[23,800,801],{"id":801},"添加一个新用户",[101,803,805],{"className":226,"code":804,"language":228,"meta":110,"style":110},"case ($method == 'POST' && $uri == '/api/users'):\n   header('Content-Type: application/json');\n   $requestBody = json_decode(file_get_contents('php://input'), true);\n   $name = $requestBody['name'];\n   if (empty($name)) {\n       http_response_code(404);\n       echo json_encode(['error' => 'Please add name of the user']);\n   }\n   $users[] = $name;\n   $data = json_encode($users, JSON_PRETTY_PRINT);\n   file_put_contents($jsonFile, $data);\n   echo json_encode(['message' => 'user added successfully']);\n   break;\n",[108,806,807,812,816,821,826,831,835,840,844,849,854,859,864],{"__ignoreMap":110},[157,808,809],{"class":159,"line":160},[157,810,811],{},"case ($method == 'POST' && $uri == '/api/users'):\n",[157,813,814],{"class":159,"line":166},[157,815,698],{},[157,817,818],{"class":159,"line":172},[157,819,820],{},"   $requestBody = json_decode(file_get_contents('php://input'), true);\n",[157,822,823],{"class":159,"line":178},[157,824,825],{},"   $name = $requestBody['name'];\n",[157,827,828],{"class":159,"line":184},[157,829,830],{},"   if (empty($name)) {\n",[157,832,833],{"class":159,"line":259},[157,834,751],{},[157,836,837],{"class":159,"line":264},[157,838,839],{},"       echo json_encode(['error' => 'Please add name of the user']);\n",[157,841,842],{"class":159,"line":270},[157,843,765],{},[157,845,846],{"class":159,"line":275},[157,847,848],{},"   $users[] = $name;\n",[157,850,851],{"class":159,"line":281},[157,852,853],{},"   $data = json_encode($users, JSON_PRETTY_PRINT);\n",[157,855,856],{"class":159,"line":286},[157,857,858],{},"   file_put_contents($jsonFile, $data);\n",[157,860,861],{"class":159,"line":426},[157,862,863],{},"   echo json_encode(['message' => 'user added successfully']);\n",[157,865,866],{"class":159,"line":432},[157,867,708],{},[13,869,870,871,874],{},"我使用 ",[783,872,873],{},"file_get_contents('php://input')"," 以获取请求的 body 部分。由于在这个例子中我使用的是 json，我将会解码 json 以便我可以获取到名字。",[13,876,877],{},[712,878],{"alt":110,"src":879},"https://static.031130.xyz/uploads/2024/08/12/6577fdca88f76.webp",[23,881,882],{"id":882},"更新一个用户",[101,884,886],{"className":226,"code":885,"language":228,"meta":110,"style":110},"case ($method == 'PUT' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n   header('Content-Type: application/json');\n   // get the id\n   $id = basename($uri);\n   if (!array_key_exists($id, $users)) {\n       http_response_code(404);\n       echo json_encode(['error' => 'user does not exist']);\n       break;\n   }\n   $requestBody = json_decode(file_get_contents('php://input'), true);\n   $name = $requestBody['name'];\n   if (empty($name)) {\n       http_response_code(404);\n       echo json_encode(['error' => 'Please add name of the user']);\n   }\n   $users[$id] = $name;\n   $data = json_encode($users, JSON_PRETTY_PRINT);\n   file_put_contents($jsonFile, $data);\n   echo json_encode(['message' => 'user updated successfully']);\n   break;\n",[108,887,888,893,897,901,905,909,913,917,921,925,929,933,937,941,945,949,954,958,962,967],{"__ignoreMap":110},[157,889,890],{"class":159,"line":160},[157,891,892],{},"case ($method == 'PUT' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n",[157,894,895],{"class":159,"line":166},[157,896,698],{},[157,898,899],{"class":159,"line":172},[157,900,736],{},[157,902,903],{"class":159,"line":178},[157,904,741],{},[157,906,907],{"class":159,"line":184},[157,908,746],{},[157,910,911],{"class":159,"line":259},[157,912,751],{},[157,914,915],{"class":159,"line":264},[157,916,756],{},[157,918,919],{"class":159,"line":270},[157,920,405],{},[157,922,923],{"class":159,"line":275},[157,924,765],{},[157,926,927],{"class":159,"line":281},[157,928,820],{},[157,930,931],{"class":159,"line":286},[157,932,825],{},[157,934,935],{"class":159,"line":426},[157,936,830],{},[157,938,939],{"class":159,"line":432},[157,940,751],{},[157,942,943],{"class":159,"line":437},[157,944,839],{},[157,946,947],{"class":159,"line":442},[157,948,765],{},[157,950,951],{"class":159,"line":448},[157,952,953],{},"   $users[$id] = $name;\n",[157,955,956],{"class":159,"line":454},[157,957,853],{},[157,959,960],{"class":159,"line":459},[157,961,858],{},[157,963,964],{"class":159,"line":465},[157,965,966],{},"   echo json_encode(['message' => 'user updated successfully']);\n",[157,968,969],{"class":159,"line":470},[157,970,708],{},[13,972,973],{},[712,974],{"alt":110,"src":975},"https://static.031130.xyz/uploads/2024/08/12/6577fdf646402.webp",[23,977,978],{"id":978},"删除一个用户",[101,980,982],{"className":226,"code":981,"language":228,"meta":110,"style":110},"case ($method == 'DELETE' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n   header('Content-Type: application/json');\n   // get the id\n   $id = basename($uri);\n   if (empty($users[$id])) {\n       http_response_code(404);\n       echo json_encode(['error' => 'user does not exist']);\n       break;\n   }\n   unset($users[$id]);\n   $data = json_encode($users, JSON_PRETTY_PRINT);\n   file_put_contents($jsonFile, $data);\n   echo json_encode(['message' => 'user deleted successfully']);\n   break;\n",[108,983,984,989,993,997,1001,1006,1010,1014,1018,1022,1027,1031,1035,1040],{"__ignoreMap":110},[157,985,986],{"class":159,"line":160},[157,987,988],{},"case ($method == 'DELETE' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n",[157,990,991],{"class":159,"line":166},[157,992,698],{},[157,994,995],{"class":159,"line":172},[157,996,736],{},[157,998,999],{"class":159,"line":178},[157,1000,741],{},[157,1002,1003],{"class":159,"line":184},[157,1004,1005],{},"   if (empty($users[$id])) {\n",[157,1007,1008],{"class":159,"line":259},[157,1009,751],{},[157,1011,1012],{"class":159,"line":264},[157,1013,756],{},[157,1015,1016],{"class":159,"line":270},[157,1017,405],{},[157,1019,1020],{"class":159,"line":275},[157,1021,765],{},[157,1023,1024],{"class":159,"line":281},[157,1025,1026],{},"   unset($users[$id]);\n",[157,1028,1029],{"class":159,"line":286},[157,1030,853],{},[157,1032,1033],{"class":159,"line":426},[157,1034,858],{},[157,1036,1037],{"class":159,"line":432},[157,1038,1039],{},"   echo json_encode(['message' => 'user deleted successfully']);\n",[157,1041,1042],{"class":159,"line":437},[157,1043,708],{},[13,1045,1046],{},[712,1047],{"alt":110,"src":1048},"https://static.031130.xyz/uploads/2024/08/12/6577fe0c3a95b.webp",[23,1050,1051],{"id":1051},"最终文件",[13,1053,1054],{},"现在我们的 index.php 文件看起来是这样的",[13,1056,1057],{},"在 70 行左右的代码中，我们使用 PHP 创建了一个 RESTful API，很神奇吧？",[101,1059,1061],{"className":226,"code":1060,"language":228,"meta":110,"style":110},"\u003C?php\n$jsonFile = 'users.json';\n$data = file_get_contents($jsonFile);\n$users = json_decode($data, true);\n$uri = $_SERVER['REQUEST_URI'];\n$method = $_SERVER['REQUEST_METHOD'];\nswitch ($method | $uri) {\n   case ($method == 'GET' && $uri == '/api/users'):\n       header('Content-Type: application/json');\n       echo json_encode($users, JSON_PRETTY_PRINT);\n       break;\n   case ($method == 'GET' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n       header('Content-Type: application/json');\n       $id = basename($uri);\n       if (!array_key_exists($id, $users)) {\n           http_response_code(404);\n           echo json_encode(['error' => 'user does not exist']);\n           break;\n       }\n       $responseData = [$id => $users[$id]];\n       echo json_encode($responseData, JSON_PRETTY_PRINT);\n       break;\n   case ($method == 'POST' && $uri == '/api/users'):\n       header('Content-Type: application/json');\n       $requestBody = json_decode(file_get_contents('php://input'), true);\n       $name = $requestBody['name'];\n       if (empty($name)) {\n           http_response_code(404);\n           echo json_encode(['error' => 'Please add name of the user']);\n       }\n       $users[] = $name;\n       $data = json_encode($users, JSON_PRETTY_PRINT);\n       file_put_contents($jsonFile, $data);\n       echo json_encode(['message' => 'user added successfully']);\n       break;\n   case ($method == 'PUT' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n       header('Content-Type: application/json');\n       $id = basename($uri);\n       if (!array_key_exists($id, $users)) {\n           http_response_code(404);\n           echo json_encode(['error' => 'user does not exist']);\n           break;\n       }\n       $requestBody = json_decode(file_get_contents('php://input'), true);\n       $name = $requestBody['name'];\n       if (empty($name)) {\n           http_response_code(404);\n           echo json_encode(['error' => 'Please add name of the user']);\n       }\n       $users[$id] = $name;\n       $data = json_encode($users, JSON_PRETTY_PRINT);\n       file_put_contents($jsonFile, $data);\n       echo json_encode(['message' => 'user updated successfully']);\n       break;\n   case ($method == 'DELETE' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n       header('Content-Type: application/json');\n       $id = basename($uri);\n       if (empty($users[$id])) {\n           http_response_code(404);\n           echo json_encode(['error' => 'user does not exist']);\n           break;\n       }\n       unset($users[$id]);\n       $data = json_encode($users, JSON_PRETTY_PRINT);\n       file_put_contents($jsonFile, $data);\n       echo json_encode(['message' => 'user deleted successfully']);\n       break;\n   default:\n       http_response_code(404);\n       echo json_encode(['error' => \"We cannot find what you're looking for.\"]);\n       break;\n}\n",[108,1062,1063,1068,1073,1078,1083,1087,1091,1095,1099,1104,1109,1113,1117,1121,1126,1131,1136,1141,1146,1151,1156,1161,1165,1169,1173,1178,1183,1188,1192,1197,1201,1206,1211,1216,1221,1225,1229,1233,1237,1241,1246,1251,1256,1261,1266,1271,1276,1281,1286,1291,1297,1302,1307,1313,1318,1323,1328,1333,1339,1344,1349,1354,1359,1365,1370,1375,1381,1386,1391,1396,1402,1407],{"__ignoreMap":110},[157,1064,1065],{"class":159,"line":160},[157,1066,1067],{},"\u003C?php\n",[157,1069,1070],{"class":159,"line":166},[157,1071,1072],{},"$jsonFile = 'users.json';\n",[157,1074,1075],{"class":159,"line":172},[157,1076,1077],{},"$data = file_get_contents($jsonFile);\n",[157,1079,1080],{"class":159,"line":178},[157,1081,1082],{},"$users = json_decode($data, true);\n",[157,1084,1085],{"class":159,"line":184},[157,1086,333],{},[157,1088,1089],{"class":159,"line":259},[157,1090,338],{},[157,1092,1093],{"class":159,"line":264},[157,1094,375],{},[157,1096,1097],{"class":159,"line":270},[157,1098,400],{},[157,1100,1101],{"class":159,"line":275},[157,1102,1103],{},"       header('Content-Type: application/json');\n",[157,1105,1106],{"class":159,"line":281},[157,1107,1108],{},"       echo json_encode($users, JSON_PRETTY_PRINT);\n",[157,1110,1111],{"class":159,"line":286},[157,1112,405],{},[157,1114,1115],{"class":159,"line":426},[157,1116,429],{},[157,1118,1119],{"class":159,"line":432},[157,1120,1103],{},[157,1122,1123],{"class":159,"line":437},[157,1124,1125],{},"       $id = basename($uri);\n",[157,1127,1128],{"class":159,"line":442},[157,1129,1130],{},"       if (!array_key_exists($id, $users)) {\n",[157,1132,1133],{"class":159,"line":448},[157,1134,1135],{},"           http_response_code(404);\n",[157,1137,1138],{"class":159,"line":454},[157,1139,1140],{},"           echo json_encode(['error' => 'user does not exist']);\n",[157,1142,1143],{"class":159,"line":459},[157,1144,1145],{},"           break;\n",[157,1147,1148],{"class":159,"line":465},[157,1149,1150],{},"       }\n",[157,1152,1153],{"class":159,"line":470},[157,1154,1155],{},"       $responseData = [$id => $users[$id]];\n",[157,1157,1158],{"class":159,"line":475},[157,1159,1160],{},"       echo json_encode($responseData, JSON_PRETTY_PRINT);\n",[157,1162,1163],{"class":159,"line":481},[157,1164,405],{},[157,1166,1167],{"class":159,"line":487},[157,1168,462],{},[157,1170,1171],{"class":159,"line":492},[157,1172,1103],{},[157,1174,1175],{"class":159,"line":498},[157,1176,1177],{},"       $requestBody = json_decode(file_get_contents('php://input'), true);\n",[157,1179,1180],{"class":159,"line":503},[157,1181,1182],{},"       $name = $requestBody['name'];\n",[157,1184,1185],{"class":159,"line":508},[157,1186,1187],{},"       if (empty($name)) {\n",[157,1189,1190],{"class":159,"line":514},[157,1191,1135],{},[157,1193,1194],{"class":159,"line":520},[157,1195,1196],{},"           echo json_encode(['error' => 'Please add name of the user']);\n",[157,1198,1199],{"class":159,"line":525},[157,1200,1150],{},[157,1202,1203],{"class":159,"line":531},[157,1204,1205],{},"       $users[] = $name;\n",[157,1207,1208],{"class":159,"line":536},[157,1209,1210],{},"       $data = json_encode($users, JSON_PRETTY_PRINT);\n",[157,1212,1213],{"class":159,"line":541},[157,1214,1215],{},"       file_put_contents($jsonFile, $data);\n",[157,1217,1218],{"class":159,"line":547},[157,1219,1220],{},"       echo json_encode(['message' => 'user added successfully']);\n",[157,1222,1223],{"class":159,"line":553},[157,1224,405],{},[157,1226,1227],{"class":159,"line":559},[157,1228,495],{},[157,1230,1231],{"class":159,"line":564},[157,1232,1103],{},[157,1234,1235],{"class":159,"line":570},[157,1236,1125],{},[157,1238,1239],{"class":159,"line":575},[157,1240,1130],{},[157,1242,1244],{"class":159,"line":1243},40,[157,1245,1135],{},[157,1247,1249],{"class":159,"line":1248},41,[157,1250,1140],{},[157,1252,1254],{"class":159,"line":1253},42,[157,1255,1145],{},[157,1257,1259],{"class":159,"line":1258},43,[157,1260,1150],{},[157,1262,1264],{"class":159,"line":1263},44,[157,1265,1177],{},[157,1267,1269],{"class":159,"line":1268},45,[157,1270,1182],{},[157,1272,1274],{"class":159,"line":1273},46,[157,1275,1187],{},[157,1277,1279],{"class":159,"line":1278},47,[157,1280,1135],{},[157,1282,1284],{"class":159,"line":1283},48,[157,1285,1196],{},[157,1287,1289],{"class":159,"line":1288},49,[157,1290,1150],{},[157,1292,1294],{"class":159,"line":1293},50,[157,1295,1296],{},"       $users[$id] = $name;\n",[157,1298,1300],{"class":159,"line":1299},51,[157,1301,1210],{},[157,1303,1305],{"class":159,"line":1304},52,[157,1306,1215],{},[157,1308,1310],{"class":159,"line":1309},53,[157,1311,1312],{},"       echo json_encode(['message' => 'user updated successfully']);\n",[157,1314,1316],{"class":159,"line":1315},54,[157,1317,405],{},[157,1319,1321],{"class":159,"line":1320},55,[157,1322,528],{},[157,1324,1326],{"class":159,"line":1325},56,[157,1327,1103],{},[157,1329,1331],{"class":159,"line":1330},57,[157,1332,1125],{},[157,1334,1336],{"class":159,"line":1335},58,[157,1337,1338],{},"       if (empty($users[$id])) {\n",[157,1340,1342],{"class":159,"line":1341},59,[157,1343,1135],{},[157,1345,1347],{"class":159,"line":1346},60,[157,1348,1140],{},[157,1350,1352],{"class":159,"line":1351},61,[157,1353,1145],{},[157,1355,1357],{"class":159,"line":1356},62,[157,1358,1150],{},[157,1360,1362],{"class":159,"line":1361},63,[157,1363,1364],{},"       unset($users[$id]);\n",[157,1366,1368],{"class":159,"line":1367},64,[157,1369,1210],{},[157,1371,1373],{"class":159,"line":1372},65,[157,1374,1215],{},[157,1376,1378],{"class":159,"line":1377},66,[157,1379,1380],{},"       echo json_encode(['message' => 'user deleted successfully']);\n",[157,1382,1384],{"class":159,"line":1383},67,[157,1385,405],{},[157,1387,1389],{"class":159,"line":1388},68,[157,1390,567],{},[157,1392,1394],{"class":159,"line":1393},69,[157,1395,751],{},[157,1397,1399],{"class":159,"line":1398},70,[157,1400,1401],{},"       echo json_encode(['error' => \"We cannot find what you're looking for.\"]);\n",[157,1403,1405],{"class":159,"line":1404},71,[157,1406,405],{},[157,1408,1410],{"class":159,"line":1409},72,[157,1411,578],{},[23,1413,1414],{"id":1414},"额外内容",[13,1416,1417],{},"在这种情况下，我不希望删除我的所有用户，所以我加了一个新的语句，如果只剩下最后一个用户，它将不会被删除，像这样",[101,1419,1421],{"className":226,"code":1420,"language":228,"meta":110,"style":110},"if (sizeof($users) == 1){\n   http_response_code(404);\n   echo json_encode(['error' => 'there is only one user left. you cannot delete it!']);\n   break;\n}\n",[108,1422,1423,1428,1433,1438,1442],{"__ignoreMap":110},[157,1424,1425],{"class":159,"line":160},[157,1426,1427],{},"if (sizeof($users) == 1){\n",[157,1429,1430],{"class":159,"line":166},[157,1431,1432],{},"   http_response_code(404);\n",[157,1434,1435],{"class":159,"line":172},[157,1436,1437],{},"   echo json_encode(['error' => 'there is only one user left. you cannot delete it!']);\n",[157,1439,1440],{"class":159,"line":178},[157,1441,708],{},[157,1443,1444],{"class":159,"line":184},[157,1445,578],{},[23,1447,1448],{"id":1448},"源码",[13,1450,1451,1452,1457],{},"你可以在",[17,1453,1456],{"href":1454,"rel":1455},"https://github.com/amirkamizi/php-simple-restful-api",[21],"原作者的 github"," 上看到完整注释的源代码以及 post man 集合",[23,1459,1460],{"id":1460},"总结",[13,1462,1463],{},"现在你知道如何在 PHP 中创建一个简单的 RESTful API。",[13,1465,1466],{},"我推荐你打开一个 PHP 文件并复习所有的这些我们进行的步骤，并且像本文一样添加一些额外的资源",[13,1468,1469],{},"如果你有任何的建议、问题或者观点，请联系文章原作者，他期待着听到你的声音。",[23,1471,1472],{"id":1472},"要点",[346,1474,1475,1478,1481,1484,1487],{},[54,1476,1477],{},"不使用框架，用 PHP 创建一个 RESTful API",[54,1479,1480],{},"在 PHP 中使用优雅的 URL",[54,1482,1483],{},"处理请求的 body",[54,1485,1486],{},"使用 Json 文件作为你的数据库",[54,1488,1489],{},"使用多个变量作为 switch 的关键词",[1491,1492,1493],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}",{"title":110,"searchDepth":166,"depth":166,"links":1495},[1496,1497,1498,1499,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515],{"id":25,"depth":166,"text":25},{"id":46,"depth":166,"text":46},{"id":68,"depth":166,"text":68},{"id":85,"depth":166,"text":86,"children":1500},[1501,1502],{"id":96,"depth":172,"text":96},{"id":136,"depth":172,"text":136},{"id":213,"depth":166,"text":214},{"id":305,"depth":166,"text":305},{"id":591,"depth":166,"text":591},{"id":683,"depth":166,"text":683},{"id":717,"depth":166,"text":717},{"id":801,"depth":166,"text":801},{"id":882,"depth":166,"text":882},{"id":978,"depth":166,"text":978},{"id":1051,"depth":166,"text":1051},{"id":1414,"depth":166,"text":1414},{"id":1448,"depth":166,"text":1448},{"id":1460,"depth":166,"text":1460},{"id":1472,"depth":166,"text":1472},"2023-12-12 13:07:32","md",{},"/2023/12/12/php-simple-rest-api","---\ntitle: 【翻译】使用 PHP 构建简单的 REST API\ndate: 2023-12-12 13:07:32\nsticky:\ntags:\n- 翻译\n- PHP\n---\n\n> 我这学期有一门偏向前端的 WEB 课程，期末大作业要求使用 PHP 作为后端语言实现一个简单的影评系统，应该是不允许使用框架，使用中文关键字在搜索引擎上搜了一阵子似乎没有可供参考的案例，后来就找到了这篇博客，当中的许多观点与我不谋而合，因此我将这篇博客翻译成中文，原文戳这里: https://amirkamizi.com/blog/php-simple-rest-api\n\n## 介绍\n\n上周 @rapid_api 发了一个非常好的关于[使用 nodejs 和 express 创建 REST API](https://twitter.com/Rapid_API/status/1486423046424563714) 的教程帖子。我想要帮助你使用 PHP 开发同样简单的 REST API。\n\n首先，如果你不了解 REST API，请务必查看这个 [Twitter 帖子](https://twitter.com/Rapid_API/status/1452932706967461890)。\n\n## 目标\n\n在我们开始之前，我想提一句，当我写这篇帖子的时候，我想确保：\n\n1. 我使用单纯的 PHP，不使用框架\n2. 我使用最简单的函数和结构体以便所有人都可以理解并跟上\n3. 我将主体部分分开\n\n现在让我们开始吧\n\n## 准备\n\n在我本地的机器上，我创建了一个叫 api 的文件夹于 xampp > htdocs，在里面有一个叫 index.php 的文件\n\n如果你没有 xampp 或者你不知道如何把 php 跑起来，请务必查看[这篇文章](https://amirkamizi.com/blog/introduction-to-php)\n\n现在，如果你尝试访问 localhost/api，你将得到一个空的响应，因为 index.php 文件是空的\n\n## 优雅的 URL\n\n项目中，我们需要处理的第一件事是 url\n\nREST API 的关键特性之一是每一个 url 负责一个资源和一个操作\n\n### 问题\n\n这时候如果我创建一个 users.php，我需要访问\n\n```\nlocalhost/api/users.php\n```\n\n我需要为每一个 user id 创建一个新的文件\n\n```\nlocalhost/api/users/1.php\nlocalhost/api/users/2.php\n```\n\n以此类推。\n\n这种方案有两个问题\n\n1. 为每个用户创建一个新文件是非常无聊和耗时的\n2. 路由不优雅，每个路径后面都带有 .php\n\n### 解决方案\n\n让我们解决这个问题。\n\n正如我所提到的，我不想使用任何框架，并且我想使用最简单的、最让人能够理解的方案\n\n让我们看看如何解决这个问题\n\n在 api 文件夹下创建一个叫 .htaccess 的文件，并且将下面的文本复制进去\n\n```htaccess\nRewriteEngine On\nRewriteBase /api\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(.+)$ index.php [QSA,L]\n```\n\n我们告诉服务器，将所有指向 /api 的请求都转发到 index.php 文件\n\n现在，所有的 url 都指向 index.php 了，比如下面的 url 都是指向 index.php 的\n\n```\napi/users\napi/users/10\napi/users/5\n```\n\n现在我们同时解决了这两个问题\n\n1. 所有的 url 都被一个文件处理\n2. url 都很优雅，结尾处没有 .php\n\n## URI\n\n但如何知道用户请求的是哪个 uri 呢？\n\n很简单，使用 $_SERVER 超全局变量\n\n让我们来看一些例子\n\n```php\n// url api/users\necho $_SERVER['REQUEST_URI'];\n// /api/users\n\n// url api/users/5\necho $_SERVER['REQUEST_URI'];\n// /api/users/5\n\n// url api\necho $_SERVER['REQUEST_URI'];\n// /api\n```\n\n看见了吗？这就是我们所需要的\n\n现在，使用一个简单的 if 或者 switch 语句，我们就可以处理不同的路径了\n\n如果你从来没有用过这些语句，去读[这篇文章](https://amirkamizi.com/blog/php-conditionals)。\n\n## 请求方法\n\n接下来，我们需要从请求中获取请求的方法，以查看它是GET、POST、PUT、PATCH还是DELETE。\n\n你可以从 $_SERVER 超全局数组中获取这个信息。\n\n```php\n$_SERVER['REQUEST_METHOD']\n```\n\n让我们将这两个值存储在变量中：\n\n```php\n$uri = $_SERVER['REQUEST_URI'];\n$method = $_SERVER['REQUEST_METHOD'];\n```\n\n我们可以在一个简单的 switch 语句中使用这两个变量来处理不同的请求。\n\n我们需要判断以下请求\n\n- api/users 的 GET 请求\n- api/users/{id} 的 GET 请求\n- api/users 的 POST 请求\n- api/users/{id} 的 PUT 请求\n- api/users/{id} 的 DELETE 请求\n\n让我们编写针对上述请求的 switch 语句\n\n```php\nswitch ($method | $uri) {\n   /*\n   * Path: GET /api/users\n   * Task: show all the users\n   */\n   case ($method == 'GET' && $uri == '/api/users'):\n       break;\n   /*\n   * Path: GET /api/users/{id}\n   * Task: get one user\n   */\n   case ($method == 'GET' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n       break;\n   /*\n   * Path: POST /api/users\n   * Task: store one user\n   */\n   case ($method == 'POST' && $uri == '/api/users'):\n       break;\n   /*\n   * Path: PUT /api/users/{id}\n   * Task: update one user\n   */\n   case ($method == 'PUT' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n       break;\n   /*\n   * Path: DELETE /api/users/{id}\n   * Task: delete one user\n   */\n   case ($method == 'DELETE' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n       break;\n   /*\n   * Path: ?\n   * Task: this path doesn't match any of the defined paths\n   *      throw an error\n   */\n   default:\n       break;\n}\n```\n\n当我们想要在 switch 语句中使用两个变量，我们可以使用 | 符号\n\n如果你想知道 preg_match 是如何工作的，看[这篇文章](https://amirkamizi.com/blog/php-regular-expressions)。\n\n## 数据库\n\n现在是说说数据。储存数据的最好方法是将数据储存在数据库中。但在这篇教程中，我不想使用数据库。因此，我们使用一个 json 文件当作数据库来保证数据的持久性。\n\n我的 json 文件看起来长成这个样子：\n\n```json\n{\n   \"1\": \"Pratham\",\n   \"2\": \"Amir\"\n}\n```\n\n如果你想知道如何使用 json，看[这篇文章](https://amirkamizi.com/blog/php-xml-and-json)\n\n我加载 json 数据并将其转换为数组，然后在 php 使用他们。如果我想要更改数据，我将数组转换回 json 并将其重新写入文件。\n\n要将整个文件作为一个字符串读取并存储在变量中，我使用：\n\n```php\nfile_get_contents($jsonFile);\n```\n\n而要将json写入文件，我使用：\n\n```php\nfile_put_contents($jsonFile, $data);\n```\n\n好了，现在我们的数据库处理好了，让我们开始处理所有的路径。\n\n我使用 Postman 发送请求并查看响应。\n\n## 获取所有用户\n\n```php\ncase ($method == 'GET' && $uri == '/api/users'):\n   header('Content-Type: application/json');\n   echo json_encode($users, JSON_PRETTY_PRINT);\n   break;\n```\n\n![](https://static.031130.xyz/uploads/2024/08/12/6577fcdf64a96.webp)\n\n## 获取单个用户\n\n```php\ncase ($method == 'GET' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n   header('Content-Type: application/json');\n   // get the id\n   $id = basename($uri);\n   if (!array_key_exists($id, $users)) {\n       http_response_code(404);\n       echo json_encode(['error' => 'user does not exist']);\n       break;\n   }\n   $responseData = [$id => $users[$id]];\n   echo json_encode($responseData, JSON_PRETTY_PRINT);\n   break;\n```\n\n**basename**($uri) 会将 uri 的最后一部分给我。比如一个 api/users/10 这样的路径，它会返回 10.\n\n然后我使用 **array_key_exists** 检查是否存在一个 id 为 10 的用户\n\n![](https://static.031130.xyz/uploads/2024/08/12/6577fd77c3d06.webp)\n\n## 添加一个新用户\n\n```php\ncase ($method == 'POST' && $uri == '/api/users'):\n   header('Content-Type: application/json');\n   $requestBody = json_decode(file_get_contents('php://input'), true);\n   $name = $requestBody['name'];\n   if (empty($name)) {\n       http_response_code(404);\n       echo json_encode(['error' => 'Please add name of the user']);\n   }\n   $users[] = $name;\n   $data = json_encode($users, JSON_PRETTY_PRINT);\n   file_put_contents($jsonFile, $data);\n   echo json_encode(['message' => 'user added successfully']);\n   break;\n```\n\n我使用 **file_get_contents('php://input')** 以获取请求的 body 部分。由于在这个例子中我使用的是 json，我将会解码 json 以便我可以获取到名字。\n\n![](https://static.031130.xyz/uploads/2024/08/12/6577fdca88f76.webp)\n\n## 更新一个用户\n\n```php\ncase ($method == 'PUT' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n   header('Content-Type: application/json');\n   // get the id\n   $id = basename($uri);\n   if (!array_key_exists($id, $users)) {\n       http_response_code(404);\n       echo json_encode(['error' => 'user does not exist']);\n       break;\n   }\n   $requestBody = json_decode(file_get_contents('php://input'), true);\n   $name = $requestBody['name'];\n   if (empty($name)) {\n       http_response_code(404);\n       echo json_encode(['error' => 'Please add name of the user']);\n   }\n   $users[$id] = $name;\n   $data = json_encode($users, JSON_PRETTY_PRINT);\n   file_put_contents($jsonFile, $data);\n   echo json_encode(['message' => 'user updated successfully']);\n   break;\n```\n\n![](https://static.031130.xyz/uploads/2024/08/12/6577fdf646402.webp)\n\n## 删除一个用户\n\n```php\ncase ($method == 'DELETE' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n   header('Content-Type: application/json');\n   // get the id\n   $id = basename($uri);\n   if (empty($users[$id])) {\n       http_response_code(404);\n       echo json_encode(['error' => 'user does not exist']);\n       break;\n   }\n   unset($users[$id]);\n   $data = json_encode($users, JSON_PRETTY_PRINT);\n   file_put_contents($jsonFile, $data);\n   echo json_encode(['message' => 'user deleted successfully']);\n   break;\n```\n\n![](https://static.031130.xyz/uploads/2024/08/12/6577fe0c3a95b.webp)\n\n## 最终文件\n\n现在我们的 index.php 文件看起来是这样的\n\n在 70 行左右的代码中，我们使用 PHP 创建了一个 RESTful API，很神奇吧？\n\n```php\n\u003C?php\n$jsonFile = 'users.json';\n$data = file_get_contents($jsonFile);\n$users = json_decode($data, true);\n$uri = $_SERVER['REQUEST_URI'];\n$method = $_SERVER['REQUEST_METHOD'];\nswitch ($method | $uri) {\n   case ($method == 'GET' && $uri == '/api/users'):\n       header('Content-Type: application/json');\n       echo json_encode($users, JSON_PRETTY_PRINT);\n       break;\n   case ($method == 'GET' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n       header('Content-Type: application/json');\n       $id = basename($uri);\n       if (!array_key_exists($id, $users)) {\n           http_response_code(404);\n           echo json_encode(['error' => 'user does not exist']);\n           break;\n       }\n       $responseData = [$id => $users[$id]];\n       echo json_encode($responseData, JSON_PRETTY_PRINT);\n       break;\n   case ($method == 'POST' && $uri == '/api/users'):\n       header('Content-Type: application/json');\n       $requestBody = json_decode(file_get_contents('php://input'), true);\n       $name = $requestBody['name'];\n       if (empty($name)) {\n           http_response_code(404);\n           echo json_encode(['error' => 'Please add name of the user']);\n       }\n       $users[] = $name;\n       $data = json_encode($users, JSON_PRETTY_PRINT);\n       file_put_contents($jsonFile, $data);\n       echo json_encode(['message' => 'user added successfully']);\n       break;\n   case ($method == 'PUT' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n       header('Content-Type: application/json');\n       $id = basename($uri);\n       if (!array_key_exists($id, $users)) {\n           http_response_code(404);\n           echo json_encode(['error' => 'user does not exist']);\n           break;\n       }\n       $requestBody = json_decode(file_get_contents('php://input'), true);\n       $name = $requestBody['name'];\n       if (empty($name)) {\n           http_response_code(404);\n           echo json_encode(['error' => 'Please add name of the user']);\n       }\n       $users[$id] = $name;\n       $data = json_encode($users, JSON_PRETTY_PRINT);\n       file_put_contents($jsonFile, $data);\n       echo json_encode(['message' => 'user updated successfully']);\n       break;\n   case ($method == 'DELETE' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n       header('Content-Type: application/json');\n       $id = basename($uri);\n       if (empty($users[$id])) {\n           http_response_code(404);\n           echo json_encode(['error' => 'user does not exist']);\n           break;\n       }\n       unset($users[$id]);\n       $data = json_encode($users, JSON_PRETTY_PRINT);\n       file_put_contents($jsonFile, $data);\n       echo json_encode(['message' => 'user deleted successfully']);\n       break;\n   default:\n       http_response_code(404);\n       echo json_encode(['error' => \"We cannot find what you're looking for.\"]);\n       break;\n}\n```\n\n## 额外内容\n\n在这种情况下，我不希望删除我的所有用户，所以我加了一个新的语句，如果只剩下最后一个用户，它将不会被删除，像这样\n```php\nif (sizeof($users) == 1){\n   http_response_code(404);\n   echo json_encode(['error' => 'there is only one user left. you cannot delete it!']);\n   break;\n}\n```\n\n## 源码\n\n你可以在[原作者的 github](https://github.com/amirkamizi/php-simple-restful-api) 上看到完整注释的源代码以及 post man 集合\n\n## 总结\n\n现在你知道如何在 PHP 中创建一个简单的 RESTful API。\n\n我推荐你打开一个 PHP 文件并复习所有的这些我们进行的步骤，并且像本文一样添加一些额外的资源\n\n如果你有任何的建议、问题或者观点，请联系文章原作者，他期待着听到你的声音。\n\n## 要点\n\n- 不使用框架，用 PHP 创建一个 RESTful API\n- 在 PHP 中使用优雅的 URL\n- 处理请求的 body\n- 使用 Json 文件作为你的数据库\n- 使用多个变量作为 switch 的关键词\n",{"title":5,"description":110},"posts/php-simple-rest-api",false,[1525,1526],"翻译","PHP","S1ZSmbMG1MlC-AaTt4QBRvqKYMQDGOL76U1jU7zG56o",[1529,1534],{"title":1530,"path":1531,"stem":1532,"date":1533,"children":-1},"vuejs、php、caddy 与 docker —— web 期末大作业上云部署","/2023/12/27/php-and-vuejs-project-deploy-on-caddy","posts/php-and-vuejs-project-deploy-on-caddy","2023-12-27 22:09:00",{"title":1535,"path":1536,"stem":1537,"date":1538,"children":-1},"在 Hexo Fluid 主题中使用霞鹜文楷","/2023/11/28/use-lxgw-wenkai-in-hexo-fluid","posts/use-lxgw-wenkai-in-hexo-fluid","2023-11-28 00:16:23",1761837275664]