[{"data":1,"prerenderedAt":471},["ShallowReactive",2],{"post-2023-10-29-create-b23tv-remover-bot":3,"surround-2023-10-29-create-b23tv-remover-bot":459,"randomIndex/2023/10/29/create-b23tv-remover-bot/":470},{"id":4,"title":5,"body":6,"date":446,"description":38,"extension":447,"meta":448,"navigation":263,"path":449,"rawbody":450,"seo":451,"stem":452,"sticky":453,"tags":454,"__hash__":458},"posts/posts/create-b23tv-remover-bot.md","创建 b23.tv 追踪参数移除 bot",{"type":7,"value":8,"toc":441},"minimark",[9,16,19,22,25,30,33,40,43,53,56,60,63,66,73,76,145,148,150,225,229,232,234,413,424,437],[10,11,12],"blockquote",{},[13,14,15],"p",{},"前两天似乎有人高调宣称自己发 b23.tv 没问题，结果过两天就被拿下的消息。我自己并不是他的粉丝，但这个戏剧性的流言也又一次说明了注重隐私保护的重要性。",[13,17,18],{},"早前就有 b23.tf 和 b23.wtf 两个域名专门在做移除追踪参数的事情。只要将短链接中的 b23.tv 改成 b23.tf ，别人访问链接时就会被转到移除了追踪参数的链接。但这需要发送者在分享时手动更改域名。",[13,20,21],{},"因此，我也开始为自己的 bot 添加了 b23.tv 的 track id 移除功能。当用户的信息中包含 b23.tv 短链接，将会自动发送一条移除了 track id 的信息，用户就可以直接点击无追踪参数的链接。",[13,23,24],{},"当然，这两种方案并不能保护链接分享者的个人信息泄漏，因为 b23.tv 后面的参数是可以被别人看到的，通过这些参数就可以定位到链接分享者的个人信息，所以不能防止群里的内鬼倒查分享者的个人信息，但起码可以阻止大数据算法对群里的几个人产生关联。",[26,27,29],"h2",{"id":28},"b23-短链接将会泄漏哪些个人信息","b23 短链接将会泄漏哪些个人信息？",[13,31,32],{},"通过 curl 命令，我们就可以看到 b23.tv 短链接重定向到了哪个页面。",[13,34,35],{},[36,37],"img",{"alt":38,"src":39},"","https://static.031130.xyz/uploads/2024/08/12/653d49fe955f7.webp",[13,41,42],{},"这是所携带的 GET 请求参数",[44,45,50],"pre",{"className":46,"code":48,"language":49},[47],"language-text"," 'buvid': ['*************************************'],\n 'from_spmid': ['tm.recommend.0.0'],\n 'is_story_h5': ['false'],\n 'mid': ['************************'],\n 'p': ['1'],\n 'plat_id': ['116'],\n 'share_from': ['ugc'],\n 'share_medium': ['android'],\n 'share_plat': ['android'],\n 'share_session_id': ['************************************'],\n 'share_source': ['GENERIC'],\n 'share_tag': ['s_i'],\n 'spmid': ['united.player-video-detail.0.0'],\n 'timestamp': ['**********'],\n 'unique_k': ['*******'],\n 'up_id': ['*********']\n","text",[51,52,48],"code",{"__ignoreMap":38},[13,54,55],{},"其中，我替换成星号的部分都是有可能涉及到信息泄漏的部分，甚至没打码的部分也可以用来推测你的平台信息。",[26,57,59],{"id":58},"qq-bot","QQ Bot",[13,61,62],{},"尽管目前腾讯针对 go-cqhttp 的封杀力度挺大的，但我还在用。",[13,64,65],{},"在 QQ 中的 b23.tv 追踪参数移除主要有两个方面。一是用户发送的消息中可能含有 b23.tv 短链接，二是用户在手机端直接调用 bilibili 自带的「分享到QQ」的功能，这样的话在 QQ 中会显示为小程序，go-cqhttp 接收到的是一个 json 的 CQ Code。",[13,67,68,69,72],{},"针对第一种情况，处理起来就相对简单，首先判断用户的信息中是否存在 ",[51,70,71],{},"b23.tv"," 这一关键词，然后用正则表达式获取完整的 b23 链接，再使用 python 的 requests 库去请求对应链接，返回带有明文追踪参数的 url 后去除 GET 参数即可。",[13,74,75],{},"参考代码如下",[44,77,81],{"className":78,"code":79,"language":80,"meta":38,"style":38},"language-python shiki shiki-themes one-light one-dark-pro","if 'https://b23.tv' in message:\n    pattern = r'https://b23\\.tv/[^\\s]+'\n    urls = re.findall(pattern, message)\n    ret = 'TrackID removed:'\n    for i in urls:\n    ret = ret + '\\n' + b23_to_bvid(i)\n    \ndef b23_to_bvid(url):\n    tracked_url = requests.get(url,allow_redirects=False).headers['location']\n    return tracked_url.split('?', 1)[0]\n","python",[51,82,83,91,97,103,109,115,121,127,133,139],{"__ignoreMap":38},[84,85,88],"span",{"class":86,"line":87},"line",1,[84,89,90],{},"if 'https://b23.tv' in message:\n",[84,92,94],{"class":86,"line":93},2,[84,95,96],{},"    pattern = r'https://b23\\.tv/[^\\s]+'\n",[84,98,100],{"class":86,"line":99},3,[84,101,102],{},"    urls = re.findall(pattern, message)\n",[84,104,106],{"class":86,"line":105},4,[84,107,108],{},"    ret = 'TrackID removed:'\n",[84,110,112],{"class":86,"line":111},5,[84,113,114],{},"    for i in urls:\n",[84,116,118],{"class":86,"line":117},6,[84,119,120],{},"    ret = ret + '\\n' + b23_to_bvid(i)\n",[84,122,124],{"class":86,"line":123},7,[84,125,126],{},"    \n",[84,128,130],{"class":86,"line":129},8,[84,131,132],{},"def b23_to_bvid(url):\n",[84,134,136],{"class":86,"line":135},9,[84,137,138],{},"    tracked_url = requests.get(url,allow_redirects=False).headers['location']\n",[84,140,142],{"class":86,"line":141},10,[84,143,144],{},"    return tracked_url.split('?', 1)[0]\n",[13,146,147],{},"而针对第二种情况，则需要先解析对应的 json 信息，再参考第一种方法获取无追踪参数的链接。",[13,149,75],{},[44,151,153],{"className":78,"code":152,"language":80,"meta":38,"style":38},"if message.startswith('[CQ:json,data') and 'b23.tv' in message:\n    decoded_data = html.unescape(message)\n    match = re.search(r'\\[CQ:json,data=(\\{.*?\\})\\]', decoded_data)\n    json_str = match.group(1)\n    json_data = json.loads(json_str)\n    if json_data['meta'].get('detail_1') is not None:\n        raw_url = json_data['meta'].get('detail_1').get('qqdocurl')\n    elif json_data['meta'].get('news') is not None:\n        raw_url = json_data['meta'].get('news').get('jumpUrl')\n    clean_url = b23_to_bvid(raw_url)\n    \ndef b23_to_bvid(url):\n    tracked_url = requests.get(url,allow_redirects=False).headers['location']\n    return tracked_url.split('?', 1)[0]\n",[51,154,155,160,165,170,175,180,185,190,195,200,205,210,215,220],{"__ignoreMap":38},[84,156,157],{"class":86,"line":87},[84,158,159],{},"if message.startswith('[CQ:json,data') and 'b23.tv' in message:\n",[84,161,162],{"class":86,"line":93},[84,163,164],{},"    decoded_data = html.unescape(message)\n",[84,166,167],{"class":86,"line":99},[84,168,169],{},"    match = re.search(r'\\[CQ:json,data=(\\{.*?\\})\\]', decoded_data)\n",[84,171,172],{"class":86,"line":105},[84,173,174],{},"    json_str = match.group(1)\n",[84,176,177],{"class":86,"line":111},[84,178,179],{},"    json_data = json.loads(json_str)\n",[84,181,182],{"class":86,"line":117},[84,183,184],{},"    if json_data['meta'].get('detail_1') is not None:\n",[84,186,187],{"class":86,"line":123},[84,188,189],{},"        raw_url = json_data['meta'].get('detail_1').get('qqdocurl')\n",[84,191,192],{"class":86,"line":129},[84,193,194],{},"    elif json_data['meta'].get('news') is not None:\n",[84,196,197],{"class":86,"line":135},[84,198,199],{},"        raw_url = json_data['meta'].get('news').get('jumpUrl')\n",[84,201,202],{"class":86,"line":141},[84,203,204],{},"    clean_url = b23_to_bvid(raw_url)\n",[84,206,208],{"class":86,"line":207},11,[84,209,126],{},[84,211,213],{"class":86,"line":212},12,[84,214,132],{},[84,216,218],{"class":86,"line":217},13,[84,219,138],{},[84,221,223],{"class":86,"line":222},14,[84,224,144],{},[26,226,228],{"id":227},"tg-bot","TG Bot",[13,230,231],{},"这个平台是提供了 Bot 的 API 的，所以也不用担心会被官方封杀，可惜用户访问起来可能相对困难，也不能要求所有联系人都迁移到这个平台上。思路也是一样的，用 requests 去请求 b23 短链，返回去除跟踪参数的 url。",[13,233,75],{},[44,235,237],{"className":78,"code":236,"language":80,"meta":38,"style":38},"from telegram import Update\nfrom telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters\nimport requests\nimport re\n\nua = 'Mozilla/5.0 (X11; Linux x86_64; rv:120.0) Gecko/20100101 Firefox/120.0'\n\nasync def start(update: Update, context):\n    await context.bot.send_message(chat_id=update.effective_chat.id, text=\"Hello World!\")\n    \nasync def b23_remover(update: Update, context):\n    seng_msg = 'TrackID removed:'\n    if 'https://b23.tv' in update.message.text:\n        pattern = r'https://b23\\.tv/[^\\s]+'\n        urls = re.findall(pattern, update.message.text)\n        for i in urls:\n            seng_msg += '\\n' + await b23_to_bvid(i)\n        await context.bot.send_message(chat_id=update.effective_chat.id, text=seng_msg)\n        \nasync def b23_to_bvid(url):\n    tracked_url = requests.get(url,allow_redirects=False,headers={'User-Agent': ua}).headers['Location']\n    return tracked_url.split('?', 1)[0]\n    \nstart_handler = CommandHandler(\"start\", start)\nb23_remove_handler = MessageHandler(filters.TEXT, b23_remover)\n\nif __name__ == '__main__':\n    TOKEN='**********************************************'\n    application = ApplicationBuilder().token(TOKEN).build()\n    application.add_handler(start_handler)\n    application.add_handler(b23_remove_handler)\n    application.run_polling()\n\n",[51,238,239,244,249,254,259,265,270,274,279,284,288,293,298,303,308,314,320,326,332,338,344,350,355,360,366,372,377,383,389,395,401,407],{"__ignoreMap":38},[84,240,241],{"class":86,"line":87},[84,242,243],{},"from telegram import Update\n",[84,245,246],{"class":86,"line":93},[84,247,248],{},"from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters\n",[84,250,251],{"class":86,"line":99},[84,252,253],{},"import requests\n",[84,255,256],{"class":86,"line":105},[84,257,258],{},"import re\n",[84,260,261],{"class":86,"line":111},[84,262,264],{"emptyLinePlaceholder":263},true,"\n",[84,266,267],{"class":86,"line":117},[84,268,269],{},"ua = 'Mozilla/5.0 (X11; Linux x86_64; rv:120.0) Gecko/20100101 Firefox/120.0'\n",[84,271,272],{"class":86,"line":123},[84,273,264],{"emptyLinePlaceholder":263},[84,275,276],{"class":86,"line":129},[84,277,278],{},"async def start(update: Update, context):\n",[84,280,281],{"class":86,"line":135},[84,282,283],{},"    await context.bot.send_message(chat_id=update.effective_chat.id, text=\"Hello World!\")\n",[84,285,286],{"class":86,"line":141},[84,287,126],{},[84,289,290],{"class":86,"line":207},[84,291,292],{},"async def b23_remover(update: Update, context):\n",[84,294,295],{"class":86,"line":212},[84,296,297],{},"    seng_msg = 'TrackID removed:'\n",[84,299,300],{"class":86,"line":217},[84,301,302],{},"    if 'https://b23.tv' in update.message.text:\n",[84,304,305],{"class":86,"line":222},[84,306,307],{},"        pattern = r'https://b23\\.tv/[^\\s]+'\n",[84,309,311],{"class":86,"line":310},15,[84,312,313],{},"        urls = re.findall(pattern, update.message.text)\n",[84,315,317],{"class":86,"line":316},16,[84,318,319],{},"        for i in urls:\n",[84,321,323],{"class":86,"line":322},17,[84,324,325],{},"            seng_msg += '\\n' + await b23_to_bvid(i)\n",[84,327,329],{"class":86,"line":328},18,[84,330,331],{},"        await context.bot.send_message(chat_id=update.effective_chat.id, text=seng_msg)\n",[84,333,335],{"class":86,"line":334},19,[84,336,337],{},"        \n",[84,339,341],{"class":86,"line":340},20,[84,342,343],{},"async def b23_to_bvid(url):\n",[84,345,347],{"class":86,"line":346},21,[84,348,349],{},"    tracked_url = requests.get(url,allow_redirects=False,headers={'User-Agent': ua}).headers['Location']\n",[84,351,353],{"class":86,"line":352},22,[84,354,144],{},[84,356,358],{"class":86,"line":357},23,[84,359,126],{},[84,361,363],{"class":86,"line":362},24,[84,364,365],{},"start_handler = CommandHandler(\"start\", start)\n",[84,367,369],{"class":86,"line":368},25,[84,370,371],{},"b23_remove_handler = MessageHandler(filters.TEXT, b23_remover)\n",[84,373,375],{"class":86,"line":374},26,[84,376,264],{"emptyLinePlaceholder":263},[84,378,380],{"class":86,"line":379},27,[84,381,382],{},"if __name__ == '__main__':\n",[84,384,386],{"class":86,"line":385},28,[84,387,388],{},"    TOKEN='**********************************************'\n",[84,390,392],{"class":86,"line":391},29,[84,393,394],{},"    application = ApplicationBuilder().token(TOKEN).build()\n",[84,396,398],{"class":86,"line":397},30,[84,399,400],{},"    application.add_handler(start_handler)\n",[84,402,404],{"class":86,"line":403},31,[84,405,406],{},"    application.add_handler(b23_remove_handler)\n",[84,408,410],{"class":86,"line":409},32,[84,411,412],{},"    application.run_polling()\n",[13,414,415,416,423],{},"代码编写参考了 ",[417,418,422],"a",{"href":419,"rel":420},"https://krau.top/posts/tg-bot-dev-note-kmua",[421],"nofollow","柯罗krau的博客 | krau's blog","，使用时请注意以下问题:",[425,426,427,431,434],"ul",{},[428,429,430],"li",{},"你的机子是否拥有能访问到对应的 api 的网络环境",[428,432,433],{},"botfather 那边是否打开了 allow group",[428,435,436],{},"botfather 那边是否关闭了 privacy mode",[438,439,440],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":38,"searchDepth":93,"depth":93,"links":442},[443,444,445],{"id":28,"depth":93,"text":29},{"id":58,"depth":93,"text":59},{"id":227,"depth":93,"text":228},"2023-10-29 00:35:48","md",{},"/2023/10/29/create-b23tv-remover-bot","---\ntitle: 创建 b23.tv 追踪参数移除 bot\ndate: 2023-10-29 00:35:48\nsticky:\ntags:\n- Python\n- Bot\n- Privacy\n---\n\n> 前两天似乎有人高调宣称自己发 b23.tv 没问题，结果过两天就被拿下的消息。我自己并不是他的粉丝，但这个戏剧性的流言也又一次说明了注重隐私保护的重要性。\n\n早前就有 b23.tf 和 b23.wtf 两个域名专门在做移除追踪参数的事情。只要将短链接中的 b23.tv 改成 b23.tf ，别人访问链接时就会被转到移除了追踪参数的链接。但这需要发送者在分享时手动更改域名。\n\n因此，我也开始为自己的 bot 添加了 b23.tv 的 track id 移除功能。当用户的信息中包含 b23.tv 短链接，将会自动发送一条移除了 track id 的信息，用户就可以直接点击无追踪参数的链接。\n\n当然，这两种方案并不能保护链接分享者的个人信息泄漏，因为 b23.tv 后面的参数是可以被别人看到的，通过这些参数就可以定位到链接分享者的个人信息，所以不能防止群里的内鬼倒查分享者的个人信息，但起码可以阻止大数据算法对群里的几个人产生关联。\n\n## b23 短链接将会泄漏哪些个人信息？\n\n通过 curl 命令，我们就可以看到 b23.tv 短链接重定向到了哪个页面。\n\n![](https://static.031130.xyz/uploads/2024/08/12/653d49fe955f7.webp)\n\n这是所携带的 GET 请求参数\n\n```\n 'buvid': ['*************************************'],\n 'from_spmid': ['tm.recommend.0.0'],\n 'is_story_h5': ['false'],\n 'mid': ['************************'],\n 'p': ['1'],\n 'plat_id': ['116'],\n 'share_from': ['ugc'],\n 'share_medium': ['android'],\n 'share_plat': ['android'],\n 'share_session_id': ['************************************'],\n 'share_source': ['GENERIC'],\n 'share_tag': ['s_i'],\n 'spmid': ['united.player-video-detail.0.0'],\n 'timestamp': ['**********'],\n 'unique_k': ['*******'],\n 'up_id': ['*********']\n```\n\n其中，我替换成星号的部分都是有可能涉及到信息泄漏的部分，甚至没打码的部分也可以用来推测你的平台信息。\n\n## QQ Bot\n\n尽管目前腾讯针对 go-cqhttp 的封杀力度挺大的，但我还在用。\n\n在 QQ 中的 b23.tv 追踪参数移除主要有两个方面。一是用户发送的消息中可能含有 b23.tv 短链接，二是用户在手机端直接调用 bilibili 自带的「分享到QQ」的功能，这样的话在 QQ 中会显示为小程序，go-cqhttp 接收到的是一个 json 的 CQ Code。\n\n针对第一种情况，处理起来就相对简单，首先判断用户的信息中是否存在 `b23.tv` 这一关键词，然后用正则表达式获取完整的 b23 链接，再使用 python 的 requests 库去请求对应链接，返回带有明文追踪参数的 url 后去除 GET 参数即可。\n\n参考代码如下\n\n```python\nif 'https://b23.tv' in message:\n\tpattern = r'https://b23\\.tv/[^\\s]+'\n\turls = re.findall(pattern, message)\n    ret = 'TrackID removed:'\n\tfor i in urls:\n\tret = ret + '\\n' + b23_to_bvid(i)\n    \ndef b23_to_bvid(url):\n    tracked_url = requests.get(url,allow_redirects=False).headers['location']\n    return tracked_url.split('?', 1)[0]\n```\n\n而针对第二种情况，则需要先解析对应的 json 信息，再参考第一种方法获取无追踪参数的链接。\n\n参考代码如下\n\n```python\nif message.startswith('[CQ:json,data') and 'b23.tv' in message:\n    decoded_data = html.unescape(message)\n    match = re.search(r'\\[CQ:json,data=(\\{.*?\\})\\]', decoded_data)\n    json_str = match.group(1)\n    json_data = json.loads(json_str)\n    if json_data['meta'].get('detail_1') is not None:\n\t\traw_url = json_data['meta'].get('detail_1').get('qqdocurl')\n\telif json_data['meta'].get('news') is not None:\n\t\traw_url = json_data['meta'].get('news').get('jumpUrl')\n    clean_url = b23_to_bvid(raw_url)\n    \ndef b23_to_bvid(url):\n    tracked_url = requests.get(url,allow_redirects=False).headers['location']\n    return tracked_url.split('?', 1)[0]\n```\n\n## TG Bot\n\n这个平台是提供了 Bot 的 API 的，所以也不用担心会被官方封杀，可惜用户访问起来可能相对困难，也不能要求所有联系人都迁移到这个平台上。思路也是一样的，用 requests 去请求 b23 短链，返回去除跟踪参数的 url。\n\n参考代码如下\n\n```python\nfrom telegram import Update\nfrom telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters\nimport requests\nimport re\n\nua = 'Mozilla/5.0 (X11; Linux x86_64; rv:120.0) Gecko/20100101 Firefox/120.0'\n\nasync def start(update: Update, context):\n    await context.bot.send_message(chat_id=update.effective_chat.id, text=\"Hello World!\")\n    \nasync def b23_remover(update: Update, context):\n    seng_msg = 'TrackID removed:'\n    if 'https://b23.tv' in update.message.text:\n        pattern = r'https://b23\\.tv/[^\\s]+'\n        urls = re.findall(pattern, update.message.text)\n        for i in urls:\n            seng_msg += '\\n' + await b23_to_bvid(i)\n        await context.bot.send_message(chat_id=update.effective_chat.id, text=seng_msg)\n        \nasync def b23_to_bvid(url):\n    tracked_url = requests.get(url,allow_redirects=False,headers={'User-Agent': ua}).headers['Location']\n    return tracked_url.split('?', 1)[0]\n    \nstart_handler = CommandHandler(\"start\", start)\nb23_remove_handler = MessageHandler(filters.TEXT, b23_remover)\n\nif __name__ == '__main__':\n    TOKEN='**********************************************'\n    application = ApplicationBuilder().token(TOKEN).build()\n    application.add_handler(start_handler)\n    application.add_handler(b23_remove_handler)\n    application.run_polling()\n\n```\n\n代码编写参考了 [柯罗krau的博客 | krau's blog](https://krau.top/posts/tg-bot-dev-note-kmua)，使用时请注意以下问题:\n\n- 你的机子是否拥有能访问到对应的 api 的网络环境\n- botfather 那边是否打开了 allow group\n- botfather 那边是否关闭了 privacy mode\n",{"title":5,"description":38},"posts/create-b23tv-remover-bot",false,[455,456,457],"Python","Bot","Privacy","rfAytljthrlO2VrFChOe-uBgzhFiQ_taGaOFM3KvS1k",[460,465],{"title":461,"path":462,"stem":463,"date":464,"children":-1},"使用 Root 后的安卓手机获取向日葵智能插座 C2 的开关 api","/2023/11/01/unveiling-sunflower-smart-adapter-api-intercepting-utilizing-api-android-packet-sniffing","posts/unveiling-sunflower-smart-adapter-api-intercepting-utilizing-api-android-packet-sniffing","2023-11-01 23:46:28",{"title":466,"path":467,"stem":468,"date":469,"children":-1},"jinja2 中如何优雅地实现换行","/2023/09/03/jinja2-nl-to-br","posts/jinja2-nl-to-br","2023-09-03 13:37:35",0,1761837277658]