[{"data":1,"prerenderedAt":157},["ShallowReactive",2],{"post-2023-11-01-unveiling-sunflower-smart-adapter-api-intercepting-utilizing-api-android-packet-sniffing":3,"surround-2023-11-01-unveiling-sunflower-smart-adapter-api-intercepting-utilizing-api-android-packet-sniffing":145,"randomIndex/2023/11/01/unveiling-sunflower-smart-adapter-api-intercepting-utilizing-api-android-packet-sniffing/":156},{"id":4,"title":5,"body":6,"date":129,"description":126,"extension":130,"meta":131,"navigation":132,"path":133,"rawbody":134,"seo":135,"stem":136,"sticky":137,"tags":138,"__hash__":144},"posts/posts/unveiling-sunflower-smart-adapter-api-intercepting-utilizing-api-android-packet-sniffing.md","使用 Root 后的安卓手机获取向日葵智能插座 C2 的开关 api",{"type":7,"value":8,"toc":125},"minimark",[9,24,27,34,37,43,46,91,94,97,103,106,112,119],[10,11,12],"blockquote",{},[13,14,15,16,23],"p",{},"之前看到 ",[17,18,22],"a",{"href":19,"rel":20},"https://https.gs/archives/338/",[21],"nofollow","https.gs 上的一篇文章","，发现可以抓取向日葵智能插座 C1Pro 的开关 api，并实现局域网或公网的控制。这样一来，我们其实就不需要依赖于向日葵自己家的 App 去实现智能插座的开关操作，还是比较方便的。今年趁着双十一，直接低价拿下来带有计电功能的 C2，便也来试一试能不能抓到接口。",[13,25,26],{},"首先，拿到插座以后肯定还是下载向日葵的官方 App，完成 wifi 的链接，这里就不再赘述。",[13,28,29],{},[30,31],"img",{"alt":32,"src":33},"向日葵的操作界面","https://static.031130.xyz/uploads/2024/08/12/65427474ba54d.webp",[13,35,36],{},"然后就可以打开我们的抓包软件。需要注意的是，原博客中抓到的接口是 http 协议，但这个接口在新版的 App 上已经变为了 https 协议，因此我们需要找一台 Root 过后的安卓机去抓包。抓包的步骤没什么好说的，用 Root 权限给本地安装自己的 CA 证书，然后打开抓包模式，在向日葵的 App 那边开关几次插座，回来就能看到这一段时间内的请求。",[13,38,39],{},[30,40],{"alt":41,"src":42},"HttpCanary 操作界面","https://static.031130.xyz/uploads/2024/08/12/654275e167583.webp",[13,44,45],{},"点开可以看到，这是一个 GET 请求，一共有如下几个参数",[47,48,49,57,63,69,79,85],"ul",{},[50,51,52,56],"li",{},[53,54,55],"code",{},"status"," 这是状态设置，设置为 1 时为打开指令，0 为关闭指令",[50,58,59,62],{},[53,60,61],{},"sn"," 这个应该是设备码",[50,64,65,68],{},[53,66,67],{},"key"," 应该是用来操作设备的密钥",[50,70,71,74,75,78],{},[53,72,73],{},"_api"," 操作类型，我只关心插座的打开关闭，所以设为 ",[53,76,77],{},"set_plug_status"," 即可",[50,80,81,84],{},[53,82,83],{},"time"," 奇奇怪怪的而参数，也不是 unix 时间戳，反正照抄就行了",[50,86,87,90],{},[53,88,89],{},"index"," 原博说是用来给插排操作指定第几个孔位的，我们智能插座直接设置为 0 即可",[13,92,93],{},"理论上你用抓出来的 url 已经可以实现公网访问了，但我测试下来并不行，可能是向日葵那边的服务器做了别的校验，比如说判断了 ua 之类的？不过无所谓，我本来就是打算局域网内操作。",[13,95,96],{},"登陆路由器后台，寻找疑似智能插座的设备，一般很容易就能找到。",[13,98,99],{},[30,100],{"alt":101,"src":102},"路由器后台管理界面","https://static.031130.xyz/uploads/2024/08/12/654277f0d5c2a.webp",[13,104,105],{},"使用 nmap 命令扫对应 ip 开放的端口。不知道是不是巧合，我和原博扫出来的端口都是 6767 端口。",[13,107,108],{},[30,109],{"alt":110,"src":111},"扫描端口","https://static.031130.xyz/uploads/2024/08/12/654278685f137.webp",[13,113,114,115,118],{},"将上面抓到的 url 的域名换成 ",[53,116,117],{},"ip:port","，https 协议改成 http 协议，在浏览器中直接访问，获得了 0 的状态码，插座也正常开关。",[13,120,121],{},[30,122],{"alt":123,"src":124},"浏览器操作测试","https://static.031130.xyz/uploads/2024/08/12/654279513c1f8.webp",{"title":126,"searchDepth":127,"depth":127,"links":128},"",2,[],"2023-11-01 23:46:28","md",{},true,"/2023/11/01/unveiling-sunflower-smart-adapter-api-intercepting-utilizing-api-android-packet-sniffing","---\ntitle: 使用 Root 后的安卓手机获取向日葵智能插座 C2 的开关 api\ndate: 2023-11-01 23:46:28\nsticky:\ntags:\n- Android\n- Network\n- IoT\n- Fun\n- Hardware\n---\n\n> 之前看到 [https.gs 上的一篇文章](https://https.gs/archives/338/)，发现可以抓取向日葵智能插座 C1Pro 的开关 api，并实现局域网或公网的控制。这样一来，我们其实就不需要依赖于向日葵自己家的 App 去实现智能插座的开关操作，还是比较方便的。今年趁着双十一，直接低价拿下来带有计电功能的 C2，便也来试一试能不能抓到接口。\n\n首先，拿到插座以后肯定还是下载向日葵的官方 App，完成 wifi 的链接，这里就不再赘述。\n\n![向日葵的操作界面](https://static.031130.xyz/uploads/2024/08/12/65427474ba54d.webp)\n\n然后就可以打开我们的抓包软件。需要注意的是，原博客中抓到的接口是 http 协议，但这个接口在新版的 App 上已经变为了 https 协议，因此我们需要找一台 Root 过后的安卓机去抓包。抓包的步骤没什么好说的，用 Root 权限给本地安装自己的 CA 证书，然后打开抓包模式，在向日葵的 App 那边开关几次插座，回来就能看到这一段时间内的请求。\n\n![HttpCanary 操作界面](https://static.031130.xyz/uploads/2024/08/12/654275e167583.webp)\n\n点开可以看到，这是一个 GET 请求，一共有如下几个参数\n\n- `status` 这是状态设置，设置为 1 时为打开指令，0 为关闭指令\n- `sn` 这个应该是设备码\n- `key` 应该是用来操作设备的密钥\n- `_api` 操作类型，我只关心插座的打开关闭，所以设为 `set_plug_status` 即可\n- `time` 奇奇怪怪的而参数，也不是 unix 时间戳，反正照抄就行了\n- `index` 原博说是用来给插排操作指定第几个孔位的，我们智能插座直接设置为 0 即可\n\n理论上你用抓出来的 url 已经可以实现公网访问了，但我测试下来并不行，可能是向日葵那边的服务器做了别的校验，比如说判断了 ua 之类的？不过无所谓，我本来就是打算局域网内操作。\n\n登陆路由器后台，寻找疑似智能插座的设备，一般很容易就能找到。\n\n![路由器后台管理界面](https://static.031130.xyz/uploads/2024/08/12/654277f0d5c2a.webp)\n\n使用 nmap 命令扫对应 ip 开放的端口。不知道是不是巧合，我和原博扫出来的端口都是 6767 端口。\n\n![扫描端口](https://static.031130.xyz/uploads/2024/08/12/654278685f137.webp)\n\n将上面抓到的 url 的域名换成 `ip:port`，https 协议改成 http 协议，在浏览器中直接访问，获得了 0 的状态码，插座也正常开关。\n\n![浏览器操作测试](https://static.031130.xyz/uploads/2024/08/12/654279513c1f8.webp)\n",{"title":5,"description":126},"posts/unveiling-sunflower-smart-adapter-api-intercepting-utilizing-api-android-packet-sniffing",false,[139,140,141,142,143],"Android","Network","IoT","Fun","Hardware","jGOHQLAYAAhFF2g_mLMm7qg0yG6FC9SEPGu4UZ8zZJU",[146,151],{"title":147,"path":148,"stem":149,"date":150,"children":-1},"通过巴法云将向日葵智能插座接入米家，实现小爱同学远程控制","/2023/11/02/integrating-sunflower-smart-socket-with-mi-home-via-bemfa-cloud","posts/integrating-sunflower-smart-socket-with-mi-home-via-bemfa-cloud","2023-11-02 10:17:02",{"title":152,"path":153,"stem":154,"date":155,"children":-1},"创建 b23.tv 追踪参数移除 bot","/2023/10/29/create-b23tv-remover-bot","posts/create-b23tv-remover-bot","2023-10-29 00:35:48",19,1761835687505]