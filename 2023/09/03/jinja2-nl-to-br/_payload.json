[{"data":1,"prerenderedAt":210},["ShallowReactive",2],{"post-2023-09-03-jinja2-nl-to-br":3,"surround-2023-09-03-jinja2-nl-to-br":199,"randomIndex/2023/09/03/jinja2-nl-to-br/":103},{"id":4,"title":5,"body":6,"date":184,"description":185,"extension":186,"meta":187,"navigation":70,"path":188,"rawbody":189,"seo":190,"stem":191,"sticky":192,"tags":193,"__hash__":198},"posts/posts/jinja2-nl-to-br.md","jinja2 中如何优雅地实现换行",{"type":7,"value":8,"toc":182},"minimark",[9,21,33,148,151,160,171,178],[10,11,12,13,17,18,20],"p",{},"在使用 python 的 jinja2 模板引擎生成 html 的时候，会遇到 ",[14,15,16],"code",{},"\\n"," 换行符无法被正常换行的问题。我本能的想法就是将 ",[14,19,16],{}," 替换成 html 标签 \u003Cbr />，但失败了，jinja2 有自动转义的功能，直接将标签原模原样地渲染了出来，并没有生效。而为这一段代码块关闭自动转义则会有被 js 注入的风险，因此这也不是上策。",[10,22,23,24,26,27],{},"在 jinja2 的官方文档中，提出了使用 filter 的方案。也就是说，filter 将 ",[14,25,16],{}," 识别出来，并自动替换成 \u003Cbr /> 标签，并且使用 Markup 函数将这一段 html 文本标记成安全且无需转义的。见: ",[28,29,30],"a",{"href":30,"rel":31},"https://jinja.palletsprojects.com/en/3.1.x/api/#custom-filters",[32],"nofollow",[34,35,36],"blockquote",{},[37,38,43],"pre",{"className":39,"code":40,"language":41,"meta":42,"style":42},"language-python shiki shiki-themes one-light one-dark-pro","import re\nfrom jinja2 import pass_eval_context\nfrom markupsafe import Markup, escape\n\n@pass_eval_context\ndef nl2br(eval_ctx, value):\n    br = \"\u003Cbr>\\n\"\n\n    if eval_ctx.autoescape:\n        value = escape(value)\n        br = Markup(br)\n\n    result = \"\\n\\n\".join(\n        f\"\u003Cp>{br.join(p.splitlines())}\u003C\\p>\"\n        for p in re.split(r\"(?:\\r\\n|\\r(?!\\n)|\\n){2,}\", value)\n    )\n    return Markup(result) if autoescape else result\n","python","",[14,44,45,53,59,65,72,78,84,90,95,101,107,113,118,124,130,136,142],{"__ignoreMap":42},[46,47,50],"span",{"class":48,"line":49},"line",1,[46,51,52],{},"import re\n",[46,54,56],{"class":48,"line":55},2,[46,57,58],{},"from jinja2 import pass_eval_context\n",[46,60,62],{"class":48,"line":61},3,[46,63,64],{},"from markupsafe import Markup, escape\n",[46,66,68],{"class":48,"line":67},4,[46,69,71],{"emptyLinePlaceholder":70},true,"\n",[46,73,75],{"class":48,"line":74},5,[46,76,77],{},"@pass_eval_context\n",[46,79,81],{"class":48,"line":80},6,[46,82,83],{},"def nl2br(eval_ctx, value):\n",[46,85,87],{"class":48,"line":86},7,[46,88,89],{},"    br = \"\u003Cbr>\\n\"\n",[46,91,93],{"class":48,"line":92},8,[46,94,71],{"emptyLinePlaceholder":70},[46,96,98],{"class":48,"line":97},9,[46,99,100],{},"    if eval_ctx.autoescape:\n",[46,102,104],{"class":48,"line":103},10,[46,105,106],{},"        value = escape(value)\n",[46,108,110],{"class":48,"line":109},11,[46,111,112],{},"        br = Markup(br)\n",[46,114,116],{"class":48,"line":115},12,[46,117,71],{"emptyLinePlaceholder":70},[46,119,121],{"class":48,"line":120},13,[46,122,123],{},"    result = \"\\n\\n\".join(\n",[46,125,127],{"class":48,"line":126},14,[46,128,129],{},"        f\"\u003Cp>{br.join(p.splitlines())}\u003C\\p>\"\n",[46,131,133],{"class":48,"line":132},15,[46,134,135],{},"        for p in re.split(r\"(?:\\r\\n|\\r(?!\\n)|\\n){2,}\", value)\n",[46,137,139],{"class":48,"line":138},16,[46,140,141],{},"    )\n",[46,143,145],{"class":48,"line":144},17,[46,146,147],{},"    return Markup(result) if autoescape else result\n",[10,149,150],{},"使用这段代码后，我遇到了连续两个换行符被识别成一个换行符的问题，依然不满意。",[10,152,153,154,159],{},"在 ",[28,155,158],{"href":156,"rel":157},"https://github.com/pallets/flask/issues/2628",[32],"issue#2628"," 中，我找到了一个相对优雅的解决方案——使用 css 样式来完成这个任务。",[10,161,162,163,166,167,170],{},"通过设置 ",[14,164,165],{},"white-space: pre-line;"," 的 css 样式，html 在被渲染时将会不再忽略换行符，浏览器就能够在没有 br 标签标注的情况下实现自动换行。而如果设置为 ",[14,168,169],{},"white-space: pre-wrap;"," 则多个空格将不会再被合并成一个空格，直接治好了我在入门 html 时的各种不适。",[10,172,173,174,177],{},"此外，通过 ",[14,175,176],{},"word-break: break-word;"," 的 css 样式可以实现只有当一个单词一整行都显示不下时，才会拆分换行该单词的效果，可以避免 break-all 拆分所有单词或者 normal 时遇到长单词直接元素溢出的问题。",[179,180,181],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":42,"searchDepth":55,"depth":55,"links":183},[],"2023-09-03 13:37:35","在使用 python 的 jinja2 模板引擎生成 html 的时候，会遇到 \\n 换行符无法被正常换行的问题。我本能的想法就是将 \\n 替换成 html 标签 \u003Cbr />，但失败了，jinja2 有自动转义的功能，直接将标签原模原样地渲染了出来，并没有生效。而为这一段代码块关闭自动转义则会有被 js 注入的风险，因此这也不是上策。","md",{},"/2023/09/03/jinja2-nl-to-br","---\ntitle: jinja2 中如何优雅地实现换行\ndate: 2023-09-03 13:37:35\nsticky:\ntags:\n- Linux\n- Python\n- jinja2\n- CSS\n---\n\n在使用 python 的 jinja2 模板引擎生成 html 的时候，会遇到 `\\n` 换行符无法被正常换行的问题。我本能的想法就是将 `\\n` 替换成 html 标签 \\\u003Cbr />，但失败了，jinja2 有自动转义的功能，直接将标签原模原样地渲染了出来，并没有生效。而为这一段代码块关闭自动转义则会有被 js 注入的风险，因此这也不是上策。\n\n在 jinja2 的官方文档中，提出了使用 filter 的方案。也就是说，filter 将 `\\n` 识别出来，并自动替换成 \\\u003Cbr /> 标签，并且使用 Markup 函数将这一段 html 文本标记成安全且无需转义的。见: https://jinja.palletsprojects.com/en/3.1.x/api/#custom-filters\n\n> ```python\n> import re\n> from jinja2 import pass_eval_context\n> from markupsafe import Markup, escape\n> \n> @pass_eval_context\n> def nl2br(eval_ctx, value):\n>     br = \"\u003Cbr>\\n\"\n> \n>     if eval_ctx.autoescape:\n>         value = escape(value)\n>         br = Markup(br)\n> \n>     result = \"\\n\\n\".join(\n>         f\"\u003Cp>{br.join(p.splitlines())}\u003C\\p>\"\n>         for p in re.split(r\"(?:\\r\\n|\\r(?!\\n)|\\n){2,}\", value)\n>     )\n>     return Markup(result) if autoescape else result\n> ```\n\n使用这段代码后，我遇到了连续两个换行符被识别成一个换行符的问题，依然不满意。\n\n在 [issue#2628](https://github.com/pallets/flask/issues/2628) 中，我找到了一个相对优雅的解决方案——使用 css 样式来完成这个任务。\n\n通过设置 `white-space: pre-line;` 的 css 样式，html 在被渲染时将会不再忽略换行符，浏览器就能够在没有 br 标签标注的情况下实现自动换行。而如果设置为 `white-space: pre-wrap;` 则多个空格将不会再被合并成一个空格，直接治好了我在入门 html 时的各种不适。\n\n此外，通过 `word-break: break-word;` 的 css 样式可以实现只有当一个单词一整行都显示不下时，才会拆分换行该单词的效果，可以避免 break-all 拆分所有单词或者 normal 时遇到长单词直接元素溢出的问题。\n",{"title":5,"description":185},"posts/jinja2-nl-to-br",false,[194,195,196,197],"Linux","Python","jinja2","CSS","nl3_yIskSVKGEiBHTlp2_FuldaEelAGtOa9yAOsSBvQ",[200,205],{"title":201,"path":202,"stem":203,"date":204,"children":-1},"创建 b23.tv 追踪参数移除 bot","/2023/10/29/create-b23tv-remover-bot","posts/create-b23tv-remover-bot","2023-10-29 00:35:48",{"title":206,"path":207,"stem":208,"date":209,"children":-1},"手动指定 python-selenium 的 driver path 以解决在中国大陆网络环境下启动卡住的问题","/2023/09/02/python-selenium-start-difficult-in-china-mainland","posts/python-selenium-start-difficult-in-china-mainland","2023-09-02 01:59:18",1761836961509]