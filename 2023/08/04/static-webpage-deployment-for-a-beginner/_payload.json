[{"data":1,"prerenderedAt":1478},["ShallowReactive",2],{"post-2023-08-04-static-webpage-deployment-for-a-beginner":3,"surround-2023-08-04-static-webpage-deployment-for-a-beginner":1467,"randomIndex/2023/08/04/static-webpage-deployment-for-a-beginner/":201},{"id":4,"title":5,"body":6,"date":1452,"description":162,"extension":1453,"meta":1454,"navigation":532,"path":1455,"rawbody":1456,"seo":1457,"stem":1458,"sticky":1459,"tags":1460,"__hash__":1466},"posts/posts/static-webpage-deployment-for-a-beginner.md","从零开始的静态网页部署（到个人云服务器）",{"type":7,"value":8,"toc":1421},"minimark",[9,30,35,38,51,54,58,61,64,73,76,84,93,96,99,102,105,109,112,115,118,121,124,127,130,133,136,139,143,146,150,153,156,189,287,290,293,296,309,316,327,330,337,342,345,351,354,359,363,376,486,490,498,501,637,640,666,669,676,712,715,719,723,728,731,745,748,766,773,808,822,839,845,861,867,882,891,911,918,921,924,927,930,933,937,942,945,975,978,981,987,990,1055,1059,1063,1067,1070,1077,1145,1149,1152,1156,1163,1169,1207,1211,1217,1222,1266,1276,1284,1287,1290,1293,1296,1312,1315,1332,1335,1352,1355,1371,1374,1390,1393,1407,1410,1414,1417],[10,11,12,24,27],"blockquote",{},[13,14,15,16,23],"p",{},"这篇博客是受 ",[17,18,22],"a",{"href":19,"rel":20},"https://blog.tiancy.cn/",[21],"nofollow","Tiancy"," 之托，在2023年精弘网络暑期授课的前端系列第七节课时针对项目部署这一块内容时所产生的产物。在授课视频中，受时长所限，我不得不采用宝塔面板+纯 ip 访问的方式来完成一个简单的部署，但这终究不是什么优雅的方案: 宝塔的安全性堪忧、其隐私性也是备受争议，而纯 ip 访问的方式也过于简陋，且没有支持 https 访问。",[13,25,26],{},"因此这篇博客将以面对初学者的口吻去讲述如何从零开始部署一个 Vue.js 的项目到云服务器，以解我心头的愧疚。但是，我没有备案过的域名，且国内云服务器厂商众多，这篇博客终究不可能做到像保姆级教学那样去一一演示每一家云服务器厂商网页面板上的操作过程，而一些比较基础的概念我会给出简单的解释和例子以及引用一些外部链接，但终究不会全面覆盖到，诸位还请见谅。",[13,28,29],{},"本文采用了一些 ChatGPT 和 Google Bard 提供的内容，准确性经过我本人核阅。",[31,32,34],"h2",{"id":33},"基础-web-知识","基础 Web 知识",[13,36,37],{},"针对以下三个知识点，我是在初中的信息课上学到的，互联网上应该不乏对于这三个问题的权威解释，因此我也不在此赘述，不知道的小伙伴请自行搜索。",[39,40,41,45,48],"ul",{},[42,43,44],"li",{},"ip 地址是什么",[42,46,47],{},"域名是什么",[42,49,50],{},"DNS 服务器是干什么的",[31,52,53],{"id":53},"关于备案",[55,56,57],"h3",{"id":57},"不备案的影响",[13,59,60],{},"当你通过域名去访问境内服务器的 80 (http 默认端口) 和 443 (https 默认端口)时，如果该域名没有备案或者境内这台云服务器的云服务器商不知道你在别的服务商那里有备案的情况下，则会对请求进行拦截。对于访问 80 的请求，将会直接劫持 http 请求以重定向到他们的备案提示页面；对于访问 443 的请求，由于 https 没法被劫持，则会通过连接重置的方式阻止你访问。如果你确定你需要使用中国大陆境内的云服务器，应当采取「备案」和「接入备案」两种方式分别解决上述两种情况。",[55,62,63],{"id":63},"备案方法",[13,65,66,67,72],{},"每个省都有自己对应的管局，而各省的管局对于备案的规则都有些差异，而个人备案一般是找自己户籍所在地的管局去备案，详细的可以看",[17,68,71],{"href":69,"rel":70},"https://help.aliyun.com/zh/icp-filing/user-guide/icp-filing-regulations-of-the-miit-for-different-regions",[21],"阿里云写的文档","。",[55,74,75],{"id":75},"使用中国大陆境外的云服务器",[13,77,78,79,83],{},"可以选择和我一样去中国大陆以外的地区部署云服务，但由于众所周知的原因，访问别的国家或地区的服务器可能会有速度慢、延迟高等问题，这涉及到线路优化，也比较复杂。更糟糕的情况是，你甚至有可能刚开出来一台机子就发现这个 ip 在中国大陆境内是无法访问到的，这也是比较尴尬的地方。一般来说，可以选择在境内的云服务器商那里实名认证（不是备案）去购买他们的境外服务器（比如 ucloud 新用户优惠的香港云服务器，",[80,81,82],"del",{},"ucloud 的客户经理看到了能不能再送我一台机子啊","），这种机子是线路相对比较好的。",[13,85,86,87,92],{},"选购中国大陆境外的云服务器时，厂商可能会提供测试 ip 来帮助你判断线路质量，可以使用 ipip.net 提供的 ",[17,88,91],{"href":89,"rel":90},"https://www.ipip.net/product/client.html",[21],"besttrace"," 程序来查看数据包经过的地方，很可能你买一台香港的服务器，数据却要从日本或者美国绕一圈，这就非常尴尬。",[31,94,95],{"id":95},"域名部分",[55,97,98],{"id":98},"域名注册",[13,100,101],{},"要获得一个域名，最简单的方式是花钱。境内的阿里云、腾讯云、华为云等几家比较有名的云服务器厂商均有域名注册的业务且价格基本差距不大，可以随便找一个注册。而境外的域名注册商，我这边个人推荐 namesilo，这家支持支付宝付款且价格尚可，首次购买前可以去搜索引擎搜一搜近期的优惠码，可能会有一些优惠折扣。（可恶我没有拿到 aff 回扣）",[55,103,104],{"id":104},"域名解析",[106,107,108],"h4",{"id":108},"域名解析的作用",[13,110,111],{},"如果你了解了 dns 的作用，那我们可以来简单讲讲域名解析是干什么的。dns 服务器将会告诉用户的设备某一个域名它对应的 ip 是多少，而域名解析这一步就是告诉世界上所有的 dns 服务器这个域名从此刻开始对应的 ip 是多少，以便世界上所有的 dns 服务器向网民在需要时告知他们正确的 ip 地址。",[13,113,114],{},"要实现这一步骤并不复杂，作为初学者我们也不必去担心会不会有人把你花钱买来的域名指向错误的 ip 地址，这些都交给域名解析服务去解决。几乎每一家提供的域名解析服务页面上都会指导你去将域名的 NameServer 设置为他们家的服务器，这里也不做教学。",[106,116,117],{"id":117},"域名解析服务推荐",[13,119,120],{},"凡是提供域名注册服务的云服务商基本也都会提供域名解析服务，在这里我主要推荐两家云服务商（我没拿广告费啊）—— cloudflare 和 dnspod。这两家免费版套餐的操作页面都简洁明了，没有非常扎眼的广告。前者提供了除中国大陆以外地区的 cdn 加速服务，而后者可以提供境内境外分线路解析的功能（把来自境内的用户指向 ip 地址 A，来自境外的用户指向 ip 地址 B）。",[106,122,123],{"id":123},"解析记录类型",[13,125,126],{},"作为初学者只需要了解 A 记录和 CNAME 记录就行了。",[13,128,129],{},"A 记录的意思就是将一个域名指向一个 ipv4 地址，也就是去实现 dns 服务器最主要的作用。而 CNAME 记录是将一个域名指向另一个域名，通俗来讲就是「和它一样」。比如 a.com 如果 CNAME 指向 b.com，意思就是说我现在不确定 a.com 的 ip 是多少，但我知道 a.com 的 ip 和 b.com 一样，所以你去查 b.com 就行了。",[31,131,132],{"id":132},"服务器部分",[55,134,135],{"id":135},"云服务器的购买",[13,137,138],{},"这部分我直接忽略过去了，本文在「关于备案」这一部分已经详细阐述了备案相关的内容，购买中国大陆境内还是境外的服务器需要由屏幕前的各位自己决定~~（应该没人会把我的博客打印成纸质稿看吧）~~。",[55,140,142],{"id":141},"如何选择云服务器上要运行的-linux-发行版","如何选择云服务器上要运行的 Linux 发行版",[13,144,145],{},"服务器上常用的 Linux 发行版主要是 Debian、Ubuntu、CentOS(这个死得差不多了) 这三个，那我个人更熟悉的是 Ubuntu，版本号越新越好，截止本文发出最新的 lts 版本是 22.04 lts，所以直接选择这个就行。",[55,147,149],{"id":148},"使用-ssh-连接上服务器","使用 ssh 连接上服务器",[13,151,152],{},"在云服务器的网页面板上选择好服务器的配置与运行的操作系统后，云服务商应该至少给你提供两样东西: 云服务器的 ip 和 root 用户的登陆密码。这可能是在网页面板上展示的，一些境外的云服务商可能是直接发送到你注册时预留的邮箱中的，这都无所谓。拿到这两样东西我们就可以使用 ssh 连接到服务器的终端，进行配置操作。",[13,154,155],{},"打开自己系统的终端，使用如下命令去连接云服务器（Win10 以上的系统应该也已经自带 openssh 了）",[157,158,163],"pre",{"className":159,"code":160,"language":161,"meta":162,"style":162},"language-bash shiki shiki-themes one-light one-dark-pro","ssh root@\u003Cyour_server_ip>\n","bash","",[164,165,166],"code",{"__ignoreMap":162},[167,168,171,175,179,183,186],"span",{"class":169,"line":170},"line",1,[167,172,174],{"class":173},"sAdtL","ssh",[167,176,178],{"class":177},"sDhpE"," root@",[167,180,182],{"class":181},"s5ixo","\u003C",[167,184,185],{"class":177},"your_server_i",[167,187,188],{"class":181},"p>\n",[157,190,192],{"className":159,"code":191,"language":161,"meta":162,"style":162},"[zhullyb@Archlinux ~]$ ssh root@120.55.63.96\nThe authenticity of host '120.55.63.96 (120.55.63.96)' can't be established.\nED25519 key fingerprint is SHA256:Op8u4Fv+NvtOxJDKeBQ/jIsFpuR4EYTUt53qjG8k6ok.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '120.55.63.96' (ED25519) to the list of known hosts.\nroot@120.55.63.96's password: \nWelcome to Ubuntu 22.04.2 LTS (GNU/Linux 5.15.0-78-generic x86_64)\n",[164,193,194,199,220,226,232,238,244,256],{"__ignoreMap":162},[167,195,196],{"class":169,"line":170},[167,197,198],{"class":181},"[zhullyb@Archlinux ~]$ ssh root@120.55.63.96\n",[167,200,202,205,208,211,214,217],{"class":169,"line":201},2,[167,203,204],{"class":173},"The",[167,206,207],{"class":177}," authenticity",[167,209,210],{"class":177}," of",[167,212,213],{"class":177}," host",[167,215,216],{"class":177}," '120.55.63.96 (120.55.63.96)'",[167,218,219],{"class":177}," can't be established.\n",[167,221,223],{"class":169,"line":222},3,[167,224,225],{"class":177},"ED25519 key fingerprint is SHA256:Op8u4Fv+NvtOxJDKeBQ/jIsFpuR4EYTUt53qjG8k6ok.\n",[167,227,229],{"class":169,"line":228},4,[167,230,231],{"class":177},"This key is not known by any other names.\n",[167,233,235],{"class":169,"line":234},5,[167,236,237],{"class":177},"Are you sure you want to continue connecting (yes/no/[fingerprint])? yes\n",[167,239,241],{"class":169,"line":240},6,[167,242,243],{"class":177},"Warning: Permanently added '120.55.63.96' (ED25519) to the list of known hosts.\n",[167,245,247,250,253],{"class":169,"line":246},7,[167,248,249],{"class":177},"root@120.55.63.96's",[167,251,252],{"class":177}," password:",[167,254,255],{"class":181}," \n",[167,257,259,262,265,268,272,275,278,281,284],{"class":169,"line":258},8,[167,260,261],{"class":173},"Welcome",[167,263,264],{"class":177}," to",[167,266,267],{"class":177}," Ubuntu",[167,269,271],{"class":270},"sAGMh"," 22.04.2",[167,273,274],{"class":177}," LTS",[167,276,277],{"class":181}," (GNU/Linux ",[167,279,280],{"class":177},"5.15.0-78-generic",[167,282,283],{"class":177}," x86_64",[167,285,286],{"class":181},")\n",[13,288,289],{},"输入密码时，已经输入的密码部分在屏幕上不会显示，但无需理会，只要将云服务器的密码粘贴后直接敲回车就好。",[55,291,292],{"id":292},"如何编辑一个服务器上的文件",[13,294,295],{},"一般来说，网上的教程会推荐你使用 vim 这个 tui 界面的编辑器去编辑这个文件，但 vim 的学习成本有点高，如果只是临时编辑服务器上的文件的话，我个人更加推荐使用 nano",[157,297,299],{"className":159,"code":298,"language":161,"meta":162,"style":162},"nano /etc/caddy/conf.d/example.conf\n",[164,300,301],{"__ignoreMap":162},[167,302,303,306],{"class":169,"line":170},[167,304,305],{"class":173},"nano",[167,307,308],{"class":177}," /etc/caddy/conf.d/example.conf\n",[13,310,311,312,315],{},"这行命令表示我要编辑 ",[164,313,314],{},"/etc/caddy/conf.d/example.conf"," 这个文件，如果这个文件不存在则去创建这个文件。",[13,317,318,319,322,323,326],{},"随后你可以根据自己的需求去编辑文件了，上下左右按键可以调整光标位置，直接敲键盘上的字母按键就可以把字母敲进去，想推出时使用 ",[164,320,321],{},"ctrl+s"," 保存，再使用 ",[164,324,325],{},"ctrl+x"," 退出就可以了。",[55,328,329],{"id":329},"云服务器的安全组规则",[13,331,332,333],{},"一般是国内的云服务厂商会有安全组规则这种东西，你可以理解成一个额外的防火墙。一般来说，80 和 443 两个端口被我们约定作为网页的默认端口，80 是 http 的端口，而 443 则是 https 的端口。因此，我们需要在安全组规则这里去允许 80 和 443 两个端口能被外部访问到。截图中是阿里云的控制面板。",[334,335],"img",{"alt":162,"src":336},"https://static.031130.xyz/uploads/2024/08/12/64d4e31fd5270.webp",[13,338,339],{},[334,340],{"alt":162,"src":341},"https://static.031130.xyz/uploads/2024/08/12/64d4e34db94ee.webp",[13,343,344],{},"云服务商给的默认规则应该是下面这个样子的:",[13,346,347],{},[334,348],{"alt":349,"src":350},"image-20230810151900653","https://static.031130.xyz/uploads/2024/08/12/64d4e3ca6aa29.webp",[13,352,353],{},"这里开放的 22 端口用于 ssh 连接服务器，而3389 则是 Windows 的远程桌面。我们可以使用「快速添加」按钮来开放 80 和 443 端口",[13,355,356],{},[334,357],{"alt":162,"src":358},"https://static.031130.xyz/uploads/2024/08/12/64d4e4e5b1e68.webp",[55,360,362],{"id":361},"linux-下常见的文件路径及对应作用","Linux 下常见的文件路径及对应作用",[13,364,365,366,371,372,375],{},"在这一章节中，我只罗列了几个比较常见的路径，更多的资料推荐查阅",[17,367,370],{"href":368,"rel":369},"https://www.runoob.com/linux/linux-system-contents.html",[21],"菜鸟教程","，写得还不错。",[164,373,374],{},"$USER"," 指当前用户的用户名",[377,378,379,392],"table",{},[380,381,382],"thead",{},[383,384,385,389],"tr",{},[386,387,388],"th",{},"路径",[386,390,391],{},"作用",[393,394,395,410,420,433,446,456,466,476],"tbody",{},[383,396,397,403],{},[398,399,400],"td",{},[164,401,402],{},"/home/$USER",[398,404,405,406,409],{},"用户的家目录，下有 Desktop，Download，Picture 等多个文件夹（root 用户的家目录是 ",[164,407,408],{},"/root","）",[383,411,412,417],{},[398,413,414],{},[164,415,416],{},"/etc",[398,418,419],{},"存放软件的配置文件的地方",[383,421,422,427],{},[398,423,424],{},[164,425,426],{},"/usr/bin",[398,428,429,430],{},"存放二进制可执行文件的地方，一般也会被链接到 ",[164,431,432],{},"/bin",[383,434,435,440],{},[398,436,437],{},[164,438,439],{},"/usr/lib",[398,441,442,443],{},"一般用于存放依赖库(动态链接库)，一般会被链接到 ",[164,444,445],{},"/lib",[383,447,448,453],{},[398,449,450],{},[164,451,452],{},"/usr/share",[398,454,455],{},"一些共享数据，比如帮助文档、软件需要的资源文件等等",[383,457,458,463],{},[398,459,460],{},[164,461,462],{},"/opt",[398,464,465],{},"optional(可选) 的缩写，一些由官网提供的（区别于发行版自带的）软件可能被安装到这里",[383,467,468,473],{},[398,469,470],{},[164,471,472],{},"/boot",[398,474,475],{},"开机引导使用的路径，一般在正常使用时不会去操作这里",[383,477,478,483],{},[398,479,480],{},[164,481,482],{},"/var",[398,484,485],{},"variable(变量) 的缩写，存放那些经常被变更的东西，比如运行日志、网站数据等等",[55,487,489],{"id":488},"caddy-的配置与使用","caddy 的配置与使用",[13,491,492,493,497],{},"caddy 是一个 web 服务器，他是使用 golang 写的一个平替品，拥有配置更简单、自动申请 Let's Encrypt 证书的优势，我个人非常推荐非专业运维去使用这个。caddy 的官方文档在 ",[17,494,495],{"href":495,"rel":496},"https://caddyserver.com/docs/",[21]," ，但我相信你们不会去看（我也没有认真看过），有问题可以尝试去问问 chatgpt 看看能不能得到想要的配置文件。caddy 现在已经迭代到 V2 版本了，与 V1 版本相比有一些语法差异以支持更多的功能，且许可证允许商用更加自由。",[13,499,500],{},"caddy V2 支持使用 json 配置文件或者 Caddyfile，对于不复杂的需求我个人更推荐后者，简洁易懂。下面是我博客所使用的 Caddyfile 示例:",[157,502,506],{"className":503,"code":504,"language":505,"meta":162,"style":162},"language-nginx shiki shiki-themes one-light one-dark-pro","# 这里表示，使用 zhul.in 这个域名访问 443 端口时，提供以下内容\nzhul.in:443 {\n        # 这里设置了所需提供内容的目录\n        root * /var/www/blog\n\n        # 这里设置的是开启 https 支持时所需要使用的 ssl 证书文件，但如果不设置也不碍事，caddy 会自动帮你申请 Let's Encrypt 的 ssl 证书\n        tls /var/www/key/zhul.in.cert /var/www/key/zhul.in.key\n\n        # 这里表示我们开启了 zstd 和 gzip 两种压缩算法，来减少数据传输量，不设置也没问题\n        encode zstd gzip\n        # 这里表示我们开启了一个文件服务器，当你访问 https://zhul.in/example_file 时，caddy 会提供 /var/www/blog/example_file 这个文件的内容\n        file_server\n\n        # 这里是错误处理部分\n        handle_errors {\n                # 这里表示当发生错误时，将请求重定向到 /404.html 这个文件\n                rewrite * /404.html\n                # 这里使用了模板来处理错误页面。当发生错误时，Caddy会使用模板引擎来填充错误页面的内容，以便向用户显示有关错误的相关信息。\n                templates\n                #这里表示继续使用文件服务器来提供错误页面\n                file_server\n        }\n}\n","nginx",[164,507,508,513,518,523,528,534,539,544,548,554,560,566,572,577,583,589,595,601,607,613,619,625,631],{"__ignoreMap":162},[167,509,510],{"class":169,"line":170},[167,511,512],{},"# 这里表示，使用 zhul.in 这个域名访问 443 端口时，提供以下内容\n",[167,514,515],{"class":169,"line":201},[167,516,517],{},"zhul.in:443 {\n",[167,519,520],{"class":169,"line":222},[167,521,522],{},"        # 这里设置了所需提供内容的目录\n",[167,524,525],{"class":169,"line":228},[167,526,527],{},"        root * /var/www/blog\n",[167,529,530],{"class":169,"line":234},[167,531,533],{"emptyLinePlaceholder":532},true,"\n",[167,535,536],{"class":169,"line":240},[167,537,538],{},"        # 这里设置的是开启 https 支持时所需要使用的 ssl 证书文件，但如果不设置也不碍事，caddy 会自动帮你申请 Let's Encrypt 的 ssl 证书\n",[167,540,541],{"class":169,"line":246},[167,542,543],{},"        tls /var/www/key/zhul.in.cert /var/www/key/zhul.in.key\n",[167,545,546],{"class":169,"line":258},[167,547,533],{"emptyLinePlaceholder":532},[167,549,551],{"class":169,"line":550},9,[167,552,553],{},"        # 这里表示我们开启了 zstd 和 gzip 两种压缩算法，来减少数据传输量，不设置也没问题\n",[167,555,557],{"class":169,"line":556},10,[167,558,559],{},"        encode zstd gzip\n",[167,561,563],{"class":169,"line":562},11,[167,564,565],{},"        # 这里表示我们开启了一个文件服务器，当你访问 https://zhul.in/example_file 时，caddy 会提供 /var/www/blog/example_file 这个文件的内容\n",[167,567,569],{"class":169,"line":568},12,[167,570,571],{},"        file_server\n",[167,573,575],{"class":169,"line":574},13,[167,576,533],{"emptyLinePlaceholder":532},[167,578,580],{"class":169,"line":579},14,[167,581,582],{},"        # 这里是错误处理部分\n",[167,584,586],{"class":169,"line":585},15,[167,587,588],{},"        handle_errors {\n",[167,590,592],{"class":169,"line":591},16,[167,593,594],{},"                # 这里表示当发生错误时，将请求重定向到 /404.html 这个文件\n",[167,596,598],{"class":169,"line":597},17,[167,599,600],{},"                rewrite * /404.html\n",[167,602,604],{"class":169,"line":603},18,[167,605,606],{},"                # 这里使用了模板来处理错误页面。当发生错误时，Caddy会使用模板引擎来填充错误页面的内容，以便向用户显示有关错误的相关信息。\n",[167,608,610],{"class":169,"line":609},19,[167,611,612],{},"                templates\n",[167,614,616],{"class":169,"line":615},20,[167,617,618],{},"                #这里表示继续使用文件服务器来提供错误页面\n",[167,620,622],{"class":169,"line":621},21,[167,623,624],{},"                file_server\n",[167,626,628],{"class":169,"line":627},22,[167,629,630],{},"        }\n",[167,632,634],{"class":169,"line":633},23,[167,635,636],{},"}\n",[13,638,639],{},"你可以发现，如果要把这个 Caddyfile 写到最简单，仅仅是能跑的状态，只需要这几行:",[157,641,643],{"className":503,"code":642,"language":505,"meta":162,"style":162},"zhul.in:443 {\n        root * /var/www/blog\n        \n        file_server\n}\n",[164,644,645,649,653,658,662],{"__ignoreMap":162},[167,646,647],{"class":169,"line":170},[167,648,517],{},[167,650,651],{"class":169,"line":201},[167,652,527],{},[167,654,655],{"class":169,"line":222},[167,656,657],{},"        \n",[167,659,660],{"class":169,"line":228},[167,661,571],{},[167,663,664],{"class":169,"line":234},[167,665,636],{},[13,667,668],{},"这就是我为什么推荐非专业运维去使用 caddy 的原因，只需要三行代码就可以跑起来一个简单的服务。",[13,670,671,672,675],{},"而部署一个 Vue.js 项目，我们可能会需要多加一行 ",[164,673,674],{},"try_files {path} {path}/ /index.html"," ，这一行代码的意思是当用户尝试访问 /example 时，实际需要用户的浏览器去访问 /index.html 这个地方，因为使用了 vue-router 的项目的编译产物只有 /index.html 而没有 /example.html，而后者的内容是包括在前者中的。以下的 Caddyfile 是精弘的首页正在使用的配置文件，应该可以适用于绝大多数的 Vue 项目:",[157,677,679],{"className":503,"code":678,"language":505,"meta":162,"style":162},"www.myzjut.org {\n        root * /var/www/jh\n\n        encode zstd gzip\n        file_server\n        try_files {path} {path} /index.html\n}\n",[164,680,681,686,691,695,699,703,708],{"__ignoreMap":162},[167,682,683],{"class":169,"line":170},[167,684,685],{},"www.myzjut.org {\n",[167,687,688],{"class":169,"line":201},[167,689,690],{},"        root * /var/www/jh\n",[167,692,693],{"class":169,"line":222},[167,694,533],{"emptyLinePlaceholder":532},[167,696,697],{"class":169,"line":228},[167,698,559],{},[167,700,701],{"class":169,"line":234},[167,702,571],{},[167,704,705],{"class":169,"line":240},[167,706,707],{},"        try_files {path} {path} /index.html\n",[167,709,710],{"class":169,"line":246},[167,711,636],{},[13,713,714],{},"第一行省略了端口号，说明 80 和 443 端口都支持。",[55,716,718],{"id":717},"通过sftprsync将本地的静态网页上传到云服务器的对应目录","通过sftp/rsync将本地的静态网页上传到云服务器的对应目录",[106,720,722],{"id":721},"使用-sftp-部署","使用 sftp 部署",[10,724,725],{},[13,726,727],{},"sftp 是一个交互性比较强的上下传工具，如果不喜欢背命令的话可以考虑使用 sftp，操作起来都比较顺其自然",[13,729,730],{},"首先，我们在本地 cd 到静态网页文件所在的路径，比如一个 Vue 项目编译产生的文件可能就会在 dist 下面",[157,732,734],{"className":159,"code":733,"language":161,"meta":162,"style":162},"cd dist/\n",[164,735,736],{"__ignoreMap":162},[167,737,738,742],{"class":169,"line":170},[167,739,741],{"class":740},"s_Sar","cd",[167,743,744],{"class":177}," dist/\n",[13,746,747],{},"然后，我们使用 sftp 连接到服务器，这和 ssh 命令没什么两样的，就换了个命令名。",[157,749,751],{"className":159,"code":750,"language":161,"meta":162,"style":162},"sftp root@\u003Cyour_server_ip>\n",[164,752,753],{"__ignoreMap":162},[167,754,755,758,760,762,764],{"class":169,"line":170},[167,756,757],{"class":173},"sftp",[167,759,178],{"class":177},[167,761,182],{"class":181},[167,763,185],{"class":177},[167,765,188],{"class":181},[13,767,768,769,772],{},"输入 root 用户的密码后，命令行的提示符就会变成 ",[164,770,771],{},"sftp >"," 的样子",[157,774,776],{"className":159,"code":775,"language":161,"meta":162,"style":162},"[zhullyb@Archlinux ~]$ sftp root@\u003Cyour_server_ip>\nConnected to \u003Cyour_server_ip>.\nsftp>\n",[164,777,778,783,801],{"__ignoreMap":162},[167,779,780],{"class":169,"line":170},[167,781,782],{"class":181},"[zhullyb@Archlinux ~]$ sftp root@\u003Cyour_server_ip>\n",[167,784,785,788,790,793,795,798],{"class":169,"line":201},[167,786,787],{"class":173},"Connected",[167,789,264],{"class":177},[167,791,792],{"class":181}," \u003C",[167,794,185],{"class":177},[167,796,797],{"class":181},"p>",[167,799,800],{"class":177},".\n",[167,802,803,805],{"class":169,"line":222},[167,804,757],{"class":173},[167,806,807],{"class":181},">\n",[13,809,810,811,813,814,817,818,821],{},"这是一个交互式的命令行窗口，可以使用 ",[164,812,741],{},"、",[164,815,816],{},"mkdir"," 等几个简单的命令。我们先创建 ",[164,819,820],{},"/var/www"," 这个文件夹:",[157,823,825],{"className":159,"code":824,"language":161,"meta":162,"style":162},"sftp> mkdir /var/www\n",[164,826,827],{"__ignoreMap":162},[167,828,829,831,834,836],{"class":169,"line":170},[167,830,757],{"class":173},[167,832,833],{"class":181},"> ",[167,835,816],{"class":177},[167,837,838],{"class":177}," /var/www\n",[13,840,841,842,821],{},"再创建 ",[164,843,844],{},"/var/www/jh",[157,846,848],{"className":159,"code":847,"language":161,"meta":162,"style":162},"sftp> mkdir /var/www/jh\n",[164,849,850],{"__ignoreMap":162},[167,851,852,854,856,858],{"class":169,"line":170},[167,853,757],{"class":173},[167,855,833],{"class":181},[167,857,816],{"class":177},[167,859,860],{"class":177}," /var/www/jh\n",[13,862,863,864,866],{},"随后，我们就可以进入远程服务器的 ",[164,865,844],{}," 目录下",[157,868,870],{"className":159,"code":869,"language":161,"meta":162,"style":162},"sftp> cd /var/www/jh\n",[164,871,872],{"__ignoreMap":162},[167,873,874,876,878,880],{"class":169,"line":170},[167,875,757],{"class":173},[167,877,833],{"class":181},[167,879,741],{"class":177},[167,881,860],{"class":177},[13,883,884,885,888,889],{},"这样我们就可以把本地的静态网页文件上传到服务器，使用 ",[164,886,887],{},"put"," 命令即可，下面的命令表示将本地当前目录下的所有文件以及其子文件夹全部内容都上传到服务器的当前文件夹，也就是 ",[164,890,844],{},[157,892,894],{"className":159,"code":893,"language":161,"meta":162,"style":162},"sftp> put -r *\n",[164,895,896],{"__ignoreMap":162},[167,897,898,900,902,904,907],{"class":169,"line":170},[167,899,757],{"class":173},[167,901,833],{"class":181},[167,903,887],{"class":177},[167,905,906],{"class":270}," -r",[167,908,910],{"class":909},"s2QsP"," *\n",[13,912,913,914,917],{},"再输入 ",[164,915,916],{},"exit"," 即可推出 sftp 状态。",[13,919,920],{},"这边再教一些 sftp 使用中的常用命令:",[13,922,923],{},"ls: 查看远程服务器中当前目录中所有非隐藏文件",[13,925,926],{},"lls: 查看本地当前路径中的所有非隐藏文件",[13,928,929],{},"pwd: 查看远程服务器中当前的路径",[13,931,932],{},"lpwd: 查看本地当前的路径",[106,934,936],{"id":935},"使用-rsync-部署","使用 rsync 部署",[10,938,939],{},[13,940,941],{},"rsync 的交互性就不太强，是在本机操作的，需要提前写好一行比较长的命令去执行操作，比较适合写在脚本里。",[13,943,944],{},"下面这行代码是我们精弘网络首页使用 github action 部署时的命令",[157,946,948],{"className":159,"code":947,"language":161,"meta":162,"style":162},"rsync -avzP --delete dist/ root@\u003Cyour_server_ip>:/var/www/jh/\n",[164,949,950],{"__ignoreMap":162},[167,951,952,955,958,961,964,966,968,970,972],{"class":169,"line":170},[167,953,954],{"class":173},"rsync",[167,956,957],{"class":270}," -avzP",[167,959,960],{"class":270}," --delete",[167,962,963],{"class":177}," dist/",[167,965,178],{"class":177},[167,967,182],{"class":181},[167,969,185],{"class":177},[167,971,797],{"class":181},[167,973,974],{"class":177},":/var/www/jh/\n",[13,976,977],{},"dist/ 表示我想要上传当前路径下的 dist 文件夹下的所有文件",[13,979,980],{},"root@\u003Cyour_server_ip> 这一段和前面的 ssh 与 sftp 一样，都表示用户名和对应的服务器 ip，",[13,982,983,986],{},[164,984,985],{},":var/www/jh"," 表示文件将被上传到服务器的这个路径下。",[13,988,989],{},"以下是 rsync 的一些常用参数：",[39,991,992,998,1004,1010,1016],{},[42,993,994,997],{},[164,995,996],{},"-a","：以归档模式进行同步，即保持文件的所有属性（如权限、属主、属组、时间戳等）。",[42,999,1000,1003],{},[164,1001,1002],{},"-v","：显示详细的同步过程。",[42,1005,1006,1009],{},[164,1007,1008],{},"-z","：使用压缩算法进行数据传输，以减少网络带宽的占用。",[42,1011,1012,1015],{},[164,1013,1014],{},"--delete","：在目标目录中删除源目录中不存在的文件。",[42,1017,1018,1021,1022,1024,1025,1028,1029,1032,1033,1048,1051,1052,1054],{},[164,1019,1020],{},"-P","选项是",[164,1023,954],{},"命令的一个常用选项，它的作用是将",[164,1026,1027],{},"--partial","和",[164,1030,1031],{},"--progress","选项组合在一起使用。",[39,1034,1035,1043],{},[42,1036,1037,1039,1040,1042],{},[164,1038,1027],{},"选项表示如果文件传输被中断，",[164,1041,954],{},"会保留已经传输的部分文件，下次继续传输时可以从上次中断的地方继续。",[42,1044,1045,1047],{},[164,1046,1031],{},"选项表示显示文件传输的进度信息，包括已经传输的字节数、传输速度和估计剩余时间等。",[1049,1050],"br",{},"使用",[164,1053,1020],{},"选项可以方便地同时启用这两个选项，以便在文件传输期间显示进度信息，并在中断后继续传输。",[31,1056,1058],{"id":1057},"附-其他相关的一些操作技巧还没写完等我填坑","附 : 其他相关的一些操作技巧（还没写完，等我填坑）",[55,1060,1062],{"id":1061},"使用-ssh-copy-id-将本地的-ssh-公钥复制到服务器上","使用 ssh-copy-id 将本地的 ssh 公钥复制到服务器上",[55,1064,1066],{"id":1065},"配置-sshd-以加强服务器的安全性","配置 sshd 以加强服务器的安全性",[13,1068,1069],{},"sshd 是 Secure Shell Daemon 的缩写，它是一个 ssh 的守护进程，允许用户通过 SSH 协议安全地连接到远程服务器。",[13,1071,1072,1073,1076],{},"sshd 的配置文件应该在 ",[164,1074,1075],{},"/etc/ssh/sshd_config"," 文件中，通过更改其中一些配置项，我们可以让我们的服务器更安全。",[377,1078,1079,1089],{},[380,1080,1081],{},[383,1082,1083,1086],{},[386,1084,1085],{},"建议",[386,1087,1088],{},"修改方式",[393,1090,1091,1107,1121,1132],{},[383,1092,1093,1096],{},[398,1094,1095],{},"禁用 root 用户通过 SSH 登录",[398,1097,1098,1099,1102,1103,1106],{},"在 sshd配置文件中将 ",[164,1100,1101],{},"PermitRootLogin"," 选项设置为 ",[164,1104,1105],{},"no","。（在此之前，你应该创建一个非 root 用户并设置好对应的账号密码，修改好 /etc/sudoers 文件确保该用户能够通过 sudo 执行一些需要 root 权限去执行的语句）",[383,1108,1109,1112],{},[398,1110,1111],{},"强制使用 SSH 密钥登录",[398,1113,1114,1115,1102,1118,1120],{},"在 sshd 配置文件中将 ",[164,1116,1117],{},"PasswordAuthentication",[164,1119,1105],{},"。（在此之前，你应该完成上一步 ssh-copy-id 将本地的 ssh 公钥复制到服务器上）",[383,1122,1123,1126],{},[398,1124,1125],{},"更改 SSH 端口",[398,1127,1114,1128,1131],{},[164,1129,1130],{},"Port"," 选项设置为一个未使用的端口。（在此之前，使用 ssh 命令连接到服务器时，需要使用 -p \u003Cport> 参数去指定端口）",[383,1133,1134,1137],{},[398,1135,1136],{},"启用 SSH 日志记录",[398,1138,1114,1139,1102,1142,72],{},[164,1140,1141],{},"SyslogFacility",[164,1143,1144],{},"auth",[55,1146,1148],{"id":1147},"systemd-的作用与使用方法","systemd 的作用与使用方法",[13,1150,1151],{},"systemd 是一个用于管理 Linux 系统的服务管理器和初始化系统。",[106,1153,1155],{"id":1154},"使用-systemctl-命令管理服务状态","使用 systemctl 命令管理服务状态",[13,1157,1158,1159,1162],{},"在我们静态网页部署这一块，我们主要用 ",[164,1160,1161],{},"systemctl"," 命令去管理一些服务的状态，比如我们想要将 caddy 设置为开机自启，这样我们即使重启了服务器，caddy 也能自动开始提供服务。",[13,1164,1165,1166,1168],{},"以下是一些常见的 ",[164,1167,1161],{}," 命令：",[39,1170,1171,1177,1183,1189,1195,1201],{},[42,1172,1173,1176],{},[164,1174,1175],{},"systemctl start","：启动服务。",[42,1178,1179,1182],{},[164,1180,1181],{},"systemctl stop","：停止服务。",[42,1184,1185,1188],{},[164,1186,1187],{},"systemctl restart","：重新启动服务。",[42,1190,1191,1194],{},[164,1192,1193],{},"systemctl status","：查看服务的状态。",[42,1196,1197,1200],{},[164,1198,1199],{},"systemctl enable","：使服务在启动时自动启动。",[42,1202,1203,1206],{},[164,1204,1205],{},"systemctl disable","：使服务在启动时不自动启动。",[106,1208,1210],{"id":1209},"使用-journalctl-命令来查看日志消息","使用 journalctl 命令来查看日志消息",[13,1212,1213,1214,1216],{},"在服务出现问题的时候，我们可以通过 ",[164,1215,1161],{}," 命令去查看服务在运行过程中留下的日志消息，方便我们去排错。",[13,1218,1165,1219,1168],{},[164,1220,1221],{},"journalctl",[39,1223,1224,1230,1236,1242,1248,1254,1260],{},[42,1225,1226,1229],{},[164,1227,1228],{},"journalctl -b",": 显示当前系统日志。",[42,1231,1232,1235],{},[164,1233,1234],{},"journalctl -b -1",": 显示最近一条系统日志。",[42,1237,1238,1241],{},[164,1239,1240],{},"journalctl -b -10",": 显示最近 10 条系统日志。",[42,1243,1244,1247],{},[164,1245,1246],{},"journalctl -u \u003Cunit>",": 显示指定单元的日志。",[42,1249,1250,1253],{},[164,1251,1252],{},"journalctl -u \u003Cunit> -b",": 显示指定单元的最近系统日志。",[42,1255,1256,1259],{},[164,1257,1258],{},"journalctl -u \u003Cunit> -b -1",": 显示指定单元的最近一条系统日志。",[42,1261,1262,1265],{},[164,1263,1264],{},"journalctl -u \u003Cunit> -b -10",": 显示指定单元的最近 10 条系统日志。",[13,1267,1268,1269,1271,1272,1275],{},"还可以使用 ",[164,1270,1221],{}," 命令来导出日志消息到文件。例如，以下命令将当前系统日志导出到 ",[164,1273,1274],{},"/home/user/journal.log"," 文件：",[157,1277,1282],{"className":1278,"code":1280,"language":1281},[1279],"language-text","journalctl > /home/user/journal.log\n","text",[164,1283,1280],{"__ignoreMap":162},[55,1285,1286],{"id":1286},"防火墙的配置",[13,1288,1289],{},"关于防火墙，iptables 是 Linux 系统中最早使用的防火墙工具，它基于内核模块来过滤网络数据包。nftables 是 iptables 的继任者，与 iptables 相比，nftables 更简单易用，同时性能也更好。",[13,1291,1292],{},"但我这边想要推荐的是 ufw，他是 iptables 的一个前端，它提供一个更简单、更易于使用的命令行界面。UFW 基于 iptables 来实现其功能，但它不被用来直接使用 iptables 命令。UFW 使用自己的命令来配置防火墙，这些命令被转换为 iptables 命令并执行。",[13,1294,1295],{},"查看 ufw 状态",[157,1297,1299],{"className":159,"code":1298,"language":161,"meta":162,"style":162},"sudo ufw status\n",[164,1300,1301],{"__ignoreMap":162},[167,1302,1303,1306,1309],{"class":169,"line":170},[167,1304,1305],{"class":173},"sudo",[167,1307,1308],{"class":177}," ufw",[167,1310,1311],{"class":177}," status\n",[13,1313,1314],{},"禁用所有端口",[157,1316,1318],{"className":159,"code":1317,"language":161,"meta":162,"style":162},"sudo ufw deny all\n",[164,1319,1320],{"__ignoreMap":162},[167,1321,1322,1324,1326,1329],{"class":169,"line":170},[167,1323,1305],{"class":173},[167,1325,1308],{"class":177},[167,1327,1328],{"class":177}," deny",[167,1330,1331],{"class":177}," all\n",[13,1333,1334],{},"开放 22 端口(ssh 的默认端口，禁用可能导致服务器失联)",[157,1336,1338],{"className":159,"code":1337,"language":161,"meta":162,"style":162},"sudo ufw allow 22\n",[164,1339,1340],{"__ignoreMap":162},[167,1341,1342,1344,1346,1349],{"class":169,"line":170},[167,1343,1305],{"class":173},[167,1345,1308],{"class":177},[167,1347,1348],{"class":177}," allow",[167,1350,1351],{"class":270}," 22\n",[13,1353,1354],{},"开放 80 端口",[157,1356,1358],{"className":159,"code":1357,"language":161,"meta":162,"style":162},"sudo ufw allow 80\n",[164,1359,1360],{"__ignoreMap":162},[167,1361,1362,1364,1366,1368],{"class":169,"line":170},[167,1363,1305],{"class":173},[167,1365,1308],{"class":177},[167,1367,1348],{"class":177},[167,1369,1370],{"class":270}," 80\n",[13,1372,1373],{},"开放 443 端口",[157,1375,1377],{"className":159,"code":1376,"language":161,"meta":162,"style":162},"sudo ufw allow 443\n",[164,1378,1379],{"__ignoreMap":162},[167,1380,1381,1383,1385,1387],{"class":169,"line":170},[167,1382,1305],{"class":173},[167,1384,1308],{"class":177},[167,1386,1348],{"class":177},[167,1388,1389],{"class":270}," 443\n",[13,1391,1392],{},"启用 ufw",[157,1394,1396],{"className":159,"code":1395,"language":161,"meta":162,"style":162},"sudo ufw enable\n",[164,1397,1398],{"__ignoreMap":162},[167,1399,1400,1402,1404],{"class":169,"line":170},[167,1401,1305],{"class":173},[167,1403,1308],{"class":177},[167,1405,1406],{"class":177}," enable\n",[55,1408,1409],{"id":1409},"包管理器是什么",[55,1411,1413],{"id":1412},"linux-常用命令","Linux 常用命令",[55,1415,1416],{"id":1416},"常用的一些debug手段",[1418,1419,1420],"style",{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .s2QsP, html code.shiki .s2QsP{--shiki-default:#E45649;--shiki-dark:#E5C07B}",{"title":162,"searchDepth":201,"depth":201,"links":1422},[1423,1424,1429,1433,1443],{"id":33,"depth":201,"text":34},{"id":53,"depth":201,"text":53,"children":1425},[1426,1427,1428],{"id":57,"depth":222,"text":57},{"id":63,"depth":222,"text":63},{"id":75,"depth":222,"text":75},{"id":95,"depth":201,"text":95,"children":1430},[1431,1432],{"id":98,"depth":222,"text":98},{"id":104,"depth":222,"text":104},{"id":132,"depth":201,"text":132,"children":1434},[1435,1436,1437,1438,1439,1440,1441,1442],{"id":135,"depth":222,"text":135},{"id":141,"depth":222,"text":142},{"id":148,"depth":222,"text":149},{"id":292,"depth":222,"text":292},{"id":329,"depth":222,"text":329},{"id":361,"depth":222,"text":362},{"id":488,"depth":222,"text":489},{"id":717,"depth":222,"text":718},{"id":1057,"depth":201,"text":1058,"children":1444},[1445,1446,1447,1448,1449,1450,1451],{"id":1061,"depth":222,"text":1062},{"id":1065,"depth":222,"text":1066},{"id":1147,"depth":222,"text":1148},{"id":1286,"depth":222,"text":1286},{"id":1409,"depth":222,"text":1409},{"id":1412,"depth":222,"text":1413},{"id":1416,"depth":222,"text":1416},"2023-08-04 01:19:22","md",{},"/2023/08/04/static-webpage-deployment-for-a-beginner","---\ntitle: 从零开始的静态网页部署（到个人云服务器）\ndate: 2023-08-04 01:19:22\nsticky:\ntags:\n- Linux\n- Network\n- Vue.js\n- Caddy\n- Web\n---\n\n> 这篇博客是受 [Tiancy](https://blog.tiancy.cn/) 之托，在2023年精弘网络暑期授课的前端系列第七节课时针对项目部署这一块内容时所产生的产物。在授课视频中，受时长所限，我不得不采用宝塔面板+纯 ip 访问的方式来完成一个简单的部署，但这终究不是什么优雅的方案: 宝塔的安全性堪忧、其隐私性也是备受争议，而纯 ip 访问的方式也过于简陋，且没有支持 https 访问。\n>\n> 因此这篇博客将以面对初学者的口吻去讲述如何从零开始部署一个 Vue.js 的项目到云服务器，以解我心头的愧疚。但是，我没有备案过的域名，且国内云服务器厂商众多，这篇博客终究不可能做到像保姆级教学那样去一一演示每一家云服务器厂商网页面板上的操作过程，而一些比较基础的概念我会给出简单的解释和例子以及引用一些外部链接，但终究不会全面覆盖到，诸位还请见谅。\n>\n> 本文采用了一些 ChatGPT 和 Google Bard 提供的内容，准确性经过我本人核阅。\n\n## 基础 Web 知识\n\n针对以下三个知识点，我是在初中的信息课上学到的，互联网上应该不乏对于这三个问题的权威解释，因此我也不在此赘述，不知道的小伙伴请自行搜索。\n\n- ip 地址是什么\n- 域名是什么\n- DNS 服务器是干什么的\n\n## 关于备案\n\n### 不备案的影响\n\n当你通过域名去访问境内服务器的 80 (http 默认端口) 和 443 (https 默认端口)时，如果该域名没有备案或者境内这台云服务器的云服务器商不知道你在别的服务商那里有备案的情况下，则会对请求进行拦截。对于访问 80 的请求，将会直接劫持 http 请求以重定向到他们的备案提示页面；对于访问 443 的请求，由于 https 没法被劫持，则会通过连接重置的方式阻止你访问。如果你确定你需要使用中国大陆境内的云服务器，应当采取「备案」和「接入备案」两种方式分别解决上述两种情况。\n\n### 备案方法\n\n每个省都有自己对应的管局，而各省的管局对于备案的规则都有些差异，而个人备案一般是找自己户籍所在地的管局去备案，详细的可以看[阿里云写的文档](https://help.aliyun.com/zh/icp-filing/user-guide/icp-filing-regulations-of-the-miit-for-different-regions)。\n\n### 使用中国大陆境外的云服务器\n\n可以选择和我一样去中国大陆以外的地区部署云服务，但由于众所周知的原因，访问别的国家或地区的服务器可能会有速度慢、延迟高等问题，这涉及到线路优化，也比较复杂。更糟糕的情况是，你甚至有可能刚开出来一台机子就发现这个 ip 在中国大陆境内是无法访问到的，这也是比较尴尬的地方。一般来说，可以选择在境内的云服务器商那里实名认证（不是备案）去购买他们的境外服务器（比如 ucloud 新用户优惠的香港云服务器，~~ucloud 的客户经理看到了能不能再送我一台机子啊~~），这种机子是线路相对比较好的。\n\n选购中国大陆境外的云服务器时，厂商可能会提供测试 ip 来帮助你判断线路质量，可以使用 ipip.net 提供的 [besttrace](https://www.ipip.net/product/client.html) 程序来查看数据包经过的地方，很可能你买一台香港的服务器，数据却要从日本或者美国绕一圈，这就非常尴尬。\n\n## 域名部分\n\n### 域名注册\n\n要获得一个域名，最简单的方式是花钱。境内的阿里云、腾讯云、华为云等几家比较有名的云服务器厂商均有域名注册的业务且价格基本差距不大，可以随便找一个注册。而境外的域名注册商，我这边个人推荐 namesilo，这家支持支付宝付款且价格尚可，首次购买前可以去搜索引擎搜一搜近期的优惠码，可能会有一些优惠折扣。（可恶我没有拿到 aff 回扣）\n\n### 域名解析\n\n#### 域名解析的作用\n\n如果你了解了 dns 的作用，那我们可以来简单讲讲域名解析是干什么的。dns 服务器将会告诉用户的设备某一个域名它对应的 ip 是多少，而域名解析这一步就是告诉世界上所有的 dns 服务器这个域名从此刻开始对应的 ip 是多少，以便世界上所有的 dns 服务器向网民在需要时告知他们正确的 ip 地址。\n\n要实现这一步骤并不复杂，作为初学者我们也不必去担心会不会有人把你花钱买来的域名指向错误的 ip 地址，这些都交给域名解析服务去解决。几乎每一家提供的域名解析服务页面上都会指导你去将域名的 NameServer 设置为他们家的服务器，这里也不做教学。\n\n#### 域名解析服务推荐\n\n凡是提供域名注册服务的云服务商基本也都会提供域名解析服务，在这里我主要推荐两家云服务商（我没拿广告费啊）—— cloudflare 和 dnspod。这两家免费版套餐的操作页面都简洁明了，没有非常扎眼的广告。前者提供了除中国大陆以外地区的 cdn 加速服务，而后者可以提供境内境外分线路解析的功能（把来自境内的用户指向 ip 地址 A，来自境外的用户指向 ip 地址 B）。\n\n#### 解析记录类型\n\n作为初学者只需要了解 A 记录和 CNAME 记录就行了。\n\nA 记录的意思就是将一个域名指向一个 ipv4 地址，也就是去实现 dns 服务器最主要的作用。而 CNAME 记录是将一个域名指向另一个域名，通俗来讲就是「和它一样」。比如 a.com 如果 CNAME 指向 b.com，意思就是说我现在不确定 a.com 的 ip 是多少，但我知道 a.com 的 ip 和 b.com 一样，所以你去查 b.com 就行了。\n\n## 服务器部分\n\n### 云服务器的购买\n\n这部分我直接忽略过去了，本文在「关于备案」这一部分已经详细阐述了备案相关的内容，购买中国大陆境内还是境外的服务器需要由屏幕前的各位自己决定~~（应该没人会把我的博客打印成纸质稿看吧）~~。\n\n### 如何选择云服务器上要运行的 Linux 发行版\n\n服务器上常用的 Linux 发行版主要是 Debian、Ubuntu、CentOS(这个死得差不多了) 这三个，那我个人更熟悉的是 Ubuntu，版本号越新越好，截止本文发出最新的 lts 版本是 22.04 lts，所以直接选择这个就行。\n\n### 使用 ssh 连接上服务器\n\n在云服务器的网页面板上选择好服务器的配置与运行的操作系统后，云服务商应该至少给你提供两样东西: 云服务器的 ip 和 root 用户的登陆密码。这可能是在网页面板上展示的，一些境外的云服务商可能是直接发送到你注册时预留的邮箱中的，这都无所谓。拿到这两样东西我们就可以使用 ssh 连接到服务器的终端，进行配置操作。\n\n打开自己系统的终端，使用如下命令去连接云服务器（Win10 以上的系统应该也已经自带 openssh 了）\n\n```bash\nssh root@\u003Cyour_server_ip>\n```\n\n```bash\n[zhullyb@Archlinux ~]$ ssh root@120.55.63.96\nThe authenticity of host '120.55.63.96 (120.55.63.96)' can't be established.\nED25519 key fingerprint is SHA256:Op8u4Fv+NvtOxJDKeBQ/jIsFpuR4EYTUt53qjG8k6ok.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '120.55.63.96' (ED25519) to the list of known hosts.\nroot@120.55.63.96's password: \nWelcome to Ubuntu 22.04.2 LTS (GNU/Linux 5.15.0-78-generic x86_64)\n```\n\n输入密码时，已经输入的密码部分在屏幕上不会显示，但无需理会，只要将云服务器的密码粘贴后直接敲回车就好。\n\n### 如何编辑一个服务器上的文件\n\n一般来说，网上的教程会推荐你使用 vim 这个 tui 界面的编辑器去编辑这个文件，但 vim 的学习成本有点高，如果只是临时编辑服务器上的文件的话，我个人更加推荐使用 nano\n\n```bash\nnano /etc/caddy/conf.d/example.conf\n```\n\n这行命令表示我要编辑 `/etc/caddy/conf.d/example.conf` 这个文件，如果这个文件不存在则去创建这个文件。\n\n随后你可以根据自己的需求去编辑文件了，上下左右按键可以调整光标位置，直接敲键盘上的字母按键就可以把字母敲进去，想推出时使用 `ctrl+s` 保存，再使用 `ctrl+x` 退出就可以了。\n\n### 云服务器的安全组规则\n\n一般是国内的云服务厂商会有安全组规则这种东西，你可以理解成一个额外的防火墙。一般来说，80 和 443 两个端口被我们约定作为网页的默认端口，80 是 http 的端口，而 443 则是 https 的端口。因此，我们需要在安全组规则这里去允许 80 和 443 两个端口能被外部访问到。截图中是阿里云的控制面板。![](https://static.031130.xyz/uploads/2024/08/12/64d4e31fd5270.webp)\n\n![](https://static.031130.xyz/uploads/2024/08/12/64d4e34db94ee.webp)\n\n云服务商给的默认规则应该是下面这个样子的:\n\n![image-20230810151900653](https://static.031130.xyz/uploads/2024/08/12/64d4e3ca6aa29.webp)\n\n这里开放的 22 端口用于 ssh 连接服务器，而3389 则是 Windows 的远程桌面。我们可以使用「快速添加」按钮来开放 80 和 443 端口\n\n![](https://static.031130.xyz/uploads/2024/08/12/64d4e4e5b1e68.webp)\n\n### Linux 下常见的文件路径及对应作用\n\n在这一章节中，我只罗列了几个比较常见的路径，更多的资料推荐查阅[菜鸟教程](https://www.runoob.com/linux/linux-system-contents.html)，写得还不错。`$USER` 指当前用户的用户名\n\n| 路径          | 作用                                                         |\n| ------------- | ------------------------------------------------------------ |\n| `/home/$USER` | 用户的家目录，下有 Desktop，Download，Picture 等多个文件夹（root 用户的家目录是 `/root`） |\n| `/etc`        | 存放软件的配置文件的地方                                     |\n| `/usr/bin`    | 存放二进制可执行文件的地方，一般也会被链接到 `/bin`          |\n| `/usr/lib`    | 一般用于存放依赖库(动态链接库)，一般会被链接到 `/lib`        |\n| `/usr/share`  | 一些共享数据，比如帮助文档、软件需要的资源文件等等           |\n| `/opt`        | optional(可选) 的缩写，一些由官网提供的（区别于发行版自带的）软件可能被安装到这里 |\n| `/boot`       | 开机引导使用的路径，一般在正常使用时不会去操作这里           |\n| `/var`        | variable(变量) 的缩写，存放那些经常被变更的东西，比如运行日志、网站数据等等 |\n\n### caddy 的配置与使用\n\ncaddy 是一个 web 服务器，他是使用 golang 写的一个平替品，拥有配置更简单、自动申请 Let's Encrypt 证书的优势，我个人非常推荐非专业运维去使用这个。caddy 的官方文档在 https://caddyserver.com/docs/ ，但我相信你们不会去看（我也没有认真看过），有问题可以尝试去问问 chatgpt 看看能不能得到想要的配置文件。caddy 现在已经迭代到 V2 版本了，与 V1 版本相比有一些语法差异以支持更多的功能，且许可证允许商用更加自由。\n\ncaddy V2 支持使用 json 配置文件或者 Caddyfile，对于不复杂的需求我个人更推荐后者，简洁易懂。下面是我博客所使用的 Caddyfile 示例:\n\n```nginx\n# 这里表示，使用 zhul.in 这个域名访问 443 端口时，提供以下内容\nzhul.in:443 {\n        # 这里设置了所需提供内容的目录\n        root * /var/www/blog\n\n        # 这里设置的是开启 https 支持时所需要使用的 ssl 证书文件，但如果不设置也不碍事，caddy 会自动帮你申请 Let's Encrypt 的 ssl 证书\n        tls /var/www/key/zhul.in.cert /var/www/key/zhul.in.key\n\n        # 这里表示我们开启了 zstd 和 gzip 两种压缩算法，来减少数据传输量，不设置也没问题\n        encode zstd gzip\n        # 这里表示我们开启了一个文件服务器，当你访问 https://zhul.in/example_file 时，caddy 会提供 /var/www/blog/example_file 这个文件的内容\n        file_server\n\n\t\t# 这里是错误处理部分\n        handle_errors {\n        \t\t# 这里表示当发生错误时，将请求重定向到 /404.html 这个文件\n               \trewrite * /404.html\n            \t# 这里使用了模板来处理错误页面。当发生错误时，Caddy会使用模板引擎来填充错误页面的内容，以便向用户显示有关错误的相关信息。\n                templates\n            \t#这里表示继续使用文件服务器来提供错误页面\n                file_server\n        }\n}\n```\n\n你可以发现，如果要把这个 Caddyfile 写到最简单，仅仅是能跑的状态，只需要这几行:\n\n```nginx\nzhul.in:443 {\n        root * /var/www/blog\n        \n        file_server\n}\n```\n\n这就是我为什么推荐非专业运维去使用 caddy 的原因，只需要三行代码就可以跑起来一个简单的服务。\n\n而部署一个 Vue.js 项目，我们可能会需要多加一行 `try_files {path} {path}/ /index.html` ，这一行代码的意思是当用户尝试访问 /example 时，实际需要用户的浏览器去访问 /index.html 这个地方，因为使用了 vue-router 的项目的编译产物只有 /index.html 而没有 /example.html，而后者的内容是包括在前者中的。以下的 Caddyfile 是精弘的首页正在使用的配置文件，应该可以适用于绝大多数的 Vue 项目:\n\n```nginx\nwww.myzjut.org {\n        root * /var/www/jh\n\n        encode zstd gzip\n        file_server\n        try_files {path} {path} /index.html\n}\n```\n\n第一行省略了端口号，说明 80 和 443 端口都支持。\n\n### 通过sftp/rsync将本地的静态网页上传到云服务器的对应目录\n\n#### 使用 sftp 部署\n\n> sftp 是一个交互性比较强的上下传工具，如果不喜欢背命令的话可以考虑使用 sftp，操作起来都比较顺其自然\n\n首先，我们在本地 cd 到静态网页文件所在的路径，比如一个 Vue 项目编译产生的文件可能就会在 dist 下面\n\n```bash\ncd dist/\n```\n\n然后，我们使用 sftp 连接到服务器，这和 ssh 命令没什么两样的，就换了个命令名。\n\n```bash\nsftp root@\u003Cyour_server_ip>\n```\n\n输入 root 用户的密码后，命令行的提示符就会变成 `sftp >` 的样子\n\n```bash\n[zhullyb@Archlinux ~]$ sftp root@\u003Cyour_server_ip>\nConnected to \u003Cyour_server_ip>.\nsftp>\n```\n\n这是一个交互式的命令行窗口，可以使用 `cd`、`mkdir` 等几个简单的命令。我们先创建 `/var/www` 这个文件夹:\n\n```bash\nsftp> mkdir /var/www\n```\n\n再创建 `/var/www/jh` 这个文件夹:\n\n```bash\nsftp> mkdir /var/www/jh\n```\n\n随后，我们就可以进入远程服务器的 `/var/www/jh` 目录下\n\n```bash\nsftp> cd /var/www/jh\n```\n\n这样我们就可以把本地的静态网页文件上传到服务器，使用 `put` 命令即可，下面的命令表示将本地当前目录下的所有文件以及其子文件夹全部内容都上传到服务器的当前文件夹，也就是 `/var/www/jh`\n\n```bash\nsftp> put -r *\n```\n\n再输入 `exit` 即可推出 sftp 状态。\n\n这边再教一些 sftp 使用中的常用命令:\n\nls: 查看远程服务器中当前目录中所有非隐藏文件\n\nlls: 查看本地当前路径中的所有非隐藏文件\n\npwd: 查看远程服务器中当前的路径\n\nlpwd: 查看本地当前的路径\n\n#### 使用 rsync 部署\n\n> rsync 的交互性就不太强，是在本机操作的，需要提前写好一行比较长的命令去执行操作，比较适合写在脚本里。\n\n下面这行代码是我们精弘网络首页使用 github action 部署时的命令\n\n```bash\nrsync -avzP --delete dist/ root@\u003Cyour_server_ip>:/var/www/jh/\n```\n\ndist/ 表示我想要上传当前路径下的 dist 文件夹下的所有文件\n\nroot@\u003Cyour_server_ip> 这一段和前面的 ssh 与 sftp 一样，都表示用户名和对应的服务器 ip，\n\n`:var/www/jh` 表示文件将被上传到服务器的这个路径下。\n\n以下是 rsync 的一些常用参数：\n\n- `-a`：以归档模式进行同步，即保持文件的所有属性（如权限、属主、属组、时间戳等）。\n\n- `-v`：显示详细的同步过程。\n\n- `-z`：使用压缩算法进行数据传输，以减少网络带宽的占用。\n\n- `--delete`：在目标目录中删除源目录中不存在的文件。\n\n- `-P`选项是`rsync`命令的一个常用选项，它的作用是将`--partial`和`--progress`选项组合在一起使用。\n\n  - `--partial`选项表示如果文件传输被中断，`rsync`会保留已经传输的部分文件，下次继续传输时可以从上次中断的地方继续。\n  - `--progress`选项表示显示文件传输的进度信息，包括已经传输的字节数、传输速度和估计剩余时间等。\n\n  使用`-P`选项可以方便地同时启用这两个选项，以便在文件传输期间显示进度信息，并在中断后继续传输。\n\n## 附 : 其他相关的一些操作技巧（还没写完，等我填坑）\n\n### 使用 ssh-copy-id 将本地的 ssh 公钥复制到服务器上\n\n\n\n### 配置 sshd 以加强服务器的安全性\n\nsshd 是 Secure Shell Daemon 的缩写，它是一个 ssh 的守护进程，允许用户通过 SSH 协议安全地连接到远程服务器。\n\nsshd 的配置文件应该在 `/etc/ssh/sshd_config` 文件中，通过更改其中一些配置项，我们可以让我们的服务器更安全。\n\n| 建议                        | 修改方式                                                     |\n| --------------------------- | ------------------------------------------------------------ |\n| 禁用 root 用户通过 SSH 登录 | 在 sshd配置文件中将 `PermitRootLogin` 选项设置为 `no`。（在此之前，你应该创建一个非 root 用户并设置好对应的账号密码，修改好 /etc/sudoers 文件确保该用户能够通过 sudo 执行一些需要 root 权限去执行的语句） |\n| 强制使用 SSH 密钥登录       | 在 sshd 配置文件中将 `PasswordAuthentication` 选项设置为 `no`。（在此之前，你应该完成上一步 ssh-copy-id 将本地的 ssh 公钥复制到服务器上） |\n| 更改 SSH 端口               | 在 sshd 配置文件中将 `Port` 选项设置为一个未使用的端口。（在此之前，使用 ssh 命令连接到服务器时，需要使用 -p \\\u003Cport> 参数去指定端口） |\n| 启用 SSH 日志记录           | 在 sshd 配置文件中将 `SyslogFacility` 选项设置为 `auth`。    |\n\n### systemd 的作用与使用方法\n\nsystemd 是一个用于管理 Linux 系统的服务管理器和初始化系统。\n\n#### 使用 systemctl 命令管理服务状态\n\n在我们静态网页部署这一块，我们主要用 `systemctl` 命令去管理一些服务的状态，比如我们想要将 caddy 设置为开机自启，这样我们即使重启了服务器，caddy 也能自动开始提供服务。\n\n以下是一些常见的 `systemctl` 命令：\n\n- `systemctl start`：启动服务。\n- `systemctl stop`：停止服务。\n- `systemctl restart`：重新启动服务。\n- `systemctl status`：查看服务的状态。\n- `systemctl enable`：使服务在启动时自动启动。\n- `systemctl disable`：使服务在启动时不自动启动。\n\n#### 使用 journalctl 命令来查看日志消息\n\n在服务出现问题的时候，我们可以通过 `systemctl` 命令去查看服务在运行过程中留下的日志消息，方便我们去排错。\n\n以下是一些常见的 `journalctl` 命令：\n\n- `journalctl -b`: 显示当前系统日志。\n- `journalctl -b -1`: 显示最近一条系统日志。\n- `journalctl -b -10`: 显示最近 10 条系统日志。\n- `journalctl -u \u003Cunit>`: 显示指定单元的日志。\n- `journalctl -u \u003Cunit> -b`: 显示指定单元的最近系统日志。\n- `journalctl -u \u003Cunit> -b -1`: 显示指定单元的最近一条系统日志。\n- `journalctl -u \u003Cunit> -b -10`: 显示指定单元的最近 10 条系统日志。\n\n还可以使用 `journalctl` 命令来导出日志消息到文件。例如，以下命令将当前系统日志导出到 `/home/user/journal.log` 文件：\n\n```\njournalctl > /home/user/journal.log\n```\n\n### 防火墙的配置\n\n关于防火墙，iptables 是 Linux 系统中最早使用的防火墙工具，它基于内核模块来过滤网络数据包。nftables 是 iptables 的继任者，与 iptables 相比，nftables 更简单易用，同时性能也更好。\n\n但我这边想要推荐的是 ufw，他是 iptables 的一个前端，它提供一个更简单、更易于使用的命令行界面。UFW 基于 iptables 来实现其功能，但它不被用来直接使用 iptables 命令。UFW 使用自己的命令来配置防火墙，这些命令被转换为 iptables 命令并执行。\n\n查看 ufw 状态\n\n```bash\nsudo ufw status\n```\n\n禁用所有端口\n\n```bash\nsudo ufw deny all\n```\n\n开放 22 端口(ssh 的默认端口，禁用可能导致服务器失联)\n\n```bash\nsudo ufw allow 22\n```\n\n开放 80 端口\n\n```bash\nsudo ufw allow 80\n```\n\n开放 443 端口\n\n```bash\nsudo ufw allow 443\n```\n\n启用 ufw\n\n```bash\nsudo ufw enable\n```\n\n### 包管理器是什么\n\n### Linux 常用命令\n\n### 常用的一些debug手段\n\n",{"title":5,"description":162},"posts/static-webpage-deployment-for-a-beginner",false,[1461,1462,1463,1464,1465],"Linux","Network","Vue.js","Caddy","Web","wvBoql1mnuSd1tUB2z-01MUPwrg5YMKGg0Ysw98tzlQ",[1468,1473],{"title":1469,"path":1470,"stem":1471,"date":1472,"children":-1},"手动指定 python-selenium 的 driver path 以解决在中国大陆网络环境下启动卡住的问题","/2023/09/02/python-selenium-start-difficult-in-china-mainland","posts/python-selenium-start-difficult-in-china-mainland","2023-09-02 01:59:18",{"title":1474,"path":1475,"stem":1476,"date":1477,"children":-1},"在运行OpenWRT的N1盒子上部署 QQBot","/2023/07/31/run-qq-bot-on-phicomm-n1-openwrt","posts/run-qq-bot-on-phicomm-n1-openwrt","2023-07-31 04:11:31",1761738197586]