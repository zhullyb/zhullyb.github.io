[{"data":1,"prerenderedAt":655},["ShallowReactive",2],{"post-2023-07-31-run-qq-bot-on-phicomm-n1-openwrt":3,"surround-2023-07-31-run-qq-bot-on-phicomm-n1-openwrt":644,"randomIndex/2023/07/31/run-qq-bot-on-phicomm-n1-openwrt/":77},{"id":4,"title":5,"body":6,"date":631,"description":12,"extension":632,"meta":633,"navigation":268,"path":634,"rawbody":635,"seo":636,"stem":637,"sticky":638,"tags":639,"__hash__":643},"posts/posts/run-qq-bot-on-phicomm-n1-openwrt.md","在运行OpenWRT的N1盒子上部署 QQBot",{"type":7,"value":8,"toc":622},"minimark",[9,13,18,40,140,155,159,168,195,199,208,212,215,219,222,226,229,232,239,242,600,618],[10,11,12],"p",{},"由于学校社团的招新需要，我写了一个依赖于 go-cqhttp 运行的 QQ Bot，并没有实现什么花里胡哨的功能，只是实现了关键词回复和新人入群时的欢迎语。因为没考虑后续维护的问题，代码也写得比较草，但毕竟是能跑。这么一个小型的程序并不会占用的多少的服务器资源，单独为这么一个 Bot 去开一台国内的 vps 似乎是有些大材小用了，刚好我手上有一台运行在 OpenWRT 上的 Phicomm N1 盒子，反正也是 Linux 系统，便打算拿来挂 QQ Bot。",[14,15,17],"h2",{"id":16},"安装-jdk","安装 JDK",[10,19,20,21,28,29,33,34,39],{},"由于腾讯近几个月对于 Bot 风控非常严格，所以不得不采用 SignServer 项目 ",[22,23,27],"a",{"href":24,"rel":25},"https://github.com/fuqiuluo/unidbg-fetch-qsign",[26],"nofollow","fuqiuluo/unidbg-fetch-qsign"," 来确保 Bot 账号不会被风控一次保证 Bot 运行的稳定性。而这个项目又是使用 Java 开发的，因此需要先安装 JDK/JRE。但 OpenWRT 的开发者可能并没有考虑到在路由器设备上运行 Java 程序的需求，因此 OpenWRT 的源里面是没有预先打包 JDK 的，因此我们需要额外安装。我直接 google 搜索了 ",[30,31,32],"code",{},"install java on openwrt"," 的关键词，在 Github 找到了这个脚本: ",[22,35,38],{"href":36,"rel":37},"https://gist.github.com/simonswine/64773a80e748f36615e3251234f29d1d%E3%80%82%E4%BD%86%E5%BE%88%E9%81%97%E6%86%BE%EF%BC%8C%E4%BB%A3%E7%A0%81%E8%B7%91%E4%B8%8D%E8%B5%B7%E6%9D%A5%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%97%B6%E6%8F%90%E7%A4%BA",[26],"https://gist.github.com/simonswine/64773a80e748f36615e3251234f29d1d。但很遗憾，代码跑不起来，下载时提示"," 404。于是我打开脚本细细一看，脚本中 jdk 的版本号和设备的架构均需要改动。具体改动如下:",[41,42,47],"pre",{"className":43,"code":44,"language":45,"meta":46,"style":46},"language-diff shiki shiki-themes one-light one-dark-pro","- REVISION=8.212.04-r0\n+ REVISION=8.302.08-r1\n# 版本号请自行去仓库内翻最新的\n......\n- URL=http://dl-cdn.alpinelinux.org/alpine/v3.10/community/armv7/\n+ URL=http://dl-cdn.alpinelinux.org/alpine/v3.14/community/aarch64/\n......\n- # verify packages\n- sha256sum -c \u003C\u003CEOF\n- e2fce9ee7348e9322c542206c3c3949e40690716d65e9f0e44dbbfca95d59d8c  openjdk8-8.212.04-r0.apk\n- 26ad786ff1ebeeb7cd24abee10bc56211a026a2d871cf161bb309563e1fcbabc  openjdk8-jre-8.212.04-r0.apk\n- 947d5f72ed2dc367c97d1429158913c9366f9c6ae01b7311dd8546b10ded8743  openjdk8-jre-base-- 8.212.04-r0.apk\n- c6a65402bf0a7051c60b45e1c6a8f4277a68a8b7e807078f20db17e0233dea8e  openjdk8-jre-lib-8.212.04-r0.apk\n- EOF\n# 我这里直接将 sha256 校验给删除了，有兴趣可以自己去更新这几个文件的文件名和其对应的哈希值\n","diff","",[30,48,49,57,63,69,75,81,87,92,98,104,110,116,122,128,134],{"__ignoreMap":46},[50,51,54],"span",{"class":52,"line":53},"line",1,[50,55,56],{},"- REVISION=8.212.04-r0\n",[50,58,60],{"class":52,"line":59},2,[50,61,62],{},"+ REVISION=8.302.08-r1\n",[50,64,66],{"class":52,"line":65},3,[50,67,68],{},"# 版本号请自行去仓库内翻最新的\n",[50,70,72],{"class":52,"line":71},4,[50,73,74],{},"......\n",[50,76,78],{"class":52,"line":77},5,[50,79,80],{},"- URL=http://dl-cdn.alpinelinux.org/alpine/v3.10/community/armv7/\n",[50,82,84],{"class":52,"line":83},6,[50,85,86],{},"+ URL=http://dl-cdn.alpinelinux.org/alpine/v3.14/community/aarch64/\n",[50,88,90],{"class":52,"line":89},7,[50,91,74],{},[50,93,95],{"class":52,"line":94},8,[50,96,97],{},"- # verify packages\n",[50,99,101],{"class":52,"line":100},9,[50,102,103],{},"- sha256sum -c \u003C\u003CEOF\n",[50,105,107],{"class":52,"line":106},10,[50,108,109],{},"- e2fce9ee7348e9322c542206c3c3949e40690716d65e9f0e44dbbfca95d59d8c  openjdk8-8.212.04-r0.apk\n",[50,111,113],{"class":52,"line":112},11,[50,114,115],{},"- 26ad786ff1ebeeb7cd24abee10bc56211a026a2d871cf161bb309563e1fcbabc  openjdk8-jre-8.212.04-r0.apk\n",[50,117,119],{"class":52,"line":118},12,[50,120,121],{},"- 947d5f72ed2dc367c97d1429158913c9366f9c6ae01b7311dd8546b10ded8743  openjdk8-jre-base-- 8.212.04-r0.apk\n",[50,123,125],{"class":52,"line":124},13,[50,126,127],{},"- c6a65402bf0a7051c60b45e1c6a8f4277a68a8b7e807078f20db17e0233dea8e  openjdk8-jre-lib-8.212.04-r0.apk\n",[50,129,131],{"class":52,"line":130},14,[50,132,133],{},"- EOF\n",[50,135,137],{"class":52,"line":136},15,[50,138,139],{},"# 我这里直接将 sha256 校验给删除了，有兴趣可以自己去更新这几个文件的文件名和其对应的哈希值\n",[10,141,142,143,146,147,150,151,154],{},"随后 ",[30,144,145],{},"chmod +x"," 授予脚本可执行权限后直接执行，我们就将 alpine linux 上的 openjdk 成功解包并安装到了我们的 OpenWRT 中，我们只需要配置好环境变量即可完成安装。但我又比较懒，我看见 SignServer 的启动脚本里是可以通过读取 ",[30,148,149],{},"$JAVA_HOME"," 来获取 Java 二进制可执行文件的代码逻辑，于是我便在每次启动 SignServer 脚本前提前执行 ",[30,152,153],{},"export JAVA_HOME=/opt/java-1.8-openjdk"," 即可。",[14,156,158],{"id":157},"安装-screen","安装 screen",[10,160,161,162,167],{},"相比起前面 JDK 的安装，这一步 screen 的安装反而没有那么麻烦，",[22,163,166],{"href":164,"rel":165},"https://openwrt.org/packages/pkgdata/screen",[26],"在最新版本的 OpenWRT 源中，screen 已经被包括进去了","，我们直接把 OpenWRT 换好源，从源里就可以安装。",[41,169,173],{"className":170,"code":171,"language":172,"meta":46,"style":46},"language-bash shiki shiki-themes one-light one-dark-pro","opkg update\nopkg install screen\n","bash",[30,174,175,185],{"__ignoreMap":46},[50,176,177,181],{"class":52,"line":53},[50,178,180],{"class":179},"sAdtL","opkg",[50,182,184],{"class":183},"sDhpE"," update\n",[50,186,187,189,192],{"class":52,"line":59},[50,188,180],{"class":179},[50,190,191],{"class":183}," install",[50,193,194],{"class":183}," screen\n",[14,196,198],{"id":197},"下载-fixed-版本的-go-cqhttp","下载 fixed 版本的 go-cqhttp",[10,200,201,202,207],{},"由于 SignServer 更新，在其请求中多添加了 key 的参数要求，导致原版 go-cqhttp 的最新 release 中释出的二进制文件无法适配最新版的 SignServer，我暂时选用了一个",[22,203,206],{"href":204,"rel":205},"https://github.com/tomato-aoarasi/go-cqhttp-1.1.0-sign-fixed/",[26],"修复了这个问题的 fork"," 去运行 Bot。下载到 OpenWRT 后记得也要授予可执行文件。",[14,209,211],{"id":210},"安装-python-脚本中所需要使用到的库","安装 Python 脚本中所需要使用到的库",[10,213,214],{},"OpenWRT 自带了 python 和 pip，这让我很欣慰。直接使用 pip 安装 flask 和 xlrd 等库即可，完全没有难度。",[14,216,218],{"id":217},"运行-signserver","运行 SignServer",[10,220,221],{},"这一步很简单，将原项目的 Release 下载下来解压后上传到 OpenWRT 的某个路径后，开个 screen 窗口，设置好 JAVA_HOME 变量后再去调用 SignServer 中自带的 shell 脚本即可",[14,223,225],{"id":224},"运行-go-cqhttp","运行 go-cqhttp",[10,227,228],{},"这一步也很简单，得益于 go 静态链接的特性，我们不需要为 go-cqhttp 安装任何额外的依赖就可以执行 Release 中的二进制文件，直接将我们在 PC 上登录好的 session、配置好的 device.json、config.yml 等文件上传到 N1 ，开个 screen 窗口运行即可。",[14,230,231],{"id":231},"运行主程序",[10,233,234,235,238],{},"这个没什么好讲的，同样是开个 screen 窗口运行 ",[30,236,237],{},"python main.py"," 的事情",[10,240,241],{},"python 代码如下:",[41,243,247],{"className":244,"code":245,"language":246,"meta":46,"style":46},"language-python shiki shiki-themes one-light one-dark-pro","from flask import Flask,request\nimport requests\nimport xlrd\n\n# 读取 xls 中的关键词以及回应语句，将其加载到 dict 数据结构中\n_data2 = xlrd.open_workbook('/root/8yue222.xls')\nmain_table2 = _data2.sheets()[0]\nkey_lst2 = main_table2.col_values(0)[1:]\nvalue_lst2 = main_table2.col_values(1)[1:]\nfinal_dict = dict(zip(key_lst2,value_lst2))\n# 读取第二份 xls，并对相同的关键词做覆盖\n_data = xlrd.open_workbook('/root/daihao.xls')\nmain_table = _data.sheets()[0]\nkey_lst = main_table.col_values(4)[1:]\nkey_lst = [str(int(item)) if type(item) == float else item for item in key_lst if item != '']\nkey_lst.remove('Gary')\nvalue_lst = main_table.col_values(5)[1:]\nvalue_lst = [str(int(item)) if type(item) == float else item for item in value_lst if item != '']\nfinal_dict.update(dict(zip(key_lst,value_lst)))\n\napp = Flask(__name__)\nclass API:\n        @staticmethod\n        def send(message):\n                url = \"http://127.0.0.1:5700/send_msg\"\n                data = request.get_json()\n                params = {\n                        \"group_id\":data['group_id'],\n                        \"message\":message\n                }\n                requests.get(url,params=params)\n\n@app.route('/', methods=[\"POST\"])\ndef post_data():\n    data = request.get_json()\n    print(data)\n    if data['post_type'] == 'message':\n        message = data['message']\n        messagex()\n    elif data['post_type'] == 'notice' and data['notice_type'] == 'group_increase':\n        welcome()\n    else:\n        print(\"忽略消息\")\n\n    return \"OK\"\n\ndef messagex():\n        data = request.get_json()\n        message = data['message'].replace('％','%')\n        for key in final_dict.keys():\n                if key == message:\n                        API.send(final_dict[key])\n                        break\n\ndef welcome():\n        data = request.get_json()\n        group_id = data['group_id']\n        user_id = data['user_id']\n        API.send(\"[CQ:at,qq={}] 欢迎来到浙江工业大学，精弘网络欢迎各位的到来！如果想进一步了解我们，请戳精弘首页：www.jh.zjut.edu.cn\\n输入 菜单 获取精小弘机器人的菜单 哦！\\n请及时修改群名片\\n格式如下：姓名+专业/大类\".format(user_id))\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5701)\n","python",[30,248,249,254,259,264,270,275,280,285,290,295,300,305,310,315,320,325,331,337,343,349,354,360,366,372,378,384,390,396,402,408,414,420,425,431,437,443,449,455,461,467,473,479,485,491,496,502,507,513,519,525,531,537,543,549,554,560,565,571,577,583,588,594],{"__ignoreMap":46},[50,250,251],{"class":52,"line":53},[50,252,253],{},"from flask import Flask,request\n",[50,255,256],{"class":52,"line":59},[50,257,258],{},"import requests\n",[50,260,261],{"class":52,"line":65},[50,262,263],{},"import xlrd\n",[50,265,266],{"class":52,"line":71},[50,267,269],{"emptyLinePlaceholder":268},true,"\n",[50,271,272],{"class":52,"line":77},[50,273,274],{},"# 读取 xls 中的关键词以及回应语句，将其加载到 dict 数据结构中\n",[50,276,277],{"class":52,"line":83},[50,278,279],{},"_data2 = xlrd.open_workbook('/root/8yue222.xls')\n",[50,281,282],{"class":52,"line":89},[50,283,284],{},"main_table2 = _data2.sheets()[0]\n",[50,286,287],{"class":52,"line":94},[50,288,289],{},"key_lst2 = main_table2.col_values(0)[1:]\n",[50,291,292],{"class":52,"line":100},[50,293,294],{},"value_lst2 = main_table2.col_values(1)[1:]\n",[50,296,297],{"class":52,"line":106},[50,298,299],{},"final_dict = dict(zip(key_lst2,value_lst2))\n",[50,301,302],{"class":52,"line":112},[50,303,304],{},"# 读取第二份 xls，并对相同的关键词做覆盖\n",[50,306,307],{"class":52,"line":118},[50,308,309],{},"_data = xlrd.open_workbook('/root/daihao.xls')\n",[50,311,312],{"class":52,"line":124},[50,313,314],{},"main_table = _data.sheets()[0]\n",[50,316,317],{"class":52,"line":130},[50,318,319],{},"key_lst = main_table.col_values(4)[1:]\n",[50,321,322],{"class":52,"line":136},[50,323,324],{},"key_lst = [str(int(item)) if type(item) == float else item for item in key_lst if item != '']\n",[50,326,328],{"class":52,"line":327},16,[50,329,330],{},"key_lst.remove('Gary')\n",[50,332,334],{"class":52,"line":333},17,[50,335,336],{},"value_lst = main_table.col_values(5)[1:]\n",[50,338,340],{"class":52,"line":339},18,[50,341,342],{},"value_lst = [str(int(item)) if type(item) == float else item for item in value_lst if item != '']\n",[50,344,346],{"class":52,"line":345},19,[50,347,348],{},"final_dict.update(dict(zip(key_lst,value_lst)))\n",[50,350,352],{"class":52,"line":351},20,[50,353,269],{"emptyLinePlaceholder":268},[50,355,357],{"class":52,"line":356},21,[50,358,359],{},"app = Flask(__name__)\n",[50,361,363],{"class":52,"line":362},22,[50,364,365],{},"class API:\n",[50,367,369],{"class":52,"line":368},23,[50,370,371],{},"        @staticmethod\n",[50,373,375],{"class":52,"line":374},24,[50,376,377],{},"        def send(message):\n",[50,379,381],{"class":52,"line":380},25,[50,382,383],{},"                url = \"http://127.0.0.1:5700/send_msg\"\n",[50,385,387],{"class":52,"line":386},26,[50,388,389],{},"                data = request.get_json()\n",[50,391,393],{"class":52,"line":392},27,[50,394,395],{},"                params = {\n",[50,397,399],{"class":52,"line":398},28,[50,400,401],{},"                        \"group_id\":data['group_id'],\n",[50,403,405],{"class":52,"line":404},29,[50,406,407],{},"                        \"message\":message\n",[50,409,411],{"class":52,"line":410},30,[50,412,413],{},"                }\n",[50,415,417],{"class":52,"line":416},31,[50,418,419],{},"                requests.get(url,params=params)\n",[50,421,423],{"class":52,"line":422},32,[50,424,269],{"emptyLinePlaceholder":268},[50,426,428],{"class":52,"line":427},33,[50,429,430],{},"@app.route('/', methods=[\"POST\"])\n",[50,432,434],{"class":52,"line":433},34,[50,435,436],{},"def post_data():\n",[50,438,440],{"class":52,"line":439},35,[50,441,442],{},"    data = request.get_json()\n",[50,444,446],{"class":52,"line":445},36,[50,447,448],{},"    print(data)\n",[50,450,452],{"class":52,"line":451},37,[50,453,454],{},"    if data['post_type'] == 'message':\n",[50,456,458],{"class":52,"line":457},38,[50,459,460],{},"        message = data['message']\n",[50,462,464],{"class":52,"line":463},39,[50,465,466],{},"        messagex()\n",[50,468,470],{"class":52,"line":469},40,[50,471,472],{},"    elif data['post_type'] == 'notice' and data['notice_type'] == 'group_increase':\n",[50,474,476],{"class":52,"line":475},41,[50,477,478],{},"        welcome()\n",[50,480,482],{"class":52,"line":481},42,[50,483,484],{},"    else:\n",[50,486,488],{"class":52,"line":487},43,[50,489,490],{},"        print(\"忽略消息\")\n",[50,492,494],{"class":52,"line":493},44,[50,495,269],{"emptyLinePlaceholder":268},[50,497,499],{"class":52,"line":498},45,[50,500,501],{},"    return \"OK\"\n",[50,503,505],{"class":52,"line":504},46,[50,506,269],{"emptyLinePlaceholder":268},[50,508,510],{"class":52,"line":509},47,[50,511,512],{},"def messagex():\n",[50,514,516],{"class":52,"line":515},48,[50,517,518],{},"        data = request.get_json()\n",[50,520,522],{"class":52,"line":521},49,[50,523,524],{},"        message = data['message'].replace('％','%')\n",[50,526,528],{"class":52,"line":527},50,[50,529,530],{},"        for key in final_dict.keys():\n",[50,532,534],{"class":52,"line":533},51,[50,535,536],{},"                if key == message:\n",[50,538,540],{"class":52,"line":539},52,[50,541,542],{},"                        API.send(final_dict[key])\n",[50,544,546],{"class":52,"line":545},53,[50,547,548],{},"                        break\n",[50,550,552],{"class":52,"line":551},54,[50,553,269],{"emptyLinePlaceholder":268},[50,555,557],{"class":52,"line":556},55,[50,558,559],{},"def welcome():\n",[50,561,563],{"class":52,"line":562},56,[50,564,518],{},[50,566,568],{"class":52,"line":567},57,[50,569,570],{},"        group_id = data['group_id']\n",[50,572,574],{"class":52,"line":573},58,[50,575,576],{},"        user_id = data['user_id']\n",[50,578,580],{"class":52,"line":579},59,[50,581,582],{},"        API.send(\"[CQ:at,qq={}] 欢迎来到浙江工业大学，精弘网络欢迎各位的到来！如果想进一步了解我们，请戳精弘首页：www.jh.zjut.edu.cn\\n输入 菜单 获取精小弘机器人的菜单 哦！\\n请及时修改群名片\\n格式如下：姓名+专业/大类\".format(user_id))\n",[50,584,586],{"class":52,"line":585},60,[50,587,269],{"emptyLinePlaceholder":268},[50,589,591],{"class":52,"line":590},61,[50,592,593],{},"if __name__ == '__main__':\n",[50,595,597],{"class":52,"line":596},62,[50,598,599],{},"    app.run(host='0.0.0.0', port=5701)\n",[601,602,603,606,612],"blockquote",{},[10,604,605],{},"参考资料:",[10,607,608],{},[22,609,610],{"href":610,"rel":611},"https://gist.github.com/simonswine/64773a80e748f36615e3251234f29d1d",[26],[10,613,614],{},[22,615,616],{"href":616,"rel":617},"https://blog.csdn.net/qq_64126275/article/details/128586651",[26],[619,620,621],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}",{"title":46,"searchDepth":59,"depth":59,"links":623},[624,625,626,627,628,629,630],{"id":16,"depth":59,"text":17},{"id":157,"depth":59,"text":158},{"id":197,"depth":59,"text":198},{"id":210,"depth":59,"text":211},{"id":217,"depth":59,"text":218},{"id":224,"depth":59,"text":225},{"id":231,"depth":59,"text":231},"2023-07-31 04:11:31","md",{},"/2023/07/31/run-qq-bot-on-phicomm-n1-openwrt","---\ntitle: 在运行OpenWRT的N1盒子上部署 QQBot\ndate: 2023-07-31 04:11:31\nsticky:\ntags:\n- Linux\n- Network\n- Bot\n---\n\n由于学校社团的招新需要，我写了一个依赖于 go-cqhttp 运行的 QQ Bot，并没有实现什么花里胡哨的功能，只是实现了关键词回复和新人入群时的欢迎语。因为没考虑后续维护的问题，代码也写得比较草，但毕竟是能跑。这么一个小型的程序并不会占用的多少的服务器资源，单独为这么一个 Bot 去开一台国内的 vps 似乎是有些大材小用了，刚好我手上有一台运行在 OpenWRT 上的 Phicomm N1 盒子，反正也是 Linux 系统，便打算拿来挂 QQ Bot。\n\n## 安装 JDK\n\n由于腾讯近几个月对于 Bot 风控非常严格，所以不得不采用 SignServer 项目 [fuqiuluo/unidbg-fetch-qsign](https://github.com/fuqiuluo/unidbg-fetch-qsign) 来确保 Bot 账号不会被风控一次保证 Bot 运行的稳定性。而这个项目又是使用 Java 开发的，因此需要先安装 JDK/JRE。但 OpenWRT 的开发者可能并没有考虑到在路由器设备上运行 Java 程序的需求，因此 OpenWRT 的源里面是没有预先打包 JDK 的，因此我们需要额外安装。我直接 google 搜索了 `install java on openwrt` 的关键词，在 Github 找到了这个脚本: https://gist.github.com/simonswine/64773a80e748f36615e3251234f29d1d。但很遗憾，代码跑不起来，下载时提示 404。于是我打开脚本细细一看，脚本中 jdk 的版本号和设备的架构均需要改动。具体改动如下:\n\n```diff\n- REVISION=8.212.04-r0\n+ REVISION=8.302.08-r1\n# 版本号请自行去仓库内翻最新的\n......\n- URL=http://dl-cdn.alpinelinux.org/alpine/v3.10/community/armv7/\n+ URL=http://dl-cdn.alpinelinux.org/alpine/v3.14/community/aarch64/\n......\n- # verify packages\n- sha256sum -c \u003C\u003CEOF\n- e2fce9ee7348e9322c542206c3c3949e40690716d65e9f0e44dbbfca95d59d8c  openjdk8-8.212.04-r0.apk\n- 26ad786ff1ebeeb7cd24abee10bc56211a026a2d871cf161bb309563e1fcbabc  openjdk8-jre-8.212.04-r0.apk\n- 947d5f72ed2dc367c97d1429158913c9366f9c6ae01b7311dd8546b10ded8743  openjdk8-jre-base-- 8.212.04-r0.apk\n- c6a65402bf0a7051c60b45e1c6a8f4277a68a8b7e807078f20db17e0233dea8e  openjdk8-jre-lib-8.212.04-r0.apk\n- EOF\n# 我这里直接将 sha256 校验给删除了，有兴趣可以自己去更新这几个文件的文件名和其对应的哈希值\n```\n\n随后 `chmod +x` 授予脚本可执行权限后直接执行，我们就将 alpine linux 上的 openjdk 成功解包并安装到了我们的 OpenWRT 中，我们只需要配置好环境变量即可完成安装。但我又比较懒，我看见 SignServer 的启动脚本里是可以通过读取 `$JAVA_HOME` 来获取 Java 二进制可执行文件的代码逻辑，于是我便在每次启动 SignServer 脚本前提前执行 `export JAVA_HOME=/opt/java-1.8-openjdk` 即可。\n\n## 安装 screen\n\n相比起前面 JDK 的安装，这一步 screen 的安装反而没有那么麻烦，[在最新版本的 OpenWRT 源中，screen 已经被包括进去了](https://openwrt.org/packages/pkgdata/screen)，我们直接把 OpenWRT 换好源，从源里就可以安装。\n\n```bash\nopkg update\nopkg install screen\n```\n\n## 下载 fixed 版本的 go-cqhttp\n\n由于 SignServer 更新，在其请求中多添加了 key 的参数要求，导致原版 go-cqhttp 的最新 release 中释出的二进制文件无法适配最新版的 SignServer，我暂时选用了一个[修复了这个问题的 fork](https://github.com/tomato-aoarasi/go-cqhttp-1.1.0-sign-fixed/) 去运行 Bot。下载到 OpenWRT 后记得也要授予可执行文件。\n\n## 安装 Python 脚本中所需要使用到的库\n\nOpenWRT 自带了 python 和 pip，这让我很欣慰。直接使用 pip 安装 flask 和 xlrd 等库即可，完全没有难度。\n\n## 运行 SignServer\n\n这一步很简单，将原项目的 Release 下载下来解压后上传到 OpenWRT 的某个路径后，开个 screen 窗口，设置好 JAVA_HOME 变量后再去调用 SignServer 中自带的 shell 脚本即可\n\n## 运行 go-cqhttp\n\n这一步也很简单，得益于 go 静态链接的特性，我们不需要为 go-cqhttp 安装任何额外的依赖就可以执行 Release 中的二进制文件，直接将我们在 PC 上登录好的 session、配置好的 device.json、config.yml 等文件上传到 N1 ，开个 screen 窗口运行即可。\n\n## 运行主程序\n\n这个没什么好讲的，同样是开个 screen 窗口运行 `python main.py` 的事情\n\npython 代码如下:\n\n```python\nfrom flask import Flask,request\nimport requests\nimport xlrd\n\n# 读取 xls 中的关键词以及回应语句，将其加载到 dict 数据结构中\n_data2 = xlrd.open_workbook('/root/8yue222.xls')\nmain_table2 = _data2.sheets()[0]\nkey_lst2 = main_table2.col_values(0)[1:]\nvalue_lst2 = main_table2.col_values(1)[1:]\nfinal_dict = dict(zip(key_lst2,value_lst2))\n# 读取第二份 xls，并对相同的关键词做覆盖\n_data = xlrd.open_workbook('/root/daihao.xls')\nmain_table = _data.sheets()[0]\nkey_lst = main_table.col_values(4)[1:]\nkey_lst = [str(int(item)) if type(item) == float else item for item in key_lst if item != '']\nkey_lst.remove('Gary')\nvalue_lst = main_table.col_values(5)[1:]\nvalue_lst = [str(int(item)) if type(item) == float else item for item in value_lst if item != '']\nfinal_dict.update(dict(zip(key_lst,value_lst)))\n\napp = Flask(__name__)\nclass API:\n        @staticmethod\n        def send(message):\n                url = \"http://127.0.0.1:5700/send_msg\"\n                data = request.get_json()\n                params = {\n                        \"group_id\":data['group_id'],\n                        \"message\":message\n                }\n                requests.get(url,params=params)\n\n@app.route('/', methods=[\"POST\"])\ndef post_data():\n    data = request.get_json()\n    print(data)\n    if data['post_type'] == 'message':\n        message = data['message']\n        messagex()\n    elif data['post_type'] == 'notice' and data['notice_type'] == 'group_increase':\n        welcome()\n    else:\n        print(\"忽略消息\")\n\n    return \"OK\"\n\ndef messagex():\n        data = request.get_json()\n        message = data['message'].replace('％','%')\n        for key in final_dict.keys():\n                if key == message:\n                        API.send(final_dict[key])\n                        break\n\ndef welcome():\n        data = request.get_json()\n        group_id = data['group_id']\n        user_id = data['user_id']\n        API.send(\"[CQ:at,qq={}] 欢迎来到浙江工业大学，精弘网络欢迎各位的到来！如果想进一步了解我们，请戳精弘首页：www.jh.zjut.edu.cn\\n输入 菜单 获取精小弘机器人的菜单 哦！\\n请及时修改群名片\\n格式如下：姓名+专业/大类\".format(user_id))\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5701)\n```\n\n>  参考资料: \n>\n> https://gist.github.com/simonswine/64773a80e748f36615e3251234f29d1d\n>\n> https://blog.csdn.net/qq_64126275/article/details/128586651\n",{"title":5,"description":12},"posts/run-qq-bot-on-phicomm-n1-openwrt",false,[640,641,642],"Linux","Network","Bot","Q-SV6GNfucTSuT6-sfLT6CQyIFvYGjeC08hy9vuXYag",[645,650],{"title":646,"path":647,"stem":648,"date":649,"children":-1},"从零开始的静态网页部署（到个人云服务器）","/2023/08/04/static-webpage-deployment-for-a-beginner","posts/static-webpage-deployment-for-a-beginner","2023-08-04 01:19:22",{"title":651,"path":652,"stem":653,"date":654,"children":-1},"在浙工大宿舍使用路由器连接移动网络(校园网)","/2023/06/24/connect-china-mobile-with-router-in-zjut-dormitory","posts/connect-china-mobile-with-router-in-zjut-dormitory","2023-06-24 14:30:24",1761738775329]