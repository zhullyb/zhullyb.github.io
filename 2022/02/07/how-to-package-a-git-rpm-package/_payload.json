[{"data":1,"prerenderedAt":229},["ShallowReactive",2],{"post-2022-02-07-how-to-package-a-git-rpm-package":3,"surround-2022-02-07-how-to-package-a-git-rpm-package":217,"randomIndex/2022/02/07/how-to-package-a-git-rpm-package/":228},{"id":4,"title":5,"body":6,"date":203,"description":204,"extension":205,"meta":206,"navigation":207,"path":208,"rawbody":209,"seo":210,"stem":211,"sticky":212,"tags":213,"__hash__":216},"posts/posts/how-to-package-a-git-rpm-package.md","如何打出一个「-git」的rpm包",{"type":7,"value":8,"toc":194},"minimark",[9,18,23,30,50,54,61,65,82,86,103,107,131,141,147,170,174,180],[10,11,12,13,17],"p",{},"本文中，笔者通过 github api 获取最新的 commit_id ，以一种曲线救国的方式成功为 rpm 打下了一个 ",[14,15,16],"code",{},"-git"," 包。",[19,20,22],"h2",{"id":21},"on-archlinux","On Archlinux",[10,24,25,26,29],{},"用过 AUR 的 Arch 用户应该知道，makepkg 支持 \"-git\" 包。当我们执行 makepkg 时，PKGBUILD 中的 ",[14,27,28],{},"pkgver"," 函数会自动被运行，并将输出的结果作为本次打包的版本号。这是一个非常棒的设计，我们不需要去手动更新 PKGBUILD，就可以直接从 git 服务区拉取最新的 master 分支编译打包，对于跟进开发进度而言非常方便。",[10,31,32,33,35,36,39,40,43,44,46,47,49],{},"一般来说，一个 ",[14,34,16],{}," 包的版本号会分成 2~4 个部分，最为核心的是 ",[14,37,38],{},"count"," 和 ",[14,41,42],{},"commit_id","：",[14,45,38],{},"用于记录这是第几次提交，通过提交的次数作为版本号的靠前部分可以帮助包管理器比较版本号的新旧，比如第21次提交的代码一定比第18次的更加新，而21也正好比18大，包管理器也就凭借着这个数字来保证其可以在用户在更新的时候为用户选择一个更新版本的包；而 ",[14,48,42],{},"则可以帮助人类更快定位这个包是在哪一次代码提交以后编译的，以帮助 开发者/用户 定位问题。",[19,51,53],{"id":52},"on-fedora","On Fedora",[10,55,56,57,60],{},"然而，这个思路在 rpm 上似乎无法实现。rpmbuild 执行的时候会事先根据版本号在 BUILDROOT 路径下创造一个 ",[14,58,59],{},"%{name}-%{version}-%{release}-%{arch}","的目录，如此一来，就必须先确定版本号，无法像 PKGBUILD 那样使用一个 pkgver 的函数去自动更新版本号。此外，rpm 似乎专注于软件包的 Reproducibility，也就是希望拿到了指导 rpmbuild 打包的 specfile 以后打出一个相同包的能力，因此，使用同一份 specfile 在不同时间打出一个不同包的这种行为似乎并不符合 Fedora/Redhat 的哲学，所以我们怕是等不到 rpm 支持这个功能的那一天了。",[19,62,64],{"id":63},"turn-of-events","Turn of events",[10,66,67,68,75,76,81],{},"当然，这也并非不可能完成的任务，在 ",[69,70,74],"a",{"href":71,"rel":72},"https://yanqiyu.info/",[73],"nofollow","西木野羰基"," 的指引下，我在 Fedora Docs 找到了",[69,77,80],{"href":78,"rel":79},"https://docs.fedoraproject.org/en-US/packaging-guidelines/SourceURL/#_branch_example",[73],"对于某个 Branch 的打包样版","。其实也就是直接从 github 下载 master 分支的 master.tar.gz 压缩包来获取最新的源码，这样就确保了每一次 rpmbuild 的时候都能获取最新的源码。接下来需要处理的就是版本号的问题。",[19,83,85],{"id":84},"sad-story","Sad Story",[10,87,88,89,92,93,96,97,99,100,102],{},"很可惜，master.tar.gz 压缩包中并不包括 ",[14,90,91],{},".git"," 文件，我们无法通过 ",[14,94,95],{},"git rev-list --count HEAD"," 来获取 ",[14,98,38],{}," 计数，此外，最新的 ",[14,101,42],{}," 我们也不得而知。即使我们知道这些参数，也无法在 rpmbuild 执行之前自动把这些参数填进 specfile 中。",[19,104,106],{"id":105},"improvement","Improvement",[10,108,109,110,115,116,119,120,124,125,130],{},"好在天无绝人之路，在 Liu Sen 的 ",[69,111,114],{"href":112,"rel":113},"https://forum.suse.org.cn/t/topic/13626",[73],"RPM 中宏的简单介绍"," 一文中发现宏其实也可以类似 bash 中的 ",[14,117,118],{},"$()"," 一样定义成系统运行某些命令后的结果，通过仿写 copr 上 ",[121,122,123],"em",{},"atim/fractal"," 的 ",[69,126,129],{"href":127,"rel":128},"https://download.copr.fedorainfracloud.org/results/atim/fractal/fedora-35-x86_64/03000082-fractal-master/fractal-master.spec",[73],"specfile"," 定义了下面两个宏。",[132,133,138],"pre",{"className":134,"code":136,"language":137},[135],"language-text","%global timenow %(echo $(date +%Y%m%d.%H%M))\n%global commit_short_id %(api_result=$(curl -s https://api.github.com/repos/\u003Cusername>/\u003Creponame>/branches/master | head -n 4 | tail -n 1); echo ${api_result:12:7})\n","text",[14,139,136],{"__ignoreMap":140},"",[10,142,143,144],{},"版本号就可以直接写成 ",[14,145,146],{},"%{timenow}.%{commit_id_short}",[148,149,150,160],"ul",{},[151,152,153,156,157,159],"li",{},[14,154,155],{},"%{timenow}"," 是直接通过运行系统的 date 命令获得一个精确到分钟的时间来当作 ",[14,158,38],{}," 给 dnf 判断版本号大小使用",[151,161,162,165,166,169],{},[14,163,164],{},"%{commit_id_short}"," 从 api.github.com 获取到该仓库最新的 commit 号，配合粗制滥造的 shell 命令做切片，提取前7 位，帮助用户和开发者快速定位源码版本使用。当然，也可以选择直接使用 ",[14,167,168],{},"jq"," 作为 json 的解释器，不过 copr 大概率没有预装，生成 srpm 的时候估计就会报错。",[19,171,173],{"id":172},"review","Review",[10,175,176,177,179],{},"至此，我们成功解决了在 rpm 上打 ",[14,178,16],{}," 包的问题，不过仍然有以下缺点",[148,181,182,185,188,191],{},[151,183,184],{},"仅支持 github 上的项目，对于其他的 git 托管服务商还需要去查阅他们的 api 文档",[151,186,187],{},"粗制滥造的 shell 命令可能不足以应对以后的 github api 变更",[151,189,190],{},"使用了精确到分钟的时间作为计数器，导致版本号过长",[151,192,193],{},"使用 copr 打包的时候，有概率出现 srpm 与 rpm 之间版本号出现分钟级的差异",{"title":140,"searchDepth":195,"depth":195,"links":196},2,[197,198,199,200,201,202],{"id":21,"depth":195,"text":22},{"id":52,"depth":195,"text":53},{"id":63,"depth":195,"text":64},{"id":84,"depth":195,"text":85},{"id":105,"depth":195,"text":106},{"id":172,"depth":195,"text":173},"2022-02-07 10:23:29","本文中，笔者通过 github api 获取最新的 commit_id ，以一种曲线救国的方式成功为 rpm 打下了一个 -git 包。","md",{},true,"/2022/02/07/how-to-package-a-git-rpm-package","---\ntitle: 如何打出一个「-git」的rpm包\ndate: 2022-02-07 10:23:29\nsticky:\ntags:\n- Fedora\n- RPM Package\n---\n\n 本文中，笔者通过 github api 获取最新的 commit_id ，以一种曲线救国的方式成功为 rpm 打下了一个 `-git` 包。\n\n## On Archlinux\n\n用过 AUR 的 Arch 用户应该知道，makepkg 支持 \"-git\" 包。当我们执行 makepkg 时，PKGBUILD 中的 `pkgver` 函数会自动被运行，并将输出的结果作为本次打包的版本号。这是一个非常棒的设计，我们不需要去手动更新 PKGBUILD，就可以直接从 git 服务区拉取最新的 master 分支编译打包，对于跟进开发进度而言非常方便。\n\n一般来说，一个 `-git` 包的版本号会分成 2~4 个部分，最为核心的是 `count` 和 `commit_id`：`count`用于记录这是第几次提交，通过提交的次数作为版本号的靠前部分可以帮助包管理器比较版本号的新旧，比如第21次提交的代码一定比第18次的更加新，而21也正好比18大，包管理器也就凭借着这个数字来保证其可以在用户在更新的时候为用户选择一个更新版本的包；而 `commit_id`则可以帮助人类更快定位这个包是在哪一次代码提交以后编译的，以帮助 开发者/用户 定位问题。\n\n## On Fedora\n\n然而，这个思路在 rpm 上似乎无法实现。rpmbuild 执行的时候会事先根据版本号在 BUILDROOT 路径下创造一个 `%{name}-%{version}-%{release}-%{arch}`的目录，如此一来，就必须先确定版本号，无法像 PKGBUILD 那样使用一个 pkgver 的函数去自动更新版本号。此外，rpm 似乎专注于软件包的 Reproducibility，也就是希望拿到了指导 rpmbuild 打包的 specfile 以后打出一个相同包的能力，因此，使用同一份 specfile 在不同时间打出一个不同包的这种行为似乎并不符合 Fedora/Redhat 的哲学，所以我们怕是等不到 rpm 支持这个功能的那一天了。\n\n## Turn of events\n\n当然，这也并非不可能完成的任务，在 [西木野羰基](https://yanqiyu.info/) 的指引下，我在 Fedora Docs 找到了[对于某个 Branch 的打包样版](https://docs.fedoraproject.org/en-US/packaging-guidelines/SourceURL/#_branch_example)。其实也就是直接从 github 下载 master 分支的 master.tar.gz 压缩包来获取最新的源码，这样就确保了每一次 rpmbuild 的时候都能获取最新的源码。接下来需要处理的就是版本号的问题。\n\n## Sad Story\n\n很可惜，master.tar.gz 压缩包中并不包括 `.git` 文件，我们无法通过 `git rev-list --count HEAD` 来获取 `count` 计数，此外，最新的 `commit_id` 我们也不得而知。即使我们知道这些参数，也无法在 rpmbuild 执行之前自动把这些参数填进 specfile 中。\n\n## Improvement\n\n好在天无绝人之路，在 Liu Sen 的 [RPM 中宏的简单介绍](https://forum.suse.org.cn/t/topic/13626) 一文中发现宏其实也可以类似 bash 中的 `$()` 一样定义成系统运行某些命令后的结果，通过仿写 copr 上 *atim/fractal* 的 [specfile](https://download.copr.fedorainfracloud.org/results/atim/fractal/fedora-35-x86_64/03000082-fractal-master/fractal-master.spec) 定义了下面两个宏。\n\n```\n%global timenow %(echo $(date +%Y%m%d.%H%M))\n%global commit_short_id %(api_result=$(curl -s https://api.github.com/repos/\u003Cusername>/\u003Creponame>/branches/master | head -n 4 | tail -n 1); echo ${api_result:12:7})\n```\n\n版本号就可以直接写成 `%{timenow}.%{commit_id_short}`\n\n- `%{timenow}` 是直接通过运行系统的 date 命令获得一个精确到分钟的时间来当作 `count` 给 dnf 判断版本号大小使用\n\n- `%{commit_id_short}` 从 api.github.com 获取到该仓库最新的 commit 号，配合粗制滥造的 shell 命令做切片，提取前7 位，帮助用户和开发者快速定位源码版本使用。当然，也可以选择直接使用 `jq` 作为 json 的解释器，不过 copr 大概率没有预装，生成 srpm 的时候估计就会报错。\n\n## Review\n\n至此，我们成功解决了在 rpm 上打 `-git` 包的问题，不过仍然有以下缺点\n\n- 仅支持 github 上的项目，对于其他的 git 托管服务商还需要去查阅他们的 api 文档\n- 粗制滥造的 shell 命令可能不足以应对以后的 github api 变更\n- 使用了精确到分钟的时间作为计数器，导致版本号过长\n- 使用 copr 打包的时候，有概率出现 srpm 与 rpm 之间版本号出现分钟级的差异\n",{"title":5,"description":204},"posts/how-to-package-a-git-rpm-package",false,[214,215],"Fedora","RPM Package","HDR1JGgwqXLgAf_50Ib0BJRT3MY3Cc5Pi0NBKvRxmag",[218,223],{"title":219,"path":220,"stem":221,"date":222,"children":-1},"使用 Github Action 跑 rpmbuild","/2022/03/06/run-rpmbuild-with-github-action","posts/run-rpmbuild-with-github-action","2022-03-06 16:02:54",{"title":224,"path":225,"stem":226,"date":227,"children":-1},"雪藏在开源镜像站点中的那些常用却不为人知的软件","/2022/01/19/the-common-software-hidden-in-mirrors","posts/the-common-software-hidden-in-mirrors","2022-01-19 13:01:30",22,1761739881208]