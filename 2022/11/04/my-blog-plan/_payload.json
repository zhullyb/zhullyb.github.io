[{"data":1,"prerenderedAt":350},["ShallowReactive",2],{"post-2022-11-04-my-blog-plan":3,"surround-2022-11-04-my-blog-plan":338,"randomIndex/2022/11/04/my-blog-plan/":349},{"id":4,"title":5,"body":6,"date":323,"description":12,"extension":324,"meta":325,"navigation":326,"path":327,"rawbody":328,"seo":329,"stem":330,"sticky":331,"tags":332,"__hash__":337},"posts/posts/my-blog-plan.md","我的博客部署方案",{"type":7,"value":8,"toc":320},"minimark",[9,13,26,38,41,52,59,66,75,306,309,316],[10,11,12],"p",{},"一直以来，我的博客使用的几乎都是 Hexo 框架。",[10,14,15,16,20,21,25],{},"静态博客的一大优点就是可以支持 Serverless 部署，这使得我们可以直接在 Github Pages、Vercel 等平台直接部署上我的博客，如果用上 ",[17,18,19],"code",{},".eu.org"," ",[22,23,24],"del",{},"或者非洲国家免费域名","就可以实现零成本的博客部署。",[10,27,28,29,32,33,37],{},"当然，我现在的博客并非是零成本搭建的，如你所见，我购入了印度国别域名 ",[17,30,31],{},"zhul.in"," 来凑出 ",[34,35,36],"em",{},"竹林"," 的谐音。并在 Github Pages、Vercel 等平台的访问质量每况愈下的情况下又购入了位于香港的 VPS，这就引申出了今天的内容——介绍我博客的部署方案。",[10,39,40],{},"我的博客是使用 HK vps + Github Pages 两处部署实现的，通过 dnspod 免费版的域名分境内/外解析实现了分流。当境内的访客访问我的博客时，他们将会被解析到香港的 vps 上以获得更好的体验，而境外的访客将会被解析到 Github pages，毕竟 Github Pages 在境外的速度并不慢，并且稳定性肯定比我这小鸡要好得多。",[10,42,43,44,51],{},"不过关于通过 dns 解析分流这件事，之前看",[45,46,50],"a",{"href":47,"rel":48},"https://www.cities.ee/read-1553.html",[49],"nofollow","城南旧事","的博客中有提到可以使用境外的 GeoScaling 完成，其免费支持全球分as、城市、经纬等智能解析，也支持自编辑脚本，看起来以后可以去试一试。",[10,53,54],{},[55,56],"img",{"alt":57,"src":58},"Dnspod截图","https://static.031130.xyz/uploads/2024/08/12/6364d4f46ff1c.webp",[10,60,61,62,65],{},"而 Hexo 框架最被人诟病的一点是更新麻烦。这一点不可否认，使用 ",[17,63,64],{},"hexo generate"," 生成静态网页文件再部署到服务器上的过程在一台新设备上是不小的工作量，它涉及 git、nodejs 的安装，涉及到 ssh key 和 rsync，整个环境的搭建就要废上不小的工夫。",[10,67,68,69,74],{},"在博客内容的更新方面，我选择了将整个 Hexo 的 workdir 全部上传到 github，使用 Github Action 帮助我同时完成静态页面的生成和 Github Pages 及 vps 的部署工作。具体的代码可以直接",[45,70,73],{"href":71,"rel":72},"https://github.com/zhullyb/zhullyb.github.io/blob/master/.github/workflows/deploy.yml",[49],"见我的 GIthub 仓库","，我在这里简单讲下思路。",[76,77,78,90,100,215,245,261,270,291],"ol",{},[79,80,81,82,85,86,89],"li",{},"安装 nodejs",[83,84],"br",{},"这个没什么可说的，有现成的 Github Action 去完成这件事，我这边直接使用了",[17,87,88],{},"actions/setup-node@v2","。",[79,91,92,93,95,96,99],{},"使用 npm/yarn 安装相关依赖",[83,94],{},"这个直接跑 ",[17,97,98],{},"yarn install"," 即可。",[79,101,102,103,105,106,108,109,114,115],{},"为每个文件重新设定最后修改时间",[83,104],{},"这一步其实是挺重要的，Hexo框架生成每篇文章的最后修改时间的依据是该文件的最后修改时间，而对于 Github Action 的容器来说，每一个文件都刚刚被下载下来，都是最新的，这就会导致你的每一篇文章每次部署时都会被认为刚才修改过。",[83,107],{},"我们这边可以直接使用 git 记录的时间来作为文件的最后修改时间。（参考 ",[45,110,113],{"href":111,"rel":112},"https://mrseawave.github.io/blogs/articles/2021/01/07/ci-hexo-update-time/",[49],"Sea's Blog","）",[116,117,122],"pre",{"className":118,"code":119,"language":120,"meta":121,"style":121},"language-bash shiki shiki-themes one-light one-dark-pro","git ls-files | while read filepath; do touch -d \"$(git log -1 --format='@%ct' $filepath)\" \"$filepath\" && echo \"Fixed: $filepath\"; done\n","bash","",[17,123,124],{"__ignoreMap":121},[125,126,129,133,137,141,145,149,152,155,158,161,165,168,170,173,176,179,182,186,189,192,194,197,200,203,206,208,210,212],"span",{"class":127,"line":128},"line",1,[125,130,132],{"class":131},"sAdtL","git",[125,134,136],{"class":135},"sDhpE"," ls-files",[125,138,140],{"class":139},"s5ixo"," | ",[125,142,144],{"class":143},"sLKXg","while",[125,146,148],{"class":147},"s_Sar"," read",[125,150,151],{"class":135}," filepath",[125,153,154],{"class":139},"; ",[125,156,157],{"class":143},"do",[125,159,160],{"class":131}," touch",[125,162,164],{"class":163},"sAGMh"," -d",[125,166,167],{"class":135}," \"$(",[125,169,132],{"class":131},[125,171,172],{"class":135}," log ",[125,174,175],{"class":163},"-1",[125,177,178],{"class":163}," --format=",[125,180,181],{"class":135},"'@%ct' ",[125,183,185],{"class":184},"sJa8x","$filepath",[125,187,188],{"class":135},")\"",[125,190,191],{"class":135}," \"",[125,193,185],{"class":184},[125,195,196],{"class":135},"\"",[125,198,199],{"class":139}," && ",[125,201,202],{"class":147},"echo",[125,204,205],{"class":135}," \"Fixed: ",[125,207,185],{"class":184},[125,209,196],{"class":135},[125,211,154],{"class":139},[125,213,214],{"class":143},"done\n",[79,216,217,218,220,221,224,225],{},"设置时区",[83,219],{},"读我的博客的人应该大多都是东八区的人，那我们应当把 Github Action 容器的时区设置为东八区，和自己 ",[17,222,223],{},"git commit"," 时所使用的设备的时间保持一致，否则某些文章的日期可能会发生一天的偏移。",[116,226,228],{"className":118,"code":227,"language":120,"meta":121,"style":121},"export TZ='Asia/Shanghai'\n",[17,229,230],{"__ignoreMap":121},[125,231,232,235,238,242],{"class":127,"line":128},[125,233,234],{"class":143},"export",[125,236,237],{"class":184}," TZ",[125,239,241],{"class":240},"sknuh","=",[125,243,244],{"class":135},"'Asia/Shanghai'\n",[79,246,247,248],{},"生成静态网页文件",[116,249,251],{"className":118,"code":250,"language":120,"meta":121,"style":121},"yarn build\n",[17,252,253],{"__ignoreMap":121},[125,254,255,258],{"class":127,"line":128},[125,256,257],{"class":131},"yarn",[125,259,260],{"class":135}," build\n",[79,262,263,264,266,267],{},"部署到 Github Pages",[83,265],{},"使用 ",[17,268,269],{},"peaceiris/actions-gh-pages@v3",[79,271,272,273,275,276,278,282,284,285,290],{},"初始化 Github Action 容器上的 ssh 私钥",[83,274],{},"应当在 Github 仓库的设置里先新建一个 secret，填入自己的 ssh 私钥（更加标准的做法应当是为 github action 专门生成一对 ssh 密钥，将公钥上传到自己的 vps，将私钥上传到 Github 仓库的 secret 中）。",[83,277],{},[55,279],{"alt":280,"src":281},"github secret setting","https://static.031130.xyz/uploads/2024/08/12/6364dbbfeb8f6.webp",[83,283],{},"我这边直接从",[45,286,289],{"href":287,"rel":288},"https://blog.m-l.cc/2021/07/06/yong-github-actions-bu-shu-hexo/",[49],"点墨阁","那边抄了点代码直接用。",[79,292,293,294],{},"使用 hexo 的 deploy 插件调用 rsync 将静态文件上传到自己服务器的对应目录（static server 你应当已经设置好了）",[116,295,297],{"className":118,"code":296,"language":120,"meta":121,"style":121},"yarn deploy\n",[17,298,299],{"__ignoreMap":121},[125,300,301,303],{"class":127,"line":128},[125,302,257],{"class":131},[125,304,305],{"class":135}," deploy\n",[307,308],"hr",{},[10,310,311,312,315],{},"注: 本篇博客中引用的所有博客页面均在 ",[17,313,314],{},"web.archive.org"," 进行了存档，如后续遇到页面打不开的问题请自行前往查询存档。",[317,318,319],"style",{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sknuh, html code.shiki .sknuh{--shiki-default:#383A42;--shiki-dark:#56B6C2}",{"title":121,"searchDepth":321,"depth":321,"links":322},2,[],"2022-11-04 16:41:28","md",{},true,"/2022/11/04/my-blog-plan","---\ntitle: 我的博客部署方案\ndate: 2022-11-04 16:41:28\nsticky:\ntags:\n- Network\n- Github Action\n- Hexo\n- Blog\n---\n\n一直以来，我的博客使用的几乎都是 Hexo 框架。\n\n静态博客的一大优点就是可以支持 Serverless 部署，这使得我们可以直接在 Github Pages、Vercel 等平台直接部署上我的博客，如果用上 `.eu.org` ~~或者非洲国家免费域名~~就可以实现零成本的博客部署。\n\n当然，我现在的博客并非是零成本搭建的，如你所见，我购入了印度国别域名 `zhul.in` 来凑出 _竹林_ 的谐音。并在 Github Pages、Vercel 等平台的访问质量每况愈下的情况下又购入了位于香港的 VPS，这就引申出了今天的内容——介绍我博客的部署方案。\n\n我的博客是使用 HK vps + Github Pages 两处部署实现的，通过 dnspod 免费版的域名分境内/外解析实现了分流。当境内的访客访问我的博客时，他们将会被解析到香港的 vps 上以获得更好的体验，而境外的访客将会被解析到 Github pages，毕竟 Github Pages 在境外的速度并不慢，并且稳定性肯定比我这小鸡要好得多。\n\n不过关于通过 dns 解析分流这件事，之前看[城南旧事](https://www.cities.ee/read-1553.html)的博客中有提到可以使用境外的 GeoScaling 完成，其免费支持全球分as、城市、经纬等智能解析，也支持自编辑脚本，看起来以后可以去试一试。\n\n![Dnspod截图](https://static.031130.xyz/uploads/2024/08/12/6364d4f46ff1c.webp)\n\n而 Hexo 框架最被人诟病的一点是更新麻烦。这一点不可否认，使用 `hexo generate` 生成静态网页文件再部署到服务器上的过程在一台新设备上是不小的工作量，它涉及 git、nodejs 的安装，涉及到 ssh key 和 rsync，整个环境的搭建就要废上不小的工夫。\n\n在博客内容的更新方面，我选择了将整个 Hexo 的 workdir 全部上传到 github，使用 Github Action 帮助我同时完成静态页面的生成和 Github Pages 及 vps 的部署工作。具体的代码可以直接[见我的 GIthub 仓库](https://github.com/zhullyb/zhullyb.github.io/blob/master/.github/workflows/deploy.yml)，我在这里简单讲下思路。\n\n1. 安装 nodejs\n\n   这个没什么可说的，有现成的 Github Action 去完成这件事，我这边直接使用了`actions/setup-node@v2`。\n\n2. 使用 npm/yarn 安装相关依赖\n\n   这个直接跑 `yarn install` 即可。\n\n3. 为每个文件重新设定最后修改时间\n\n   这一步其实是挺重要的，Hexo框架生成每篇文章的最后修改时间的依据是该文件的最后修改时间，而对于 Github Action 的容器来说，每一个文件都刚刚被下载下来，都是最新的，这就会导致你的每一篇文章每次部署时都会被认为刚才修改过。\n\n   我们这边可以直接使用 git 记录的时间来作为文件的最后修改时间。（参考 [Sea's Blog](https://mrseawave.github.io/blogs/articles/2021/01/07/ci-hexo-update-time/)）\n\n   ```bash\n   git ls-files | while read filepath; do touch -d \"$(git log -1 --format='@%ct' $filepath)\" \"$filepath\" && echo \"Fixed: $filepath\"; done\n   ```\n\n4. 设置时区\n\n   读我的博客的人应该大多都是东八区的人，那我们应当把 Github Action 容器的时区设置为东八区，和自己 `git commit` 时所使用的设备的时间保持一致，否则某些文章的日期可能会发生一天的偏移。\n\n   ```bash\n   export TZ='Asia/Shanghai'\n   ```\n\n5. 生成静态网页文件\n\n   ```bash\n   yarn build\n   ```\n\n6. 部署到 Github Pages\n\n   使用 `peaceiris/actions-gh-pages@v3`\n\n7. 初始化 Github Action 容器上的 ssh 私钥\n\n   应当在 Github 仓库的设置里先新建一个 secret，填入自己的 ssh 私钥（更加标准的做法应当是为 github action 专门生成一对 ssh 密钥，将公钥上传到自己的 vps，将私钥上传到 Github 仓库的 secret 中）。\n\n   ![github secret setting](https://static.031130.xyz/uploads/2024/08/12/6364dbbfeb8f6.webp)\n\n   我这边直接从[点墨阁](https://blog.m-l.cc/2021/07/06/yong-github-actions-bu-shu-hexo/)那边抄了点代码直接用。\n\n8. 使用 hexo 的 deploy 插件调用 rsync 将静态文件上传到自己服务器的对应目录（static server 你应当已经设置好了）\n\n   ```bash\n   yarn deploy\n   ```\n\n***\n\n注: 本篇博客中引用的所有博客页面均在 `web.archive.org` 进行了存档，如后续遇到页面打不开的问题请自行前往查询存档。\n",{"title":5,"description":12},"posts/my-blog-plan",false,[333,334,335,336],"Network","Github Action","Hexo","Blog","v2fn31Pakr9oojw0mwyMJ1rbgOLDZ6eWhpzo9KmnLdo",[339,344],{"title":340,"path":341,"stem":342,"date":343,"children":-1},"【已过期】使用 vercel+supabase 免费部署 umami","/2022/11/08/free-umami-deploy-plan","posts/free-umami-deploy-plan","2022-11-08 13:37:53",{"title":345,"path":346,"stem":347,"date":348,"children":-1},"使用 VirtScreen 将 Pad 作为副屏","/2022/10/04/use-virtscreen-to-turn-pad-into-another-screen","posts/use-virtscreen-to-turn-pad-into-another-screen","2022-10-04 00:19:20",5,1761884674714]