[{"data":1,"prerenderedAt":109},["ShallowReactive",2],{"post-2022-03-06-run-rpmbuild-with-github-action":3,"surround-2022-03-06-run-rpmbuild-with-github-action":97,"randomIndex/2022/03/06/run-rpmbuild-with-github-action":108},{"id":4,"title":5,"body":6,"date":83,"description":12,"extension":84,"meta":85,"navigation":86,"path":87,"rawbody":88,"seo":89,"stem":90,"sticky":91,"tags":92,"__hash__":96},"posts/posts/run-rpmbuild-with-github-action.md","使用 Github Action 跑 rpmbuild",{"type":7,"value":8,"toc":80},"minimark",[9,13,16,33,36,55,62,71],[10,11,12],"p",{},"一直打算用 Github Action 跑 rpmbuild 构建 rpm 包，然后传到 Action 的 Artifacts 里面，用户就可以在登陆 Github 帐号的情况下进行下载。只要不发 Release，应该就不算「再分发」的行为，也就自然规避了再分发闭源软件的法律风险。",[10,14,15],{},"然而，现有的那些 Action 几乎全都是针对 CentOS 老古董定制的，，有些甚至连 buildrequires 都不帮你安装，而且大部分情况下都不支持 Source 直接填写一个链接，需要你直接提供 Source 文件。我自己又不可能在 Github 的仓库里用 lfs 强行存一个 200MB+ 的二进制文件，显然是不符合我要求的。还有几个项目使用 mock 去构建的，但使用 mock 构建需要提前用 rpmbuild 生成 srpm，在我们的个人电脑上可以理解为用一个干净的 chroot 打包防止自己的环境受污染，但在一个全新的、用完一次就要扔掉的 docker 里面还要防止环境被污染似乎有些画蛇添足的嫌疑。",[10,17,18,19,26,27,32],{},"最终，我选择了 ",[20,21,25],"a",{"href":22,"rel":23},"https://github.com/marketplace/actions/rpm-build",[24],"nofollow","naveenrajm7/rpmbuild"," 这个项目。（虽然我并不理解为什么他要用 nodejs 去调用系统命令去执行 rpmbuild 等一系列步骤，我也没学过这类语言。不过项目的 ",[20,28,31],{"href":29,"rel":30},"https://github.com/naveenrajm7/rpmbuild/blob/master/src/main.ts",[24],"main.ts"," 我还是能仿写的。）",[10,34,35],{},"在经过三四个小时的摸爬滚打下，我还是成功地将这个项目按照我的想法改完了。",[37,38,39,43,46,49,52],"ul",{},[40,41,42],"li",{},"采用 Fedora 35 作为 host 进行 rpmbuild",[40,44,45],{},"自动安装 buildrequires",[40,47,48],{},"自动下载 source",[40,50,51],{},"允许仓库内自带本地 source",[40,53,54],{},"移除针对 srpm 的构建",[10,56,57],{},[58,59],"img",{"alt":60,"src":61},"","https://static.031130.xyz/uploads/2024/08/12/bb263c91c7bf4.webp",[10,63,64,65,70],{},"改完后的 action 在 ",[20,66,69],{"href":67,"rel":68},"https://github.com/zhullyb/rpmbuild-github-action",[24],"zhullyb/rpmbuild-github-action","，欢迎使用。",[10,72,73,74,79],{},"最终是在 ",[20,75,78],{"href":76,"rel":77},"https://github.com/zhullyb/dingtalk-for-fedora",[24],"zhullyb/dingtalk-for-fedora"," 项目成功实装了，有兴趣的访客们可以去尝试着一起来白嫖 Github Action 呀！ >_\u003C",{"title":60,"searchDepth":81,"depth":81,"links":82},2,[],"2022-03-06 16:02:54","md",{},true,"/2022/03/06/run-rpmbuild-with-github-action","---\ntitle: 使用 Github Action 跑 rpmbuild\ndate: 2022-03-06 16:02:54\nsticky:\ntags:\n- Fedora\n- RPM Package\n- Github Action\n---\n\n一直打算用 Github Action 跑 rpmbuild 构建 rpm 包，然后传到 Action 的 Artifacts 里面，用户就可以在登陆 Github 帐号的情况下进行下载。只要不发 Release，应该就不算「再分发」的行为，也就自然规避了再分发闭源软件的法律风险。\n\n然而，现有的那些 Action 几乎全都是针对 CentOS 老古董定制的，，有些甚至连 buildrequires 都不帮你安装，而且大部分情况下都不支持 Source 直接填写一个链接，需要你直接提供 Source 文件。我自己又不可能在 Github 的仓库里用 lfs 强行存一个 200MB+ 的二进制文件，显然是不符合我要求的。还有几个项目使用 mock 去构建的，但使用 mock 构建需要提前用 rpmbuild 生成 srpm，在我们的个人电脑上可以理解为用一个干净的 chroot 打包防止自己的环境受污染，但在一个全新的、用完一次就要扔掉的 docker 里面还要防止环境被污染似乎有些画蛇添足的嫌疑。\n\n最终，我选择了 [naveenrajm7/rpmbuild](https://github.com/marketplace/actions/rpm-build) 这个项目。（虽然我并不理解为什么他要用 nodejs 去调用系统命令去执行 rpmbuild 等一系列步骤，我也没学过这类语言。不过项目的 [main.ts](https://github.com/naveenrajm7/rpmbuild/blob/master/src/main.ts) 我还是能仿写的。）\n\n在经过三四个小时的摸爬滚打下，我还是成功地将这个项目按照我的想法改完了。\n\n- 采用 Fedora 35 作为 host 进行 rpmbuild\n- 自动安装 buildrequires\n- 自动下载 source\n- 允许仓库内自带本地 source\n- 移除针对 srpm 的构建\n\n![](https://static.031130.xyz/uploads/2024/08/12/bb263c91c7bf4.webp)\n\n改完后的 action 在 [zhullyb/rpmbuild-github-action](https://github.com/zhullyb/rpmbuild-github-action)，欢迎使用。\n\n最终是在 [zhullyb/dingtalk-for-fedora](https://github.com/zhullyb/dingtalk-for-fedora) 项目成功实装了，有兴趣的访客们可以去尝试着一起来白嫖 Github Action 呀！ >_\u003C\n",{"title":5,"description":12},"posts/run-rpmbuild-with-github-action",false,[93,94,95],"Fedora","RPM Package","Github Action","G0KL4fPLgeDyG85C9B2aS9aes01VUAEnaSUafhvm_3o",[98,103],{"title":99,"path":100,"stem":101,"date":102,"children":-1},"抛弃PicGo，直接使用curl将图片上传到LskyPro","/2022/03/31/upload-pic-to-lskypro-with-curl","posts/upload-pic-to-lskypro-with-curl","2022-03-31 19:19:14",{"title":104,"path":105,"stem":106,"date":107,"children":-1},"如何打出一个「-git」的rpm包","/2022/02/07/how-to-package-a-git-rpm-package","posts/how-to-package-a-git-rpm-package","2022-02-07 10:23:29",3,1761696664467]