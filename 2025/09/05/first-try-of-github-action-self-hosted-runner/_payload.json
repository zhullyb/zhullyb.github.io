[{"data":1,"prerenderedAt":258},["ShallowReactive",2],{"post-2025-09-05-first-try-of-github-action-self-hosted-runner":3,"surround-2025-09-05-first-try-of-github-action-self-hosted-runner":246,"randomIndex/2025/09/05/first-try-of-github-action-self-hosted-runner/":257},{"id":4,"title":5,"body":6,"date":230,"description":231,"extension":232,"meta":233,"navigation":234,"path":235,"rawbody":236,"seo":237,"stem":238,"sticky":239,"tags":240,"__hash__":245},"posts/posts/first-try-of-github-action-self-hosted-runner.md","初试 Github Action Self-hosted Runner，想说爱你不容易",{"type":7,"value":8,"toc":224},"minimark",[9,27,30,43,47,50,53,60,63,68,71,76,81,84,89,92,97,101,104,139,142,149,154,171,190,198,202,213,220],[10,11,12,13,20,21,26],"p",{},"在今年八月的时候，我这边所在的一个 Github Organization 在私有项目开发阶段频繁触发 CI，耗尽了 Github 为免费计划 (Free Plan) 提供的",[14,15,19],"a",{"href":16,"rel":17},"https://docs.github.com/en/get-started/learning-about-github/githubs-plans#github-free-for-organizations",[18],"nofollow","每月 2000 分钟 Action 额度","（所有私有仓库共享，公有仓库不计）。大致看了下，CI 流设置得是合理的，那么就要另寻他法看看有没有办法去提供更宽裕的资源，因此也就盯上了文章标题中所提到的 ",[14,22,25],{"href":23,"rel":24},"https://docs.github.com/en/actions/concepts/runners/self-hosted-runners",[18],"Github Action Self-hosted Runner","。",[10,28,29],{},"对于这个 Self-hosted Runner，与 Github 官方提供的 runner 相比，主要有以下几个优势",[31,32,33,37,40],"ul",{},[34,35,36],"li",{},"针对私有仓库，拥有无限制的 Action 运行时长",[34,38,39],{},"可以自行搭配更强大的硬件计算能力和内存",[34,41,42],{},"可以接入内网环境，方便与内网/局域网设备通信",[44,45,46],"h2",{"id":46},"配置安装",[10,48,49],{},"由于不清楚需要的网络环境，我这次测试直接选用了一台闲置的香港 vps，4核4G + 80G 硬盘 + 1Gbps 大口子的配置，除了硬盘读写稍微拉胯一些，别的地方可以说是拉满了。",[10,51,52],{},"Self-hosted Runner 的配置本身是相当直接和清晰的，照着官方提供的方案基本没什么问题。",[10,54,55],{},[56,57],"img",{"alt":58,"src":59},"","https://static.031130.xyz/uploads/2025/09/05/7c0475cdb1aa9.webp",[10,61,62],{},"三个主流平台都有，如果好好加以利用，应该可以涵盖包括 iPhone 应用打包等一系列的需求。",[10,64,65],{},[56,66],{"alt":58,"src":67},"https://static.031130.xyz/uploads/2025/09/05/96ff7cb263da1.webp",[10,69,70],{},"在观察一下我这边拿到手的 2.328.0 版本的 runner 安装文件压缩包的体积在 220MB 左右，内置了 node20 和 node24 各两个版本的运行环境。",[10,72,73],{},[56,74],{"alt":58,"src":75},"https://static.031130.xyz/uploads/2025/09/05/f775e3bcd2cdc.webp",[10,77,78],{},[56,79],{"alt":58,"src":80},"https://static.031130.xyz/uploads/2025/09/05/d0d4fe4611a40.webp",[10,82,83],{},"在执行完 config.sh 后，当前目录下就会多出一个 svc.sh，可以帮助利用这东西来调用 systemd 实现进程守护之类的需求。",[10,85,86],{},[56,87],{"alt":58,"src":88},"https://static.031130.xyz/uploads/2025/09/05/43c6b19038def.webp",[10,90,91],{},"再次刷新网页，就可以看到 Self-hosted Runner 处于已经上线的状态了",[10,93,94],{},[56,95],{"alt":58,"src":96},"https://static.031130.xyz/uploads/2025/09/05/6dad15beff900.webp",[44,98,100],{"id":99},"指定-action-采用自己的-runner","指定 Action 采用自己的 Runner",[10,102,103],{},"这一步很简单，只需在原 Action 的 yml 文件中改变 runs-on 字段即可",[105,106,110],"pre",{"className":107,"code":108,"language":109,"meta":58,"style":58},"language-diff shiki shiki-themes one-light one-dark-pro","jobs:\n  run:\n+    runs-on: self-hosted\n-    runs-on: ubuntu-latest\n","diff",[111,112,113,121,127,133],"code",{"__ignoreMap":58},[114,115,118],"span",{"class":116,"line":117},"line",1,[114,119,120],{},"jobs:\n",[114,122,124],{"class":116,"line":123},2,[114,125,126],{},"  run:\n",[114,128,130],{"class":116,"line":129},3,[114,131,132],{},"+    runs-on: self-hosted\n",[114,134,136],{"class":116,"line":135},4,[114,137,138],{},"-    runs-on: ubuntu-latest\n",[44,140,141],{"id":141},"实测",[10,143,144,145,148],{},"当我满心欢喜地将 CI 流程从 Github 官方的 runner 切换到自托管的 runner 后，问题很快就浮现了，而这也正是我“爱不起来”的主要原因。问题集中体现在我习以为常的 ",[111,146,147],{},"setup-python"," 这一由 Github 官方维护的 Github Action Flow 中，提示 3.12 版本没找到。",[10,150,151],{},[56,152],{"alt":58,"src":153},"https://static.031130.xyz/uploads/2025/09/05/1c93947170a85.webp",[10,155,156,157,160,161,164,165,170],{},"在 Github 官方提供的虚拟环境中，这些 Action 会为我们准备好指定版本的开发环境。例如，",[111,158,159],{},"uses: actions/setup-python"," 加上 ",[111,162,163],{},"with: python-version: '3.12'"," 就会自动在环境中安装并配置好 Python 3.12.x。我对此已经习以为常，认为这是一个“开箱即用”的功能。但在 Self-hosted Runner 上，情况略有些不同。setup-python 在",[14,166,169],{"href":167,"rel":168},"https://github.com/actions/setup-python/blob/main/docs/advanced-usage.md#using-setup-python-with-a-self-hosted-runner",[18],"文档","中指出",[172,173,174],"blockquote",{},[10,175,176,177,182,183,186,187,189],{},"Python distributions are only available for the same ",[14,178,181],{"href":179,"rel":180},"https://github.com/actions/runner-images#available-images",[18],"environments"," that GitHub Actions hosted environments are available for. If you are using an unsupported version of Ubuntu such as ",[111,184,185],{},"19.04"," or another Linux distribution such as Fedora, ",[111,188,147],{}," may not work.",[10,191,192,193,197],{},"setup-python 这个 Action ",[194,195,196],"strong",{},"只支持 Github Action 所采用的同款操作系统","，而我 VPS 的 Debian 不受支持，因此有这个误报，同时也给我的 Debian 判了死刑。",[44,199,201],{"id":200},"症结所在对-self-hosted-runner-的误解","症结所在：对 Self-hosted Runner 的误解",[10,203,204,205,208,209,212],{},"我潜意识里认为，Self-hosted Runner 仅仅是将计算成本从 Github 服务器转移到了本地，而 ",[111,206,207],{},"actions/setup-python"," 这种官方标准动作，理应会像 Github-hosted Runner 中那样，优雅地为我下载、安装、并配置好我需要的一切。然而，",[194,210,211],{},"Self-hosted  Runner 的本质只是从 Github 接收任务，并在当前的操作系统环境中执行指令","，并不保证和 Github 官方提供的 Runner 的运行环境一致。",[10,214,215,216,219],{},"Self-hosted Runner 不是一个开箱即用的“服务”，而是",[194,217,218],{},"一个需要你亲自管理的“基础设施”","。你需要负责服务器的安装、配置、安全更新、依赖管理、磁盘清理等一系列运维工作。它更适合那些对 CI/CD 有更高阶需求的团队或个人：比如 CI/CD 消费大户、需要特定硬件（如 ARM、GPU）进行构建的团队、或者 CI 流程深度依赖内部网络资源的企业。对于像我这样只是愿意拿出更多的本地计算资源来获取更多 Action 运行时长的普通开发者而言，它带来的运维心智负担，似乎是有一点重了。",[221,222,223],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":58,"searchDepth":123,"depth":123,"links":225},[226,227,228,229],{"id":46,"depth":123,"text":46},{"id":99,"depth":123,"text":100},{"id":141,"depth":123,"text":141},{"id":200,"depth":123,"text":201},"2025-09-05 05:54:17","在今年八月的时候，我这边所在的一个 Github Organization 在私有项目开发阶段频繁触发 CI，耗尽了 Github 为免费计划 (Free Plan) 提供的每月 2000 分钟 Action 额度（所有私有仓库共享，公有仓库不计）。大致看了下，CI 流设置得是合理的，那么就要另寻他法看看有没有办法去提供更宽裕的资源，因此也就盯上了文章标题中所提到的 Github Action Self-hosted Runner。","md",{},true,"/2025/09/05/first-try-of-github-action-self-hosted-runner","---\ntitle: 初试 Github Action Self-hosted Runner，想说爱你不容易\ndate: 2025-09-05 05:54:17\nsticky:\ntags:\n- Github\n- Github Action\n- CI/CD\n- Experience\n---\n\n在今年八月的时候，我这边所在的一个 Github Organization 在私有项目开发阶段频繁触发 CI，耗尽了 Github 为免费计划 (Free Plan) 提供的[每月 2000 分钟 Action 额度](https://docs.github.com/en/get-started/learning-about-github/githubs-plans#github-free-for-organizations)（所有私有仓库共享，公有仓库不计）。大致看了下，CI 流设置得是合理的，那么就要另寻他法看看有没有办法去提供更宽裕的资源，因此也就盯上了文章标题中所提到的 [Github Action Self-hosted Runner](https://docs.github.com/en/actions/concepts/runners/self-hosted-runners)。\n\n对于这个 Self-hosted Runner，与 Github 官方提供的 runner 相比，主要有以下几个优势\n\n- 针对私有仓库，拥有无限制的 Action 运行时长\n- 可以自行搭配更强大的硬件计算能力和内存\n- 可以接入内网环境，方便与内网/局域网设备通信\n\n## 配置安装\n\n由于不清楚需要的网络环境，我这次测试直接选用了一台闲置的香港 vps，4核4G + 80G 硬盘 + 1Gbps 大口子的配置，除了硬盘读写稍微拉胯一些，别的地方可以说是拉满了。\n\nSelf-hosted Runner 的配置本身是相当直接和清晰的，照着官方提供的方案基本没什么问题。\n\n![](https://static.031130.xyz/uploads/2025/09/05/7c0475cdb1aa9.webp)\n\n三个主流平台都有，如果好好加以利用，应该可以涵盖包括 iPhone 应用打包等一系列的需求。\n\n![](https://static.031130.xyz/uploads/2025/09/05/96ff7cb263da1.webp)\n\n在观察一下我这边拿到手的 2.328.0 版本的 runner 安装文件压缩包的体积在 220MB 左右，内置了 node20 和 node24 各两个版本的运行环境。\n\n![](https://static.031130.xyz/uploads/2025/09/05/f775e3bcd2cdc.webp)\n\n![](https://static.031130.xyz/uploads/2025/09/05/d0d4fe4611a40.webp)\n\n在执行完 config.sh 后，当前目录下就会多出一个 svc.sh，可以帮助利用这东西来调用 systemd 实现进程守护之类的需求。\n\n![](https://static.031130.xyz/uploads/2025/09/05/43c6b19038def.webp)\n\n再次刷新网页，就可以看到 Self-hosted Runner 处于已经上线的状态了\n\n![](https://static.031130.xyz/uploads/2025/09/05/6dad15beff900.webp)\n\n## 指定 Action 采用自己的 Runner\n\n这一步很简单，只需在原 Action 的 yml 文件中改变 runs-on 字段即可\n\n```diff\njobs:\n  run:\n+    runs-on: self-hosted\n-    runs-on: ubuntu-latest\n```\n\n## 实测\n\n当我满心欢喜地将 CI 流程从 Github 官方的 runner 切换到自托管的 runner 后，问题很快就浮现了，而这也正是我“爱不起来”的主要原因。问题集中体现在我习以为常的 `setup-python` 这一由 Github 官方维护的 Github Action Flow 中，提示 3.12 版本没找到。\n\n![](https://static.031130.xyz/uploads/2025/09/05/1c93947170a85.webp)\n\n在 Github 官方提供的虚拟环境中，这些 Action 会为我们准备好指定版本的开发环境。例如，`uses: actions/setup-python` 加上 `with: python-version: '3.12'` 就会自动在环境中安装并配置好 Python 3.12.x。我对此已经习以为常，认为这是一个“开箱即用”的功能。但在 Self-hosted Runner 上，情况略有些不同。setup-python 在[文档](https://github.com/actions/setup-python/blob/main/docs/advanced-usage.md#using-setup-python-with-a-self-hosted-runner)中指出\n\n> Python distributions are only available for the same [environments](https://github.com/actions/runner-images#available-images) that GitHub Actions hosted environments are available for. If you are using an unsupported version of Ubuntu such as `19.04` or another Linux distribution such as Fedora, `setup-python` may not work.\n\nsetup-python 这个 Action **只支持 Github Action 所采用的同款操作系统**，而我 VPS 的 Debian 不受支持，因此有这个误报，同时也给我的 Debian 判了死刑。\n\n## 症结所在：对 Self-hosted Runner 的误解\n\n我潜意识里认为，Self-hosted Runner 仅仅是将计算成本从 Github 服务器转移到了本地，而 `actions/setup-python` 这种官方标准动作，理应会像 Github-hosted Runner 中那样，优雅地为我下载、安装、并配置好我需要的一切。然而，**Self-hosted  Runner 的本质只是从 Github 接收任务，并在当前的操作系统环境中执行指令**，并不保证和 Github 官方提供的 Runner 的运行环境一致。\n\nSelf-hosted Runner 不是一个开箱即用的“服务”，而是**一个需要你亲自管理的“基础设施”**。你需要负责服务器的安装、配置、安全更新、依赖管理、磁盘清理等一系列运维工作。它更适合那些对 CI/CD 有更高阶需求的团队或个人：比如 CI/CD 消费大户、需要特定硬件（如 ARM、GPU）进行构建的团队、或者 CI 流程深度依赖内部网络资源的企业。对于像我这样只是愿意拿出更多的本地计算资源来获取更多 Action 运行时长的普通开发者而言，它带来的运维心智负担，似乎是有一点重了。\n",{"title":5,"description":231},"posts/first-try-of-github-action-self-hosted-runner",false,[241,242,243,244],"Github","Github Action","CI/CD","Experience","6tapN-8Y5XGii85ByX5n-IG2aYiXEP2Fe7L8E0hUkug",[247,252],{"title":248,"path":249,"stem":250,"date":251,"children":-1},"后 OCSP 时代，浏览器如何应对证书吊销新挑战","/2025/10/16/how-s-mozilla-crlite-going-now","posts/how-s-mozilla-crlite-going-now","2025-10-16 15:38:50",{"title":253,"path":254,"stem":255,"date":256,"children":-1},"DNS 解析时长毁了我精心设计的图床网络架构","/2025/08/11/dns-resolve-time-destroyed-my-optimization-for-pic-cdn","posts/dns-resolve-time-destroyed-my-optimization-for-pic-cdn","2025-08-11 00:06:40",7,1761738773672]