[{"data":1,"prerenderedAt":835},["ShallowReactive",2],{"post-2025-02-23-monitor-copr-build-state-with-cloudflare-workers":3,"surround-2025-02-23-monitor-copr-build-state-with-cloudflare-workers":824,"randomIndex/2025/02/23/monitor-copr-build-state-with-cloudflare-workers":702},{"id":4,"title":5,"body":6,"date":811,"description":62,"extension":812,"meta":813,"navigation":138,"path":814,"rawbody":815,"seo":816,"stem":817,"sticky":818,"tags":819,"__hash__":823},"posts/posts/monitor-copr-build-state-with-cloudflare-workers.md","使用 Cloudflare Workers 监控 Fedora Copr 构建状态",{"type":7,"value":8,"toc":809},"minimark",[9,19,28,43,57,64,67,70,294,297,459,462,786,789,794,805],[10,11,12],"blockquote",{},[13,14,15],"p",{},[16,17,18],"del",{},"确信，是 cloudflare workers 用上瘾了",[13,20,21,22,27],{},"在",[23,24,26],"a",{"href":25},"/2024/04/29/update-a-rpm-spec-by-github-action/","「使用 Github Action 更新用于 rpm 打包的 spec 文件」","一文中，我利用 Github Action 实现了自动化的 spec 版本号更新，配合 Fedora Copr 的 webhook 就可以实现 Copr 软件包更新的自动化构建。看似很完美，但缺少了一个构建状态的监控机制，这导致出现构建错误的时候我不能及时得到通知（无论构建错误是 spec 本身的问题或者是构建时的网络环境问题）。",[13,29,30,36,37,42],{},[23,31,35],{"href":32,"rel":33},"https://yanqiyu.info",[34],"nofollow","西木野羰基"," 提出 ",[23,38,41],{"href":39,"rel":40},"https://notifications.fedoraproject.org/",[34],"notifications.fedoraproject.org"," 可以配置通知，Filters 的 Applications 选项中有 copr，但很可惜，实测没有效果。这里的通知配置的似乎只是邮件的过滤规则——如果 copr 本来就没打算构建失败的时候给你发邮件，那即使建立了过滤规则，依然是不可能收到邮件的。",[13,44,45,46,51,52,56],{},"不过好在 Fedora Copr 本身有非常完备的 ",[23,47,50],{"href":48,"rel":49},"https://copr.fedorainfracloud.org/api_3/docs",[34],"api 文档","，",[53,54,55],"code",{},"/monitor"," 这个 API 能用来获取软件包最新的构建情况。",[13,58,59],{},[60,61],"img",{"alt":62,"src":63},"","https://static.031130.xyz/uploads/2025/02/23/637811d2d85f6.webp",[13,65,66],{},"因此，我们就可以通过 Cloudflare 的 cronjob 定时请求这个接口，查询是否有软件包构建失败。",[13,68,69],{},"先来编写打请求的部分",[71,72,76],"pre",{"className":73,"code":74,"language":75,"meta":62,"style":62},"language-javascript shiki shiki-themes github-light github-dark","async function fetchCopr() {\n    const ownername = \"zhullyb\";\n    const projectname = \"v2rayA\";\n\n    const url = new URL(\"https://copr.fedorainfracloud.org/api_3/monitor\")\n    url.searchParams.set(\"ownername\", ownername)\n    url.searchParams.set(\"projectname\", projectname)\n    const response = await fetch(url)\n    const data = await response.json()\n    if (data.output !== \"ok\") {\n        throw new Error(\"Failed to fetch COPR data\")\n    }\n    return data\n}\n","javascript",[53,77,78,98,118,133,140,165,182,197,216,237,255,273,279,288],{"__ignoreMap":62},[79,80,83,87,90,94],"span",{"class":81,"line":82},"line",1,[79,84,86],{"class":85},"szBVR","async",[79,88,89],{"class":85}," function",[79,91,93],{"class":92},"sScJk"," fetchCopr",[79,95,97],{"class":96},"sVt8B","() {\n",[79,99,101,104,108,111,115],{"class":81,"line":100},2,[79,102,103],{"class":85},"    const",[79,105,107],{"class":106},"sj4cs"," ownername",[79,109,110],{"class":85}," =",[79,112,114],{"class":113},"sZZnC"," \"zhullyb\"",[79,116,117],{"class":96},";\n",[79,119,121,123,126,128,131],{"class":81,"line":120},3,[79,122,103],{"class":85},[79,124,125],{"class":106}," projectname",[79,127,110],{"class":85},[79,129,130],{"class":113}," \"v2rayA\"",[79,132,117],{"class":96},[79,134,136],{"class":81,"line":135},4,[79,137,139],{"emptyLinePlaceholder":138},true,"\n",[79,141,143,145,148,150,153,156,159,162],{"class":81,"line":142},5,[79,144,103],{"class":85},[79,146,147],{"class":106}," url",[79,149,110],{"class":85},[79,151,152],{"class":85}," new",[79,154,155],{"class":92}," URL",[79,157,158],{"class":96},"(",[79,160,161],{"class":113},"\"https://copr.fedorainfracloud.org/api_3/monitor\"",[79,163,164],{"class":96},")\n",[79,166,168,171,174,176,179],{"class":81,"line":167},6,[79,169,170],{"class":96},"    url.searchParams.",[79,172,173],{"class":92},"set",[79,175,158],{"class":96},[79,177,178],{"class":113},"\"ownername\"",[79,180,181],{"class":96},", ownername)\n",[79,183,185,187,189,191,194],{"class":81,"line":184},7,[79,186,170],{"class":96},[79,188,173],{"class":92},[79,190,158],{"class":96},[79,192,193],{"class":113},"\"projectname\"",[79,195,196],{"class":96},", projectname)\n",[79,198,200,202,205,207,210,213],{"class":81,"line":199},8,[79,201,103],{"class":85},[79,203,204],{"class":106}," response",[79,206,110],{"class":85},[79,208,209],{"class":85}," await",[79,211,212],{"class":92}," fetch",[79,214,215],{"class":96},"(url)\n",[79,217,219,221,224,226,228,231,234],{"class":81,"line":218},9,[79,220,103],{"class":85},[79,222,223],{"class":106}," data",[79,225,110],{"class":85},[79,227,209],{"class":85},[79,229,230],{"class":96}," response.",[79,232,233],{"class":92},"json",[79,235,236],{"class":96},"()\n",[79,238,240,243,246,249,252],{"class":81,"line":239},10,[79,241,242],{"class":85},"    if",[79,244,245],{"class":96}," (data.output ",[79,247,248],{"class":85},"!==",[79,250,251],{"class":113}," \"ok\"",[79,253,254],{"class":96},") {\n",[79,256,258,261,263,266,268,271],{"class":81,"line":257},11,[79,259,260],{"class":85},"        throw",[79,262,152],{"class":85},[79,264,265],{"class":92}," Error",[79,267,158],{"class":96},[79,269,270],{"class":113},"\"Failed to fetch COPR data\"",[79,272,164],{"class":96},[79,274,276],{"class":81,"line":275},12,[79,277,278],{"class":96},"    }\n",[79,280,282,285],{"class":81,"line":281},13,[79,283,284],{"class":85},"    return",[79,286,287],{"class":96}," data\n",[79,289,291],{"class":81,"line":290},14,[79,292,293],{"class":96},"}\n",[13,295,296],{},"随后编写通知部分，我这里采用的是飞书的 webhook 机器人",[71,298,300],{"className":73,"code":299,"language":75,"meta":62,"style":62},"async function notify(text) {\n    const webhook = \"https://open.feishu.cn/open-apis/bot/v2/hook/ffffffff-ffff-ffff-ffff-ffffffffffff\"\n    const body = {\n        msg_type: \"text\",\n        content: {\n            text: text\n        }\n    }\n    const response = await fetch(webhook, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    })\n    console.log(response)\n}\n",[53,301,302,319,331,343,354,359,364,369,373,388,398,403,414,419,436,442,454],{"__ignoreMap":62},[79,303,304,306,308,311,313,317],{"class":81,"line":82},[79,305,86],{"class":85},[79,307,89],{"class":85},[79,309,310],{"class":92}," notify",[79,312,158],{"class":96},[79,314,316],{"class":315},"s4XuR","text",[79,318,254],{"class":96},[79,320,321,323,326,328],{"class":81,"line":100},[79,322,103],{"class":85},[79,324,325],{"class":106}," webhook",[79,327,110],{"class":85},[79,329,330],{"class":113}," \"https://open.feishu.cn/open-apis/bot/v2/hook/ffffffff-ffff-ffff-ffff-ffffffffffff\"\n",[79,332,333,335,338,340],{"class":81,"line":120},[79,334,103],{"class":85},[79,336,337],{"class":106}," body",[79,339,110],{"class":85},[79,341,342],{"class":96}," {\n",[79,344,345,348,351],{"class":81,"line":135},[79,346,347],{"class":96},"        msg_type: ",[79,349,350],{"class":113},"\"text\"",[79,352,353],{"class":96},",\n",[79,355,356],{"class":81,"line":142},[79,357,358],{"class":96},"        content: {\n",[79,360,361],{"class":81,"line":167},[79,362,363],{"class":96},"            text: text\n",[79,365,366],{"class":81,"line":184},[79,367,368],{"class":96},"        }\n",[79,370,371],{"class":81,"line":199},[79,372,278],{"class":96},[79,374,375,377,379,381,383,385],{"class":81,"line":218},[79,376,103],{"class":85},[79,378,204],{"class":106},[79,380,110],{"class":85},[79,382,209],{"class":85},[79,384,212],{"class":92},[79,386,387],{"class":96},"(webhook, {\n",[79,389,390,393,396],{"class":81,"line":239},[79,391,392],{"class":96},"        method: ",[79,394,395],{"class":113},"\"POST\"",[79,397,353],{"class":96},[79,399,400],{"class":81,"line":257},[79,401,402],{"class":96},"        headers: {\n",[79,404,405,408,411],{"class":81,"line":275},[79,406,407],{"class":113},"            \"Content-Type\"",[79,409,410],{"class":96},": ",[79,412,413],{"class":113},"\"application/json\"\n",[79,415,416],{"class":81,"line":281},[79,417,418],{"class":96},"        },\n",[79,420,421,424,427,430,433],{"class":81,"line":290},[79,422,423],{"class":96},"        body: ",[79,425,426],{"class":106},"JSON",[79,428,429],{"class":96},".",[79,431,432],{"class":92},"stringify",[79,434,435],{"class":96},"(body)\n",[79,437,439],{"class":81,"line":438},15,[79,440,441],{"class":96},"    })\n",[79,443,445,448,451],{"class":81,"line":444},16,[79,446,447],{"class":96},"    console.",[79,449,450],{"class":92},"log",[79,452,453],{"class":96},"(response)\n",[79,455,457],{"class":81,"line":456},17,[79,458,293],{"class":96},[13,460,461],{},"最后就是 cronjob 的调用部分和构建状态解析部分",[71,463,465],{"className":73,"code":464,"language":75,"meta":62,"style":62},"export default {\n    async fetch(request, env, ctx) {\n      return new Response('Hello World!');\n    },\n\n    async scheduled(event, env, ctx) {\n        const data = await fetchCopr()\n        const errorPackages = new Array()\n\n        for (const pkg of data.packages) {\n            for (const chroot of Object.values(pkg.chroots)) {\n                if (chroot.state == \"failed\") {\n                    errorPackages.push(pkg.name)\n                    break\n                }\n            }\n        }\n\n        if (errorPackages.length > 0) {\n            await notify(`COPR 以下包发生构建失败:\\n${errorPackages.join(\"\\n\")}`)\n        } else {\n            console.log(\"COPR 所有包构建成功\")\n        }\n    }\n};\n",[53,466,467,477,502,520,525,529,551,566,582,586,606,629,645,656,661,666,671,675,680,700,744,755,770,775,780],{"__ignoreMap":62},[79,468,469,472,475],{"class":81,"line":82},[79,470,471],{"class":85},"export",[79,473,474],{"class":85}," default",[79,476,342],{"class":96},[79,478,479,482,484,486,489,492,495,497,500],{"class":81,"line":100},[79,480,481],{"class":85},"    async",[79,483,212],{"class":92},[79,485,158],{"class":96},[79,487,488],{"class":315},"request",[79,490,491],{"class":96},", ",[79,493,494],{"class":315},"env",[79,496,491],{"class":96},[79,498,499],{"class":315},"ctx",[79,501,254],{"class":96},[79,503,504,507,509,512,514,517],{"class":81,"line":120},[79,505,506],{"class":85},"      return",[79,508,152],{"class":85},[79,510,511],{"class":92}," Response",[79,513,158],{"class":96},[79,515,516],{"class":113},"'Hello World!'",[79,518,519],{"class":96},");\n",[79,521,522],{"class":81,"line":135},[79,523,524],{"class":96},"    },\n",[79,526,527],{"class":81,"line":142},[79,528,139],{"emptyLinePlaceholder":138},[79,530,531,533,536,538,541,543,545,547,549],{"class":81,"line":167},[79,532,481],{"class":85},[79,534,535],{"class":92}," scheduled",[79,537,158],{"class":96},[79,539,540],{"class":315},"event",[79,542,491],{"class":96},[79,544,494],{"class":315},[79,546,491],{"class":96},[79,548,499],{"class":315},[79,550,254],{"class":96},[79,552,553,556,558,560,562,564],{"class":81,"line":184},[79,554,555],{"class":85},"        const",[79,557,223],{"class":106},[79,559,110],{"class":85},[79,561,209],{"class":85},[79,563,93],{"class":92},[79,565,236],{"class":96},[79,567,568,570,573,575,577,580],{"class":81,"line":199},[79,569,555],{"class":85},[79,571,572],{"class":106}," errorPackages",[79,574,110],{"class":85},[79,576,152],{"class":85},[79,578,579],{"class":92}," Array",[79,581,236],{"class":96},[79,583,584],{"class":81,"line":218},[79,585,139],{"emptyLinePlaceholder":138},[79,587,588,591,594,597,600,603],{"class":81,"line":239},[79,589,590],{"class":85},"        for",[79,592,593],{"class":96}," (",[79,595,596],{"class":85},"const",[79,598,599],{"class":106}," pkg",[79,601,602],{"class":85}," of",[79,604,605],{"class":96}," data.packages) {\n",[79,607,608,611,613,615,618,620,623,626],{"class":81,"line":257},[79,609,610],{"class":85},"            for",[79,612,593],{"class":96},[79,614,596],{"class":85},[79,616,617],{"class":106}," chroot",[79,619,602],{"class":85},[79,621,622],{"class":96}," Object.",[79,624,625],{"class":92},"values",[79,627,628],{"class":96},"(pkg.chroots)) {\n",[79,630,631,634,637,640,643],{"class":81,"line":275},[79,632,633],{"class":85},"                if",[79,635,636],{"class":96}," (chroot.state ",[79,638,639],{"class":85},"==",[79,641,642],{"class":113}," \"failed\"",[79,644,254],{"class":96},[79,646,647,650,653],{"class":81,"line":281},[79,648,649],{"class":96},"                    errorPackages.",[79,651,652],{"class":92},"push",[79,654,655],{"class":96},"(pkg.name)\n",[79,657,658],{"class":81,"line":290},[79,659,660],{"class":85},"                    break\n",[79,662,663],{"class":81,"line":438},[79,664,665],{"class":96},"                }\n",[79,667,668],{"class":81,"line":444},[79,669,670],{"class":96},"            }\n",[79,672,673],{"class":81,"line":456},[79,674,368],{"class":96},[79,676,678],{"class":81,"line":677},18,[79,679,139],{"emptyLinePlaceholder":138},[79,681,683,686,689,692,695,698],{"class":81,"line":682},19,[79,684,685],{"class":85},"        if",[79,687,688],{"class":96}," (errorPackages.",[79,690,691],{"class":106},"length",[79,693,694],{"class":85}," >",[79,696,697],{"class":106}," 0",[79,699,254],{"class":96},[79,701,703,706,708,710,713,716,719,722,724,727,729,732,734,736,739,742],{"class":81,"line":702},20,[79,704,705],{"class":85},"            await",[79,707,310],{"class":92},[79,709,158],{"class":96},[79,711,712],{"class":113},"`COPR 以下包发生构建失败:",[79,714,715],{"class":106},"\\n",[79,717,718],{"class":113},"${",[79,720,721],{"class":96},"errorPackages",[79,723,429],{"class":113},[79,725,726],{"class":92},"join",[79,728,158],{"class":113},[79,730,731],{"class":113},"\"",[79,733,715],{"class":106},[79,735,731],{"class":113},[79,737,738],{"class":113},")",[79,740,741],{"class":113},"}`",[79,743,164],{"class":96},[79,745,747,750,753],{"class":81,"line":746},21,[79,748,749],{"class":96},"        } ",[79,751,752],{"class":85},"else",[79,754,342],{"class":96},[79,756,758,761,763,765,768],{"class":81,"line":757},22,[79,759,760],{"class":96},"            console.",[79,762,450],{"class":92},[79,764,158],{"class":96},[79,766,767],{"class":113},"\"COPR 所有包构建成功\"",[79,769,164],{"class":96},[79,771,773],{"class":81,"line":772},23,[79,774,368],{"class":96},[79,776,778],{"class":81,"line":777},24,[79,779,278],{"class":96},[79,781,783],{"class":81,"line":782},25,[79,784,785],{"class":96},"};\n",[13,787,788],{},"随后在 Cloudflare Workers 的 Settings 部分设置好 Cron 表达式即可，我这里选择在每小时的 55 分进行一次检测，这样下来一天只会消耗 24 次 workers 次数，简直毫无压力。",[13,790,791],{},[60,792],{"alt":62,"src":793},"https://static.031130.xyz/uploads/2025/02/23/c38edfd637934.webp",[13,795,796,800,801,804],{},[797,798,799],"strong",{},"缺点:"," 我懒得使用持久化数据库记录软件包构建的成功状态，这会导致出现一个包构建失败后，每隔 1 小时都会有一条提醒，",[16,802,803],{},"什么夺命连环 call","。我目前不想修复这个问题，要不然还是降低 cron 的触发频率好了。",[806,807,808],"style",{},"html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s4XuR, html code.shiki .s4XuR{--shiki-default:#E36209;--shiki-dark:#FFAB70}",{"title":62,"searchDepth":100,"depth":100,"links":810},[],"2025-02-23 12:12:53","md",{},"/2025/02/23/monitor-copr-build-state-with-cloudflare-workers","---\ntitle: 使用 Cloudflare Workers 监控 Fedora Copr 构建状态\ndate: 2025-02-23 12:12:53\nsticky:\ntags:\n- JavaScript\n- Cloudflare\n- Fedora\n---\n\n> ~~确信，是 cloudflare workers 用上瘾了~~\n\n在[「使用 Github Action 更新用于 rpm 打包的 spec 文件」](/2024/04/29/update-a-rpm-spec-by-github-action/)一文中，我利用 Github Action 实现了自动化的 spec 版本号更新，配合 Fedora Copr 的 webhook 就可以实现 Copr 软件包更新的自动化构建。看似很完美，但缺少了一个构建状态的监控机制，这导致出现构建错误的时候我不能及时得到通知（无论构建错误是 spec 本身的问题或者是构建时的网络环境问题）。\n\n[西木野羰基](https://yanqiyu.info) 提出 [notifications.fedoraproject.org](https://notifications.fedoraproject.org/) 可以配置通知，Filters 的 Applications 选项中有 copr，但很可惜，实测没有效果。这里的通知配置的似乎只是邮件的过滤规则——如果 copr 本来就没打算构建失败的时候给你发邮件，那即使建立了过滤规则，依然是不可能收到邮件的。\n\n不过好在 Fedora Copr 本身有非常完备的 [api 文档](https://copr.fedorainfracloud.org/api_3/docs)，`/monitor` 这个 API 能用来获取软件包最新的构建情况。\n\n![](https://static.031130.xyz/uploads/2025/02/23/637811d2d85f6.webp)\n\n因此，我们就可以通过 Cloudflare 的 cronjob 定时请求这个接口，查询是否有软件包构建失败。\n\n先来编写打请求的部分\n\n```javascript\nasync function fetchCopr() {\n    const ownername = \"zhullyb\";\n    const projectname = \"v2rayA\";\n\n    const url = new URL(\"https://copr.fedorainfracloud.org/api_3/monitor\")\n    url.searchParams.set(\"ownername\", ownername)\n    url.searchParams.set(\"projectname\", projectname)\n    const response = await fetch(url)\n    const data = await response.json()\n    if (data.output !== \"ok\") {\n        throw new Error(\"Failed to fetch COPR data\")\n    }\n    return data\n}\n```\n\n随后编写通知部分，我这里采用的是飞书的 webhook 机器人\n\n```javascript\nasync function notify(text) {\n    const webhook = \"https://open.feishu.cn/open-apis/bot/v2/hook/ffffffff-ffff-ffff-ffff-ffffffffffff\"\n    const body = {\n        msg_type: \"text\",\n        content: {\n            text: text\n        }\n    }\n    const response = await fetch(webhook, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    })\n    console.log(response)\n}\n```\n\n最后就是 cronjob 的调用部分和构建状态解析部分\n\n```javascript\nexport default {\n    async fetch(request, env, ctx) {\n      return new Response('Hello World!');\n    },\n\n    async scheduled(event, env, ctx) {\n        const data = await fetchCopr()\n        const errorPackages = new Array()\n\n        for (const pkg of data.packages) {\n            for (const chroot of Object.values(pkg.chroots)) {\n                if (chroot.state == \"failed\") {\n                    errorPackages.push(pkg.name)\n                    break\n                }\n            }\n        }\n\n        if (errorPackages.length > 0) {\n            await notify(`COPR 以下包发生构建失败:\\n${errorPackages.join(\"\\n\")}`)\n        } else {\n            console.log(\"COPR 所有包构建成功\")\n        }\n    }\n};\n```\n\n随后在 Cloudflare Workers 的 Settings 部分设置好 Cron 表达式即可，我这里选择在每小时的 55 分进行一次检测，这样下来一天只会消耗 24 次 workers 次数，简直毫无压力。\n\n![](https://static.031130.xyz/uploads/2025/02/23/c38edfd637934.webp)\n\n**缺点:** 我懒得使用持久化数据库记录软件包构建的成功状态，这会导致出现一个包构建失败后，每隔 1 小时都会有一条提醒，~~什么夺命连环 call~~。我目前不想修复这个问题，要不然还是降低 cron 的触发频率好了。\n",{"title":5,"description":62},"posts/monitor-copr-build-state-with-cloudflare-workers",false,[820,821,822],"JavaScript","Cloudflare","Fedora","UYGPgQ66EeGeaKe8J8oimWAU4M_JlAwmaurGaW8JD18",[825,830],{"title":826,"path":827,"stem":828,"date":829,"children":-1},"Cudy TR3000 吃鹅(daed)记","/2025/02/28/cudy-tr3000-daed-install-record","posts/cudy-tr3000-daed-install-record","2025-02-28 21:18:34",{"title":831,"path":832,"stem":833,"date":834,"children":-1},"基于 Cloudflare Workers 实现的在线服务状态检测告警系统","/2025/01/18/service-status-monitor-based-on-cloudflare-workers","posts/service-status-monitor-based-on-cloudflare-workers","2025-01-18 02:00:08",1761695681133]