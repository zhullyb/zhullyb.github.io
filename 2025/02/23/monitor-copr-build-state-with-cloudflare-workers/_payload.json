[{"data":1,"prerenderedAt":956},["ShallowReactive",2],{"post-2025-02-23-monitor-copr-build-state-with-cloudflare-workers":3,"surround-2025-02-23-monitor-copr-build-state-with-cloudflare-workers":945,"randomIndex/2025/02/23/monitor-copr-build-state-with-cloudflare-workers/":507},{"id":4,"title":5,"body":6,"date":932,"description":62,"extension":933,"meta":934,"navigation":139,"path":935,"rawbody":936,"seo":937,"stem":938,"sticky":939,"tags":940,"__hash__":944},"posts/posts/monitor-copr-build-state-with-cloudflare-workers.md","使用 Cloudflare Workers 监控 Fedora Copr 构建状态",{"type":7,"value":8,"toc":930},"minimark",[9,19,28,43,57,64,67,70,335,338,534,537,907,910,915,926],[10,11,12],"blockquote",{},[13,14,15],"p",{},[16,17,18],"del",{},"确信，是 cloudflare workers 用上瘾了",[13,20,21,22,27],{},"在",[23,24,26],"a",{"href":25},"/2024/04/29/update-a-rpm-spec-by-github-action/","「使用 Github Action 更新用于 rpm 打包的 spec 文件」","一文中，我利用 Github Action 实现了自动化的 spec 版本号更新，配合 Fedora Copr 的 webhook 就可以实现 Copr 软件包更新的自动化构建。看似很完美，但缺少了一个构建状态的监控机制，这导致出现构建错误的时候我不能及时得到通知（无论构建错误是 spec 本身的问题或者是构建时的网络环境问题）。",[13,29,30,36,37,42],{},[23,31,35],{"href":32,"rel":33},"https://yanqiyu.info",[34],"nofollow","西木野羰基"," 提出 ",[23,38,41],{"href":39,"rel":40},"https://notifications.fedoraproject.org/",[34],"notifications.fedoraproject.org"," 可以配置通知，Filters 的 Applications 选项中有 copr，但很可惜，实测没有效果。这里的通知配置的似乎只是邮件的过滤规则——如果 copr 本来就没打算构建失败的时候给你发邮件，那即使建立了过滤规则，依然是不可能收到邮件的。",[13,44,45,46,51,52,56],{},"不过好在 Fedora Copr 本身有非常完备的 ",[23,47,50],{"href":48,"rel":49},"https://copr.fedorainfracloud.org/api_3/docs",[34],"api 文档","，",[53,54,55],"code",{},"/monitor"," 这个 API 能用来获取软件包最新的构建情况。",[13,58,59],{},[60,61],"img",{"alt":62,"src":63},"","https://static.031130.xyz/uploads/2025/02/23/637811d2d85f6.webp",[13,65,66],{},"因此，我们就可以通过 Cloudflare 的 cronjob 定时请求这个接口，查询是否有软件包构建失败。",[13,68,69],{},"先来编写打请求的部分",[71,72,76],"pre",{"className":73,"code":74,"language":75,"meta":62,"style":62},"language-javascript shiki shiki-themes one-light one-dark-pro","async function fetchCopr() {\n    const ownername = \"zhullyb\";\n    const projectname = \"v2rayA\";\n\n    const url = new URL(\"https://copr.fedorainfracloud.org/api_3/monitor\")\n    url.searchParams.set(\"ownername\", ownername)\n    url.searchParams.set(\"projectname\", projectname)\n    const response = await fetch(url)\n    const data = await response.json()\n    if (data.output !== \"ok\") {\n        throw new Error(\"Failed to fetch COPR data\")\n    }\n    return data\n}\n","javascript",[53,77,78,98,119,134,141,166,199,224,247,269,296,314,320,329],{"__ignoreMap":62},[79,80,83,87,90,94],"span",{"class":81,"line":82},"line",1,[79,84,86],{"class":85},"sLKXg","async",[79,88,89],{"class":85}," function",[79,91,93],{"class":92},"sAdtL"," fetchCopr",[79,95,97],{"class":96},"s5ixo","() {\n",[79,99,101,104,108,112,116],{"class":81,"line":100},2,[79,102,103],{"class":85},"    const",[79,105,107],{"class":106},"sNmU0"," ownername",[79,109,111],{"class":110},"s_Sar"," =",[79,113,115],{"class":114},"sDhpE"," \"zhullyb\"",[79,117,118],{"class":96},";\n",[79,120,122,124,127,129,132],{"class":81,"line":121},3,[79,123,103],{"class":85},[79,125,126],{"class":106}," projectname",[79,128,111],{"class":110},[79,130,131],{"class":114}," \"v2rayA\"",[79,133,118],{"class":96},[79,135,137],{"class":81,"line":136},4,[79,138,140],{"emptyLinePlaceholder":139},true,"\n",[79,142,144,146,149,151,154,157,160,163],{"class":81,"line":143},5,[79,145,103],{"class":85},[79,147,148],{"class":106}," url",[79,150,111],{"class":110},[79,152,153],{"class":85}," new",[79,155,156],{"class":92}," URL",[79,158,159],{"class":96},"(",[79,161,162],{"class":114},"\"https://copr.fedorainfracloud.org/api_3/monitor\"",[79,164,165],{"class":96},")\n",[79,167,169,173,176,180,182,185,187,190,193,197],{"class":81,"line":168},6,[79,170,172],{"class":171},"s7GmK","    url",[79,174,175],{"class":96},".",[79,177,179],{"class":178},"s2QsP","searchParams",[79,181,175],{"class":96},[79,183,184],{"class":92},"set",[79,186,159],{"class":96},[79,188,189],{"class":114},"\"ownername\"",[79,191,192],{"class":96},", ",[79,194,196],{"class":195},"sz0mV","ownername",[79,198,165],{"class":96},[79,200,202,204,206,208,210,212,214,217,219,222],{"class":81,"line":201},7,[79,203,172],{"class":171},[79,205,175],{"class":96},[79,207,179],{"class":178},[79,209,175],{"class":96},[79,211,184],{"class":92},[79,213,159],{"class":96},[79,215,216],{"class":114},"\"projectname\"",[79,218,192],{"class":96},[79,220,221],{"class":195},"projectname",[79,223,165],{"class":96},[79,225,227,229,232,234,237,240,242,245],{"class":81,"line":226},8,[79,228,103],{"class":85},[79,230,231],{"class":106}," response",[79,233,111],{"class":110},[79,235,236],{"class":85}," await",[79,238,239],{"class":92}," fetch",[79,241,159],{"class":96},[79,243,244],{"class":195},"url",[79,246,165],{"class":96},[79,248,250,252,255,257,259,261,263,266],{"class":81,"line":249},9,[79,251,103],{"class":85},[79,253,254],{"class":106}," data",[79,256,111],{"class":110},[79,258,236],{"class":85},[79,260,231],{"class":171},[79,262,175],{"class":96},[79,264,265],{"class":92},"json",[79,267,268],{"class":96},"()\n",[79,270,272,275,278,281,283,287,290,293],{"class":81,"line":271},10,[79,273,274],{"class":85},"    if",[79,276,277],{"class":96}," (",[79,279,280],{"class":171},"data",[79,282,175],{"class":96},[79,284,286],{"class":285},"sJa8x","output",[79,288,289],{"class":110}," !==",[79,291,292],{"class":114}," \"ok\"",[79,294,295],{"class":96},") {\n",[79,297,299,302,304,307,309,312],{"class":81,"line":298},11,[79,300,301],{"class":85},"        throw",[79,303,153],{"class":85},[79,305,306],{"class":92}," Error",[79,308,159],{"class":96},[79,310,311],{"class":114},"\"Failed to fetch COPR data\"",[79,313,165],{"class":96},[79,315,317],{"class":81,"line":316},12,[79,318,319],{"class":96},"    }\n",[79,321,323,326],{"class":81,"line":322},13,[79,324,325],{"class":85},"    return",[79,327,328],{"class":195}," data\n",[79,330,332],{"class":81,"line":331},14,[79,333,334],{"class":96},"}\n",[13,336,337],{},"随后编写通知部分，我这里采用的是飞书的 webhook 机器人",[71,339,341],{"className":73,"code":340,"language":75,"meta":62,"style":62},"async function notify(text) {\n    const webhook = \"https://open.feishu.cn/open-apis/bot/v2/hook/ffffffff-ffff-ffff-ffff-ffffffffffff\"\n    const body = {\n        msg_type: \"text\",\n        content: {\n            text: text\n        }\n    }\n    const response = await fetch(webhook, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    })\n    console.log(response)\n}\n",[53,342,343,360,372,384,399,408,418,423,427,447,459,468,478,483,505,511,529],{"__ignoreMap":62},[79,344,345,347,349,352,354,358],{"class":81,"line":82},[79,346,86],{"class":85},[79,348,89],{"class":85},[79,350,351],{"class":92}," notify",[79,353,159],{"class":96},[79,355,357],{"class":356},"s8iYz","text",[79,359,295],{"class":96},[79,361,362,364,367,369],{"class":81,"line":100},[79,363,103],{"class":85},[79,365,366],{"class":106}," webhook",[79,368,111],{"class":110},[79,370,371],{"class":114}," \"https://open.feishu.cn/open-apis/bot/v2/hook/ffffffff-ffff-ffff-ffff-ffffffffffff\"\n",[79,373,374,376,379,381],{"class":81,"line":121},[79,375,103],{"class":85},[79,377,378],{"class":106}," body",[79,380,111],{"class":110},[79,382,383],{"class":96}," {\n",[79,385,386,389,393,396],{"class":81,"line":136},[79,387,388],{"class":285},"        msg_type",[79,390,392],{"class":391},"st7oF",":",[79,394,395],{"class":114}," \"text\"",[79,397,398],{"class":96},",\n",[79,400,401,404,406],{"class":81,"line":143},[79,402,403],{"class":285},"        content",[79,405,392],{"class":391},[79,407,383],{"class":96},[79,409,410,413,415],{"class":81,"line":168},[79,411,412],{"class":285},"            text",[79,414,392],{"class":391},[79,416,417],{"class":195}," text\n",[79,419,420],{"class":81,"line":201},[79,421,422],{"class":96},"        }\n",[79,424,425],{"class":81,"line":226},[79,426,319],{"class":96},[79,428,429,431,433,435,437,439,441,444],{"class":81,"line":249},[79,430,103],{"class":85},[79,432,231],{"class":106},[79,434,111],{"class":110},[79,436,236],{"class":85},[79,438,239],{"class":92},[79,440,159],{"class":96},[79,442,443],{"class":195},"webhook",[79,445,446],{"class":96},", {\n",[79,448,449,452,454,457],{"class":81,"line":271},[79,450,451],{"class":285},"        method",[79,453,392],{"class":391},[79,455,456],{"class":114}," \"POST\"",[79,458,398],{"class":96},[79,460,461,464,466],{"class":81,"line":298},[79,462,463],{"class":285},"        headers",[79,465,392],{"class":391},[79,467,383],{"class":96},[79,469,470,473,475],{"class":81,"line":316},[79,471,472],{"class":114},"            \"Content-Type\"",[79,474,392],{"class":391},[79,476,477],{"class":114}," \"application/json\"\n",[79,479,480],{"class":81,"line":322},[79,481,482],{"class":96},"        },\n",[79,484,485,488,490,493,495,498,500,503],{"class":81,"line":331},[79,486,487],{"class":285},"        body",[79,489,392],{"class":391},[79,491,492],{"class":106}," JSON",[79,494,175],{"class":96},[79,496,497],{"class":92},"stringify",[79,499,159],{"class":96},[79,501,502],{"class":195},"body",[79,504,165],{"class":96},[79,506,508],{"class":81,"line":507},15,[79,509,510],{"class":96},"    })\n",[79,512,514,517,519,522,524,527],{"class":81,"line":513},16,[79,515,516],{"class":171},"    console",[79,518,175],{"class":96},[79,520,521],{"class":92},"log",[79,523,159],{"class":96},[79,525,526],{"class":195},"response",[79,528,165],{"class":96},[79,530,532],{"class":81,"line":531},17,[79,533,334],{"class":96},[13,535,536],{},"最后就是 cronjob 的调用部分和构建状态解析部分",[71,538,540],{"className":73,"code":539,"language":75,"meta":62,"style":62},"export default {\n    async fetch(request, env, ctx) {\n      return new Response('Hello World!');\n    },\n\n    async scheduled(event, env, ctx) {\n        const data = await fetchCopr()\n        const errorPackages = new Array()\n\n        for (const pkg of data.packages) {\n            for (const chroot of Object.values(pkg.chroots)) {\n                if (chroot.state == \"failed\") {\n                    errorPackages.push(pkg.name)\n                    break\n                }\n            }\n        }\n\n        if (errorPackages.length > 0) {\n            await notify(`COPR 以下包发生构建失败:\\n${errorPackages.join(\"\\n\")}`)\n        } else {\n            console.log(\"COPR 所有包构建成功\")\n        }\n    }\n};\n",[53,541,542,553,577,595,600,604,626,641,657,661,686,721,744,765,770,775,780,784,789,814,863,874,891,896,901],{"__ignoreMap":62},[79,543,544,547,551],{"class":81,"line":82},[79,545,546],{"class":85},"export",[79,548,550],{"class":549},"sq3v1"," default",[79,552,383],{"class":96},[79,554,555,558,560,562,565,567,570,572,575],{"class":81,"line":100},[79,556,557],{"class":85},"    async",[79,559,239],{"class":92},[79,561,159],{"class":96},[79,563,564],{"class":356},"request",[79,566,192],{"class":96},[79,568,569],{"class":356},"env",[79,571,192],{"class":96},[79,573,574],{"class":356},"ctx",[79,576,295],{"class":96},[79,578,579,582,584,587,589,592],{"class":81,"line":121},[79,580,581],{"class":85},"      return",[79,583,153],{"class":85},[79,585,586],{"class":92}," Response",[79,588,159],{"class":96},[79,590,591],{"class":114},"'Hello World!'",[79,593,594],{"class":96},");\n",[79,596,597],{"class":81,"line":136},[79,598,599],{"class":96},"    },\n",[79,601,602],{"class":81,"line":143},[79,603,140],{"emptyLinePlaceholder":139},[79,605,606,608,611,613,616,618,620,622,624],{"class":81,"line":168},[79,607,557],{"class":85},[79,609,610],{"class":92}," scheduled",[79,612,159],{"class":96},[79,614,615],{"class":356},"event",[79,617,192],{"class":96},[79,619,569],{"class":356},[79,621,192],{"class":96},[79,623,574],{"class":356},[79,625,295],{"class":96},[79,627,628,631,633,635,637,639],{"class":81,"line":201},[79,629,630],{"class":85},"        const",[79,632,254],{"class":106},[79,634,111],{"class":110},[79,636,236],{"class":85},[79,638,93],{"class":92},[79,640,268],{"class":96},[79,642,643,645,648,650,652,655],{"class":81,"line":226},[79,644,630],{"class":85},[79,646,647],{"class":106}," errorPackages",[79,649,111],{"class":110},[79,651,153],{"class":85},[79,653,654],{"class":92}," Array",[79,656,268],{"class":96},[79,658,659],{"class":81,"line":249},[79,660,140],{"emptyLinePlaceholder":139},[79,662,663,666,668,671,674,677,679,681,684],{"class":81,"line":271},[79,664,665],{"class":85},"        for",[79,667,277],{"class":96},[79,669,670],{"class":85},"const",[79,672,673],{"class":106}," pkg",[79,675,676],{"class":85}," of",[79,678,254],{"class":171},[79,680,175],{"class":96},[79,682,683],{"class":285},"packages",[79,685,295],{"class":96},[79,687,688,691,693,695,698,700,703,705,708,710,713,715,718],{"class":81,"line":298},[79,689,690],{"class":85},"            for",[79,692,277],{"class":96},[79,694,670],{"class":85},[79,696,697],{"class":106}," chroot",[79,699,676],{"class":85},[79,701,702],{"class":171}," Object",[79,704,175],{"class":96},[79,706,707],{"class":92},"values",[79,709,159],{"class":96},[79,711,712],{"class":171},"pkg",[79,714,175],{"class":96},[79,716,717],{"class":285},"chroots",[79,719,720],{"class":96},")) {\n",[79,722,723,726,728,731,733,736,739,742],{"class":81,"line":316},[79,724,725],{"class":85},"                if",[79,727,277],{"class":96},[79,729,730],{"class":171},"chroot",[79,732,175],{"class":96},[79,734,735],{"class":285},"state",[79,737,738],{"class":110}," ==",[79,740,741],{"class":114}," \"failed\"",[79,743,295],{"class":96},[79,745,746,749,751,754,756,758,760,763],{"class":81,"line":322},[79,747,748],{"class":171},"                    errorPackages",[79,750,175],{"class":96},[79,752,753],{"class":92},"push",[79,755,159],{"class":96},[79,757,712],{"class":171},[79,759,175],{"class":96},[79,761,762],{"class":285},"name",[79,764,165],{"class":96},[79,766,767],{"class":81,"line":331},[79,768,769],{"class":85},"                    break\n",[79,771,772],{"class":81,"line":507},[79,773,774],{"class":96},"                }\n",[79,776,777],{"class":81,"line":513},[79,778,779],{"class":96},"            }\n",[79,781,782],{"class":81,"line":531},[79,783,422],{"class":96},[79,785,787],{"class":81,"line":786},18,[79,788,140],{"emptyLinePlaceholder":139},[79,790,792,795,797,800,802,805,808,812],{"class":81,"line":791},19,[79,793,794],{"class":85},"        if",[79,796,277],{"class":96},[79,798,799],{"class":171},"errorPackages",[79,801,175],{"class":96},[79,803,804],{"class":285},"length",[79,806,807],{"class":110}," >",[79,809,811],{"class":810},"sAGMh"," 0",[79,813,295],{"class":96},[79,815,817,820,822,824,827,830,834,836,839,842,844,848,850,852,855,858,861],{"class":81,"line":816},20,[79,818,819],{"class":85},"            await",[79,821,351],{"class":92},[79,823,159],{"class":96},[79,825,826],{"class":114},"`COPR 以下包发生构建失败:",[79,828,829],{"class":110},"\\n",[79,831,833],{"class":832},"sAOjX","${",[79,835,799],{"class":171},[79,837,175],{"class":838},"sMj0N",[79,840,841],{"class":92},"join",[79,843,159],{"class":96},[79,845,847],{"class":846},"sWwuK","\"",[79,849,829],{"class":110},[79,851,847],{"class":846},[79,853,854],{"class":96},")",[79,856,857],{"class":832},"}",[79,859,860],{"class":114},"`",[79,862,165],{"class":96},[79,864,866,869,872],{"class":81,"line":865},21,[79,867,868],{"class":96},"        } ",[79,870,871],{"class":85},"else",[79,873,383],{"class":96},[79,875,877,880,882,884,886,889],{"class":81,"line":876},22,[79,878,879],{"class":171},"            console",[79,881,175],{"class":96},[79,883,521],{"class":92},[79,885,159],{"class":96},[79,887,888],{"class":114},"\"COPR 所有包构建成功\"",[79,890,165],{"class":96},[79,892,894],{"class":81,"line":893},23,[79,895,422],{"class":96},[79,897,899],{"class":81,"line":898},24,[79,900,319],{"class":96},[79,902,904],{"class":81,"line":903},25,[79,905,906],{"class":96},"};\n",[13,908,909],{},"随后在 Cloudflare Workers 的 Settings 部分设置好 Cron 表达式即可，我这里选择在每小时的 55 分进行一次检测，这样下来一天只会消耗 24 次 workers 次数，简直毫无压力。",[13,911,912],{},[60,913],{"alt":62,"src":914},"https://static.031130.xyz/uploads/2025/02/23/c38edfd637934.webp",[13,916,917,921,922,925],{},[918,919,920],"strong",{},"缺点:"," 我懒得使用持久化数据库记录软件包构建的成功状态，这会导致出现一个包构建失败后，每隔 1 小时都会有一条提醒，",[16,923,924],{},"什么夺命连环 call","。我目前不想修复这个问题，要不然还是降低 cron 的触发频率好了。",[927,928,929],"style",{},"html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sNmU0, html code.shiki .sNmU0{--shiki-default:#986801;--shiki-dark:#E5C07B}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .s7GmK, html code.shiki .s7GmK{--shiki-default:#383A42;--shiki-dark:#E5C07B}html pre.shiki code .s2QsP, html code.shiki .s2QsP{--shiki-default:#E45649;--shiki-dark:#E5C07B}html pre.shiki code .sz0mV, html code.shiki .sz0mV{--shiki-default:#383A42;--shiki-dark:#E06C75}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s8iYz, html code.shiki .s8iYz{--shiki-default:#383A42;--shiki-default-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic}html pre.shiki code .st7oF, html code.shiki .st7oF{--shiki-default:#0184BC;--shiki-dark:#ABB2BF}html pre.shiki code .sq3v1, html code.shiki .sq3v1{--shiki-default:#E45649;--shiki-dark:#C678DD}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sAOjX, html code.shiki .sAOjX{--shiki-default:#CA1243;--shiki-dark:#C678DD}html pre.shiki code .sMj0N, html code.shiki .sMj0N{--shiki-default:#50A14F;--shiki-dark:#ABB2BF}html pre.shiki code .sWwuK, html code.shiki .sWwuK{--shiki-default:#CA1243;--shiki-dark:#98C379}",{"title":62,"searchDepth":100,"depth":100,"links":931},[],"2025-02-23 12:12:53","md",{},"/2025/02/23/monitor-copr-build-state-with-cloudflare-workers","---\ntitle: 使用 Cloudflare Workers 监控 Fedora Copr 构建状态\ndate: 2025-02-23 12:12:53\nsticky:\ntags:\n- JavaScript\n- Cloudflare\n- Fedora\n---\n\n> ~~确信，是 cloudflare workers 用上瘾了~~\n\n在[「使用 Github Action 更新用于 rpm 打包的 spec 文件」](/2024/04/29/update-a-rpm-spec-by-github-action/)一文中，我利用 Github Action 实现了自动化的 spec 版本号更新，配合 Fedora Copr 的 webhook 就可以实现 Copr 软件包更新的自动化构建。看似很完美，但缺少了一个构建状态的监控机制，这导致出现构建错误的时候我不能及时得到通知（无论构建错误是 spec 本身的问题或者是构建时的网络环境问题）。\n\n[西木野羰基](https://yanqiyu.info) 提出 [notifications.fedoraproject.org](https://notifications.fedoraproject.org/) 可以配置通知，Filters 的 Applications 选项中有 copr，但很可惜，实测没有效果。这里的通知配置的似乎只是邮件的过滤规则——如果 copr 本来就没打算构建失败的时候给你发邮件，那即使建立了过滤规则，依然是不可能收到邮件的。\n\n不过好在 Fedora Copr 本身有非常完备的 [api 文档](https://copr.fedorainfracloud.org/api_3/docs)，`/monitor` 这个 API 能用来获取软件包最新的构建情况。\n\n![](https://static.031130.xyz/uploads/2025/02/23/637811d2d85f6.webp)\n\n因此，我们就可以通过 Cloudflare 的 cronjob 定时请求这个接口，查询是否有软件包构建失败。\n\n先来编写打请求的部分\n\n```javascript\nasync function fetchCopr() {\n    const ownername = \"zhullyb\";\n    const projectname = \"v2rayA\";\n\n    const url = new URL(\"https://copr.fedorainfracloud.org/api_3/monitor\")\n    url.searchParams.set(\"ownername\", ownername)\n    url.searchParams.set(\"projectname\", projectname)\n    const response = await fetch(url)\n    const data = await response.json()\n    if (data.output !== \"ok\") {\n        throw new Error(\"Failed to fetch COPR data\")\n    }\n    return data\n}\n```\n\n随后编写通知部分，我这里采用的是飞书的 webhook 机器人\n\n```javascript\nasync function notify(text) {\n    const webhook = \"https://open.feishu.cn/open-apis/bot/v2/hook/ffffffff-ffff-ffff-ffff-ffffffffffff\"\n    const body = {\n        msg_type: \"text\",\n        content: {\n            text: text\n        }\n    }\n    const response = await fetch(webhook, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    })\n    console.log(response)\n}\n```\n\n最后就是 cronjob 的调用部分和构建状态解析部分\n\n```javascript\nexport default {\n    async fetch(request, env, ctx) {\n      return new Response('Hello World!');\n    },\n\n    async scheduled(event, env, ctx) {\n        const data = await fetchCopr()\n        const errorPackages = new Array()\n\n        for (const pkg of data.packages) {\n            for (const chroot of Object.values(pkg.chroots)) {\n                if (chroot.state == \"failed\") {\n                    errorPackages.push(pkg.name)\n                    break\n                }\n            }\n        }\n\n        if (errorPackages.length > 0) {\n            await notify(`COPR 以下包发生构建失败:\\n${errorPackages.join(\"\\n\")}`)\n        } else {\n            console.log(\"COPR 所有包构建成功\")\n        }\n    }\n};\n```\n\n随后在 Cloudflare Workers 的 Settings 部分设置好 Cron 表达式即可，我这里选择在每小时的 55 分进行一次检测，这样下来一天只会消耗 24 次 workers 次数，简直毫无压力。\n\n![](https://static.031130.xyz/uploads/2025/02/23/c38edfd637934.webp)\n\n**缺点:** 我懒得使用持久化数据库记录软件包构建的成功状态，这会导致出现一个包构建失败后，每隔 1 小时都会有一条提醒，~~什么夺命连环 call~~。我目前不想修复这个问题，要不然还是降低 cron 的触发频率好了。\n",{"title":5,"description":62},"posts/monitor-copr-build-state-with-cloudflare-workers",false,[941,942,943],"JavaScript","Cloudflare","Fedora","M0SNTl0dwi11HLPMg1Ai_JH6ktT93qwOpjHVBycvD0A",[946,951],{"title":947,"path":948,"stem":949,"date":950,"children":-1},"Cudy TR3000 吃鹅(daed)记","/2025/02/28/cudy-tr3000-daed-install-record","posts/cudy-tr3000-daed-install-record","2025-02-28 21:18:34",{"title":952,"path":953,"stem":954,"date":955,"children":-1},"基于 Cloudflare Workers 实现的在线服务状态检测告警系统","/2025/01/18/service-status-monitor-based-on-cloudflare-workers","posts/service-status-monitor-based-on-cloudflare-workers","2025-01-18 02:00:08",1761740493437]