[{"data":1,"prerenderedAt":294},["ShallowReactive",2],{"post-2025-05-31-el-image-and-el-table-why-the-fight-and-what-is-a-stacking-context":3,"surround-2025-05-31-el-image-and-el-table-why-the-fight-and-what-is-a-stacking-context":282,"randomIndex/2025/05/31/el-image-and-el-table-why-the-fight-and-what-is-a-stacking-context/":293},{"id":4,"title":5,"body":6,"date":267,"description":12,"extension":268,"meta":269,"navigation":35,"path":270,"rawbody":271,"seo":272,"stem":273,"sticky":274,"tags":275,"__hash__":281},"posts/posts/el-image-and-el-table-why-the-fight-and-what-is-a-stacking-context.md","el-image 和 el-table 怎么就打架了？Stacking Context 是什么？",{"type":7,"value":8,"toc":258},"minimark",[9,13,20,30,37,40,46,49,54,105,108,113,116,119,134,137,141,144,175,179,184,187,190,193,196,207,214,217,254],[10,11,12],"p",{},"这是精弘内部的图床开发时遇到的事情，大一的小朋友反馈说 el-image 和 el-table 打架了。",[10,14,15],{},[16,17],"img",{"alt":18,"src":19},"截图","https://static.031130.xyz/uploads/2025/05/31/c6674f6f13955.webp",[10,21,22,29],{},[23,24,28],"a",{"href":25,"rel":26},"https://static.031130.xyz/demo/el-image-el-table-conflict.html",[27],"nofollow","demo"," 的 iframe 引入",[31,32],"iframe",{"src":25,"width":33,"height":34,"allowFullScreen":35,"loading":36},"100%",500,true,"lazy",[10,38,39],{},"看到后面的表格透出 el-image 的预览层，我的第一反应是叫小朋友去检查 z-index 是否正确，el-image 的 mask 遮罩的 z-index 是否大于表格。",[10,41,42],{},[16,43],{"alt":44,"src":45},"","https://static.031130.xyz/uploads/2025/05/31/1c20b4ea0b37e.webp",[10,47,48],{},"经过我本地调试，发现 z-index 的设置确实没问题，但后面的元素为什么会透出来？谷歌搜索一番，找到了这篇文章",[10,50,51],{},[16,52],{"alt":44,"src":53},"https://static.031130.xyz/uploads/2025/05/31/99845899e3524.webp",[55,56,57,60],"blockquote",{},[10,58,59],{},"给 el-table 加一行如下代码即可",[61,62,66],"pre",{"className":63,"code":64,"language":65,"meta":44,"style":44},"language-css shiki shiki-themes one-light one-dark-pro",".el-table__cell {\n    position: static !important;\n}\n","css",[67,68,69,82,99],"code",{"__ignoreMap":44},[70,71,74,78],"span",{"class":72,"line":73},"line",1,[70,75,77],{"class":76},"sAGMh",".el-table__cell",[70,79,81],{"class":80},"s5ixo"," {\n",[70,83,85,88,92,96],{"class":72,"line":84},2,[70,86,87],{"class":80},"    position: ",[70,89,91],{"class":90},"sYebD","static",[70,93,95],{"class":94},"sLKXg"," !important",[70,97,98],{"class":80},";\n",[70,100,102],{"class":72,"line":101},3,[70,103,104],{"class":80},"}\n",[10,106,107],{},"经本地调试确认，这一方案确实能解决问题，但为什么呢？这就涉及到 Stacking Context （层叠上下文）了。",[109,110,112],"h2",{"id":111},"stacking-context层叠上下文究竟是什么","Stacking Context（层叠上下文）究竟是什么？",[10,114,115],{},"简单来说，Stacking Context 可以被类比成画布。在同一块画布上，z-index 值越高的元素就处于越上方，会覆盖掉 z-index 较低的元素，这也是为什么我最开始让检查 z-index 的设置是否有问题。但问题出在 Stacking Context 也是有上下顺序之分的。",[10,117,118],{},"现在假设我们有 A、B 两块画布，在 A 上有一个设置了 z-index 为 1145141919810 的元素。那这个元素具备非常高的优先级，理应出现在浏览器窗口的最上方。但如果 B 画布的优先级高于 A 画布，那么 B 元素上的所有元素都会优先显示（当了躺赢狗）。那么画布靠什么来决定优先级呢？",[120,121,122,129],"ul",{},[123,124,125],"li",{},[126,127,128],"strong",{},"处于同级的 Stacking Context 之间靠 z-index 值来区分优先级",[123,130,131],{},[126,132,133],{},"对于 z-index 值相同的 Stacking Context，在 html 文档中位置靠后的元素拥有更高的优先级",[10,135,136],{},"第二条规则也能解释为什么在上面的 demo 中，只有在表格中位置排在图片元素后面的元素出现了透出来的情况。",[109,138,140],{"id":139},"所以为什么-el-image-和-el-table-打架了","所以为什么 el-image 和 el-table 打架了？",[10,142,143],{},"这次的冲突主要是下面两个因素引起的",[145,146,147,164],"ol",{},[123,148,149,150,153,154,157,161,163],{},"el-table 给每个 cell 都设置了 ",[67,151,152],{},"position: relative"," 的 css 属性，而 position 被设为 relative 时，当前元素就会生成一个 Stacking Context。",[155,156],"br",{},[16,158],{"alt":159,"src":160},"image-20250531013029154","https://static.031130.xyz/uploads/2025/05/31/9df43b865b3c6.webp",[155,162],{},"所以我们这么一个有十个格子的表格，其实就生成了十个画布。而这其中每个画布 z-index 都为 1。根据刚才的规则，在图片格子后面的那些格子对应的 html 代码片段在整体的 html 文档中更靠后，所以他们的优先级都高于图片格子。",[123,165,166,167,169,172,174],{},"el-image 的预览功能所展开的遮罩层处于 el-image 标签内部",[155,168],{},[16,170],{"alt":44,"src":171},"https://static.031130.xyz/uploads/2025/05/31/f18a2b54afd63.webp",[155,173],{},"上图中橙色部分是 el-image 在预览时提供的遮罩，可以看到 element-plus 组件的 image 预览的默认行为是将预览时所需要的遮罩层直接放在 \u003Cel-image> \u003C/el-image> 标签内部，这导致 el-image 的遮罩层被困在一个低优先级的 Stacking Context 中，后面的格子里的内容就是能凭借高优先级透过来。",[109,176,178],{"id":177},"所以解决方案是什么","所以解决方案是什么？",[180,181,183],"h3",{"id":182},"更改-position-值在这里确实是可行的","更改 position 值在这里确实是可行的",[10,185,186],{},"上面我谷歌搜到的将 el-table 中 cell 的 position 值强制设为 static 确实是有效的，因为 static 不会创建新的 Stacking Context，这样就不会有现在的问题。",[180,188,189],{"id":189},"将需要出现在最顶层的代码放置在优先级最大的位置是更常见的方案",[10,191,192],{},"但别的组件库在处理这个需求时，一般会将预览时提供的遮罩的 html 代码片段直接插入到 body 标签内部的最尾部，并设置一个相对比较大的 z-index 值，以确保这个遮罩层能够获得最高的优先级，以此能出现在屏幕的最上方。（像一些 dialog 对话框、popover 悬浮框也都是这个原理）。",[10,194,195],{},"事实上，element-plus 组件库也提供了这个功能",[55,197,198],{},[10,199,200,203,204],{},[126,201,202],{},"preview-teleported:"," image-viewer 是否插入至 body 元素上。嵌套的父元素属性会发生修改时应该将此属性设置为 ",[67,205,206],{},"true",[10,208,209,210,213],{},"所以在使用 el-image 时传入一个 ",[67,211,212],{},":preview-teleported=\"true\""," 是一个更普适的方案，因为我们并不能确保 el-image 的父元素除了 el-table 的 cell 以外还有什么其他的父元素会创建新的 Stacking Context。",[109,215,216],{"id":216},"参见",[120,218,219,226,233,240,247],{},[123,220,221],{},[23,222,225],{"href":223,"rel":224},"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_positioned_layout/Stacking_context",[27],"层叠上下文 - CSS：层叠样式表 | MDN",[123,227,228],{},[23,229,232],{"href":230,"rel":231},"https://juejin.cn/post/6844903667175260174",[27],"彻底搞懂CSS层叠上下文、层叠等级、层叠顺序、z-index最近，在项目中遇到一个关于CSS中元素z-index属性的问 - 掘金",[123,234,235],{},[23,236,239],{"href":237,"rel":238},"https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/",[27],"深入理解CSS中的层叠上下文和层叠顺序 «  张鑫旭-鑫空间-鑫生活",[123,241,242],{},[23,243,246],{"href":244,"rel":245},"https://element-plus.org/zh-CN/component/image.html",[27],"Image 图片 | Element Plus",[123,248,249],{},[23,250,253],{"href":251,"rel":252},"https://blog.csdn.net/qq_61402485/article/details/131202117",[27],"element ui e-image 和e-table一起使用显示问题_el-table el-image-CSDN博客",[255,256,257],"style",{},"html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sYebD, html code.shiki .sYebD{--shiki-default:#383A42;--shiki-dark:#D19A66}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":44,"searchDepth":84,"depth":84,"links":259},[260,261,262,266],{"id":111,"depth":84,"text":112},{"id":139,"depth":84,"text":140},{"id":177,"depth":84,"text":178,"children":263},[264,265],{"id":182,"depth":101,"text":183},{"id":189,"depth":101,"text":189},{"id":216,"depth":84,"text":216},"2025-05-31 00:29:40","md",{},"/2025/05/31/el-image-and-el-table-why-the-fight-and-what-is-a-stacking-context","---\ntitle: el-image 和 el-table 怎么就打架了？Stacking Context 是什么？\ndate: 2025-05-31 00:29:40\nsticky:\ntags:\n- Vue.js\n- JavaScript\n- CSS\n- HTML\n- Web\n---\n\n这是精弘内部的图床开发时遇到的事情，大一的小朋友反馈说 el-image 和 el-table 打架了。\n\n![截图](https://static.031130.xyz/uploads/2025/05/31/c6674f6f13955.webp)\n\n[demo](https://static.031130.xyz/demo/el-image-el-table-conflict.html) 的 iframe 引入\n\n\u003Ciframe src=\"https://static.031130.xyz/demo/el-image-el-table-conflict.html\" width=\"100%\" height=\"500\" allowfullscreen loading=\"lazy\">\u003C/iframe>\n\n看到后面的表格透出 el-image 的预览层，我的第一反应是叫小朋友去检查 z-index 是否正确，el-image 的 mask 遮罩的 z-index 是否大于表格。\n\n![](https://static.031130.xyz/uploads/2025/05/31/1c20b4ea0b37e.webp)\n\n经过我本地调试，发现 z-index 的设置确实没问题，但后面的元素为什么会透出来？谷歌搜索一番，找到了这篇文章\n\n![](https://static.031130.xyz/uploads/2025/05/31/99845899e3524.webp)\n\n> 给 el-table 加一行如下代码即可\n>\n> ```css\n> .el-table__cell {\n>     position: static !important;\n> }\n> ```\n\n经本地调试确认，这一方案确实能解决问题，但为什么呢？这就涉及到 Stacking Context （层叠上下文）了。\n\n## Stacking Context（层叠上下文）究竟是什么？\n\n简单来说，Stacking Context 可以被类比成画布。在同一块画布上，z-index 值越高的元素就处于越上方，会覆盖掉 z-index 较低的元素，这也是为什么我最开始让检查 z-index 的设置是否有问题。但问题出在 Stacking Context 也是有上下顺序之分的。\n\n现在假设我们有 A、B 两块画布，在 A 上有一个设置了 z-index 为 1145141919810 的元素。那这个元素具备非常高的优先级，理应出现在浏览器窗口的最上方。但如果 B 画布的优先级高于 A 画布，那么 B 元素上的所有元素都会优先显示（当了躺赢狗）。那么画布靠什么来决定优先级呢？\n\n- **处于同级的 Stacking Context 之间靠 z-index 值来区分优先级**\n- **对于 z-index 值相同的 Stacking Context，在 html 文档中位置靠后的元素拥有更高的优先级**\n\n第二条规则也能解释为什么在上面的 demo 中，只有在表格中位置排在图片元素后面的元素出现了透出来的情况。\n\n## 所以为什么 el-image 和 el-table 打架了？\n\n这次的冲突主要是下面两个因素引起的\n\n1. el-table 给每个 cell 都设置了 `position: relative` 的 css 属性，而 position 被设为 relative 时，当前元素就会生成一个 Stacking Context。\n\n   ![image-20250531013029154](https://static.031130.xyz/uploads/2025/05/31/9df43b865b3c6.webp)\n\n   所以我们这么一个有十个格子的表格，其实就生成了十个画布。而这其中每个画布 z-index 都为 1。根据刚才的规则，在图片格子后面的那些格子对应的 html 代码片段在整体的 html 文档中更靠后，所以他们的优先级都高于图片格子。\n\n2. el-image 的预览功能所展开的遮罩层处于 el-image 标签内部\n\n   ![](https://static.031130.xyz/uploads/2025/05/31/f18a2b54afd63.webp)\n\n   上图中橙色部分是 el-image 在预览时提供的遮罩，可以看到 element-plus 组件的 image 预览的默认行为是将预览时所需要的遮罩层直接放在 \\\u003Cel-image> \\\u003C/el-image> 标签内部，这导致 el-image 的遮罩层被困在一个低优先级的 Stacking Context 中，后面的格子里的内容就是能凭借高优先级透过来。\n\n## 所以解决方案是什么？\n\n### 更改 position 值在这里确实是可行的\n\n上面我谷歌搜到的将 el-table 中 cell 的 position 值强制设为 static 确实是有效的，因为 static 不会创建新的 Stacking Context，这样就不会有现在的问题。\n\n### 将需要出现在最顶层的代码放置在优先级最大的位置是更常见的方案\n\n但别的组件库在处理这个需求时，一般会将预览时提供的遮罩的 html 代码片段直接插入到 body 标签内部的最尾部，并设置一个相对比较大的 z-index 值，以确保这个遮罩层能够获得最高的优先级，以此能出现在屏幕的最上方。（像一些 dialog 对话框、popover 悬浮框也都是这个原理）。\n\n事实上，element-plus 组件库也提供了这个功能\n\n> **preview-teleported:** image-viewer 是否插入至 body 元素上。嵌套的父元素属性会发生修改时应该将此属性设置为 `true`\n\n所以在使用 el-image 时传入一个 `:preview-teleported=\"true\"` 是一个更普适的方案，因为我们并不能确保 el-image 的父元素除了 el-table 的 cell 以外还有什么其他的父元素会创建新的 Stacking Context。\n\n## 参见\n\n- [层叠上下文 - CSS：层叠样式表 | MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_positioned_layout/Stacking_context)\n- [彻底搞懂CSS层叠上下文、层叠等级、层叠顺序、z-index最近，在项目中遇到一个关于CSS中元素z-index属性的问 - 掘金](https://juejin.cn/post/6844903667175260174)\n- [深入理解CSS中的层叠上下文和层叠顺序 «  张鑫旭-鑫空间-鑫生活](https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/)\n- [Image 图片 | Element Plus](https://element-plus.org/zh-CN/component/image.html)\n- [element ui e-image 和e-table一起使用显示问题_el-table el-image-CSDN博客](https://blog.csdn.net/qq_61402485/article/details/131202117)\n",{"title":5,"description":12},"posts/el-image-and-el-table-why-the-fight-and-what-is-a-stacking-context",false,[276,277,278,279,280],"Vue.js","JavaScript","CSS","HTML","Web","3q4bmkk2i6Iv15FomRMkock0rifb_7hJ_TsNvNhWIOI",[283,288],{"title":284,"path":285,"stem":286,"date":287,"children":-1},"2025 年，如何为 web 页面上展示的视频选择合适的压缩算法？","/2025/06/02/choosing-the-right-video-compression-format-for-web-in-2025","posts/choosing-the-right-video-compression-format-for-web-in-2025","2025-06-02 20:59:10",{"title":289,"path":290,"stem":291,"date":292,"children":-1},"2025年，前端如何使用 JS 将文本复制到剪切板？","/2025/04/21/how-we-copy-text-to-clipboard-with-js-in-2025","posts/how-we-copy-text-to-clipboard-with-js-in-2025","2025-04-21 19:48:05",8,1761884673261]