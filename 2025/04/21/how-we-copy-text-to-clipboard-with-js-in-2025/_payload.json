[{"data":1,"prerenderedAt":1579},["ShallowReactive",2],{"post-2025-04-21-how-we-copy-text-to-clipboard-with-js-in-2025":3,"surround-2025-04-21-how-we-copy-text-to-clipboard-with-js-in-2025":1568,"randomIndex/2025/04/21/how-we-copy-text-to-clipboard-with-js-in-2025":176},{"id":4,"title":5,"body":6,"date":1557,"description":58,"extension":1558,"meta":1559,"navigation":75,"path":1560,"rawbody":1561,"seo":1562,"stem":1563,"sticky":1564,"tags":1565,"__hash__":1567},"posts/posts/how-we-copy-text-to-clipboard-with-js-in-2025.md","2025年，前端如何使用 JS 将文本复制到剪切板？",{"type":7,"value":8,"toc":1540},"minimark",[9,13,23,34,49,52,249,273,276,284,287,292,316,337,343,354,365,585,598,601,610,617,620,623,628,631,652,656,659,683,688,691,694,702,705,718,721,838,841,844,851,863,866,903,906,914,929,1136,1140,1143,1151,1158,1387,1395,1408,1416,1422,1430,1440,1443,1446,1449,1452,1455,1536],[10,11,12],"h2",{"id":12},"基础原理",[14,15,16,17],"p",{},"如果你尝试在搜索引擎上检索本文的标题，你搜到的文章大概会让你使用下面两个 API。",[18,19,22],"span",{"className":20},[21],"heimu","我希望你用的搜索引擎不至于像某度一样灵车到 2025 年还在让你使用基于 Flash 的 ZeroClipboard 方案",[24,25,27],"h3",{"id":26},"documentexeccommand",[28,29,33],"a",{"href":30,"rel":31},"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand",[32],"nofollow","document.execCommand",[14,35,36,37,42,43,48],{},"2012 年不止有世界末日，还有 IE 10。随着 IE 10 在当年 9 月 4 日发布，execCommand 家族迎来了两个新的成员—— copy/cut 命令（此说法来自 ",[28,38,41],{"href":39,"rel":40},"https://developer.chrome.com/blog/cut-and-copy-commands",[32],"Chrome 的博客","，而 ",[28,44,47],{"href":45,"rel":46},"https://web.archive.org/web/20160315042044/https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand",[32],"MDN 认为 IE 9 就已经支持了","）。三年之后，随着 Google Chrome 在 2015 年 4 月 14 日的发布的 42 版本对 execCommand 的 copy/cut 跟进，越来越多的浏览器厂商开始在自家的浏览器中跟进这个实现标准。最终在 2016 年 9 月 13 日发布的 Safari 10 on IOS 后，WEB 开发者们总算获得了历史上第一个非 Flash 实现的 js 复制到剪切板的方案。",[14,50,51],{},"当 document.execCommand 的第一个参数为 copy 时，可以将用户选中的文本复制到剪切板。基于这个 API 实现，很快便有人研究出了当今 web 下最常见的 js 实现——先创建一个不可见的 dom，用 js 操作模拟用户选中文本，并调用 execCommand('copy') 将文本复制到用户的剪切板。大致的代码实现如下：",[53,54,59],"pre",{"className":55,"code":56,"language":57,"meta":58,"style":58},"language-javascript shiki shiki-themes github-light github-dark","// 来自「JS复制文字到剪贴板的坑及完整方案。」一文，本文结尾有跳转链接\n\nconst textArea = document.createElement(\"textArea\");\ntextArea.value = val;\ntextArea.style.width = 0;\ntextArea.style.position = \"fixed\";\ntextArea.style.left = \"-999px\";\ntextArea.style.top = \"10px\";\ntextArea.setAttribute(\"readonly\", \"readonly\");\ndocument.body.appendChild(textArea);\n\ntextArea.select();\ndocument.execCommand(\"copy\");\ndocument.body.removeChild(textArea);\n","javascript","",[60,61,62,70,77,109,121,135,148,161,174,195,207,212,223,239],"code",{"__ignoreMap":58},[18,63,66],{"class":64,"line":65},"line",1,[18,67,69],{"class":68},"sJ8bj","// 来自「JS复制文字到剪贴板的坑及完整方案。」一文，本文结尾有跳转链接\n",[18,71,73],{"class":64,"line":72},2,[18,74,76],{"emptyLinePlaceholder":75},true,"\n",[18,78,80,84,88,91,95,99,102,106],{"class":64,"line":79},3,[18,81,83],{"class":82},"szBVR","const",[18,85,87],{"class":86},"sj4cs"," textArea",[18,89,90],{"class":82}," =",[18,92,94],{"class":93},"sVt8B"," document.",[18,96,98],{"class":97},"sScJk","createElement",[18,100,101],{"class":93},"(",[18,103,105],{"class":104},"sZZnC","\"textArea\"",[18,107,108],{"class":93},");\n",[18,110,112,115,118],{"class":64,"line":111},4,[18,113,114],{"class":93},"textArea.value ",[18,116,117],{"class":82},"=",[18,119,120],{"class":93}," val;\n",[18,122,124,127,129,132],{"class":64,"line":123},5,[18,125,126],{"class":93},"textArea.style.width ",[18,128,117],{"class":82},[18,130,131],{"class":86}," 0",[18,133,134],{"class":93},";\n",[18,136,138,141,143,146],{"class":64,"line":137},6,[18,139,140],{"class":93},"textArea.style.position ",[18,142,117],{"class":82},[18,144,145],{"class":104}," \"fixed\"",[18,147,134],{"class":93},[18,149,151,154,156,159],{"class":64,"line":150},7,[18,152,153],{"class":93},"textArea.style.left ",[18,155,117],{"class":82},[18,157,158],{"class":104}," \"-999px\"",[18,160,134],{"class":93},[18,162,164,167,169,172],{"class":64,"line":163},8,[18,165,166],{"class":93},"textArea.style.top ",[18,168,117],{"class":82},[18,170,171],{"class":104}," \"10px\"",[18,173,134],{"class":93},[18,175,177,180,183,185,188,191,193],{"class":64,"line":176},9,[18,178,179],{"class":93},"textArea.",[18,181,182],{"class":97},"setAttribute",[18,184,101],{"class":93},[18,186,187],{"class":104},"\"readonly\"",[18,189,190],{"class":93},", ",[18,192,187],{"class":104},[18,194,108],{"class":93},[18,196,198,201,204],{"class":64,"line":197},10,[18,199,200],{"class":93},"document.body.",[18,202,203],{"class":97},"appendChild",[18,205,206],{"class":93},"(textArea);\n",[18,208,210],{"class":64,"line":209},11,[18,211,76],{"emptyLinePlaceholder":75},[18,213,215,217,220],{"class":64,"line":214},12,[18,216,179],{"class":93},[18,218,219],{"class":97},"select",[18,221,222],{"class":93},"();\n",[18,224,226,229,232,234,237],{"class":64,"line":225},13,[18,227,228],{"class":93},"document.",[18,230,231],{"class":97},"execCommand",[18,233,101],{"class":93},[18,235,236],{"class":104},"\"copy\"",[18,238,108],{"class":93},[18,240,242,244,247],{"class":64,"line":241},14,[18,243,200],{"class":93},[18,245,246],{"class":97},"removeChild",[18,248,206],{"class":93},[14,250,251,252,256,257,262,263,268,269,272],{},"尽管",[253,254,255],"strong",{},"这个 API 早已被 w3c 弃用","，在 MDN 被标注为 Deprecated，但这仍然是市面上最常见的方案。在编写本文的时候，我扒了扒 MDN 的英文原始页面在 archive.org 的存档及其在 Github 的变更记录，这个 API 在 ",[28,258,261],{"href":259,"rel":260},"https://web.archive.org/web/20200221235207/https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand",[32],"2020 年 1~2 月","被首次标记为 Obsolete（过时的），在 ",[28,264,267],{"href":265,"rel":266},"https://github.com/mdn/content/commit/0c31e2bc4d6601a079bc57521e79529539c8cf68#diff-85ef9d1e72565f0ae2ffd8199d10b34c11c615aec5d116057ac2a33c21cc072f",[32],"2021 年 1 月","被首次标记为 Deprecated（已弃用），并附上了红色 Section Background Color 提示开发者该 API 可能",[253,270,271],{},"随时无法正常工作","。但截至本文发布，所有的常用浏览器都保留着对该 API 的兼容，起码在 copy 命令下是这样的。",[14,274,275],{},"这个 API 被广泛应用在了太多站点，以至于移除对该 API 的支持将会导致大量的站点异常，我想各家浏览器内核在短期内恐怕都没有动力以丢失兼容性为代价去移除这个 API，这也意味着这个创建一个不可见的 dom 代替用户选中文本并执行 execCommand 复制到用户剪切板的（看似奇葩的）曲线救国方案已然在前端开发的历史上留下了浓墨重彩的一笔。",[24,277,279],{"id":278},"clipboardwritetext",[28,280,283],{"href":281,"rel":282},"https://developer.mozilla.org/zh-CN/docs/Web/API/Clipboard/writeText",[32],"Clipboard.writeText()",[14,285,286],{},"随着原生 JS 一步步被增强，开发者们总算补上了 Clipboard 这一块的拼图。2018 年 4 月 17 日，Chrome 66 率先迈出了这一步；同年 10 月 23 日，Firefox 跟进了 ClipBoard API 的实现。最终在 2020 年 3 月 24 日，随着 Apple 自家 Safari 13.4 的姗姗来迟，前端开发者门总算喘了口气，再一次得到了一个主流浏览器通用的复制方案。",[14,288,289],{},[253,290,291],{},"那么 execCommand 明明已经实现了纯 js 实现的复制文本到剪切板了，为什么我们还需要 Clipboard API ？或者说，这个特意去实现的 Clipboard API 到底有什么优势？",[293,294,295,299,302,313],"ol",{},[296,297,298],"li",{},"传统的 execCommand 方案在使用的时候通常需要创建一个临时的不可见的 DOM，放入文本、用 JS 选中文本、执行 copy 命令。我们暂且不说这种 hacky 的方式在代码编写时是多么不优雅，但一个使用 JS 去选中文本这个操作就会修改用户当前的文本选择状态，在某些时候导致一些用户体验的下降。",[296,300,301],{},"Clipboard API 是异步的，这意味着其在复制大量文本时不会阻塞主线程。",[296,303,304,305,308,309,312],{},"Clipboard API 提供了更多的能力，比如 ",[60,306,307],{},"write()"," 和 ",[60,310,311],{},"read()"," 允许对剪切板读写更复杂的数据，比如富文本或图片。",[296,314,315],{},"Clipboard API 具有更现代、更明确的权限控制—— write 操作需要由用户的主动操作来调用，read 操作则需要用户在浏览器 UI 上明确授予权限。这些权限控制给予了用户更大的控制权，因此，当 execCommand 退出历史的舞台后，WEB 的安全性将得到进一步提升。",[14,317,318,319,321,322,325,326,329,330,332,333,336],{},"不过在现阶段，",[60,320,283],{}," 未必就能解决所有的问题。抛开旧版浏览器的兼容性问题不谈，",[60,323,324],{},"navigator.clipboard"," ",[253,327,328],{},"仅在通过 https 访问的页面中可用","（或是 localhost），如果你的项目部署在局域网，你试图通过 192.18.1.x 的 ip + port 直接访问，那么 ",[60,331,324],{}," 将会是 ",[60,334,335],{},"undefined"," 状态。",[14,338,339],{},[340,341],"img",{"alt":58,"src":342},"https://static.031130.xyz/uploads/2025/04/19/3437b1c022853.webp",[14,344,345,346,349,350,353],{},"除此之外，",[253,347,348],{},"安卓原生的 Webview"," 还有因为 Permissions API 没实现而",[253,351,352],{},"用不了"," Clipboard API 的问题。",[14,355,356,357,360,361,364],{},"基于以上原因，很多网站现在都会优先尝试使用 ",[60,358,359],{},"navigator.clipboard.writeText()","，失败后再转去使用 ",[60,362,363],{},"execCommand('copy')","。大致的代码实现如下：",[53,366,368],{"className":55,"code":367,"language":57,"meta":58,"style":58},"// 来自「JS复制文字到剪贴板的坑及完整方案。」一文，本文结尾有跳转链接\n\nconst copyText = async val => {\n  if (navigator.clipboard && navigator.permissions) {\n    await navigator.clipboard.writeText(val);\n  } else {\n    const textArea = document.createElement(\"textArea\");\n    textArea.value = val;\n    textArea.style.width = 0;\n    textArea.style.position = \"fixed\";\n    textArea.style.left = \"-999px\";\n    textArea.style.top = \"10px\";\n    textArea.setAttribute(\"readonly\", \"readonly\");\n    document.body.appendChild(textArea);\n\n    textArea.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(textArea);\n  }\n};\n",[60,369,370,374,378,400,414,428,438,457,466,477,488,499,510,527,536,541,550,564,573,579],{"__ignoreMap":58},[18,371,372],{"class":64,"line":65},[18,373,69],{"class":68},[18,375,376],{"class":64,"line":72},[18,377,76],{"emptyLinePlaceholder":75},[18,379,380,382,385,387,390,394,397],{"class":64,"line":79},[18,381,83],{"class":82},[18,383,384],{"class":97}," copyText",[18,386,90],{"class":82},[18,388,389],{"class":82}," async",[18,391,393],{"class":392},"s4XuR"," val",[18,395,396],{"class":82}," =>",[18,398,399],{"class":93}," {\n",[18,401,402,405,408,411],{"class":64,"line":111},[18,403,404],{"class":82},"  if",[18,406,407],{"class":93}," (navigator.clipboard ",[18,409,410],{"class":82},"&&",[18,412,413],{"class":93}," navigator.permissions) {\n",[18,415,416,419,422,425],{"class":64,"line":123},[18,417,418],{"class":82},"    await",[18,420,421],{"class":93}," navigator.clipboard.",[18,423,424],{"class":97},"writeText",[18,426,427],{"class":93},"(val);\n",[18,429,430,433,436],{"class":64,"line":137},[18,431,432],{"class":93},"  } ",[18,434,435],{"class":82},"else",[18,437,399],{"class":93},[18,439,440,443,445,447,449,451,453,455],{"class":64,"line":150},[18,441,442],{"class":82},"    const",[18,444,87],{"class":86},[18,446,90],{"class":82},[18,448,94],{"class":93},[18,450,98],{"class":97},[18,452,101],{"class":93},[18,454,105],{"class":104},[18,456,108],{"class":93},[18,458,459,462,464],{"class":64,"line":163},[18,460,461],{"class":93},"    textArea.value ",[18,463,117],{"class":82},[18,465,120],{"class":93},[18,467,468,471,473,475],{"class":64,"line":176},[18,469,470],{"class":93},"    textArea.style.width ",[18,472,117],{"class":82},[18,474,131],{"class":86},[18,476,134],{"class":93},[18,478,479,482,484,486],{"class":64,"line":197},[18,480,481],{"class":93},"    textArea.style.position ",[18,483,117],{"class":82},[18,485,145],{"class":104},[18,487,134],{"class":93},[18,489,490,493,495,497],{"class":64,"line":209},[18,491,492],{"class":93},"    textArea.style.left ",[18,494,117],{"class":82},[18,496,158],{"class":104},[18,498,134],{"class":93},[18,500,501,504,506,508],{"class":64,"line":214},[18,502,503],{"class":93},"    textArea.style.top ",[18,505,117],{"class":82},[18,507,171],{"class":104},[18,509,134],{"class":93},[18,511,512,515,517,519,521,523,525],{"class":64,"line":225},[18,513,514],{"class":93},"    textArea.",[18,516,182],{"class":97},[18,518,101],{"class":93},[18,520,187],{"class":104},[18,522,190],{"class":93},[18,524,187],{"class":104},[18,526,108],{"class":93},[18,528,529,532,534],{"class":64,"line":241},[18,530,531],{"class":93},"    document.body.",[18,533,203],{"class":97},[18,535,206],{"class":93},[18,537,539],{"class":64,"line":538},15,[18,540,76],{"emptyLinePlaceholder":75},[18,542,544,546,548],{"class":64,"line":543},16,[18,545,514],{"class":93},[18,547,219],{"class":97},[18,549,222],{"class":93},[18,551,553,556,558,560,562],{"class":64,"line":552},17,[18,554,555],{"class":93},"    document.",[18,557,231],{"class":97},[18,559,101],{"class":93},[18,561,236],{"class":104},[18,563,108],{"class":93},[18,565,567,569,571],{"class":64,"line":566},18,[18,568,531],{"class":93},[18,570,246],{"class":97},[18,572,206],{"class":93},[18,574,576],{"class":64,"line":575},19,[18,577,578],{"class":93},"  }\n",[18,580,582],{"class":64,"line":581},20,[18,583,584],{"class":93},"};\n",[24,586,588],{"id":587},"flash-方案zeroclipboard",[589,590,591,592,597],"del",{},"Flash 方案（",[28,593,596],{"href":594,"rel":595},"https://github.com/zeroclipboard/zeroclipboard",[32],"ZeroClipboard","）",[14,599,600],{},"其实上面两个 API 差不多就把基础原理讲完了，不过我在查资料的时候发现，在 execCommand 方案之前，前端居然大多是依靠 Flash 来实现复制文本到剪切板的，这不得拿出来讲讲？",[14,602,603,604,609],{},"目前在 ZeroClipboard 的 Github 仓库能找到的最老的 tag 是 ",[28,605,608],{"href":606,"rel":607},"https://github.com/zeroclipboard/zeroclipboard/releases/tag/v1.0.7",[32],"v1.0.7","，发布于 2012 年 6 月 9 日。我打赌这个项目不是第一个通过 Flash 实现复制文本到剪切板的，在此之前肯定有人使用 Flash 实现过这个功能，只是没单独拎出来作为一个库开源出来。",[14,611,612,613,616],{},"ZeroClipboard 通过创建一个透明的 Flash Movie 覆盖在触发按钮上，当用户点击按钮时，实际上点到的是 Flash Movie，随后 JavaScript 与 Flash Movie 通过 ",[60,614,615],{},"ExternalInterface"," 进行通信，将需要复制的文本传递给 Flash，再经 Flash 的 API 将文本写入用户的剪切板。",[14,618,619],{},"在当时的时代背景下，这是唯一一个能够跨浏览器实现复制文本到剪切板的方案（尽管并不是每台电脑都装有 Flash，尽管 IOS 并不支持 Flash），6.6k star 的 Github 仓库见证了那个各家浏览器抱着各家私有 API 的混沌时代，最终随着 execCommand 方案的崛起，ZeroClipboard 与 Flash 一同落幕。",[24,621,622],{"id":622},"其他不完美的方案",[624,625,627],"h4",{"id":626},"windowclipboarddatasetdata","window.clipboardData.setData",[14,629,630],{},"该 API 主要在 2000 年 —2010 年前后被使用，仅适用于 IE 浏览器。Firefox 在这段时间里还不支持纯 js 实现的复制文本至浏览器的操作；Chrome 第一个版本在 2008 年才发布，尚未成为主流。",[53,632,634],{"className":55,"code":633,"language":57,"meta":58,"style":58},"window.clipboardData.setData(\"Text\", text2copy);\n",[60,635,636],{"__ignoreMap":58},[18,637,638,641,644,646,649],{"class":64,"line":65},[18,639,640],{"class":93},"window.clipboardData.",[18,642,643],{"class":97},"setData",[18,645,101],{"class":93},[18,647,648],{"class":104},"\"Text\"",[18,650,651],{"class":93},", text2copy);\n",[624,653,655],{"id":654},"摆烂prompt","摆烂（prompt）",[14,657,658],{},"调 prompt 弹窗让用户自己复制。",[53,660,662],{"className":55,"code":661,"language":57,"meta":58,"style":58},"prompt('Press Ctrl + C, then Enter to copy to clipboard','copy me')\n",[60,663,664],{"__ignoreMap":58},[18,665,666,669,671,674,677,680],{"class":64,"line":65},[18,667,668],{"class":97},"prompt",[18,670,101],{"class":93},[18,672,673],{"class":104},"'Press Ctrl + C, then Enter to copy to clipboard'",[18,675,676],{"class":93},",",[18,678,679],{"class":104},"'copy me'",[18,681,682],{"class":93},")\n",[14,684,685],{},[340,686],{"alt":58,"src":687},"https://static.031130.xyz/uploads/2025/04/19/7f5310ca03c80.webp",[10,689,690],{"id":690},"第三方库封装",[14,692,693],{},"由于 execCommand 的方案过于抽象，不够优雅，所以我们有一些现成的第三方库对复制到剪切板的代码进行了封装。",[24,695,697],{"id":696},"clipboardjs",[28,698,701],{"href":699,"rel":700},"https://github.com/zenorocha/clipboard.js/",[32],"clipboard.js",[14,703,704],{},"clipboard.js 是最负盛名的一款第三方库，截至本文完成时间，在 Github 共收获 34.1k 的 star。最早的一个 tag 版本发布于 2015 年 10 月 28 日，也就是 Firefox 支持 execCommand、PC 端三大浏览器巨头全面兼容的一个月后。",[14,706,707,708,713,714,717],{},"clipboard.js ",[28,709,712],{"href":710,"rel":711},"https://github.com/zenorocha/clipboard.js/blob/master/src/common/command.js",[32],"仅使用 execCommand"," 实现复制到剪切板的操作，项目的 owner 希望开发者自行使用 ",[60,715,716],{},"ClipboardJS.isSupported()"," 来判断用户的浏览器是否支持 execCommand 方案，并根据命令执行的返回值自行安排成功/失败后的动作。。",[14,719,720],{},"不过让我感到奇怪的是，clipboard.js 在实例化时会要求开发者传入一个 DOM 选择（或者是 HTML 元素/元素列表）。它一定要有一个实体的 html 元素，用设置事件监听器来触发复制操作，而不是提供一个 js 函数让开发者来调用——尽管这不是来自 execCommand 的限制。示例如下",[53,722,726],{"className":723,"code":724,"language":725,"meta":58,"style":58},"language-html shiki shiki-themes github-light github-dark","\u003C!-- Target -->\n\u003Cinput id=\"foo\" value=\"text2copy\" />\n\n\u003C!-- Trigger -->\n\u003Cbutton class=\"btn\" data-clipboard-target=\"#foo\">\u003C/button>\n\n\u003Cscript>\n    new ClipboardJS('.btn');\n\u003C/script>\n","html",[60,727,728,733,761,765,770,801,805,814,829],{"__ignoreMap":58},[18,729,730],{"class":64,"line":65},[18,731,732],{"class":68},"\u003C!-- Target -->\n",[18,734,735,738,742,745,747,750,753,755,758],{"class":64,"line":72},[18,736,737],{"class":93},"\u003C",[18,739,741],{"class":740},"s9eBZ","input",[18,743,744],{"class":97}," id",[18,746,117],{"class":93},[18,748,749],{"class":104},"\"foo\"",[18,751,752],{"class":97}," value",[18,754,117],{"class":93},[18,756,757],{"class":104},"\"text2copy\"",[18,759,760],{"class":93}," />\n",[18,762,763],{"class":64,"line":79},[18,764,76],{"emptyLinePlaceholder":75},[18,766,767],{"class":64,"line":111},[18,768,769],{"class":68},"\u003C!-- Trigger -->\n",[18,771,772,774,777,780,782,785,788,790,793,796,798],{"class":64,"line":123},[18,773,737],{"class":93},[18,775,776],{"class":740},"button",[18,778,779],{"class":97}," class",[18,781,117],{"class":93},[18,783,784],{"class":104},"\"btn\"",[18,786,787],{"class":97}," data-clipboard-target",[18,789,117],{"class":93},[18,791,792],{"class":104},"\"#foo\"",[18,794,795],{"class":93},">\u003C/",[18,797,776],{"class":740},[18,799,800],{"class":93},">\n",[18,802,803],{"class":64,"line":137},[18,804,76],{"emptyLinePlaceholder":75},[18,806,807,809,812],{"class":64,"line":150},[18,808,737],{"class":93},[18,810,811],{"class":740},"script",[18,813,800],{"class":93},[18,815,816,819,822,824,827],{"class":64,"line":163},[18,817,818],{"class":82},"    new",[18,820,821],{"class":97}," ClipboardJS",[18,823,101],{"class":93},[18,825,826],{"class":104},"'.btn'",[18,828,108],{"class":93},[18,830,831,834,836],{"class":64,"line":176},[18,832,833],{"class":93},"\u003C/",[18,835,811],{"class":740},[18,837,800],{"class":93},[14,839,840],{},"对，就一行 js 就能给所有带有 btn class 的 dom 加上监听器。或许这就是为什么这个仓库能获得 34.1k star 的原因，在 2015 年那个大多数人还在用三件套写前端的时代，clipboard.js 能够降低代码量，不用开发者自行设置监听器。",[14,842,843],{},"clipboard.js 当然也提供了很多高级选项来满足不同开发者的需求，比如允许你通过传入一个 function 来获取你需要让用户复制的文本而，或是通过 Event 监听器来反馈是否复制成功，总之灵活性是够用的。",[24,845,847],{"id":846},"copy-to-clipboard",[28,848,846],{"href":849,"rel":850},"https://github.com/sudodoki/copy-to-clipboard",[32],[14,852,853,854,859,860,862],{},"同样是一款",[28,855,858],{"href":856,"rel":857},"https://github.com/sudodoki/copy-to-clipboard/blob/main/index.js#L79",[32],"利用 execCommand"," 的第三方库，虽然只有 1.3k star。第一个 tag 版本发布于 2015 年的 5 月 24 日，比 clipboard.js 还要早。相比起 clipboard.js，copy-to-clipboard 不依赖 html 元素，可以直接在 js 中被调用，我个人是比较喜欢这个的。在 vue/react 等现代化的前端框架中，我们一般不直接操作 dom，因此并不是很适合使用 clipboard.js，这个 copy-to-clipboard 就挺好的。此外，除了 execCommand 与方案，copy-to-clipboard 还对老版本的 IE 浏览器针对性的适配了 ",[60,861,627],{}," 的方案，并且在两者都失败时会调用 prompt 窗口让用户自主复制实现最终的兜底。",[14,864,865],{},"示例如下:",[53,867,869],{"className":55,"code":868,"language":57,"meta":58,"style":58},"import copy from 'copy-to-clipboard';\n\ncopy('Text');\n",[60,870,871,887,891],{"__ignoreMap":58},[18,872,873,876,879,882,885],{"class":64,"line":65},[18,874,875],{"class":82},"import",[18,877,878],{"class":93}," copy ",[18,880,881],{"class":82},"from",[18,883,884],{"class":104}," 'copy-to-clipboard'",[18,886,134],{"class":93},[18,888,889],{"class":64,"line":72},[18,890,76],{"emptyLinePlaceholder":75},[18,892,893,896,898,901],{"class":64,"line":79},[18,894,895],{"class":97},"copy",[18,897,101],{"class":93},[18,899,900],{"class":104},"'Text'",[18,902,108],{"class":93},[14,904,905],{},"相比起 clipboard.js 的使用思路是更加直观了，可惜生不逢时，不如 clipboard.js 出名（也可能有取名的原因在里面）。",[24,907,909],{"id":908},"vueuse-useclipboard",[28,910,913],{"href":911,"rel":912},"https://vueuse.org/core/useClipboard/",[32],"VueUse - useClipboard",[14,915,916,917,922,923,325,925,928],{},"VueUse 实现的这个 useClipboard 是令我最为满意的一个。useClipboard 充分考虑了浏览器的兼容性，在检测到满足 navigator.clipboard 的使用条件时",[253,918,919,920],{},"优先使用 ",[60,921,359],{}," ，在不支持 navigator.clipboard 或者 ",[60,924,359],{},[253,926,927],{},"复制失败时转去使用 execCommand 实现的 legacyCopy","，并且借助 Vue3 中的 Composables 实现了一个 1.5 秒后自动恢复初始状态的 copied 变量，算是很有心了。",[53,930,934],{"className":931,"code":932,"language":933,"meta":58,"style":58},"language-vue shiki shiki-themes github-light github-dark","const { text, copy, copied, isSupported } = useClipboard({ source })\n\u003C/script>\n\n\u003Ctemplate>\n  \u003Cdiv v-if=\"isSupported\">\n    \u003Cbutton @click=\"copy(source)\">\n      \u003C!-- by default, `copied` will be reset in 1.5s -->\n      \u003Cspan v-if=\"!copied\">Copy\u003C/span>\n      \u003Cspan v-else>Copied!\u003C/span>\n    \u003C/button>\n    \u003Cp>Current copied: \u003Ccode>{{ text || 'none' }}\u003C/code>\u003C/p>\n  \u003C/div>\n  \u003Cp v-else>\n    Your browser does not support Clipboard API\n  \u003C/p>\n\u003C/template>\n","vue",[60,935,936,941,949,953,962,980,991,1023,1042,1059,1068,1096,1105,1115,1120,1128],{"__ignoreMap":58},[18,937,938],{"class":64,"line":65},[18,939,940],{"class":93},"const { text, copy, copied, isSupported } = useClipboard({ source })\n",[18,942,943,945,947],{"class":64,"line":72},[18,944,833],{"class":93},[18,946,811],{"class":740},[18,948,800],{"class":93},[18,950,951],{"class":64,"line":79},[18,952,76],{"emptyLinePlaceholder":75},[18,954,955,957,960],{"class":64,"line":111},[18,956,737],{"class":93},[18,958,959],{"class":740},"template",[18,961,800],{"class":93},[18,963,964,967,970,973,975,978],{"class":64,"line":123},[18,965,966],{"class":93},"  \u003C",[18,968,969],{"class":740},"div",[18,971,972],{"class":97}," v-if",[18,974,117],{"class":82},[18,976,977],{"class":104},"\"isSupported\"",[18,979,800],{"class":93},[18,981,982,985,987],{"class":64,"line":137},[18,983,984],{"class":93},"    \u003C",[18,986,776],{"class":740},[18,988,990],{"class":989},"s7hpK"," @click=\"copy(source)\">\n",[18,992,993,996,999,1002,1005,1008,1011,1014,1017,1020],{"class":64,"line":150},[18,994,995],{"class":989},"      \u003C!--",[18,997,998],{"class":97}," by",[18,1000,1001],{"class":989}," default,",[18,1003,1004],{"class":989}," `copied`",[18,1006,1007],{"class":97}," will",[18,1009,1010],{"class":97}," be",[18,1012,1013],{"class":97}," reset",[18,1015,1016],{"class":97}," in",[18,1018,1019],{"class":989}," 1.5s",[18,1021,1022],{"class":989}," -->\n",[18,1024,1025,1028,1030,1032,1035,1038,1040],{"class":64,"line":163},[18,1026,1027],{"class":989},"      \u003Cspan",[18,1029,972],{"class":97},[18,1031,117],{"class":82},[18,1033,1034],{"class":104},"\"!copied\"",[18,1036,1037],{"class":93},">Copy\u003C/",[18,1039,18],{"class":740},[18,1041,800],{"class":93},[18,1043,1044,1047,1049,1052,1055,1057],{"class":64,"line":176},[18,1045,1046],{"class":93},"      \u003C",[18,1048,18],{"class":740},[18,1050,1051],{"class":97}," v-else",[18,1053,1054],{"class":93},">Copied!\u003C/",[18,1056,18],{"class":740},[18,1058,800],{"class":93},[18,1060,1061,1064,1066],{"class":64,"line":197},[18,1062,1063],{"class":93},"    \u003C/",[18,1065,776],{"class":740},[18,1067,800],{"class":93},[18,1069,1070,1072,1074,1077,1079,1082,1085,1088,1090,1092,1094],{"class":64,"line":209},[18,1071,984],{"class":93},[18,1073,14],{"class":740},[18,1075,1076],{"class":93},">Current copied: \u003C",[18,1078,60],{"class":740},[18,1080,1081],{"class":93},">{{ text || ",[18,1083,1084],{"class":104},"'none'",[18,1086,1087],{"class":93}," }}\u003C/",[18,1089,60],{"class":740},[18,1091,795],{"class":93},[18,1093,14],{"class":740},[18,1095,800],{"class":93},[18,1097,1098,1101,1103],{"class":64,"line":214},[18,1099,1100],{"class":93},"  \u003C/",[18,1102,969],{"class":740},[18,1104,800],{"class":93},[18,1106,1107,1109,1111,1113],{"class":64,"line":225},[18,1108,966],{"class":93},[18,1110,14],{"class":740},[18,1112,1051],{"class":97},[18,1114,800],{"class":93},[18,1116,1117],{"class":64,"line":241},[18,1118,1119],{"class":93},"    Your browser does not support Clipboard API\n",[18,1121,1122,1124,1126],{"class":64,"line":538},[18,1123,1100],{"class":93},[18,1125,14],{"class":740},[18,1127,800],{"class":93},[18,1129,1130,1132,1134],{"class":64,"line":543},[18,1131,833],{"class":82},[18,1133,959],{"class":93},[18,1135,800],{"class":82},[24,1137,1139],{"id":1138},"react-相关生态","React 相关生态",[14,1141,1142],{},"React 这边不像 VueUse 一家独大，出现了很多可用的 hooks 库，那就全都过一遍",[624,1144,1146],{"id":1145},"react-use-usecopytoclipboard",[28,1147,1150],{"href":1148,"rel":1149},"https://github.com/streamich/react-use",[32],"react-use - useCopyToClipboard",[14,1152,1153,1154,1157],{},"react-use 是我能搜到的目前最大的 React Hooks 库，42.9k star。采用的复制方案是直接依赖上面介绍过的 ",[28,1155,846],{"href":849,"rel":1156},[32],"，也就是 execCommand 方案。",[53,1159,1163],{"className":1160,"code":1161,"language":1162,"meta":58,"style":58},"language-jsx shiki shiki-themes github-light github-dark","const Demo = () => {\n  const [text, setText] = React.useState('');\n  const [state, copyToClipboard] = useCopyToClipboard();\n\n  return (\n    \u003Cdiv>\n      \u003Cinput value={text} onChange={e => setText(e.target.value)} />\n      \u003Cbutton type=\"button\" onClick={() => copyToClipboard(text)}>copy text\u003C/button>\n      {state.error\n        ? \u003Cp>Unable to copy value: {state.error.message}\u003C/p>\n        : state.value && \u003Cp>Copied {state.value}\u003C/p>}\n    \u003C/div>\n  )\n}\n","jsx",[60,1164,1165,1182,1216,1239,1243,1251,1259,1291,1325,1330,1347,1369,1377,1382],{"__ignoreMap":58},[18,1166,1167,1169,1172,1174,1177,1180],{"class":64,"line":65},[18,1168,83],{"class":82},[18,1170,1171],{"class":97}," Demo",[18,1173,90],{"class":82},[18,1175,1176],{"class":93}," () ",[18,1178,1179],{"class":82},"=>",[18,1181,399],{"class":93},[18,1183,1184,1187,1190,1193,1195,1198,1201,1203,1206,1209,1211,1214],{"class":64,"line":72},[18,1185,1186],{"class":82},"  const",[18,1188,1189],{"class":93}," [",[18,1191,1192],{"class":86},"text",[18,1194,190],{"class":93},[18,1196,1197],{"class":86},"setText",[18,1199,1200],{"class":93},"] ",[18,1202,117],{"class":82},[18,1204,1205],{"class":93}," React.",[18,1207,1208],{"class":97},"useState",[18,1210,101],{"class":93},[18,1212,1213],{"class":104},"''",[18,1215,108],{"class":93},[18,1217,1218,1220,1222,1225,1227,1230,1232,1234,1237],{"class":64,"line":79},[18,1219,1186],{"class":82},[18,1221,1189],{"class":93},[18,1223,1224],{"class":86},"state",[18,1226,190],{"class":93},[18,1228,1229],{"class":86},"copyToClipboard",[18,1231,1200],{"class":93},[18,1233,117],{"class":82},[18,1235,1236],{"class":97}," useCopyToClipboard",[18,1238,222],{"class":93},[18,1240,1241],{"class":64,"line":111},[18,1242,76],{"emptyLinePlaceholder":75},[18,1244,1245,1248],{"class":64,"line":123},[18,1246,1247],{"class":82},"  return",[18,1249,1250],{"class":93}," (\n",[18,1252,1253,1255,1257],{"class":64,"line":137},[18,1254,984],{"class":93},[18,1256,969],{"class":740},[18,1258,800],{"class":93},[18,1260,1261,1263,1265,1267,1269,1272,1275,1277,1280,1283,1285,1288],{"class":64,"line":150},[18,1262,1046],{"class":93},[18,1264,741],{"class":740},[18,1266,752],{"class":97},[18,1268,117],{"class":82},[18,1270,1271],{"class":93},"{text} ",[18,1273,1274],{"class":97},"onChange",[18,1276,117],{"class":82},[18,1278,1279],{"class":93},"{",[18,1281,1282],{"class":392},"e",[18,1284,396],{"class":82},[18,1286,1287],{"class":97}," setText",[18,1289,1290],{"class":93},"(e.target.value)} />\n",[18,1292,1293,1295,1297,1300,1302,1305,1308,1310,1313,1315,1318,1321,1323],{"class":64,"line":163},[18,1294,1046],{"class":93},[18,1296,776],{"class":740},[18,1298,1299],{"class":97}," type",[18,1301,117],{"class":82},[18,1303,1304],{"class":104},"\"button\"",[18,1306,1307],{"class":97}," onClick",[18,1309,117],{"class":82},[18,1311,1312],{"class":93},"{() ",[18,1314,1179],{"class":82},[18,1316,1317],{"class":97}," copyToClipboard",[18,1319,1320],{"class":93},"(text)}>copy text\u003C/",[18,1322,776],{"class":740},[18,1324,800],{"class":93},[18,1326,1327],{"class":64,"line":176},[18,1328,1329],{"class":93},"      {state.error\n",[18,1331,1332,1335,1338,1340,1343,1345],{"class":64,"line":197},[18,1333,1334],{"class":82},"        ?",[18,1336,1337],{"class":93}," \u003C",[18,1339,14],{"class":740},[18,1341,1342],{"class":93},">Unable to copy value: {state.error.message}\u003C/",[18,1344,14],{"class":740},[18,1346,800],{"class":93},[18,1348,1349,1352,1355,1357,1359,1361,1364,1366],{"class":64,"line":209},[18,1350,1351],{"class":82},"        :",[18,1353,1354],{"class":93}," state.value ",[18,1356,410],{"class":82},[18,1358,1337],{"class":93},[18,1360,14],{"class":740},[18,1362,1363],{"class":93},">Copied {state.value}\u003C/",[18,1365,14],{"class":740},[18,1367,1368],{"class":93},">}\n",[18,1370,1371,1373,1375],{"class":64,"line":214},[18,1372,1063],{"class":93},[18,1374,969],{"class":740},[18,1376,800],{"class":93},[18,1378,1379],{"class":64,"line":225},[18,1380,1381],{"class":93},"  )\n",[18,1383,1384],{"class":64,"line":241},[18,1385,1386],{"class":93},"}\n",[624,1388,1390],{"id":1389},"ant-design-typography",[28,1391,1394],{"href":1392,"rel":1393},"https://ant.design/components/typography-cn#typography-demo-copyable",[32],"Ant Design - Typography",[14,1396,1397,1398,1403,1404,1407],{},"ahooks 是",[28,1399,1402],{"href":1400,"rel":1401},"https://site.j10ccc.xyz/",[32],"小麦茶","第一个报出来的 react hooks 库，由 Ant Design 原班人马维护。不过其在仓库中并没有对剪贴板的封装，因此在小麦茶的建议下我跑去翻了 Ant Design 中的 Typography 对复制能力的实现。和上面的 react-use 一样，都是直接用 ",[28,1405,846],{"href":849,"rel":1406},[32],"，属于 execCommand 方案。",[624,1409,1411],{"id":1410},"usehooks-usecopytoclipboard",[28,1412,1415],{"href":1413,"rel":1414},"https://usehooks.com/usecopytoclipboard",[32],"usehooks - useCopyToClipboard",[14,1417,1418,1419,1421],{},"这个库是我问 llm 知道的，现在有 10.5k star。非常逆天的一点在于它的所有逻辑代码都是在 index.js 这样一个单文件里实现的，属实是看不懂了。会先采用 ",[60,1420,359],{}," 尝试写入，失败后再换用 execCommand 的方案。hooks 的用法和上面的 react-use 大差不差。",[624,1423,1425],{"id":1424},"usehooks-ts-usecopytoclipboard",[28,1426,1429],{"href":1427,"rel":1428},"https://usehooks-ts.com/react-hook/use-copy-to-clipboard",[32],"usehooks-ts - useCopyToClipboard",[14,1431,1432,1433,1435,1436,1439],{},"不知道是不是为了解决上面那玩意儿不支持 ts 才开的库。只使用 ",[60,1434,359],{}," 尝试写入剪切板，失败后直接 ",[60,1437,1438],{},"console.warn"," 报错，没有 fallback 方案。",[10,1441,1442],{"id":1442},"结语",[14,1444,1445],{},"从结果上来看，VueUse 的封装无疑是最令我满意的。优先尝试性能最好的 Clipboard API，再尝试 execCommand 作为回落，同时辅以多个响应式变量帮助开发，但又不擅作主张地使用 prompt 作为保底，最大程度地把操作空间留给开发者。",[14,1447,1448],{},"站在 2025 年的节点回望，前端剪切板操作技术的演进轨迹清晰可见：从早期依赖 Flash 的脆弱方案，到 execCommand 的曲线救国，最终迈向标准化 Clipboard API 的优雅实现。这段历程不仅是技术迭代的缩影，更折射出前端开发中独特的「妥协艺术」。",[14,1450,1451],{},"在未来的很长一段时间里，或许我们还是会在「优雅实现」与「向下兼容」之间寻找平衡点、在浏览器沙箱里戴着镣铐跳芭蕾，但那些为兼容性而生的临时方案，终将成为见证前端进化史的珍贵注脚。",[10,1453,1454],{"id":1454},"参见",[1456,1457,1458,1465,1472,1478,1485,1491,1497,1503,1510,1516,1522,1529],"ul",{},[296,1459,1460],{},[28,1461,1464],{"href":1462,"rel":1463},"https://liruifengv.com/posts/copy-text/",[32],"JS复制文字到剪贴板的坑及完整方案。",[296,1466,1467],{},[28,1468,1471],{"href":1469,"rel":1470},"https://jiongks.name/blog/zeroclipboard-intro",[32],"ZeroClipboard 学习笔记 | 囧克斯",[296,1473,1474],{},[28,1475,1477],{"href":39,"rel":1476},[32],"Cut and copy commands  |  Blog  |  Chrome for Developers",[296,1479,1480],{},[28,1481,1484],{"href":1482,"rel":1483},"https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/ms536419(v=vs.85)",[32],"execCommand method (Internet Explorer) | Microsoft Learn",[296,1486,1487],{},[28,1488,1490],{"href":849,"rel":1489},[32],"sudodoki/copy-to-clipboard",[296,1492,1493],{},[28,1494,1496],{"href":699,"rel":1495},[32],"zenorocha/clipboard.js",[296,1498,1499],{},[28,1500,1502],{"href":911,"rel":1501},[32],"useClipboard | VueUse",[296,1504,1505],{},[28,1506,1509],{"href":1507,"rel":1508},"https://streamich.github.io/react-use/?path=/story/side-effects-usecopytoclipboard--docs",[32],"Side-effects / useCopyToClipboard - Docs ⋅ Storybook",[296,1511,1512],{},[28,1513,1515],{"href":30,"rel":1514},[32],"document.execCommand - Web API | MDN",[296,1517,1518],{},[28,1519,1521],{"href":281,"rel":1520},[32],"Clipboard.writeText() - Web API | MDN",[296,1523,1524],{},[28,1525,1528],{"href":1526,"rel":1527},"https://www.sitepoint.com/community/t/onclick-select-all-and-copy-to-clipboard/3837/2",[32],"Onclick Select All and Copy to Clipboard? - JavaScript - SitePoint Forums | Web Development & Design Community",[296,1530,1531],{},[28,1532,1535],{"href":1533,"rel":1534},"https://stackoverflow.com/questions/16526814/how-would-i-implement-copy-url-to-clipboard-from-a-link-or-button-using-javasc",[32],"How would I implement 'copy url to clipboard' from a link or button using javascript or dojo without flash - Stack Overflow",[1537,1538,1539],"style",{},"html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s4XuR, html code.shiki .s4XuR{--shiki-default:#E36209;--shiki-dark:#FFAB70}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}html pre.shiki code .s7hpK, html code.shiki .s7hpK{--shiki-default:#B31D28;--shiki-default-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic}",{"title":58,"searchDepth":72,"depth":72,"links":1541},[1542,1549,1555,1556],{"id":12,"depth":72,"text":12,"children":1543},[1544,1545,1546,1548],{"id":26,"depth":79,"text":33},{"id":278,"depth":79,"text":283},{"id":587,"depth":79,"text":1547},"Flash 方案（ZeroClipboard）",{"id":622,"depth":79,"text":622},{"id":690,"depth":72,"text":690,"children":1550},[1551,1552,1553,1554],{"id":696,"depth":79,"text":701},{"id":846,"depth":79,"text":846},{"id":908,"depth":79,"text":913},{"id":1138,"depth":79,"text":1139},{"id":1442,"depth":72,"text":1442},{"id":1454,"depth":72,"text":1454},"2025-04-21 19:48:05","md",{},"/2025/04/21/how-we-copy-text-to-clipboard-with-js-in-2025","---\ntitle: 2025年，前端如何使用 JS 将文本复制到剪切板？\ndate: 2025-04-21 19:48:05\nsticky:\ntags:\n- JavaScript\n---\n\n## 基础原理\n\n如果你尝试在搜索引擎上检索本文的标题，你搜到的文章大概会让你使用下面两个 API。\u003Cspan class=\"heimu\">我希望你用的搜索引擎不至于像某度一样灵车到 2025 年还在让你使用基于 Flash 的 ZeroClipboard 方案\u003C/span>\n\n### [document.execCommand](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand)\n\n2012 年不止有世界末日，还有 IE 10。随着 IE 10 在当年 9 月 4 日发布，execCommand 家族迎来了两个新的成员—— copy/cut 命令（此说法来自 [Chrome 的博客](https://developer.chrome.com/blog/cut-and-copy-commands)，而 [MDN 认为 IE 9 就已经支持了](https://web.archive.org/web/20160315042044/https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand)）。三年之后，随着 Google Chrome 在 2015 年 4 月 14 日的发布的 42 版本对 execCommand 的 copy/cut 跟进，越来越多的浏览器厂商开始在自家的浏览器中跟进这个实现标准。最终在 2016 年 9 月 13 日发布的 Safari 10 on IOS 后，WEB 开发者们总算获得了历史上第一个非 Flash 实现的 js 复制到剪切板的方案。\n\n当 document.execCommand 的第一个参数为 copy 时，可以将用户选中的文本复制到剪切板。基于这个 API 实现，很快便有人研究出了当今 web 下最常见的 js 实现——先创建一个不可见的 dom，用 js 操作模拟用户选中文本，并调用 execCommand('copy') 将文本复制到用户的剪切板。大致的代码实现如下：\n\n```javascript\n// 来自「JS复制文字到剪贴板的坑及完整方案。」一文，本文结尾有跳转链接\n\nconst textArea = document.createElement(\"textArea\");\ntextArea.value = val;\ntextArea.style.width = 0;\ntextArea.style.position = \"fixed\";\ntextArea.style.left = \"-999px\";\ntextArea.style.top = \"10px\";\ntextArea.setAttribute(\"readonly\", \"readonly\");\ndocument.body.appendChild(textArea);\n\ntextArea.select();\ndocument.execCommand(\"copy\");\ndocument.body.removeChild(textArea);\n```\n\n尽管**这个 API 早已被 w3c 弃用**，在 MDN 被标注为 Deprecated，但这仍然是市面上最常见的方案。在编写本文的时候，我扒了扒 MDN 的英文原始页面在 archive.org 的存档及其在 Github 的变更记录，这个 API 在 [2020 年 1~2 月](https://web.archive.org/web/20200221235207/https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand)被首次标记为 Obsolete（过时的），在 [2021 年 1 月](https://github.com/mdn/content/commit/0c31e2bc4d6601a079bc57521e79529539c8cf68#diff-85ef9d1e72565f0ae2ffd8199d10b34c11c615aec5d116057ac2a33c21cc072f)被首次标记为 Deprecated（已弃用），并附上了红色 Section Background Color 提示开发者该 API 可能**随时无法正常工作**。但截至本文发布，所有的常用浏览器都保留着对该 API 的兼容，起码在 copy 命令下是这样的。\n\n这个 API 被广泛应用在了太多站点，以至于移除对该 API 的支持将会导致大量的站点异常，我想各家浏览器内核在短期内恐怕都没有动力以丢失兼容性为代价去移除这个 API，这也意味着这个创建一个不可见的 dom 代替用户选中文本并执行 execCommand 复制到用户剪切板的（看似奇葩的）曲线救国方案已然在前端开发的历史上留下了浓墨重彩的一笔。\n\n### [Clipboard.writeText()](https://developer.mozilla.org/zh-CN/docs/Web/API/Clipboard/writeText)\n\n随着原生 JS 一步步被增强，开发者们总算补上了 Clipboard 这一块的拼图。2018 年 4 月 17 日，Chrome 66 率先迈出了这一步；同年 10 月 23 日，Firefox 跟进了 ClipBoard API 的实现。最终在 2020 年 3 月 24 日，随着 Apple 自家 Safari 13.4 的姗姗来迟，前端开发者门总算喘了口气，再一次得到了一个主流浏览器通用的复制方案。\n\n**那么 execCommand 明明已经实现了纯 js 实现的复制文本到剪切板了，为什么我们还需要 Clipboard API ？或者说，这个特意去实现的 Clipboard API 到底有什么优势？**\n\n1. 传统的 execCommand 方案在使用的时候通常需要创建一个临时的不可见的 DOM，放入文本、用 JS 选中文本、执行 copy 命令。我们暂且不说这种 hacky 的方式在代码编写时是多么不优雅，但一个使用 JS 去选中文本这个操作就会修改用户当前的文本选择状态，在某些时候导致一些用户体验的下降。\n2. Clipboard API 是异步的，这意味着其在复制大量文本时不会阻塞主线程。\n3. Clipboard API 提供了更多的能力，比如 `write()` 和 `read()` 允许对剪切板读写更复杂的数据，比如富文本或图片。\n4. Clipboard API 具有更现代、更明确的权限控制—— write 操作需要由用户的主动操作来调用，read 操作则需要用户在浏览器 UI 上明确授予权限。这些权限控制给予了用户更大的控制权，因此，当 execCommand 退出历史的舞台后，WEB 的安全性将得到进一步提升。\n\n不过在现阶段，`Clipboard.writeText()` 未必就能解决所有的问题。抛开旧版浏览器的兼容性问题不谈，`navigator.clipboard` **仅在通过 https 访问的页面中可用**（或是 localhost），如果你的项目部署在局域网，你试图通过 192.18.1.x 的 ip + port 直接访问，那么 `navigator.clipboard` 将会是 `undefined` 状态。\n\n![](https://static.031130.xyz/uploads/2025/04/19/3437b1c022853.webp)\n\n除此之外，**安卓原生的 Webview** 还有因为 Permissions API 没实现而**用不了** Clipboard API 的问题。\n\n基于以上原因，很多网站现在都会优先尝试使用 `navigator.clipboard.writeText()`，失败后再转去使用 `execCommand('copy')`。大致的代码实现如下：\n\n```javascript\n// 来自「JS复制文字到剪贴板的坑及完整方案。」一文，本文结尾有跳转链接\n\nconst copyText = async val => {\n  if (navigator.clipboard && navigator.permissions) {\n    await navigator.clipboard.writeText(val);\n  } else {\n    const textArea = document.createElement(\"textArea\");\n    textArea.value = val;\n    textArea.style.width = 0;\n    textArea.style.position = \"fixed\";\n    textArea.style.left = \"-999px\";\n    textArea.style.top = \"10px\";\n    textArea.setAttribute(\"readonly\", \"readonly\");\n    document.body.appendChild(textArea);\n\n    textArea.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(textArea);\n  }\n};\n```\n\n### ~~Flash 方案（[ZeroClipboard](https://github.com/zeroclipboard/zeroclipboard)）~~\n\n其实上面两个 API 差不多就把基础原理讲完了，不过我在查资料的时候发现，在 execCommand 方案之前，前端居然大多是依靠 Flash 来实现复制文本到剪切板的，这不得拿出来讲讲？\n\n目前在 ZeroClipboard 的 Github 仓库能找到的最老的 tag 是 [v1.0.7](https://github.com/zeroclipboard/zeroclipboard/releases/tag/v1.0.7)，发布于 2012 年 6 月 9 日。我打赌这个项目不是第一个通过 Flash 实现复制文本到剪切板的，在此之前肯定有人使用 Flash 实现过这个功能，只是没单独拎出来作为一个库开源出来。\n\nZeroClipboard 通过创建一个透明的 Flash Movie 覆盖在触发按钮上，当用户点击按钮时，实际上点到的是 Flash Movie，随后 JavaScript 与 Flash Movie 通过 `ExternalInterface` 进行通信，将需要复制的文本传递给 Flash，再经 Flash 的 API 将文本写入用户的剪切板。\n\n在当时的时代背景下，这是唯一一个能够跨浏览器实现复制文本到剪切板的方案（尽管并不是每台电脑都装有 Flash，尽管 IOS 并不支持 Flash），6.6k star 的 Github 仓库见证了那个各家浏览器抱着各家私有 API 的混沌时代，最终随着 execCommand 方案的崛起，ZeroClipboard 与 Flash 一同落幕。\n\n### 其他不完美的方案\n\n#### window.clipboardData.setData\n\n该 API 主要在 2000 年 —2010 年前后被使用，仅适用于 IE 浏览器。Firefox 在这段时间里还不支持纯 js 实现的复制文本至浏览器的操作；Chrome 第一个版本在 2008 年才发布，尚未成为主流。\n\n```javascript\nwindow.clipboardData.setData(\"Text\", text2copy);\n```\n\n#### 摆烂（prompt）\n\n调 prompt 弹窗让用户自己复制。\n\n```javascript\nprompt('Press Ctrl + C, then Enter to copy to clipboard','copy me')\n```\n\n![](https://static.031130.xyz/uploads/2025/04/19/7f5310ca03c80.webp)\n\n## 第三方库封装\n\n由于 execCommand 的方案过于抽象，不够优雅，所以我们有一些现成的第三方库对复制到剪切板的代码进行了封装。\n\n### [clipboard.js](https://github.com/zenorocha/clipboard.js/)\n\nclipboard.js 是最负盛名的一款第三方库，截至本文完成时间，在 Github 共收获 34.1k 的 star。最早的一个 tag 版本发布于 2015 年 10 月 28 日，也就是 Firefox 支持 execCommand、PC 端三大浏览器巨头全面兼容的一个月后。\n\nclipboard.js [仅使用 execCommand](https://github.com/zenorocha/clipboard.js/blob/master/src/common/command.js) 实现复制到剪切板的操作，项目的 owner 希望开发者自行使用 `ClipboardJS.isSupported()` 来判断用户的浏览器是否支持 execCommand 方案，并根据命令执行的返回值自行安排成功/失败后的动作。。\n\n不过让我感到奇怪的是，clipboard.js 在实例化时会要求开发者传入一个 DOM 选择（或者是 HTML 元素/元素列表）。它一定要有一个实体的 html 元素，用设置事件监听器来触发复制操作，而不是提供一个 js 函数让开发者来调用——尽管这不是来自 execCommand 的限制。示例如下\n\n```html\n\u003C!-- Target -->\n\u003Cinput id=\"foo\" value=\"text2copy\" />\n\n\u003C!-- Trigger -->\n\u003Cbutton class=\"btn\" data-clipboard-target=\"#foo\">\u003C/button>\n\n\u003Cscript>\n\tnew ClipboardJS('.btn');\n\u003C/script>\n```\n\n对，就一行 js 就能给所有带有 btn class 的 dom 加上监听器。或许这就是为什么这个仓库能获得 34.1k star 的原因，在 2015 年那个大多数人还在用三件套写前端的时代，clipboard.js 能够降低代码量，不用开发者自行设置监听器。\n\nclipboard.js 当然也提供了很多高级选项来满足不同开发者的需求，比如允许你通过传入一个 function 来获取你需要让用户复制的文本而，或是通过 Event 监听器来反馈是否复制成功，总之灵活性是够用的。\n\n### [copy-to-clipboard](https://github.com/sudodoki/copy-to-clipboard)\n\n同样是一款[利用 execCommand](https://github.com/sudodoki/copy-to-clipboard/blob/main/index.js#L79) 的第三方库，虽然只有 1.3k star。第一个 tag 版本发布于 2015 年的 5 月 24 日，比 clipboard.js 还要早。相比起 clipboard.js，copy-to-clipboard 不依赖 html 元素，可以直接在 js 中被调用，我个人是比较喜欢这个的。在 vue/react 等现代化的前端框架中，我们一般不直接操作 dom，因此并不是很适合使用 clipboard.js，这个 copy-to-clipboard 就挺好的。此外，除了 execCommand 与方案，copy-to-clipboard 还对老版本的 IE 浏览器针对性的适配了 `window.clipboardData.setData` 的方案，并且在两者都失败时会调用 prompt 窗口让用户自主复制实现最终的兜底。\n\n示例如下:\n\n```javascript\nimport copy from 'copy-to-clipboard';\n\ncopy('Text');\n```\n\n相比起 clipboard.js 的使用思路是更加直观了，可惜生不逢时，不如 clipboard.js 出名（也可能有取名的原因在里面）。\n\n### [VueUse - useClipboard](https://vueuse.org/core/useClipboard/)\n\nVueUse 实现的这个 useClipboard 是令我最为满意的一个。useClipboard 充分考虑了浏览器的兼容性，在检测到满足 navigator.clipboard 的使用条件时**优先使用 `navigator.clipboard.writeText()`** ，在不支持 navigator.clipboard 或者 `navigator.clipboard.writeText()` **复制失败时转去使用 execCommand 实现的 legacyCopy**，并且借助 Vue3 中的 Composables 实现了一个 1.5 秒后自动恢复初始状态的 copied 变量，算是很有心了。\n\n```vue\nconst { text, copy, copied, isSupported } = useClipboard({ source })\n\u003C/script>\n\n\u003Ctemplate>\n  \u003Cdiv v-if=\"isSupported\">\n    \u003Cbutton @click=\"copy(source)\">\n      \u003C!-- by default, `copied` will be reset in 1.5s -->\n      \u003Cspan v-if=\"!copied\">Copy\u003C/span>\n      \u003Cspan v-else>Copied!\u003C/span>\n    \u003C/button>\n    \u003Cp>Current copied: \u003Ccode>{{ text || 'none' }}\u003C/code>\u003C/p>\n  \u003C/div>\n  \u003Cp v-else>\n    Your browser does not support Clipboard API\n  \u003C/p>\n\u003C/template>\n```\n\n### React 相关生态\n\nReact 这边不像 VueUse 一家独大，出现了很多可用的 hooks 库，那就全都过一遍\n\n#### [react-use - useCopyToClipboard](https://github.com/streamich/react-use) \n\nreact-use 是我能搜到的目前最大的 React Hooks 库，42.9k star。采用的复制方案是直接依赖上面介绍过的 [copy-to-clipboard](https://github.com/sudodoki/copy-to-clipboard)，也就是 execCommand 方案。\n\n```jsx\nconst Demo = () => {\n  const [text, setText] = React.useState('');\n  const [state, copyToClipboard] = useCopyToClipboard();\n\n  return (\n    \u003Cdiv>\n      \u003Cinput value={text} onChange={e => setText(e.target.value)} />\n      \u003Cbutton type=\"button\" onClick={() => copyToClipboard(text)}>copy text\u003C/button>\n      {state.error\n        ? \u003Cp>Unable to copy value: {state.error.message}\u003C/p>\n        : state.value && \u003Cp>Copied {state.value}\u003C/p>}\n    \u003C/div>\n  )\n}\n```\n\n#### [Ant Design - Typography](https://ant.design/components/typography-cn#typography-demo-copyable)\n\nahooks 是[小麦茶](https://site.j10ccc.xyz/)第一个报出来的 react hooks 库，由 Ant Design 原班人马维护。不过其在仓库中并没有对剪贴板的封装，因此在小麦茶的建议下我跑去翻了 Ant Design 中的 Typography 对复制能力的实现。和上面的 react-use 一样，都是直接用 [copy-to-clipboard](https://github.com/sudodoki/copy-to-clipboard)，属于 execCommand 方案。\n\n#### [usehooks - useCopyToClipboard](https://usehooks.com/usecopytoclipboard)\n\n这个库是我问 llm 知道的，现在有 10.5k star。非常逆天的一点在于它的所有逻辑代码都是在 index.js 这样一个单文件里实现的，属实是看不懂了。会先采用 `navigator.clipboard.writeText()` 尝试写入，失败后再换用 execCommand 的方案。hooks 的用法和上面的 react-use 大差不差。\n\n#### [usehooks-ts - useCopyToClipboard](https://usehooks-ts.com/react-hook/use-copy-to-clipboard)\n\n不知道是不是为了解决上面那玩意儿不支持 ts 才开的库。只使用 `navigator.clipboard.writeText()` 尝试写入剪切板，失败后直接 `console.warn` 报错，没有 fallback 方案。\n\n## 结语\n\n从结果上来看，VueUse 的封装无疑是最令我满意的。优先尝试性能最好的 Clipboard API，再尝试 execCommand 作为回落，同时辅以多个响应式变量帮助开发，但又不擅作主张地使用 prompt 作为保底，最大程度地把操作空间留给开发者。\n\n站在 2025 年的节点回望，前端剪切板操作技术的演进轨迹清晰可见：从早期依赖 Flash 的脆弱方案，到 execCommand 的曲线救国，最终迈向标准化 Clipboard API 的优雅实现。这段历程不仅是技术迭代的缩影，更折射出前端开发中独特的「妥协艺术」。\n\n在未来的很长一段时间里，或许我们还是会在「优雅实现」与「向下兼容」之间寻找平衡点、在浏览器沙箱里戴着镣铐跳芭蕾，但那些为兼容性而生的临时方案，终将成为见证前端进化史的珍贵注脚。\n\n## 参见\n\n- [JS复制文字到剪贴板的坑及完整方案。](https://liruifengv.com/posts/copy-text/)\n- [ZeroClipboard 学习笔记 | 囧克斯](https://jiongks.name/blog/zeroclipboard-intro)\n- [Cut and copy commands  |  Blog  |  Chrome for Developers](https://developer.chrome.com/blog/cut-and-copy-commands)\n- [execCommand method (Internet Explorer) | Microsoft Learn](https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/ms536419(v=vs.85))\n- [sudodoki/copy-to-clipboard](https://github.com/sudodoki/copy-to-clipboard)\n- [zenorocha/clipboard.js](https://github.com/zenorocha/clipboard.js/)\n- [useClipboard | VueUse](https://vueuse.org/core/useClipboard/)\n- [Side-effects / useCopyToClipboard - Docs ⋅ Storybook](https://streamich.github.io/react-use/?path=/story/side-effects-usecopytoclipboard--docs)\n- [document.execCommand - Web API | MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand)\n- [Clipboard.writeText() - Web API | MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Clipboard/writeText)\n- [Onclick Select All and Copy to Clipboard? - JavaScript - SitePoint Forums | Web Development & Design Community](https://www.sitepoint.com/community/t/onclick-select-all-and-copy-to-clipboard/3837/2)\n- [How would I implement 'copy url to clipboard' from a link or button using javascript or dojo without flash - Stack Overflow](https://stackoverflow.com/questions/16526814/how-would-i-implement-copy-url-to-clipboard-from-a-link-or-button-using-javasc)\n",{"title":5,"description":58},"posts/how-we-copy-text-to-clipboard-with-js-in-2025",false,[1566],"JavaScript","lKfTMrUc6l0hr7Dv3rDhdMsZjjurJ9rieDsJ23ZGW_0",[1569,1574],{"title":1570,"path":1571,"stem":1572,"date":1573,"children":-1},"el-image 和 el-table 怎么就打架了？Stacking Context 是什么？","/2025/05/31/el-image-and-el-table-why-the-fight-and-what-is-a-stacking-context","posts/el-image-and-el-table-why-the-fight-and-what-is-a-stacking-context","2025-05-31 00:29:40",{"title":1575,"path":1576,"stem":1577,"date":1578,"children":-1},"ssh 拯救世界——通过 ssh 隧道在内网服务器执行 APT 更新","/2025/03/30/apt-upgrade-on-internal-server-via-ssh-tunnel-and-reverse-proxy","posts/apt-upgrade-on-internal-server-via-ssh-tunnel-and-reverse-proxy","2025-03-30 21:45:24",1761697384144]