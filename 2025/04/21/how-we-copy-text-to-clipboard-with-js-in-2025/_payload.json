[{"data":1,"prerenderedAt":1845},["ShallowReactive",2],{"post-2025-04-21-how-we-copy-text-to-clipboard-with-js-in-2025":3,"surround-2025-04-21-how-we-copy-text-to-clipboard-with-js-in-2025":1834,"randomIndex/2025/04/21/how-we-copy-text-to-clipboard-with-js-in-2025/":224},{"id":4,"title":5,"body":6,"date":1823,"description":58,"extension":1824,"meta":1825,"navigation":75,"path":1826,"rawbody":1827,"seo":1828,"stem":1829,"sticky":1830,"tags":1831,"__hash__":1833},"posts/posts/how-we-copy-text-to-clipboard-with-js-in-2025.md","2025年，前端如何使用 JS 将文本复制到剪切板？",{"type":7,"value":8,"toc":1806},"minimark",[9,13,23,34,49,52,321,345,348,356,359,364,388,409,415,426,437,741,754,757,766,773,776,779,784,787,819,823,826,850,855,858,861,869,872,885,888,1005,1008,1011,1018,1030,1033,1070,1073,1081,1096,1327,1331,1334,1342,1349,1654,1662,1675,1683,1689,1697,1707,1710,1713,1716,1719,1722,1803],[10,11,12],"h2",{"id":12},"基础原理",[14,15,16,17],"p",{},"如果你尝试在搜索引擎上检索本文的标题，你搜到的文章大概会让你使用下面两个 API。",[18,19,22],"span",{"className":20},[21],"heimu","我希望你用的搜索引擎不至于像某度一样灵车到 2025 年还在让你使用基于 Flash 的 ZeroClipboard 方案",[24,25,27],"h3",{"id":26},"documentexeccommand",[28,29,33],"a",{"href":30,"rel":31},"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand",[32],"nofollow","document.execCommand",[14,35,36,37,42,43,48],{},"2012 年不止有世界末日，还有 IE 10。随着 IE 10 在当年 9 月 4 日发布，execCommand 家族迎来了两个新的成员—— copy/cut 命令（此说法来自 ",[28,38,41],{"href":39,"rel":40},"https://developer.chrome.com/blog/cut-and-copy-commands",[32],"Chrome 的博客","，而 ",[28,44,47],{"href":45,"rel":46},"https://web.archive.org/web/20160315042044/https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand",[32],"MDN 认为 IE 9 就已经支持了","）。三年之后，随着 Google Chrome 在 2015 年 4 月 14 日的发布的 42 版本对 execCommand 的 copy/cut 跟进，越来越多的浏览器厂商开始在自家的浏览器中跟进这个实现标准。最终在 2016 年 9 月 13 日发布的 Safari 10 on IOS 后，WEB 开发者们总算获得了历史上第一个非 Flash 实现的 js 复制到剪切板的方案。",[14,50,51],{},"当 document.execCommand 的第一个参数为 copy 时，可以将用户选中的文本复制到剪切板。基于这个 API 实现，很快便有人研究出了当今 web 下最常见的 js 实现——先创建一个不可见的 dom，用 js 操作模拟用户选中文本，并调用 execCommand('copy') 将文本复制到用户的剪切板。大致的代码实现如下：",[53,54,59],"pre",{"className":55,"code":56,"language":57,"meta":58,"style":58},"language-javascript shiki shiki-themes one-light one-dark-pro","// 来自「JS复制文字到剪贴板的坑及完整方案。」一文，本文结尾有跳转链接\n\nconst textArea = document.createElement(\"textArea\");\ntextArea.value = val;\ntextArea.style.width = 0;\ntextArea.style.position = \"fixed\";\ntextArea.style.left = \"-999px\";\ntextArea.style.top = \"10px\";\ntextArea.setAttribute(\"readonly\", \"readonly\");\ndocument.body.appendChild(textArea);\n\ntextArea.select();\ndocument.execCommand(\"copy\");\ndocument.body.removeChild(textArea);\n","javascript","",[60,61,62,70,77,114,135,159,180,201,222,244,266,271,284,301],"code",{"__ignoreMap":58},[18,63,66],{"class":64,"line":65},"line",1,[18,67,69],{"class":68},"sW2Sy","// 来自「JS复制文字到剪贴板的坑及完整方案。」一文，本文结尾有跳转链接\n",[18,71,73],{"class":64,"line":72},2,[18,74,76],{"emptyLinePlaceholder":75},true,"\n",[18,78,80,84,88,92,96,100,104,107,111],{"class":64,"line":79},3,[18,81,83],{"class":82},"sLKXg","const",[18,85,87],{"class":86},"sNmU0"," textArea",[18,89,91],{"class":90},"s_Sar"," =",[18,93,95],{"class":94},"s7GmK"," document",[18,97,99],{"class":98},"s5ixo",".",[18,101,103],{"class":102},"sAdtL","createElement",[18,105,106],{"class":98},"(",[18,108,110],{"class":109},"sDhpE","\"textArea\"",[18,112,113],{"class":98},");\n",[18,115,117,120,122,126,128,132],{"class":64,"line":116},4,[18,118,119],{"class":94},"textArea",[18,121,99],{"class":98},[18,123,125],{"class":124},"sJa8x","value",[18,127,91],{"class":90},[18,129,131],{"class":130},"sz0mV"," val",[18,133,134],{"class":98},";\n",[18,136,138,140,142,146,148,151,153,157],{"class":64,"line":137},5,[18,139,119],{"class":94},[18,141,99],{"class":98},[18,143,145],{"class":144},"s2QsP","style",[18,147,99],{"class":98},[18,149,150],{"class":124},"width",[18,152,91],{"class":90},[18,154,156],{"class":155},"sAGMh"," 0",[18,158,134],{"class":98},[18,160,162,164,166,168,170,173,175,178],{"class":64,"line":161},6,[18,163,119],{"class":94},[18,165,99],{"class":98},[18,167,145],{"class":144},[18,169,99],{"class":98},[18,171,172],{"class":124},"position",[18,174,91],{"class":90},[18,176,177],{"class":109}," \"fixed\"",[18,179,134],{"class":98},[18,181,183,185,187,189,191,194,196,199],{"class":64,"line":182},7,[18,184,119],{"class":94},[18,186,99],{"class":98},[18,188,145],{"class":144},[18,190,99],{"class":98},[18,192,193],{"class":124},"left",[18,195,91],{"class":90},[18,197,198],{"class":109}," \"-999px\"",[18,200,134],{"class":98},[18,202,204,206,208,210,212,215,217,220],{"class":64,"line":203},8,[18,205,119],{"class":94},[18,207,99],{"class":98},[18,209,145],{"class":144},[18,211,99],{"class":98},[18,213,214],{"class":124},"top",[18,216,91],{"class":90},[18,218,219],{"class":109}," \"10px\"",[18,221,134],{"class":98},[18,223,225,227,229,232,234,237,240,242],{"class":64,"line":224},9,[18,226,119],{"class":94},[18,228,99],{"class":98},[18,230,231],{"class":102},"setAttribute",[18,233,106],{"class":98},[18,235,236],{"class":109},"\"readonly\"",[18,238,239],{"class":98},", ",[18,241,236],{"class":109},[18,243,113],{"class":98},[18,245,247,250,252,255,257,260,262,264],{"class":64,"line":246},10,[18,248,249],{"class":94},"document",[18,251,99],{"class":98},[18,253,254],{"class":144},"body",[18,256,99],{"class":98},[18,258,259],{"class":102},"appendChild",[18,261,106],{"class":98},[18,263,119],{"class":130},[18,265,113],{"class":98},[18,267,269],{"class":64,"line":268},11,[18,270,76],{"emptyLinePlaceholder":75},[18,272,274,276,278,281],{"class":64,"line":273},12,[18,275,119],{"class":94},[18,277,99],{"class":98},[18,279,280],{"class":102},"select",[18,282,283],{"class":98},"();\n",[18,285,287,289,291,294,296,299],{"class":64,"line":286},13,[18,288,249],{"class":94},[18,290,99],{"class":98},[18,292,293],{"class":102},"execCommand",[18,295,106],{"class":98},[18,297,298],{"class":109},"\"copy\"",[18,300,113],{"class":98},[18,302,304,306,308,310,312,315,317,319],{"class":64,"line":303},14,[18,305,249],{"class":94},[18,307,99],{"class":98},[18,309,254],{"class":144},[18,311,99],{"class":98},[18,313,314],{"class":102},"removeChild",[18,316,106],{"class":98},[18,318,119],{"class":130},[18,320,113],{"class":98},[14,322,323,324,328,329,334,335,340,341,344],{},"尽管",[325,326,327],"strong",{},"这个 API 早已被 w3c 弃用","，在 MDN 被标注为 Deprecated，但这仍然是市面上最常见的方案。在编写本文的时候，我扒了扒 MDN 的英文原始页面在 archive.org 的存档及其在 Github 的变更记录，这个 API 在 ",[28,330,333],{"href":331,"rel":332},"https://web.archive.org/web/20200221235207/https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand",[32],"2020 年 1~2 月","被首次标记为 Obsolete（过时的），在 ",[28,336,339],{"href":337,"rel":338},"https://github.com/mdn/content/commit/0c31e2bc4d6601a079bc57521e79529539c8cf68#diff-85ef9d1e72565f0ae2ffd8199d10b34c11c615aec5d116057ac2a33c21cc072f",[32],"2021 年 1 月","被首次标记为 Deprecated（已弃用），并附上了红色 Section Background Color 提示开发者该 API 可能",[325,342,343],{},"随时无法正常工作","。但截至本文发布，所有的常用浏览器都保留着对该 API 的兼容，起码在 copy 命令下是这样的。",[14,346,347],{},"这个 API 被广泛应用在了太多站点，以至于移除对该 API 的支持将会导致大量的站点异常，我想各家浏览器内核在短期内恐怕都没有动力以丢失兼容性为代价去移除这个 API，这也意味着这个创建一个不可见的 dom 代替用户选中文本并执行 execCommand 复制到用户剪切板的（看似奇葩的）曲线救国方案已然在前端开发的历史上留下了浓墨重彩的一笔。",[24,349,351],{"id":350},"clipboardwritetext",[28,352,355],{"href":353,"rel":354},"https://developer.mozilla.org/zh-CN/docs/Web/API/Clipboard/writeText",[32],"Clipboard.writeText()",[14,357,358],{},"随着原生 JS 一步步被增强，开发者们总算补上了 Clipboard 这一块的拼图。2018 年 4 月 17 日，Chrome 66 率先迈出了这一步；同年 10 月 23 日，Firefox 跟进了 ClipBoard API 的实现。最终在 2020 年 3 月 24 日，随着 Apple 自家 Safari 13.4 的姗姗来迟，前端开发者门总算喘了口气，再一次得到了一个主流浏览器通用的复制方案。",[14,360,361],{},[325,362,363],{},"那么 execCommand 明明已经实现了纯 js 实现的复制文本到剪切板了，为什么我们还需要 Clipboard API ？或者说，这个特意去实现的 Clipboard API 到底有什么优势？",[365,366,367,371,374,385],"ol",{},[368,369,370],"li",{},"传统的 execCommand 方案在使用的时候通常需要创建一个临时的不可见的 DOM，放入文本、用 JS 选中文本、执行 copy 命令。我们暂且不说这种 hacky 的方式在代码编写时是多么不优雅，但一个使用 JS 去选中文本这个操作就会修改用户当前的文本选择状态，在某些时候导致一些用户体验的下降。",[368,372,373],{},"Clipboard API 是异步的，这意味着其在复制大量文本时不会阻塞主线程。",[368,375,376,377,380,381,384],{},"Clipboard API 提供了更多的能力，比如 ",[60,378,379],{},"write()"," 和 ",[60,382,383],{},"read()"," 允许对剪切板读写更复杂的数据，比如富文本或图片。",[368,386,387],{},"Clipboard API 具有更现代、更明确的权限控制—— write 操作需要由用户的主动操作来调用，read 操作则需要用户在浏览器 UI 上明确授予权限。这些权限控制给予了用户更大的控制权，因此，当 execCommand 退出历史的舞台后，WEB 的安全性将得到进一步提升。",[14,389,390,391,393,394,397,398,401,402,404,405,408],{},"不过在现阶段，",[60,392,355],{}," 未必就能解决所有的问题。抛开旧版浏览器的兼容性问题不谈，",[60,395,396],{},"navigator.clipboard"," ",[325,399,400],{},"仅在通过 https 访问的页面中可用","（或是 localhost），如果你的项目部署在局域网，你试图通过 192.18.1.x 的 ip + port 直接访问，那么 ",[60,403,396],{}," 将会是 ",[60,406,407],{},"undefined"," 状态。",[14,410,411],{},[412,413],"img",{"alt":58,"src":414},"https://static.031130.xyz/uploads/2025/04/19/3437b1c022853.webp",[14,416,417,418,421,422,425],{},"除此之外，",[325,419,420],{},"安卓原生的 Webview"," 还有因为 Permissions API 没实现而",[325,423,424],{},"用不了"," Clipboard API 的问题。",[14,427,428,429,432,433,436],{},"基于以上原因，很多网站现在都会优先尝试使用 ",[60,430,431],{},"navigator.clipboard.writeText()","，失败后再转去使用 ",[60,434,435],{},"execCommand('copy')","。大致的代码实现如下：",[53,438,440],{"className":55,"code":439,"language":57,"meta":58,"style":58},"// 来自「JS复制文字到剪贴板的坑及完整方案。」一文，本文结尾有跳转链接\n\nconst copyText = async val => {\n  if (navigator.clipboard && navigator.permissions) {\n    await navigator.clipboard.writeText(val);\n  } else {\n    const textArea = document.createElement(\"textArea\");\n    textArea.value = val;\n    textArea.style.width = 0;\n    textArea.style.position = \"fixed\";\n    textArea.style.left = \"-999px\";\n    textArea.style.top = \"10px\";\n    textArea.setAttribute(\"readonly\", \"readonly\");\n    document.body.appendChild(textArea);\n\n    textArea.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(textArea);\n  }\n};\n",[60,441,442,446,450,471,501,524,534,555,570,588,606,624,642,660,679,684,695,710,729,735],{"__ignoreMap":58},[18,443,444],{"class":64,"line":65},[18,445,69],{"class":68},[18,447,448],{"class":64,"line":72},[18,449,76],{"emptyLinePlaceholder":75},[18,451,452,454,457,459,462,465,468],{"class":64,"line":79},[18,453,83],{"class":82},[18,455,456],{"class":102}," copyText",[18,458,91],{"class":90},[18,460,461],{"class":82}," async",[18,463,131],{"class":464},"s8iYz",[18,466,467],{"class":82}," =>",[18,469,470],{"class":98}," {\n",[18,472,473,476,479,482,484,487,490,493,495,498],{"class":64,"line":116},[18,474,475],{"class":82},"  if",[18,477,478],{"class":98}," (",[18,480,481],{"class":94},"navigator",[18,483,99],{"class":98},[18,485,486],{"class":124},"clipboard",[18,488,489],{"class":90}," &&",[18,491,492],{"class":94}," navigator",[18,494,99],{"class":98},[18,496,497],{"class":124},"permissions",[18,499,500],{"class":98},") {\n",[18,502,503,506,508,510,512,514,517,519,522],{"class":64,"line":137},[18,504,505],{"class":82},"    await",[18,507,492],{"class":94},[18,509,99],{"class":98},[18,511,486],{"class":144},[18,513,99],{"class":98},[18,515,516],{"class":102},"writeText",[18,518,106],{"class":98},[18,520,521],{"class":130},"val",[18,523,113],{"class":98},[18,525,526,529,532],{"class":64,"line":161},[18,527,528],{"class":98},"  } ",[18,530,531],{"class":82},"else",[18,533,470],{"class":98},[18,535,536,539,541,543,545,547,549,551,553],{"class":64,"line":182},[18,537,538],{"class":82},"    const",[18,540,87],{"class":86},[18,542,91],{"class":90},[18,544,95],{"class":94},[18,546,99],{"class":98},[18,548,103],{"class":102},[18,550,106],{"class":98},[18,552,110],{"class":109},[18,554,113],{"class":98},[18,556,557,560,562,564,566,568],{"class":64,"line":203},[18,558,559],{"class":94},"    textArea",[18,561,99],{"class":98},[18,563,125],{"class":124},[18,565,91],{"class":90},[18,567,131],{"class":130},[18,569,134],{"class":98},[18,571,572,574,576,578,580,582,584,586],{"class":64,"line":224},[18,573,559],{"class":94},[18,575,99],{"class":98},[18,577,145],{"class":144},[18,579,99],{"class":98},[18,581,150],{"class":124},[18,583,91],{"class":90},[18,585,156],{"class":155},[18,587,134],{"class":98},[18,589,590,592,594,596,598,600,602,604],{"class":64,"line":246},[18,591,559],{"class":94},[18,593,99],{"class":98},[18,595,145],{"class":144},[18,597,99],{"class":98},[18,599,172],{"class":124},[18,601,91],{"class":90},[18,603,177],{"class":109},[18,605,134],{"class":98},[18,607,608,610,612,614,616,618,620,622],{"class":64,"line":268},[18,609,559],{"class":94},[18,611,99],{"class":98},[18,613,145],{"class":144},[18,615,99],{"class":98},[18,617,193],{"class":124},[18,619,91],{"class":90},[18,621,198],{"class":109},[18,623,134],{"class":98},[18,625,626,628,630,632,634,636,638,640],{"class":64,"line":273},[18,627,559],{"class":94},[18,629,99],{"class":98},[18,631,145],{"class":144},[18,633,99],{"class":98},[18,635,214],{"class":124},[18,637,91],{"class":90},[18,639,219],{"class":109},[18,641,134],{"class":98},[18,643,644,646,648,650,652,654,656,658],{"class":64,"line":286},[18,645,559],{"class":94},[18,647,99],{"class":98},[18,649,231],{"class":102},[18,651,106],{"class":98},[18,653,236],{"class":109},[18,655,239],{"class":98},[18,657,236],{"class":109},[18,659,113],{"class":98},[18,661,662,665,667,669,671,673,675,677],{"class":64,"line":303},[18,663,664],{"class":94},"    document",[18,666,99],{"class":98},[18,668,254],{"class":144},[18,670,99],{"class":98},[18,672,259],{"class":102},[18,674,106],{"class":98},[18,676,119],{"class":130},[18,678,113],{"class":98},[18,680,682],{"class":64,"line":681},15,[18,683,76],{"emptyLinePlaceholder":75},[18,685,687,689,691,693],{"class":64,"line":686},16,[18,688,559],{"class":94},[18,690,99],{"class":98},[18,692,280],{"class":102},[18,694,283],{"class":98},[18,696,698,700,702,704,706,708],{"class":64,"line":697},17,[18,699,664],{"class":94},[18,701,99],{"class":98},[18,703,293],{"class":102},[18,705,106],{"class":98},[18,707,298],{"class":109},[18,709,113],{"class":98},[18,711,713,715,717,719,721,723,725,727],{"class":64,"line":712},18,[18,714,664],{"class":94},[18,716,99],{"class":98},[18,718,254],{"class":144},[18,720,99],{"class":98},[18,722,314],{"class":102},[18,724,106],{"class":98},[18,726,119],{"class":130},[18,728,113],{"class":98},[18,730,732],{"class":64,"line":731},19,[18,733,734],{"class":98},"  }\n",[18,736,738],{"class":64,"line":737},20,[18,739,740],{"class":98},"};\n",[24,742,744],{"id":743},"flash-方案zeroclipboard",[745,746,747,748,753],"del",{},"Flash 方案（",[28,749,752],{"href":750,"rel":751},"https://github.com/zeroclipboard/zeroclipboard",[32],"ZeroClipboard","）",[14,755,756],{},"其实上面两个 API 差不多就把基础原理讲完了，不过我在查资料的时候发现，在 execCommand 方案之前，前端居然大多是依靠 Flash 来实现复制文本到剪切板的，这不得拿出来讲讲？",[14,758,759,760,765],{},"目前在 ZeroClipboard 的 Github 仓库能找到的最老的 tag 是 ",[28,761,764],{"href":762,"rel":763},"https://github.com/zeroclipboard/zeroclipboard/releases/tag/v1.0.7",[32],"v1.0.7","，发布于 2012 年 6 月 9 日。我打赌这个项目不是第一个通过 Flash 实现复制文本到剪切板的，在此之前肯定有人使用 Flash 实现过这个功能，只是没单独拎出来作为一个库开源出来。",[14,767,768,769,772],{},"ZeroClipboard 通过创建一个透明的 Flash Movie 覆盖在触发按钮上，当用户点击按钮时，实际上点到的是 Flash Movie，随后 JavaScript 与 Flash Movie 通过 ",[60,770,771],{},"ExternalInterface"," 进行通信，将需要复制的文本传递给 Flash，再经 Flash 的 API 将文本写入用户的剪切板。",[14,774,775],{},"在当时的时代背景下，这是唯一一个能够跨浏览器实现复制文本到剪切板的方案（尽管并不是每台电脑都装有 Flash，尽管 IOS 并不支持 Flash），6.6k star 的 Github 仓库见证了那个各家浏览器抱着各家私有 API 的混沌时代，最终随着 execCommand 方案的崛起，ZeroClipboard 与 Flash 一同落幕。",[24,777,778],{"id":778},"其他不完美的方案",[780,781,783],"h4",{"id":782},"windowclipboarddatasetdata","window.clipboardData.setData",[14,785,786],{},"该 API 主要在 2000 年 —2010 年前后被使用，仅适用于 IE 浏览器。Firefox 在这段时间里还不支持纯 js 实现的复制文本至浏览器的操作；Chrome 第一个版本在 2008 年才发布，尚未成为主流。",[53,788,790],{"className":55,"code":789,"language":57,"meta":58,"style":58},"window.clipboardData.setData(\"Text\", text2copy);\n",[60,791,792],{"__ignoreMap":58},[18,793,794,797,799,802,804,807,809,812,814,817],{"class":64,"line":65},[18,795,796],{"class":94},"window",[18,798,99],{"class":98},[18,800,801],{"class":144},"clipboardData",[18,803,99],{"class":98},[18,805,806],{"class":102},"setData",[18,808,106],{"class":98},[18,810,811],{"class":109},"\"Text\"",[18,813,239],{"class":98},[18,815,816],{"class":130},"text2copy",[18,818,113],{"class":98},[780,820,822],{"id":821},"摆烂prompt","摆烂（prompt）",[14,824,825],{},"调 prompt 弹窗让用户自己复制。",[53,827,829],{"className":55,"code":828,"language":57,"meta":58,"style":58},"prompt('Press Ctrl + C, then Enter to copy to clipboard','copy me')\n",[60,830,831],{"__ignoreMap":58},[18,832,833,836,838,841,844,847],{"class":64,"line":65},[18,834,835],{"class":102},"prompt",[18,837,106],{"class":98},[18,839,840],{"class":109},"'Press Ctrl + C, then Enter to copy to clipboard'",[18,842,843],{"class":98},",",[18,845,846],{"class":109},"'copy me'",[18,848,849],{"class":98},")\n",[14,851,852],{},[412,853],{"alt":58,"src":854},"https://static.031130.xyz/uploads/2025/04/19/7f5310ca03c80.webp",[10,856,857],{"id":857},"第三方库封装",[14,859,860],{},"由于 execCommand 的方案过于抽象，不够优雅，所以我们有一些现成的第三方库对复制到剪切板的代码进行了封装。",[24,862,864],{"id":863},"clipboardjs",[28,865,868],{"href":866,"rel":867},"https://github.com/zenorocha/clipboard.js/",[32],"clipboard.js",[14,870,871],{},"clipboard.js 是最负盛名的一款第三方库，截至本文完成时间，在 Github 共收获 34.1k 的 star。最早的一个 tag 版本发布于 2015 年 10 月 28 日，也就是 Firefox 支持 execCommand、PC 端三大浏览器巨头全面兼容的一个月后。",[14,873,874,875,880,881,884],{},"clipboard.js ",[28,876,879],{"href":877,"rel":878},"https://github.com/zenorocha/clipboard.js/blob/master/src/common/command.js",[32],"仅使用 execCommand"," 实现复制到剪切板的操作，项目的 owner 希望开发者自行使用 ",[60,882,883],{},"ClipboardJS.isSupported()"," 来判断用户的浏览器是否支持 execCommand 方案，并根据命令执行的返回值自行安排成功/失败后的动作。。",[14,886,887],{},"不过让我感到奇怪的是，clipboard.js 在实例化时会要求开发者传入一个 DOM 选择（或者是 HTML 元素/元素列表）。它一定要有一个实体的 html 元素，用设置事件监听器来触发复制操作，而不是提供一个 js 函数让开发者来调用——尽管这不是来自 execCommand 的限制。示例如下",[53,889,893],{"className":890,"code":891,"language":892,"meta":58,"style":58},"language-html shiki shiki-themes one-light one-dark-pro","\u003C!-- Target -->\n\u003Cinput id=\"foo\" value=\"text2copy\" />\n\n\u003C!-- Trigger -->\n\u003Cbutton class=\"btn\" data-clipboard-target=\"#foo\">\u003C/button>\n\n\u003Cscript>\n    new ClipboardJS('.btn');\n\u003C/script>\n","html",[60,894,895,900,928,932,937,968,972,981,996],{"__ignoreMap":58},[18,896,897],{"class":64,"line":65},[18,898,899],{"class":68},"\u003C!-- Target -->\n",[18,901,902,905,908,911,914,917,920,922,925],{"class":64,"line":72},[18,903,904],{"class":98},"\u003C",[18,906,907],{"class":124},"input",[18,909,910],{"class":155}," id",[18,912,913],{"class":98},"=",[18,915,916],{"class":109},"\"foo\"",[18,918,919],{"class":155}," value",[18,921,913],{"class":98},[18,923,924],{"class":109},"\"text2copy\"",[18,926,927],{"class":98}," />\n",[18,929,930],{"class":64,"line":79},[18,931,76],{"emptyLinePlaceholder":75},[18,933,934],{"class":64,"line":116},[18,935,936],{"class":68},"\u003C!-- Trigger -->\n",[18,938,939,941,944,947,949,952,955,957,960,963,965],{"class":64,"line":137},[18,940,904],{"class":98},[18,942,943],{"class":124},"button",[18,945,946],{"class":155}," class",[18,948,913],{"class":98},[18,950,951],{"class":109},"\"btn\"",[18,953,954],{"class":155}," data-clipboard-target",[18,956,913],{"class":98},[18,958,959],{"class":109},"\"#foo\"",[18,961,962],{"class":98},">\u003C/",[18,964,943],{"class":124},[18,966,967],{"class":98},">\n",[18,969,970],{"class":64,"line":161},[18,971,76],{"emptyLinePlaceholder":75},[18,973,974,976,979],{"class":64,"line":182},[18,975,904],{"class":98},[18,977,978],{"class":124},"script",[18,980,967],{"class":98},[18,982,983,986,989,991,994],{"class":64,"line":203},[18,984,985],{"class":82},"    new",[18,987,988],{"class":102}," ClipboardJS",[18,990,106],{"class":98},[18,992,993],{"class":109},"'.btn'",[18,995,113],{"class":98},[18,997,998,1001,1003],{"class":64,"line":224},[18,999,1000],{"class":98},"\u003C/",[18,1002,978],{"class":124},[18,1004,967],{"class":98},[14,1006,1007],{},"对，就一行 js 就能给所有带有 btn class 的 dom 加上监听器。或许这就是为什么这个仓库能获得 34.1k star 的原因，在 2015 年那个大多数人还在用三件套写前端的时代，clipboard.js 能够降低代码量，不用开发者自行设置监听器。",[14,1009,1010],{},"clipboard.js 当然也提供了很多高级选项来满足不同开发者的需求，比如允许你通过传入一个 function 来获取你需要让用户复制的文本而，或是通过 Event 监听器来反馈是否复制成功，总之灵活性是够用的。",[24,1012,1014],{"id":1013},"copy-to-clipboard",[28,1015,1013],{"href":1016,"rel":1017},"https://github.com/sudodoki/copy-to-clipboard",[32],[14,1019,1020,1021,1026,1027,1029],{},"同样是一款",[28,1022,1025],{"href":1023,"rel":1024},"https://github.com/sudodoki/copy-to-clipboard/blob/main/index.js#L79",[32],"利用 execCommand"," 的第三方库，虽然只有 1.3k star。第一个 tag 版本发布于 2015 年的 5 月 24 日，比 clipboard.js 还要早。相比起 clipboard.js，copy-to-clipboard 不依赖 html 元素，可以直接在 js 中被调用，我个人是比较喜欢这个的。在 vue/react 等现代化的前端框架中，我们一般不直接操作 dom，因此并不是很适合使用 clipboard.js，这个 copy-to-clipboard 就挺好的。此外，除了 execCommand 与方案，copy-to-clipboard 还对老版本的 IE 浏览器针对性的适配了 ",[60,1028,783],{}," 的方案，并且在两者都失败时会调用 prompt 窗口让用户自主复制实现最终的兜底。",[14,1031,1032],{},"示例如下:",[53,1034,1036],{"className":55,"code":1035,"language":57,"meta":58,"style":58},"import copy from 'copy-to-clipboard';\n\ncopy('Text');\n",[60,1037,1038,1054,1058],{"__ignoreMap":58},[18,1039,1040,1043,1046,1049,1052],{"class":64,"line":65},[18,1041,1042],{"class":82},"import",[18,1044,1045],{"class":124}," copy",[18,1047,1048],{"class":82}," from",[18,1050,1051],{"class":109}," 'copy-to-clipboard'",[18,1053,134],{"class":98},[18,1055,1056],{"class":64,"line":72},[18,1057,76],{"emptyLinePlaceholder":75},[18,1059,1060,1063,1065,1068],{"class":64,"line":79},[18,1061,1062],{"class":102},"copy",[18,1064,106],{"class":98},[18,1066,1067],{"class":109},"'Text'",[18,1069,113],{"class":98},[14,1071,1072],{},"相比起 clipboard.js 的使用思路是更加直观了，可惜生不逢时，不如 clipboard.js 出名（也可能有取名的原因在里面）。",[24,1074,1076],{"id":1075},"vueuse-useclipboard",[28,1077,1080],{"href":1078,"rel":1079},"https://vueuse.org/core/useClipboard/",[32],"VueUse - useClipboard",[14,1082,1083,1084,1089,1090,397,1092,1095],{},"VueUse 实现的这个 useClipboard 是令我最为满意的一个。useClipboard 充分考虑了浏览器的兼容性，在检测到满足 navigator.clipboard 的使用条件时",[325,1085,1086,1087],{},"优先使用 ",[60,1088,431],{}," ，在不支持 navigator.clipboard 或者 ",[60,1091,431],{},[325,1093,1094],{},"复制失败时转去使用 execCommand 实现的 legacyCopy","，并且借助 Vue3 中的 Composables 实现了一个 1.5 秒后自动恢复初始状态的 copied 变量，算是很有心了。",[53,1097,1101],{"className":1098,"code":1099,"language":1100,"meta":58,"style":58},"language-vue shiki shiki-themes one-light one-dark-pro","const { text, copy, copied, isSupported } = useClipboard({ source })\n\u003C/script>\n\n\u003Ctemplate>\n  \u003Cdiv v-if=\"isSupported\">\n    \u003Cbutton @click=\"copy(source)\">\n      \u003C!-- by default, `copied` will be reset in 1.5s -->\n      \u003Cspan v-if=\"!copied\">Copy\u003C/span>\n      \u003Cspan v-else>Copied!\u003C/span>\n    \u003C/button>\n    \u003Cp>Current copied: \u003Ccode>{{ text || 'none' }}\u003C/code>\u003C/p>\n  \u003C/div>\n  \u003Cp v-else>\n    Your browser does not support Clipboard API\n  \u003C/p>\n\u003C/template>\n","vue",[60,1102,1103,1108,1116,1120,1129,1152,1183,1194,1222,1238,1247,1287,1296,1306,1311,1319],{"__ignoreMap":58},[18,1104,1105],{"class":64,"line":65},[18,1106,1107],{"class":98},"const { text, copy, copied, isSupported } = useClipboard({ source })\n",[18,1109,1110,1112,1114],{"class":64,"line":72},[18,1111,1000],{"class":98},[18,1113,978],{"class":124},[18,1115,967],{"class":98},[18,1117,1118],{"class":64,"line":79},[18,1119,76],{"emptyLinePlaceholder":75},[18,1121,1122,1124,1127],{"class":64,"line":116},[18,1123,904],{"class":98},[18,1125,1126],{"class":124},"template",[18,1128,967],{"class":98},[18,1130,1131,1134,1137,1140,1142,1145,1148,1150],{"class":64,"line":137},[18,1132,1133],{"class":98},"  \u003C",[18,1135,1136],{"class":124},"div",[18,1138,1139],{"class":82}," v-if",[18,1141,913],{"class":98},[18,1143,1144],{"class":98},"\"",[18,1146,1147],{"class":130},"isSupported",[18,1149,1144],{"class":98},[18,1151,967],{"class":98},[18,1153,1154,1157,1159,1162,1165,1167,1169,1171,1173,1176,1179,1181],{"class":64,"line":161},[18,1155,1156],{"class":98},"    \u003C",[18,1158,943],{"class":124},[18,1160,1161],{"class":98}," @",[18,1163,1164],{"class":155},"click",[18,1166,913],{"class":98},[18,1168,1144],{"class":98},[18,1170,1062],{"class":102},[18,1172,106],{"class":98},[18,1174,1175],{"class":130},"source",[18,1177,1178],{"class":98},")",[18,1180,1144],{"class":98},[18,1182,967],{"class":98},[18,1184,1185,1188,1191],{"class":64,"line":182},[18,1186,1187],{"class":98},"      \u003C!-- by default, `copied` will be reset in 1.",[18,1189,1190],{"class":155},"5s",[18,1192,1193],{"class":98}," -->\n",[18,1195,1196,1199,1201,1203,1205,1207,1210,1213,1215,1218,1220],{"class":64,"line":203},[18,1197,1198],{"class":98},"      \u003C",[18,1200,18],{"class":124},[18,1202,1139],{"class":82},[18,1204,913],{"class":98},[18,1206,1144],{"class":98},[18,1208,1209],{"class":90},"!",[18,1211,1212],{"class":130},"copied",[18,1214,1144],{"class":98},[18,1216,1217],{"class":98},">Copy\u003C/",[18,1219,18],{"class":124},[18,1221,967],{"class":98},[18,1223,1224,1226,1228,1231,1234,1236],{"class":64,"line":224},[18,1225,1198],{"class":98},[18,1227,18],{"class":124},[18,1229,1230],{"class":82}," v-else",[18,1232,1233],{"class":98},">Copied!\u003C/",[18,1235,18],{"class":124},[18,1237,967],{"class":98},[18,1239,1240,1243,1245],{"class":64,"line":246},[18,1241,1242],{"class":98},"    \u003C/",[18,1244,943],{"class":124},[18,1246,967],{"class":98},[18,1248,1249,1251,1253,1256,1258,1261,1265,1268,1271,1274,1277,1279,1281,1283,1285],{"class":64,"line":268},[18,1250,1156],{"class":98},[18,1252,14],{"class":124},[18,1254,1255],{"class":98},">Current copied: \u003C",[18,1257,60],{"class":124},[18,1259,1260],{"class":98},">",[18,1262,1264],{"class":1263},"sblXP","{",[18,1266,1267],{"class":98},"{ text || ",[18,1269,1270],{"class":109},"'none'",[18,1272,1273],{"class":98}," }",[18,1275,1276],{"class":1263},"}",[18,1278,1000],{"class":98},[18,1280,60],{"class":124},[18,1282,962],{"class":98},[18,1284,14],{"class":124},[18,1286,967],{"class":98},[18,1288,1289,1292,1294],{"class":64,"line":273},[18,1290,1291],{"class":98},"  \u003C/",[18,1293,1136],{"class":124},[18,1295,967],{"class":98},[18,1297,1298,1300,1302,1304],{"class":64,"line":286},[18,1299,1133],{"class":98},[18,1301,14],{"class":124},[18,1303,1230],{"class":82},[18,1305,967],{"class":98},[18,1307,1308],{"class":64,"line":303},[18,1309,1310],{"class":98},"    Your browser does not support Clipboard API\n",[18,1312,1313,1315,1317],{"class":64,"line":681},[18,1314,1291],{"class":98},[18,1316,14],{"class":124},[18,1318,967],{"class":98},[18,1320,1321,1323,1325],{"class":64,"line":686},[18,1322,1000],{"class":98},[18,1324,1126],{"class":124},[18,1326,967],{"class":98},[24,1328,1330],{"id":1329},"react-相关生态","React 相关生态",[14,1332,1333],{},"React 这边不像 VueUse 一家独大，出现了很多可用的 hooks 库，那就全都过一遍",[780,1335,1337],{"id":1336},"react-use-usecopytoclipboard",[28,1338,1341],{"href":1339,"rel":1340},"https://github.com/streamich/react-use",[32],"react-use - useCopyToClipboard",[14,1343,1344,1345,1348],{},"react-use 是我能搜到的目前最大的 React Hooks 库，42.9k star。采用的复制方案是直接依赖上面介绍过的 ",[28,1346,1013],{"href":1016,"rel":1347},[32],"，也就是 execCommand 方案。",[53,1350,1354],{"className":1351,"code":1352,"language":1353,"meta":58,"style":58},"language-jsx shiki shiki-themes one-light one-dark-pro","const Demo = () => {\n  const [text, setText] = React.useState('');\n  const [state, copyToClipboard] = useCopyToClipboard();\n\n  return (\n    \u003Cdiv>\n      \u003Cinput value={text} onChange={e => setText(e.target.value)} />\n      \u003Cbutton type=\"button\" onClick={() => copyToClipboard(text)}>copy text\u003C/button>\n      {state.error\n        ? \u003Cp>Unable to copy value: {state.error.message}\u003C/p>\n        : state.value && \u003Cp>Copied {state.value}\u003C/p>}\n    \u003C/div>\n  )\n}\n","jsx",[60,1355,1356,1373,1409,1432,1436,1444,1452,1504,1548,1561,1597,1637,1645,1650],{"__ignoreMap":58},[18,1357,1358,1360,1363,1365,1368,1371],{"class":64,"line":65},[18,1359,83],{"class":82},[18,1361,1362],{"class":102}," Demo",[18,1364,91],{"class":90},[18,1366,1367],{"class":98}," () ",[18,1369,1370],{"class":82},"=>",[18,1372,470],{"class":98},[18,1374,1375,1378,1381,1384,1386,1389,1392,1394,1397,1399,1402,1404,1407],{"class":64,"line":72},[18,1376,1377],{"class":82},"  const",[18,1379,1380],{"class":98}," [",[18,1382,1383],{"class":86},"text",[18,1385,239],{"class":98},[18,1387,1388],{"class":86},"setText",[18,1390,1391],{"class":98},"] ",[18,1393,913],{"class":90},[18,1395,1396],{"class":94}," React",[18,1398,99],{"class":98},[18,1400,1401],{"class":102},"useState",[18,1403,106],{"class":98},[18,1405,1406],{"class":109},"''",[18,1408,113],{"class":98},[18,1410,1411,1413,1415,1418,1420,1423,1425,1427,1430],{"class":64,"line":79},[18,1412,1377],{"class":82},[18,1414,1380],{"class":98},[18,1416,1417],{"class":86},"state",[18,1419,239],{"class":98},[18,1421,1422],{"class":86},"copyToClipboard",[18,1424,1391],{"class":98},[18,1426,913],{"class":90},[18,1428,1429],{"class":102}," useCopyToClipboard",[18,1431,283],{"class":98},[18,1433,1434],{"class":64,"line":116},[18,1435,76],{"emptyLinePlaceholder":75},[18,1437,1438,1441],{"class":64,"line":137},[18,1439,1440],{"class":82},"  return",[18,1442,1443],{"class":98}," (\n",[18,1445,1446,1448,1450],{"class":64,"line":161},[18,1447,1156],{"class":98},[18,1449,1136],{"class":124},[18,1451,967],{"class":98},[18,1453,1454,1456,1458,1461,1464,1466,1468,1470,1473,1475,1477,1480,1482,1485,1487,1489,1491,1494,1496,1498,1500,1502],{"class":64,"line":182},[18,1455,1198],{"class":98},[18,1457,907],{"class":124},[18,1459,919],{"class":1460},"so_Uh",[18,1462,913],{"class":1463},"sknuh",[18,1465,1264],{"class":1263},[18,1467,1383],{"class":130},[18,1469,1276],{"class":1263},[18,1471,1472],{"class":1460}," onChange",[18,1474,913],{"class":1463},[18,1476,1264],{"class":1263},[18,1478,1479],{"class":464},"e",[18,1481,467],{"class":82},[18,1483,1484],{"class":102}," setText",[18,1486,106],{"class":98},[18,1488,1479],{"class":94},[18,1490,99],{"class":98},[18,1492,1493],{"class":144},"target",[18,1495,99],{"class":98},[18,1497,125],{"class":124},[18,1499,1178],{"class":98},[18,1501,1276],{"class":1263},[18,1503,927],{"class":98},[18,1505,1506,1508,1510,1513,1515,1518,1521,1523,1525,1528,1530,1533,1535,1537,1539,1541,1544,1546],{"class":64,"line":203},[18,1507,1198],{"class":98},[18,1509,943],{"class":124},[18,1511,1512],{"class":1460}," type",[18,1514,913],{"class":1463},[18,1516,1517],{"class":109},"\"button\"",[18,1519,1520],{"class":1460}," onClick",[18,1522,913],{"class":1463},[18,1524,1264],{"class":1263},[18,1526,1527],{"class":98},"() ",[18,1529,1370],{"class":82},[18,1531,1532],{"class":102}," copyToClipboard",[18,1534,106],{"class":98},[18,1536,1383],{"class":130},[18,1538,1178],{"class":98},[18,1540,1276],{"class":1263},[18,1542,1543],{"class":98},">copy text\u003C/",[18,1545,943],{"class":124},[18,1547,967],{"class":98},[18,1549,1550,1554,1556,1558],{"class":64,"line":224},[18,1551,1553],{"class":1552},"sAOjX","      {",[18,1555,1417],{"class":94},[18,1557,99],{"class":98},[18,1559,1560],{"class":124},"error\n",[18,1562,1563,1567,1570,1572,1575,1577,1579,1581,1584,1586,1589,1591,1593,1595],{"class":64,"line":246},[18,1564,1566],{"class":1565},"s7DPa","        ?",[18,1568,1569],{"class":98}," \u003C",[18,1571,14],{"class":124},[18,1573,1574],{"class":98},">Unable to copy value: ",[18,1576,1264],{"class":1552},[18,1578,1417],{"class":94},[18,1580,99],{"class":98},[18,1582,1583],{"class":144},"error",[18,1585,99],{"class":98},[18,1587,1588],{"class":124},"message",[18,1590,1276],{"class":1552},[18,1592,1000],{"class":98},[18,1594,14],{"class":124},[18,1596,967],{"class":98},[18,1598,1599,1602,1605,1607,1609,1611,1613,1615,1618,1620,1622,1624,1626,1628,1630,1632,1634],{"class":64,"line":268},[18,1600,1601],{"class":1565},"        :",[18,1603,1604],{"class":94}," state",[18,1606,99],{"class":98},[18,1608,125],{"class":124},[18,1610,489],{"class":90},[18,1612,1569],{"class":98},[18,1614,14],{"class":124},[18,1616,1617],{"class":98},">Copied ",[18,1619,1264],{"class":1552},[18,1621,1417],{"class":94},[18,1623,99],{"class":98},[18,1625,125],{"class":124},[18,1627,1276],{"class":1552},[18,1629,1000],{"class":98},[18,1631,14],{"class":124},[18,1633,1260],{"class":98},[18,1635,1636],{"class":1552},"}\n",[18,1638,1639,1641,1643],{"class":64,"line":273},[18,1640,1242],{"class":98},[18,1642,1136],{"class":124},[18,1644,967],{"class":98},[18,1646,1647],{"class":64,"line":286},[18,1648,1649],{"class":98},"  )\n",[18,1651,1652],{"class":64,"line":303},[18,1653,1636],{"class":98},[780,1655,1657],{"id":1656},"ant-design-typography",[28,1658,1661],{"href":1659,"rel":1660},"https://ant.design/components/typography-cn#typography-demo-copyable",[32],"Ant Design - Typography",[14,1663,1664,1665,1670,1671,1674],{},"ahooks 是",[28,1666,1669],{"href":1667,"rel":1668},"https://site.j10ccc.xyz/",[32],"小麦茶","第一个报出来的 react hooks 库，由 Ant Design 原班人马维护。不过其在仓库中并没有对剪贴板的封装，因此在小麦茶的建议下我跑去翻了 Ant Design 中的 Typography 对复制能力的实现。和上面的 react-use 一样，都是直接用 ",[28,1672,1013],{"href":1016,"rel":1673},[32],"，属于 execCommand 方案。",[780,1676,1678],{"id":1677},"usehooks-usecopytoclipboard",[28,1679,1682],{"href":1680,"rel":1681},"https://usehooks.com/usecopytoclipboard",[32],"usehooks - useCopyToClipboard",[14,1684,1685,1686,1688],{},"这个库是我问 llm 知道的，现在有 10.5k star。非常逆天的一点在于它的所有逻辑代码都是在 index.js 这样一个单文件里实现的，属实是看不懂了。会先采用 ",[60,1687,431],{}," 尝试写入，失败后再换用 execCommand 的方案。hooks 的用法和上面的 react-use 大差不差。",[780,1690,1692],{"id":1691},"usehooks-ts-usecopytoclipboard",[28,1693,1696],{"href":1694,"rel":1695},"https://usehooks-ts.com/react-hook/use-copy-to-clipboard",[32],"usehooks-ts - useCopyToClipboard",[14,1698,1699,1700,1702,1703,1706],{},"不知道是不是为了解决上面那玩意儿不支持 ts 才开的库。只使用 ",[60,1701,431],{}," 尝试写入剪切板，失败后直接 ",[60,1704,1705],{},"console.warn"," 报错，没有 fallback 方案。",[10,1708,1709],{"id":1709},"结语",[14,1711,1712],{},"从结果上来看，VueUse 的封装无疑是最令我满意的。优先尝试性能最好的 Clipboard API，再尝试 execCommand 作为回落，同时辅以多个响应式变量帮助开发，但又不擅作主张地使用 prompt 作为保底，最大程度地把操作空间留给开发者。",[14,1714,1715],{},"站在 2025 年的节点回望，前端剪切板操作技术的演进轨迹清晰可见：从早期依赖 Flash 的脆弱方案，到 execCommand 的曲线救国，最终迈向标准化 Clipboard API 的优雅实现。这段历程不仅是技术迭代的缩影，更折射出前端开发中独特的「妥协艺术」。",[14,1717,1718],{},"在未来的很长一段时间里，或许我们还是会在「优雅实现」与「向下兼容」之间寻找平衡点、在浏览器沙箱里戴着镣铐跳芭蕾，但那些为兼容性而生的临时方案，终将成为见证前端进化史的珍贵注脚。",[10,1720,1721],{"id":1721},"参见",[1723,1724,1725,1732,1739,1745,1752,1758,1764,1770,1777,1783,1789,1796],"ul",{},[368,1726,1727],{},[28,1728,1731],{"href":1729,"rel":1730},"https://liruifengv.com/posts/copy-text/",[32],"JS复制文字到剪贴板的坑及完整方案。",[368,1733,1734],{},[28,1735,1738],{"href":1736,"rel":1737},"https://jiongks.name/blog/zeroclipboard-intro",[32],"ZeroClipboard 学习笔记 | 囧克斯",[368,1740,1741],{},[28,1742,1744],{"href":39,"rel":1743},[32],"Cut and copy commands  |  Blog  |  Chrome for Developers",[368,1746,1747],{},[28,1748,1751],{"href":1749,"rel":1750},"https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/ms536419(v=vs.85)",[32],"execCommand method (Internet Explorer) | Microsoft Learn",[368,1753,1754],{},[28,1755,1757],{"href":1016,"rel":1756},[32],"sudodoki/copy-to-clipboard",[368,1759,1760],{},[28,1761,1763],{"href":866,"rel":1762},[32],"zenorocha/clipboard.js",[368,1765,1766],{},[28,1767,1769],{"href":1078,"rel":1768},[32],"useClipboard | VueUse",[368,1771,1772],{},[28,1773,1776],{"href":1774,"rel":1775},"https://streamich.github.io/react-use/?path=/story/side-effects-usecopytoclipboard--docs",[32],"Side-effects / useCopyToClipboard - Docs ⋅ Storybook",[368,1778,1779],{},[28,1780,1782],{"href":30,"rel":1781},[32],"document.execCommand - Web API | MDN",[368,1784,1785],{},[28,1786,1788],{"href":353,"rel":1787},[32],"Clipboard.writeText() - Web API | MDN",[368,1790,1791],{},[28,1792,1795],{"href":1793,"rel":1794},"https://www.sitepoint.com/community/t/onclick-select-all-and-copy-to-clipboard/3837/2",[32],"Onclick Select All and Copy to Clipboard? - JavaScript - SitePoint Forums | Web Development & Design Community",[368,1797,1798],{},[28,1799,1802],{"href":1800,"rel":1801},"https://stackoverflow.com/questions/16526814/how-would-i-implement-copy-url-to-clipboard-from-a-link-or-button-using-javasc",[32],"How would I implement 'copy url to clipboard' from a link or button using javascript or dojo without flash - Stack Overflow",[145,1804,1805],{},"html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .sNmU0, html code.shiki .sNmU0{--shiki-default:#986801;--shiki-dark:#E5C07B}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .s7GmK, html code.shiki .s7GmK{--shiki-default:#383A42;--shiki-dark:#E5C07B}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sz0mV, html code.shiki .sz0mV{--shiki-default:#383A42;--shiki-dark:#E06C75}html pre.shiki code .s2QsP, html code.shiki .s2QsP{--shiki-default:#E45649;--shiki-dark:#E5C07B}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s8iYz, html code.shiki .s8iYz{--shiki-default:#383A42;--shiki-default-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic}html pre.shiki code .sblXP, html code.shiki .sblXP{--shiki-default:#383A42;--shiki-dark:#C678DD}html pre.shiki code .so_Uh, html code.shiki .so_Uh{--shiki-default:#986801;--shiki-default-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic}html pre.shiki code .sknuh, html code.shiki .sknuh{--shiki-default:#383A42;--shiki-dark:#56B6C2}html pre.shiki code .sAOjX, html code.shiki .sAOjX{--shiki-default:#CA1243;--shiki-dark:#C678DD}html pre.shiki code .s7DPa, html code.shiki .s7DPa{--shiki-default:#0184BC;--shiki-dark:#C678DD}",{"title":58,"searchDepth":72,"depth":72,"links":1807},[1808,1815,1821,1822],{"id":12,"depth":72,"text":12,"children":1809},[1810,1811,1812,1814],{"id":26,"depth":79,"text":33},{"id":350,"depth":79,"text":355},{"id":743,"depth":79,"text":1813},"Flash 方案（ZeroClipboard）",{"id":778,"depth":79,"text":778},{"id":857,"depth":72,"text":857,"children":1816},[1817,1818,1819,1820],{"id":863,"depth":79,"text":868},{"id":1013,"depth":79,"text":1013},{"id":1075,"depth":79,"text":1080},{"id":1329,"depth":79,"text":1330},{"id":1709,"depth":72,"text":1709},{"id":1721,"depth":72,"text":1721},"2025-04-21 19:48:05","md",{},"/2025/04/21/how-we-copy-text-to-clipboard-with-js-in-2025","---\ntitle: 2025年，前端如何使用 JS 将文本复制到剪切板？\ndate: 2025-04-21 19:48:05\nsticky:\ntags:\n- JavaScript\n---\n\n## 基础原理\n\n如果你尝试在搜索引擎上检索本文的标题，你搜到的文章大概会让你使用下面两个 API。\u003Cspan class=\"heimu\">我希望你用的搜索引擎不至于像某度一样灵车到 2025 年还在让你使用基于 Flash 的 ZeroClipboard 方案\u003C/span>\n\n### [document.execCommand](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand)\n\n2012 年不止有世界末日，还有 IE 10。随着 IE 10 在当年 9 月 4 日发布，execCommand 家族迎来了两个新的成员—— copy/cut 命令（此说法来自 [Chrome 的博客](https://developer.chrome.com/blog/cut-and-copy-commands)，而 [MDN 认为 IE 9 就已经支持了](https://web.archive.org/web/20160315042044/https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand)）。三年之后，随着 Google Chrome 在 2015 年 4 月 14 日的发布的 42 版本对 execCommand 的 copy/cut 跟进，越来越多的浏览器厂商开始在自家的浏览器中跟进这个实现标准。最终在 2016 年 9 月 13 日发布的 Safari 10 on IOS 后，WEB 开发者们总算获得了历史上第一个非 Flash 实现的 js 复制到剪切板的方案。\n\n当 document.execCommand 的第一个参数为 copy 时，可以将用户选中的文本复制到剪切板。基于这个 API 实现，很快便有人研究出了当今 web 下最常见的 js 实现——先创建一个不可见的 dom，用 js 操作模拟用户选中文本，并调用 execCommand('copy') 将文本复制到用户的剪切板。大致的代码实现如下：\n\n```javascript\n// 来自「JS复制文字到剪贴板的坑及完整方案。」一文，本文结尾有跳转链接\n\nconst textArea = document.createElement(\"textArea\");\ntextArea.value = val;\ntextArea.style.width = 0;\ntextArea.style.position = \"fixed\";\ntextArea.style.left = \"-999px\";\ntextArea.style.top = \"10px\";\ntextArea.setAttribute(\"readonly\", \"readonly\");\ndocument.body.appendChild(textArea);\n\ntextArea.select();\ndocument.execCommand(\"copy\");\ndocument.body.removeChild(textArea);\n```\n\n尽管**这个 API 早已被 w3c 弃用**，在 MDN 被标注为 Deprecated，但这仍然是市面上最常见的方案。在编写本文的时候，我扒了扒 MDN 的英文原始页面在 archive.org 的存档及其在 Github 的变更记录，这个 API 在 [2020 年 1~2 月](https://web.archive.org/web/20200221235207/https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand)被首次标记为 Obsolete（过时的），在 [2021 年 1 月](https://github.com/mdn/content/commit/0c31e2bc4d6601a079bc57521e79529539c8cf68#diff-85ef9d1e72565f0ae2ffd8199d10b34c11c615aec5d116057ac2a33c21cc072f)被首次标记为 Deprecated（已弃用），并附上了红色 Section Background Color 提示开发者该 API 可能**随时无法正常工作**。但截至本文发布，所有的常用浏览器都保留着对该 API 的兼容，起码在 copy 命令下是这样的。\n\n这个 API 被广泛应用在了太多站点，以至于移除对该 API 的支持将会导致大量的站点异常，我想各家浏览器内核在短期内恐怕都没有动力以丢失兼容性为代价去移除这个 API，这也意味着这个创建一个不可见的 dom 代替用户选中文本并执行 execCommand 复制到用户剪切板的（看似奇葩的）曲线救国方案已然在前端开发的历史上留下了浓墨重彩的一笔。\n\n### [Clipboard.writeText()](https://developer.mozilla.org/zh-CN/docs/Web/API/Clipboard/writeText)\n\n随着原生 JS 一步步被增强，开发者们总算补上了 Clipboard 这一块的拼图。2018 年 4 月 17 日，Chrome 66 率先迈出了这一步；同年 10 月 23 日，Firefox 跟进了 ClipBoard API 的实现。最终在 2020 年 3 月 24 日，随着 Apple 自家 Safari 13.4 的姗姗来迟，前端开发者门总算喘了口气，再一次得到了一个主流浏览器通用的复制方案。\n\n**那么 execCommand 明明已经实现了纯 js 实现的复制文本到剪切板了，为什么我们还需要 Clipboard API ？或者说，这个特意去实现的 Clipboard API 到底有什么优势？**\n\n1. 传统的 execCommand 方案在使用的时候通常需要创建一个临时的不可见的 DOM，放入文本、用 JS 选中文本、执行 copy 命令。我们暂且不说这种 hacky 的方式在代码编写时是多么不优雅，但一个使用 JS 去选中文本这个操作就会修改用户当前的文本选择状态，在某些时候导致一些用户体验的下降。\n2. Clipboard API 是异步的，这意味着其在复制大量文本时不会阻塞主线程。\n3. Clipboard API 提供了更多的能力，比如 `write()` 和 `read()` 允许对剪切板读写更复杂的数据，比如富文本或图片。\n4. Clipboard API 具有更现代、更明确的权限控制—— write 操作需要由用户的主动操作来调用，read 操作则需要用户在浏览器 UI 上明确授予权限。这些权限控制给予了用户更大的控制权，因此，当 execCommand 退出历史的舞台后，WEB 的安全性将得到进一步提升。\n\n不过在现阶段，`Clipboard.writeText()` 未必就能解决所有的问题。抛开旧版浏览器的兼容性问题不谈，`navigator.clipboard` **仅在通过 https 访问的页面中可用**（或是 localhost），如果你的项目部署在局域网，你试图通过 192.18.1.x 的 ip + port 直接访问，那么 `navigator.clipboard` 将会是 `undefined` 状态。\n\n![](https://static.031130.xyz/uploads/2025/04/19/3437b1c022853.webp)\n\n除此之外，**安卓原生的 Webview** 还有因为 Permissions API 没实现而**用不了** Clipboard API 的问题。\n\n基于以上原因，很多网站现在都会优先尝试使用 `navigator.clipboard.writeText()`，失败后再转去使用 `execCommand('copy')`。大致的代码实现如下：\n\n```javascript\n// 来自「JS复制文字到剪贴板的坑及完整方案。」一文，本文结尾有跳转链接\n\nconst copyText = async val => {\n  if (navigator.clipboard && navigator.permissions) {\n    await navigator.clipboard.writeText(val);\n  } else {\n    const textArea = document.createElement(\"textArea\");\n    textArea.value = val;\n    textArea.style.width = 0;\n    textArea.style.position = \"fixed\";\n    textArea.style.left = \"-999px\";\n    textArea.style.top = \"10px\";\n    textArea.setAttribute(\"readonly\", \"readonly\");\n    document.body.appendChild(textArea);\n\n    textArea.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(textArea);\n  }\n};\n```\n\n### ~~Flash 方案（[ZeroClipboard](https://github.com/zeroclipboard/zeroclipboard)）~~\n\n其实上面两个 API 差不多就把基础原理讲完了，不过我在查资料的时候发现，在 execCommand 方案之前，前端居然大多是依靠 Flash 来实现复制文本到剪切板的，这不得拿出来讲讲？\n\n目前在 ZeroClipboard 的 Github 仓库能找到的最老的 tag 是 [v1.0.7](https://github.com/zeroclipboard/zeroclipboard/releases/tag/v1.0.7)，发布于 2012 年 6 月 9 日。我打赌这个项目不是第一个通过 Flash 实现复制文本到剪切板的，在此之前肯定有人使用 Flash 实现过这个功能，只是没单独拎出来作为一个库开源出来。\n\nZeroClipboard 通过创建一个透明的 Flash Movie 覆盖在触发按钮上，当用户点击按钮时，实际上点到的是 Flash Movie，随后 JavaScript 与 Flash Movie 通过 `ExternalInterface` 进行通信，将需要复制的文本传递给 Flash，再经 Flash 的 API 将文本写入用户的剪切板。\n\n在当时的时代背景下，这是唯一一个能够跨浏览器实现复制文本到剪切板的方案（尽管并不是每台电脑都装有 Flash，尽管 IOS 并不支持 Flash），6.6k star 的 Github 仓库见证了那个各家浏览器抱着各家私有 API 的混沌时代，最终随着 execCommand 方案的崛起，ZeroClipboard 与 Flash 一同落幕。\n\n### 其他不完美的方案\n\n#### window.clipboardData.setData\n\n该 API 主要在 2000 年 —2010 年前后被使用，仅适用于 IE 浏览器。Firefox 在这段时间里还不支持纯 js 实现的复制文本至浏览器的操作；Chrome 第一个版本在 2008 年才发布，尚未成为主流。\n\n```javascript\nwindow.clipboardData.setData(\"Text\", text2copy);\n```\n\n#### 摆烂（prompt）\n\n调 prompt 弹窗让用户自己复制。\n\n```javascript\nprompt('Press Ctrl + C, then Enter to copy to clipboard','copy me')\n```\n\n![](https://static.031130.xyz/uploads/2025/04/19/7f5310ca03c80.webp)\n\n## 第三方库封装\n\n由于 execCommand 的方案过于抽象，不够优雅，所以我们有一些现成的第三方库对复制到剪切板的代码进行了封装。\n\n### [clipboard.js](https://github.com/zenorocha/clipboard.js/)\n\nclipboard.js 是最负盛名的一款第三方库，截至本文完成时间，在 Github 共收获 34.1k 的 star。最早的一个 tag 版本发布于 2015 年 10 月 28 日，也就是 Firefox 支持 execCommand、PC 端三大浏览器巨头全面兼容的一个月后。\n\nclipboard.js [仅使用 execCommand](https://github.com/zenorocha/clipboard.js/blob/master/src/common/command.js) 实现复制到剪切板的操作，项目的 owner 希望开发者自行使用 `ClipboardJS.isSupported()` 来判断用户的浏览器是否支持 execCommand 方案，并根据命令执行的返回值自行安排成功/失败后的动作。。\n\n不过让我感到奇怪的是，clipboard.js 在实例化时会要求开发者传入一个 DOM 选择（或者是 HTML 元素/元素列表）。它一定要有一个实体的 html 元素，用设置事件监听器来触发复制操作，而不是提供一个 js 函数让开发者来调用——尽管这不是来自 execCommand 的限制。示例如下\n\n```html\n\u003C!-- Target -->\n\u003Cinput id=\"foo\" value=\"text2copy\" />\n\n\u003C!-- Trigger -->\n\u003Cbutton class=\"btn\" data-clipboard-target=\"#foo\">\u003C/button>\n\n\u003Cscript>\n\tnew ClipboardJS('.btn');\n\u003C/script>\n```\n\n对，就一行 js 就能给所有带有 btn class 的 dom 加上监听器。或许这就是为什么这个仓库能获得 34.1k star 的原因，在 2015 年那个大多数人还在用三件套写前端的时代，clipboard.js 能够降低代码量，不用开发者自行设置监听器。\n\nclipboard.js 当然也提供了很多高级选项来满足不同开发者的需求，比如允许你通过传入一个 function 来获取你需要让用户复制的文本而，或是通过 Event 监听器来反馈是否复制成功，总之灵活性是够用的。\n\n### [copy-to-clipboard](https://github.com/sudodoki/copy-to-clipboard)\n\n同样是一款[利用 execCommand](https://github.com/sudodoki/copy-to-clipboard/blob/main/index.js#L79) 的第三方库，虽然只有 1.3k star。第一个 tag 版本发布于 2015 年的 5 月 24 日，比 clipboard.js 还要早。相比起 clipboard.js，copy-to-clipboard 不依赖 html 元素，可以直接在 js 中被调用，我个人是比较喜欢这个的。在 vue/react 等现代化的前端框架中，我们一般不直接操作 dom，因此并不是很适合使用 clipboard.js，这个 copy-to-clipboard 就挺好的。此外，除了 execCommand 与方案，copy-to-clipboard 还对老版本的 IE 浏览器针对性的适配了 `window.clipboardData.setData` 的方案，并且在两者都失败时会调用 prompt 窗口让用户自主复制实现最终的兜底。\n\n示例如下:\n\n```javascript\nimport copy from 'copy-to-clipboard';\n\ncopy('Text');\n```\n\n相比起 clipboard.js 的使用思路是更加直观了，可惜生不逢时，不如 clipboard.js 出名（也可能有取名的原因在里面）。\n\n### [VueUse - useClipboard](https://vueuse.org/core/useClipboard/)\n\nVueUse 实现的这个 useClipboard 是令我最为满意的一个。useClipboard 充分考虑了浏览器的兼容性，在检测到满足 navigator.clipboard 的使用条件时**优先使用 `navigator.clipboard.writeText()`** ，在不支持 navigator.clipboard 或者 `navigator.clipboard.writeText()` **复制失败时转去使用 execCommand 实现的 legacyCopy**，并且借助 Vue3 中的 Composables 实现了一个 1.5 秒后自动恢复初始状态的 copied 变量，算是很有心了。\n\n```vue\nconst { text, copy, copied, isSupported } = useClipboard({ source })\n\u003C/script>\n\n\u003Ctemplate>\n  \u003Cdiv v-if=\"isSupported\">\n    \u003Cbutton @click=\"copy(source)\">\n      \u003C!-- by default, `copied` will be reset in 1.5s -->\n      \u003Cspan v-if=\"!copied\">Copy\u003C/span>\n      \u003Cspan v-else>Copied!\u003C/span>\n    \u003C/button>\n    \u003Cp>Current copied: \u003Ccode>{{ text || 'none' }}\u003C/code>\u003C/p>\n  \u003C/div>\n  \u003Cp v-else>\n    Your browser does not support Clipboard API\n  \u003C/p>\n\u003C/template>\n```\n\n### React 相关生态\n\nReact 这边不像 VueUse 一家独大，出现了很多可用的 hooks 库，那就全都过一遍\n\n#### [react-use - useCopyToClipboard](https://github.com/streamich/react-use) \n\nreact-use 是我能搜到的目前最大的 React Hooks 库，42.9k star。采用的复制方案是直接依赖上面介绍过的 [copy-to-clipboard](https://github.com/sudodoki/copy-to-clipboard)，也就是 execCommand 方案。\n\n```jsx\nconst Demo = () => {\n  const [text, setText] = React.useState('');\n  const [state, copyToClipboard] = useCopyToClipboard();\n\n  return (\n    \u003Cdiv>\n      \u003Cinput value={text} onChange={e => setText(e.target.value)} />\n      \u003Cbutton type=\"button\" onClick={() => copyToClipboard(text)}>copy text\u003C/button>\n      {state.error\n        ? \u003Cp>Unable to copy value: {state.error.message}\u003C/p>\n        : state.value && \u003Cp>Copied {state.value}\u003C/p>}\n    \u003C/div>\n  )\n}\n```\n\n#### [Ant Design - Typography](https://ant.design/components/typography-cn#typography-demo-copyable)\n\nahooks 是[小麦茶](https://site.j10ccc.xyz/)第一个报出来的 react hooks 库，由 Ant Design 原班人马维护。不过其在仓库中并没有对剪贴板的封装，因此在小麦茶的建议下我跑去翻了 Ant Design 中的 Typography 对复制能力的实现。和上面的 react-use 一样，都是直接用 [copy-to-clipboard](https://github.com/sudodoki/copy-to-clipboard)，属于 execCommand 方案。\n\n#### [usehooks - useCopyToClipboard](https://usehooks.com/usecopytoclipboard)\n\n这个库是我问 llm 知道的，现在有 10.5k star。非常逆天的一点在于它的所有逻辑代码都是在 index.js 这样一个单文件里实现的，属实是看不懂了。会先采用 `navigator.clipboard.writeText()` 尝试写入，失败后再换用 execCommand 的方案。hooks 的用法和上面的 react-use 大差不差。\n\n#### [usehooks-ts - useCopyToClipboard](https://usehooks-ts.com/react-hook/use-copy-to-clipboard)\n\n不知道是不是为了解决上面那玩意儿不支持 ts 才开的库。只使用 `navigator.clipboard.writeText()` 尝试写入剪切板，失败后直接 `console.warn` 报错，没有 fallback 方案。\n\n## 结语\n\n从结果上来看，VueUse 的封装无疑是最令我满意的。优先尝试性能最好的 Clipboard API，再尝试 execCommand 作为回落，同时辅以多个响应式变量帮助开发，但又不擅作主张地使用 prompt 作为保底，最大程度地把操作空间留给开发者。\n\n站在 2025 年的节点回望，前端剪切板操作技术的演进轨迹清晰可见：从早期依赖 Flash 的脆弱方案，到 execCommand 的曲线救国，最终迈向标准化 Clipboard API 的优雅实现。这段历程不仅是技术迭代的缩影，更折射出前端开发中独特的「妥协艺术」。\n\n在未来的很长一段时间里，或许我们还是会在「优雅实现」与「向下兼容」之间寻找平衡点、在浏览器沙箱里戴着镣铐跳芭蕾，但那些为兼容性而生的临时方案，终将成为见证前端进化史的珍贵注脚。\n\n## 参见\n\n- [JS复制文字到剪贴板的坑及完整方案。](https://liruifengv.com/posts/copy-text/)\n- [ZeroClipboard 学习笔记 | 囧克斯](https://jiongks.name/blog/zeroclipboard-intro)\n- [Cut and copy commands  |  Blog  |  Chrome for Developers](https://developer.chrome.com/blog/cut-and-copy-commands)\n- [execCommand method (Internet Explorer) | Microsoft Learn](https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/ms536419(v=vs.85))\n- [sudodoki/copy-to-clipboard](https://github.com/sudodoki/copy-to-clipboard)\n- [zenorocha/clipboard.js](https://github.com/zenorocha/clipboard.js/)\n- [useClipboard | VueUse](https://vueuse.org/core/useClipboard/)\n- [Side-effects / useCopyToClipboard - Docs ⋅ Storybook](https://streamich.github.io/react-use/?path=/story/side-effects-usecopytoclipboard--docs)\n- [document.execCommand - Web API | MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand)\n- [Clipboard.writeText() - Web API | MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Clipboard/writeText)\n- [Onclick Select All and Copy to Clipboard? - JavaScript - SitePoint Forums | Web Development & Design Community](https://www.sitepoint.com/community/t/onclick-select-all-and-copy-to-clipboard/3837/2)\n- [How would I implement 'copy url to clipboard' from a link or button using javascript or dojo without flash - Stack Overflow](https://stackoverflow.com/questions/16526814/how-would-i-implement-copy-url-to-clipboard-from-a-link-or-button-using-javasc)\n",{"title":5,"description":58},"posts/how-we-copy-text-to-clipboard-with-js-in-2025",false,[1832],"JavaScript","p9ve1IR20RVcaq4KVPv31OL0d3SsdiY4R4tJCJbzAOk",[1835,1840],{"title":1836,"path":1837,"stem":1838,"date":1839,"children":-1},"el-image 和 el-table 怎么就打架了？Stacking Context 是什么？","/2025/05/31/el-image-and-el-table-why-the-fight-and-what-is-a-stacking-context","posts/el-image-and-el-table-why-the-fight-and-what-is-a-stacking-context","2025-05-31 00:29:40",{"title":1841,"path":1842,"stem":1843,"date":1844,"children":-1},"ssh 拯救世界——通过 ssh 隧道在内网服务器执行 APT 更新","/2025/03/30/apt-upgrade-on-internal-server-via-ssh-tunnel-and-reverse-proxy","posts/apt-upgrade-on-internal-server-via-ssh-tunnel-and-reverse-proxy","2025-03-30 21:45:24",1761739881008]