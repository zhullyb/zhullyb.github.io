[{"data":1,"prerenderedAt":2025},["ShallowReactive",2],{"post-2025-07-13-vue-markdown-render-improvement-2":3,"surround-2025-07-13-vue-markdown-render-improvement-2":2014,"randomIndex/2025/07/13/vue-markdown-render-improvement-2/":357},{"id":4,"title":5,"body":6,"date":1999,"description":217,"extension":2000,"meta":2001,"navigation":290,"path":2002,"rawbody":2003,"seo":2004,"stem":2005,"sticky":2006,"tags":2007,"__hash__":2013},"posts/posts/vue-markdown-render-improvement-2.md","Vue Markdown 渲染优化实战(下)：告别 DOM 操作，拥抱 AST 与函数式渲染",{"type":7,"value":8,"toc":1986},"minimark",[9,19,36,39,42,45,57,67,71,80,98,109,112,127,132,154,157,161,172,204,208,211,239,242,438,441,698,702,709,721,724,1367,1371,1378,1715,1718,1832,1836,1839,1945,1949,1952,1976,1979,1982],[10,11,13,14,18],"h2",{"id":12},"上回回顾当-morphdom-遇上-vue","上回回顾：当 ",[15,16,17],"code",{},"morphdom"," 遇上 Vue",[20,21,22,23,28,29,32,33,35],"p",{},"在",[24,25,27],"a",{"href":26},"/2025/07/12/vue-markdown-render-improvement-1/","上一篇文章","中，我们经历了一场 Markdown 渲染的性能优化之旅。从最原始的 ",[15,30,31],{},"v-html"," 全量刷新，到按块更新，最终我们请出了 ",[15,34,17],{}," 这个“终极武器”。它通过直接比对和操作真实 DOM，以最小的代价更新视图，完美解决了实时渲染中的性能瓶颈和交互状态丢失问题。",[20,37,38],{},"然而，一个根本性问题始终存在：在 Vue 的地盘里，绕过 Vue 的虚拟 DOM (Virtual DOM) 和 Diff 算法，直接用一个第三方库去“动刀”真实 DOM，总感觉有些“旁门左道”。这就像在一个精密的自动化工厂里，引入了一个老师傅拿着锤子和扳手进行手动修补。虽然活干得漂亮，但总觉得破坏了原有的工作流，不够“Vue”。",[20,40,41],{},"那么，有没有一种更优雅、更“原生”的方式，让我们既能享受精准更新的快感，又能完全融入 Vue 的生态体系呢？",[20,43,44],{},"带着这个问题，我询问了前端群里的伙伴们。",[46,47,48],"blockquote",{},[20,49,50,51],{},"如果就要做一个渲染器，你这个思路不是最佳实践。每次更新时，你都生成全量的虚拟 HTML，然后再对 HTML 做减法来优化性能。然而，每次更新的增量部分是明确的，为什么不直接用这部分增量去做加法？增量部分通过 markdown-it 的库无法直接获取，但更好的做法是在这一步进行改造：先解析 Markdown 的结构，再利用 Vue 的动态渲染能力生成 DOM。这样，DOM 的复用就可以借助 Vue 自身的能力来实现。—— ",[24,52,56],{"href":53,"rel":54},"https://site.j10c.cc/",[55],"nofollow","j10c",[46,58,59],{},[20,60,61,62],{},"可以用 unified 结合 remark-parse 插件，将 markdown 字符串解析为 ast，然后根据 ast 使用 render func 进行渲染即可。—— bii & ",[24,63,66],{"href":64,"rel":65},"https://github.com/nekomeowww",[55],"nekomeowww",[10,68,70],{"id":69},"新思路从字符串转换到结构化渲染","新思路：从“字符串转换”到“结构化渲染”",[20,72,73,74,76,77,79],{},"我们之前的方案，无论是 ",[15,75,31],{}," 还是 ",[15,78,17],{},"，其核心思路都是：",[20,81,82,85,86,85,89,85,92,85,95],{},[15,83,84],{},"Markdown 字符串"," -> ",[15,87,88],{},"markdown-it",[15,90,91],{},"HTML 字符串",[15,93,94],{},"浏览器/morphdom",[15,96,97],{},"DOM",[20,99,100,101,103,104,108],{},"这条链路的问题在于，从 ",[15,102,91],{}," 这一步开始，我们就丢失了 Markdown 的",[105,106,107],"strong",{},"原始结构信息","。我们得到的是一堆非结构化的文本，Vue 无法理解其内在逻辑，只能将其囫囵吞下。",[20,110,111],{},"而新的思路则是将流程改造为：",[20,113,114,85,116,85,119,85,122,85,125],{},[15,115,84],{},[15,117,118],{},"AST (抽象语法树)",[15,120,121],{},"Vue VNodes (虚拟节点)",[15,123,124],{},"Vue",[15,126,97],{},[128,129,131],"h3",{"id":130},"什么是-ast","什么是 AST？",[20,133,134,137,138,141,142,145,146,149,150,153],{},[105,135,136],{},"AST (Abstract Syntax Tree)"," ，即抽象语法树，是源代码或标记语言的结构化表示。它将一长串的文本，解析成一个层级分明的树状对象。对于 Markdown 来说，一个一级标题会变成一个 ",[15,139,140],{},"type: 'heading', depth: 1"," 的节点，一个段落会变成一个 ",[15,143,144],{},"type: 'paragraph'"," 的节点，而段落里的文字，则是 ",[15,147,148],{},"paragraph"," 节点的 ",[15,151,152],{},"children","。",[20,155,156],{},"一旦我们将 Markdown 转换成 AST，就相当于拥有了整个文档的“结构图纸”。我们不再是面对一堆模糊的 HTML 字符串，而是面对一个清晰、可编程的 JavaScript 对象。",[128,158,160],{"id":159},"我们的新工具unified-与-remark","我们的新工具：unified 与 remark",[20,162,163,164,167,168,171],{},"为了实现 ",[15,165,166],{},"Markdown -> AST"," 的转换，我们引入 ",[15,169,170],{},"unified"," 生态。",[173,174,175,185],"ul",{},[176,177,178,184],"li",{},[105,179,180],{},[24,181,170],{"href":182,"rel":183},"https://github.com/unifiedjs/unified",[55],": 一个强大的内容处理引擎。你可以把它想象成一条流水线，原始文本是原料，通过添加不同的“插件”来对它进行解析、转换和序列化。",[176,186,187,194,195,197,198,203],{},[105,188,189],{},[24,190,193],{"href":191,"rel":192},"https://github.com/remarkjs/remark",[55],"remark-parse",": 一个 ",[15,196,170],{}," 插件，专门负责将 Markdown 文本解析成 AST（具体来说是 ",[24,199,202],{"href":200,"rel":201},"https://github.com/syntax-tree/mdast",[55],"mdast"," 格式）。",[10,205,207],{"id":206},"第一步将-markdown-解析为-ast","第一步：将 Markdown 解析为 AST",[20,209,210],{},"首先，我们需要安装相关依赖：",[212,213,218],"pre",{"className":214,"code":215,"language":216,"meta":217,"style":217},"language-bash shiki shiki-themes one-light one-dark-pro","npm install unified remark-parse\n","bash","",[15,219,220],{"__ignoreMap":217},[221,222,225,229,233,236],"span",{"class":223,"line":224},"line",1,[221,226,228],{"class":227},"sAdtL","npm",[221,230,232],{"class":231},"sDhpE"," install",[221,234,235],{"class":231}," unified",[221,237,238],{"class":231}," remark-parse\n",[20,240,241],{},"然后，我们可以轻松地将 Markdown 字符串转换为 AST：",[212,243,247],{"className":244,"code":245,"language":246,"meta":217,"style":217},"language-javascript shiki shiki-themes one-light one-dark-pro","import { unified } from 'unified'\nimport remarkParse from 'remark-parse'\n\nconst markdownContent = '# Hello, AST!\\n\\nThis is a paragraph.'\n\n// 创建一个处理器实例\nconst processor = unified().use(remarkParse)\n\n// 解析 Markdown 内容\nconst ast = processor.parse(markdownContent)\n\nconsole.log(JSON.stringify(ast, null, 2))\n","javascript",[15,248,249,271,285,292,315,320,327,355,360,366,392,397],{"__ignoreMap":217},[221,250,251,255,259,262,265,268],{"class":223,"line":224},[221,252,254],{"class":253},"sLKXg","import",[221,256,258],{"class":257},"s5ixo"," { ",[221,260,170],{"class":261},"sJa8x",[221,263,264],{"class":257}," } ",[221,266,267],{"class":253},"from",[221,269,270],{"class":231}," 'unified'\n",[221,272,274,276,279,282],{"class":223,"line":273},2,[221,275,254],{"class":253},[221,277,278],{"class":261}," remarkParse",[221,280,281],{"class":253}," from",[221,283,284],{"class":231}," 'remark-parse'\n",[221,286,288],{"class":223,"line":287},3,[221,289,291],{"emptyLinePlaceholder":290},true,"\n",[221,293,295,298,302,306,309,312],{"class":223,"line":294},4,[221,296,297],{"class":253},"const",[221,299,301],{"class":300},"sNmU0"," markdownContent",[221,303,305],{"class":304},"s_Sar"," =",[221,307,308],{"class":231}," '# Hello, AST!",[221,310,311],{"class":304},"\\n\\n",[221,313,314],{"class":231},"This is a paragraph.'\n",[221,316,318],{"class":223,"line":317},5,[221,319,291],{"emptyLinePlaceholder":290},[221,321,323],{"class":223,"line":322},6,[221,324,326],{"class":325},"sW2Sy","// 创建一个处理器实例\n",[221,328,330,332,335,337,339,342,345,348,352],{"class":223,"line":329},7,[221,331,297],{"class":253},[221,333,334],{"class":300}," processor",[221,336,305],{"class":304},[221,338,235],{"class":227},[221,340,341],{"class":257},"().",[221,343,344],{"class":227},"use",[221,346,347],{"class":257},"(",[221,349,351],{"class":350},"sz0mV","remarkParse",[221,353,354],{"class":257},")\n",[221,356,358],{"class":223,"line":357},8,[221,359,291],{"emptyLinePlaceholder":290},[221,361,363],{"class":223,"line":362},9,[221,364,365],{"class":325},"// 解析 Markdown 内容\n",[221,367,369,371,374,376,379,382,385,387,390],{"class":223,"line":368},10,[221,370,297],{"class":253},[221,372,373],{"class":300}," ast",[221,375,305],{"class":304},[221,377,334],{"class":378},"s7GmK",[221,380,381],{"class":257},".",[221,383,384],{"class":227},"parse",[221,386,347],{"class":257},[221,388,389],{"class":350},"markdownContent",[221,391,354],{"class":257},[221,393,395],{"class":223,"line":394},11,[221,396,291],{"emptyLinePlaceholder":290},[221,398,400,403,405,408,410,413,415,418,420,423,426,430,432,435],{"class":223,"line":399},12,[221,401,402],{"class":378},"console",[221,404,381],{"class":257},[221,406,407],{"class":227},"log",[221,409,347],{"class":257},[221,411,412],{"class":300},"JSON",[221,414,381],{"class":257},[221,416,417],{"class":227},"stringify",[221,419,347],{"class":257},[221,421,422],{"class":350},"ast",[221,424,425],{"class":257},", ",[221,427,429],{"class":428},"sAGMh","null",[221,431,425],{"class":257},[221,433,434],{"class":428},"2",[221,436,437],{"class":257},"))\n",[20,439,440],{},"运行以上代码，我们将得到一个如下所示的 JSON 对象，这就是我们梦寐以求的 AST：",[212,442,446],{"className":443,"code":444,"language":445,"meta":217,"style":217},"language-json shiki shiki-themes one-light one-dark-pro","{\n  \"type\": \"root\",\n  \"children\": [\n    {\n      \"type\": \"heading\",\n      \"depth\": 1,\n      \"children\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"Hello, AST!\",\n          \"position\": { ... }\n        }\n      ],\n      \"position\": { ... }\n    },\n    {\n      \"type\": \"paragraph\",\n      \"children\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"This is a paragraph.\",\n          \"position\": { ... }\n        }\n      ],\n      \"position\": { ... }\n    }\n  ],\n  \"position\": { ... }\n}\n","json",[15,447,448,453,467,475,480,492,504,511,516,528,540,555,560,566,578,584,589,601,608,613,624,636,647,652,657,668,674,680,692],{"__ignoreMap":217},[221,449,450],{"class":223,"line":224},[221,451,452],{"class":257},"{\n",[221,454,455,458,461,464],{"class":223,"line":273},[221,456,457],{"class":261},"  \"type\"",[221,459,460],{"class":257},": ",[221,462,463],{"class":231},"\"root\"",[221,465,466],{"class":257},",\n",[221,468,469,472],{"class":223,"line":287},[221,470,471],{"class":261},"  \"children\"",[221,473,474],{"class":257},": [\n",[221,476,477],{"class":223,"line":294},[221,478,479],{"class":257},"    {\n",[221,481,482,485,487,490],{"class":223,"line":317},[221,483,484],{"class":261},"      \"type\"",[221,486,460],{"class":257},[221,488,489],{"class":231},"\"heading\"",[221,491,466],{"class":257},[221,493,494,497,499,502],{"class":223,"line":322},[221,495,496],{"class":261},"      \"depth\"",[221,498,460],{"class":257},[221,500,501],{"class":428},"1",[221,503,466],{"class":257},[221,505,506,509],{"class":223,"line":329},[221,507,508],{"class":261},"      \"children\"",[221,510,474],{"class":257},[221,512,513],{"class":223,"line":357},[221,514,515],{"class":257},"        {\n",[221,517,518,521,523,526],{"class":223,"line":362},[221,519,520],{"class":261},"          \"type\"",[221,522,460],{"class":257},[221,524,525],{"class":231},"\"text\"",[221,527,466],{"class":257},[221,529,530,533,535,538],{"class":223,"line":368},[221,531,532],{"class":261},"          \"value\"",[221,534,460],{"class":257},[221,536,537],{"class":231},"\"Hello, AST!\"",[221,539,466],{"class":257},[221,541,542,545,548,552],{"class":223,"line":394},[221,543,544],{"class":261},"          \"position\"",[221,546,547],{"class":257},": { ",[221,549,551],{"class":550},"sUNH4","...",[221,553,554],{"class":257}," }\n",[221,556,557],{"class":223,"line":399},[221,558,559],{"class":257},"        }\n",[221,561,563],{"class":223,"line":562},13,[221,564,565],{"class":257},"      ],\n",[221,567,569,572,574,576],{"class":223,"line":568},14,[221,570,571],{"class":261},"      \"position\"",[221,573,547],{"class":257},[221,575,551],{"class":550},[221,577,554],{"class":257},[221,579,581],{"class":223,"line":580},15,[221,582,583],{"class":257},"    },\n",[221,585,587],{"class":223,"line":586},16,[221,588,479],{"class":257},[221,590,592,594,596,599],{"class":223,"line":591},17,[221,593,484],{"class":261},[221,595,460],{"class":257},[221,597,598],{"class":231},"\"paragraph\"",[221,600,466],{"class":257},[221,602,604,606],{"class":223,"line":603},18,[221,605,508],{"class":261},[221,607,474],{"class":257},[221,609,611],{"class":223,"line":610},19,[221,612,515],{"class":257},[221,614,616,618,620,622],{"class":223,"line":615},20,[221,617,520],{"class":261},[221,619,460],{"class":257},[221,621,525],{"class":231},[221,623,466],{"class":257},[221,625,627,629,631,634],{"class":223,"line":626},21,[221,628,532],{"class":261},[221,630,460],{"class":257},[221,632,633],{"class":231},"\"This is a paragraph.\"",[221,635,466],{"class":257},[221,637,639,641,643,645],{"class":223,"line":638},22,[221,640,544],{"class":261},[221,642,547],{"class":257},[221,644,551],{"class":550},[221,646,554],{"class":257},[221,648,650],{"class":223,"line":649},23,[221,651,559],{"class":257},[221,653,655],{"class":223,"line":654},24,[221,656,565],{"class":257},[221,658,660,662,664,666],{"class":223,"line":659},25,[221,661,571],{"class":261},[221,663,547],{"class":257},[221,665,551],{"class":550},[221,667,554],{"class":257},[221,669,671],{"class":223,"line":670},26,[221,672,673],{"class":257},"    }\n",[221,675,677],{"class":223,"line":676},27,[221,678,679],{"class":257},"  ],\n",[221,681,683,686,688,690],{"class":223,"line":682},28,[221,684,685],{"class":261},"  \"position\"",[221,687,547],{"class":257},[221,689,551],{"class":550},[221,691,554],{"class":257},[221,693,695],{"class":223,"line":694},29,[221,696,697],{"class":257},"}\n",[10,699,701],{"id":700},"第二步从-ast-到-vue-vnodes","第二步：从 AST 到 Vue VNodes",[20,703,704,705,708],{},"拿到了 AST，下一步就是将这个“结构图纸”真正地“施工”成用户可见的界面。在 Vue 的世界里，描述 UI 的蓝图就是虚拟节点 (VNode)，而 ",[15,706,707],{},"h()"," 函数（即 hyperscript）就是创建 VNode 的画笔。",[20,710,711,712,425,715,425,717,720],{},"我们的任务是编写一个渲染函数，它能够递归地遍历 AST，并为每一种节点类型（",[15,713,714],{},"heading",[15,716,148],{},[15,718,719],{},"text"," 等）生成对应的 VNode。",[20,722,723],{},"下面是一个简单的渲染函数实现：",[212,725,727],{"className":244,"code":726,"language":246,"meta":217,"style":217},"function renderAst(node) {\n  if (!node) return null\n  switch (node.type) {\n    case 'root':\n      return h('div', {}, node.children.map(renderAst))\n    case 'paragraph':\n      return h('p', {}, node.children.map(renderAst))\n    case 'text':\n      return node.value\n    case 'emphasis':\n      return h('em', {}, node.children.map(renderAst))\n    case 'strong':\n      return h('strong', {}, node.children.map(renderAst))\n    case 'inlineCode':\n      return h('code', {}, node.value)\n    case 'heading':\n      return h('h' + node.depth, {}, node.children.map(renderAst))\n    case 'code':\n      return h('pre', {}, [h('code', {}, node.value)])\n    case 'list':\n      return h(node.ordered ? 'ol' : 'ul', {}, node.children.map(renderAst))\n    case 'listItem':\n      return h('li', {}, node.children.map(renderAst))\n    case 'thematicBreak':\n      return h('hr')\n    case 'blockquote':\n      return h('blockquote', {}, node.children.map(renderAst))\n    case 'link':\n      return h('a', { href: node.url, target: '_blank' }, node.children.map(renderAst))\n    default:\n      // 其它未实现类型\n      return h('span', { }, `[${node.type}]`)\n  }\n}\n",[15,728,729,746,768,784,795,830,839,868,877,889,898,927,936,965,974,996,1005,1044,1053,1086,1095,1141,1150,1179,1188,1201,1210,1239,1248,1305,1313,1319,1356,1362],{"__ignoreMap":217},[221,730,731,734,737,739,743],{"class":223,"line":224},[221,732,733],{"class":253},"function",[221,735,736],{"class":227}," renderAst",[221,738,347],{"class":257},[221,740,742],{"class":741},"s8iYz","node",[221,744,745],{"class":257},") {\n",[221,747,748,751,754,757,759,762,765],{"class":223,"line":273},[221,749,750],{"class":253},"  if",[221,752,753],{"class":257}," (",[221,755,756],{"class":304},"!",[221,758,742],{"class":350},[221,760,761],{"class":257},") ",[221,763,764],{"class":253},"return",[221,766,767],{"class":428}," null\n",[221,769,770,773,775,777,779,782],{"class":223,"line":287},[221,771,772],{"class":253},"  switch",[221,774,753],{"class":257},[221,776,742],{"class":378},[221,778,381],{"class":257},[221,780,781],{"class":261},"type",[221,783,745],{"class":257},[221,785,786,789,792],{"class":223,"line":294},[221,787,788],{"class":253},"    case",[221,790,791],{"class":231}," 'root'",[221,793,794],{"class":257},":\n",[221,796,797,800,803,805,808,811,813,815,818,820,823,825,828],{"class":223,"line":317},[221,798,799],{"class":253},"      return",[221,801,802],{"class":227}," h",[221,804,347],{"class":257},[221,806,807],{"class":231},"'div'",[221,809,810],{"class":257},", {}, ",[221,812,742],{"class":378},[221,814,381],{"class":257},[221,816,152],{"class":817},"s2QsP",[221,819,381],{"class":257},[221,821,822],{"class":227},"map",[221,824,347],{"class":257},[221,826,827],{"class":350},"renderAst",[221,829,437],{"class":257},[221,831,832,834,837],{"class":223,"line":322},[221,833,788],{"class":253},[221,835,836],{"class":231}," 'paragraph'",[221,838,794],{"class":257},[221,840,841,843,845,847,850,852,854,856,858,860,862,864,866],{"class":223,"line":329},[221,842,799],{"class":253},[221,844,802],{"class":227},[221,846,347],{"class":257},[221,848,849],{"class":231},"'p'",[221,851,810],{"class":257},[221,853,742],{"class":378},[221,855,381],{"class":257},[221,857,152],{"class":817},[221,859,381],{"class":257},[221,861,822],{"class":227},[221,863,347],{"class":257},[221,865,827],{"class":350},[221,867,437],{"class":257},[221,869,870,872,875],{"class":223,"line":357},[221,871,788],{"class":253},[221,873,874],{"class":231}," 'text'",[221,876,794],{"class":257},[221,878,879,881,884,886],{"class":223,"line":362},[221,880,799],{"class":253},[221,882,883],{"class":378}," node",[221,885,381],{"class":257},[221,887,888],{"class":261},"value\n",[221,890,891,893,896],{"class":223,"line":368},[221,892,788],{"class":253},[221,894,895],{"class":231}," 'emphasis'",[221,897,794],{"class":257},[221,899,900,902,904,906,909,911,913,915,917,919,921,923,925],{"class":223,"line":394},[221,901,799],{"class":253},[221,903,802],{"class":227},[221,905,347],{"class":257},[221,907,908],{"class":231},"'em'",[221,910,810],{"class":257},[221,912,742],{"class":378},[221,914,381],{"class":257},[221,916,152],{"class":817},[221,918,381],{"class":257},[221,920,822],{"class":227},[221,922,347],{"class":257},[221,924,827],{"class":350},[221,926,437],{"class":257},[221,928,929,931,934],{"class":223,"line":399},[221,930,788],{"class":253},[221,932,933],{"class":231}," 'strong'",[221,935,794],{"class":257},[221,937,938,940,942,944,947,949,951,953,955,957,959,961,963],{"class":223,"line":562},[221,939,799],{"class":253},[221,941,802],{"class":227},[221,943,347],{"class":257},[221,945,946],{"class":231},"'strong'",[221,948,810],{"class":257},[221,950,742],{"class":378},[221,952,381],{"class":257},[221,954,152],{"class":817},[221,956,381],{"class":257},[221,958,822],{"class":227},[221,960,347],{"class":257},[221,962,827],{"class":350},[221,964,437],{"class":257},[221,966,967,969,972],{"class":223,"line":568},[221,968,788],{"class":253},[221,970,971],{"class":231}," 'inlineCode'",[221,973,794],{"class":257},[221,975,976,978,980,982,985,987,989,991,994],{"class":223,"line":580},[221,977,799],{"class":253},[221,979,802],{"class":227},[221,981,347],{"class":257},[221,983,984],{"class":231},"'code'",[221,986,810],{"class":257},[221,988,742],{"class":378},[221,990,381],{"class":257},[221,992,993],{"class":261},"value",[221,995,354],{"class":257},[221,997,998,1000,1003],{"class":223,"line":586},[221,999,788],{"class":253},[221,1001,1002],{"class":231}," 'heading'",[221,1004,794],{"class":257},[221,1006,1007,1009,1011,1013,1016,1019,1021,1023,1026,1028,1030,1032,1034,1036,1038,1040,1042],{"class":223,"line":591},[221,1008,799],{"class":253},[221,1010,802],{"class":227},[221,1012,347],{"class":257},[221,1014,1015],{"class":231},"'h'",[221,1017,1018],{"class":304}," +",[221,1020,883],{"class":378},[221,1022,381],{"class":257},[221,1024,1025],{"class":261},"depth",[221,1027,810],{"class":257},[221,1029,742],{"class":378},[221,1031,381],{"class":257},[221,1033,152],{"class":817},[221,1035,381],{"class":257},[221,1037,822],{"class":227},[221,1039,347],{"class":257},[221,1041,827],{"class":350},[221,1043,437],{"class":257},[221,1045,1046,1048,1051],{"class":223,"line":603},[221,1047,788],{"class":253},[221,1049,1050],{"class":231}," 'code'",[221,1052,794],{"class":257},[221,1054,1055,1057,1059,1061,1064,1067,1070,1072,1074,1076,1078,1080,1083],{"class":223,"line":610},[221,1056,799],{"class":253},[221,1058,802],{"class":227},[221,1060,347],{"class":257},[221,1062,1063],{"class":231},"'pre'",[221,1065,1066],{"class":257},", {}, [",[221,1068,1069],{"class":227},"h",[221,1071,347],{"class":257},[221,1073,984],{"class":231},[221,1075,810],{"class":257},[221,1077,742],{"class":378},[221,1079,381],{"class":257},[221,1081,993],{"class":1082},"sj4iG",[221,1084,1085],{"class":257},")])\n",[221,1087,1088,1090,1093],{"class":223,"line":615},[221,1089,788],{"class":253},[221,1091,1092],{"class":231}," 'list'",[221,1094,794],{"class":257},[221,1096,1097,1099,1101,1103,1105,1107,1110,1114,1117,1120,1123,1125,1127,1129,1131,1133,1135,1137,1139],{"class":223,"line":626},[221,1098,799],{"class":253},[221,1100,802],{"class":227},[221,1102,347],{"class":257},[221,1104,742],{"class":378},[221,1106,381],{"class":257},[221,1108,1109],{"class":261},"ordered",[221,1111,1113],{"class":1112},"s7DPa"," ?",[221,1115,1116],{"class":231}," 'ol'",[221,1118,1119],{"class":1112}," :",[221,1121,1122],{"class":231}," 'ul'",[221,1124,810],{"class":257},[221,1126,742],{"class":378},[221,1128,381],{"class":257},[221,1130,152],{"class":817},[221,1132,381],{"class":257},[221,1134,822],{"class":227},[221,1136,347],{"class":257},[221,1138,827],{"class":350},[221,1140,437],{"class":257},[221,1142,1143,1145,1148],{"class":223,"line":638},[221,1144,788],{"class":253},[221,1146,1147],{"class":231}," 'listItem'",[221,1149,794],{"class":257},[221,1151,1152,1154,1156,1158,1161,1163,1165,1167,1169,1171,1173,1175,1177],{"class":223,"line":649},[221,1153,799],{"class":253},[221,1155,802],{"class":227},[221,1157,347],{"class":257},[221,1159,1160],{"class":231},"'li'",[221,1162,810],{"class":257},[221,1164,742],{"class":378},[221,1166,381],{"class":257},[221,1168,152],{"class":817},[221,1170,381],{"class":257},[221,1172,822],{"class":227},[221,1174,347],{"class":257},[221,1176,827],{"class":350},[221,1178,437],{"class":257},[221,1180,1181,1183,1186],{"class":223,"line":654},[221,1182,788],{"class":253},[221,1184,1185],{"class":231}," 'thematicBreak'",[221,1187,794],{"class":257},[221,1189,1190,1192,1194,1196,1199],{"class":223,"line":659},[221,1191,799],{"class":253},[221,1193,802],{"class":227},[221,1195,347],{"class":257},[221,1197,1198],{"class":231},"'hr'",[221,1200,354],{"class":257},[221,1202,1203,1205,1208],{"class":223,"line":670},[221,1204,788],{"class":253},[221,1206,1207],{"class":231}," 'blockquote'",[221,1209,794],{"class":257},[221,1211,1212,1214,1216,1218,1221,1223,1225,1227,1229,1231,1233,1235,1237],{"class":223,"line":676},[221,1213,799],{"class":253},[221,1215,802],{"class":227},[221,1217,347],{"class":257},[221,1219,1220],{"class":231},"'blockquote'",[221,1222,810],{"class":257},[221,1224,742],{"class":378},[221,1226,381],{"class":257},[221,1228,152],{"class":817},[221,1230,381],{"class":257},[221,1232,822],{"class":227},[221,1234,347],{"class":257},[221,1236,827],{"class":350},[221,1238,437],{"class":257},[221,1240,1241,1243,1246],{"class":223,"line":682},[221,1242,788],{"class":253},[221,1244,1245],{"class":231}," 'link'",[221,1247,794],{"class":257},[221,1249,1250,1252,1254,1256,1259,1262,1265,1269,1271,1273,1276,1278,1281,1283,1286,1289,1291,1293,1295,1297,1299,1301,1303],{"class":223,"line":694},[221,1251,799],{"class":253},[221,1253,802],{"class":227},[221,1255,347],{"class":257},[221,1257,1258],{"class":231},"'a'",[221,1260,1261],{"class":257},", { ",[221,1263,1264],{"class":261},"href",[221,1266,1268],{"class":1267},"st7oF",":",[221,1270,883],{"class":378},[221,1272,381],{"class":257},[221,1274,1275],{"class":261},"url",[221,1277,425],{"class":257},[221,1279,1280],{"class":261},"target",[221,1282,1268],{"class":1267},[221,1284,1285],{"class":231}," '_blank'",[221,1287,1288],{"class":257}," }, ",[221,1290,742],{"class":378},[221,1292,381],{"class":257},[221,1294,152],{"class":817},[221,1296,381],{"class":257},[221,1298,822],{"class":227},[221,1300,347],{"class":257},[221,1302,827],{"class":350},[221,1304,437],{"class":257},[221,1306,1308,1311],{"class":223,"line":1307},30,[221,1309,1310],{"class":253},"    default",[221,1312,794],{"class":257},[221,1314,1316],{"class":223,"line":1315},31,[221,1317,1318],{"class":325},"      // 其它未实现类型\n",[221,1320,1322,1324,1326,1328,1331,1334,1337,1341,1343,1346,1348,1351,1354],{"class":223,"line":1321},32,[221,1323,799],{"class":253},[221,1325,802],{"class":227},[221,1327,347],{"class":257},[221,1329,1330],{"class":231},"'span'",[221,1332,1333],{"class":257},", { }, ",[221,1335,1336],{"class":231},"`[",[221,1338,1340],{"class":1339},"sAOjX","${",[221,1342,742],{"class":378},[221,1344,381],{"class":1345},"sMj0N",[221,1347,781],{"class":261},[221,1349,1350],{"class":1339},"}",[221,1352,1353],{"class":231},"]`",[221,1355,354],{"class":257},[221,1357,1359],{"class":223,"line":1358},33,[221,1360,1361],{"class":257},"  }\n",[221,1363,1365],{"class":223,"line":1364},34,[221,1366,697],{"class":257},[10,1368,1370],{"id":1369},"第三步封装-vue-组件","第三步：封装 Vue 组件",[20,1372,1373,1374,1377],{},"整合上述逻辑，我们可以构建一个 Vue 组件。鉴于直接生成 VNode 的特性，采用函数式组件或显式 ",[15,1375,1376],{},"render"," 函数最为适宜。",[212,1379,1383],{"className":1380,"code":1381,"language":1382,"meta":217,"style":217},"language-vue shiki shiki-themes one-light one-dark-pro","\u003Ctemplate>\n  \u003Ccomponent :is=\"VNodeTree\" />\n\u003C/template>\n\n\u003Cscript setup>\nimport { computed, h, shallowRef, watchEffect } from 'vue'\nimport { unified } from 'unified'\nimport remarkParse from 'remark-parse'\n\nconst props = defineProps({\n  mdText: {\n    type: String,\n    default: ''\n  }\n})\n\nconst ast = shallowRef(null)\nconst parser = unified().use(remarkParse)\n\nwatchEffect(() => {\n  ast.value = parser.parse(props.mdText)\n})\n\n// AST 渲染函数 (同上文 renderAst 函数)\nfunction renderAst(node) { ... }\n\nconst VNodeTree = computed(() => renderAst(ast.value))\n\n\u003C/script>\n","vue",[15,1384,1385,1396,1416,1425,1429,1441,1471,1485,1495,1499,1514,1524,1536,1545,1549,1554,1558,1575,1596,1600,1612,1641,1645,1649,1654,1671,1675,1703,1707],{"__ignoreMap":217},[221,1386,1387,1390,1393],{"class":223,"line":224},[221,1388,1389],{"class":257},"\u003C",[221,1391,1392],{"class":261},"template",[221,1394,1395],{"class":257},">\n",[221,1397,1398,1401,1404,1407,1410,1413],{"class":223,"line":273},[221,1399,1400],{"class":257},"  \u003C",[221,1402,1403],{"class":261},"component",[221,1405,1406],{"class":428}," :is",[221,1408,1409],{"class":257},"=",[221,1411,1412],{"class":231},"\"VNodeTree\"",[221,1414,1415],{"class":257}," />\n",[221,1417,1418,1421,1423],{"class":223,"line":287},[221,1419,1420],{"class":257},"\u003C/",[221,1422,1392],{"class":261},[221,1424,1395],{"class":257},[221,1426,1427],{"class":223,"line":294},[221,1428,291],{"emptyLinePlaceholder":290},[221,1430,1431,1433,1436,1439],{"class":223,"line":317},[221,1432,1389],{"class":257},[221,1434,1435],{"class":261},"script",[221,1437,1438],{"class":428}," setup",[221,1440,1395],{"class":257},[221,1442,1443,1445,1447,1450,1452,1454,1456,1459,1461,1464,1466,1468],{"class":223,"line":322},[221,1444,254],{"class":253},[221,1446,258],{"class":257},[221,1448,1449],{"class":261},"computed",[221,1451,425],{"class":257},[221,1453,1069],{"class":261},[221,1455,425],{"class":257},[221,1457,1458],{"class":261},"shallowRef",[221,1460,425],{"class":257},[221,1462,1463],{"class":261},"watchEffect",[221,1465,264],{"class":257},[221,1467,267],{"class":253},[221,1469,1470],{"class":231}," 'vue'\n",[221,1472,1473,1475,1477,1479,1481,1483],{"class":223,"line":329},[221,1474,254],{"class":253},[221,1476,258],{"class":257},[221,1478,170],{"class":261},[221,1480,264],{"class":257},[221,1482,267],{"class":253},[221,1484,270],{"class":231},[221,1486,1487,1489,1491,1493],{"class":223,"line":357},[221,1488,254],{"class":253},[221,1490,278],{"class":261},[221,1492,281],{"class":253},[221,1494,284],{"class":231},[221,1496,1497],{"class":223,"line":362},[221,1498,291],{"emptyLinePlaceholder":290},[221,1500,1501,1503,1506,1508,1511],{"class":223,"line":368},[221,1502,297],{"class":253},[221,1504,1505],{"class":300}," props",[221,1507,305],{"class":304},[221,1509,1510],{"class":227}," defineProps",[221,1512,1513],{"class":257},"({\n",[221,1515,1516,1519,1521],{"class":223,"line":394},[221,1517,1518],{"class":261},"  mdText",[221,1520,1268],{"class":1267},[221,1522,1523],{"class":257}," {\n",[221,1525,1526,1529,1531,1534],{"class":223,"line":399},[221,1527,1528],{"class":261},"    type",[221,1530,1268],{"class":1267},[221,1532,1533],{"class":350}," String",[221,1535,466],{"class":257},[221,1537,1538,1540,1542],{"class":223,"line":562},[221,1539,1310],{"class":261},[221,1541,1268],{"class":1267},[221,1543,1544],{"class":231}," ''\n",[221,1546,1547],{"class":223,"line":568},[221,1548,1361],{"class":257},[221,1550,1551],{"class":223,"line":580},[221,1552,1553],{"class":257},"})\n",[221,1555,1556],{"class":223,"line":586},[221,1557,291],{"emptyLinePlaceholder":290},[221,1559,1560,1562,1564,1566,1569,1571,1573],{"class":223,"line":591},[221,1561,297],{"class":253},[221,1563,373],{"class":300},[221,1565,305],{"class":304},[221,1567,1568],{"class":227}," shallowRef",[221,1570,347],{"class":257},[221,1572,429],{"class":428},[221,1574,354],{"class":257},[221,1576,1577,1579,1582,1584,1586,1588,1590,1592,1594],{"class":223,"line":603},[221,1578,297],{"class":253},[221,1580,1581],{"class":300}," parser",[221,1583,305],{"class":304},[221,1585,235],{"class":227},[221,1587,341],{"class":257},[221,1589,344],{"class":227},[221,1591,347],{"class":257},[221,1593,351],{"class":350},[221,1595,354],{"class":257},[221,1597,1598],{"class":223,"line":610},[221,1599,291],{"emptyLinePlaceholder":290},[221,1601,1602,1604,1607,1610],{"class":223,"line":615},[221,1603,1463],{"class":227},[221,1605,1606],{"class":257},"(() ",[221,1608,1609],{"class":253},"=>",[221,1611,1523],{"class":257},[221,1613,1614,1617,1619,1621,1623,1625,1627,1629,1631,1634,1636,1639],{"class":223,"line":626},[221,1615,1616],{"class":378},"  ast",[221,1618,381],{"class":257},[221,1620,993],{"class":261},[221,1622,305],{"class":304},[221,1624,1581],{"class":378},[221,1626,381],{"class":257},[221,1628,384],{"class":227},[221,1630,347],{"class":257},[221,1632,1633],{"class":378},"props",[221,1635,381],{"class":257},[221,1637,1638],{"class":261},"mdText",[221,1640,354],{"class":257},[221,1642,1643],{"class":223,"line":638},[221,1644,1553],{"class":257},[221,1646,1647],{"class":223,"line":649},[221,1648,291],{"emptyLinePlaceholder":290},[221,1650,1651],{"class":223,"line":654},[221,1652,1653],{"class":325},"// AST 渲染函数 (同上文 renderAst 函数)\n",[221,1655,1656,1658,1660,1662,1664,1667,1669],{"class":223,"line":659},[221,1657,733],{"class":253},[221,1659,736],{"class":227},[221,1661,347],{"class":257},[221,1663,742],{"class":741},[221,1665,1666],{"class":257},") { ",[221,1668,551],{"class":1267},[221,1670,554],{"class":257},[221,1672,1673],{"class":223,"line":670},[221,1674,291],{"emptyLinePlaceholder":290},[221,1676,1677,1679,1682,1684,1687,1689,1691,1693,1695,1697,1699,1701],{"class":223,"line":676},[221,1678,297],{"class":253},[221,1680,1681],{"class":300}," VNodeTree",[221,1683,305],{"class":304},[221,1685,1686],{"class":227}," computed",[221,1688,1606],{"class":257},[221,1690,1609],{"class":253},[221,1692,736],{"class":227},[221,1694,347],{"class":257},[221,1696,422],{"class":378},[221,1698,381],{"class":257},[221,1700,993],{"class":261},[221,1702,437],{"class":257},[221,1704,1705],{"class":223,"line":682},[221,1706,291],{"emptyLinePlaceholder":290},[221,1708,1709,1711,1713],{"class":223,"line":694},[221,1710,1420],{"class":257},[221,1712,1435],{"class":261},[221,1714,1395],{"class":257},[20,1716,1717],{},"现在就可以像使用普通组件一样使用它了：",[212,1719,1721],{"className":1380,"code":1720,"language":1382,"meta":217,"style":217},"\u003Ctemplate>\n  \u003CMarkdownRenderer :mdText=\"markdownContent\" />\n\u003C/template>\n\n\u003Cscript setup>\nimport { ref } from 'vue'\nimport MarkdownRenderer from './MarkdownRenderer.vue'\n\nconst markdownContent = ref('# Hello Vue\\n\\nThis is rendered via AST!')\n\u003C/script>\n",[15,1722,1723,1731,1748,1756,1760,1770,1785,1797,1801,1824],{"__ignoreMap":217},[221,1724,1725,1727,1729],{"class":223,"line":224},[221,1726,1389],{"class":257},[221,1728,1392],{"class":261},[221,1730,1395],{"class":257},[221,1732,1733,1735,1738,1741,1743,1746],{"class":223,"line":273},[221,1734,1400],{"class":257},[221,1736,1737],{"class":261},"MarkdownRenderer",[221,1739,1740],{"class":428}," :mdText",[221,1742,1409],{"class":257},[221,1744,1745],{"class":231},"\"markdownContent\"",[221,1747,1415],{"class":257},[221,1749,1750,1752,1754],{"class":223,"line":287},[221,1751,1420],{"class":257},[221,1753,1392],{"class":261},[221,1755,1395],{"class":257},[221,1757,1758],{"class":223,"line":294},[221,1759,291],{"emptyLinePlaceholder":290},[221,1761,1762,1764,1766,1768],{"class":223,"line":317},[221,1763,1389],{"class":257},[221,1765,1435],{"class":261},[221,1767,1438],{"class":428},[221,1769,1395],{"class":257},[221,1771,1772,1774,1776,1779,1781,1783],{"class":223,"line":322},[221,1773,254],{"class":253},[221,1775,258],{"class":257},[221,1777,1778],{"class":261},"ref",[221,1780,264],{"class":257},[221,1782,267],{"class":253},[221,1784,1470],{"class":231},[221,1786,1787,1789,1792,1794],{"class":223,"line":329},[221,1788,254],{"class":253},[221,1790,1791],{"class":261}," MarkdownRenderer",[221,1793,281],{"class":253},[221,1795,1796],{"class":231}," './MarkdownRenderer.vue'\n",[221,1798,1799],{"class":223,"line":357},[221,1800,291],{"emptyLinePlaceholder":290},[221,1802,1803,1805,1807,1809,1812,1814,1817,1819,1822],{"class":223,"line":362},[221,1804,297],{"class":253},[221,1806,301],{"class":300},[221,1808,305],{"class":304},[221,1810,1811],{"class":227}," ref",[221,1813,347],{"class":257},[221,1815,1816],{"class":231},"'# Hello Vue",[221,1818,311],{"class":304},[221,1820,1821],{"class":231},"This is rendered via AST!'",[221,1823,354],{"class":257},[221,1825,1826,1828,1830],{"class":223,"line":368},[221,1827,1420],{"class":257},[221,1829,1435],{"class":261},[221,1831,1395],{"class":257},[10,1833,1835],{"id":1834},"ast-方案的巨大优势","AST 方案的巨大优势",[20,1837,1838],{},"切换到 AST 赛道后，我们获得了前所未有的超能力：",[1840,1841,1842,1854,1926,1939],"ol",{},[176,1843,1844,1847,1848,1850,1851,1853],{},[105,1845,1846],{},"原生集成，性能卓越","：我们不再需要 ",[15,1849,31],{}," 的暴力刷新，也不再需要 ",[15,1852,17],{}," 这样的“外援”。所有更新都交由 Vue 自己的 Diff 算法处理，这不仅性能极高，而且完全符合 Vue 的设计哲学，是真正的“自己人”。",[176,1855,1856,1859,1860],{},[105,1857,1858],{},"高度灵活性与可扩展性","：AST 作为可编程的 JavaScript 对象，为定制化处理提供了坚实基础：\n",[173,1861,1862,1883,1905],{},[176,1863,1864,1867,1868,1871,1872,1875,1876,1878,1879,1882],{},[105,1865,1866],{},"元素替换","：可将原生元素（如 ",[15,1869,1870],{},"\u003Ch2>","）无缝替换为自定义 Vue 组件（如 ",[15,1873,1874],{},"\u003CFancyHeading>","），仅在 ",[15,1877,827],{}," 函数中调整对应 ",[15,1880,1881],{},"case"," 逻辑即可。",[176,1884,1885,1888,1889,1892,1893,1896,1897,1900,1901,1904],{},[105,1886,1887],{},"逻辑注入","：可便捷地为外部链接 ",[15,1890,1891],{},"\u003Ca>"," 添加 ",[15,1894,1895],{},"target=\"_blank\""," 与 ",[15,1898,1899],{},"rel=\"noopener noreferrer\""," 属性，或为图片 ",[15,1902,1903],{},"\u003Cimg>"," 包裹懒加载组件，此类操作在 AST 层面易于实现。",[176,1906,1907,1910,1911,1913,1914,1917,1918,1921,1922,1925],{},[105,1908,1909],{},"生态集成","：充分利用 ",[15,1912,170],{}," 丰富的插件生态（如 ",[15,1915,1916],{},"remark-gfm"," 支持 GFM 语法，",[15,1919,1920],{},"remark-prism"," 实现代码高亮），仅需在处理器链中引入相应插件（",[15,1923,1924],{},".use(pluginName)","）。",[176,1927,1928,1931,1932,1935,1936,1938],{},[105,1929,1930],{},"关注点分离","：解析逻辑（",[15,1933,1934],{},"remark","）、渲染逻辑（",[15,1937,827],{},"）和业务逻辑（Vue 组件）被清晰地分离开来，代码结构更清晰，维护性更强。",[176,1940,1941,1944],{},[105,1942,1943],{},"类型安全与可预测性","：相较于操作字符串或原始 HTML，基于结构化 AST 的渲染逻辑更易于进行类型校验与逻辑推理。",[10,1946,1948],{"id":1947},"结论从功能实现到架构优化的演进","结论：从功能实现到架构优化的演进",[20,1950,1951],{},"回顾优化历程：",[173,1953,1954,1959,1965,1970],{},[176,1955,1956,1958],{},[105,1957,31],{},"：实现简单，但存在性能与安全性隐患。",[176,1960,1961,1964],{},[105,1962,1963],{},"分块更新","：缓解了部分性能问题，但方案存在局限性。",[176,1966,1967,1969],{},[105,1968,17],{},"：有效提升了性能与用户体验，但与 Vue 核心机制存在隔阂。",[176,1971,1972,1975],{},[105,1973,1974],{},"AST + 函数式渲染","：回归 Vue 原生范式，提供了性能、灵活性、可维护性俱佳的终极解决方案。",[20,1977,1978],{},"通过采用 AST，我们不仅解决了具体的技术挑战，更重要的是实现了思维范式的转变——从面向结果（HTML 字符串）的编程，转向面向过程与结构（AST）的编程。这使我们能够深入内容本质，从而实现对渲染流程的精确控制。",[20,1980,1981],{},"本次从“全量刷新”到“结构化渲染”的优化实践，不仅是一次性能提升的技术过程，更是一次深入理解现代前端工程化思想的系统性探索。最终实现的 Markdown 渲染方案，在性能、功能性与架构优雅性上均达到了较高水准。",[1983,1984,1985],"style",{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sNmU0, html code.shiki .sNmU0{--shiki-default:#986801;--shiki-dark:#E5C07B}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html pre.shiki code .sz0mV, html code.shiki .sz0mV{--shiki-default:#383A42;--shiki-dark:#E06C75}html pre.shiki code .s7GmK, html code.shiki .s7GmK{--shiki-default:#383A42;--shiki-dark:#E5C07B}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sUNH4, html code.shiki .sUNH4{--shiki-default:white;--shiki-dark:#FFFFFF}html pre.shiki code .s8iYz, html code.shiki .s8iYz{--shiki-default:#383A42;--shiki-default-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic}html pre.shiki code .s2QsP, html code.shiki .s2QsP{--shiki-default:#E45649;--shiki-dark:#E5C07B}html pre.shiki code .sj4iG, html code.shiki .sj4iG{--shiki-default:#C18401;--shiki-dark:#E06C75}html pre.shiki code .s7DPa, html code.shiki .s7DPa{--shiki-default:#0184BC;--shiki-dark:#C678DD}html pre.shiki code .st7oF, html code.shiki .st7oF{--shiki-default:#0184BC;--shiki-dark:#ABB2BF}html pre.shiki code .sAOjX, html code.shiki .sAOjX{--shiki-default:#CA1243;--shiki-dark:#C678DD}html pre.shiki code .sMj0N, html code.shiki .sMj0N{--shiki-default:#50A14F;--shiki-dark:#ABB2BF}",{"title":217,"searchDepth":273,"depth":273,"links":1987},[1988,1990,1994,1995,1996,1997,1998],{"id":12,"depth":273,"text":1989},"上回回顾：当 morphdom 遇上 Vue",{"id":69,"depth":273,"text":70,"children":1991},[1992,1993],{"id":130,"depth":287,"text":131},{"id":159,"depth":287,"text":160},{"id":206,"depth":273,"text":207},{"id":700,"depth":273,"text":701},{"id":1369,"depth":273,"text":1370},{"id":1834,"depth":273,"text":1835},{"id":1947,"depth":273,"text":1948},"2025-07-13 00:01:35","md",{},"/2025/07/13/vue-markdown-render-improvement-2","---\ntitle: Vue Markdown 渲染优化实战(下)：告别 DOM 操作，拥抱 AST 与函数式渲染\ndate: 2025-07-13 00:01:35\nsticky:\ntags:\n- Vue.js\n- Markdown\n- AST\n- JavaScript\n- Web\n- unified\n---\n\n## 上回回顾：当 `morphdom` 遇上 Vue\n\n在[上一篇文章](/2025/07/12/vue-markdown-render-improvement-1/)中，我们经历了一场 Markdown 渲染的性能优化之旅。从最原始的 `v-html` 全量刷新，到按块更新，最终我们请出了 `morphdom` 这个“终极武器”。它通过直接比对和操作真实 DOM，以最小的代价更新视图，完美解决了实时渲染中的性能瓶颈和交互状态丢失问题。\n\n然而，一个根本性问题始终存在：在 Vue 的地盘里，绕过 Vue 的虚拟 DOM (Virtual DOM) 和 Diff 算法，直接用一个第三方库去“动刀”真实 DOM，总感觉有些“旁门左道”。这就像在一个精密的自动化工厂里，引入了一个老师傅拿着锤子和扳手进行手动修补。虽然活干得漂亮，但总觉得破坏了原有的工作流，不够“Vue”。\n\n那么，有没有一种更优雅、更“原生”的方式，让我们既能享受精准更新的快感，又能完全融入 Vue 的生态体系呢？\n\n带着这个问题，我询问了前端群里的伙伴们。\n\n> 如果就要做一个渲染器，你这个思路不是最佳实践。每次更新时，你都生成全量的虚拟 HTML，然后再对 HTML 做减法来优化性能。然而，每次更新的增量部分是明确的，为什么不直接用这部分增量去做加法？增量部分通过 markdown-it 的库无法直接获取，但更好的做法是在这一步进行改造：先解析 Markdown 的结构，再利用 Vue 的动态渲染能力生成 DOM。这样，DOM 的复用就可以借助 Vue 自身的能力来实现。—— [j10c](https://site.j10c.cc/)\n\n> 可以用 unified 结合 remark-parse 插件，将 markdown 字符串解析为 ast，然后根据 ast 使用 render func 进行渲染即可。—— bii & [nekomeowww](https://github.com/nekomeowww)\n\n## 新思路：从“字符串转换”到“结构化渲染”\n\n我们之前的方案，无论是 `v-html` 还是 `morphdom`，其核心思路都是：\n\n`Markdown 字符串` -> `markdown-it` -> `HTML 字符串` -> `浏览器/morphdom` -> `DOM`\n\n这条链路的问题在于，从 `HTML 字符串` 这一步开始，我们就丢失了 Markdown 的**原始结构信息**。我们得到的是一堆非结构化的文本，Vue 无法理解其内在逻辑，只能将其囫囵吞下。\n\n而新的思路则是将流程改造为：\n\n`Markdown 字符串` -> `AST (抽象语法树)` -> `Vue VNodes (虚拟节点)` -> `Vue` -> `DOM`\n\n### 什么是 AST？\n\n**AST (Abstract Syntax Tree)** ，即抽象语法树，是源代码或标记语言的结构化表示。它将一长串的文本，解析成一个层级分明的树状对象。对于 Markdown 来说，一个一级标题会变成一个 `type: 'heading', depth: 1` 的节点，一个段落会变成一个 `type: 'paragraph'` 的节点，而段落里的文字，则是 `paragraph` 节点的 `children`。\n\n一旦我们将 Markdown 转换成 AST，就相当于拥有了整个文档的“结构图纸”。我们不再是面对一堆模糊的 HTML 字符串，而是面对一个清晰、可编程的 JavaScript 对象。\n\n### 我们的新工具：unified 与 remark\n\n为了实现 `Markdown -> AST` 的转换，我们引入 `unified` 生态。\n\n- **[unified](https://github.com/unifiedjs/unified)**: 一个强大的内容处理引擎。你可以把它想象成一条流水线，原始文本是原料，通过添加不同的“插件”来对它进行解析、转换和序列化。\n- **[remark-parse](https://github.com/remarkjs/remark)**: 一个 `unified` 插件，专门负责将 Markdown 文本解析成 AST（具体来说是 [mdast](https://github.com/syntax-tree/mdast) 格式）。\n\n## 第一步：将 Markdown 解析为 AST\n\n首先，我们需要安装相关依赖：\n\n```bash\nnpm install unified remark-parse\n```\n\n然后，我们可以轻松地将 Markdown 字符串转换为 AST：\n\n```javascript\nimport { unified } from 'unified'\nimport remarkParse from 'remark-parse'\n\nconst markdownContent = '# Hello, AST!\\n\\nThis is a paragraph.'\n\n// 创建一个处理器实例\nconst processor = unified().use(remarkParse)\n\n// 解析 Markdown 内容\nconst ast = processor.parse(markdownContent)\n\nconsole.log(JSON.stringify(ast, null, 2))\n```\n\n运行以上代码，我们将得到一个如下所示的 JSON 对象，这就是我们梦寐以求的 AST：\n\n```json\n{\n  \"type\": \"root\",\n  \"children\": [\n    {\n      \"type\": \"heading\",\n      \"depth\": 1,\n      \"children\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"Hello, AST!\",\n          \"position\": { ... }\n        }\n      ],\n      \"position\": { ... }\n    },\n    {\n      \"type\": \"paragraph\",\n      \"children\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"This is a paragraph.\",\n          \"position\": { ... }\n        }\n      ],\n      \"position\": { ... }\n    }\n  ],\n  \"position\": { ... }\n}\n```\n\n## 第二步：从 AST 到 Vue VNodes\n\n拿到了 AST，下一步就是将这个“结构图纸”真正地“施工”成用户可见的界面。在 Vue 的世界里，描述 UI 的蓝图就是虚拟节点 (VNode)，而 `h()` 函数（即 hyperscript）就是创建 VNode 的画笔。\n\n我们的任务是编写一个渲染函数，它能够递归地遍历 AST，并为每一种节点类型（`heading`, `paragraph`, `text` 等）生成对应的 VNode。\n\n下面是一个简单的渲染函数实现：\n\n```javascript\nfunction renderAst(node) {\n  if (!node) return null\n  switch (node.type) {\n    case 'root':\n      return h('div', {}, node.children.map(renderAst))\n    case 'paragraph':\n      return h('p', {}, node.children.map(renderAst))\n    case 'text':\n      return node.value\n    case 'emphasis':\n      return h('em', {}, node.children.map(renderAst))\n    case 'strong':\n      return h('strong', {}, node.children.map(renderAst))\n    case 'inlineCode':\n      return h('code', {}, node.value)\n    case 'heading':\n      return h('h' + node.depth, {}, node.children.map(renderAst))\n    case 'code':\n      return h('pre', {}, [h('code', {}, node.value)])\n    case 'list':\n      return h(node.ordered ? 'ol' : 'ul', {}, node.children.map(renderAst))\n    case 'listItem':\n      return h('li', {}, node.children.map(renderAst))\n    case 'thematicBreak':\n      return h('hr')\n    case 'blockquote':\n      return h('blockquote', {}, node.children.map(renderAst))\n    case 'link':\n      return h('a', { href: node.url, target: '_blank' }, node.children.map(renderAst))\n    default:\n      // 其它未实现类型\n      return h('span', { }, `[${node.type}]`)\n  }\n}\n```\n\n## 第三步：封装 Vue 组件\n\n整合上述逻辑，我们可以构建一个 Vue 组件。鉴于直接生成 VNode 的特性，采用函数式组件或显式 `render` 函数最为适宜。\n\n```vue\n\u003Ctemplate>\n  \u003Ccomponent :is=\"VNodeTree\" />\n\u003C/template>\n\n\u003Cscript setup>\nimport { computed, h, shallowRef, watchEffect } from 'vue'\nimport { unified } from 'unified'\nimport remarkParse from 'remark-parse'\n\nconst props = defineProps({\n  mdText: {\n    type: String,\n    default: ''\n  }\n})\n\nconst ast = shallowRef(null)\nconst parser = unified().use(remarkParse)\n\nwatchEffect(() => {\n  ast.value = parser.parse(props.mdText)\n})\n\n// AST 渲染函数 (同上文 renderAst 函数)\nfunction renderAst(node) { ... }\n\nconst VNodeTree = computed(() => renderAst(ast.value))\n\n\u003C/script>\n```\n\n现在就可以像使用普通组件一样使用它了：\n\n```vue\n\u003Ctemplate>\n  \u003CMarkdownRenderer :mdText=\"markdownContent\" />\n\u003C/template>\n\n\u003Cscript setup>\nimport { ref } from 'vue'\nimport MarkdownRenderer from './MarkdownRenderer.vue'\n\nconst markdownContent = ref('# Hello Vue\\n\\nThis is rendered via AST!')\n\u003C/script>\n```\n\n## AST 方案的巨大优势\n\n切换到 AST 赛道后，我们获得了前所未有的超能力：\n\n1. **原生集成，性能卓越**：我们不再需要 `v-html` 的暴力刷新，也不再需要 `morphdom` 这样的“外援”。所有更新都交由 Vue 自己的 Diff 算法处理，这不仅性能极高，而且完全符合 Vue 的设计哲学，是真正的“自己人”。\n2. **高度灵活性与可扩展性**：AST 作为可编程的 JavaScript 对象，为定制化处理提供了坚实基础：\n   - **元素替换**：可将原生元素（如 `\u003Ch2>`）无缝替换为自定义 Vue 组件（如 `\u003CFancyHeading>`），仅在 `renderAst` 函数中调整对应 `case` 逻辑即可。\n   - **逻辑注入**：可便捷地为外部链接 `\u003Ca>` 添加 `target=\"_blank\"` 与 `rel=\"noopener noreferrer\"` 属性，或为图片 `\u003Cimg>` 包裹懒加载组件，此类操作在 AST 层面易于实现。\n   - **生态集成**：充分利用 `unified` 丰富的插件生态（如 `remark-gfm` 支持 GFM 语法，`remark-prism` 实现代码高亮），仅需在处理器链中引入相应插件（`.use(pluginName)`）。\n3. **关注点分离**：解析逻辑（`remark`）、渲染逻辑（`renderAst`）和业务逻辑（Vue 组件）被清晰地分离开来，代码结构更清晰，维护性更强。\n4. **类型安全与可预测性**：相较于操作字符串或原始 HTML，基于结构化 AST 的渲染逻辑更易于进行类型校验与逻辑推理。\n\n## 结论：从功能实现到架构优化的演进\n\n回顾优化历程：\n\n- **v-html**：实现简单，但存在性能与安全性隐患。\n- **分块更新**：缓解了部分性能问题，但方案存在局限性。\n- **morphdom**：有效提升了性能与用户体验，但与 Vue 核心机制存在隔阂。\n- **AST + 函数式渲染**：回归 Vue 原生范式，提供了性能、灵活性、可维护性俱佳的终极解决方案。\n\n通过采用 AST，我们不仅解决了具体的技术挑战，更重要的是实现了思维范式的转变——从面向结果（HTML 字符串）的编程，转向面向过程与结构（AST）的编程。这使我们能够深入内容本质，从而实现对渲染流程的精确控制。\n\n本次从“全量刷新”到“结构化渲染”的优化实践，不仅是一次性能提升的技术过程，更是一次深入理解现代前端工程化思想的系统性探索。最终实现的 Markdown 渲染方案，在性能、功能性与架构优雅性上均达到了较高水准。\n",{"title":5,"description":217},"posts/vue-markdown-render-improvement-2",false,[2008,2009,2010,2011,2012,170],"Vue.js","Markdown","AST","JavaScript","Web","kHu-CR2pWwIYXVMxshIkFBBLi9pMkvyP48JVi6h341A",[2015,2020],{"title":2016,"path":2017,"stem":2018,"date":2019,"children":-1},"DNS 解析时长毁了我精心设计的图床网络架构","/2025/08/11/dns-resolve-time-destroyed-my-optimization-for-pic-cdn","posts/dns-resolve-time-destroyed-my-optimization-for-pic-cdn","2025-08-11 00:06:40",{"title":2021,"path":2022,"stem":2023,"date":2024,"children":-1},"Vue Markdown 渲染优化实战(上)：从暴力刷新、分块更新到 Morphdom 的华丽变身","/2025/07/12/vue-markdown-render-improvement-1","posts/vue-markdown-render-improvement-1","2025-07-12 20:48:56",1761883463785]