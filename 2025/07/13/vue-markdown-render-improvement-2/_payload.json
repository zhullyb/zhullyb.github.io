[{"data":1,"prerenderedAt":1757},["ShallowReactive",2],{"post-2025-07-13-vue-markdown-render-improvement-2":3,"surround-2025-07-13-vue-markdown-render-improvement-2":1746,"randomIndex/2025/07/13/vue-markdown-render-improvement-2/":611},{"id":4,"title":5,"body":6,"date":1731,"description":217,"extension":1732,"meta":1733,"navigation":283,"path":1734,"rawbody":1735,"seo":1736,"stem":1737,"sticky":1738,"tags":1739,"__hash__":1745},"posts/posts/vue-markdown-render-improvement-2.md","Vue Markdown 渲染优化实战(下)：告别 DOM 操作，拥抱 AST 与函数式渲染",{"type":7,"value":8,"toc":1718},"minimark",[9,19,36,39,42,45,57,67,71,80,98,109,112,127,132,154,157,161,172,204,208,211,239,242,411,414,671,675,682,694,697,1159,1163,1170,1450,1453,1563,1567,1570,1677,1681,1684,1708,1711,1714],[10,11,13,14,18],"h2",{"id":12},"上回回顾当-morphdom-遇上-vue","上回回顾：当 ",[15,16,17],"code",{},"morphdom"," 遇上 Vue",[20,21,22,23,28,29,32,33,35],"p",{},"在",[24,25,27],"a",{"href":26},"/2025/07/12/vue-markdown-render-improvement-1/","上一篇文章","中，我们经历了一场 Markdown 渲染的性能优化之旅。从最原始的 ",[15,30,31],{},"v-html"," 全量刷新，到按块更新，最终我们请出了 ",[15,34,17],{}," 这个“终极武器”。它通过直接比对和操作真实 DOM，以最小的代价更新视图，完美解决了实时渲染中的性能瓶颈和交互状态丢失问题。",[20,37,38],{},"然而，一个根本性问题始终存在：在 Vue 的地盘里，绕过 Vue 的虚拟 DOM (Virtual DOM) 和 Diff 算法，直接用一个第三方库去“动刀”真实 DOM，总感觉有些“旁门左道”。这就像在一个精密的自动化工厂里，引入了一个老师傅拿着锤子和扳手进行手动修补。虽然活干得漂亮，但总觉得破坏了原有的工作流，不够“Vue”。",[20,40,41],{},"那么，有没有一种更优雅、更“原生”的方式，让我们既能享受精准更新的快感，又能完全融入 Vue 的生态体系呢？",[20,43,44],{},"带着这个问题，我询问了前端群里的伙伴们。",[46,47,48],"blockquote",{},[20,49,50,51],{},"如果就要做一个渲染器，你这个思路不是最佳实践。每次更新时，你都生成全量的虚拟 HTML，然后再对 HTML 做减法来优化性能。然而，每次更新的增量部分是明确的，为什么不直接用这部分增量去做加法？增量部分通过 markdown-it 的库无法直接获取，但更好的做法是在这一步进行改造：先解析 Markdown 的结构，再利用 Vue 的动态渲染能力生成 DOM。这样，DOM 的复用就可以借助 Vue 自身的能力来实现。—— ",[24,52,56],{"href":53,"rel":54},"https://site.j10c.cc/",[55],"nofollow","j10c",[46,58,59],{},[20,60,61,62],{},"可以用 unified 结合 remark-parse 插件，将 markdown 字符串解析为 ast，然后根据 ast 使用 render func 进行渲染即可。—— bii & ",[24,63,66],{"href":64,"rel":65},"https://github.com/nekomeowww",[55],"nekomeowww",[10,68,70],{"id":69},"新思路从字符串转换到结构化渲染","新思路：从“字符串转换”到“结构化渲染”",[20,72,73,74,76,77,79],{},"我们之前的方案，无论是 ",[15,75,31],{}," 还是 ",[15,78,17],{},"，其核心思路都是：",[20,81,82,85,86,85,89,85,92,85,95],{},[15,83,84],{},"Markdown 字符串"," -> ",[15,87,88],{},"markdown-it",[15,90,91],{},"HTML 字符串",[15,93,94],{},"浏览器/morphdom",[15,96,97],{},"DOM",[20,99,100,101,103,104,108],{},"这条链路的问题在于，从 ",[15,102,91],{}," 这一步开始，我们就丢失了 Markdown 的",[105,106,107],"strong",{},"原始结构信息","。我们得到的是一堆非结构化的文本，Vue 无法理解其内在逻辑，只能将其囫囵吞下。",[20,110,111],{},"而新的思路则是将流程改造为：",[20,113,114,85,116,85,119,85,122,85,125],{},[15,115,84],{},[15,117,118],{},"AST (抽象语法树)",[15,120,121],{},"Vue VNodes (虚拟节点)",[15,123,124],{},"Vue",[15,126,97],{},[128,129,131],"h3",{"id":130},"什么是-ast","什么是 AST？",[20,133,134,137,138,141,142,145,146,149,150,153],{},[105,135,136],{},"AST (Abstract Syntax Tree)"," ，即抽象语法树，是源代码或标记语言的结构化表示。它将一长串的文本，解析成一个层级分明的树状对象。对于 Markdown 来说，一个一级标题会变成一个 ",[15,139,140],{},"type: 'heading', depth: 1"," 的节点，一个段落会变成一个 ",[15,143,144],{},"type: 'paragraph'"," 的节点，而段落里的文字，则是 ",[15,147,148],{},"paragraph"," 节点的 ",[15,151,152],{},"children","。",[20,155,156],{},"一旦我们将 Markdown 转换成 AST，就相当于拥有了整个文档的“结构图纸”。我们不再是面对一堆模糊的 HTML 字符串，而是面对一个清晰、可编程的 JavaScript 对象。",[128,158,160],{"id":159},"我们的新工具unified-与-remark","我们的新工具：unified 与 remark",[20,162,163,164,167,168,171],{},"为了实现 ",[15,165,166],{},"Markdown -> AST"," 的转换，我们引入 ",[15,169,170],{},"unified"," 生态。",[173,174,175,185],"ul",{},[176,177,178,184],"li",{},[105,179,180],{},[24,181,170],{"href":182,"rel":183},"https://github.com/unifiedjs/unified",[55],": 一个强大的内容处理引擎。你可以把它想象成一条流水线，原始文本是原料，通过添加不同的“插件”来对它进行解析、转换和序列化。",[176,186,187,194,195,197,198,203],{},[105,188,189],{},[24,190,193],{"href":191,"rel":192},"https://github.com/remarkjs/remark",[55],"remark-parse",": 一个 ",[15,196,170],{}," 插件，专门负责将 Markdown 文本解析成 AST（具体来说是 ",[24,199,202],{"href":200,"rel":201},"https://github.com/syntax-tree/mdast",[55],"mdast"," 格式）。",[10,205,207],{"id":206},"第一步将-markdown-解析为-ast","第一步：将 Markdown 解析为 AST",[20,209,210],{},"首先，我们需要安装相关依赖：",[212,213,218],"pre",{"className":214,"code":215,"language":216,"meta":217,"style":217},"language-bash shiki shiki-themes github-light github-dark","npm install unified remark-parse\n","bash","",[15,219,220],{"__ignoreMap":217},[221,222,225,229,233,236],"span",{"class":223,"line":224},"line",1,[221,226,228],{"class":227},"sScJk","npm",[221,230,232],{"class":231},"sZZnC"," install",[221,234,235],{"class":231}," unified",[221,237,238],{"class":231}," remark-parse\n",[20,240,241],{},"然后，我们可以轻松地将 Markdown 字符串转换为 AST：",[212,243,247],{"className":244,"code":245,"language":246,"meta":217,"style":217},"language-javascript shiki shiki-themes github-light github-dark","import { unified } from 'unified'\nimport remarkParse from 'remark-parse'\n\nconst markdownContent = '# Hello, AST!\\n\\nThis is a paragraph.'\n\n// 创建一个处理器实例\nconst processor = unified().use(remarkParse)\n\n// 解析 Markdown 内容\nconst ast = processor.parse(markdownContent)\n\nconsole.log(JSON.stringify(ast, null, 2))\n","javascript",[15,248,249,265,278,285,307,312,319,340,345,351,370,375],{"__ignoreMap":217},[221,250,251,255,259,262],{"class":223,"line":224},[221,252,254],{"class":253},"szBVR","import",[221,256,258],{"class":257},"sVt8B"," { unified } ",[221,260,261],{"class":253},"from",[221,263,264],{"class":231}," 'unified'\n",[221,266,268,270,273,275],{"class":223,"line":267},2,[221,269,254],{"class":253},[221,271,272],{"class":257}," remarkParse ",[221,274,261],{"class":253},[221,276,277],{"class":231}," 'remark-parse'\n",[221,279,281],{"class":223,"line":280},3,[221,282,284],{"emptyLinePlaceholder":283},true,"\n",[221,286,288,291,295,298,301,304],{"class":223,"line":287},4,[221,289,290],{"class":253},"const",[221,292,294],{"class":293},"sj4cs"," markdownContent",[221,296,297],{"class":253}," =",[221,299,300],{"class":231}," '# Hello, AST!",[221,302,303],{"class":293},"\\n\\n",[221,305,306],{"class":231},"This is a paragraph.'\n",[221,308,310],{"class":223,"line":309},5,[221,311,284],{"emptyLinePlaceholder":283},[221,313,315],{"class":223,"line":314},6,[221,316,318],{"class":317},"sJ8bj","// 创建一个处理器实例\n",[221,320,322,324,327,329,331,334,337],{"class":223,"line":321},7,[221,323,290],{"class":253},[221,325,326],{"class":293}," processor",[221,328,297],{"class":253},[221,330,235],{"class":227},[221,332,333],{"class":257},"().",[221,335,336],{"class":227},"use",[221,338,339],{"class":257},"(remarkParse)\n",[221,341,343],{"class":223,"line":342},8,[221,344,284],{"emptyLinePlaceholder":283},[221,346,348],{"class":223,"line":347},9,[221,349,350],{"class":317},"// 解析 Markdown 内容\n",[221,352,354,356,359,361,364,367],{"class":223,"line":353},10,[221,355,290],{"class":253},[221,357,358],{"class":293}," ast",[221,360,297],{"class":253},[221,362,363],{"class":257}," processor.",[221,365,366],{"class":227},"parse",[221,368,369],{"class":257},"(markdownContent)\n",[221,371,373],{"class":223,"line":372},11,[221,374,284],{"emptyLinePlaceholder":283},[221,376,378,381,384,387,390,393,396,399,402,405,408],{"class":223,"line":377},12,[221,379,380],{"class":257},"console.",[221,382,383],{"class":227},"log",[221,385,386],{"class":257},"(",[221,388,389],{"class":293},"JSON",[221,391,392],{"class":257},".",[221,394,395],{"class":227},"stringify",[221,397,398],{"class":257},"(ast, ",[221,400,401],{"class":293},"null",[221,403,404],{"class":257},", ",[221,406,407],{"class":293},"2",[221,409,410],{"class":257},"))\n",[20,412,413],{},"运行以上代码，我们将得到一个如下所示的 JSON 对象，这就是我们梦寐以求的 AST：",[212,415,419],{"className":416,"code":417,"language":418,"meta":217,"style":217},"language-json shiki shiki-themes github-light github-dark","{\n  \"type\": \"root\",\n  \"children\": [\n    {\n      \"type\": \"heading\",\n      \"depth\": 1,\n      \"children\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"Hello, AST!\",\n          \"position\": { ... }\n        }\n      ],\n      \"position\": { ... }\n    },\n    {\n      \"type\": \"paragraph\",\n      \"children\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"This is a paragraph.\",\n          \"position\": { ... }\n        }\n      ],\n      \"position\": { ... }\n    }\n  ],\n  \"position\": { ... }\n}\n","json",[15,420,421,426,440,448,453,465,477,484,489,501,513,528,533,539,551,557,562,574,581,586,597,609,620,625,630,641,647,653,665],{"__ignoreMap":217},[221,422,423],{"class":223,"line":224},[221,424,425],{"class":257},"{\n",[221,427,428,431,434,437],{"class":223,"line":267},[221,429,430],{"class":293},"  \"type\"",[221,432,433],{"class":257},": ",[221,435,436],{"class":231},"\"root\"",[221,438,439],{"class":257},",\n",[221,441,442,445],{"class":223,"line":280},[221,443,444],{"class":293},"  \"children\"",[221,446,447],{"class":257},": [\n",[221,449,450],{"class":223,"line":287},[221,451,452],{"class":257},"    {\n",[221,454,455,458,460,463],{"class":223,"line":309},[221,456,457],{"class":293},"      \"type\"",[221,459,433],{"class":257},[221,461,462],{"class":231},"\"heading\"",[221,464,439],{"class":257},[221,466,467,470,472,475],{"class":223,"line":314},[221,468,469],{"class":293},"      \"depth\"",[221,471,433],{"class":257},[221,473,474],{"class":293},"1",[221,476,439],{"class":257},[221,478,479,482],{"class":223,"line":321},[221,480,481],{"class":293},"      \"children\"",[221,483,447],{"class":257},[221,485,486],{"class":223,"line":342},[221,487,488],{"class":257},"        {\n",[221,490,491,494,496,499],{"class":223,"line":347},[221,492,493],{"class":293},"          \"type\"",[221,495,433],{"class":257},[221,497,498],{"class":231},"\"text\"",[221,500,439],{"class":257},[221,502,503,506,508,511],{"class":223,"line":353},[221,504,505],{"class":293},"          \"value\"",[221,507,433],{"class":257},[221,509,510],{"class":231},"\"Hello, AST!\"",[221,512,439],{"class":257},[221,514,515,518,521,525],{"class":223,"line":372},[221,516,517],{"class":293},"          \"position\"",[221,519,520],{"class":257},": { ",[221,522,524],{"class":523},"s7hpK","...",[221,526,527],{"class":257}," }\n",[221,529,530],{"class":223,"line":377},[221,531,532],{"class":257},"        }\n",[221,534,536],{"class":223,"line":535},13,[221,537,538],{"class":257},"      ],\n",[221,540,542,545,547,549],{"class":223,"line":541},14,[221,543,544],{"class":293},"      \"position\"",[221,546,520],{"class":257},[221,548,524],{"class":523},[221,550,527],{"class":257},[221,552,554],{"class":223,"line":553},15,[221,555,556],{"class":257},"    },\n",[221,558,560],{"class":223,"line":559},16,[221,561,452],{"class":257},[221,563,565,567,569,572],{"class":223,"line":564},17,[221,566,457],{"class":293},[221,568,433],{"class":257},[221,570,571],{"class":231},"\"paragraph\"",[221,573,439],{"class":257},[221,575,577,579],{"class":223,"line":576},18,[221,578,481],{"class":293},[221,580,447],{"class":257},[221,582,584],{"class":223,"line":583},19,[221,585,488],{"class":257},[221,587,589,591,593,595],{"class":223,"line":588},20,[221,590,493],{"class":293},[221,592,433],{"class":257},[221,594,498],{"class":231},[221,596,439],{"class":257},[221,598,600,602,604,607],{"class":223,"line":599},21,[221,601,505],{"class":293},[221,603,433],{"class":257},[221,605,606],{"class":231},"\"This is a paragraph.\"",[221,608,439],{"class":257},[221,610,612,614,616,618],{"class":223,"line":611},22,[221,613,517],{"class":293},[221,615,520],{"class":257},[221,617,524],{"class":523},[221,619,527],{"class":257},[221,621,623],{"class":223,"line":622},23,[221,624,532],{"class":257},[221,626,628],{"class":223,"line":627},24,[221,629,538],{"class":257},[221,631,633,635,637,639],{"class":223,"line":632},25,[221,634,544],{"class":293},[221,636,520],{"class":257},[221,638,524],{"class":523},[221,640,527],{"class":257},[221,642,644],{"class":223,"line":643},26,[221,645,646],{"class":257},"    }\n",[221,648,650],{"class":223,"line":649},27,[221,651,652],{"class":257},"  ],\n",[221,654,656,659,661,663],{"class":223,"line":655},28,[221,657,658],{"class":293},"  \"position\"",[221,660,520],{"class":257},[221,662,524],{"class":523},[221,664,527],{"class":257},[221,666,668],{"class":223,"line":667},29,[221,669,670],{"class":257},"}\n",[10,672,674],{"id":673},"第二步从-ast-到-vue-vnodes","第二步：从 AST 到 Vue VNodes",[20,676,677,678,681],{},"拿到了 AST，下一步就是将这个“结构图纸”真正地“施工”成用户可见的界面。在 Vue 的世界里，描述 UI 的蓝图就是虚拟节点 (VNode)，而 ",[15,679,680],{},"h()"," 函数（即 hyperscript）就是创建 VNode 的画笔。",[20,683,684,685,404,688,404,690,693],{},"我们的任务是编写一个渲染函数，它能够递归地遍历 AST，并为每一种节点类型（",[15,686,687],{},"heading",[15,689,148],{},[15,691,692],{},"text"," 等）生成对应的 VNode。",[20,695,696],{},"下面是一个简单的渲染函数实现：",[212,698,700],{"className":244,"code":699,"language":246,"meta":217,"style":217},"function renderAst(node) {\n  if (!node) return null\n  switch (node.type) {\n    case 'root':\n      return h('div', {}, node.children.map(renderAst))\n    case 'paragraph':\n      return h('p', {}, node.children.map(renderAst))\n    case 'text':\n      return node.value\n    case 'emphasis':\n      return h('em', {}, node.children.map(renderAst))\n    case 'strong':\n      return h('strong', {}, node.children.map(renderAst))\n    case 'inlineCode':\n      return h('code', {}, node.value)\n    case 'heading':\n      return h('h' + node.depth, {}, node.children.map(renderAst))\n    case 'code':\n      return h('pre', {}, [h('code', {}, node.value)])\n    case 'list':\n      return h(node.ordered ? 'ol' : 'ul', {}, node.children.map(renderAst))\n    case 'listItem':\n      return h('li', {}, node.children.map(renderAst))\n    case 'thematicBreak':\n      return h('hr')\n    case 'blockquote':\n      return h('blockquote', {}, node.children.map(renderAst))\n    case 'link':\n      return h('a', { href: node.url, target: '_blank' }, node.children.map(renderAst))\n    default:\n      // 其它未实现类型\n      return h('span', { }, `[${node.type}]`)\n  }\n}\n",[15,701,702,719,739,747,758,780,789,806,815,822,831,848,857,874,883,897,906,927,936,960,969,996,1005,1022,1031,1045,1054,1071,1080,1104,1112,1118,1148,1154],{"__ignoreMap":217},[221,703,704,707,710,712,716],{"class":223,"line":224},[221,705,706],{"class":253},"function",[221,708,709],{"class":227}," renderAst",[221,711,386],{"class":257},[221,713,715],{"class":714},"s4XuR","node",[221,717,718],{"class":257},") {\n",[221,720,721,724,727,730,733,736],{"class":223,"line":267},[221,722,723],{"class":253},"  if",[221,725,726],{"class":257}," (",[221,728,729],{"class":253},"!",[221,731,732],{"class":257},"node) ",[221,734,735],{"class":253},"return",[221,737,738],{"class":293}," null\n",[221,740,741,744],{"class":223,"line":280},[221,742,743],{"class":253},"  switch",[221,745,746],{"class":257}," (node.type) {\n",[221,748,749,752,755],{"class":223,"line":287},[221,750,751],{"class":253},"    case",[221,753,754],{"class":231}," 'root'",[221,756,757],{"class":257},":\n",[221,759,760,763,766,768,771,774,777],{"class":223,"line":309},[221,761,762],{"class":253},"      return",[221,764,765],{"class":227}," h",[221,767,386],{"class":257},[221,769,770],{"class":231},"'div'",[221,772,773],{"class":257},", {}, node.children.",[221,775,776],{"class":227},"map",[221,778,779],{"class":257},"(renderAst))\n",[221,781,782,784,787],{"class":223,"line":314},[221,783,751],{"class":253},[221,785,786],{"class":231}," 'paragraph'",[221,788,757],{"class":257},[221,790,791,793,795,797,800,802,804],{"class":223,"line":321},[221,792,762],{"class":253},[221,794,765],{"class":227},[221,796,386],{"class":257},[221,798,799],{"class":231},"'p'",[221,801,773],{"class":257},[221,803,776],{"class":227},[221,805,779],{"class":257},[221,807,808,810,813],{"class":223,"line":342},[221,809,751],{"class":253},[221,811,812],{"class":231}," 'text'",[221,814,757],{"class":257},[221,816,817,819],{"class":223,"line":347},[221,818,762],{"class":253},[221,820,821],{"class":257}," node.value\n",[221,823,824,826,829],{"class":223,"line":353},[221,825,751],{"class":253},[221,827,828],{"class":231}," 'emphasis'",[221,830,757],{"class":257},[221,832,833,835,837,839,842,844,846],{"class":223,"line":372},[221,834,762],{"class":253},[221,836,765],{"class":227},[221,838,386],{"class":257},[221,840,841],{"class":231},"'em'",[221,843,773],{"class":257},[221,845,776],{"class":227},[221,847,779],{"class":257},[221,849,850,852,855],{"class":223,"line":377},[221,851,751],{"class":253},[221,853,854],{"class":231}," 'strong'",[221,856,757],{"class":257},[221,858,859,861,863,865,868,870,872],{"class":223,"line":535},[221,860,762],{"class":253},[221,862,765],{"class":227},[221,864,386],{"class":257},[221,866,867],{"class":231},"'strong'",[221,869,773],{"class":257},[221,871,776],{"class":227},[221,873,779],{"class":257},[221,875,876,878,881],{"class":223,"line":541},[221,877,751],{"class":253},[221,879,880],{"class":231}," 'inlineCode'",[221,882,757],{"class":257},[221,884,885,887,889,891,894],{"class":223,"line":553},[221,886,762],{"class":253},[221,888,765],{"class":227},[221,890,386],{"class":257},[221,892,893],{"class":231},"'code'",[221,895,896],{"class":257},", {}, node.value)\n",[221,898,899,901,904],{"class":223,"line":559},[221,900,751],{"class":253},[221,902,903],{"class":231}," 'heading'",[221,905,757],{"class":257},[221,907,908,910,912,914,917,920,923,925],{"class":223,"line":564},[221,909,762],{"class":253},[221,911,765],{"class":227},[221,913,386],{"class":257},[221,915,916],{"class":231},"'h'",[221,918,919],{"class":253}," +",[221,921,922],{"class":257}," node.depth, {}, node.children.",[221,924,776],{"class":227},[221,926,779],{"class":257},[221,928,929,931,934],{"class":223,"line":576},[221,930,751],{"class":253},[221,932,933],{"class":231}," 'code'",[221,935,757],{"class":257},[221,937,938,940,942,944,947,950,953,955,957],{"class":223,"line":583},[221,939,762],{"class":253},[221,941,765],{"class":227},[221,943,386],{"class":257},[221,945,946],{"class":231},"'pre'",[221,948,949],{"class":257},", {}, [",[221,951,952],{"class":227},"h",[221,954,386],{"class":257},[221,956,893],{"class":231},[221,958,959],{"class":257},", {}, node.value)])\n",[221,961,962,964,967],{"class":223,"line":588},[221,963,751],{"class":253},[221,965,966],{"class":231}," 'list'",[221,968,757],{"class":257},[221,970,971,973,975,978,981,984,987,990,992,994],{"class":223,"line":599},[221,972,762],{"class":253},[221,974,765],{"class":227},[221,976,977],{"class":257},"(node.ordered ",[221,979,980],{"class":253},"?",[221,982,983],{"class":231}," 'ol'",[221,985,986],{"class":253}," :",[221,988,989],{"class":231}," 'ul'",[221,991,773],{"class":257},[221,993,776],{"class":227},[221,995,779],{"class":257},[221,997,998,1000,1003],{"class":223,"line":611},[221,999,751],{"class":253},[221,1001,1002],{"class":231}," 'listItem'",[221,1004,757],{"class":257},[221,1006,1007,1009,1011,1013,1016,1018,1020],{"class":223,"line":622},[221,1008,762],{"class":253},[221,1010,765],{"class":227},[221,1012,386],{"class":257},[221,1014,1015],{"class":231},"'li'",[221,1017,773],{"class":257},[221,1019,776],{"class":227},[221,1021,779],{"class":257},[221,1023,1024,1026,1029],{"class":223,"line":627},[221,1025,751],{"class":253},[221,1027,1028],{"class":231}," 'thematicBreak'",[221,1030,757],{"class":257},[221,1032,1033,1035,1037,1039,1042],{"class":223,"line":632},[221,1034,762],{"class":253},[221,1036,765],{"class":227},[221,1038,386],{"class":257},[221,1040,1041],{"class":231},"'hr'",[221,1043,1044],{"class":257},")\n",[221,1046,1047,1049,1052],{"class":223,"line":643},[221,1048,751],{"class":253},[221,1050,1051],{"class":231}," 'blockquote'",[221,1053,757],{"class":257},[221,1055,1056,1058,1060,1062,1065,1067,1069],{"class":223,"line":649},[221,1057,762],{"class":253},[221,1059,765],{"class":227},[221,1061,386],{"class":257},[221,1063,1064],{"class":231},"'blockquote'",[221,1066,773],{"class":257},[221,1068,776],{"class":227},[221,1070,779],{"class":257},[221,1072,1073,1075,1078],{"class":223,"line":655},[221,1074,751],{"class":253},[221,1076,1077],{"class":231}," 'link'",[221,1079,757],{"class":257},[221,1081,1082,1084,1086,1088,1091,1094,1097,1100,1102],{"class":223,"line":667},[221,1083,762],{"class":253},[221,1085,765],{"class":227},[221,1087,386],{"class":257},[221,1089,1090],{"class":231},"'a'",[221,1092,1093],{"class":257},", { href: node.url, target: ",[221,1095,1096],{"class":231},"'_blank'",[221,1098,1099],{"class":257}," }, node.children.",[221,1101,776],{"class":227},[221,1103,779],{"class":257},[221,1105,1107,1110],{"class":223,"line":1106},30,[221,1108,1109],{"class":253},"    default",[221,1111,757],{"class":257},[221,1113,1115],{"class":223,"line":1114},31,[221,1116,1117],{"class":317},"      // 其它未实现类型\n",[221,1119,1121,1123,1125,1127,1130,1133,1136,1138,1140,1143,1146],{"class":223,"line":1120},32,[221,1122,762],{"class":253},[221,1124,765],{"class":227},[221,1126,386],{"class":257},[221,1128,1129],{"class":231},"'span'",[221,1131,1132],{"class":257},", { }, ",[221,1134,1135],{"class":231},"`[${",[221,1137,715],{"class":257},[221,1139,392],{"class":231},[221,1141,1142],{"class":257},"type",[221,1144,1145],{"class":231},"}]`",[221,1147,1044],{"class":257},[221,1149,1151],{"class":223,"line":1150},33,[221,1152,1153],{"class":257},"  }\n",[221,1155,1157],{"class":223,"line":1156},34,[221,1158,670],{"class":257},[10,1160,1162],{"id":1161},"第三步封装-vue-组件","第三步：封装 Vue 组件",[20,1164,1165,1166,1169],{},"整合上述逻辑，我们可以构建一个 Vue 组件。鉴于直接生成 VNode 的特性，采用函数式组件或显式 ",[15,1167,1168],{},"render"," 函数最为适宜。",[212,1171,1175],{"className":1172,"code":1173,"language":1174,"meta":217,"style":217},"language-vue shiki shiki-themes github-light github-dark","\u003Ctemplate>\n  \u003Ccomponent :is=\"VNodeTree\" />\n\u003C/template>\n\n\u003Cscript setup>\nimport { computed, h, shallowRef, watchEffect } from 'vue'\nimport { unified } from 'unified'\nimport remarkParse from 'remark-parse'\n\nconst props = defineProps({\n  mdText: {\n    type: String,\n    default: ''\n  }\n})\n\nconst ast = shallowRef(null)\nconst parser = unified().use(remarkParse)\n\nwatchEffect(() => {\n  ast.value = parser.parse(props.mdText)\n})\n\n// AST 渲染函数 (同上文 renderAst 函数)\nfunction renderAst(node) { ... }\n\nconst VNodeTree = computed(() => renderAst(ast.value))\n\n\u003C/script>\n","vue",[15,1176,1177,1189,1209,1218,1222,1234,1246,1256,1266,1270,1285,1290,1295,1303,1307,1312,1316,1333,1350,1354,1368,1383,1387,1391,1396,1413,1417,1438,1442],{"__ignoreMap":217},[221,1178,1179,1182,1186],{"class":223,"line":224},[221,1180,1181],{"class":257},"\u003C",[221,1183,1185],{"class":1184},"s9eBZ","template",[221,1187,1188],{"class":257},">\n",[221,1190,1191,1194,1197,1200,1203,1206],{"class":223,"line":267},[221,1192,1193],{"class":257},"  \u003C",[221,1195,1196],{"class":1184},"component",[221,1198,1199],{"class":227}," :is",[221,1201,1202],{"class":257},"=",[221,1204,1205],{"class":231},"\"VNodeTree\"",[221,1207,1208],{"class":257}," />\n",[221,1210,1211,1214,1216],{"class":223,"line":280},[221,1212,1213],{"class":257},"\u003C/",[221,1215,1185],{"class":1184},[221,1217,1188],{"class":257},[221,1219,1220],{"class":223,"line":287},[221,1221,284],{"emptyLinePlaceholder":283},[221,1223,1224,1226,1229,1232],{"class":223,"line":309},[221,1225,1181],{"class":257},[221,1227,1228],{"class":1184},"script",[221,1230,1231],{"class":227}," setup",[221,1233,1188],{"class":257},[221,1235,1236,1238,1241,1243],{"class":223,"line":314},[221,1237,254],{"class":253},[221,1239,1240],{"class":257}," { computed, h, shallowRef, watchEffect } ",[221,1242,261],{"class":253},[221,1244,1245],{"class":231}," 'vue'\n",[221,1247,1248,1250,1252,1254],{"class":223,"line":321},[221,1249,254],{"class":253},[221,1251,258],{"class":257},[221,1253,261],{"class":253},[221,1255,264],{"class":231},[221,1257,1258,1260,1262,1264],{"class":223,"line":342},[221,1259,254],{"class":253},[221,1261,272],{"class":257},[221,1263,261],{"class":253},[221,1265,277],{"class":231},[221,1267,1268],{"class":223,"line":347},[221,1269,284],{"emptyLinePlaceholder":283},[221,1271,1272,1274,1277,1279,1282],{"class":223,"line":353},[221,1273,290],{"class":253},[221,1275,1276],{"class":293}," props",[221,1278,297],{"class":253},[221,1280,1281],{"class":227}," defineProps",[221,1283,1284],{"class":257},"({\n",[221,1286,1287],{"class":223,"line":372},[221,1288,1289],{"class":257},"  mdText: {\n",[221,1291,1292],{"class":223,"line":377},[221,1293,1294],{"class":257},"    type: String,\n",[221,1296,1297,1300],{"class":223,"line":535},[221,1298,1299],{"class":257},"    default: ",[221,1301,1302],{"class":231},"''\n",[221,1304,1305],{"class":223,"line":541},[221,1306,1153],{"class":257},[221,1308,1309],{"class":223,"line":553},[221,1310,1311],{"class":257},"})\n",[221,1313,1314],{"class":223,"line":559},[221,1315,284],{"emptyLinePlaceholder":283},[221,1317,1318,1320,1322,1324,1327,1329,1331],{"class":223,"line":564},[221,1319,290],{"class":253},[221,1321,358],{"class":293},[221,1323,297],{"class":253},[221,1325,1326],{"class":227}," shallowRef",[221,1328,386],{"class":257},[221,1330,401],{"class":293},[221,1332,1044],{"class":257},[221,1334,1335,1337,1340,1342,1344,1346,1348],{"class":223,"line":576},[221,1336,290],{"class":253},[221,1338,1339],{"class":293}," parser",[221,1341,297],{"class":253},[221,1343,235],{"class":227},[221,1345,333],{"class":257},[221,1347,336],{"class":227},[221,1349,339],{"class":257},[221,1351,1352],{"class":223,"line":583},[221,1353,284],{"emptyLinePlaceholder":283},[221,1355,1356,1359,1362,1365],{"class":223,"line":588},[221,1357,1358],{"class":227},"watchEffect",[221,1360,1361],{"class":257},"(() ",[221,1363,1364],{"class":253},"=>",[221,1366,1367],{"class":257}," {\n",[221,1369,1370,1373,1375,1378,1380],{"class":223,"line":599},[221,1371,1372],{"class":257},"  ast.value ",[221,1374,1202],{"class":253},[221,1376,1377],{"class":257}," parser.",[221,1379,366],{"class":227},[221,1381,1382],{"class":257},"(props.mdText)\n",[221,1384,1385],{"class":223,"line":611},[221,1386,1311],{"class":257},[221,1388,1389],{"class":223,"line":622},[221,1390,284],{"emptyLinePlaceholder":283},[221,1392,1393],{"class":223,"line":627},[221,1394,1395],{"class":317},"// AST 渲染函数 (同上文 renderAst 函数)\n",[221,1397,1398,1400,1402,1404,1406,1409,1411],{"class":223,"line":632},[221,1399,706],{"class":253},[221,1401,709],{"class":227},[221,1403,386],{"class":257},[221,1405,715],{"class":714},[221,1407,1408],{"class":257},") { ",[221,1410,524],{"class":253},[221,1412,527],{"class":257},[221,1414,1415],{"class":223,"line":643},[221,1416,284],{"emptyLinePlaceholder":283},[221,1418,1419,1421,1424,1426,1429,1431,1433,1435],{"class":223,"line":649},[221,1420,290],{"class":253},[221,1422,1423],{"class":293}," VNodeTree",[221,1425,297],{"class":253},[221,1427,1428],{"class":227}," computed",[221,1430,1361],{"class":257},[221,1432,1364],{"class":253},[221,1434,709],{"class":227},[221,1436,1437],{"class":257},"(ast.value))\n",[221,1439,1440],{"class":223,"line":655},[221,1441,284],{"emptyLinePlaceholder":283},[221,1443,1444,1446,1448],{"class":223,"line":667},[221,1445,1213],{"class":257},[221,1447,1228],{"class":1184},[221,1449,1188],{"class":257},[20,1451,1452],{},"现在就可以像使用普通组件一样使用它了：",[212,1454,1456],{"className":1172,"code":1455,"language":1174,"meta":217,"style":217},"\u003Ctemplate>\n  \u003CMarkdownRenderer :mdText=\"markdownContent\" />\n\u003C/template>\n\n\u003Cscript setup>\nimport { ref } from 'vue'\nimport MarkdownRenderer from './MarkdownRenderer.vue'\n\nconst markdownContent = ref('# Hello Vue\\n\\nThis is rendered via AST!')\n\u003C/script>\n",[15,1457,1458,1466,1483,1491,1495,1505,1516,1528,1532,1555],{"__ignoreMap":217},[221,1459,1460,1462,1464],{"class":223,"line":224},[221,1461,1181],{"class":257},[221,1463,1185],{"class":1184},[221,1465,1188],{"class":257},[221,1467,1468,1470,1473,1476,1478,1481],{"class":223,"line":267},[221,1469,1193],{"class":257},[221,1471,1472],{"class":1184},"MarkdownRenderer",[221,1474,1475],{"class":227}," :mdText",[221,1477,1202],{"class":257},[221,1479,1480],{"class":231},"\"markdownContent\"",[221,1482,1208],{"class":257},[221,1484,1485,1487,1489],{"class":223,"line":280},[221,1486,1213],{"class":257},[221,1488,1185],{"class":1184},[221,1490,1188],{"class":257},[221,1492,1493],{"class":223,"line":287},[221,1494,284],{"emptyLinePlaceholder":283},[221,1496,1497,1499,1501,1503],{"class":223,"line":309},[221,1498,1181],{"class":257},[221,1500,1228],{"class":1184},[221,1502,1231],{"class":227},[221,1504,1188],{"class":257},[221,1506,1507,1509,1512,1514],{"class":223,"line":314},[221,1508,254],{"class":253},[221,1510,1511],{"class":257}," { ref } ",[221,1513,261],{"class":253},[221,1515,1245],{"class":231},[221,1517,1518,1520,1523,1525],{"class":223,"line":321},[221,1519,254],{"class":253},[221,1521,1522],{"class":257}," MarkdownRenderer ",[221,1524,261],{"class":253},[221,1526,1527],{"class":231}," './MarkdownRenderer.vue'\n",[221,1529,1530],{"class":223,"line":342},[221,1531,284],{"emptyLinePlaceholder":283},[221,1533,1534,1536,1538,1540,1543,1545,1548,1550,1553],{"class":223,"line":347},[221,1535,290],{"class":253},[221,1537,294],{"class":293},[221,1539,297],{"class":253},[221,1541,1542],{"class":227}," ref",[221,1544,386],{"class":257},[221,1546,1547],{"class":231},"'# Hello Vue",[221,1549,303],{"class":293},[221,1551,1552],{"class":231},"This is rendered via AST!'",[221,1554,1044],{"class":257},[221,1556,1557,1559,1561],{"class":223,"line":353},[221,1558,1213],{"class":257},[221,1560,1228],{"class":1184},[221,1562,1188],{"class":257},[10,1564,1566],{"id":1565},"ast-方案的巨大优势","AST 方案的巨大优势",[20,1568,1569],{},"切换到 AST 赛道后，我们获得了前所未有的超能力：",[1571,1572,1573,1585,1658,1671],"ol",{},[176,1574,1575,1578,1579,1581,1582,1584],{},[105,1576,1577],{},"原生集成，性能卓越","：我们不再需要 ",[15,1580,31],{}," 的暴力刷新，也不再需要 ",[15,1583,17],{}," 这样的“外援”。所有更新都交由 Vue 自己的 Diff 算法处理，这不仅性能极高，而且完全符合 Vue 的设计哲学，是真正的“自己人”。",[176,1586,1587,1590,1591],{},[105,1588,1589],{},"高度灵活性与可扩展性","：AST 作为可编程的 JavaScript 对象，为定制化处理提供了坚实基础：\n",[173,1592,1593,1615,1637],{},[176,1594,1595,1598,1599,1602,1603,1606,1607,1610,1611,1614],{},[105,1596,1597],{},"元素替换","：可将原生元素（如 ",[15,1600,1601],{},"\u003Ch2>","）无缝替换为自定义 Vue 组件（如 ",[15,1604,1605],{},"\u003CFancyHeading>","），仅在 ",[15,1608,1609],{},"renderAst"," 函数中调整对应 ",[15,1612,1613],{},"case"," 逻辑即可。",[176,1616,1617,1620,1621,1624,1625,1628,1629,1632,1633,1636],{},[105,1618,1619],{},"逻辑注入","：可便捷地为外部链接 ",[15,1622,1623],{},"\u003Ca>"," 添加 ",[15,1626,1627],{},"target=\"_blank\""," 与 ",[15,1630,1631],{},"rel=\"noopener noreferrer\""," 属性，或为图片 ",[15,1634,1635],{},"\u003Cimg>"," 包裹懒加载组件，此类操作在 AST 层面易于实现。",[176,1638,1639,1642,1643,1645,1646,1649,1650,1653,1654,1657],{},[105,1640,1641],{},"生态集成","：充分利用 ",[15,1644,170],{}," 丰富的插件生态（如 ",[15,1647,1648],{},"remark-gfm"," 支持 GFM 语法，",[15,1651,1652],{},"remark-prism"," 实现代码高亮），仅需在处理器链中引入相应插件（",[15,1655,1656],{},".use(pluginName)","）。",[176,1659,1660,1663,1664,1667,1668,1670],{},[105,1661,1662],{},"关注点分离","：解析逻辑（",[15,1665,1666],{},"remark","）、渲染逻辑（",[15,1669,1609],{},"）和业务逻辑（Vue 组件）被清晰地分离开来，代码结构更清晰，维护性更强。",[176,1672,1673,1676],{},[105,1674,1675],{},"类型安全与可预测性","：相较于操作字符串或原始 HTML，基于结构化 AST 的渲染逻辑更易于进行类型校验与逻辑推理。",[10,1678,1680],{"id":1679},"结论从功能实现到架构优化的演进","结论：从功能实现到架构优化的演进",[20,1682,1683],{},"回顾优化历程：",[173,1685,1686,1691,1697,1702],{},[176,1687,1688,1690],{},[105,1689,31],{},"：实现简单，但存在性能与安全性隐患。",[176,1692,1693,1696],{},[105,1694,1695],{},"分块更新","：缓解了部分性能问题，但方案存在局限性。",[176,1698,1699,1701],{},[105,1700,17],{},"：有效提升了性能与用户体验，但与 Vue 核心机制存在隔阂。",[176,1703,1704,1707],{},[105,1705,1706],{},"AST + 函数式渲染","：回归 Vue 原生范式，提供了性能、灵活性、可维护性俱佳的终极解决方案。",[20,1709,1710],{},"通过采用 AST，我们不仅解决了具体的技术挑战，更重要的是实现了思维范式的转变——从面向结果（HTML 字符串）的编程，转向面向过程与结构（AST）的编程。这使我们能够深入内容本质，从而实现对渲染流程的精确控制。",[20,1712,1713],{},"本次从“全量刷新”到“结构化渲染”的优化实践，不仅是一次性能提升的技术过程，更是一次深入理解现代前端工程化思想的系统性探索。最终实现的 Markdown 渲染方案，在性能、功能性与架构优雅性上均达到了较高水准。",[1715,1716,1717],"style",{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}html pre.shiki code .s7hpK, html code.shiki .s7hpK{--shiki-default:#B31D28;--shiki-default-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic}html pre.shiki code .s4XuR, html code.shiki .s4XuR{--shiki-default:#E36209;--shiki-dark:#FFAB70}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}",{"title":217,"searchDepth":267,"depth":267,"links":1719},[1720,1722,1726,1727,1728,1729,1730],{"id":12,"depth":267,"text":1721},"上回回顾：当 morphdom 遇上 Vue",{"id":69,"depth":267,"text":70,"children":1723},[1724,1725],{"id":130,"depth":280,"text":131},{"id":159,"depth":280,"text":160},{"id":206,"depth":267,"text":207},{"id":673,"depth":267,"text":674},{"id":1161,"depth":267,"text":1162},{"id":1565,"depth":267,"text":1566},{"id":1679,"depth":267,"text":1680},"2025-07-13 00:01:35","md",{},"/2025/07/13/vue-markdown-render-improvement-2","---\ntitle: Vue Markdown 渲染优化实战(下)：告别 DOM 操作，拥抱 AST 与函数式渲染\ndate: 2025-07-13 00:01:35\nsticky:\ntags:\n- Vue.js\n- Markdown\n- AST\n- JavaScript\n- Web\n- unified\n---\n\n## 上回回顾：当 `morphdom` 遇上 Vue\n\n在[上一篇文章](/2025/07/12/vue-markdown-render-improvement-1/)中，我们经历了一场 Markdown 渲染的性能优化之旅。从最原始的 `v-html` 全量刷新，到按块更新，最终我们请出了 `morphdom` 这个“终极武器”。它通过直接比对和操作真实 DOM，以最小的代价更新视图，完美解决了实时渲染中的性能瓶颈和交互状态丢失问题。\n\n然而，一个根本性问题始终存在：在 Vue 的地盘里，绕过 Vue 的虚拟 DOM (Virtual DOM) 和 Diff 算法，直接用一个第三方库去“动刀”真实 DOM，总感觉有些“旁门左道”。这就像在一个精密的自动化工厂里，引入了一个老师傅拿着锤子和扳手进行手动修补。虽然活干得漂亮，但总觉得破坏了原有的工作流，不够“Vue”。\n\n那么，有没有一种更优雅、更“原生”的方式，让我们既能享受精准更新的快感，又能完全融入 Vue 的生态体系呢？\n\n带着这个问题，我询问了前端群里的伙伴们。\n\n> 如果就要做一个渲染器，你这个思路不是最佳实践。每次更新时，你都生成全量的虚拟 HTML，然后再对 HTML 做减法来优化性能。然而，每次更新的增量部分是明确的，为什么不直接用这部分增量去做加法？增量部分通过 markdown-it 的库无法直接获取，但更好的做法是在这一步进行改造：先解析 Markdown 的结构，再利用 Vue 的动态渲染能力生成 DOM。这样，DOM 的复用就可以借助 Vue 自身的能力来实现。—— [j10c](https://site.j10c.cc/)\n\n> 可以用 unified 结合 remark-parse 插件，将 markdown 字符串解析为 ast，然后根据 ast 使用 render func 进行渲染即可。—— bii & [nekomeowww](https://github.com/nekomeowww)\n\n## 新思路：从“字符串转换”到“结构化渲染”\n\n我们之前的方案，无论是 `v-html` 还是 `morphdom`，其核心思路都是：\n\n`Markdown 字符串` -> `markdown-it` -> `HTML 字符串` -> `浏览器/morphdom` -> `DOM`\n\n这条链路的问题在于，从 `HTML 字符串` 这一步开始，我们就丢失了 Markdown 的**原始结构信息**。我们得到的是一堆非结构化的文本，Vue 无法理解其内在逻辑，只能将其囫囵吞下。\n\n而新的思路则是将流程改造为：\n\n`Markdown 字符串` -> `AST (抽象语法树)` -> `Vue VNodes (虚拟节点)` -> `Vue` -> `DOM`\n\n### 什么是 AST？\n\n**AST (Abstract Syntax Tree)** ，即抽象语法树，是源代码或标记语言的结构化表示。它将一长串的文本，解析成一个层级分明的树状对象。对于 Markdown 来说，一个一级标题会变成一个 `type: 'heading', depth: 1` 的节点，一个段落会变成一个 `type: 'paragraph'` 的节点，而段落里的文字，则是 `paragraph` 节点的 `children`。\n\n一旦我们将 Markdown 转换成 AST，就相当于拥有了整个文档的“结构图纸”。我们不再是面对一堆模糊的 HTML 字符串，而是面对一个清晰、可编程的 JavaScript 对象。\n\n### 我们的新工具：unified 与 remark\n\n为了实现 `Markdown -> AST` 的转换，我们引入 `unified` 生态。\n\n- **[unified](https://github.com/unifiedjs/unified)**: 一个强大的内容处理引擎。你可以把它想象成一条流水线，原始文本是原料，通过添加不同的“插件”来对它进行解析、转换和序列化。\n- **[remark-parse](https://github.com/remarkjs/remark)**: 一个 `unified` 插件，专门负责将 Markdown 文本解析成 AST（具体来说是 [mdast](https://github.com/syntax-tree/mdast) 格式）。\n\n## 第一步：将 Markdown 解析为 AST\n\n首先，我们需要安装相关依赖：\n\n```bash\nnpm install unified remark-parse\n```\n\n然后，我们可以轻松地将 Markdown 字符串转换为 AST：\n\n```javascript\nimport { unified } from 'unified'\nimport remarkParse from 'remark-parse'\n\nconst markdownContent = '# Hello, AST!\\n\\nThis is a paragraph.'\n\n// 创建一个处理器实例\nconst processor = unified().use(remarkParse)\n\n// 解析 Markdown 内容\nconst ast = processor.parse(markdownContent)\n\nconsole.log(JSON.stringify(ast, null, 2))\n```\n\n运行以上代码，我们将得到一个如下所示的 JSON 对象，这就是我们梦寐以求的 AST：\n\n```json\n{\n  \"type\": \"root\",\n  \"children\": [\n    {\n      \"type\": \"heading\",\n      \"depth\": 1,\n      \"children\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"Hello, AST!\",\n          \"position\": { ... }\n        }\n      ],\n      \"position\": { ... }\n    },\n    {\n      \"type\": \"paragraph\",\n      \"children\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"This is a paragraph.\",\n          \"position\": { ... }\n        }\n      ],\n      \"position\": { ... }\n    }\n  ],\n  \"position\": { ... }\n}\n```\n\n## 第二步：从 AST 到 Vue VNodes\n\n拿到了 AST，下一步就是将这个“结构图纸”真正地“施工”成用户可见的界面。在 Vue 的世界里，描述 UI 的蓝图就是虚拟节点 (VNode)，而 `h()` 函数（即 hyperscript）就是创建 VNode 的画笔。\n\n我们的任务是编写一个渲染函数，它能够递归地遍历 AST，并为每一种节点类型（`heading`, `paragraph`, `text` 等）生成对应的 VNode。\n\n下面是一个简单的渲染函数实现：\n\n```javascript\nfunction renderAst(node) {\n  if (!node) return null\n  switch (node.type) {\n    case 'root':\n      return h('div', {}, node.children.map(renderAst))\n    case 'paragraph':\n      return h('p', {}, node.children.map(renderAst))\n    case 'text':\n      return node.value\n    case 'emphasis':\n      return h('em', {}, node.children.map(renderAst))\n    case 'strong':\n      return h('strong', {}, node.children.map(renderAst))\n    case 'inlineCode':\n      return h('code', {}, node.value)\n    case 'heading':\n      return h('h' + node.depth, {}, node.children.map(renderAst))\n    case 'code':\n      return h('pre', {}, [h('code', {}, node.value)])\n    case 'list':\n      return h(node.ordered ? 'ol' : 'ul', {}, node.children.map(renderAst))\n    case 'listItem':\n      return h('li', {}, node.children.map(renderAst))\n    case 'thematicBreak':\n      return h('hr')\n    case 'blockquote':\n      return h('blockquote', {}, node.children.map(renderAst))\n    case 'link':\n      return h('a', { href: node.url, target: '_blank' }, node.children.map(renderAst))\n    default:\n      // 其它未实现类型\n      return h('span', { }, `[${node.type}]`)\n  }\n}\n```\n\n## 第三步：封装 Vue 组件\n\n整合上述逻辑，我们可以构建一个 Vue 组件。鉴于直接生成 VNode 的特性，采用函数式组件或显式 `render` 函数最为适宜。\n\n```vue\n\u003Ctemplate>\n  \u003Ccomponent :is=\"VNodeTree\" />\n\u003C/template>\n\n\u003Cscript setup>\nimport { computed, h, shallowRef, watchEffect } from 'vue'\nimport { unified } from 'unified'\nimport remarkParse from 'remark-parse'\n\nconst props = defineProps({\n  mdText: {\n    type: String,\n    default: ''\n  }\n})\n\nconst ast = shallowRef(null)\nconst parser = unified().use(remarkParse)\n\nwatchEffect(() => {\n  ast.value = parser.parse(props.mdText)\n})\n\n// AST 渲染函数 (同上文 renderAst 函数)\nfunction renderAst(node) { ... }\n\nconst VNodeTree = computed(() => renderAst(ast.value))\n\n\u003C/script>\n```\n\n现在就可以像使用普通组件一样使用它了：\n\n```vue\n\u003Ctemplate>\n  \u003CMarkdownRenderer :mdText=\"markdownContent\" />\n\u003C/template>\n\n\u003Cscript setup>\nimport { ref } from 'vue'\nimport MarkdownRenderer from './MarkdownRenderer.vue'\n\nconst markdownContent = ref('# Hello Vue\\n\\nThis is rendered via AST!')\n\u003C/script>\n```\n\n## AST 方案的巨大优势\n\n切换到 AST 赛道后，我们获得了前所未有的超能力：\n\n1. **原生集成，性能卓越**：我们不再需要 `v-html` 的暴力刷新，也不再需要 `morphdom` 这样的“外援”。所有更新都交由 Vue 自己的 Diff 算法处理，这不仅性能极高，而且完全符合 Vue 的设计哲学，是真正的“自己人”。\n2. **高度灵活性与可扩展性**：AST 作为可编程的 JavaScript 对象，为定制化处理提供了坚实基础：\n   - **元素替换**：可将原生元素（如 `\u003Ch2>`）无缝替换为自定义 Vue 组件（如 `\u003CFancyHeading>`），仅在 `renderAst` 函数中调整对应 `case` 逻辑即可。\n   - **逻辑注入**：可便捷地为外部链接 `\u003Ca>` 添加 `target=\"_blank\"` 与 `rel=\"noopener noreferrer\"` 属性，或为图片 `\u003Cimg>` 包裹懒加载组件，此类操作在 AST 层面易于实现。\n   - **生态集成**：充分利用 `unified` 丰富的插件生态（如 `remark-gfm` 支持 GFM 语法，`remark-prism` 实现代码高亮），仅需在处理器链中引入相应插件（`.use(pluginName)`）。\n3. **关注点分离**：解析逻辑（`remark`）、渲染逻辑（`renderAst`）和业务逻辑（Vue 组件）被清晰地分离开来，代码结构更清晰，维护性更强。\n4. **类型安全与可预测性**：相较于操作字符串或原始 HTML，基于结构化 AST 的渲染逻辑更易于进行类型校验与逻辑推理。\n\n## 结论：从功能实现到架构优化的演进\n\n回顾优化历程：\n\n- **v-html**：实现简单，但存在性能与安全性隐患。\n- **分块更新**：缓解了部分性能问题，但方案存在局限性。\n- **morphdom**：有效提升了性能与用户体验，但与 Vue 核心机制存在隔阂。\n- **AST + 函数式渲染**：回归 Vue 原生范式，提供了性能、灵活性、可维护性俱佳的终极解决方案。\n\n通过采用 AST，我们不仅解决了具体的技术挑战，更重要的是实现了思维范式的转变——从面向结果（HTML 字符串）的编程，转向面向过程与结构（AST）的编程。这使我们能够深入内容本质，从而实现对渲染流程的精确控制。\n\n本次从“全量刷新”到“结构化渲染”的优化实践，不仅是一次性能提升的技术过程，更是一次深入理解现代前端工程化思想的系统性探索。最终实现的 Markdown 渲染方案，在性能、功能性与架构优雅性上均达到了较高水准。\n",{"title":5,"description":217},"posts/vue-markdown-render-improvement-2",false,[1740,1741,1742,1743,1744,170],"Vue.js","Markdown","AST","JavaScript","Web","dM0yHs9-EmxRKOfouYUx2SWZIaRqY2UCB0R53lDpCwQ",[1747,1752],{"title":1748,"path":1749,"stem":1750,"date":1751,"children":-1},"DNS 解析时长毁了我精心设计的图床网络架构","/2025/08/11/dns-resolve-time-destroyed-my-optimization-for-pic-cdn","posts/dns-resolve-time-destroyed-my-optimization-for-pic-cdn","2025-08-11 00:06:40",{"title":1753,"path":1754,"stem":1755,"date":1756,"children":-1},"Vue Markdown 渲染优化实战(上)：从暴力刷新、分块更新到 Morphdom 的华丽变身","/2025/07/12/vue-markdown-render-improvement-1","posts/vue-markdown-render-improvement-1","2025-07-12 20:48:56",1761699626059]