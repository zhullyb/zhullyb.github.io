[{"data":1,"prerenderedAt":1532},["ShallowReactive",2],{"post-2025-07-12-vue-markdown-render-improvement-1":3,"surround-2025-07-12-vue-markdown-render-improvement-1":1521,"randomIndex/2025/07/12/vue-markdown-render-improvement-1/":592},{"id":4,"title":5,"body":6,"date":1506,"description":77,"extension":1507,"meta":1508,"navigation":138,"path":1509,"rawbody":1510,"seo":1511,"stem":1512,"sticky":1513,"tags":1514,"__hash__":1520},"posts/posts/vue-markdown-render-improvement-1.md","Vue Markdown 渲染优化实战(上)：从暴力刷新、分块更新到 Morphdom 的华丽变身",{"type":7,"value":8,"toc":1495},"minimark",[9,13,17,46,50,53,56,68,71,340,344,351,365,378,387,390,972,976,979,984,994,1001,1012,1022,1025,1028,1445,1449,1452,1458,1464,1470,1473,1479,1485,1491],[10,11,12],"h2",{"id":12},"需求背景",[14,15,16],"p",{},"在最近接手的 AI 需求中，需要实现一个类似 ChatGPT 的对话交互界面。其核心流程是：后端通过 SSE（Server-Sent  Events）协议，持续地将 AI 生成的 Markdown 格式文本片段推送到前端。前端负责动态接收并拼接这些 Markdown  片段，最终将拼接完成的 Markdown 文本实时渲染并显示在用户界面上。",[14,18,19,20,27,28,33,34,39,40,45],{},"Markdown 渲染并不是什么罕见的需求，尤其是在 LLM 相关落地产品满天飞的当下。不同于 React 生态拥有一个 14k+ star 的著名第三方库——",[21,22,26],"a",{"href":23,"rel":24},"https://github.com/remarkjs/react-markdown",[25],"nofollow","react-markdown","，Vue 这边似乎暂时还没有一个仍在活跃维护的、star 数量不低（起码得 2k+ 吧？）的 markdown 渲染库。",[21,29,32],{"href":30,"rel":31},"https://github.com/cloudacy/vue-markdown-render#readme",[25],"cloudacy/vue-markdown-render"," 最后一次发版在一年前，但截止本文写作时间只有 103 个 star；",[21,35,38],{"href":36,"rel":37},"https://github.com/miaolz123/vue-markdown",[25],"miaolz123/vue-markdown"," 有 2k star，但最后一次 commit 已经是 7 年前了；",[21,41,44],{"href":42,"rel":43},"https://github.com/zhaoxuhui1122/vue-markdown",[25],"zhaoxuhui1122/vue-markdown"," 更是 archived 状态。",[10,47,49],{"id":48},"第一版方案简单粗暴的-v-html","第一版方案：简单粗暴的 v-html",[14,51,52],{},"简单调研了一圈，发现 Vue 生态里确实缺少一个能打的 Markdown 渲染库。既然没有现成的轮子，那咱就自己造一个！",[14,54,55],{},"根据大部分文章以及 LLM 的推荐，我们首先采用 markdown-it 这个第三方库将 markdown 转换为 html 字符串，再通过 v-html 传入。",[14,57,58,62,63,67],{},[59,60,61],"strong",{},"PS:"," 我们这里假设 Markdown 内容是可信的（比如由我们自己的 AI 生成）。如果内容来自用户输入，一定要使用 ",[64,65,66],"code",{},"DOMPurify"," 这类库来防止 XSS 攻击，避免给网站“开天窗”哦！",[14,69,70],{},"示例代码如下：",[72,73,78],"pre",{"className":74,"code":75,"language":76,"meta":77,"style":77},"language-vue shiki shiki-themes one-light one-dark-pro","\u003Ctemplate>\n  \u003Cdiv v-html=\"renderedHtml\">\u003C/div>\n\u003C/template>\n\n\u003Cscript setup>\nimport { computed, onMounted, ref } from 'vue';\nimport MarkdownIt from 'markdown-it';\n\nconst markdownContent = ref('');\nconst md = new MarkdownIt();\n\nconst renderedHtml = computed(() => md.render(markdownContent.value))\n\nonMounted(() => {\n  // markdownContent.value = await fetch() ...\n})\n\u003C/script>\n","vue","",[64,79,80,96,123,133,140,153,189,205,210,237,255,260,301,306,318,325,331],{"__ignoreMap":77},[81,82,85,89,93],"span",{"class":83,"line":84},"line",1,[81,86,88],{"class":87},"s5ixo","\u003C",[81,90,92],{"class":91},"sJa8x","template",[81,94,95],{"class":87},">\n",[81,97,99,102,105,109,112,116,119,121],{"class":83,"line":98},2,[81,100,101],{"class":87},"  \u003C",[81,103,104],{"class":91},"div",[81,106,108],{"class":107},"sAGMh"," v-html",[81,110,111],{"class":87},"=",[81,113,115],{"class":114},"sDhpE","\"renderedHtml\"",[81,117,118],{"class":87},">\u003C/",[81,120,104],{"class":91},[81,122,95],{"class":87},[81,124,126,129,131],{"class":83,"line":125},3,[81,127,128],{"class":87},"\u003C/",[81,130,92],{"class":91},[81,132,95],{"class":87},[81,134,136],{"class":83,"line":135},4,[81,137,139],{"emptyLinePlaceholder":138},true,"\n",[81,141,143,145,148,151],{"class":83,"line":142},5,[81,144,88],{"class":87},[81,146,147],{"class":91},"script",[81,149,150],{"class":107}," setup",[81,152,95],{"class":87},[81,154,156,160,163,166,169,172,174,177,180,183,186],{"class":83,"line":155},6,[81,157,159],{"class":158},"sLKXg","import",[81,161,162],{"class":87}," { ",[81,164,165],{"class":91},"computed",[81,167,168],{"class":87},", ",[81,170,171],{"class":91},"onMounted",[81,173,168],{"class":87},[81,175,176],{"class":91},"ref",[81,178,179],{"class":87}," } ",[81,181,182],{"class":158},"from",[81,184,185],{"class":114}," 'vue'",[81,187,188],{"class":87},";\n",[81,190,192,194,197,200,203],{"class":83,"line":191},7,[81,193,159],{"class":158},[81,195,196],{"class":91}," MarkdownIt",[81,198,199],{"class":158}," from",[81,201,202],{"class":114}," 'markdown-it'",[81,204,188],{"class":87},[81,206,208],{"class":83,"line":207},8,[81,209,139],{"emptyLinePlaceholder":138},[81,211,213,216,220,224,228,231,234],{"class":83,"line":212},9,[81,214,215],{"class":158},"const",[81,217,219],{"class":218},"sNmU0"," markdownContent",[81,221,223],{"class":222},"s_Sar"," =",[81,225,227],{"class":226},"sAdtL"," ref",[81,229,230],{"class":87},"(",[81,232,233],{"class":114},"''",[81,235,236],{"class":87},");\n",[81,238,240,242,245,247,250,252],{"class":83,"line":239},10,[81,241,215],{"class":158},[81,243,244],{"class":218}," md",[81,246,223],{"class":222},[81,248,249],{"class":158}," new",[81,251,196],{"class":226},[81,253,254],{"class":87},"();\n",[81,256,258],{"class":83,"line":257},11,[81,259,139],{"emptyLinePlaceholder":138},[81,261,263,265,268,270,273,276,279,282,285,288,290,293,295,298],{"class":83,"line":262},12,[81,264,215],{"class":158},[81,266,267],{"class":218}," renderedHtml",[81,269,223],{"class":222},[81,271,272],{"class":226}," computed",[81,274,275],{"class":87},"(() ",[81,277,278],{"class":158},"=>",[81,280,244],{"class":281},"s7GmK",[81,283,284],{"class":87},".",[81,286,287],{"class":226},"render",[81,289,230],{"class":87},[81,291,292],{"class":281},"markdownContent",[81,294,284],{"class":87},[81,296,297],{"class":91},"value",[81,299,300],{"class":87},"))\n",[81,302,304],{"class":83,"line":303},13,[81,305,139],{"emptyLinePlaceholder":138},[81,307,309,311,313,315],{"class":83,"line":308},14,[81,310,171],{"class":226},[81,312,275],{"class":87},[81,314,278],{"class":158},[81,316,317],{"class":87}," {\n",[81,319,321],{"class":83,"line":320},15,[81,322,324],{"class":323},"sW2Sy","  // markdownContent.value = await fetch() ...\n",[81,326,328],{"class":83,"line":327},16,[81,329,330],{"class":87},"})\n",[81,332,334,336,338],{"class":83,"line":333},17,[81,335,128],{"class":87},[81,337,147],{"class":91},[81,339,95],{"class":87},[10,341,343],{"id":342},"进化版给-markdown-分块更新","进化版：给 Markdown 分块更新",[14,345,346,347,350],{},"上述方案虽然能实现基础渲染，但在实时更新场景下存在明显缺陷：",[59,348,349],{},"每次接收到新的 Markdown 片段，整个文档都会触发全量重渲染","。即使只有最后一行是新增内容，整个文档的 DOM 也会被完全替换。这导致两个核心问题：",[352,353,354,362],"ol",{},[355,356,357,358,361],"li",{},"**性能顶不住：**Markdown 内容增长时，",[64,359,360],{},"markdown-it"," 解析和 DOM 重建的开销呈线性上升。",[355,363,364],{},"**交互状态丢失：**全量刷新会把用户当前的操作状态冲掉。最明显的就是，如果你选中了某段文字，一刷新，选中状态就没了！",[14,366,367,368,373,374,377],{},"为了解决这两个问题，",[21,369,372],{"href":370,"rel":371},"https://juejin.cn/post/7480900772386734143",[25],"我们在网上找到了分块渲染的方案"," —— 把 Markdown 按两个连续的换行符 (",[64,375,376],{},"\\n\\n",") 切成一块一块的。这样每次更新，只重新渲染最后一块新的，前面的老块直接复用缓存。好处很明显：",[379,380,381,384],"ul",{},[355,382,383],{},"用户如果选中了前面块里的文字，下次更新时选中状态不会丢（因为前面的块没动）。",[355,385,386],{},"需要重新渲染的 DOM 变少了，性能自然就上来了。",[14,388,389],{},"代码调整后像这样：",[72,391,393],{"className":74,"code":392,"language":76,"meta":77,"style":77},"\u003Ctemplate>\n  \u003Cdiv>\n    \u003Cdiv\n      v-for=\"(block, idx) in renderedBlocks\"\n      :key=\"idx\"\n      v-html=\"block\"\n      class=\"markdown-block\"\n    >\u003C/div>\n  \u003C/div>\n\u003C/template>\n\n\u003Cscript setup>\nimport { ref, computed, watch } from 'vue'\nimport MarkdownIt from 'markdown-it'\n\nconst markdownContent = ref('')\nconst md = new MarkdownIt()\n\nconst renderedBlocks = ref([])\nconst blockCache = ref([])\n\nwatch(\n  markdownContent,\n  (newContent, oldContent) => {\n    const blocks = newContent.split(/\\n{2,}/)\n    // 只重新渲染最后一个块，其余用缓存\n    // 处理块减少、块增多的场景\n    blockCache.value.length = blocks.length\n    for (let i = 0; i \u003C blocks.length; i++) {\n      // 只渲染最后一个，或新块\n      if (i === blocks.length - 1 || !blockCache.value[i]) {\n        blockCache.value[i] = md.render(blocks[i] || '')\n      }\n      // 其余块直接复用\n    }\n    renderedBlocks.value = blockCache.value.slice()\n  },\n  { immediate: true }\n)\n\nonMounted(() => {\n  // markdownContent.value = await fetch() ...\n})\n\u003C/script>\n",[64,394,395,403,411,419,429,439,449,459,468,477,485,489,499,523,534,538,555,570,575,590,604,609,617,627,649,686,692,698,723,768,774,820,864,870,876,882,907,913,932,937,942,953,958,963],{"__ignoreMap":77},[81,396,397,399,401],{"class":83,"line":84},[81,398,88],{"class":87},[81,400,92],{"class":91},[81,402,95],{"class":87},[81,404,405,407,409],{"class":83,"line":98},[81,406,101],{"class":87},[81,408,104],{"class":91},[81,410,95],{"class":87},[81,412,413,416],{"class":83,"line":125},[81,414,415],{"class":87},"    \u003C",[81,417,418],{"class":91},"div\n",[81,420,421,424,426],{"class":83,"line":135},[81,422,423],{"class":107},"      v-for",[81,425,111],{"class":87},[81,427,428],{"class":114},"\"(block, idx) in renderedBlocks\"\n",[81,430,431,434,436],{"class":83,"line":142},[81,432,433],{"class":107},"      :key",[81,435,111],{"class":87},[81,437,438],{"class":114},"\"idx\"\n",[81,440,441,444,446],{"class":83,"line":155},[81,442,443],{"class":107},"      v-html",[81,445,111],{"class":87},[81,447,448],{"class":114},"\"block\"\n",[81,450,451,454,456],{"class":83,"line":191},[81,452,453],{"class":107},"      class",[81,455,111],{"class":87},[81,457,458],{"class":114},"\"markdown-block\"\n",[81,460,461,464,466],{"class":83,"line":207},[81,462,463],{"class":87},"    >\u003C/",[81,465,104],{"class":91},[81,467,95],{"class":87},[81,469,470,473,475],{"class":83,"line":212},[81,471,472],{"class":87},"  \u003C/",[81,474,104],{"class":91},[81,476,95],{"class":87},[81,478,479,481,483],{"class":83,"line":239},[81,480,128],{"class":87},[81,482,92],{"class":91},[81,484,95],{"class":87},[81,486,487],{"class":83,"line":257},[81,488,139],{"emptyLinePlaceholder":138},[81,490,491,493,495,497],{"class":83,"line":262},[81,492,88],{"class":87},[81,494,147],{"class":91},[81,496,150],{"class":107},[81,498,95],{"class":87},[81,500,501,503,505,507,509,511,513,516,518,520],{"class":83,"line":303},[81,502,159],{"class":158},[81,504,162],{"class":87},[81,506,176],{"class":91},[81,508,168],{"class":87},[81,510,165],{"class":91},[81,512,168],{"class":87},[81,514,515],{"class":91},"watch",[81,517,179],{"class":87},[81,519,182],{"class":158},[81,521,522],{"class":114}," 'vue'\n",[81,524,525,527,529,531],{"class":83,"line":308},[81,526,159],{"class":158},[81,528,196],{"class":91},[81,530,199],{"class":158},[81,532,533],{"class":114}," 'markdown-it'\n",[81,535,536],{"class":83,"line":320},[81,537,139],{"emptyLinePlaceholder":138},[81,539,540,542,544,546,548,550,552],{"class":83,"line":327},[81,541,215],{"class":158},[81,543,219],{"class":218},[81,545,223],{"class":222},[81,547,227],{"class":226},[81,549,230],{"class":87},[81,551,233],{"class":114},[81,553,554],{"class":87},")\n",[81,556,557,559,561,563,565,567],{"class":83,"line":333},[81,558,215],{"class":158},[81,560,244],{"class":218},[81,562,223],{"class":222},[81,564,249],{"class":158},[81,566,196],{"class":226},[81,568,569],{"class":87},"()\n",[81,571,573],{"class":83,"line":572},18,[81,574,139],{"emptyLinePlaceholder":138},[81,576,578,580,583,585,587],{"class":83,"line":577},19,[81,579,215],{"class":158},[81,581,582],{"class":218}," renderedBlocks",[81,584,223],{"class":222},[81,586,227],{"class":226},[81,588,589],{"class":87},"([])\n",[81,591,593,595,598,600,602],{"class":83,"line":592},20,[81,594,215],{"class":158},[81,596,597],{"class":218}," blockCache",[81,599,223],{"class":222},[81,601,227],{"class":226},[81,603,589],{"class":87},[81,605,607],{"class":83,"line":606},21,[81,608,139],{"emptyLinePlaceholder":138},[81,610,612,614],{"class":83,"line":611},22,[81,613,515],{"class":226},[81,615,616],{"class":87},"(\n",[81,618,620,624],{"class":83,"line":619},23,[81,621,623],{"class":622},"sz0mV","  markdownContent",[81,625,626],{"class":87},",\n",[81,628,630,633,637,639,642,645,647],{"class":83,"line":629},24,[81,631,632],{"class":87},"  (",[81,634,636],{"class":635},"s8iYz","newContent",[81,638,168],{"class":87},[81,640,641],{"class":635},"oldContent",[81,643,644],{"class":87},") ",[81,646,278],{"class":158},[81,648,317],{"class":87},[81,650,652,655,658,660,663,665,668,670,674,678,682,684],{"class":83,"line":651},25,[81,653,654],{"class":158},"    const",[81,656,657],{"class":218}," blocks",[81,659,223],{"class":222},[81,661,662],{"class":281}," newContent",[81,664,284],{"class":87},[81,666,667],{"class":226},"split",[81,669,230],{"class":87},[81,671,673],{"class":672},"sDaw7","/",[81,675,677],{"class":676},"sRZ4U","\\n",[81,679,681],{"class":680},"sYoRg","{2,}",[81,683,673],{"class":672},[81,685,554],{"class":87},[81,687,689],{"class":83,"line":688},26,[81,690,691],{"class":323},"    // 只重新渲染最后一个块，其余用缓存\n",[81,693,695],{"class":83,"line":694},27,[81,696,697],{"class":323},"    // 处理块减少、块增多的场景\n",[81,699,701,704,706,709,711,714,716,718,720],{"class":83,"line":700},28,[81,702,703],{"class":281},"    blockCache",[81,705,284],{"class":87},[81,707,297],{"class":708},"s2QsP",[81,710,284],{"class":87},[81,712,713],{"class":91},"length",[81,715,223],{"class":222},[81,717,657],{"class":281},[81,719,284],{"class":87},[81,721,722],{"class":91},"length\n",[81,724,726,729,732,735,738,740,743,746,749,752,754,756,758,760,762,765],{"class":83,"line":725},29,[81,727,728],{"class":158},"    for",[81,730,731],{"class":87}," (",[81,733,734],{"class":158},"let",[81,736,737],{"class":622}," i",[81,739,223],{"class":222},[81,741,742],{"class":107}," 0",[81,744,745],{"class":87},"; ",[81,747,748],{"class":622},"i",[81,750,751],{"class":222}," \u003C",[81,753,657],{"class":281},[81,755,284],{"class":87},[81,757,713],{"class":91},[81,759,745],{"class":87},[81,761,748],{"class":622},[81,763,764],{"class":222},"++",[81,766,767],{"class":87},") {\n",[81,769,771],{"class":83,"line":770},30,[81,772,773],{"class":323},"      // 只渲染最后一个，或新块\n",[81,775,777,780,782,784,787,789,791,793,796,799,802,805,808,810,812,815,817],{"class":83,"line":776},31,[81,778,779],{"class":158},"      if",[81,781,731],{"class":87},[81,783,748],{"class":622},[81,785,786],{"class":222}," ===",[81,788,657],{"class":281},[81,790,284],{"class":87},[81,792,713],{"class":91},[81,794,795],{"class":222}," -",[81,797,798],{"class":107}," 1",[81,800,801],{"class":222}," ||",[81,803,804],{"class":222}," !",[81,806,807],{"class":281},"blockCache",[81,809,284],{"class":87},[81,811,297],{"class":91},[81,813,814],{"class":87},"[",[81,816,748],{"class":622},[81,818,819],{"class":87},"]) {\n",[81,821,823,826,828,830,832,834,837,839,841,843,845,847,850,852,854,856,859,862],{"class":83,"line":822},32,[81,824,825],{"class":281},"        blockCache",[81,827,284],{"class":87},[81,829,297],{"class":91},[81,831,814],{"class":87},[81,833,748],{"class":622},[81,835,836],{"class":87},"] ",[81,838,111],{"class":222},[81,840,244],{"class":281},[81,842,284],{"class":87},[81,844,287],{"class":226},[81,846,230],{"class":87},[81,848,849],{"class":622},"blocks",[81,851,814],{"class":87},[81,853,748],{"class":622},[81,855,836],{"class":87},[81,857,858],{"class":222},"||",[81,860,861],{"class":114}," ''",[81,863,554],{"class":87},[81,865,867],{"class":83,"line":866},33,[81,868,869],{"class":87},"      }\n",[81,871,873],{"class":83,"line":872},34,[81,874,875],{"class":323},"      // 其余块直接复用\n",[81,877,879],{"class":83,"line":878},35,[81,880,881],{"class":87},"    }\n",[81,883,885,888,890,892,894,896,898,900,902,905],{"class":83,"line":884},36,[81,886,887],{"class":281},"    renderedBlocks",[81,889,284],{"class":87},[81,891,297],{"class":91},[81,893,223],{"class":222},[81,895,597],{"class":281},[81,897,284],{"class":87},[81,899,297],{"class":708},[81,901,284],{"class":87},[81,903,904],{"class":226},"slice",[81,906,569],{"class":87},[81,908,910],{"class":83,"line":909},37,[81,911,912],{"class":87},"  },\n",[81,914,916,919,922,926,929],{"class":83,"line":915},38,[81,917,918],{"class":87},"  { ",[81,920,921],{"class":91},"immediate",[81,923,925],{"class":924},"st7oF",":",[81,927,928],{"class":107}," true",[81,930,931],{"class":87}," }\n",[81,933,935],{"class":83,"line":934},39,[81,936,554],{"class":87},[81,938,940],{"class":83,"line":939},40,[81,941,139],{"emptyLinePlaceholder":138},[81,943,945,947,949,951],{"class":83,"line":944},41,[81,946,171],{"class":226},[81,948,275],{"class":87},[81,950,278],{"class":158},[81,952,317],{"class":87},[81,954,956],{"class":83,"line":955},42,[81,957,324],{"class":323},[81,959,961],{"class":83,"line":960},43,[81,962,330],{"class":87},[81,964,966,968,970],{"class":83,"line":965},44,[81,967,128],{"class":87},[81,969,147],{"class":91},[81,971,95],{"class":87},[10,973,975],{"id":974},"终极武器用-morphdom-实现精准更新","终极武器：用 morphdom 实现精准更新",[14,977,978],{},"分块渲染虽然解决了大部分问题，但遇到 Markdown 列表就有点力不从心了。因为 Markdown 语法里，列表项之间通常只有一个换行符，整个列表会被当成一个大块。想象一下一个几百项的列表，哪怕只更新最后一项，整个列表块也要全部重来，前面的问题又回来了。",[980,981,983],"h3",{"id":982},"morphdom-是何方神圣","morphdom 是何方神圣？",[14,985,986,989,990,993],{},[64,987,988],{},"morphdom"," 是一个仅 5KB（gzip 后）的 JavaScript 库，核心功能是：",[59,991,992],{},"接收两个 DOM 节点（或 HTML 字符串），计算出最小化的 DOM 操作，将第一个节点 “变形” 为第二个节点，而非直接替换","。",[14,995,996,997,1000],{},"其工作原理类似虚拟 DOM 的 Diff 算法，但",[59,998,999],{},"直接操作真实 DOM","：",[352,1002,1003,1006,1009],{},[355,1004,1005],{},"对比新旧 DOM 的标签名、属性、文本内容等；",[355,1007,1008],{},"仅对差异部分执行增 / 删 / 改操作（如修改文本、更新属性、移动节点位置）；",[355,1010,1011],{},"未变化的 DOM 节点会被完整保留，包括其事件监听、滚动位置、选中状态等。",[14,1013,1014,1015,1018,1019,1021],{},"Markdown 把列表当整体，但生成的 HTML 里，每个列表项 (",[64,1016,1017],{},"\u003Cli>",") 都是独立的！",[64,1020,988],{}," 在更新后面的列表项时，能保证前面的列表项纹丝不动，状态自然就保住了。",[14,1023,1024],{},"这不就是我们梦寐以求的效果吗？在 Markdown 实时更新的同时，最大程度留住用户的操作状态，还能省掉一堆不必要的 DOM 操作！",[980,1026,1027],{"id":1027},"示例代码",[72,1029,1031],{"className":74,"code":1030,"language":76,"meta":77,"style":77},"\u003Ctemplate>\n  \u003Cdiv ref=\"markdownContainer\" class=\"markdown-container\">\n    \u003Cdiv id=\"md-root\">\u003C/div>\n  \u003C/div>\n\u003C/template>\n\n\u003Cscript setup>\nimport { nextTick, ref, watch } from 'vue';\nimport MarkdownIt from 'markdown-it';\nimport morphdom from 'morphdom';\n\nconst markdownContent = ref('');\nconst markdownContainer = ref(null);\nconst md = new MarkdownIt();\n    \nconst render = () => {\n  if (!markdownContainer.value.querySelector('#md-root')) return;\n  \n  const newHtml = `\u003Cdiv id=\"md-root\">` + md.render(markdownContent.value) + `\u003C/div>`\n\n  morphdom(markdownContainer.value, newHtml, {\n    childrenOnly: true\n  });\n}\n\nwatch(markdownContent, () => {\n    render()\n});\n    \nonMounted(async () => {\n  // 等待 Dom 被挂载上\n  await nextTick()\n  render()\n})\n\u003C/script>\n\n",[64,1032,1033,1041,1064,1084,1092,1100,1104,1114,1139,1151,1165,1169,1185,1203,1217,1222,1238,1273,1278,1316,1320,1341,1351,1356,1361,1365,1380,1387,1392,1396,1411,1416,1426,1433,1437],{"__ignoreMap":77},[81,1034,1035,1037,1039],{"class":83,"line":84},[81,1036,88],{"class":87},[81,1038,92],{"class":91},[81,1040,95],{"class":87},[81,1042,1043,1045,1047,1049,1051,1054,1057,1059,1062],{"class":83,"line":98},[81,1044,101],{"class":87},[81,1046,104],{"class":91},[81,1048,227],{"class":107},[81,1050,111],{"class":87},[81,1052,1053],{"class":114},"\"markdownContainer\"",[81,1055,1056],{"class":107}," class",[81,1058,111],{"class":87},[81,1060,1061],{"class":114},"\"markdown-container\"",[81,1063,95],{"class":87},[81,1065,1066,1068,1070,1073,1075,1078,1080,1082],{"class":83,"line":125},[81,1067,415],{"class":87},[81,1069,104],{"class":91},[81,1071,1072],{"class":107}," id",[81,1074,111],{"class":87},[81,1076,1077],{"class":114},"\"md-root\"",[81,1079,118],{"class":87},[81,1081,104],{"class":91},[81,1083,95],{"class":87},[81,1085,1086,1088,1090],{"class":83,"line":135},[81,1087,472],{"class":87},[81,1089,104],{"class":91},[81,1091,95],{"class":87},[81,1093,1094,1096,1098],{"class":83,"line":142},[81,1095,128],{"class":87},[81,1097,92],{"class":91},[81,1099,95],{"class":87},[81,1101,1102],{"class":83,"line":155},[81,1103,139],{"emptyLinePlaceholder":138},[81,1105,1106,1108,1110,1112],{"class":83,"line":191},[81,1107,88],{"class":87},[81,1109,147],{"class":91},[81,1111,150],{"class":107},[81,1113,95],{"class":87},[81,1115,1116,1118,1120,1123,1125,1127,1129,1131,1133,1135,1137],{"class":83,"line":207},[81,1117,159],{"class":158},[81,1119,162],{"class":87},[81,1121,1122],{"class":91},"nextTick",[81,1124,168],{"class":87},[81,1126,176],{"class":91},[81,1128,168],{"class":87},[81,1130,515],{"class":91},[81,1132,179],{"class":87},[81,1134,182],{"class":158},[81,1136,185],{"class":114},[81,1138,188],{"class":87},[81,1140,1141,1143,1145,1147,1149],{"class":83,"line":212},[81,1142,159],{"class":158},[81,1144,196],{"class":91},[81,1146,199],{"class":158},[81,1148,202],{"class":114},[81,1150,188],{"class":87},[81,1152,1153,1155,1158,1160,1163],{"class":83,"line":239},[81,1154,159],{"class":158},[81,1156,1157],{"class":91}," morphdom",[81,1159,199],{"class":158},[81,1161,1162],{"class":114}," 'morphdom'",[81,1164,188],{"class":87},[81,1166,1167],{"class":83,"line":257},[81,1168,139],{"emptyLinePlaceholder":138},[81,1170,1171,1173,1175,1177,1179,1181,1183],{"class":83,"line":262},[81,1172,215],{"class":158},[81,1174,219],{"class":218},[81,1176,223],{"class":222},[81,1178,227],{"class":226},[81,1180,230],{"class":87},[81,1182,233],{"class":114},[81,1184,236],{"class":87},[81,1186,1187,1189,1192,1194,1196,1198,1201],{"class":83,"line":303},[81,1188,215],{"class":158},[81,1190,1191],{"class":218}," markdownContainer",[81,1193,223],{"class":222},[81,1195,227],{"class":226},[81,1197,230],{"class":87},[81,1199,1200],{"class":107},"null",[81,1202,236],{"class":87},[81,1204,1205,1207,1209,1211,1213,1215],{"class":83,"line":308},[81,1206,215],{"class":158},[81,1208,244],{"class":218},[81,1210,223],{"class":222},[81,1212,249],{"class":158},[81,1214,196],{"class":226},[81,1216,254],{"class":87},[81,1218,1219],{"class":83,"line":320},[81,1220,1221],{"class":87},"    \n",[81,1223,1224,1226,1229,1231,1234,1236],{"class":83,"line":327},[81,1225,215],{"class":158},[81,1227,1228],{"class":226}," render",[81,1230,223],{"class":222},[81,1232,1233],{"class":87}," () ",[81,1235,278],{"class":158},[81,1237,317],{"class":87},[81,1239,1240,1243,1245,1248,1251,1253,1255,1257,1260,1262,1265,1268,1271],{"class":83,"line":333},[81,1241,1242],{"class":158},"  if",[81,1244,731],{"class":87},[81,1246,1247],{"class":222},"!",[81,1249,1250],{"class":281},"markdownContainer",[81,1252,284],{"class":87},[81,1254,297],{"class":708},[81,1256,284],{"class":87},[81,1258,1259],{"class":226},"querySelector",[81,1261,230],{"class":87},[81,1263,1264],{"class":114},"'#md-root'",[81,1266,1267],{"class":87},")) ",[81,1269,1270],{"class":158},"return",[81,1272,188],{"class":87},[81,1274,1275],{"class":83,"line":572},[81,1276,1277],{"class":87},"  \n",[81,1279,1280,1283,1286,1288,1291,1294,1296,1298,1300,1302,1304,1306,1308,1310,1313],{"class":83,"line":577},[81,1281,1282],{"class":158},"  const",[81,1284,1285],{"class":218}," newHtml",[81,1287,223],{"class":222},[81,1289,1290],{"class":114}," `\u003Cdiv id=\"md-root\">`",[81,1292,1293],{"class":222}," +",[81,1295,244],{"class":281},[81,1297,284],{"class":87},[81,1299,287],{"class":226},[81,1301,230],{"class":87},[81,1303,292],{"class":281},[81,1305,284],{"class":87},[81,1307,297],{"class":91},[81,1309,644],{"class":87},[81,1311,1312],{"class":222},"+",[81,1314,1315],{"class":114}," `\u003C/div>`\n",[81,1317,1318],{"class":83,"line":592},[81,1319,139],{"emptyLinePlaceholder":138},[81,1321,1322,1325,1327,1329,1331,1333,1335,1338],{"class":83,"line":606},[81,1323,1324],{"class":226},"  morphdom",[81,1326,230],{"class":87},[81,1328,1250],{"class":281},[81,1330,284],{"class":87},[81,1332,297],{"class":91},[81,1334,168],{"class":87},[81,1336,1337],{"class":622},"newHtml",[81,1339,1340],{"class":87},", {\n",[81,1342,1343,1346,1348],{"class":83,"line":611},[81,1344,1345],{"class":91},"    childrenOnly",[81,1347,925],{"class":924},[81,1349,1350],{"class":107}," true\n",[81,1352,1353],{"class":83,"line":619},[81,1354,1355],{"class":87},"  });\n",[81,1357,1358],{"class":83,"line":629},[81,1359,1360],{"class":87},"}\n",[81,1362,1363],{"class":83,"line":651},[81,1364,139],{"emptyLinePlaceholder":138},[81,1366,1367,1369,1371,1373,1376,1378],{"class":83,"line":688},[81,1368,515],{"class":226},[81,1370,230],{"class":87},[81,1372,292],{"class":622},[81,1374,1375],{"class":87},", () ",[81,1377,278],{"class":158},[81,1379,317],{"class":87},[81,1381,1382,1385],{"class":83,"line":694},[81,1383,1384],{"class":226},"    render",[81,1386,569],{"class":87},[81,1388,1389],{"class":83,"line":700},[81,1390,1391],{"class":87},"});\n",[81,1393,1394],{"class":83,"line":725},[81,1395,1221],{"class":87},[81,1397,1398,1400,1402,1405,1407,1409],{"class":83,"line":770},[81,1399,171],{"class":226},[81,1401,230],{"class":87},[81,1403,1404],{"class":158},"async",[81,1406,1233],{"class":87},[81,1408,278],{"class":158},[81,1410,317],{"class":87},[81,1412,1413],{"class":83,"line":776},[81,1414,1415],{"class":323},"  // 等待 Dom 被挂载上\n",[81,1417,1418,1421,1424],{"class":83,"line":822},[81,1419,1420],{"class":158},"  await",[81,1422,1423],{"class":226}," nextTick",[81,1425,569],{"class":87},[81,1427,1428,1431],{"class":83,"line":866},[81,1429,1430],{"class":226},"  render",[81,1432,569],{"class":87},[81,1434,1435],{"class":83,"line":872},[81,1436,330],{"class":87},[81,1438,1439,1441,1443],{"class":83,"line":878},[81,1440,128],{"class":87},[81,1442,147],{"class":91},[81,1444,95],{"class":87},[980,1446,1448],{"id":1447},"眼见为实demo-对比","眼见为实：Demo 对比",[14,1450,1451],{},"下面这个 iframe 里放了个对比 Demo，展示了不同方案的效果差异。",[14,1453,1454,1457],{},[59,1455,1456],{},"小技巧："," 如果你用的是 Chrome、Edge 这类 Chromium 内核的浏览器，打开开发者工具 (DevTools)，找到“渲染”(Rendering) 标签页，勾选「突出显示重绘区域(Paint flashing)」。这样你就能直观看到每次更新时，哪些部分被重新绘制了——重绘区域越少，性能越好！",[14,1459,1460],{},[1461,1462],"img",{"alt":77,"src":1463},"https://static.031130.xyz/uploads/2025/07/12/d5721c40fb076.webp",[1465,1466],"iframe",{"src":1467,"width":1468,"height":1469,"allowFullScreen":138},"https://static.031130.xyz/demo/morphdom-vs-markdown-chunk.html","100%",500,[10,1471,1472],{"id":1472},"阶段性成果",[14,1474,1475,1476,1478],{},"从最开始的“暴力全量刷新”，到“聪明点的分块更新”，再到如今“精准手术刀般的 ",[64,1477,988],{}," 更新”，我们一步步把那些不必要的渲染开销给砍掉了，最终搞出了一个既快又能留住用户状态的 Markdown 实时渲染方案。",[14,1480,1481,1482,1484],{},"不过，用 ",[64,1483,988],{}," 这个第三方库来直接操作 Vue 组件里的 DOM，总觉得有点...不够“Vue”？它虽然解决了核心的性能和状态问题，但在 Vue 的世界里这么玩，多少有点旁门左道的意思。",[14,1486,1487,1490],{},[59,1488,1489],{},"下篇预告："," 在下一篇文章里，咱们就来聊聊，在 Vue 的世界里，有没有更优雅、更“原生”的方案来搞定 Markdown 的精准更新？敬请期待！",[1492,1493,1494],"style",{},"html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .sNmU0, html code.shiki .sNmU0{--shiki-default:#986801;--shiki-dark:#E5C07B}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .s7GmK, html code.shiki .s7GmK{--shiki-default:#383A42;--shiki-dark:#E5C07B}html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sz0mV, html code.shiki .sz0mV{--shiki-default:#383A42;--shiki-dark:#E06C75}html pre.shiki code .s8iYz, html code.shiki .s8iYz{--shiki-default:#383A42;--shiki-default-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic}html pre.shiki code .sDaw7, html code.shiki .sDaw7{--shiki-default:#0184BC;--shiki-dark:#E06C75}html pre.shiki code .sRZ4U, html code.shiki .sRZ4U{--shiki-default:#986801;--shiki-dark:#E06C75}html pre.shiki code .sYoRg, html code.shiki .sYoRg{--shiki-default:#0184BC;--shiki-dark:#D19A66}html pre.shiki code .s2QsP, html code.shiki .s2QsP{--shiki-default:#E45649;--shiki-dark:#E5C07B}html pre.shiki code .st7oF, html code.shiki .st7oF{--shiki-default:#0184BC;--shiki-dark:#ABB2BF}",{"title":77,"searchDepth":98,"depth":98,"links":1496},[1497,1498,1499,1500,1505],{"id":12,"depth":98,"text":12},{"id":48,"depth":98,"text":49},{"id":342,"depth":98,"text":343},{"id":974,"depth":98,"text":975,"children":1501},[1502,1503,1504],{"id":982,"depth":125,"text":983},{"id":1027,"depth":125,"text":1027},{"id":1447,"depth":125,"text":1448},{"id":1472,"depth":98,"text":1472},"2025-07-12 20:48:56","md",{},"/2025/07/12/vue-markdown-render-improvement-1","---\ntitle: Vue Markdown 渲染优化实战(上)：从暴力刷新、分块更新到 Morphdom 的华丽变身\ndate: 2025-07-12 20:48:56\nsticky:\ntags:\n- Vue.js\n- Markdown\n- JavaScript\n- Web\n- HTML\n---\n\n## 需求背景\n\n在最近接手的 AI 需求中，需要实现一个类似 ChatGPT 的对话交互界面。其核心流程是：后端通过 SSE（Server-Sent  Events）协议，持续地将 AI 生成的 Markdown 格式文本片段推送到前端。前端负责动态接收并拼接这些 Markdown  片段，最终将拼接完成的 Markdown 文本实时渲染并显示在用户界面上。\n\nMarkdown 渲染并不是什么罕见的需求，尤其是在 LLM 相关落地产品满天飞的当下。不同于 React 生态拥有一个 14k+ star 的著名第三方库——[react-markdown](https://github.com/remarkjs/react-markdown)，Vue 这边似乎暂时还没有一个仍在活跃维护的、star 数量不低（起码得 2k+ 吧？）的 markdown 渲染库。[cloudacy/vue-markdown-render](https://github.com/cloudacy/vue-markdown-render#readme) 最后一次发版在一年前，但截止本文写作时间只有 103 个 star；[miaolz123/vue-markdown](https://github.com/miaolz123/vue-markdown) 有 2k star，但最后一次 commit 已经是 7 年前了；[zhaoxuhui1122/vue-markdown](https://github.com/zhaoxuhui1122/vue-markdown) 更是 archived 状态。\n\n## 第一版方案：简单粗暴的 v-html\n\n简单调研了一圈，发现 Vue 生态里确实缺少一个能打的 Markdown 渲染库。既然没有现成的轮子，那咱就自己造一个！\n\n根据大部分文章以及 LLM 的推荐，我们首先采用 markdown-it 这个第三方库将 markdown 转换为 html 字符串，再通过 v-html 传入。\n\n**PS:** 我们这里假设 Markdown 内容是可信的（比如由我们自己的 AI 生成）。如果内容来自用户输入，一定要使用 `DOMPurify` 这类库来防止 XSS 攻击，避免给网站“开天窗”哦！\n\n示例代码如下：\n\n```vue\n\u003Ctemplate>\n  \u003Cdiv v-html=\"renderedHtml\">\u003C/div>\n\u003C/template>\n\n\u003Cscript setup>\nimport { computed, onMounted, ref } from 'vue';\nimport MarkdownIt from 'markdown-it';\n\nconst markdownContent = ref('');\nconst md = new MarkdownIt();\n\nconst renderedHtml = computed(() => md.render(markdownContent.value))\n\nonMounted(() => {\n  // markdownContent.value = await fetch() ...\n})\n\u003C/script>\n```\n\n## 进化版：给 Markdown 分块更新\n\n上述方案虽然能实现基础渲染，但在实时更新场景下存在明显缺陷：**每次接收到新的 Markdown 片段，整个文档都会触发全量重渲染**。即使只有最后一行是新增内容，整个文档的 DOM 也会被完全替换。这导致两个核心问题：\n\n1. **性能顶不住：**Markdown 内容增长时，`markdown-it` 解析和 DOM 重建的开销呈线性上升。\n2. **交互状态丢失：**全量刷新会把用户当前的操作状态冲掉。最明显的就是，如果你选中了某段文字，一刷新，选中状态就没了！\n\n为了解决这两个问题，[我们在网上找到了分块渲染的方案](https://juejin.cn/post/7480900772386734143) —— 把 Markdown 按两个连续的换行符 (`\\n\\n`) 切成一块一块的。这样每次更新，只重新渲染最后一块新的，前面的老块直接复用缓存。好处很明显：\n\n- 用户如果选中了前面块里的文字，下次更新时选中状态不会丢（因为前面的块没动）。\n- 需要重新渲染的 DOM 变少了，性能自然就上来了。\n\n代码调整后像这样：\n\n```vue\n\u003Ctemplate>\n  \u003Cdiv>\n    \u003Cdiv\n      v-for=\"(block, idx) in renderedBlocks\"\n      :key=\"idx\"\n      v-html=\"block\"\n      class=\"markdown-block\"\n    >\u003C/div>\n  \u003C/div>\n\u003C/template>\n\n\u003Cscript setup>\nimport { ref, computed, watch } from 'vue'\nimport MarkdownIt from 'markdown-it'\n\nconst markdownContent = ref('')\nconst md = new MarkdownIt()\n\nconst renderedBlocks = ref([])\nconst blockCache = ref([])\n\nwatch(\n  markdownContent,\n  (newContent, oldContent) => {\n    const blocks = newContent.split(/\\n{2,}/)\n    // 只重新渲染最后一个块，其余用缓存\n    // 处理块减少、块增多的场景\n    blockCache.value.length = blocks.length\n    for (let i = 0; i \u003C blocks.length; i++) {\n      // 只渲染最后一个，或新块\n      if (i === blocks.length - 1 || !blockCache.value[i]) {\n        blockCache.value[i] = md.render(blocks[i] || '')\n      }\n      // 其余块直接复用\n    }\n    renderedBlocks.value = blockCache.value.slice()\n  },\n  { immediate: true }\n)\n\nonMounted(() => {\n  // markdownContent.value = await fetch() ...\n})\n\u003C/script>\n```\n\n## 终极武器：用 morphdom 实现精准更新\n\n分块渲染虽然解决了大部分问题，但遇到 Markdown 列表就有点力不从心了。因为 Markdown 语法里，列表项之间通常只有一个换行符，整个列表会被当成一个大块。想象一下一个几百项的列表，哪怕只更新最后一项，整个列表块也要全部重来，前面的问题又回来了。\n\n### morphdom 是何方神圣？\n\n`morphdom` 是一个仅 5KB（gzip 后）的 JavaScript 库，核心功能是：**接收两个 DOM 节点（或 HTML 字符串），计算出最小化的 DOM 操作，将第一个节点 “变形” 为第二个节点，而非直接替换**。\n\n其工作原理类似虚拟 DOM 的 Diff 算法，但**直接操作真实 DOM**：\n\n1. 对比新旧 DOM 的标签名、属性、文本内容等；\n2. 仅对差异部分执行增 / 删 / 改操作（如修改文本、更新属性、移动节点位置）；\n3. 未变化的 DOM 节点会被完整保留，包括其事件监听、滚动位置、选中状态等。\n\nMarkdown 把列表当整体，但生成的 HTML 里，每个列表项 (`\u003Cli>`) 都是独立的！`morphdom` 在更新后面的列表项时，能保证前面的列表项纹丝不动，状态自然就保住了。\n\n这不就是我们梦寐以求的效果吗？在 Markdown 实时更新的同时，最大程度留住用户的操作状态，还能省掉一堆不必要的 DOM 操作！\n\n### 示例代码\n\n```vue\n\u003Ctemplate>\n  \u003Cdiv ref=\"markdownContainer\" class=\"markdown-container\">\n    \u003Cdiv id=\"md-root\">\u003C/div>\n  \u003C/div>\n\u003C/template>\n\n\u003Cscript setup>\nimport { nextTick, ref, watch } from 'vue';\nimport MarkdownIt from 'markdown-it';\nimport morphdom from 'morphdom';\n\nconst markdownContent = ref('');\nconst markdownContainer = ref(null);\nconst md = new MarkdownIt();\n    \nconst render = () => {\n  if (!markdownContainer.value.querySelector('#md-root')) return;\n  \n  const newHtml = `\u003Cdiv id=\"md-root\">` + md.render(markdownContent.value) + `\u003C/div>`\n\n  morphdom(markdownContainer.value, newHtml, {\n    childrenOnly: true\n  });\n}\n\nwatch(markdownContent, () => {\n    render()\n});\n    \nonMounted(async () => {\n  // 等待 Dom 被挂载上\n  await nextTick()\n  render()\n})\n\u003C/script>\n\n```\n\n### 眼见为实：Demo 对比\n\n下面这个 iframe 里放了个对比 Demo，展示了不同方案的效果差异。\n\n**小技巧：** 如果你用的是 Chrome、Edge 这类 Chromium 内核的浏览器，打开开发者工具 (DevTools)，找到“渲染”(Rendering) 标签页，勾选「突出显示重绘区域(Paint flashing)」。这样你就能直观看到每次更新时，哪些部分被重新绘制了——重绘区域越少，性能越好！\n\n![](https://static.031130.xyz/uploads/2025/07/12/d5721c40fb076.webp)\n\n\u003Ciframe src=\"https://static.031130.xyz/demo/morphdom-vs-markdown-chunk.html\" width=\"100%\" height=\"500\" allowfullscreen>\u003C/iframe>\n\n## 阶段性成果\n\n从最开始的“暴力全量刷新”，到“聪明点的分块更新”，再到如今“精准手术刀般的 `morphdom` 更新”，我们一步步把那些不必要的渲染开销给砍掉了，最终搞出了一个既快又能留住用户状态的 Markdown 实时渲染方案。\n\n不过，用 `morphdom` 这个第三方库来直接操作 Vue 组件里的 DOM，总觉得有点...不够“Vue”？它虽然解决了核心的性能和状态问题，但在 Vue 的世界里这么玩，多少有点旁门左道的意思。\n\n**下篇预告：** 在下一篇文章里，咱们就来聊聊，在 Vue 的世界里，有没有更优雅、更“原生”的方案来搞定 Markdown 的精准更新？敬请期待！\n",{"title":5,"description":77},"posts/vue-markdown-render-improvement-1",false,[1515,1516,1517,1518,1519],"Vue.js","Markdown","JavaScript","Web","HTML","ApwfL_ZqfAmTX3ONTiS7Vbv0u0dLC5E_E5sIIpneox8",[1522,1527],{"title":1523,"path":1524,"stem":1525,"date":1526,"children":-1},"Vue Markdown 渲染优化实战(下)：告别 DOM 操作，拥抱 AST 与函数式渲染","/2025/07/13/vue-markdown-render-improvement-2","posts/vue-markdown-render-improvement-2","2025-07-13 00:01:35",{"title":1528,"path":1529,"stem":1530,"date":1531,"children":-1},"node-sass 迁移至 dart-sass 踩坑实录","/2025/07/05/node-sass-migration-to-dart-sass","posts/node-sass-migration-to-dart-sass","2025-07-05 17:57:02",1761738772966]