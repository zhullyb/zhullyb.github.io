[{"data":1,"prerenderedAt":3046},["ShallowReactive",2],{"randomIndex/archives/page/5/":3,"index-page-5":4,"posts-nums-total":3045},6,[5,210,517,752,1022,1291,1493,1843,2275,2730],{"title":6,"date":7,"path":8,"tags":9,"body":11},"使用 Python 生成甘特图(Gantt Chart)","2024-04-24 12:02:58","/2024/04/24/generate-gantt-chart-with-python",[10],"Python",{"type":12,"value":13,"toc":208},"minimark",[14,18,21,28,39,42,48,51,54,57,144,149,151,199,204],[15,16,17],"p",{},"在写操作系统的作业的时候有几道题给出了几个进程的相关信息，要求我们画出几种简单调度的甘特图。操作系统的作业一直是电子版，上传 pdf 即可的。我觉得手画甘特图拍照嵌入 pdf 中不太优雅，过于掉价，因此就想直接生成甘特图嵌入。",[15,19,20],{},"在谷歌搜寻了一番，我发现现在的甘特图生成网站都太现代化了，根本不是操作系统课上教的样子了。",[15,22,23],{},[24,25],"img",{"alt":26,"src":27},"现代化的甘特图","https://static.031130.xyz/uploads/2024/08/12/662888bd5a0af.webp",[15,29,30,31,38],{},"所幸我找到了 ",[32,33,37],"a",{"href":34,"rel":35},"https://github.com/gao-keyong/matplotlib-gantt/",[36],"nofollow","gao-keyong/matplotlib-gantt","，虽然只有两个 star（没事，加上我就 3 stars 了），但确实能用，README 中的样例也是我期望的样子。",[15,40,41],{},"项目中自带了一个 jupyter 的示例，算得上是非常简单易上手的了，依赖方面只要装好 matplotlib 就可以使用，不存在依赖地狱。尽管是三年前的项目，在我本机的 Python 3.11 上仍然能够正常运行。",[15,43,44],{},[24,45],{"alt":46,"src":47},"","https://static.031130.xyz/uploads/2024/08/12/66288ba6414d4.webp",[15,49,50],{},"tuple 中的第一个数字表示从当前时间开始，第二个数字表示持续时间。每一个表示 category 的 list 中可以存在多个 tuple。",[15,52,53],{},"给一些咱生成的例子。",[55,56],"hr",{},[58,59,63],"pre",{"className":60,"code":61,"language":62,"meta":46,"style":46},"language-python shiki shiki-themes one-light one-dark-pro","from gantt import *\ncategory_names = ['P1', 'P2', 'P3', 'P4', 'P5']\n\nresults = {\n    'FCFS': [[(0,2)], [(2,1)], [(3,8)], [(11,4)], [(15,5)]],\n    'SJF': [[(1,2)], [(0,1)], [(12,8)], [(3,4)], [(7,5)]],\n    'non-compreemptive priority': [[(13,2)],[(19,1)],[(0,8)],[(15,4)],[(8,5)]],\n    'RR (quantum=2)': [[(0,2)], [(2,1)],[(3,2),(9,2),(15,2),(18,2)], [(5,2),(11,2)], [(7,2),(13,2),(17,1)]]\n}\n\narrival_t = [0, 0, 0, 0]\n\ngantt(category_names, results, arrival_t).show()\n\n","python",[64,65,66,74,80,87,93,99,104,110,116,122,127,133,138],"code",{"__ignoreMap":46},[67,68,71],"span",{"class":69,"line":70},"line",1,[67,72,73],{},"from gantt import *\n",[67,75,77],{"class":69,"line":76},2,[67,78,79],{},"category_names = ['P1', 'P2', 'P3', 'P4', 'P5']\n",[67,81,83],{"class":69,"line":82},3,[67,84,86],{"emptyLinePlaceholder":85},true,"\n",[67,88,90],{"class":69,"line":89},4,[67,91,92],{},"results = {\n",[67,94,96],{"class":69,"line":95},5,[67,97,98],{},"    'FCFS': [[(0,2)], [(2,1)], [(3,8)], [(11,4)], [(15,5)]],\n",[67,100,101],{"class":69,"line":3},[67,102,103],{},"    'SJF': [[(1,2)], [(0,1)], [(12,8)], [(3,4)], [(7,5)]],\n",[67,105,107],{"class":69,"line":106},7,[67,108,109],{},"    'non-compreemptive priority': [[(13,2)],[(19,1)],[(0,8)],[(15,4)],[(8,5)]],\n",[67,111,113],{"class":69,"line":112},8,[67,114,115],{},"    'RR (quantum=2)': [[(0,2)], [(2,1)],[(3,2),(9,2),(15,2),(18,2)], [(5,2),(11,2)], [(7,2),(13,2),(17,1)]]\n",[67,117,119],{"class":69,"line":118},9,[67,120,121],{},"}\n",[67,123,125],{"class":69,"line":124},10,[67,126,86],{"emptyLinePlaceholder":85},[67,128,130],{"class":69,"line":129},11,[67,131,132],{},"arrival_t = [0, 0, 0, 0]\n",[67,134,136],{"class":69,"line":135},12,[67,137,86],{"emptyLinePlaceholder":85},[67,139,141],{"class":69,"line":140},13,[67,142,143],{},"gantt(category_names, results, arrival_t).show()\n",[15,145,146],{},[24,147],{"alt":46,"src":148},"https://static.031130.xyz/uploads/2024/08/12/662890f78f1da.webp",[55,150],{},[58,152,154],{"className":60,"code":153,"language":62,"meta":46,"style":46},"from gantt import *\ncategory_names = ['P1', 'P2', 'P3', 'P4', 'P5', 'P6']\n\nresults = {\n    '': [[(0,20)], [(25,10),(45,10),(75,5)], [(35,10),(55,5),(80,10)], [(60,15)], [(100,5),(115,5)],[(105,10)]],\n}\n\narrival_t = [0]\n\ngantt(category_names, results, arrival_t).show()\n\n",[64,155,156,160,165,169,173,178,182,186,191,195],{"__ignoreMap":46},[67,157,158],{"class":69,"line":70},[67,159,73],{},[67,161,162],{"class":69,"line":76},[67,163,164],{},"category_names = ['P1', 'P2', 'P3', 'P4', 'P5', 'P6']\n",[67,166,167],{"class":69,"line":82},[67,168,86],{"emptyLinePlaceholder":85},[67,170,171],{"class":69,"line":89},[67,172,92],{},[67,174,175],{"class":69,"line":95},[67,176,177],{},"    '': [[(0,20)], [(25,10),(45,10),(75,5)], [(35,10),(55,5),(80,10)], [(60,15)], [(100,5),(115,5)],[(105,10)]],\n",[67,179,180],{"class":69,"line":3},[67,181,121],{},[67,183,184],{"class":69,"line":106},[67,185,86],{"emptyLinePlaceholder":85},[67,187,188],{"class":69,"line":112},[67,189,190],{},"arrival_t = [0]\n",[67,192,193],{"class":69,"line":118},[67,194,86],{"emptyLinePlaceholder":85},[67,196,197],{"class":69,"line":124},[67,198,143],{},[15,200,201],{},[24,202],{"alt":46,"src":203},"https://static.031130.xyz/uploads/2024/08/12/662891bfa52fc.webp",[205,206,207],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":209},[],{"title":211,"date":212,"path":213,"tags":214,"body":219},"uniapp 中的图片预加载","2024-04-01 05:31:25","/2024/04/01/image-preload-in-uniapp",[215,216,217,218],"uniapp","Vue.js","Web","JavaScript",{"type":12,"value":220,"toc":515},[221,224,226,239,241,250,260,270,276,282,284,291,500,505,512],[15,222,223],{},"最近在做微信小程序的时候遇到了图片资源过大无法正常打包的问题，没什么太好的方法，只能是使用图床托管这些图片资源。但部分图片的体积实在太大，即使是采用了境内 cdn 的图床，即使是采用 webp 对图片进行了压缩，部分图片都需要小几秒去把图片加载出来，这导致的用户体验就不是很好了，因此我们需要实现图片预加载的功能。",[55,225],{},[15,227,228,229,234,235,238],{},"在 ",[32,230,233],{"href":231,"rel":232},"https://uniapp.dcloud.net.cn/api/preload-page.html#preloadpage",[36],"uniapp 的官方文档","中，我找到了 ",[64,236,237],{},"uni.preloadPage(OBJECT)"," 方法。很可惜，这个方法并不支持微信小程序，自然不能完成被预加载页面的图片资源预加载。",[55,240],{},[15,242,243,244,249],{},"经过搜索，在",[32,245,248],{"href":246,"rel":247},"https://frontend.mimiwuqi.com/qianduan/202517.html",[36],"一篇奇奇怪怪的文章","中提到：",[251,252,253],"blockquote",{},[15,254,255,256,259],{},"在UniApp中，图片预加载可以通过使用",[64,257,258],{},"uni.getImageInfo","方法来实现。这个方法可以获取图片的信息，包括宽度、高度等。可以在应用启动时就开始加载图片，以提高后续图片显示的速度。",[15,261,262,263,266,267,269],{},"很遗憾，经过实测，提前使用 ",[64,264,265],{},"getImageInfo()"," 方法并不能实现图片的预加载。",[64,268,265],{}," 获取时的 Type 是 xhr，而后续图片加载时的 Type 为 webp，图片会被重复下载，并没有实现预加载的作用。",[15,271,272],{},[24,273],{"alt":274,"src":275},"下载测试","https://static.031130.xyz/uploads/2024/08/12/6609d97bc4f7f.webp",[15,277,278,279,281],{},"上图中，蓝色部分是 ",[64,280,265],{}," 的网络请求，红色部分是真正的图片加载请求，可谓是一点用都没有，该加载慢还是加载慢。",[55,283],{},[15,285,286,287,290],{},"那有没有什么办法能够实现预加载呢？我没找到优雅的方法，选择在应用的首页创建一个 ",[64,288,289],{},"display: none"," 的 view 将所有的图片先加载一遍。",[58,292,296],{"className":293,"code":294,"language":295,"meta":46,"style":46},"language-vue shiki shiki-themes one-light one-dark-pro","\u003Ctemplate>\n    \u003Cview style=\"display: none;\">\n        \u003Cimage\n            v-for=\"image in imageToPreload\"\n            :src=\"image\"\n        />\n    \u003C/view>\n\u003C/template>\n\u003Cscript setup lang=\"ts\">\nconst imageToPreload = [\n    \"https://http.cat/100\",\n    \"https://http.cat/200\",\n    \"https://http.cat/300\",\n    \"https://http.cat/400\",\n    \"https://http.cat/500\"\n]\n\u003C/script>\n","vue",[64,297,298,311,343,351,374,390,395,404,413,434,449,457,464,471,479,485,491],{"__ignoreMap":46},[67,299,300,304,308],{"class":69,"line":70},[67,301,303],{"class":302},"s5ixo","\u003C",[67,305,307],{"class":306},"sJa8x","template",[67,309,310],{"class":302},">\n",[67,312,313,316,319,323,326,329,332,336,339,341],{"class":69,"line":76},[67,314,315],{"class":302},"    \u003C",[67,317,318],{"class":306},"view",[67,320,322],{"class":321},"sAGMh"," style",[67,324,325],{"class":302},"=",[67,327,328],{"class":302},"\"",[67,330,331],{"class":302},"display: ",[67,333,335],{"class":334},"sYebD","none",[67,337,338],{"class":302},";",[67,340,328],{"class":302},[67,342,310],{"class":302},[67,344,345,348],{"class":69,"line":82},[67,346,347],{"class":302},"        \u003C",[67,349,350],{"class":306},"image\n",[67,352,353,357,359,361,365,368,371],{"class":69,"line":89},[67,354,356],{"class":355},"sLKXg","            v-for",[67,358,325],{"class":302},[67,360,328],{"class":302},[67,362,364],{"class":363},"sz0mV","image",[67,366,367],{"class":355}," in",[67,369,370],{"class":363}," imageToPreload",[67,372,373],{"class":302},"\"\n",[67,375,376,379,382,384,386,388],{"class":69,"line":95},[67,377,378],{"class":302},"            :",[67,380,381],{"class":321},"src",[67,383,325],{"class":302},[67,385,328],{"class":302},[67,387,364],{"class":363},[67,389,373],{"class":302},[67,391,392],{"class":69,"line":3},[67,393,394],{"class":302},"        />\n",[67,396,397,400,402],{"class":69,"line":106},[67,398,399],{"class":302},"    \u003C/",[67,401,318],{"class":306},[67,403,310],{"class":302},[67,405,406,409,411],{"class":69,"line":112},[67,407,408],{"class":302},"\u003C/",[67,410,307],{"class":306},[67,412,310],{"class":302},[67,414,415,417,420,423,426,428,432],{"class":69,"line":118},[67,416,303],{"class":302},[67,418,419],{"class":306},"script",[67,421,422],{"class":321}," setup",[67,424,425],{"class":321}," lang",[67,427,325],{"class":302},[67,429,431],{"class":430},"sDhpE","\"ts\"",[67,433,310],{"class":302},[67,435,436,439,442,446],{"class":69,"line":124},[67,437,438],{"class":355},"const",[67,440,370],{"class":441},"sNmU0",[67,443,445],{"class":444},"s_Sar"," =",[67,447,448],{"class":302}," [\n",[67,450,451,454],{"class":69,"line":129},[67,452,453],{"class":430},"    \"https://http.cat/100\"",[67,455,456],{"class":302},",\n",[67,458,459,462],{"class":69,"line":135},[67,460,461],{"class":430},"    \"https://http.cat/200\"",[67,463,456],{"class":302},[67,465,466,469],{"class":69,"line":140},[67,467,468],{"class":430},"    \"https://http.cat/300\"",[67,470,456],{"class":302},[67,472,474,477],{"class":69,"line":473},14,[67,475,476],{"class":430},"    \"https://http.cat/400\"",[67,478,456],{"class":302},[67,480,482],{"class":69,"line":481},15,[67,483,484],{"class":430},"    \"https://http.cat/500\"\n",[67,486,488],{"class":69,"line":487},16,[67,489,490],{"class":302},"]\n",[67,492,494,496,498],{"class":69,"line":493},17,[67,495,408],{"class":302},[67,497,419],{"class":306},[67,499,310],{"class":302},[15,501,502],{},[24,503],{"alt":274,"src":504},"https://static.031130.xyz/uploads/2024/08/12/6609db8a213da.webp",[15,506,507,508,511],{},"可以看到，红色部分的资源在 size 那一栏变成了 ",[64,509,510],{},"(disk cache)","，加载时间也明显降低，虽然方法不优雅，但起码实现了图片资源的预加载。",[205,513,514],{},"html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sYebD, html code.shiki .sYebD{--shiki-default:#383A42;--shiki-dark:#D19A66}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .sz0mV, html code.shiki .sz0mV{--shiki-default:#383A42;--shiki-dark:#E06C75}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sNmU0, html code.shiki .sNmU0{--shiki-default:#986801;--shiki-dark:#E5C07B}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":516},[],{"title":518,"date":519,"path":520,"tags":521,"body":525},"小记 - 尝试拼凑出 apt 仓库中的 deb 包下载地址","2024-03-13 21:55:04","/2024/03/13/try-to-compose-download-links-of-deb-packages-in-apt-repository",[522,523,524],"Linux","Apt","deepin",{"type":12,"value":526,"toc":750},[527,530,539,542,545,551,558,561,564,572,585,654,661,667,678,684,687,690,721,727,738,741,747],[15,528,529],{},"大概一周前，有一个来源不明的 Linux 微信，从包的结构来看是基于 qt 实现的图形化界面，deb 包中的 control 信息表明是腾讯团队官方出品的。今天听人说 UOS 的商店上架了最新的微信，便尝试从 UOS 的官方仓库提取下载链接，帮助 AUR Maintainer 获取到新的地址。",[15,531,532,533,538],{},"在我的",[32,534,537],{"href":535,"rel":536},"https://zhul.in/2021/11/20/what-is-deepin-elf-verify/",[36],"《deepin-elf-verify究竟是何物？》","这篇文章中，我成功从 uos.deepin.cn 下载到了来自 UOS 中的软件包。可惜，当我采用同样的方法搜索 weixin 或者 wechat 字样时，没有得到任何结果。",[15,540,541],{},"UOS 上的软件来源起码来自两个仓库，一个是与系统有关的软件，比如 Linux Kernel，GCC 一类开源软件，应该就是来自我之前下载到 deepin-elf-verify 的那个源。除此之外，还有一个 appstore 源，里面存放的都是应用商店中上架的软件（大部分可能是闭源的）。",[15,543,544],{},"在 chinauos.com 下载到最新的 ISO 安装镜像后，直接在虚拟机中走完正常的安装流畅，然后直捣黄龙。",[15,546,547],{},[24,548],{"alt":549,"src":550},"源地址","https://static.031130.xyz/uploads/2024/08/12/65f1b344e5581.webp",[15,552,553,554,557],{},"可以看出，",[64,555,556],{},"/etc/apt/sources.list.d/appstore.list"," 文件中列出的源很有可能就是我们要找的新版微信的所在源。",[15,559,560],{},"可惜直接访问的时候，源地址给出了 403。他们似乎不愿意公开源地址的 filelist index。",[15,562,563],{},"不过没关系，既然 UOS Desktop 目前仍然依赖 APT 实现软件安装，那它的源应该仍然符合 Debian 的 APT Repository 目录结构。",[15,565,566,567],{},"根据 ",[32,568,571],{"href":569,"rel":570},"https://wiki.debian.org/DebianRepository/Format",[36],"DebianWiki 中的描述",[251,573,574,577],{},[15,575,576],{},"gives an example:",[58,578,583],{"className":579,"code":581,"language":582},[580],"language-text","deb https://deb.debian.org/debian stable main contrib non-free\n","text",[64,584,581],{"__ignoreMap":46},[251,586,587,590,608,641],{},[15,588,589],{},"An archive can have either source packages or binary packages or both but they have to be specified separately to apt.",[15,591,592,593,599,600,603,604,607],{},"The uri, in this case ",[594,595,596],"em",{},[64,597,598],{},"https://deb.debian.org/debian"," specifies the root of the archive. Often Debian archives are in the ",[594,601,602],{},"debian/"," directory on the server but can be anywhere else (many mirrors for example have it in a ",[594,605,606],{},"pub/linux/debian"," directory, for example).",[15,609,610,611,614,615,619,620,623,624,627,628,631,632,635,636],{},"The distribution part (",[594,612,613],{},"stable"," in this case) specifies a subdirectory in ",[616,617,618],"strong",{},"$ARCHIVE_ROOT/dists",". It can contain additional slashes to specify subdirectories nested deeper, eg. ",[594,621,622],{},"stable/updates",". distribution typically corresponds to ",[616,625,626],{},"Suite"," or ",[616,629,630],{},"Codename"," specified in the ",[616,633,634],{},"Release"," files. ",[594,637,638],{},[616,639,640],{},"FIXME is this enforced anyhow?",[15,642,643,644,627,647,649,650,653],{},"To download packages from a repository apt would download an ",[616,645,646],{},"InRelease",[616,648,634],{}," file from the ",[616,651,652],{},"$ARCHIVE_ROOT/dists/$DISTRIBUTION"," directory.",[15,655,656,657,660],{},"我尝试了访问 ",[64,658,659],{},"https://pro-store-packages.uniontech.com/appstore/dists/eagle-pro/Release","，获得了一系列索引文件的索引。",[15,662,663],{},[24,664],{"alt":665,"src":666},"索引的索引（很拗口）","https://static.031130.xyz/uploads/2024/08/12/65f1b5166810a.webp",[15,668,669,670,673,674],{},"第一段中就能看到熟悉的 ",[64,671,672],{},"Packages"," 文件。根据我 deepin-elf-verify 相关博客中记载，这个文件中会保存 deb 文件的相对路径。我们先拼出 amd64 架构的 Packages 文件下载链接: ",[32,675,676],{"href":676,"rel":677},"https://pro-store-packages.uniontech.com/appstore/dists/eagle-pro/appstore/binary-amd64/Packages",[36],[15,679,680],{},[24,681],{"alt":682,"src":683},"deb 包详细信息","https://static.031130.xyz/uploads/2024/08/12/65f1b5faccc86.webp",[15,685,686],{},"这里可以看到源中每一个 deb 包的信息。图中红色方框框出的便是其中一个 deb 包在源中的相对路径。",[15,688,689],{},"我们可以使用 grep 命令去检索 weixin 或者 wechat 关键词",[58,691,695],{"className":692,"code":693,"language":694,"meta":46,"style":46},"language-bash shiki shiki-themes one-light one-dark-pro","curl -sL https://pro-store-packages.uniontech.com/appstore/dists/eagle-pro/appstore/binary-amd64/Packages | grep -E \"weixin|wechat\"\n","bash",[64,696,697],{"__ignoreMap":46},[67,698,699,703,706,709,712,715,718],{"class":69,"line":70},[67,700,702],{"class":701},"sAdtL","curl",[67,704,705],{"class":321}," -sL",[67,707,708],{"class":430}," https://pro-store-packages.uniontech.com/appstore/dists/eagle-pro/appstore/binary-amd64/Packages",[67,710,711],{"class":302}," | ",[67,713,714],{"class":701},"grep",[67,716,717],{"class":321}," -E",[67,719,720],{"class":430}," \"weixin|wechat\"\n",[15,722,723],{},[24,724],{"alt":725,"src":726},"获取到我们想要的 deb 包的相对路径","https://static.031130.xyz/uploads/2024/08/12/65f1b6a4c3239.webp",[15,728,729,730,733,734],{},"在这个路径前加上之前 ",[64,731,732],{},"appstore.list"," 文件中给出的 url 前缀，即可拼凑出 deb 包的完整下载地址: ",[32,735,736],{"href":736,"rel":737},"https://pro-store-packages.uniontech.com/appstore/pool/appstore/c/com.tencent.wechat/com.tencent.wechat_1.0.0.236_amd64.deb",[36],[15,739,740],{},"放到浏览器中尝试，果然可以正常下载",[15,742,743],{},[24,744],{"alt":745,"src":746},"正常下载","https://static.031130.xyz/uploads/2024/08/12/65f1b73567121.webp",[205,748,749],{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":751},[],{"title":753,"date":754,"path":755,"tags":756,"body":760},"在 Linux 下使用 mitmproxy 抓取 HTTPS 流量","2024-02-29 22:03:58","/2024/02/29/capture-https-traffic-on-linux-with-mitmproxy",[522,757,758,759],"Archlinux","Network","mitmproxy",{"type":12,"value":761,"toc":1015},[762,765,768,773,780,799,803,806,818,826,832,842,847,851,854,861,867,878,885,905,914,935,940,952,955,959,962,969,975,984,987,993,996,999,1009,1012],[15,763,764],{},"作为部分 AUR Package 的 maintainer，一直以来我都有在 Linux 下抓取 https 流量的需求，比如抓取应用内的更新检测时访问的 url 地址。之前一直没有空去研究，趁着最近课少，总算是完成了这个目标。",[15,766,767],{},"在这里我使用的 mitmproxy，基于 python 和 webui 的一款开源简洁的流量代理软件，可以用于抓取 https 流量信息。",[769,770,772],"h2",{"id":771},"安装-mitmproxy","安装 mitmproxy",[15,774,775,776,779],{},"在 Arch Linux 下，官方 ",[64,777,778],{},"extra"," 源中已经打包好了这款软件，直接使用下面的命令即可完成安装。",[58,781,783],{"className":692,"code":782,"language":694,"meta":46,"style":46},"sudo pacman -S mitmproxy\n",[64,784,785],{"__ignoreMap":46},[67,786,787,790,793,796],{"class":69,"line":70},[67,788,789],{"class":701},"sudo",[67,791,792],{"class":430}," pacman",[67,794,795],{"class":321}," -S",[67,797,798],{"class":430}," mitmproxy\n",[769,800,802],{"id":801},"尝试运行-mitmweb","尝试运行 mitmweb",[15,804,805],{},"安装完成后，我们将会获得三个新的命令可用：",[807,808,809,813,815],"ul",{},[810,811,812],"li",{},"mitmdump",[810,814,759],{},[810,816,817],{},"mitmweb",[15,819,820,821,825],{},"我们只要使用 mitmweb 即可同时打开 8080 的代理端口和 8081 端口的 webui。访问 ",[32,822,823],{"href":823,"rel":824},"http://127.0.0.1:8081",[36]," 即可看到 mitmproxy 的网页。",[15,827,828],{},[24,829],{"alt":830,"src":831},"mitmweb 的界面","https://static.031130.xyz/uploads/2024/08/12/65e092503d5bb.webp",[15,833,834,835],{},"当然，也可以在 mitmweb 命令后面追加 -p ",[836,837,838,839],"port",{}," 和 --web-port=",[836,840,841],{}," 分别设置代理端口和 webui 的端口。",[15,843,844,845],{},"首先，我们先运行一次 ",[64,846,817],{},[769,848,850],{"id":849},"安装-ca-证书","安装 ca 证书",[15,852,853],{},"为了解密 https 流量，我们需要为系统安装上 mitmproxy 自己的证书文件，让系统信任我们的证书。",[15,855,856,857,860],{},"先来看看 ",[64,858,859],{},"/usr/share/ca-certificates/trust-source/README"," 这个文件",[58,862,865],{"className":863,"code":864,"language":582},[580],"This directory /usr/share/ca-certificates/trust-source/ contains CA certificates\nand trust settings in the PEM file format. The trust settings found here will be\ninterpreted with a low priority - lower than the ones found in \n/etc/ca-certificates/trust-source/ .\n\n=============================================================================\nQUICK HELP: To add a certificate in the simple PEM or DER file formats to the\n            list of CAs trusted on the system:\n\n            Copy it to the\n                    /usr/share/ca-certificates/trust-source/anchors/\n            subdirectory, and run the\n                    update-ca-trust\n            command.\n\n            If your certificate is in the extended BEGIN TRUSTED file format,\n            then place it into the main trust-source/ directory instead.\n=============================================================================\n\nPlease refer to the update-ca-trust(8) manual page for additional information.\n",[64,866,864],{"__ignoreMap":46},[15,868,869,870,873,874,877],{},"这份文件告诉我们可以在 ",[64,871,872],{},"/usr/share/ca-certificates/trust-source/anchors/"," 路径下放置 PEM 证书文件，并使用 ",[64,875,876],{},"update-ca-trust"," 命令更新系统的信任。",[15,879,880,881,884],{},"mitmproxy 软件第一次运行时，将会在当前用户的 ",[64,882,883],{},"$HOME/.mitmproxy/"," 文件夹下生成证书，我们打开这个文件夹，发现一共有六个文件：",[807,886,887,890,893,896,899,902],{},[810,888,889],{},"mitmproxy-ca-cert.cer",[810,891,892],{},"mitmproxy-ca-cert.p12",[810,894,895],{},"mitmproxy-ca-cert.pem",[810,897,898],{},"mitmproxy-ca.p12",[810,900,901],{},"mitmproxy-ca.pem",[810,903,904],{},"mitmproxy-dhparam.pem",[15,906,907,908,910,911,913],{},"我们这里需要将 ",[64,909,895],{}," 文件复制到 ",[64,912,872],{}," 路径下",[58,915,917],{"className":692,"code":916,"language":694,"meta":46,"style":46},"sudo cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem /usr/share/ca-certificates/trust-source/anchors/\n",[64,918,919],{"__ignoreMap":46},[67,920,921,923,926,929,932],{"class":69,"line":70},[67,922,789],{"class":701},[67,924,925],{"class":430}," cp",[67,927,928],{"class":306}," $HOME",[67,930,931],{"class":430},"/.mitmproxy/mitmproxy-ca-cert.pem",[67,933,934],{"class":430}," /usr/share/ca-certificates/trust-source/anchors/\n",[15,936,937,938],{},"随后执行 ",[64,939,876],{},[58,941,943],{"className":692,"code":942,"language":694,"meta":46,"style":46},"sudo update-ca-trust\n",[64,944,945],{"__ignoreMap":46},[67,946,947,949],{"class":69,"line":70},[67,948,789],{"class":701},[67,950,951],{"class":430}," update-ca-trust\n",[15,953,954],{},"这样便完成了 ca 证书的安装",[769,956,958],{"id":957},"使目标软件使用-8080-端口通信","使目标软件使用 8080 端口通信",[15,960,961],{},"其实我试过使用透明代理进行抓包，只不过我的 Archlinux 是作为日常主力机使用的，系统无时无刻不在向外通信，透明代理以后 mitmproxy 的 webui 各种刷屏，便放弃了这个想法，选择指定目标软件使用 8080 端口通信。",[15,963,964,965,968],{},"网上比较常见的做法是使用 ",[64,966,967],{},"proxychains-ng"," 代理目标软件。这个方案是可行的，只不过我这边测试下来，部分软件使用 proxychains 代理以后出现了仍然不使用代理、无法联网、甚至直接崩溃的情况。",[15,970,971],{},[24,972],{"alt":973,"src":974},"程序崩溃","https://static.031130.xyz/uploads/2024/08/12/65e09559dceef.webp",[15,976,977,978,983],{},"因此我转向了 ",[32,979,982],{"href":980,"rel":981},"https://github.com/mzz2017/gg",[36],"gg","。gg 和 proxychains-ng 的定位相同，都是使目标命令通过指定的代理进行通信，只不过 gg 解决了部分 golang 编写的软件无法被 proxychains 代理的问题，并支持一些常见的用来国际联网的协议。",[15,985,986],{},"在不对 gg 进行配置的情况下，每次启动时，gg 都会要求我们输入代理地址，这正合我意。",[15,988,989],{},[24,990],{"alt":991,"src":992},"gg 要求输入代理地址","https://static.031130.xyz/uploads/2024/08/12/65e0963840449.webp",[15,994,995],{},"此时，软件正常启动，流量全部经过 mitmproxy，可以在 webui 上看到具体情况",[769,997,998],{"id":998},"抓包成功",[15,1000,1001,1005],{},[24,1002],{"alt":1003,"src":1004},"命令行下看到流量信息","https://static.031130.xyz/uploads/2024/08/12/65e097dfe1f17.webp",[24,1006],{"alt":1007,"src":1008},"mitmweb 正常获取解密后的流量信息","https://static.031130.xyz/uploads/2024/08/12/65e09780dd2c0.webp",[15,1010,1011],{},"我们可以看到 mitmproxy 成功捕获并解密的 https 流量，针对图片等信息甚至可以直接实现预览。",[205,1013,1014],{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}",{"title":46,"searchDepth":76,"depth":76,"links":1016},[1017,1018,1019,1020,1021],{"id":771,"depth":76,"text":772},{"id":801,"depth":76,"text":802},{"id":849,"depth":76,"text":850},{"id":957,"depth":76,"text":958},{"id":998,"depth":76,"text":998},{"title":1023,"date":1024,"path":1025,"tags":1026,"body":1031},"如何使用 docker 部署 onemanager","2024-02-11 16:30:29","/2024/02/11/how-to-deploy-onemanager-with-docker",[1027,1028,1029,1030],"PHP","OneDrive","OpenSource Project","Docker",{"type":12,"value":1032,"toc":1281},[1033,1035,1038,1045,1047,1056,1061,1091,1095,1110,1113,1117,1142,1149,1155,1164,1175,1191,1200,1209,1212,1215,1225,1244,1248,1275,1278],[55,1034],{},[769,1036,1037],{"id":1037},"部署方法",[15,1039,1040,1041],{},"如果你只是想找一个 OneManager-php 的 Docker 部署方法，直接看 ",[32,1042,1043],{"href":1043,"rel":1044},"https://github.com/zhullyb/OneManager-php-docker",[36],[55,1046],{},[15,1048,1049,1050,1055],{},"一直以来，我都是 ",[32,1051,1054],{"href":1052,"rel":1053},"https://github.com/qkqpttgf/OneManager-php",[36],"OneManager-php"," 的忠实用户。这些年来，尽管有 alist 这种 UI 好看，多种网盘高度聚合的项目逐渐取代了 onemanager 的生态位，但 onemanager 支持文件分片上传、上传流量不经服务器的特点还是让我非常满意。前一阵子，glitch 暂停了针对项目自定义域名的支持，因此在我手贱地取消了项目原本绑定的域名后，迫切地需要寻找一个新的部署的平台，只不过 onemanager 项目现在列出的方案都不太让我满意，因此我就萌生出了在 vps 上自己部署的想法。",[1057,1058,1060],"h3",{"id":1059},"docker-镜像选用","Docker 镜像选用",[15,1062,1063,1064,1068,1069,1074,1075,1078,1079,1082,1083,1086,1087,1090],{},"vps 上自己部署 php 项目，最简单的方法是使用 Docker，",[1065,1066,1067],"del",{},"使用 Docker 就可以免去配置 nginx 或者同类产品的 php-fpm 配置","才怪。我打开 Docker 提供的 ",[32,1070,1073],{"href":1071,"rel":1072},"https://hub.docker.com/_/php",[36],"php 官方镜像","，最小的镜像是带",[64,1076,1077],{},"-cli","后缀的，这个镜像就不适合进行部署，php 内置的开发服务器是单线程的，当同时打开两个网页访问开发服务器的时候，其中一个网页就会卡住；以",[64,1080,1081],{},"-fpm","结尾的镜像变体很明显，仍然需要去 nginx 或同类产品的配置文件那边去配置 fpm，这给部署了好几次 php 项目的我带来的心理阴影；剩下一个就是",[64,1084,1085],{},"-apache","后缀、使用 apache server 提供 php 服务的镜像，体积虽然大了点，但好在操作简单，只需要将 php 文件放进 ",[64,1088,1089],{},"/var/www/html","，启用 php 的相关拓展，启用 apache 的相关功能即可。",[769,1092,1094],{"id":1093},"php-拓展","php 拓展",[15,1096,1097,1098,1101,1102,1105,1106,1109],{},"php 的拓展可以使用镜像自带的 ",[64,1099,1100],{},"docker-php-ext-install"," 和 ",[64,1103,1104],{},"docker-php-ext-enable"," 命令进行操作，此外还有一个 ",[64,1107,1108],{},"docker-php-ext-configure"," 命令可以配置相关的拓展，不过我并不是 php 开发者，不熟悉拓展有什么好配置的。",[15,1111,1112],{},"OneManager-php 没有依赖任何的 php 拓展，因此这个步骤可以直接跳过。",[769,1114,1116],{"id":1115},"apache-server-配置","Apache Server 配置",[15,1118,1119,1120,1123,1124,1123,1127,1123,1130,1123,1133,1123,1136,1123,1139,1141],{},"和 php 拓展一样，镜像内也提供了几个命令进行 Apache Server 的配置，分别为 ",[64,1121,1122],{},"a2disconf","、",[64,1125,1126],{},"a2dismod",[64,1128,1129],{},"a2dissite",[64,1131,1132],{},"a2enconf",[64,1134,1135],{},"a2enmod",[64,1137,1138],{},"a2ensite",[64,1140,1138],{},"。",[15,1143,1144,1145,1148],{},"OneManager-php 在部署的时候依赖于 Apache Server 的 rewrite 的模块，因此在 Dockerfile 中需要使用 ",[64,1146,1147],{},"a2enmod rewrite"," 开启 rewrite 支持。至于别的 Apache Server 配置，都可以通过项目中的 .htaccess 文件进行配置。",[769,1150,1152],{"id":1151},"htaccess-文件纠错",[1065,1153,1154],{},".htaccess 文件纠错",[15,1156,1157],{},[1065,1158,1159,1160,1163],{},"在 OneManager-php 仓库中，",[64,1161,1162],{},".htaccess"," 文件有一些小问题。",[58,1165,1169],{"className":1166,"code":1167,"language":1168,"meta":46,"style":46},"language-htaccess shiki shiki-themes one-light one-dark-pro","RewriteRule ^(.*) index.php?/$1 [L]\n","htaccess",[64,1170,1171],{"__ignoreMap":46},[67,1172,1173],{"class":69,"line":70},[67,1174,1167],{},[15,1176,1177],{},[1065,1178,1179,1180,1183,1184,1123,1187,1190],{},"这行配置原本是将访问的路径追加到 ",[64,1181,1182],{},"index.php?/"," 后面的意思，但 一旦路径中出现了 ",[64,1185,1186],{},"[",[64,1188,1189],{},"]"," 或者空格等字符时，会触发 Apache 自带的保护，因此我们将这行改成下面这个样子即可。",[58,1192,1194],{"className":1166,"code":1193,"language":1168,"meta":46,"style":46},"RewriteRule ^(.*) index.php [QSA,L]\n",[64,1195,1196],{"__ignoreMap":46},[67,1197,1198],{"class":69,"line":70},[67,1199,1193],{},[15,1201,1202,1203,1208],{},"原项目合并了",[32,1204,1207],{"href":1205,"rel":1206},"https://github.com/qkqpttgf/OneManager-php/pull/716",[36],"我的 PR","，因此这一过程不再需要。",[769,1210,1211],{"id":1211},"处理文件权限问题",[15,1213,1214],{},"OneManager-php 在运行过程中，会有针对配置文件的读写操作，此外还内置了一键更新的功能，因此会对路径内的文件进行读写，我们需要确保 php 在运行过程中有权限对这些文件进行读写。",[15,1216,1217,1218,1220,1221,1224],{},"可以直接将 ",[64,1219,1089],{}," 路径的所有权转给 ",[64,1222,1223],{},"www-data"," 用户。",[58,1226,1228],{"className":692,"code":1227,"language":694,"meta":46,"style":46},"chown -R www-data:www-data /var/www/html\n",[64,1229,1230],{"__ignoreMap":46},[67,1231,1232,1235,1238,1241],{"class":69,"line":70},[67,1233,1234],{"class":701},"chown",[67,1236,1237],{"class":321}," -R",[67,1239,1240],{"class":430}," www-data:www-data",[67,1242,1243],{"class":430}," /var/www/html\n",[769,1245,1247],{"id":1246},"最终的-dockerfile","最终的 Dockerfile",[58,1249,1253],{"className":1250,"code":1251,"language":1252,"meta":46,"style":46},"language-dockerfile shiki shiki-themes one-light one-dark-pro","FROM php:8-apache\nRUN a2enmod rewrite\nCOPY OneManager-php /var/www/html\nRUN chown -R www-data:www-data /var/www/html\n","dockerfile",[64,1254,1255,1260,1265,1270],{"__ignoreMap":46},[67,1256,1257],{"class":69,"line":70},[67,1258,1259],{},"FROM php:8-apache\n",[67,1261,1262],{"class":69,"line":76},[67,1263,1264],{},"RUN a2enmod rewrite\n",[67,1266,1267],{"class":69,"line":82},[67,1268,1269],{},"COPY OneManager-php /var/www/html\n",[67,1271,1272],{"class":69,"line":89},[67,1273,1274],{},"RUN chown -R www-data:www-data /var/www/html\n",[15,1276,1277],{},"其实一共就 4 行，还是挺简单的。",[205,1279,1280],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}",{"title":46,"searchDepth":76,"depth":76,"links":1282},[1283,1286,1287,1288,1289,1290],{"id":1037,"depth":76,"text":1037,"children":1284},[1285],{"id":1059,"depth":82,"text":1060},{"id":1093,"depth":76,"text":1094},{"id":1115,"depth":76,"text":1116},{"id":1151,"depth":76,"text":1154},{"id":1211,"depth":76,"text":1211},{"id":1246,"depth":76,"text":1247},{"title":1292,"date":1293,"path":1294,"tags":1295,"body":1297},"crontab 中简单的@语法糖","2024-02-08 17:21:31","/2024/02/08/extra-usage-for-crontab",[522,1296],"crontab",{"type":12,"value":1298,"toc":1491},[1299,1305,1318,1441,1444,1447,1488],[15,1300,1301,1302],{},"说来惭愧，其实我用了这么久的 Linux，一直没有学会编写 crontab 脚本。一行的开头写上五位莫名其妙的数字或星号，后面跟上需要执行的命令，看上去很 kiss，",[1065,1303,1304],{},"但我确实记不住，以至于我现在每次写 crontab 都是让 ChatGPT 来帮我写。",[15,1306,1307,1308,1311,1312,1317],{},"不过我最近查阅 Linux 下设置开机自启脚本的方案的时候，意外地看到 crontab 中居然可以用 ",[64,1309,1310],{},"@reboot command"," 的方式去写，这让我意识到 crontab 也是有一些简单的语法糖的。在查阅了 ",[32,1313,1316],{"href":1314,"rel":1315},"https://man.archlinux.org/man/crontab.5.en#EXTENSIONS",[36],"crontab 的 manual"," 后，我发现一共有下面这么几种 @ 写法的语法糖。这是在全网大部分的 crontab 中文教程中是没有的。",[1319,1320,1321,1337],"table",{},[1322,1323,1324],"thead",{},[1325,1326,1327,1331,1334],"tr",{},[1328,1329,1330],"th",{},"语法糖",[1328,1332,1333],{},"执行条件",[1328,1335,1336],{},"等效表达式",[1338,1339,1340,1353,1368,1381,1396,1411,1426],"tbody",{},[1325,1341,1342,1348,1351],{},[1343,1344,1345],"td",{},[64,1346,1347],{},"@reboot",[1343,1349,1350],{},"开机时候运行",[1343,1352],{},[1325,1354,1355,1360,1363],{},[1343,1356,1357],{},[64,1358,1359],{},"@yearly",[1343,1361,1362],{},"一年一次",[1343,1364,1365],{},[64,1366,1367],{},"0 0 1 1 *",[1325,1369,1370,1375,1377],{},[1343,1371,1372],{},[64,1373,1374],{},"@annually",[1343,1376,1362],{},[1343,1378,1379],{},[64,1380,1367],{},[1325,1382,1383,1388,1391],{},[1343,1384,1385],{},[64,1386,1387],{},"@monthly",[1343,1389,1390],{},"一月一次",[1343,1392,1393],{},[64,1394,1395],{},"0 0 1 * *",[1325,1397,1398,1403,1406],{},[1343,1399,1400],{},[64,1401,1402],{},"@weekly",[1343,1404,1405],{},"一周一次",[1343,1407,1408],{},[64,1409,1410],{},"0 0 * * 0",[1325,1412,1413,1418,1421],{},[1343,1414,1415],{},[64,1416,1417],{},"@daily",[1343,1419,1420],{},"一天一次",[1343,1422,1423],{},[64,1424,1425],{},"0 0 * * *",[1325,1427,1428,1433,1436],{},[1343,1429,1430],{},[64,1431,1432],{},"@hourly",[1343,1434,1435],{},"一小时一次",[1343,1437,1438],{},[64,1439,1440],{},"0 * * * *",[15,1442,1443],{},"这几个简单的语法糖可以满足大部分 crontab 的情况，免去了对使用者学习并记忆 crontab 的表达式的要求。",[15,1445,1446],{},"比如说，如果我希望我的系统在每次开机时都用 TG Bot 发送一条上线信息，那就是",[58,1448,1450],{"className":692,"code":1449,"language":694,"meta":46,"style":46},"@reboot curl -s -X POST https://api.telegram.org/bot{id}:{apikey}/sendMessage -d chat_id={uid} -d text=\"`date`\"\n",[64,1451,1452],{"__ignoreMap":46},[67,1453,1454,1456,1459,1462,1465,1468,1471,1474,1477,1479,1482,1485],{"class":69,"line":70},[67,1455,1347],{"class":701},[67,1457,1458],{"class":430}," curl",[67,1460,1461],{"class":321}," -s",[67,1463,1464],{"class":321}," -X",[67,1466,1467],{"class":430}," POST",[67,1469,1470],{"class":430}," https://api.telegram.org/bot{id}:{apikey}/sendMessage",[67,1472,1473],{"class":321}," -d",[67,1475,1476],{"class":430}," chat_id={uid}",[67,1478,1473],{"class":321},[67,1480,1481],{"class":430}," text=\"`",[67,1483,1484],{"class":701},"date",[67,1486,1487],{"class":430},"`\"\n",[205,1489,1490],{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":1492},[],{"title":1494,"date":1495,"path":1496,"tags":1497,"body":1501},"备份 umami 数据库，并使用 TG Bot 保存 dump 文件","2024-02-01 00:00:01","/2024/02/01/backup-umami-database-and-send-it-by-tg-bot",[1498,1499,1500],"umami","Shell Script","Bot",{"type":12,"value":1502,"toc":1841},[1503,1512,1520,1526,1529,1532,1687,1698,1701,1710,1713,1719,1728,1801,1808,1832,1838],[15,1504,1505,1506,1511],{},"前一阵子看到点墨的博客",[32,1507,1510],{"href":1508,"rel":1509},"https://blog.m-l.cc/2023/11/09/ding-shi-bei-fen-mysql-mariadb-shu-ju-ku-bing-shang-chuan-zhi-tgbot/",[36],"「定时备份mysql/mariadb数据库并上传至tgbot」","，我意识到个人站点的数据库 dump 使用 TG Bot 存放是一个非常合适的做法。个人站点的数据库体积本身就不大，TG Bot 又有官方提供的 api，非常适合自动化任务。我就寻思着给我的 umami 数据库也写个定时任务备份一下，也不至于之前做一次迁移数据全部爆炸的悲剧重演。",[15,1513,1514,1515,1519],{},"我的 umami 是",[32,1516,1518],{"href":1517},"/2022/11/08/free-umami-deploy-plan/","「使用 vercel+supabase 免费部署 umami」","部署出来的，数据库在 supabase 上，因此我们先打开 supabase 的 dashboard，获取到数据库的 url。",[15,1521,1522],{},[24,1523],{"alt":1524,"src":1525},"supabase 操作面板","https://static.031130.xyz/uploads/2024/08/12/65ba6aae157e6.webp",[15,1527,1528],{},"密码我自然是不记得了，不过好在 Firefox 的密码管理器帮我记住了，直接去设置里就能找到。即使密码忘了也不要紧，往下翻有重置密码的按钮。",[15,1530,1531],{},"随后就要开始编写我们的教本了，这是我的",[58,1533,1535],{"className":692,"code":1534,"language":694,"meta":46,"style":46},"#!/bin/bash\n\nDATABASE_URL=\"postgres://\"\nDATE=$(date '+%F')\n\nTG_BOT_TOKEN='1145141919:ABCDEFGHIJKLVMNOPQRSTUVWXYZabcdefgh'\nTG_CHAT_ID='9191415411'\n\npg_dump ${DATABASE_URL} > umami_dump_${DATE}.sql\ncurl -F document=@umami_dump_${DATE}.sql https://api.telegram.org/bot${TG_BOT_TOKEN}/sendDocument?chat_id=${TG_CHAT_ID}\nrm umami_dump_${DATE}.sql\n",[64,1536,1537,1543,1547,1558,1576,1580,1590,1600,1604,1634,1671],{"__ignoreMap":46},[67,1538,1539],{"class":69,"line":70},[67,1540,1542],{"class":1541},"sW2Sy","#!/bin/bash\n",[67,1544,1545],{"class":69,"line":76},[67,1546,86],{"emptyLinePlaceholder":85},[67,1548,1549,1552,1555],{"class":69,"line":82},[67,1550,1551],{"class":306},"DATABASE_URL",[67,1553,325],{"class":1554},"sknuh",[67,1556,1557],{"class":430},"\"postgres://\"\n",[67,1559,1560,1563,1565,1568,1570,1573],{"class":69,"line":89},[67,1561,1562],{"class":306},"DATE",[67,1564,325],{"class":1554},[67,1566,1567],{"class":302},"$(",[67,1569,1484],{"class":701},[67,1571,1572],{"class":430}," '+%F'",[67,1574,1575],{"class":302},")\n",[67,1577,1578],{"class":69,"line":95},[67,1579,86],{"emptyLinePlaceholder":85},[67,1581,1582,1585,1587],{"class":69,"line":3},[67,1583,1584],{"class":306},"TG_BOT_TOKEN",[67,1586,325],{"class":1554},[67,1588,1589],{"class":430},"'1145141919:ABCDEFGHIJKLVMNOPQRSTUVWXYZabcdefgh'\n",[67,1591,1592,1595,1597],{"class":69,"line":106},[67,1593,1594],{"class":306},"TG_CHAT_ID",[67,1596,325],{"class":1554},[67,1598,1599],{"class":430},"'9191415411'\n",[67,1601,1602],{"class":69,"line":112},[67,1603,86],{"emptyLinePlaceholder":85},[67,1605,1606,1609,1613,1615,1618,1621,1624,1627,1629,1631],{"class":69,"line":118},[67,1607,1608],{"class":701},"pg_dump",[67,1610,1612],{"class":1611},"sr1Ac"," ${",[67,1614,1551],{"class":306},[67,1616,1617],{"class":1611},"}",[67,1619,1620],{"class":302}," > ",[67,1622,1623],{"class":430},"umami_dump_",[67,1625,1626],{"class":1611},"${",[67,1628,1562],{"class":306},[67,1630,1617],{"class":1611},[67,1632,1633],{"class":430},".sql\n",[67,1635,1636,1638,1641,1644,1646,1648,1650,1653,1656,1658,1660,1662,1665,1667,1669],{"class":69,"line":124},[67,1637,702],{"class":701},[67,1639,1640],{"class":321}," -F",[67,1642,1643],{"class":430}," document=@umami_dump_",[67,1645,1626],{"class":1611},[67,1647,1562],{"class":306},[67,1649,1617],{"class":1611},[67,1651,1652],{"class":430},".sql",[67,1654,1655],{"class":430}," https://api.telegram.org/bot",[67,1657,1626],{"class":1611},[67,1659,1584],{"class":306},[67,1661,1617],{"class":1611},[67,1663,1664],{"class":430},"/sendDocument?chat_id=",[67,1666,1626],{"class":1611},[67,1668,1594],{"class":306},[67,1670,121],{"class":1611},[67,1672,1673,1676,1679,1681,1683,1685],{"class":69,"line":129},[67,1674,1675],{"class":701},"rm",[67,1677,1678],{"class":430}," umami_dump_",[67,1680,1626],{"class":1611},[67,1682,1562],{"class":306},[67,1684,1617],{"class":1611},[67,1686,1633],{"class":430},[15,1688,1689,1690,1693,1694,1697],{},"将这段代码保存为 ",[64,1691,1692],{},"umami_db_dumper.sh","，随后 ",[64,1695,1696],{},"chmod +x ./umami_db_dumper.sh"," 授予可执行权限。",[15,1699,1700],{},"可以先在命令行中执行命令试一下这段脚本是否正常工作",[58,1702,1704],{"className":692,"code":1703,"language":694,"meta":46,"style":46},"./umami_db_dumper.sh\n",[64,1705,1706],{"__ignoreMap":46},[67,1707,1708],{"class":69,"line":70},[67,1709,1703],{"class":701},[15,1711,1712],{},"这段代码在我本机正常工作，可惜在我的 Ubuntu VPS 上报错",[58,1714,1717],{"className":1715,"code":1716,"language":582},[580],"pg_dump: error: server version: 14.1; pg_dump version: 12.17 (Ubuntu 12.17-0ubuntu0.20.04.1)\npg_dump: error: aborting because of server version mismatch\n",[64,1718,1716],{"__ignoreMap":46},[15,1720,1721,1722,1727],{},"看上去是 VPS 上的 PostgreSQL 版本过低，Google 搜索一顿后，我在一篇",[32,1723,1726],{"href":1724,"rel":1725},"https://devopsworld.medium.com/upgrade-pg-dump-version-in-ubuntu-545d691d4695",[36],"「Upgrade pg_dump version in ubuntu | by Anushareddy」"," 文章中找到了方案，添加 PostgreSQL 官方提供的 apt 源将 VPS 上的 PostgreSQL 更新到新版即可解决。",[58,1729,1731],{"className":692,"code":1730,"language":694,"meta":46,"style":46},"wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -\necho \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list\napt update\napt install postgresql-client\n",[64,1732,1733,1761,1783,1791],{"__ignoreMap":46},[67,1734,1735,1738,1741,1744,1747,1750,1752,1755,1758],{"class":69,"line":70},[67,1736,1737],{"class":701},"wget",[67,1739,1740],{"class":321}," --quiet",[67,1742,1743],{"class":321}," -O",[67,1745,1746],{"class":430}," -",[67,1748,1749],{"class":430}," https://www.postgresql.org/media/keys/ACCC4CF8.asc",[67,1751,711],{"class":302},[67,1753,1754],{"class":701},"apt-key",[67,1756,1757],{"class":430}," add",[67,1759,1760],{"class":430}," -\n",[67,1762,1763,1766,1769,1772,1775,1778,1780],{"class":69,"line":76},[67,1764,1765],{"class":444},"echo",[67,1767,1768],{"class":430}," \"deb http://apt.postgresql.org/pub/repos/apt/ $(",[67,1770,1771],{"class":701},"lsb_release",[67,1773,1774],{"class":321}," -cs",[67,1776,1777],{"class":430},")-pgdg main\"",[67,1779,1620],{"class":302},[67,1781,1782],{"class":430},"/etc/apt/sources.list.d/pgdg.list\n",[67,1784,1785,1788],{"class":69,"line":82},[67,1786,1787],{"class":701},"apt",[67,1789,1790],{"class":430}," update\n",[67,1792,1793,1795,1798],{"class":69,"line":89},[67,1794,1787],{"class":701},[67,1796,1797],{"class":430}," install",[67,1799,1800],{"class":430}," postgresql-client\n",[15,1802,1803,1804,1807],{},"确保脚本正常工作后，使用 ",[64,1805,1806],{},"crontab -e"," 设置自动任务",[58,1809,1811],{"className":692,"code":1810,"language":694,"meta":46,"style":46},"0 2 * * * /root/umami_db_dumper.sh\n",[64,1812,1813],{"__ignoreMap":46},[67,1814,1815,1818,1821,1825,1827,1829],{"class":69,"line":70},[67,1816,1817],{"class":701},"0",[67,1819,1820],{"class":321}," 2",[67,1822,1824],{"class":1823},"s2QsP"," *",[67,1826,1824],{"class":1823},[67,1828,1824],{"class":1823},[67,1830,1831],{"class":430}," /root/umami_db_dumper.sh\n",[15,1833,1834],{},[24,1835],{"alt":1836,"src":1837},"数据库备份","https://static.031130.xyz/uploads/2024/08/12/65c79455b2e40.webp",[205,1839,1840],{},"html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sknuh, html code.shiki .sknuh{--shiki-default:#383A42;--shiki-dark:#56B6C2}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sr1Ac, html code.shiki .sr1Ac{--shiki-default:#E45649;--shiki-dark:#ABB2BF}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .s2QsP, html code.shiki .s2QsP{--shiki-default:#E45649;--shiki-dark:#E5C07B}",{"title":46,"searchDepth":76,"depth":76,"links":1842},[],{"title":1844,"date":1845,"path":1846,"tags":1847,"body":1848},"在 JavaScript 中，箭头函数中的 this 指针到底指向哪里？","2024-01-14 02:50:03","/2024/01/14/where-does-this-refer-in-arrow-function-in-js",[218],{"type":12,"value":1849,"toc":2272},[1850,1857,2166,2169,2176,2182,2193,2196,2199,2210,2216,2232,2239,2245,2248,2255,2262,2269],[15,1851,1852,1853,1856],{},"这学期期末复习的时候，学校里负责上 JavaScript 的老师给我们提出了一个问题。下面这段代码中，",[64,1854,1855],{},"a.u2()"," 在 ES Module 下执行会抛出 TypeError 的异常，在 CommonJS 下运行则会输出 undefined，而 B 这个类的 u2 函数则能够在对象实例化以后正常运行。",[58,1858,1862],{"className":1859,"code":1860,"language":1861,"meta":46,"style":46},"language-javascript shiki shiki-themes one-light one-dark-pro","const a = {\n    x: 3,\n    u1: function () {\n        console.log(this.x)\n    },\n    u2: () => {\n        console.log(this.x)\n    }\n}\n\nclass b {\n    x = 3\n\n    u1 = function () {\n        console.log(this.x)\n    }\n\n    u2 = () => {\n        console.log(this.x)\n    }\n}\n\na.u1()\n// 3\na.u2()\n// undefined\n\nnew b().u1()\n// 3\nnew b().u2()\n// 3\n","javascript",[64,1863,1864,1876,1890,1903,1928,1933,1948,1966,1971,1975,1979,1990,1999,2003,2013,2031,2035,2039,2052,2071,2076,2081,2086,2099,2105,2117,2123,2128,2143,2148,2161],{"__ignoreMap":46},[67,1865,1866,1868,1871,1873],{"class":69,"line":70},[67,1867,438],{"class":355},[67,1869,1870],{"class":441}," a",[67,1872,445],{"class":444},[67,1874,1875],{"class":302}," {\n",[67,1877,1878,1881,1885,1888],{"class":69,"line":76},[67,1879,1880],{"class":306},"    x",[67,1882,1884],{"class":1883},"st7oF",":",[67,1886,1887],{"class":321}," 3",[67,1889,456],{"class":302},[67,1891,1892,1895,1897,1900],{"class":69,"line":82},[67,1893,1894],{"class":701},"    u1",[67,1896,1884],{"class":1883},[67,1898,1899],{"class":355}," function",[67,1901,1902],{"class":302}," () {\n",[67,1904,1905,1909,1912,1915,1918,1921,1923,1926],{"class":69,"line":89},[67,1906,1908],{"class":1907},"s7GmK","        console",[67,1910,1911],{"class":302},".",[67,1913,1914],{"class":701},"log",[67,1916,1917],{"class":302},"(",[67,1919,1920],{"class":1823},"this",[67,1922,1911],{"class":302},[67,1924,1925],{"class":306},"x",[67,1927,1575],{"class":302},[67,1929,1930],{"class":69,"line":95},[67,1931,1932],{"class":302},"    },\n",[67,1934,1935,1938,1940,1943,1946],{"class":69,"line":3},[67,1936,1937],{"class":701},"    u2",[67,1939,1884],{"class":1883},[67,1941,1942],{"class":302}," () ",[67,1944,1945],{"class":355},"=>",[67,1947,1875],{"class":302},[67,1949,1950,1952,1954,1956,1958,1960,1962,1964],{"class":69,"line":106},[67,1951,1908],{"class":1907},[67,1953,1911],{"class":302},[67,1955,1914],{"class":701},[67,1957,1917],{"class":302},[67,1959,1920],{"class":1823},[67,1961,1911],{"class":302},[67,1963,1925],{"class":306},[67,1965,1575],{"class":302},[67,1967,1968],{"class":69,"line":112},[67,1969,1970],{"class":302},"    }\n",[67,1972,1973],{"class":69,"line":118},[67,1974,121],{"class":302},[67,1976,1977],{"class":69,"line":124},[67,1978,86],{"emptyLinePlaceholder":85},[67,1980,1981,1984,1988],{"class":69,"line":129},[67,1982,1983],{"class":355},"class",[67,1985,1987],{"class":1986},"sC09Y"," b",[67,1989,1875],{"class":302},[67,1991,1992,1994,1996],{"class":69,"line":135},[67,1993,1880],{"class":363},[67,1995,445],{"class":444},[67,1997,1998],{"class":321}," 3\n",[67,2000,2001],{"class":69,"line":140},[67,2002,86],{"emptyLinePlaceholder":85},[67,2004,2005,2007,2009,2011],{"class":69,"line":473},[67,2006,1894],{"class":701},[67,2008,445],{"class":444},[67,2010,1899],{"class":355},[67,2012,1902],{"class":302},[67,2014,2015,2017,2019,2021,2023,2025,2027,2029],{"class":69,"line":481},[67,2016,1908],{"class":1907},[67,2018,1911],{"class":302},[67,2020,1914],{"class":701},[67,2022,1917],{"class":302},[67,2024,1920],{"class":1823},[67,2026,1911],{"class":302},[67,2028,1925],{"class":306},[67,2030,1575],{"class":302},[67,2032,2033],{"class":69,"line":487},[67,2034,1970],{"class":302},[67,2036,2037],{"class":69,"line":493},[67,2038,86],{"emptyLinePlaceholder":85},[67,2040,2042,2044,2046,2048,2050],{"class":69,"line":2041},18,[67,2043,1937],{"class":701},[67,2045,445],{"class":444},[67,2047,1942],{"class":302},[67,2049,1945],{"class":355},[67,2051,1875],{"class":302},[67,2053,2055,2057,2059,2061,2063,2065,2067,2069],{"class":69,"line":2054},19,[67,2056,1908],{"class":1907},[67,2058,1911],{"class":302},[67,2060,1914],{"class":701},[67,2062,1917],{"class":302},[67,2064,1920],{"class":1823},[67,2066,1911],{"class":302},[67,2068,1925],{"class":306},[67,2070,1575],{"class":302},[67,2072,2074],{"class":69,"line":2073},20,[67,2075,1970],{"class":302},[67,2077,2079],{"class":69,"line":2078},21,[67,2080,121],{"class":302},[67,2082,2084],{"class":69,"line":2083},22,[67,2085,86],{"emptyLinePlaceholder":85},[67,2087,2089,2091,2093,2096],{"class":69,"line":2088},23,[67,2090,32],{"class":1907},[67,2092,1911],{"class":302},[67,2094,2095],{"class":701},"u1",[67,2097,2098],{"class":302},"()\n",[67,2100,2102],{"class":69,"line":2101},24,[67,2103,2104],{"class":1541},"// 3\n",[67,2106,2108,2110,2112,2115],{"class":69,"line":2107},25,[67,2109,32],{"class":1907},[67,2111,1911],{"class":302},[67,2113,2114],{"class":701},"u2",[67,2116,2098],{"class":302},[67,2118,2120],{"class":69,"line":2119},26,[67,2121,2122],{"class":1541},"// undefined\n",[67,2124,2126],{"class":69,"line":2125},27,[67,2127,86],{"emptyLinePlaceholder":85},[67,2129,2131,2134,2136,2139,2141],{"class":69,"line":2130},28,[67,2132,2133],{"class":355},"new",[67,2135,1987],{"class":701},[67,2137,2138],{"class":302},"().",[67,2140,2095],{"class":701},[67,2142,2098],{"class":302},[67,2144,2146],{"class":69,"line":2145},29,[67,2147,2104],{"class":1541},[67,2149,2151,2153,2155,2157,2159],{"class":69,"line":2150},30,[67,2152,2133],{"class":355},[67,2154,1987],{"class":701},[67,2156,2138],{"class":302},[67,2158,2114],{"class":701},[67,2160,2098],{"class":302},[67,2162,2164],{"class":69,"line":2163},31,[67,2165,2104],{"class":1541},[15,2167,2168],{},"这个问题涉及到 JavaScript 中箭头函数的作用域以及 this 指向。",[15,2170,2171,2172,2175],{},"**在 JS 中使用 function 关键字定义的普通函数中，this 指针遵循一个规则：谁调用指向谁。**即 ",[64,2173,2174],{},"obj.func()"," 这种调用情况下，func 方法内部的this指向obj；如果没有调用者，则严格模式下 this 为 undefined，非严格模式下 this 指向window(浏览器)或者global(node环境)。",[15,2177,2178,2179],{},"而箭头函数比较特殊，",[616,2180,2181],{},"箭头函数的 this 在定义时就被绑定，绑定的是定义时所在作用域中的 this。",[15,2183,2184,2185,2188,2189,2192],{},"在老师给的示例代码中，第一行定义了 a 这个对象字面量，而",[616,2186,2187],{},"定义对象字面量不会创建新的作用域","，因此 a 中定义的 u2 的 this 指向的是全局对象。因此在 Es Module 默认启用 strict mode 的情况下，全局对象的 this 指向 undefined，进而导致 a 的 u2 内 this 也指向 undefined，this.x 就抛了 TypeError；而在 ",[616,2190,2191],{},"CommonJS 未启用 strict mode 的情况下，全局对象的 this 指向全局对象","，因而 u2 内的 this 也指向全局对象，因此 this 存在，this.x 就不会抛 TypeError，只会报 undefined。",[15,2194,2195],{},"而 B 类在对象初始化阶段拥有一个新的作用域，因此箭头函数的 this 能够正确指向 B 被实例化出来的对象，因此也就能够正确读取到 this.x 的值。",[15,2197,2198],{},"理论上来说，我们可以给全局对象也赋一个不一样的 x 值，这样 a.u2() 就能够读取到全局对象中的 x 值，验证我们的结论。",[15,2200,2201,2202,2205,2206,2209],{},"在浏览器中，可以在代码的头部加一行 ",[64,2203,2204],{},"var x = 10"," 或者 ",[64,2207,2208],{},"window.x = 10","，可以看到a.u2() 顺利的输出了 10，验证了我的结论。",[15,2211,2212],{},[24,2213],{"alt":2214,"src":2215},"浏览器控制台调试","https://static.031130.xyz/uploads/2024/08/12/65a2e1d093b78.webp",[15,2217,2218,2219,2205,2221,2224,2225,2227,2228,2231],{},"但在 Node.js 中，直接使用 ",[64,2220,2204],{},[64,2222,2223],{},"global.x = 10"," 并不能达到我们想要的效果。因为Node.js 中的每个 CommonJS 模块都有其自己的模块作用域，即模块的顶层作用域不是全局作用域。在模块内部，",[64,2226,1920],{}," 关键字不是指向 ",[64,2229,2230],{},"global"," 对象，而是指向模块的导出对象。这是为了确保模块内部的作用域隔离和模块的封装性。",[15,2233,2234,2235,2238],{},"那么我们可以通过为模块的导出对象添加一个 x 属性来验证我们的结论，我们可以使用 ",[64,2236,2237],{},"exports.x = 10"," 来为模块的顶层作用域添加一个值为 10 的 x 属性。",[15,2240,2241],{},[24,2242],{"alt":2243,"src":2244},"nodejs 环境运行","https://static.031130.xyz/uploads/2024/08/12/65a2e379ba89e.webp",[769,2246,2247],{"id":2247},"参考文章",[15,2249,2250],{},[32,2251,2254],{"href":2252,"rel":2253},"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions",[36],"箭头函数表达式 - JavaScript | MDN",[15,2256,2257],{},[32,2258,2261],{"href":2259,"rel":2260},"https://segmentfault.com/q/1010000022948115",[36],"ES6箭头函数作用域的问题",[15,2263,2264],{},[32,2265,2268],{"href":2266,"rel":2267},"https://www.zhihu.com/tardis/zm/art/57204184",[36],"ES6箭头函数的this指向详解",[205,2270,2271],{},"html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .sNmU0, html code.shiki .sNmU0{--shiki-default:#986801;--shiki-dark:#E5C07B}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .st7oF, html code.shiki .st7oF{--shiki-default:#0184BC;--shiki-dark:#ABB2BF}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .s7GmK, html code.shiki .s7GmK{--shiki-default:#383A42;--shiki-dark:#E5C07B}html pre.shiki code .s2QsP, html code.shiki .s2QsP{--shiki-default:#E45649;--shiki-dark:#E5C07B}html pre.shiki code .sC09Y, html code.shiki .sC09Y{--shiki-default:#C18401;--shiki-dark:#E5C07B}html pre.shiki code .sz0mV, html code.shiki .sz0mV{--shiki-default:#383A42;--shiki-dark:#E06C75}html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":2273},[2274],{"id":2247,"depth":76,"text":2247},{"title":2276,"date":2277,"path":2278,"tags":2279,"body":2281},"结合 Vue.js 与 php 完成的 web 期末大作业，讲讲前后端分离站点开发与部署中可能遇到的 CORS 跨域问题","2024-01-10 23:55:36","/2024/01/10/cors-when-using-splited-frontend-and-backend",[216,1027,758,2280,217],"笔记",{"type":12,"value":2282,"toc":2720},[2283,2291,2294,2298,2301,2308,2313,2324,2337,2340,2351,2354,2366,2375,2384,2390,2395,2398,2407,2410,2413,2426,2429,2432,2435,2438,2444,2486,2489,2691,2698,2705,2708,2717],[15,2284,2285,2286,2290],{},"在",[32,2287,2289],{"href":2288},"/2023/12/27/php-and-vuejs-project-deploy-on-caddy/","上一篇博客","中，我讲到了 web 期末大作业的上云部署。整个项目是使用 Vue.js 作为前端，php 作为后端，mysql 作为数据库实现的。",[15,2292,2293],{},"在使用 Vue.js 开发前端界面时，我选择了使用 vite 脚手架帮助开发，这意味着我的作品将使用前后端分离的架构实现。因此在开发部署过程中均遇到了跨域的问题，故写下这篇博客记录下解决方案。",[769,2295,2297],{"id":2296},"基于后端返回对应-http-响应头的解决方案","基于后端返回对应 http 响应头的解决方案",[1057,2299,2300],{"id":2300},"开发阶段",[15,2302,2303,2304,2307],{},"在我完成前后端的开发，并且经过 Apifox 的 mock 测试后，第一次在浏览器尝试前后端对接，遇到了 ",[64,2305,2306],{},"CORS Missing Allow Origin"," 的报错。",[15,2309,2310],{},[24,2311],{"alt":2306,"src":2312},"https://static.031130.xyz/uploads/2024/08/12/659ec607c69af.webp",[15,2314,2315,2316,2319,2320,2323],{},"vite 启动的 dev 开发服务器使用的域是 ",[64,2317,2318],{},"http://localhost:5173"," ，而 php 后端我指定的是 ",[64,2321,2322],{},"http://127.0.0.1:8080"," ，前后端并不运行在一个域下，前端使用 Axios(AJAX) 向后端发送请求获取资源输入 CORS 跨域资源共享的范畴。",[15,2325,2326,2327,2332,2333,2336],{},"关于跨域资源共享 CORS 的相关内容，",[32,2328,2331],{"href":2329,"rel":2330},"https://www.ruanyifeng.com/blog/2016/04/cors.html",[36],"阮一峰老师在 2016 年就已经在他的博客中有过解释","，看了下也是全网中文内容中解释得比较通俗易懂的，因此本文在这方面不过多做解释。错误的提示信息是 Missing Allow Origin，结合阮一峰老师的博文，我们应该在后端向前端发送的 http 响应头中添加 ",[64,2334,2335],{},"Access-Control-Allow-Origin"," 这一字段。",[15,2338,2339],{},"在一般的前后端分离项目（不涉及 cookie 等 Credentials 属性）中，我们可以将这一字段设置为 * 通配符，默认允许所有的域向自己发起跨域资源请求。php 可以通过下面这行代码很方便地进行设置:",[58,2341,2345],{"className":2342,"code":2343,"language":2344,"meta":46,"style":46},"language-php shiki shiki-themes one-light one-dark-pro","header('Access-Control-Allow-Origin: *');\n","php",[64,2346,2347],{"__ignoreMap":46},[67,2348,2349],{"class":69,"line":70},[67,2350,2343],{},[15,2352,2353],{},"但在用户的注册登录方面，我使用了 session 作为用户的登录凭据。阮一峰老师关于 CORS 的博文中有这样一句话:",[251,2355,2356],{},[15,2357,2358,2359,2361,2362,2365],{},"需要注意的是，如果要发送Cookie，",[64,2360,2335],{},"就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的",[64,2363,2364],{},"document.cookie","也无法读取服务器域名下的Cookie。",[15,2367,2368,2369,2371,2372,2374],{},"因此，我们必须明确指定 ",[64,2370,2335],{}," 字段为前端所使用的域，写上 ",[64,2373,2318],{}," 才行。",[58,2376,2378],{"className":2342,"code":2377,"language":2344,"meta":46,"style":46},"header('Access-Control-Allow-Origin: http://localhost:5173');\n",[64,2379,2380],{"__ignoreMap":46},[67,2381,2382],{"class":69,"line":70},[67,2383,2377],{},[15,2385,2386,2387],{},"再次刷新网页，获得了新的错误 ",[64,2388,2389],{},"CORS Missing Allow Credentials",[15,2391,2392],{},[24,2393],{"alt":2389,"src":2394},"https://static.031130.xyz/uploads/2024/08/12/659ec95acc0bc.webp",[15,2396,2397],{},"这个问题处理起来也简单",[58,2399,2401],{"className":2342,"code":2400,"language":2344,"meta":46,"style":46},"header('Access-Control-Allow-Credentials: true');\n",[64,2402,2403],{"__ignoreMap":46},[67,2404,2405],{"class":69,"line":70},[67,2406,2400],{},[15,2408,2409],{},"再次运行网页，跨域问题成功解决。",[1057,2411,2412],{"id":2412},"部署阶段",[15,2414,2415,2416,2418,2419,2422,2423,2425],{},"顺着这个思路进行下去，我们在部署阶段解决跨域问题需要做的事情很简单。提前将前端部署起来，将前端的域写到后端返回给前端的 http 相应头中即可。需要注意的是，",[64,2417,2335],{}," 字段仅允许填写一个值，如果需要同时允许来自多个不同域的跨域资源共享，后端部分需要根据前端发来的请求头中的 ",[64,2420,2421],{},"Origin"," 字段相应地设置响应头中的 ",[64,2424,2335],{}," 。当然，nginx 等先进的 static server 也支持劫持 http 请求，添加相关的 Access-Control 语句，也可以在这一层解决这个问题。",[769,2427,2428],{"id":2428},"直接规避跨域的方案",[15,2430,2431],{},"上面通过后端返回带有 Access-Control 语句相应头的解决方案确实可以解决问题，却显得不够优雅。开发和部署阶段都要手动的去指定前端的域来允许跨域资源共享，这一点过于麻烦了，因此引出了下面的解决方案。",[1057,2433,2300],{"id":2434},"开发阶段-1",[15,2436,2437],{},"在 vite（或者其他同类开发服务器）的帮助下，我们可以使用前端的开发服务器去反向代理后端服务，也就是让前端的请求打到前端服务器上，由前端服务器去返回后端服务器返回的结果。",[15,2439,228,2440,2443],{},[64,2441,2442],{},"vite.config.ts"," 配置文件下，我将原本的",[58,2445,2449],{"className":2446,"code":2447,"language":2448,"meta":46,"style":46},"language-typescript shiki shiki-themes one-light one-dark-pro","export default defineConfig({\n  plugins: [vue()],\n})\n","typescript",[64,2450,2451,2466,2481],{"__ignoreMap":46},[67,2452,2453,2456,2460,2463],{"class":69,"line":70},[67,2454,2455],{"class":355},"export",[67,2457,2459],{"class":2458},"sq3v1"," default",[67,2461,2462],{"class":701}," defineConfig",[67,2464,2465],{"class":302},"({\n",[67,2467,2468,2471,2473,2476,2478],{"class":69,"line":76},[67,2469,2470],{"class":306},"  plugins",[67,2472,1884],{"class":1883},[67,2474,2475],{"class":302}," [",[67,2477,295],{"class":701},[67,2479,2480],{"class":302},"()],\n",[67,2482,2483],{"class":69,"line":82},[67,2484,2485],{"class":302},"})\n",[15,2487,2488],{},"换成了",[58,2490,2492],{"className":2446,"code":2491,"language":2448,"meta":46,"style":46},"export default () => {\n  process.env = { ...process.env, ...loadEnv(process.cwd(),'') };\n\n  const config = {\n    plugins: [vue()],\n    server: {\n      proxy: {\n        '/api': {\n          target: http://127.0.0.1:8080,\n          changeOrigin: true,\n          secure: false,\n        }\n      }\n    }\n  }\n  return defineConfig(config)\n};\n",[64,2493,2494,2506,2557,2561,2573,2586,2595,2604,2613,2628,2641,2653,2658,2663,2667,2672,2686],{"__ignoreMap":46},[67,2495,2496,2498,2500,2502,2504],{"class":69,"line":70},[67,2497,2455],{"class":355},[67,2499,2459],{"class":2458},[67,2501,1942],{"class":302},[67,2503,1945],{"class":355},[67,2505,1875],{"class":302},[67,2507,2508,2511,2513,2516,2518,2521,2524,2527,2529,2531,2534,2536,2539,2541,2543,2545,2548,2551,2554],{"class":69,"line":76},[67,2509,2510],{"class":1907},"  process",[67,2512,1911],{"class":302},[67,2514,2515],{"class":306},"env",[67,2517,445],{"class":444},[67,2519,2520],{"class":302}," { ",[67,2522,2523],{"class":1883},"...",[67,2525,2526],{"class":1907},"process",[67,2528,1911],{"class":302},[67,2530,2515],{"class":306},[67,2532,2533],{"class":302},", ",[67,2535,2523],{"class":1883},[67,2537,2538],{"class":701},"loadEnv",[67,2540,1917],{"class":302},[67,2542,2526],{"class":1907},[67,2544,1911],{"class":302},[67,2546,2547],{"class":701},"cwd",[67,2549,2550],{"class":302},"(),",[67,2552,2553],{"class":430},"''",[67,2555,2556],{"class":302},") };\n",[67,2558,2559],{"class":69,"line":82},[67,2560,86],{"emptyLinePlaceholder":85},[67,2562,2563,2566,2569,2571],{"class":69,"line":89},[67,2564,2565],{"class":355},"  const",[67,2567,2568],{"class":441}," config",[67,2570,445],{"class":444},[67,2572,1875],{"class":302},[67,2574,2575,2578,2580,2582,2584],{"class":69,"line":95},[67,2576,2577],{"class":306},"    plugins",[67,2579,1884],{"class":1883},[67,2581,2475],{"class":302},[67,2583,295],{"class":701},[67,2585,2480],{"class":302},[67,2587,2588,2591,2593],{"class":69,"line":3},[67,2589,2590],{"class":306},"    server",[67,2592,1884],{"class":1883},[67,2594,1875],{"class":302},[67,2596,2597,2600,2602],{"class":69,"line":106},[67,2598,2599],{"class":306},"      proxy",[67,2601,1884],{"class":1883},[67,2603,1875],{"class":302},[67,2605,2606,2609,2611],{"class":69,"line":112},[67,2607,2608],{"class":430},"        '/api'",[67,2610,1884],{"class":1883},[67,2612,1875],{"class":302},[67,2614,2615,2618,2620,2623,2625],{"class":69,"line":118},[67,2616,2617],{"class":306},"          target",[67,2619,1884],{"class":1883},[67,2621,2622],{"class":306}," http",[67,2624,1884],{"class":302},[67,2626,2627],{"class":1541},"//127.0.0.1:8080,\n",[67,2629,2630,2633,2636,2639],{"class":69,"line":124},[67,2631,2632],{"class":306},"          changeOrigin",[67,2634,2635],{"class":302},": ",[67,2637,2638],{"class":321},"true",[67,2640,456],{"class":302},[67,2642,2643,2646,2648,2651],{"class":69,"line":129},[67,2644,2645],{"class":306},"          secure",[67,2647,1884],{"class":1883},[67,2649,2650],{"class":321}," false",[67,2652,456],{"class":302},[67,2654,2655],{"class":69,"line":135},[67,2656,2657],{"class":302},"        }\n",[67,2659,2660],{"class":69,"line":140},[67,2661,2662],{"class":302},"      }\n",[67,2664,2665],{"class":69,"line":473},[67,2666,1970],{"class":302},[67,2668,2669],{"class":69,"line":481},[67,2670,2671],{"class":302},"  }\n",[67,2673,2674,2677,2679,2681,2684],{"class":69,"line":487},[67,2675,2676],{"class":355},"  return",[67,2678,2462],{"class":701},[67,2680,1917],{"class":302},[67,2682,2683],{"class":306},"config",[67,2685,1575],{"class":302},[67,2687,2688],{"class":69,"line":493},[67,2689,2690],{"class":302},"};\n",[15,2692,2693,2694,2697],{},"同时将 Axios create 时的 ",[64,2695,2696],{},"baseURL"," 参数去除。",[15,2699,2700,2701,2704],{},"这样一套组合拳下来，将所有打向 ",[64,2702,2703],{},"/api*"," 的请求和响应通过前端的开发服务器作为中介做了中转，让浏览器以为并没有跨域（事实上也没有跨域），从而解决了相关的问题。",[1057,2706,2412],{"id":2707},"部署阶段-1",[15,2709,2710,2711,2716],{},"在开发阶段，我们通过 vite 的开发服务器做反向代理规避了跨域请求，但在部署阶段就用不了了。由于 vite 服务器的性能太弱，一般情况下我们是不会在生产环境中使用 vite 作为正式的服务器的，而是使用 vite build 出网站的静态网页资源，通过 nginx 等 static server 去向用户提供前端网页。而通过 vite build 出来的静态网页资源本身是不具备反向代理的能力的，这意味着没法在前端侧规避跨域问题。此时，我们应该配置 nginx 规避跨域问题。我一向不怎么使用 nginx，使用的是它的平替品 caddy，因此 nginx 的配置文件需要大家自行搜索，",[32,2712,2715],{"href":2713,"rel":2714},"https://zhul.in/2023/12/27/php-and-vuejs-project-deploy-on-caddy/#Caddy-%E9%85%8D%E7%BD%AE",[36],"我的 caddyfile 在上一篇博客中已经给出","，仅供参考。",[205,2718,2719],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .sq3v1, html code.shiki .sq3v1{--shiki-default:#E45649;--shiki-dark:#C678DD}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .st7oF, html code.shiki .st7oF{--shiki-default:#0184BC;--shiki-dark:#ABB2BF}html pre.shiki code .s7GmK, html code.shiki .s7GmK{--shiki-default:#383A42;--shiki-dark:#E5C07B}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sNmU0, html code.shiki .sNmU0{--shiki-default:#986801;--shiki-dark:#E5C07B}html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}",{"title":46,"searchDepth":76,"depth":76,"links":2721},[2722,2726],{"id":2296,"depth":76,"text":2297,"children":2723},[2724,2725],{"id":2300,"depth":82,"text":2300},{"id":2412,"depth":82,"text":2412},{"id":2428,"depth":76,"text":2428,"children":2727},[2728,2729],{"id":2434,"depth":82,"text":2300},{"id":2707,"depth":82,"text":2412},{"title":2731,"date":2732,"path":2733,"tags":2734,"body":2736},"vuejs、php、caddy 与 docker —— web 期末大作业上云部署","2023-12-27 22:09:00","/2023/12/27/php-and-vuejs-project-deploy-on-caddy",[1027,2735,216,758,1030,217],"Caddy",{"type":12,"value":2737,"toc":3037},[2738,2755,2758,2767,2770,2798,2806,2820,2827,2890,2904,2908,2911,2918,2924,2927,2930,2937,2963,2966,2969,2980,2984,2987,2993,3016,3020,3027,3034],[251,2739,2740,2743,2749,2752],{},[15,2741,2742],{},"这学期修了一门叫《用HTML5 和 PHP编写JavaScript，jQuery 和 AJAX脚本》的 web 课（对，听起来很奇怪的名字）。期末大作业是写一个影评系统，前端允许使用框架，后端仅允许使用 php，具体的作业要求如下",[15,2744,2745],{},[24,2746],{"alt":2747,"src":2748},"作业要求","https://static.031130.xyz/uploads/2024/08/12/658c4c3128ae4.webp",[15,2750,2751],{},"（源码会在验收结束以后开源）",[15,2753,2754],{},"大作业写了得要有三个礼拜，工作时长加起来得有 30 个小时，想着验收之前上线一段时间积累一些评论数据，验收的时候也会更加顺利一些，于是就开始尝试在服务器上部署。部署的过程还是比较复杂的，所以写下这篇博客记录一下。",[769,2756,2757],{"id":2757},"后端部分",[15,2759,2760,2761,2766],{},"早前有",[32,2762,2765],{"href":2763,"rel":2764},"https://zhul.in/2021/10/21/picuploader-on-archlinux-with-caddy/",[36],"《PicUploader使用系列（一）——在Archlinux上使用Caddy部署PicUploader》","的经验，便觉得使用 Caddy + php-fpm 部署的方式多少有点麻烦了，这次便尝试了使用 Docker 部署、Caddy 反代的方式。",[15,2768,2769],{},"Dockerfile 如下:",[58,2771,2773],{"className":1250,"code":2772,"language":1252,"meta":46,"style":46},"FROM php:8-apache\nRUN docker-php-ext-install mysqli\nRUN a2enmod rewrite\nCOPY . /var/www/html\nEXPOSE 80\n",[64,2774,2775,2779,2784,2788,2793],{"__ignoreMap":46},[67,2776,2777],{"class":69,"line":70},[67,2778,1259],{},[67,2780,2781],{"class":69,"line":76},[67,2782,2783],{},"RUN docker-php-ext-install mysqli\n",[67,2785,2786],{"class":69,"line":82},[67,2787,1264],{},[67,2789,2790],{"class":69,"line":89},[67,2791,2792],{},"COPY . /var/www/html\n",[67,2794,2795],{"class":69,"line":95},[67,2796,2797],{},"EXPOSE 80\n",[15,2799,2800,2801,2805],{},"在后端的根目录下有一个 .htaccess 文件，将所有的请求都交给 index.php 来处理，这样就可以根据我的",[32,2802,2289],{"href":2803,"rel":2804},"https://zhul.in/2023/12/12/php-simple-rest-api/",[36],"中所提到的方式去构建不使用任何 php 框架实现的简易 router 效果",[58,2807,2809],{"className":1166,"code":2808,"language":1168,"meta":46,"style":46},"RewriteEngine On\nRewriteRule ^(.*) index.php [QSA,L]\n",[64,2810,2811,2816],{"__ignoreMap":46},[67,2812,2813],{"class":69,"line":70},[67,2814,2815],{},"RewriteEngine On\n",[67,2817,2818],{"class":69,"line":76},[67,2819,1193],{},[15,2821,2822,2823,2826],{},"构建 Docker 镜像时使用 ",[64,2824,2825],{},"docker build . -t mrs-php"," 命令，运行 docker 容器时使用命令",[58,2828,2830],{"className":692,"code":2829,"language":694,"meta":46,"style":46},"docker run -d \\\n    -p 7788:80 \\\n    --name mrs-php \\\n    -v /path/to/uploads:/var/www/html/uploads \\\n    --restart unless-stopped \\\n    mrs-php\n",[64,2831,2832,2845,2855,2865,2875,2885],{"__ignoreMap":46},[67,2833,2834,2837,2840,2842],{"class":69,"line":70},[67,2835,2836],{"class":701},"docker",[67,2838,2839],{"class":430}," run",[67,2841,1473],{"class":321},[67,2843,2844],{"class":444}," \\\n",[67,2846,2847,2850,2853],{"class":69,"line":76},[67,2848,2849],{"class":321},"    -p",[67,2851,2852],{"class":430}," 7788:80",[67,2854,2844],{"class":444},[67,2856,2857,2860,2863],{"class":69,"line":82},[67,2858,2859],{"class":321},"    --name",[67,2861,2862],{"class":430}," mrs-php",[67,2864,2844],{"class":444},[67,2866,2867,2870,2873],{"class":69,"line":89},[67,2868,2869],{"class":321},"    -v",[67,2871,2872],{"class":430}," /path/to/uploads:/var/www/html/uploads",[67,2874,2844],{"class":444},[67,2876,2877,2880,2883],{"class":69,"line":95},[67,2878,2879],{"class":321},"    --restart",[67,2881,2882],{"class":430}," unless-stopped",[67,2884,2844],{"class":444},[67,2886,2887],{"class":69,"line":3},[67,2888,2889],{"class":430},"    mrs-php\n",[15,2891,2892,2893,1101,2896,2899,2900,2903],{},"这样，后端就在 7788 端口上开起来了，后续 Caddy 只要将打到 ",[64,2894,2895],{},"/api/*",[64,2897,2898],{},"/uploads/*"," 的请求转发到 7788 端口即可，避免了使用 php-fpm 时需要的配置。",[64,2901,2902],{},"uploads"," 目录是用来存放图片的，我将这个路径挂在在宿主机的目录下，方便备份导入等操作。",[1057,2905,2907],{"id":2906},"mysql-连接时的小插曲","mysql 连接时的小插曲",[15,2909,2910],{},"需要注意的是，在 Docker 容器中运行的 php 如果想要访问宿主机上的 mysql，需要注意修改 mysql 服务器的 ip 地址，并允许 mysql 接收来自非本机的请求。",[15,2912,2913,2914,2917],{},"在宿主机中运行 ",[64,2915,2916],{},"ip -br a"," 命令可以看到 docker 所采用的虚拟网卡的 ip 地址",[58,2919,2922],{"className":2920,"code":2921,"language":582},[580],"docker0          UP             172.17.0.1/16 fe80::42:eff:febf:b26c/64\n",[64,2923,2921],{"__ignoreMap":46},[15,2925,2926],{},"我这边得到的 ip 地址是 172.17.0.1，所以在 php 那边访问的数据库 ip 地址就应该是 172.17.0.1，而非 localhost 或者 127.0.0.1",[15,2928,2929],{},"此外，需要允许宿主机的 mysql 接收来自 Docker 容器的请求",[15,2931,2932,2933,2936],{},"使用 ",[64,2934,2935],{},"docker network inspect bridge"," 命令可以查到 docker 容器的 ip 地址，接着需要去允许来自这个 ip 的请求。建议去网上自行搜索，因为 mysql 语句我自己也不熟悉。我使用的 mysql 版本是 8，语句似乎和以前的版本不兼容？我使用下面三个命令轮着输就好了（有时候报错，有时侯又不报错），有大佬懂的话评论区讲讲。",[58,2938,2942],{"className":2939,"code":2940,"language":2941,"meta":46,"style":46},"language-mysql shiki shiki-themes one-light one-dark-pro","use mysql;\nGRANT ALL ON *.* TO 'root'@'%';\nupdate user set host='%' where user='root';\nGRANT ALL ON *.* TO 'root'@'%';\n","mysql",[64,2943,2944,2949,2954,2959],{"__ignoreMap":46},[67,2945,2946],{"class":69,"line":70},[67,2947,2948],{},"use mysql;\n",[67,2950,2951],{"class":69,"line":76},[67,2952,2953],{},"GRANT ALL ON *.* TO 'root'@'%';\n",[67,2955,2956],{"class":69,"line":82},[67,2957,2958],{},"update user set host='%' where user='root';\n",[67,2960,2961],{"class":69,"line":89},[67,2962,2953],{},[769,2964,2965],{"id":2965},"前端部分",[15,2967,2968],{},"前端部分部署起来没什么难度",[15,2970,2971,2972,2975,2976,2979],{},"我使用的是 vite 开发的 vuejs 项目，直接使用 ",[64,2973,2974],{},"pnpm build"," 构建出静态文件，然后放入了 ",[64,2977,2978],{},"/var/www/mrs"," 目录，这部分没什么可说的",[769,2981,2983],{"id":2982},"caddy-配置","Caddy 配置",[15,2985,2986],{},"Caddy 配置如下",[58,2988,2991],{"className":2989,"code":2990,"language":582},[580],"example.com {\n    handle /api/* {\n        reverse_proxy localhost:7788\n    }\n\n    handle /uploads/* {\n        reverse_proxy localhost:7788\n    }\n\n    handle /* {\n        root * /var/www/mrs\n        file_server\n        try_files {path} /\n    }\n}\n",[64,2992,2990],{"__ignoreMap":46},[15,2994,2995,2996,1101,2998,3000,3001,3004,3005,3008,3009,3012,3013,3015],{},"将打到 ",[64,2997,2895],{},[64,2999,2898],{}," 都交给 7788 端口的后端进行处理，前端部分要使用 ",[64,3002,3003],{},"try_files"," 将请求都指向 ",[64,3006,3007],{},"/"," 或 ",[64,3010,3011],{},"/index.html"," 交由 vue-router 处理，否则 caddy 就找不到对应的文件了。这里我尝试过使用 route 关键词代替 handle，但 ",[64,3014,3003],{}," 的功能没有生效，这两者的区别官方文档中有提到，但我没看懂，等我以后看看有没有机会去折腾了。",[769,3017,3019],{"id":3018},"参考","参考:",[15,3021,3022],{},[32,3023,3026],{"href":3024,"rel":3025},"https://homeboyc.cn/blog/%E4%BD%BF%E7%94%A8caddy%E9%85%8D%E7%BD%AE%E5%90%8C%E4%B8%80%E5%9F%9F%E5%90%8D%E4%B8%8B%E7%9A%84%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB/",[36],"使用Caddy配置同一域名下的前后分离",[15,3028,3029],{},[32,3030,3033],{"href":3031,"rel":3032},"https://blog.lyh543.cn/notes/linux/caddy.html",[36],"Caddy 2",[205,3035,3036],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}",{"title":46,"searchDepth":76,"depth":76,"links":3038},[3039,3042,3043,3044],{"id":2757,"depth":76,"text":2757,"children":3040},[3041],{"id":2906,"depth":82,"text":2907},{"id":2965,"depth":76,"text":2965},{"id":2982,"depth":76,"text":2983},{"id":3018,"depth":76,"text":3019},127,1761739880443]