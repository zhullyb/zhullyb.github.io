[{"data":1,"prerenderedAt":2908},["ShallowReactive",2],{"randomIndex/archives/page/5/":3,"index-page-5":4,"posts-nums-total":2907},23,[5,211,488,722,992,1261,1463,1787,2187,2592],{"title":6,"date":7,"path":8,"tags":9,"body":11},"使用 Python 生成甘特图(Gantt Chart)","2024-04-24 12:02:58","/2024/04/24/generate-gantt-chart-with-python",[10],"Python",{"type":12,"value":13,"toc":209},"minimark",[14,18,21,28,39,42,48,51,54,57,145,150,152,200,205],[15,16,17],"p",{},"在写操作系统的作业的时候有几道题给出了几个进程的相关信息，要求我们画出几种简单调度的甘特图。操作系统的作业一直是电子版，上传 pdf 即可的。我觉得手画甘特图拍照嵌入 pdf 中不太优雅，过于掉价，因此就想直接生成甘特图嵌入。",[15,19,20],{},"在谷歌搜寻了一番，我发现现在的甘特图生成网站都太现代化了，根本不是操作系统课上教的样子了。",[15,22,23],{},[24,25],"img",{"alt":26,"src":27},"现代化的甘特图","https://static.031130.xyz/uploads/2024/08/12/662888bd5a0af.webp",[15,29,30,31,38],{},"所幸我找到了 ",[32,33,37],"a",{"href":34,"rel":35},"https://github.com/gao-keyong/matplotlib-gantt/",[36],"nofollow","gao-keyong/matplotlib-gantt","，虽然只有两个 star（没事，加上我就 3 stars 了），但确实能用，README 中的样例也是我期望的样子。",[15,40,41],{},"项目中自带了一个 jupyter 的示例，算得上是非常简单易上手的了，依赖方面只要装好 matplotlib 就可以使用，不存在依赖地狱。尽管是三年前的项目，在我本机的 Python 3.11 上仍然能够正常运行。",[15,43,44],{},[24,45],{"alt":46,"src":47},"","https://static.031130.xyz/uploads/2024/08/12/66288ba6414d4.webp",[15,49,50],{},"tuple 中的第一个数字表示从当前时间开始，第二个数字表示持续时间。每一个表示 category 的 list 中可以存在多个 tuple。",[15,52,53],{},"给一些咱生成的例子。",[55,56],"hr",{},[58,59,63],"pre",{"className":60,"code":61,"language":62,"meta":46,"style":46},"language-python shiki shiki-themes github-light github-dark","from gantt import *\ncategory_names = ['P1', 'P2', 'P3', 'P4', 'P5']\n\nresults = {\n    'FCFS': [[(0,2)], [(2,1)], [(3,8)], [(11,4)], [(15,5)]],\n    'SJF': [[(1,2)], [(0,1)], [(12,8)], [(3,4)], [(7,5)]],\n    'non-compreemptive priority': [[(13,2)],[(19,1)],[(0,8)],[(15,4)],[(8,5)]],\n    'RR (quantum=2)': [[(0,2)], [(2,1)],[(3,2),(9,2),(15,2),(18,2)], [(5,2),(11,2)], [(7,2),(13,2),(17,1)]]\n}\n\narrival_t = [0, 0, 0, 0]\n\ngantt(category_names, results, arrival_t).show()\n\n","python",[64,65,66,74,80,87,93,99,105,111,117,123,128,134,139],"code",{"__ignoreMap":46},[67,68,71],"span",{"class":69,"line":70},"line",1,[67,72,73],{},"from gantt import *\n",[67,75,77],{"class":69,"line":76},2,[67,78,79],{},"category_names = ['P1', 'P2', 'P3', 'P4', 'P5']\n",[67,81,83],{"class":69,"line":82},3,[67,84,86],{"emptyLinePlaceholder":85},true,"\n",[67,88,90],{"class":69,"line":89},4,[67,91,92],{},"results = {\n",[67,94,96],{"class":69,"line":95},5,[67,97,98],{},"    'FCFS': [[(0,2)], [(2,1)], [(3,8)], [(11,4)], [(15,5)]],\n",[67,100,102],{"class":69,"line":101},6,[67,103,104],{},"    'SJF': [[(1,2)], [(0,1)], [(12,8)], [(3,4)], [(7,5)]],\n",[67,106,108],{"class":69,"line":107},7,[67,109,110],{},"    'non-compreemptive priority': [[(13,2)],[(19,1)],[(0,8)],[(15,4)],[(8,5)]],\n",[67,112,114],{"class":69,"line":113},8,[67,115,116],{},"    'RR (quantum=2)': [[(0,2)], [(2,1)],[(3,2),(9,2),(15,2),(18,2)], [(5,2),(11,2)], [(7,2),(13,2),(17,1)]]\n",[67,118,120],{"class":69,"line":119},9,[67,121,122],{},"}\n",[67,124,126],{"class":69,"line":125},10,[67,127,86],{"emptyLinePlaceholder":85},[67,129,131],{"class":69,"line":130},11,[67,132,133],{},"arrival_t = [0, 0, 0, 0]\n",[67,135,137],{"class":69,"line":136},12,[67,138,86],{"emptyLinePlaceholder":85},[67,140,142],{"class":69,"line":141},13,[67,143,144],{},"gantt(category_names, results, arrival_t).show()\n",[15,146,147],{},[24,148],{"alt":46,"src":149},"https://static.031130.xyz/uploads/2024/08/12/662890f78f1da.webp",[55,151],{},[58,153,155],{"className":60,"code":154,"language":62,"meta":46,"style":46},"from gantt import *\ncategory_names = ['P1', 'P2', 'P3', 'P4', 'P5', 'P6']\n\nresults = {\n    '': [[(0,20)], [(25,10),(45,10),(75,5)], [(35,10),(55,5),(80,10)], [(60,15)], [(100,5),(115,5)],[(105,10)]],\n}\n\narrival_t = [0]\n\ngantt(category_names, results, arrival_t).show()\n\n",[64,156,157,161,166,170,174,179,183,187,192,196],{"__ignoreMap":46},[67,158,159],{"class":69,"line":70},[67,160,73],{},[67,162,163],{"class":69,"line":76},[67,164,165],{},"category_names = ['P1', 'P2', 'P3', 'P4', 'P5', 'P6']\n",[67,167,168],{"class":69,"line":82},[67,169,86],{"emptyLinePlaceholder":85},[67,171,172],{"class":69,"line":89},[67,173,92],{},[67,175,176],{"class":69,"line":95},[67,177,178],{},"    '': [[(0,20)], [(25,10),(45,10),(75,5)], [(35,10),(55,5),(80,10)], [(60,15)], [(100,5),(115,5)],[(105,10)]],\n",[67,180,181],{"class":69,"line":101},[67,182,122],{},[67,184,185],{"class":69,"line":107},[67,186,86],{"emptyLinePlaceholder":85},[67,188,189],{"class":69,"line":113},[67,190,191],{},"arrival_t = [0]\n",[67,193,194],{"class":69,"line":119},[67,195,86],{"emptyLinePlaceholder":85},[67,197,198],{"class":69,"line":125},[67,199,144],{},[15,201,202],{},[24,203],{"alt":46,"src":204},"https://static.031130.xyz/uploads/2024/08/12/662891bfa52fc.webp",[206,207,208],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":210},[],{"title":212,"date":213,"path":214,"tags":215,"body":220},"uniapp 中的图片预加载","2024-04-01 05:31:25","/2024/04/01/image-preload-in-uniapp",[216,217,218,219],"uniapp","Vue.js","Web","JavaScript",{"type":12,"value":221,"toc":486},[222,225,227,240,242,251,261,271,277,283,285,292,471,476,483],[15,223,224],{},"最近在做微信小程序的时候遇到了图片资源过大无法正常打包的问题，没什么太好的方法，只能是使用图床托管这些图片资源。但部分图片的体积实在太大，即使是采用了境内 cdn 的图床，即使是采用 webp 对图片进行了压缩，部分图片都需要小几秒去把图片加载出来，这导致的用户体验就不是很好了，因此我们需要实现图片预加载的功能。",[55,226],{},[15,228,229,230,235,236,239],{},"在 ",[32,231,234],{"href":232,"rel":233},"https://uniapp.dcloud.net.cn/api/preload-page.html#preloadpage",[36],"uniapp 的官方文档","中，我找到了 ",[64,237,238],{},"uni.preloadPage(OBJECT)"," 方法。很可惜，这个方法并不支持微信小程序，自然不能完成被预加载页面的图片资源预加载。",[55,241],{},[15,243,244,245,250],{},"经过搜索，在",[32,246,249],{"href":247,"rel":248},"https://frontend.mimiwuqi.com/qianduan/202517.html",[36],"一篇奇奇怪怪的文章","中提到：",[252,253,254],"blockquote",{},[15,255,256,257,260],{},"在UniApp中，图片预加载可以通过使用",[64,258,259],{},"uni.getImageInfo","方法来实现。这个方法可以获取图片的信息，包括宽度、高度等。可以在应用启动时就开始加载图片，以提高后续图片显示的速度。",[15,262,263,264,267,268,270],{},"很遗憾，经过实测，提前使用 ",[64,265,266],{},"getImageInfo()"," 方法并不能实现图片的预加载。",[64,269,266],{}," 获取时的 Type 是 xhr，而后续图片加载时的 Type 为 webp，图片会被重复下载，并没有实现预加载的作用。",[15,272,273],{},[24,274],{"alt":275,"src":276},"下载测试","https://static.031130.xyz/uploads/2024/08/12/6609d97bc4f7f.webp",[15,278,279,280,282],{},"上图中，蓝色部分是 ",[64,281,266],{}," 的网络请求，红色部分是真正的图片加载请求，可谓是一点用都没有，该加载慢还是加载慢。",[55,284],{},[15,286,287,288,291],{},"那有没有什么办法能够实现预加载呢？我没找到优雅的方法，选择在应用的首页创建一个 ",[64,289,290],{},"display: none"," 的 view 将所有的图片先加载一遍。",[58,293,297],{"className":294,"code":295,"language":296,"meta":46,"style":46},"language-vue shiki shiki-themes github-light github-dark","\u003Ctemplate>\n    \u003Cview style=\"display: none;\">\n        \u003Cimage\n            v-for=\"image in imageToPreload\"\n            :src=\"image\"\n        />\n    \u003C/view>\n\u003C/template>\n\u003Cscript setup lang=\"ts\">\nconst imageToPreload = [\n    \"https://http.cat/100\",\n    \"https://http.cat/200\",\n    \"https://http.cat/300\",\n    \"https://http.cat/400\",\n    \"https://http.cat/500\"\n]\n\u003C/script>\n","vue",[64,298,299,312,333,341,351,361,366,375,384,404,420,428,435,442,450,456,462],{"__ignoreMap":46},[67,300,301,305,309],{"class":69,"line":70},[67,302,304],{"class":303},"sVt8B","\u003C",[67,306,308],{"class":307},"s9eBZ","template",[67,310,311],{"class":303},">\n",[67,313,314,317,320,324,327,331],{"class":69,"line":76},[67,315,316],{"class":303},"    \u003C",[67,318,319],{"class":307},"view",[67,321,323],{"class":322},"sScJk"," style",[67,325,326],{"class":303},"=",[67,328,330],{"class":329},"sZZnC","\"display: none;\"",[67,332,311],{"class":303},[67,334,335,338],{"class":69,"line":82},[67,336,337],{"class":303},"        \u003C",[67,339,340],{"class":307},"image\n",[67,342,343,346,348],{"class":69,"line":89},[67,344,345],{"class":322},"            v-for",[67,347,326],{"class":303},[67,349,350],{"class":329},"\"image in imageToPreload\"\n",[67,352,353,356,358],{"class":69,"line":95},[67,354,355],{"class":322},"            :src",[67,357,326],{"class":303},[67,359,360],{"class":329},"\"image\"\n",[67,362,363],{"class":69,"line":101},[67,364,365],{"class":303},"        />\n",[67,367,368,371,373],{"class":69,"line":107},[67,369,370],{"class":303},"    \u003C/",[67,372,319],{"class":307},[67,374,311],{"class":303},[67,376,377,380,382],{"class":69,"line":113},[67,378,379],{"class":303},"\u003C/",[67,381,308],{"class":307},[67,383,311],{"class":303},[67,385,386,388,391,394,397,399,402],{"class":69,"line":119},[67,387,304],{"class":303},[67,389,390],{"class":307},"script",[67,392,393],{"class":322}," setup",[67,395,396],{"class":322}," lang",[67,398,326],{"class":303},[67,400,401],{"class":329},"\"ts\"",[67,403,311],{"class":303},[67,405,406,410,414,417],{"class":69,"line":125},[67,407,409],{"class":408},"szBVR","const",[67,411,413],{"class":412},"sj4cs"," imageToPreload",[67,415,416],{"class":408}," =",[67,418,419],{"class":303}," [\n",[67,421,422,425],{"class":69,"line":130},[67,423,424],{"class":329},"    \"https://http.cat/100\"",[67,426,427],{"class":303},",\n",[67,429,430,433],{"class":69,"line":136},[67,431,432],{"class":329},"    \"https://http.cat/200\"",[67,434,427],{"class":303},[67,436,437,440],{"class":69,"line":141},[67,438,439],{"class":329},"    \"https://http.cat/300\"",[67,441,427],{"class":303},[67,443,445,448],{"class":69,"line":444},14,[67,446,447],{"class":329},"    \"https://http.cat/400\"",[67,449,427],{"class":303},[67,451,453],{"class":69,"line":452},15,[67,454,455],{"class":329},"    \"https://http.cat/500\"\n",[67,457,459],{"class":69,"line":458},16,[67,460,461],{"class":303},"]\n",[67,463,465,467,469],{"class":69,"line":464},17,[67,466,379],{"class":303},[67,468,390],{"class":307},[67,470,311],{"class":303},[15,472,473],{},[24,474],{"alt":275,"src":475},"https://static.031130.xyz/uploads/2024/08/12/6609db8a213da.webp",[15,477,478,479,482],{},"可以看到，红色部分的资源在 size 那一栏变成了 ",[64,480,481],{},"(disk cache)","，加载时间也明显降低，虽然方法不优雅，但起码实现了图片资源的预加载。",[206,484,485],{},"html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":487},[],{"title":489,"date":490,"path":491,"tags":492,"body":496},"小记 - 尝试拼凑出 apt 仓库中的 deb 包下载地址","2024-03-13 21:55:04","/2024/03/13/try-to-compose-download-links-of-deb-packages-in-apt-repository",[493,494,495],"Linux","Apt","deepin",{"type":12,"value":497,"toc":720},[498,501,510,513,516,522,529,532,535,543,556,625,632,638,649,655,658,661,691,697,708,711,717],[15,499,500],{},"大概一周前，有一个来源不明的 Linux 微信，从包的结构来看是基于 qt 实现的图形化界面，deb 包中的 control 信息表明是腾讯团队官方出品的。今天听人说 UOS 的商店上架了最新的微信，便尝试从 UOS 的官方仓库提取下载链接，帮助 AUR Maintainer 获取到新的地址。",[15,502,503,504,509],{},"在我的",[32,505,508],{"href":506,"rel":507},"https://zhul.in/2021/11/20/what-is-deepin-elf-verify/",[36],"《deepin-elf-verify究竟是何物？》","这篇文章中，我成功从 uos.deepin.cn 下载到了来自 UOS 中的软件包。可惜，当我采用同样的方法搜索 weixin 或者 wechat 字样时，没有得到任何结果。",[15,511,512],{},"UOS 上的软件来源起码来自两个仓库，一个是与系统有关的软件，比如 Linux Kernel，GCC 一类开源软件，应该就是来自我之前下载到 deepin-elf-verify 的那个源。除此之外，还有一个 appstore 源，里面存放的都是应用商店中上架的软件（大部分可能是闭源的）。",[15,514,515],{},"在 chinauos.com 下载到最新的 ISO 安装镜像后，直接在虚拟机中走完正常的安装流畅，然后直捣黄龙。",[15,517,518],{},[24,519],{"alt":520,"src":521},"源地址","https://static.031130.xyz/uploads/2024/08/12/65f1b344e5581.webp",[15,523,524,525,528],{},"可以看出，",[64,526,527],{},"/etc/apt/sources.list.d/appstore.list"," 文件中列出的源很有可能就是我们要找的新版微信的所在源。",[15,530,531],{},"可惜直接访问的时候，源地址给出了 403。他们似乎不愿意公开源地址的 filelist index。",[15,533,534],{},"不过没关系，既然 UOS Desktop 目前仍然依赖 APT 实现软件安装，那它的源应该仍然符合 Debian 的 APT Repository 目录结构。",[15,536,537,538],{},"根据 ",[32,539,542],{"href":540,"rel":541},"https://wiki.debian.org/DebianRepository/Format",[36],"DebianWiki 中的描述",[252,544,545,548],{},[15,546,547],{},"gives an example:",[58,549,554],{"className":550,"code":552,"language":553},[551],"language-text","deb https://deb.debian.org/debian stable main contrib non-free\n","text",[64,555,552],{"__ignoreMap":46},[252,557,558,561,579,612],{},[15,559,560],{},"An archive can have either source packages or binary packages or both but they have to be specified separately to apt.",[15,562,563,564,570,571,574,575,578],{},"The uri, in this case ",[565,566,567],"em",{},[64,568,569],{},"https://deb.debian.org/debian"," specifies the root of the archive. Often Debian archives are in the ",[565,572,573],{},"debian/"," directory on the server but can be anywhere else (many mirrors for example have it in a ",[565,576,577],{},"pub/linux/debian"," directory, for example).",[15,580,581,582,585,586,590,591,594,595,598,599,602,603,606,607],{},"The distribution part (",[565,583,584],{},"stable"," in this case) specifies a subdirectory in ",[587,588,589],"strong",{},"$ARCHIVE_ROOT/dists",". It can contain additional slashes to specify subdirectories nested deeper, eg. ",[565,592,593],{},"stable/updates",". distribution typically corresponds to ",[587,596,597],{},"Suite"," or ",[587,600,601],{},"Codename"," specified in the ",[587,604,605],{},"Release"," files. ",[565,608,609],{},[587,610,611],{},"FIXME is this enforced anyhow?",[15,613,614,615,598,618,620,621,624],{},"To download packages from a repository apt would download an ",[587,616,617],{},"InRelease",[587,619,605],{}," file from the ",[587,622,623],{},"$ARCHIVE_ROOT/dists/$DISTRIBUTION"," directory.",[15,626,627,628,631],{},"我尝试了访问 ",[64,629,630],{},"https://pro-store-packages.uniontech.com/appstore/dists/eagle-pro/Release","，获得了一系列索引文件的索引。",[15,633,634],{},[24,635],{"alt":636,"src":637},"索引的索引（很拗口）","https://static.031130.xyz/uploads/2024/08/12/65f1b5166810a.webp",[15,639,640,641,644,645],{},"第一段中就能看到熟悉的 ",[64,642,643],{},"Packages"," 文件。根据我 deepin-elf-verify 相关博客中记载，这个文件中会保存 deb 文件的相对路径。我们先拼出 amd64 架构的 Packages 文件下载链接: ",[32,646,647],{"href":647,"rel":648},"https://pro-store-packages.uniontech.com/appstore/dists/eagle-pro/appstore/binary-amd64/Packages",[36],[15,650,651],{},[24,652],{"alt":653,"src":654},"deb 包详细信息","https://static.031130.xyz/uploads/2024/08/12/65f1b5faccc86.webp",[15,656,657],{},"这里可以看到源中每一个 deb 包的信息。图中红色方框框出的便是其中一个 deb 包在源中的相对路径。",[15,659,660],{},"我们可以使用 grep 命令去检索 weixin 或者 wechat 关键词",[58,662,666],{"className":663,"code":664,"language":665,"meta":46,"style":46},"language-bash shiki shiki-themes github-light github-dark","curl -sL https://pro-store-packages.uniontech.com/appstore/dists/eagle-pro/appstore/binary-amd64/Packages | grep -E \"weixin|wechat\"\n","bash",[64,667,668],{"__ignoreMap":46},[67,669,670,673,676,679,682,685,688],{"class":69,"line":70},[67,671,672],{"class":322},"curl",[67,674,675],{"class":412}," -sL",[67,677,678],{"class":329}," https://pro-store-packages.uniontech.com/appstore/dists/eagle-pro/appstore/binary-amd64/Packages",[67,680,681],{"class":408}," |",[67,683,684],{"class":322}," grep",[67,686,687],{"class":412}," -E",[67,689,690],{"class":329}," \"weixin|wechat\"\n",[15,692,693],{},[24,694],{"alt":695,"src":696},"获取到我们想要的 deb 包的相对路径","https://static.031130.xyz/uploads/2024/08/12/65f1b6a4c3239.webp",[15,698,699,700,703,704],{},"在这个路径前加上之前 ",[64,701,702],{},"appstore.list"," 文件中给出的 url 前缀，即可拼凑出 deb 包的完整下载地址: ",[32,705,706],{"href":706,"rel":707},"https://pro-store-packages.uniontech.com/appstore/pool/appstore/c/com.tencent.wechat/com.tencent.wechat_1.0.0.236_amd64.deb",[36],[15,709,710],{},"放到浏览器中尝试，果然可以正常下载",[15,712,713],{},[24,714],{"alt":715,"src":716},"正常下载","https://static.031130.xyz/uploads/2024/08/12/65f1b73567121.webp",[206,718,719],{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":721},[],{"title":723,"date":724,"path":725,"tags":726,"body":730},"在 Linux 下使用 mitmproxy 抓取 HTTPS 流量","2024-02-29 22:03:58","/2024/02/29/capture-https-traffic-on-linux-with-mitmproxy",[493,727,728,729],"Archlinux","Network","mitmproxy",{"type":12,"value":731,"toc":985},[732,735,738,743,750,769,773,776,788,796,802,812,817,821,824,831,837,848,855,875,884,905,910,922,925,929,932,939,945,954,957,963,966,969,979,982],[15,733,734],{},"作为部分 AUR Package 的 maintainer，一直以来我都有在 Linux 下抓取 https 流量的需求，比如抓取应用内的更新检测时访问的 url 地址。之前一直没有空去研究，趁着最近课少，总算是完成了这个目标。",[15,736,737],{},"在这里我使用的 mitmproxy，基于 python 和 webui 的一款开源简洁的流量代理软件，可以用于抓取 https 流量信息。",[739,740,742],"h2",{"id":741},"安装-mitmproxy","安装 mitmproxy",[15,744,745,746,749],{},"在 Arch Linux 下，官方 ",[64,747,748],{},"extra"," 源中已经打包好了这款软件，直接使用下面的命令即可完成安装。",[58,751,753],{"className":663,"code":752,"language":665,"meta":46,"style":46},"sudo pacman -S mitmproxy\n",[64,754,755],{"__ignoreMap":46},[67,756,757,760,763,766],{"class":69,"line":70},[67,758,759],{"class":322},"sudo",[67,761,762],{"class":329}," pacman",[67,764,765],{"class":412}," -S",[67,767,768],{"class":329}," mitmproxy\n",[739,770,772],{"id":771},"尝试运行-mitmweb","尝试运行 mitmweb",[15,774,775],{},"安装完成后，我们将会获得三个新的命令可用：",[777,778,779,783,785],"ul",{},[780,781,782],"li",{},"mitmdump",[780,784,729],{},[780,786,787],{},"mitmweb",[15,789,790,791,795],{},"我们只要使用 mitmweb 即可同时打开 8080 的代理端口和 8081 端口的 webui。访问 ",[32,792,793],{"href":793,"rel":794},"http://127.0.0.1:8081",[36]," 即可看到 mitmproxy 的网页。",[15,797,798],{},[24,799],{"alt":800,"src":801},"mitmweb 的界面","https://static.031130.xyz/uploads/2024/08/12/65e092503d5bb.webp",[15,803,804,805],{},"当然，也可以在 mitmweb 命令后面追加 -p ",[806,807,808,809],"port",{}," 和 --web-port=",[806,810,811],{}," 分别设置代理端口和 webui 的端口。",[15,813,814,815],{},"首先，我们先运行一次 ",[64,816,787],{},[739,818,820],{"id":819},"安装-ca-证书","安装 ca 证书",[15,822,823],{},"为了解密 https 流量，我们需要为系统安装上 mitmproxy 自己的证书文件，让系统信任我们的证书。",[15,825,826,827,830],{},"先来看看 ",[64,828,829],{},"/usr/share/ca-certificates/trust-source/README"," 这个文件",[58,832,835],{"className":833,"code":834,"language":553},[551],"This directory /usr/share/ca-certificates/trust-source/ contains CA certificates\nand trust settings in the PEM file format. The trust settings found here will be\ninterpreted with a low priority - lower than the ones found in \n/etc/ca-certificates/trust-source/ .\n\n=============================================================================\nQUICK HELP: To add a certificate in the simple PEM or DER file formats to the\n            list of CAs trusted on the system:\n\n            Copy it to the\n                    /usr/share/ca-certificates/trust-source/anchors/\n            subdirectory, and run the\n                    update-ca-trust\n            command.\n\n            If your certificate is in the extended BEGIN TRUSTED file format,\n            then place it into the main trust-source/ directory instead.\n=============================================================================\n\nPlease refer to the update-ca-trust(8) manual page for additional information.\n",[64,836,834],{"__ignoreMap":46},[15,838,839,840,843,844,847],{},"这份文件告诉我们可以在 ",[64,841,842],{},"/usr/share/ca-certificates/trust-source/anchors/"," 路径下放置 PEM 证书文件，并使用 ",[64,845,846],{},"update-ca-trust"," 命令更新系统的信任。",[15,849,850,851,854],{},"mitmproxy 软件第一次运行时，将会在当前用户的 ",[64,852,853],{},"$HOME/.mitmproxy/"," 文件夹下生成证书，我们打开这个文件夹，发现一共有六个文件：",[777,856,857,860,863,866,869,872],{},[780,858,859],{},"mitmproxy-ca-cert.cer",[780,861,862],{},"mitmproxy-ca-cert.p12",[780,864,865],{},"mitmproxy-ca-cert.pem",[780,867,868],{},"mitmproxy-ca.p12",[780,870,871],{},"mitmproxy-ca.pem",[780,873,874],{},"mitmproxy-dhparam.pem",[15,876,877,878,880,881,883],{},"我们这里需要将 ",[64,879,865],{}," 文件复制到 ",[64,882,842],{}," 路径下",[58,885,887],{"className":663,"code":886,"language":665,"meta":46,"style":46},"sudo cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem /usr/share/ca-certificates/trust-source/anchors/\n",[64,888,889],{"__ignoreMap":46},[67,890,891,893,896,899,902],{"class":69,"line":70},[67,892,759],{"class":322},[67,894,895],{"class":329}," cp",[67,897,898],{"class":303}," $HOME",[67,900,901],{"class":329},"/.mitmproxy/mitmproxy-ca-cert.pem",[67,903,904],{"class":329}," /usr/share/ca-certificates/trust-source/anchors/\n",[15,906,907,908],{},"随后执行 ",[64,909,846],{},[58,911,913],{"className":663,"code":912,"language":665,"meta":46,"style":46},"sudo update-ca-trust\n",[64,914,915],{"__ignoreMap":46},[67,916,917,919],{"class":69,"line":70},[67,918,759],{"class":322},[67,920,921],{"class":329}," update-ca-trust\n",[15,923,924],{},"这样便完成了 ca 证书的安装",[739,926,928],{"id":927},"使目标软件使用-8080-端口通信","使目标软件使用 8080 端口通信",[15,930,931],{},"其实我试过使用透明代理进行抓包，只不过我的 Archlinux 是作为日常主力机使用的，系统无时无刻不在向外通信，透明代理以后 mitmproxy 的 webui 各种刷屏，便放弃了这个想法，选择指定目标软件使用 8080 端口通信。",[15,933,934,935,938],{},"网上比较常见的做法是使用 ",[64,936,937],{},"proxychains-ng"," 代理目标软件。这个方案是可行的，只不过我这边测试下来，部分软件使用 proxychains 代理以后出现了仍然不使用代理、无法联网、甚至直接崩溃的情况。",[15,940,941],{},[24,942],{"alt":943,"src":944},"程序崩溃","https://static.031130.xyz/uploads/2024/08/12/65e09559dceef.webp",[15,946,947,948,953],{},"因此我转向了 ",[32,949,952],{"href":950,"rel":951},"https://github.com/mzz2017/gg",[36],"gg","。gg 和 proxychains-ng 的定位相同，都是使目标命令通过指定的代理进行通信，只不过 gg 解决了部分 golang 编写的软件无法被 proxychains 代理的问题，并支持一些常见的用来国际联网的协议。",[15,955,956],{},"在不对 gg 进行配置的情况下，每次启动时，gg 都会要求我们输入代理地址，这正合我意。",[15,958,959],{},[24,960],{"alt":961,"src":962},"gg 要求输入代理地址","https://static.031130.xyz/uploads/2024/08/12/65e0963840449.webp",[15,964,965],{},"此时，软件正常启动，流量全部经过 mitmproxy，可以在 webui 上看到具体情况",[739,967,968],{"id":968},"抓包成功",[15,970,971,975],{},[24,972],{"alt":973,"src":974},"命令行下看到流量信息","https://static.031130.xyz/uploads/2024/08/12/65e097dfe1f17.webp",[24,976],{"alt":977,"src":978},"mitmweb 正常获取解密后的流量信息","https://static.031130.xyz/uploads/2024/08/12/65e09780dd2c0.webp",[15,980,981],{},"我们可以看到 mitmproxy 成功捕获并解密的 https 流量，针对图片等信息甚至可以直接实现预览。",[206,983,984],{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}",{"title":46,"searchDepth":76,"depth":76,"links":986},[987,988,989,990,991],{"id":741,"depth":76,"text":742},{"id":771,"depth":76,"text":772},{"id":819,"depth":76,"text":820},{"id":927,"depth":76,"text":928},{"id":968,"depth":76,"text":968},{"title":993,"date":994,"path":995,"tags":996,"body":1001},"如何使用 docker 部署 onemanager","2024-02-11 16:30:29","/2024/02/11/how-to-deploy-onemanager-with-docker",[997,998,999,1000],"PHP","OneDrive","OpenSource Project","Docker",{"type":12,"value":1002,"toc":1251},[1003,1005,1008,1015,1017,1026,1031,1061,1065,1080,1083,1087,1112,1119,1125,1134,1145,1161,1170,1179,1182,1185,1195,1214,1218,1245,1248],[55,1004],{},[739,1006,1007],{"id":1007},"部署方法",[15,1009,1010,1011],{},"如果你只是想找一个 OneManager-php 的 Docker 部署方法，直接看 ",[32,1012,1013],{"href":1013,"rel":1014},"https://github.com/zhullyb/OneManager-php-docker",[36],[55,1016],{},[15,1018,1019,1020,1025],{},"一直以来，我都是 ",[32,1021,1024],{"href":1022,"rel":1023},"https://github.com/qkqpttgf/OneManager-php",[36],"OneManager-php"," 的忠实用户。这些年来，尽管有 alist 这种 UI 好看，多种网盘高度聚合的项目逐渐取代了 onemanager 的生态位，但 onemanager 支持文件分片上传、上传流量不经服务器的特点还是让我非常满意。前一阵子，glitch 暂停了针对项目自定义域名的支持，因此在我手贱地取消了项目原本绑定的域名后，迫切地需要寻找一个新的部署的平台，只不过 onemanager 项目现在列出的方案都不太让我满意，因此我就萌生出了在 vps 上自己部署的想法。",[1027,1028,1030],"h3",{"id":1029},"docker-镜像选用","Docker 镜像选用",[15,1032,1033,1034,1038,1039,1044,1045,1048,1049,1052,1053,1056,1057,1060],{},"vps 上自己部署 php 项目，最简单的方法是使用 Docker，",[1035,1036,1037],"del",{},"使用 Docker 就可以免去配置 nginx 或者同类产品的 php-fpm 配置","才怪。我打开 Docker 提供的 ",[32,1040,1043],{"href":1041,"rel":1042},"https://hub.docker.com/_/php",[36],"php 官方镜像","，最小的镜像是带",[64,1046,1047],{},"-cli","后缀的，这个镜像就不适合进行部署，php 内置的开发服务器是单线程的，当同时打开两个网页访问开发服务器的时候，其中一个网页就会卡住；以",[64,1050,1051],{},"-fpm","结尾的镜像变体很明显，仍然需要去 nginx 或同类产品的配置文件那边去配置 fpm，这给部署了好几次 php 项目的我带来的心理阴影；剩下一个就是",[64,1054,1055],{},"-apache","后缀、使用 apache server 提供 php 服务的镜像，体积虽然大了点，但好在操作简单，只需要将 php 文件放进 ",[64,1058,1059],{},"/var/www/html","，启用 php 的相关拓展，启用 apache 的相关功能即可。",[739,1062,1064],{"id":1063},"php-拓展","php 拓展",[15,1066,1067,1068,1071,1072,1075,1076,1079],{},"php 的拓展可以使用镜像自带的 ",[64,1069,1070],{},"docker-php-ext-install"," 和 ",[64,1073,1074],{},"docker-php-ext-enable"," 命令进行操作，此外还有一个 ",[64,1077,1078],{},"docker-php-ext-configure"," 命令可以配置相关的拓展，不过我并不是 php 开发者，不熟悉拓展有什么好配置的。",[15,1081,1082],{},"OneManager-php 没有依赖任何的 php 拓展，因此这个步骤可以直接跳过。",[739,1084,1086],{"id":1085},"apache-server-配置","Apache Server 配置",[15,1088,1089,1090,1093,1094,1093,1097,1093,1100,1093,1103,1093,1106,1093,1109,1111],{},"和 php 拓展一样，镜像内也提供了几个命令进行 Apache Server 的配置，分别为 ",[64,1091,1092],{},"a2disconf","、",[64,1095,1096],{},"a2dismod",[64,1098,1099],{},"a2dissite",[64,1101,1102],{},"a2enconf",[64,1104,1105],{},"a2enmod",[64,1107,1108],{},"a2ensite",[64,1110,1108],{},"。",[15,1113,1114,1115,1118],{},"OneManager-php 在部署的时候依赖于 Apache Server 的 rewrite 的模块，因此在 Dockerfile 中需要使用 ",[64,1116,1117],{},"a2enmod rewrite"," 开启 rewrite 支持。至于别的 Apache Server 配置，都可以通过项目中的 .htaccess 文件进行配置。",[739,1120,1122],{"id":1121},"htaccess-文件纠错",[1035,1123,1124],{},".htaccess 文件纠错",[15,1126,1127],{},[1035,1128,1129,1130,1133],{},"在 OneManager-php 仓库中，",[64,1131,1132],{},".htaccess"," 文件有一些小问题。",[58,1135,1139],{"className":1136,"code":1137,"language":1138,"meta":46,"style":46},"language-htaccess shiki shiki-themes github-light github-dark","RewriteRule ^(.*) index.php?/$1 [L]\n","htaccess",[64,1140,1141],{"__ignoreMap":46},[67,1142,1143],{"class":69,"line":70},[67,1144,1137],{},[15,1146,1147],{},[1035,1148,1149,1150,1153,1154,1093,1157,1160],{},"这行配置原本是将访问的路径追加到 ",[64,1151,1152],{},"index.php?/"," 后面的意思，但 一旦路径中出现了 ",[64,1155,1156],{},"[",[64,1158,1159],{},"]"," 或者空格等字符时，会触发 Apache 自带的保护，因此我们将这行改成下面这个样子即可。",[58,1162,1164],{"className":1136,"code":1163,"language":1138,"meta":46,"style":46},"RewriteRule ^(.*) index.php [QSA,L]\n",[64,1165,1166],{"__ignoreMap":46},[67,1167,1168],{"class":69,"line":70},[67,1169,1163],{},[15,1171,1172,1173,1178],{},"原项目合并了",[32,1174,1177],{"href":1175,"rel":1176},"https://github.com/qkqpttgf/OneManager-php/pull/716",[36],"我的 PR","，因此这一过程不再需要。",[739,1180,1181],{"id":1181},"处理文件权限问题",[15,1183,1184],{},"OneManager-php 在运行过程中，会有针对配置文件的读写操作，此外还内置了一键更新的功能，因此会对路径内的文件进行读写，我们需要确保 php 在运行过程中有权限对这些文件进行读写。",[15,1186,1187,1188,1190,1191,1194],{},"可以直接将 ",[64,1189,1059],{}," 路径的所有权转给 ",[64,1192,1193],{},"www-data"," 用户。",[58,1196,1198],{"className":663,"code":1197,"language":665,"meta":46,"style":46},"chown -R www-data:www-data /var/www/html\n",[64,1199,1200],{"__ignoreMap":46},[67,1201,1202,1205,1208,1211],{"class":69,"line":70},[67,1203,1204],{"class":322},"chown",[67,1206,1207],{"class":412}," -R",[67,1209,1210],{"class":329}," www-data:www-data",[67,1212,1213],{"class":329}," /var/www/html\n",[739,1215,1217],{"id":1216},"最终的-dockerfile","最终的 Dockerfile",[58,1219,1223],{"className":1220,"code":1221,"language":1222,"meta":46,"style":46},"language-dockerfile shiki shiki-themes github-light github-dark","FROM php:8-apache\nRUN a2enmod rewrite\nCOPY OneManager-php /var/www/html\nRUN chown -R www-data:www-data /var/www/html\n","dockerfile",[64,1224,1225,1230,1235,1240],{"__ignoreMap":46},[67,1226,1227],{"class":69,"line":70},[67,1228,1229],{},"FROM php:8-apache\n",[67,1231,1232],{"class":69,"line":76},[67,1233,1234],{},"RUN a2enmod rewrite\n",[67,1236,1237],{"class":69,"line":82},[67,1238,1239],{},"COPY OneManager-php /var/www/html\n",[67,1241,1242],{"class":69,"line":89},[67,1243,1244],{},"RUN chown -R www-data:www-data /var/www/html\n",[15,1246,1247],{},"其实一共就 4 行，还是挺简单的。",[206,1249,1250],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}",{"title":46,"searchDepth":76,"depth":76,"links":1252},[1253,1256,1257,1258,1259,1260],{"id":1007,"depth":76,"text":1007,"children":1254},[1255],{"id":1029,"depth":82,"text":1030},{"id":1063,"depth":76,"text":1064},{"id":1085,"depth":76,"text":1086},{"id":1121,"depth":76,"text":1124},{"id":1181,"depth":76,"text":1181},{"id":1216,"depth":76,"text":1217},{"title":1262,"date":1263,"path":1264,"tags":1265,"body":1267},"crontab 中简单的@语法糖","2024-02-08 17:21:31","/2024/02/08/extra-usage-for-crontab",[493,1266],"crontab",{"type":12,"value":1268,"toc":1461},[1269,1275,1288,1411,1414,1417,1458],[15,1270,1271,1272],{},"说来惭愧，其实我用了这么久的 Linux，一直没有学会编写 crontab 脚本。一行的开头写上五位莫名其妙的数字或星号，后面跟上需要执行的命令，看上去很 kiss，",[1035,1273,1274],{},"但我确实记不住，以至于我现在每次写 crontab 都是让 ChatGPT 来帮我写。",[15,1276,1277,1278,1281,1282,1287],{},"不过我最近查阅 Linux 下设置开机自启脚本的方案的时候，意外地看到 crontab 中居然可以用 ",[64,1279,1280],{},"@reboot command"," 的方式去写，这让我意识到 crontab 也是有一些简单的语法糖的。在查阅了 ",[32,1283,1286],{"href":1284,"rel":1285},"https://man.archlinux.org/man/crontab.5.en#EXTENSIONS",[36],"crontab 的 manual"," 后，我发现一共有下面这么几种 @ 写法的语法糖。这是在全网大部分的 crontab 中文教程中是没有的。",[1289,1290,1291,1307],"table",{},[1292,1293,1294],"thead",{},[1295,1296,1297,1301,1304],"tr",{},[1298,1299,1300],"th",{},"语法糖",[1298,1302,1303],{},"执行条件",[1298,1305,1306],{},"等效表达式",[1308,1309,1310,1323,1338,1351,1366,1381,1396],"tbody",{},[1295,1311,1312,1318,1321],{},[1313,1314,1315],"td",{},[64,1316,1317],{},"@reboot",[1313,1319,1320],{},"开机时候运行",[1313,1322],{},[1295,1324,1325,1330,1333],{},[1313,1326,1327],{},[64,1328,1329],{},"@yearly",[1313,1331,1332],{},"一年一次",[1313,1334,1335],{},[64,1336,1337],{},"0 0 1 1 *",[1295,1339,1340,1345,1347],{},[1313,1341,1342],{},[64,1343,1344],{},"@annually",[1313,1346,1332],{},[1313,1348,1349],{},[64,1350,1337],{},[1295,1352,1353,1358,1361],{},[1313,1354,1355],{},[64,1356,1357],{},"@monthly",[1313,1359,1360],{},"一月一次",[1313,1362,1363],{},[64,1364,1365],{},"0 0 1 * *",[1295,1367,1368,1373,1376],{},[1313,1369,1370],{},[64,1371,1372],{},"@weekly",[1313,1374,1375],{},"一周一次",[1313,1377,1378],{},[64,1379,1380],{},"0 0 * * 0",[1295,1382,1383,1388,1391],{},[1313,1384,1385],{},[64,1386,1387],{},"@daily",[1313,1389,1390],{},"一天一次",[1313,1392,1393],{},[64,1394,1395],{},"0 0 * * *",[1295,1397,1398,1403,1406],{},[1313,1399,1400],{},[64,1401,1402],{},"@hourly",[1313,1404,1405],{},"一小时一次",[1313,1407,1408],{},[64,1409,1410],{},"0 * * * *",[15,1412,1413],{},"这几个简单的语法糖可以满足大部分 crontab 的情况，免去了对使用者学习并记忆 crontab 的表达式的要求。",[15,1415,1416],{},"比如说，如果我希望我的系统在每次开机时都用 TG Bot 发送一条上线信息，那就是",[58,1418,1420],{"className":663,"code":1419,"language":665,"meta":46,"style":46},"@reboot curl -s -X POST https://api.telegram.org/bot{id}:{apikey}/sendMessage -d chat_id={uid} -d text=\"`date`\"\n",[64,1421,1422],{"__ignoreMap":46},[67,1423,1424,1426,1429,1432,1435,1438,1441,1444,1447,1449,1452,1455],{"class":69,"line":70},[67,1425,1317],{"class":322},[67,1427,1428],{"class":329}," curl",[67,1430,1431],{"class":412}," -s",[67,1433,1434],{"class":412}," -X",[67,1436,1437],{"class":329}," POST",[67,1439,1440],{"class":329}," https://api.telegram.org/bot{id}:{apikey}/sendMessage",[67,1442,1443],{"class":412}," -d",[67,1445,1446],{"class":329}," chat_id={uid}",[67,1448,1443],{"class":412},[67,1450,1451],{"class":329}," text=\"`",[67,1453,1454],{"class":322},"date",[67,1456,1457],{"class":329},"`\"\n",[206,1459,1460],{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":1462},[],{"title":1464,"date":1465,"path":1466,"tags":1467,"body":1471},"备份 umami 数据库，并使用 TG Bot 保存 dump 文件","2024-02-01 00:00:01","/2024/02/01/backup-umami-database-and-send-it-by-tg-bot",[1468,1469,1470],"umami","Shell Script","Bot",{"type":12,"value":1472,"toc":1785},[1473,1482,1490,1496,1499,1502,1631,1642,1645,1654,1657,1663,1672,1746,1753,1776,1782],[15,1474,1475,1476,1481],{},"前一阵子看到点墨的博客",[32,1477,1480],{"href":1478,"rel":1479},"https://blog.m-l.cc/2023/11/09/ding-shi-bei-fen-mysql-mariadb-shu-ju-ku-bing-shang-chuan-zhi-tgbot/",[36],"「定时备份mysql/mariadb数据库并上传至tgbot」","，我意识到个人站点的数据库 dump 使用 TG Bot 存放是一个非常合适的做法。个人站点的数据库体积本身就不大，TG Bot 又有官方提供的 api，非常适合自动化任务。我就寻思着给我的 umami 数据库也写个定时任务备份一下，也不至于之前做一次迁移数据全部爆炸的悲剧重演。",[15,1483,1484,1485,1489],{},"我的 umami 是",[32,1486,1488],{"href":1487},"/2022/11/08/free-umami-deploy-plan/","「使用 vercel+supabase 免费部署 umami」","部署出来的，数据库在 supabase 上，因此我们先打开 supabase 的 dashboard，获取到数据库的 url。",[15,1491,1492],{},[24,1493],{"alt":1494,"src":1495},"supabase 操作面板","https://static.031130.xyz/uploads/2024/08/12/65ba6aae157e6.webp",[15,1497,1498],{},"密码我自然是不记得了，不过好在 Firefox 的密码管理器帮我记住了，直接去设置里就能找到。即使密码忘了也不要紧，往下翻有重置密码的按钮。",[15,1500,1501],{},"随后就要开始编写我们的教本了，这是我的",[58,1503,1505],{"className":663,"code":1504,"language":665,"meta":46,"style":46},"#!/bin/bash\n\nDATABASE_URL=\"postgres://\"\nDATE=$(date '+%F')\n\nTG_BOT_TOKEN='1145141919:ABCDEFGHIJKLVMNOPQRSTUVWXYZabcdefgh'\nTG_CHAT_ID='9191415411'\n\npg_dump ${DATABASE_URL} > umami_dump_${DATE}.sql\ncurl -F document=@umami_dump_${DATE}.sql https://api.telegram.org/bot${TG_BOT_TOKEN}/sendDocument?chat_id=${TG_CHAT_ID}\nrm umami_dump_${DATE}.sql\n",[64,1506,1507,1513,1517,1527,1545,1549,1559,1569,1573,1593,1620],{"__ignoreMap":46},[67,1508,1509],{"class":69,"line":70},[67,1510,1512],{"class":1511},"sJ8bj","#!/bin/bash\n",[67,1514,1515],{"class":69,"line":76},[67,1516,86],{"emptyLinePlaceholder":85},[67,1518,1519,1522,1524],{"class":69,"line":82},[67,1520,1521],{"class":303},"DATABASE_URL",[67,1523,326],{"class":408},[67,1525,1526],{"class":329},"\"postgres://\"\n",[67,1528,1529,1532,1534,1537,1539,1542],{"class":69,"line":89},[67,1530,1531],{"class":303},"DATE",[67,1533,326],{"class":408},[67,1535,1536],{"class":303},"$(",[67,1538,1454],{"class":322},[67,1540,1541],{"class":329}," '+%F'",[67,1543,1544],{"class":303},")\n",[67,1546,1547],{"class":69,"line":95},[67,1548,86],{"emptyLinePlaceholder":85},[67,1550,1551,1554,1556],{"class":69,"line":101},[67,1552,1553],{"class":303},"TG_BOT_TOKEN",[67,1555,326],{"class":408},[67,1557,1558],{"class":329},"'1145141919:ABCDEFGHIJKLVMNOPQRSTUVWXYZabcdefgh'\n",[67,1560,1561,1564,1566],{"class":69,"line":107},[67,1562,1563],{"class":303},"TG_CHAT_ID",[67,1565,326],{"class":408},[67,1567,1568],{"class":329},"'9191415411'\n",[67,1570,1571],{"class":69,"line":113},[67,1572,86],{"emptyLinePlaceholder":85},[67,1574,1575,1578,1581,1584,1587,1590],{"class":69,"line":119},[67,1576,1577],{"class":322},"pg_dump",[67,1579,1580],{"class":303}," ${DATABASE_URL} ",[67,1582,1583],{"class":408},">",[67,1585,1586],{"class":329}," umami_dump_",[67,1588,1589],{"class":303},"${DATE}",[67,1591,1592],{"class":329},".sql\n",[67,1594,1595,1597,1600,1603,1605,1608,1611,1614,1617],{"class":69,"line":125},[67,1596,672],{"class":322},[67,1598,1599],{"class":412}," -F",[67,1601,1602],{"class":329}," document=@umami_dump_",[67,1604,1589],{"class":303},[67,1606,1607],{"class":329},".sql",[67,1609,1610],{"class":329}," https://api.telegram.org/bot",[67,1612,1613],{"class":303},"${TG_BOT_TOKEN}",[67,1615,1616],{"class":329},"/sendDocument?chat_id=",[67,1618,1619],{"class":303},"${TG_CHAT_ID}\n",[67,1621,1622,1625,1627,1629],{"class":69,"line":130},[67,1623,1624],{"class":322},"rm",[67,1626,1586],{"class":329},[67,1628,1589],{"class":303},[67,1630,1592],{"class":329},[15,1632,1633,1634,1637,1638,1641],{},"将这段代码保存为 ",[64,1635,1636],{},"umami_db_dumper.sh","，随后 ",[64,1639,1640],{},"chmod +x ./umami_db_dumper.sh"," 授予可执行权限。",[15,1643,1644],{},"可以先在命令行中执行命令试一下这段脚本是否正常工作",[58,1646,1648],{"className":663,"code":1647,"language":665,"meta":46,"style":46},"./umami_db_dumper.sh\n",[64,1649,1650],{"__ignoreMap":46},[67,1651,1652],{"class":69,"line":70},[67,1653,1647],{"class":322},[15,1655,1656],{},"这段代码在我本机正常工作，可惜在我的 Ubuntu VPS 上报错",[58,1658,1661],{"className":1659,"code":1660,"language":553},[551],"pg_dump: error: server version: 14.1; pg_dump version: 12.17 (Ubuntu 12.17-0ubuntu0.20.04.1)\npg_dump: error: aborting because of server version mismatch\n",[64,1662,1660],{"__ignoreMap":46},[15,1664,1665,1666,1671],{},"看上去是 VPS 上的 PostgreSQL 版本过低，Google 搜索一顿后，我在一篇",[32,1667,1670],{"href":1668,"rel":1669},"https://devopsworld.medium.com/upgrade-pg-dump-version-in-ubuntu-545d691d4695",[36],"「Upgrade pg_dump version in ubuntu | by Anushareddy」"," 文章中找到了方案，添加 PostgreSQL 官方提供的 apt 源将 VPS 上的 PostgreSQL 更新到新版即可解决。",[58,1673,1675],{"className":663,"code":1674,"language":665,"meta":46,"style":46},"wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -\necho \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list\napt update\napt install postgresql-client\n",[64,1676,1677,1705,1728,1736],{"__ignoreMap":46},[67,1678,1679,1682,1685,1688,1691,1694,1696,1699,1702],{"class":69,"line":70},[67,1680,1681],{"class":322},"wget",[67,1683,1684],{"class":412}," --quiet",[67,1686,1687],{"class":412}," -O",[67,1689,1690],{"class":329}," -",[67,1692,1693],{"class":329}," https://www.postgresql.org/media/keys/ACCC4CF8.asc",[67,1695,681],{"class":408},[67,1697,1698],{"class":322}," apt-key",[67,1700,1701],{"class":329}," add",[67,1703,1704],{"class":329}," -\n",[67,1706,1707,1710,1713,1716,1719,1722,1725],{"class":69,"line":76},[67,1708,1709],{"class":412},"echo",[67,1711,1712],{"class":329}," \"deb http://apt.postgresql.org/pub/repos/apt/ $(",[67,1714,1715],{"class":322},"lsb_release",[67,1717,1718],{"class":412}," -cs",[67,1720,1721],{"class":329},")-pgdg main\"",[67,1723,1724],{"class":408}," >",[67,1726,1727],{"class":329}," /etc/apt/sources.list.d/pgdg.list\n",[67,1729,1730,1733],{"class":69,"line":82},[67,1731,1732],{"class":322},"apt",[67,1734,1735],{"class":329}," update\n",[67,1737,1738,1740,1743],{"class":69,"line":89},[67,1739,1732],{"class":322},[67,1741,1742],{"class":329}," install",[67,1744,1745],{"class":329}," postgresql-client\n",[15,1747,1748,1749,1752],{},"确保脚本正常工作后，使用 ",[64,1750,1751],{},"crontab -e"," 设置自动任务",[58,1754,1756],{"className":663,"code":1755,"language":665,"meta":46,"style":46},"0 2 * * * /root/umami_db_dumper.sh\n",[64,1757,1758],{"__ignoreMap":46},[67,1759,1760,1763,1766,1769,1771,1773],{"class":69,"line":70},[67,1761,1762],{"class":322},"0",[67,1764,1765],{"class":412}," 2",[67,1767,1768],{"class":412}," *",[67,1770,1768],{"class":412},[67,1772,1768],{"class":412},[67,1774,1775],{"class":329}," /root/umami_db_dumper.sh\n",[15,1777,1778],{},[24,1779],{"alt":1780,"src":1781},"数据库备份","https://static.031130.xyz/uploads/2024/08/12/65c79455b2e40.webp",[206,1783,1784],{},"html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":1786},[],{"title":1788,"date":1789,"path":1790,"tags":1791,"body":1792},"在 JavaScript 中，箭头函数中的 this 指针到底指向哪里？","2024-01-14 02:50:03","/2024/01/14/where-does-this-refer-in-arrow-function-in-js",[219],{"type":12,"value":1793,"toc":2184},[1794,1801,2078,2081,2088,2094,2105,2108,2111,2122,2128,2144,2151,2157,2160,2167,2174,2181],[15,1795,1796,1797,1800],{},"这学期期末复习的时候，学校里负责上 JavaScript 的老师给我们提出了一个问题。下面这段代码中，",[64,1798,1799],{},"a.u2()"," 在 ES Module 下执行会抛出 TypeError 的异常，在 CommonJS 下运行则会输出 undefined，而 B 这个类的 u2 函数则能够在对象实例化以后正常运行。",[58,1802,1806],{"className":1803,"code":1804,"language":1805,"meta":46,"style":46},"language-javascript shiki shiki-themes github-light github-dark","const a = {\n    x: 3,\n    u1: function () {\n        console.log(this.x)\n    },\n    u2: () => {\n        console.log(this.x)\n    }\n}\n\nclass b {\n    x = 3\n\n    u1 = function () {\n        console.log(this.x)\n    }\n\n    u2 = () => {\n        console.log(this.x)\n    }\n}\n\na.u1()\n// 3\na.u2()\n// undefined\n\nnew b().u1()\n// 3\nnew b().u2()\n// 3\n","javascript",[64,1807,1808,1820,1830,1844,1861,1866,1879,1891,1896,1900,1904,1914,1925,1929,1940,1952,1956,1960,1974,1987,1992,1997,2002,2013,2019,2029,2035,2040,2055,2060,2073],{"__ignoreMap":46},[67,1809,1810,1812,1815,1817],{"class":69,"line":70},[67,1811,409],{"class":408},[67,1813,1814],{"class":412}," a",[67,1816,416],{"class":408},[67,1818,1819],{"class":303}," {\n",[67,1821,1822,1825,1828],{"class":69,"line":76},[67,1823,1824],{"class":303},"    x: ",[67,1826,1827],{"class":412},"3",[67,1829,427],{"class":303},[67,1831,1832,1835,1838,1841],{"class":69,"line":82},[67,1833,1834],{"class":322},"    u1",[67,1836,1837],{"class":303},": ",[67,1839,1840],{"class":408},"function",[67,1842,1843],{"class":303}," () {\n",[67,1845,1846,1849,1852,1855,1858],{"class":69,"line":89},[67,1847,1848],{"class":303},"        console.",[67,1850,1851],{"class":322},"log",[67,1853,1854],{"class":303},"(",[67,1856,1857],{"class":412},"this",[67,1859,1860],{"class":303},".x)\n",[67,1862,1863],{"class":69,"line":95},[67,1864,1865],{"class":303},"    },\n",[67,1867,1868,1871,1874,1877],{"class":69,"line":101},[67,1869,1870],{"class":322},"    u2",[67,1872,1873],{"class":303},": () ",[67,1875,1876],{"class":408},"=>",[67,1878,1819],{"class":303},[67,1880,1881,1883,1885,1887,1889],{"class":69,"line":107},[67,1882,1848],{"class":303},[67,1884,1851],{"class":322},[67,1886,1854],{"class":303},[67,1888,1857],{"class":412},[67,1890,1860],{"class":303},[67,1892,1893],{"class":69,"line":113},[67,1894,1895],{"class":303},"    }\n",[67,1897,1898],{"class":69,"line":119},[67,1899,122],{"class":303},[67,1901,1902],{"class":69,"line":125},[67,1903,86],{"emptyLinePlaceholder":85},[67,1905,1906,1909,1912],{"class":69,"line":130},[67,1907,1908],{"class":408},"class",[67,1910,1911],{"class":322}," b",[67,1913,1819],{"class":303},[67,1915,1916,1920,1922],{"class":69,"line":136},[67,1917,1919],{"class":1918},"s4XuR","    x",[67,1921,416],{"class":408},[67,1923,1924],{"class":412}," 3\n",[67,1926,1927],{"class":69,"line":141},[67,1928,86],{"emptyLinePlaceholder":85},[67,1930,1931,1933,1935,1938],{"class":69,"line":444},[67,1932,1834],{"class":322},[67,1934,416],{"class":408},[67,1936,1937],{"class":408}," function",[67,1939,1843],{"class":303},[67,1941,1942,1944,1946,1948,1950],{"class":69,"line":452},[67,1943,1848],{"class":303},[67,1945,1851],{"class":322},[67,1947,1854],{"class":303},[67,1949,1857],{"class":412},[67,1951,1860],{"class":303},[67,1953,1954],{"class":69,"line":458},[67,1955,1895],{"class":303},[67,1957,1958],{"class":69,"line":464},[67,1959,86],{"emptyLinePlaceholder":85},[67,1961,1963,1965,1967,1970,1972],{"class":69,"line":1962},18,[67,1964,1870],{"class":322},[67,1966,416],{"class":408},[67,1968,1969],{"class":303}," () ",[67,1971,1876],{"class":408},[67,1973,1819],{"class":303},[67,1975,1977,1979,1981,1983,1985],{"class":69,"line":1976},19,[67,1978,1848],{"class":303},[67,1980,1851],{"class":322},[67,1982,1854],{"class":303},[67,1984,1857],{"class":412},[67,1986,1860],{"class":303},[67,1988,1990],{"class":69,"line":1989},20,[67,1991,1895],{"class":303},[67,1993,1995],{"class":69,"line":1994},21,[67,1996,122],{"class":303},[67,1998,2000],{"class":69,"line":1999},22,[67,2001,86],{"emptyLinePlaceholder":85},[67,2003,2004,2007,2010],{"class":69,"line":3},[67,2005,2006],{"class":303},"a.",[67,2008,2009],{"class":322},"u1",[67,2011,2012],{"class":303},"()\n",[67,2014,2016],{"class":69,"line":2015},24,[67,2017,2018],{"class":1511},"// 3\n",[67,2020,2022,2024,2027],{"class":69,"line":2021},25,[67,2023,2006],{"class":303},[67,2025,2026],{"class":322},"u2",[67,2028,2012],{"class":303},[67,2030,2032],{"class":69,"line":2031},26,[67,2033,2034],{"class":1511},"// undefined\n",[67,2036,2038],{"class":69,"line":2037},27,[67,2039,86],{"emptyLinePlaceholder":85},[67,2041,2043,2046,2048,2051,2053],{"class":69,"line":2042},28,[67,2044,2045],{"class":408},"new",[67,2047,1911],{"class":322},[67,2049,2050],{"class":303},"().",[67,2052,2009],{"class":322},[67,2054,2012],{"class":303},[67,2056,2058],{"class":69,"line":2057},29,[67,2059,2018],{"class":1511},[67,2061,2063,2065,2067,2069,2071],{"class":69,"line":2062},30,[67,2064,2045],{"class":408},[67,2066,1911],{"class":322},[67,2068,2050],{"class":303},[67,2070,2026],{"class":322},[67,2072,2012],{"class":303},[67,2074,2076],{"class":69,"line":2075},31,[67,2077,2018],{"class":1511},[15,2079,2080],{},"这个问题涉及到 JavaScript 中箭头函数的作用域以及 this 指向。",[15,2082,2083,2084,2087],{},"**在 JS 中使用 function 关键字定义的普通函数中，this 指针遵循一个规则：谁调用指向谁。**即 ",[64,2085,2086],{},"obj.func()"," 这种调用情况下，func 方法内部的this指向obj；如果没有调用者，则严格模式下 this 为 undefined，非严格模式下 this 指向window(浏览器)或者global(node环境)。",[15,2089,2090,2091],{},"而箭头函数比较特殊，",[587,2092,2093],{},"箭头函数的 this 在定义时就被绑定，绑定的是定义时所在作用域中的 this。",[15,2095,2096,2097,2100,2101,2104],{},"在老师给的示例代码中，第一行定义了 a 这个对象字面量，而",[587,2098,2099],{},"定义对象字面量不会创建新的作用域","，因此 a 中定义的 u2 的 this 指向的是全局对象。因此在 Es Module 默认启用 strict mode 的情况下，全局对象的 this 指向 undefined，进而导致 a 的 u2 内 this 也指向 undefined，this.x 就抛了 TypeError；而在 ",[587,2102,2103],{},"CommonJS 未启用 strict mode 的情况下，全局对象的 this 指向全局对象","，因而 u2 内的 this 也指向全局对象，因此 this 存在，this.x 就不会抛 TypeError，只会报 undefined。",[15,2106,2107],{},"而 B 类在对象初始化阶段拥有一个新的作用域，因此箭头函数的 this 能够正确指向 B 被实例化出来的对象，因此也就能够正确读取到 this.x 的值。",[15,2109,2110],{},"理论上来说，我们可以给全局对象也赋一个不一样的 x 值，这样 a.u2() 就能够读取到全局对象中的 x 值，验证我们的结论。",[15,2112,2113,2114,2117,2118,2121],{},"在浏览器中，可以在代码的头部加一行 ",[64,2115,2116],{},"var x = 10"," 或者 ",[64,2119,2120],{},"window.x = 10","，可以看到a.u2() 顺利的输出了 10，验证了我的结论。",[15,2123,2124],{},[24,2125],{"alt":2126,"src":2127},"浏览器控制台调试","https://static.031130.xyz/uploads/2024/08/12/65a2e1d093b78.webp",[15,2129,2130,2131,2117,2133,2136,2137,2139,2140,2143],{},"但在 Node.js 中，直接使用 ",[64,2132,2116],{},[64,2134,2135],{},"global.x = 10"," 并不能达到我们想要的效果。因为Node.js 中的每个 CommonJS 模块都有其自己的模块作用域，即模块的顶层作用域不是全局作用域。在模块内部，",[64,2138,1857],{}," 关键字不是指向 ",[64,2141,2142],{},"global"," 对象，而是指向模块的导出对象。这是为了确保模块内部的作用域隔离和模块的封装性。",[15,2145,2146,2147,2150],{},"那么我们可以通过为模块的导出对象添加一个 x 属性来验证我们的结论，我们可以使用 ",[64,2148,2149],{},"exports.x = 10"," 来为模块的顶层作用域添加一个值为 10 的 x 属性。",[15,2152,2153],{},[24,2154],{"alt":2155,"src":2156},"nodejs 环境运行","https://static.031130.xyz/uploads/2024/08/12/65a2e379ba89e.webp",[739,2158,2159],{"id":2159},"参考文章",[15,2161,2162],{},[32,2163,2166],{"href":2164,"rel":2165},"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions",[36],"箭头函数表达式 - JavaScript | MDN",[15,2168,2169],{},[32,2170,2173],{"href":2171,"rel":2172},"https://segmentfault.com/q/1010000022948115",[36],"ES6箭头函数作用域的问题",[15,2175,2176],{},[32,2177,2180],{"href":2178,"rel":2179},"https://www.zhihu.com/tardis/zm/art/57204184",[36],"ES6箭头函数的this指向详解",[206,2182,2183],{},"html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .s4XuR, html code.shiki .s4XuR{--shiki-default:#E36209;--shiki-dark:#FFAB70}html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":2185},[2186],{"id":2159,"depth":76,"text":2159},{"title":2188,"date":2189,"path":2190,"tags":2191,"body":2193},"结合 Vue.js 与 php 完成的 web 期末大作业，讲讲前后端分离站点开发与部署中可能遇到的 CORS 跨域问题","2024-01-10 23:55:36","/2024/01/10/cors-when-using-splited-frontend-and-backend",[217,997,728,2192,218],"笔记",{"type":12,"value":2194,"toc":2582},[2195,2203,2206,2210,2213,2220,2225,2236,2249,2252,2263,2266,2278,2287,2296,2302,2307,2310,2319,2322,2325,2338,2341,2344,2347,2350,2356,2392,2395,2553,2560,2567,2570,2579],[15,2196,2197,2198,2202],{},"在",[32,2199,2201],{"href":2200},"/2023/12/27/php-and-vuejs-project-deploy-on-caddy/","上一篇博客","中，我讲到了 web 期末大作业的上云部署。整个项目是使用 Vue.js 作为前端，php 作为后端，mysql 作为数据库实现的。",[15,2204,2205],{},"在使用 Vue.js 开发前端界面时，我选择了使用 vite 脚手架帮助开发，这意味着我的作品将使用前后端分离的架构实现。因此在开发部署过程中均遇到了跨域的问题，故写下这篇博客记录下解决方案。",[739,2207,2209],{"id":2208},"基于后端返回对应-http-响应头的解决方案","基于后端返回对应 http 响应头的解决方案",[1027,2211,2212],{"id":2212},"开发阶段",[15,2214,2215,2216,2219],{},"在我完成前后端的开发，并且经过 Apifox 的 mock 测试后，第一次在浏览器尝试前后端对接，遇到了 ",[64,2217,2218],{},"CORS Missing Allow Origin"," 的报错。",[15,2221,2222],{},[24,2223],{"alt":2218,"src":2224},"https://static.031130.xyz/uploads/2024/08/12/659ec607c69af.webp",[15,2226,2227,2228,2231,2232,2235],{},"vite 启动的 dev 开发服务器使用的域是 ",[64,2229,2230],{},"http://localhost:5173"," ，而 php 后端我指定的是 ",[64,2233,2234],{},"http://127.0.0.1:8080"," ，前后端并不运行在一个域下，前端使用 Axios(AJAX) 向后端发送请求获取资源输入 CORS 跨域资源共享的范畴。",[15,2237,2238,2239,2244,2245,2248],{},"关于跨域资源共享 CORS 的相关内容，",[32,2240,2243],{"href":2241,"rel":2242},"https://www.ruanyifeng.com/blog/2016/04/cors.html",[36],"阮一峰老师在 2016 年就已经在他的博客中有过解释","，看了下也是全网中文内容中解释得比较通俗易懂的，因此本文在这方面不过多做解释。错误的提示信息是 Missing Allow Origin，结合阮一峰老师的博文，我们应该在后端向前端发送的 http 响应头中添加 ",[64,2246,2247],{},"Access-Control-Allow-Origin"," 这一字段。",[15,2250,2251],{},"在一般的前后端分离项目（不涉及 cookie 等 Credentials 属性）中，我们可以将这一字段设置为 * 通配符，默认允许所有的域向自己发起跨域资源请求。php 可以通过下面这行代码很方便地进行设置:",[58,2253,2257],{"className":2254,"code":2255,"language":2256,"meta":46,"style":46},"language-php shiki shiki-themes github-light github-dark","header('Access-Control-Allow-Origin: *');\n","php",[64,2258,2259],{"__ignoreMap":46},[67,2260,2261],{"class":69,"line":70},[67,2262,2255],{},[15,2264,2265],{},"但在用户的注册登录方面，我使用了 session 作为用户的登录凭据。阮一峰老师关于 CORS 的博文中有这样一句话:",[252,2267,2268],{},[15,2269,2270,2271,2273,2274,2277],{},"需要注意的是，如果要发送Cookie，",[64,2272,2247],{},"就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的",[64,2275,2276],{},"document.cookie","也无法读取服务器域名下的Cookie。",[15,2279,2280,2281,2283,2284,2286],{},"因此，我们必须明确指定 ",[64,2282,2247],{}," 字段为前端所使用的域，写上 ",[64,2285,2230],{}," 才行。",[58,2288,2290],{"className":2254,"code":2289,"language":2256,"meta":46,"style":46},"header('Access-Control-Allow-Origin: http://localhost:5173');\n",[64,2291,2292],{"__ignoreMap":46},[67,2293,2294],{"class":69,"line":70},[67,2295,2289],{},[15,2297,2298,2299],{},"再次刷新网页，获得了新的错误 ",[64,2300,2301],{},"CORS Missing Allow Credentials",[15,2303,2304],{},[24,2305],{"alt":2301,"src":2306},"https://static.031130.xyz/uploads/2024/08/12/659ec95acc0bc.webp",[15,2308,2309],{},"这个问题处理起来也简单",[58,2311,2313],{"className":2254,"code":2312,"language":2256,"meta":46,"style":46},"header('Access-Control-Allow-Credentials: true');\n",[64,2314,2315],{"__ignoreMap":46},[67,2316,2317],{"class":69,"line":70},[67,2318,2312],{},[15,2320,2321],{},"再次运行网页，跨域问题成功解决。",[1027,2323,2324],{"id":2324},"部署阶段",[15,2326,2327,2328,2330,2331,2334,2335,2337],{},"顺着这个思路进行下去，我们在部署阶段解决跨域问题需要做的事情很简单。提前将前端部署起来，将前端的域写到后端返回给前端的 http 相应头中即可。需要注意的是，",[64,2329,2247],{}," 字段仅允许填写一个值，如果需要同时允许来自多个不同域的跨域资源共享，后端部分需要根据前端发来的请求头中的 ",[64,2332,2333],{},"Origin"," 字段相应地设置响应头中的 ",[64,2336,2247],{}," 。当然，nginx 等先进的 static server 也支持劫持 http 请求，添加相关的 Access-Control 语句，也可以在这一层解决这个问题。",[739,2339,2340],{"id":2340},"直接规避跨域的方案",[15,2342,2343],{},"上面通过后端返回带有 Access-Control 语句相应头的解决方案确实可以解决问题，却显得不够优雅。开发和部署阶段都要手动的去指定前端的域来允许跨域资源共享，这一点过于麻烦了，因此引出了下面的解决方案。",[1027,2345,2212],{"id":2346},"开发阶段-1",[15,2348,2349],{},"在 vite（或者其他同类开发服务器）的帮助下，我们可以使用前端的开发服务器去反向代理后端服务，也就是让前端的请求打到前端服务器上，由前端服务器去返回后端服务器返回的结果。",[15,2351,229,2352,2355],{},[64,2353,2354],{},"vite.config.ts"," 配置文件下，我将原本的",[58,2357,2361],{"className":2358,"code":2359,"language":2360,"meta":46,"style":46},"language-typescript shiki shiki-themes github-light github-dark","export default defineConfig({\n  plugins: [vue()],\n})\n","typescript",[64,2362,2363,2377,2387],{"__ignoreMap":46},[67,2364,2365,2368,2371,2374],{"class":69,"line":70},[67,2366,2367],{"class":408},"export",[67,2369,2370],{"class":408}," default",[67,2372,2373],{"class":322}," defineConfig",[67,2375,2376],{"class":303},"({\n",[67,2378,2379,2382,2384],{"class":69,"line":76},[67,2380,2381],{"class":303},"  plugins: [",[67,2383,296],{"class":322},[67,2385,2386],{"class":303},"()],\n",[67,2388,2389],{"class":69,"line":82},[67,2390,2391],{"class":303},"})\n",[15,2393,2394],{},"换成了",[58,2396,2398],{"className":2358,"code":2397,"language":2360,"meta":46,"style":46},"export default () => {\n  process.env = { ...process.env, ...loadEnv(process.cwd(),'') };\n\n  const config = {\n    plugins: [vue()],\n    server: {\n      proxy: {\n        '/api': {\n          target: http://127.0.0.1:8080,\n          changeOrigin: true,\n          secure: false,\n        }\n      }\n    }\n  }\n  return defineConfig(config)\n};\n",[64,2399,2400,2412,2448,2452,2464,2473,2478,2483,2491,2499,2509,2519,2524,2529,2533,2538,2548],{"__ignoreMap":46},[67,2401,2402,2404,2406,2408,2410],{"class":69,"line":70},[67,2403,2367],{"class":408},[67,2405,2370],{"class":408},[67,2407,1969],{"class":303},[67,2409,1876],{"class":408},[67,2411,1819],{"class":303},[67,2413,2414,2417,2419,2422,2425,2428,2430,2433,2436,2439,2442,2445],{"class":69,"line":76},[67,2415,2416],{"class":303},"  process.env ",[67,2418,326],{"class":408},[67,2420,2421],{"class":303}," { ",[67,2423,2424],{"class":408},"...",[67,2426,2427],{"class":303},"process.env, ",[67,2429,2424],{"class":408},[67,2431,2432],{"class":322},"loadEnv",[67,2434,2435],{"class":303},"(process.",[67,2437,2438],{"class":322},"cwd",[67,2440,2441],{"class":303},"(),",[67,2443,2444],{"class":329},"''",[67,2446,2447],{"class":303},") };\n",[67,2449,2450],{"class":69,"line":82},[67,2451,86],{"emptyLinePlaceholder":85},[67,2453,2454,2457,2460,2462],{"class":69,"line":89},[67,2455,2456],{"class":408},"  const",[67,2458,2459],{"class":412}," config",[67,2461,416],{"class":408},[67,2463,1819],{"class":303},[67,2465,2466,2469,2471],{"class":69,"line":95},[67,2467,2468],{"class":303},"    plugins: [",[67,2470,296],{"class":322},[67,2472,2386],{"class":303},[67,2474,2475],{"class":69,"line":101},[67,2476,2477],{"class":303},"    server: {\n",[67,2479,2480],{"class":69,"line":107},[67,2481,2482],{"class":303},"      proxy: {\n",[67,2484,2485,2488],{"class":69,"line":113},[67,2486,2487],{"class":329},"        '/api'",[67,2489,2490],{"class":303},": {\n",[67,2492,2493,2496],{"class":69,"line":119},[67,2494,2495],{"class":303},"          target: http:",[67,2497,2498],{"class":1511},"//127.0.0.1:8080,\n",[67,2500,2501,2504,2507],{"class":69,"line":125},[67,2502,2503],{"class":303},"          changeOrigin: ",[67,2505,2506],{"class":412},"true",[67,2508,427],{"class":303},[67,2510,2511,2514,2517],{"class":69,"line":130},[67,2512,2513],{"class":303},"          secure: ",[67,2515,2516],{"class":412},"false",[67,2518,427],{"class":303},[67,2520,2521],{"class":69,"line":136},[67,2522,2523],{"class":303},"        }\n",[67,2525,2526],{"class":69,"line":141},[67,2527,2528],{"class":303},"      }\n",[67,2530,2531],{"class":69,"line":444},[67,2532,1895],{"class":303},[67,2534,2535],{"class":69,"line":452},[67,2536,2537],{"class":303},"  }\n",[67,2539,2540,2543,2545],{"class":69,"line":458},[67,2541,2542],{"class":408},"  return",[67,2544,2373],{"class":322},[67,2546,2547],{"class":303},"(config)\n",[67,2549,2550],{"class":69,"line":464},[67,2551,2552],{"class":303},"};\n",[15,2554,2555,2556,2559],{},"同时将 Axios create 时的 ",[64,2557,2558],{},"baseURL"," 参数去除。",[15,2561,2562,2563,2566],{},"这样一套组合拳下来，将所有打向 ",[64,2564,2565],{},"/api*"," 的请求和响应通过前端的开发服务器作为中介做了中转，让浏览器以为并没有跨域（事实上也没有跨域），从而解决了相关的问题。",[1027,2568,2324],{"id":2569},"部署阶段-1",[15,2571,2572,2573,2578],{},"在开发阶段，我们通过 vite 的开发服务器做反向代理规避了跨域请求，但在部署阶段就用不了了。由于 vite 服务器的性能太弱，一般情况下我们是不会在生产环境中使用 vite 作为正式的服务器的，而是使用 vite build 出网站的静态网页资源，通过 nginx 等 static server 去向用户提供前端网页。而通过 vite build 出来的静态网页资源本身是不具备反向代理的能力的，这意味着没法在前端侧规避跨域问题。此时，我们应该配置 nginx 规避跨域问题。我一向不怎么使用 nginx，使用的是它的平替品 caddy，因此 nginx 的配置文件需要大家自行搜索，",[32,2574,2577],{"href":2575,"rel":2576},"https://zhul.in/2023/12/27/php-and-vuejs-project-deploy-on-caddy/#Caddy-%E9%85%8D%E7%BD%AE",[36],"我的 caddyfile 在上一篇博客中已经给出","，仅供参考。",[206,2580,2581],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}",{"title":46,"searchDepth":76,"depth":76,"links":2583},[2584,2588],{"id":2208,"depth":76,"text":2209,"children":2585},[2586,2587],{"id":2212,"depth":82,"text":2212},{"id":2324,"depth":82,"text":2324},{"id":2340,"depth":76,"text":2340,"children":2589},[2590,2591],{"id":2346,"depth":82,"text":2212},{"id":2569,"depth":82,"text":2324},{"title":2593,"date":2594,"path":2595,"tags":2596,"body":2598},"vuejs、php、caddy 与 docker —— web 期末大作业上云部署","2023-12-27 22:09:00","/2023/12/27/php-and-vuejs-project-deploy-on-caddy",[997,2597,217,728,1000,218],"Caddy",{"type":12,"value":2599,"toc":2899},[2600,2617,2620,2629,2632,2660,2668,2682,2689,2752,2766,2770,2773,2780,2786,2789,2792,2799,2825,2828,2831,2842,2846,2849,2855,2878,2882,2889,2896],[252,2601,2602,2605,2611,2614],{},[15,2603,2604],{},"这学期修了一门叫《用HTML5 和 PHP编写JavaScript，jQuery 和 AJAX脚本》的 web 课（对，听起来很奇怪的名字）。期末大作业是写一个影评系统，前端允许使用框架，后端仅允许使用 php，具体的作业要求如下",[15,2606,2607],{},[24,2608],{"alt":2609,"src":2610},"作业要求","https://static.031130.xyz/uploads/2024/08/12/658c4c3128ae4.webp",[15,2612,2613],{},"（源码会在验收结束以后开源）",[15,2615,2616],{},"大作业写了得要有三个礼拜，工作时长加起来得有 30 个小时，想着验收之前上线一段时间积累一些评论数据，验收的时候也会更加顺利一些，于是就开始尝试在服务器上部署。部署的过程还是比较复杂的，所以写下这篇博客记录一下。",[739,2618,2619],{"id":2619},"后端部分",[15,2621,2622,2623,2628],{},"早前有",[32,2624,2627],{"href":2625,"rel":2626},"https://zhul.in/2021/10/21/picuploader-on-archlinux-with-caddy/",[36],"《PicUploader使用系列（一）——在Archlinux上使用Caddy部署PicUploader》","的经验，便觉得使用 Caddy + php-fpm 部署的方式多少有点麻烦了，这次便尝试了使用 Docker 部署、Caddy 反代的方式。",[15,2630,2631],{},"Dockerfile 如下:",[58,2633,2635],{"className":1220,"code":2634,"language":1222,"meta":46,"style":46},"FROM php:8-apache\nRUN docker-php-ext-install mysqli\nRUN a2enmod rewrite\nCOPY . /var/www/html\nEXPOSE 80\n",[64,2636,2637,2641,2646,2650,2655],{"__ignoreMap":46},[67,2638,2639],{"class":69,"line":70},[67,2640,1229],{},[67,2642,2643],{"class":69,"line":76},[67,2644,2645],{},"RUN docker-php-ext-install mysqli\n",[67,2647,2648],{"class":69,"line":82},[67,2649,1234],{},[67,2651,2652],{"class":69,"line":89},[67,2653,2654],{},"COPY . /var/www/html\n",[67,2656,2657],{"class":69,"line":95},[67,2658,2659],{},"EXPOSE 80\n",[15,2661,2662,2663,2667],{},"在后端的根目录下有一个 .htaccess 文件，将所有的请求都交给 index.php 来处理，这样就可以根据我的",[32,2664,2201],{"href":2665,"rel":2666},"https://zhul.in/2023/12/12/php-simple-rest-api/",[36],"中所提到的方式去构建不使用任何 php 框架实现的简易 router 效果",[58,2669,2671],{"className":1136,"code":2670,"language":1138,"meta":46,"style":46},"RewriteEngine On\nRewriteRule ^(.*) index.php [QSA,L]\n",[64,2672,2673,2678],{"__ignoreMap":46},[67,2674,2675],{"class":69,"line":70},[67,2676,2677],{},"RewriteEngine On\n",[67,2679,2680],{"class":69,"line":76},[67,2681,1163],{},[15,2683,2684,2685,2688],{},"构建 Docker 镜像时使用 ",[64,2686,2687],{},"docker build . -t mrs-php"," 命令，运行 docker 容器时使用命令",[58,2690,2692],{"className":663,"code":2691,"language":665,"meta":46,"style":46},"docker run -d \\\n    -p 7788:80 \\\n    --name mrs-php \\\n    -v /path/to/uploads:/var/www/html/uploads \\\n    --restart unless-stopped \\\n    mrs-php\n",[64,2693,2694,2707,2717,2727,2737,2747],{"__ignoreMap":46},[67,2695,2696,2699,2702,2704],{"class":69,"line":70},[67,2697,2698],{"class":322},"docker",[67,2700,2701],{"class":329}," run",[67,2703,1443],{"class":412},[67,2705,2706],{"class":412}," \\\n",[67,2708,2709,2712,2715],{"class":69,"line":76},[67,2710,2711],{"class":412},"    -p",[67,2713,2714],{"class":329}," 7788:80",[67,2716,2706],{"class":412},[67,2718,2719,2722,2725],{"class":69,"line":82},[67,2720,2721],{"class":412},"    --name",[67,2723,2724],{"class":329}," mrs-php",[67,2726,2706],{"class":412},[67,2728,2729,2732,2735],{"class":69,"line":89},[67,2730,2731],{"class":412},"    -v",[67,2733,2734],{"class":329}," /path/to/uploads:/var/www/html/uploads",[67,2736,2706],{"class":412},[67,2738,2739,2742,2745],{"class":69,"line":95},[67,2740,2741],{"class":412},"    --restart",[67,2743,2744],{"class":329}," unless-stopped",[67,2746,2706],{"class":412},[67,2748,2749],{"class":69,"line":101},[67,2750,2751],{"class":329},"    mrs-php\n",[15,2753,2754,2755,1071,2758,2761,2762,2765],{},"这样，后端就在 7788 端口上开起来了，后续 Caddy 只要将打到 ",[64,2756,2757],{},"/api/*",[64,2759,2760],{},"/uploads/*"," 的请求转发到 7788 端口即可，避免了使用 php-fpm 时需要的配置。",[64,2763,2764],{},"uploads"," 目录是用来存放图片的，我将这个路径挂在在宿主机的目录下，方便备份导入等操作。",[1027,2767,2769],{"id":2768},"mysql-连接时的小插曲","mysql 连接时的小插曲",[15,2771,2772],{},"需要注意的是，在 Docker 容器中运行的 php 如果想要访问宿主机上的 mysql，需要注意修改 mysql 服务器的 ip 地址，并允许 mysql 接收来自非本机的请求。",[15,2774,2775,2776,2779],{},"在宿主机中运行 ",[64,2777,2778],{},"ip -br a"," 命令可以看到 docker 所采用的虚拟网卡的 ip 地址",[58,2781,2784],{"className":2782,"code":2783,"language":553},[551],"docker0          UP             172.17.0.1/16 fe80::42:eff:febf:b26c/64\n",[64,2785,2783],{"__ignoreMap":46},[15,2787,2788],{},"我这边得到的 ip 地址是 172.17.0.1，所以在 php 那边访问的数据库 ip 地址就应该是 172.17.0.1，而非 localhost 或者 127.0.0.1",[15,2790,2791],{},"此外，需要允许宿主机的 mysql 接收来自 Docker 容器的请求",[15,2793,2794,2795,2798],{},"使用 ",[64,2796,2797],{},"docker network inspect bridge"," 命令可以查到 docker 容器的 ip 地址，接着需要去允许来自这个 ip 的请求。建议去网上自行搜索，因为 mysql 语句我自己也不熟悉。我使用的 mysql 版本是 8，语句似乎和以前的版本不兼容？我使用下面三个命令轮着输就好了（有时候报错，有时侯又不报错），有大佬懂的话评论区讲讲。",[58,2800,2804],{"className":2801,"code":2802,"language":2803,"meta":46,"style":46},"language-mysql shiki shiki-themes github-light github-dark","use mysql;\nGRANT ALL ON *.* TO 'root'@'%';\nupdate user set host='%' where user='root';\nGRANT ALL ON *.* TO 'root'@'%';\n","mysql",[64,2805,2806,2811,2816,2821],{"__ignoreMap":46},[67,2807,2808],{"class":69,"line":70},[67,2809,2810],{},"use mysql;\n",[67,2812,2813],{"class":69,"line":76},[67,2814,2815],{},"GRANT ALL ON *.* TO 'root'@'%';\n",[67,2817,2818],{"class":69,"line":82},[67,2819,2820],{},"update user set host='%' where user='root';\n",[67,2822,2823],{"class":69,"line":89},[67,2824,2815],{},[739,2826,2827],{"id":2827},"前端部分",[15,2829,2830],{},"前端部分部署起来没什么难度",[15,2832,2833,2834,2837,2838,2841],{},"我使用的是 vite 开发的 vuejs 项目，直接使用 ",[64,2835,2836],{},"pnpm build"," 构建出静态文件，然后放入了 ",[64,2839,2840],{},"/var/www/mrs"," 目录，这部分没什么可说的",[739,2843,2845],{"id":2844},"caddy-配置","Caddy 配置",[15,2847,2848],{},"Caddy 配置如下",[58,2850,2853],{"className":2851,"code":2852,"language":553},[551],"example.com {\n    handle /api/* {\n        reverse_proxy localhost:7788\n    }\n\n    handle /uploads/* {\n        reverse_proxy localhost:7788\n    }\n\n    handle /* {\n        root * /var/www/mrs\n        file_server\n        try_files {path} /\n    }\n}\n",[64,2854,2852],{"__ignoreMap":46},[15,2856,2857,2858,1071,2860,2862,2863,2866,2867,2870,2871,2874,2875,2877],{},"将打到 ",[64,2859,2757],{},[64,2861,2760],{}," 都交给 7788 端口的后端进行处理，前端部分要使用 ",[64,2864,2865],{},"try_files"," 将请求都指向 ",[64,2868,2869],{},"/"," 或 ",[64,2872,2873],{},"/index.html"," 交由 vue-router 处理，否则 caddy 就找不到对应的文件了。这里我尝试过使用 route 关键词代替 handle，但 ",[64,2876,2865],{}," 的功能没有生效，这两者的区别官方文档中有提到，但我没看懂，等我以后看看有没有机会去折腾了。",[739,2879,2881],{"id":2880},"参考","参考:",[15,2883,2884],{},[32,2885,2888],{"href":2886,"rel":2887},"https://homeboyc.cn/blog/%E4%BD%BF%E7%94%A8caddy%E9%85%8D%E7%BD%AE%E5%90%8C%E4%B8%80%E5%9F%9F%E5%90%8D%E4%B8%8B%E7%9A%84%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB/",[36],"使用Caddy配置同一域名下的前后分离",[15,2890,2891],{},[32,2892,2895],{"href":2893,"rel":2894},"https://blog.lyh543.cn/notes/linux/caddy.html",[36],"Caddy 2",[206,2897,2898],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}",{"title":46,"searchDepth":76,"depth":76,"links":2900},[2901,2904,2905,2906],{"id":2619,"depth":76,"text":2619,"children":2902},[2903],{"id":2768,"depth":82,"text":2769},{"id":2827,"depth":76,"text":2827},{"id":2844,"depth":76,"text":2845},{"id":2880,"depth":76,"text":2881},127,1761695679909]