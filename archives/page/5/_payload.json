[{"data":1,"prerenderedAt":3024},["ShallowReactive",2],{"randomIndex/archives/page/5/":3,"index-page-5":4,"posts-nums-total":3023},25,[5,211,495,730,1000,1269,1471,1821,2253,2708],{"title":6,"date":7,"path":8,"tags":9,"body":11},"使用 Python 生成甘特图(Gantt Chart)","2024-04-24 12:02:58","/2024/04/24/generate-gantt-chart-with-python",[10],"Python",{"type":12,"value":13,"toc":209},"minimark",[14,18,21,28,39,42,48,51,54,57,145,150,152,200,205],[15,16,17],"p",{},"在写操作系统的作业的时候有几道题给出了几个进程的相关信息，要求我们画出几种简单调度的甘特图。操作系统的作业一直是电子版，上传 pdf 即可的。我觉得手画甘特图拍照嵌入 pdf 中不太优雅，过于掉价，因此就想直接生成甘特图嵌入。",[15,19,20],{},"在谷歌搜寻了一番，我发现现在的甘特图生成网站都太现代化了，根本不是操作系统课上教的样子了。",[15,22,23],{},[24,25],"img",{"alt":26,"src":27},"现代化的甘特图","https://static.031130.xyz/uploads/2024/08/12/662888bd5a0af.webp",[15,29,30,31,38],{},"所幸我找到了 ",[32,33,37],"a",{"href":34,"rel":35},"https://github.com/gao-keyong/matplotlib-gantt/",[36],"nofollow","gao-keyong/matplotlib-gantt","，虽然只有两个 star（没事，加上我就 3 stars 了），但确实能用，README 中的样例也是我期望的样子。",[15,40,41],{},"项目中自带了一个 jupyter 的示例，算得上是非常简单易上手的了，依赖方面只要装好 matplotlib 就可以使用，不存在依赖地狱。尽管是三年前的项目，在我本机的 Python 3.11 上仍然能够正常运行。",[15,43,44],{},[24,45],{"alt":46,"src":47},"","https://static.031130.xyz/uploads/2024/08/12/66288ba6414d4.webp",[15,49,50],{},"tuple 中的第一个数字表示从当前时间开始，第二个数字表示持续时间。每一个表示 category 的 list 中可以存在多个 tuple。",[15,52,53],{},"给一些咱生成的例子。",[55,56],"hr",{},[58,59,63],"pre",{"className":60,"code":61,"language":62,"meta":46,"style":46},"language-python shiki shiki-themes one-light one-dark-pro","from gantt import *\ncategory_names = ['P1', 'P2', 'P3', 'P4', 'P5']\n\nresults = {\n    'FCFS': [[(0,2)], [(2,1)], [(3,8)], [(11,4)], [(15,5)]],\n    'SJF': [[(1,2)], [(0,1)], [(12,8)], [(3,4)], [(7,5)]],\n    'non-compreemptive priority': [[(13,2)],[(19,1)],[(0,8)],[(15,4)],[(8,5)]],\n    'RR (quantum=2)': [[(0,2)], [(2,1)],[(3,2),(9,2),(15,2),(18,2)], [(5,2),(11,2)], [(7,2),(13,2),(17,1)]]\n}\n\narrival_t = [0, 0, 0, 0]\n\ngantt(category_names, results, arrival_t).show()\n\n","python",[64,65,66,74,80,87,93,99,105,111,117,123,128,134,139],"code",{"__ignoreMap":46},[67,68,71],"span",{"class":69,"line":70},"line",1,[67,72,73],{},"from gantt import *\n",[67,75,77],{"class":69,"line":76},2,[67,78,79],{},"category_names = ['P1', 'P2', 'P3', 'P4', 'P5']\n",[67,81,83],{"class":69,"line":82},3,[67,84,86],{"emptyLinePlaceholder":85},true,"\n",[67,88,90],{"class":69,"line":89},4,[67,91,92],{},"results = {\n",[67,94,96],{"class":69,"line":95},5,[67,97,98],{},"    'FCFS': [[(0,2)], [(2,1)], [(3,8)], [(11,4)], [(15,5)]],\n",[67,100,102],{"class":69,"line":101},6,[67,103,104],{},"    'SJF': [[(1,2)], [(0,1)], [(12,8)], [(3,4)], [(7,5)]],\n",[67,106,108],{"class":69,"line":107},7,[67,109,110],{},"    'non-compreemptive priority': [[(13,2)],[(19,1)],[(0,8)],[(15,4)],[(8,5)]],\n",[67,112,114],{"class":69,"line":113},8,[67,115,116],{},"    'RR (quantum=2)': [[(0,2)], [(2,1)],[(3,2),(9,2),(15,2),(18,2)], [(5,2),(11,2)], [(7,2),(13,2),(17,1)]]\n",[67,118,120],{"class":69,"line":119},9,[67,121,122],{},"}\n",[67,124,126],{"class":69,"line":125},10,[67,127,86],{"emptyLinePlaceholder":85},[67,129,131],{"class":69,"line":130},11,[67,132,133],{},"arrival_t = [0, 0, 0, 0]\n",[67,135,137],{"class":69,"line":136},12,[67,138,86],{"emptyLinePlaceholder":85},[67,140,142],{"class":69,"line":141},13,[67,143,144],{},"gantt(category_names, results, arrival_t).show()\n",[15,146,147],{},[24,148],{"alt":46,"src":149},"https://static.031130.xyz/uploads/2024/08/12/662890f78f1da.webp",[55,151],{},[58,153,155],{"className":60,"code":154,"language":62,"meta":46,"style":46},"from gantt import *\ncategory_names = ['P1', 'P2', 'P3', 'P4', 'P5', 'P6']\n\nresults = {\n    '': [[(0,20)], [(25,10),(45,10),(75,5)], [(35,10),(55,5),(80,10)], [(60,15)], [(100,5),(115,5)],[(105,10)]],\n}\n\narrival_t = [0]\n\ngantt(category_names, results, arrival_t).show()\n\n",[64,156,157,161,166,170,174,179,183,187,192,196],{"__ignoreMap":46},[67,158,159],{"class":69,"line":70},[67,160,73],{},[67,162,163],{"class":69,"line":76},[67,164,165],{},"category_names = ['P1', 'P2', 'P3', 'P4', 'P5', 'P6']\n",[67,167,168],{"class":69,"line":82},[67,169,86],{"emptyLinePlaceholder":85},[67,171,172],{"class":69,"line":89},[67,173,92],{},[67,175,176],{"class":69,"line":95},[67,177,178],{},"    '': [[(0,20)], [(25,10),(45,10),(75,5)], [(35,10),(55,5),(80,10)], [(60,15)], [(100,5),(115,5)],[(105,10)]],\n",[67,180,181],{"class":69,"line":101},[67,182,122],{},[67,184,185],{"class":69,"line":107},[67,186,86],{"emptyLinePlaceholder":85},[67,188,189],{"class":69,"line":113},[67,190,191],{},"arrival_t = [0]\n",[67,193,194],{"class":69,"line":119},[67,195,86],{"emptyLinePlaceholder":85},[67,197,198],{"class":69,"line":125},[67,199,144],{},[15,201,202],{},[24,203],{"alt":46,"src":204},"https://static.031130.xyz/uploads/2024/08/12/662891bfa52fc.webp",[206,207,208],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":210},[],{"title":212,"date":213,"path":214,"tags":215,"body":220},"uniapp 中的图片预加载","2024-04-01 05:31:25","/2024/04/01/image-preload-in-uniapp",[216,217,218,219],"uniapp","Vue.js","Web","JavaScript",{"type":12,"value":221,"toc":493},[222,225,227,240,242,251,261,271,277,283,285,292,478,483,490],[15,223,224],{},"最近在做微信小程序的时候遇到了图片资源过大无法正常打包的问题，没什么太好的方法，只能是使用图床托管这些图片资源。但部分图片的体积实在太大，即使是采用了境内 cdn 的图床，即使是采用 webp 对图片进行了压缩，部分图片都需要小几秒去把图片加载出来，这导致的用户体验就不是很好了，因此我们需要实现图片预加载的功能。",[55,226],{},[15,228,229,230,235,236,239],{},"在 ",[32,231,234],{"href":232,"rel":233},"https://uniapp.dcloud.net.cn/api/preload-page.html#preloadpage",[36],"uniapp 的官方文档","中，我找到了 ",[64,237,238],{},"uni.preloadPage(OBJECT)"," 方法。很可惜，这个方法并不支持微信小程序，自然不能完成被预加载页面的图片资源预加载。",[55,241],{},[15,243,244,245,250],{},"经过搜索，在",[32,246,249],{"href":247,"rel":248},"https://frontend.mimiwuqi.com/qianduan/202517.html",[36],"一篇奇奇怪怪的文章","中提到：",[252,253,254],"blockquote",{},[15,255,256,257,260],{},"在UniApp中，图片预加载可以通过使用",[64,258,259],{},"uni.getImageInfo","方法来实现。这个方法可以获取图片的信息，包括宽度、高度等。可以在应用启动时就开始加载图片，以提高后续图片显示的速度。",[15,262,263,264,267,268,270],{},"很遗憾，经过实测，提前使用 ",[64,265,266],{},"getImageInfo()"," 方法并不能实现图片的预加载。",[64,269,266],{}," 获取时的 Type 是 xhr，而后续图片加载时的 Type 为 webp，图片会被重复下载，并没有实现预加载的作用。",[15,272,273],{},[24,274],{"alt":275,"src":276},"下载测试","https://static.031130.xyz/uploads/2024/08/12/6609d97bc4f7f.webp",[15,278,279,280,282],{},"上图中，蓝色部分是 ",[64,281,266],{}," 的网络请求，红色部分是真正的图片加载请求，可谓是一点用都没有，该加载慢还是加载慢。",[55,284],{},[15,286,287,288,291],{},"那有没有什么办法能够实现预加载呢？我没找到优雅的方法，选择在应用的首页创建一个 ",[64,289,290],{},"display: none"," 的 view 将所有的图片先加载一遍。",[58,293,297],{"className":294,"code":295,"language":296,"meta":46,"style":46},"language-vue shiki shiki-themes one-light one-dark-pro","\u003Ctemplate>\n    \u003Cview style=\"display: none;\">\n        \u003Cimage\n            v-for=\"image in imageToPreload\"\n            :src=\"image\"\n        />\n    \u003C/view>\n\u003C/template>\n\u003Cscript setup lang=\"ts\">\nconst imageToPreload = [\n    \"https://http.cat/100\",\n    \"https://http.cat/200\",\n    \"https://http.cat/300\",\n    \"https://http.cat/400\",\n    \"https://http.cat/500\"\n]\n\u003C/script>\n","vue",[64,298,299,312,339,347,357,367,372,381,390,410,427,435,442,449,457,463,469],{"__ignoreMap":46},[67,300,301,305,309],{"class":69,"line":70},[67,302,304],{"class":303},"s5ixo","\u003C",[67,306,308],{"class":307},"sJa8x","template",[67,310,311],{"class":303},">\n",[67,313,314,317,320,324,327,331,335,337],{"class":69,"line":76},[67,315,316],{"class":303},"    \u003C",[67,318,319],{"class":307},"view",[67,321,323],{"class":322},"sAGMh"," style",[67,325,326],{"class":303},"=",[67,328,330],{"class":329},"sDhpE","\"",[67,332,334],{"class":333},"s-4uI","display: none;",[67,336,330],{"class":329},[67,338,311],{"class":303},[67,340,341,344],{"class":69,"line":82},[67,342,343],{"class":303},"        \u003C",[67,345,346],{"class":307},"image\n",[67,348,349,352,354],{"class":69,"line":89},[67,350,351],{"class":322},"            v-for",[67,353,326],{"class":303},[67,355,356],{"class":329},"\"image in imageToPreload\"\n",[67,358,359,362,364],{"class":69,"line":95},[67,360,361],{"class":322},"            :src",[67,363,326],{"class":303},[67,365,366],{"class":329},"\"image\"\n",[67,368,369],{"class":69,"line":101},[67,370,371],{"class":303},"        />\n",[67,373,374,377,379],{"class":69,"line":107},[67,375,376],{"class":303},"    \u003C/",[67,378,319],{"class":307},[67,380,311],{"class":303},[67,382,383,386,388],{"class":69,"line":113},[67,384,385],{"class":303},"\u003C/",[67,387,308],{"class":307},[67,389,311],{"class":303},[67,391,392,394,397,400,403,405,408],{"class":69,"line":119},[67,393,304],{"class":303},[67,395,396],{"class":307},"script",[67,398,399],{"class":322}," setup",[67,401,402],{"class":322}," lang",[67,404,326],{"class":303},[67,406,407],{"class":329},"\"ts\"",[67,409,311],{"class":303},[67,411,412,416,420,424],{"class":69,"line":125},[67,413,415],{"class":414},"sLKXg","const",[67,417,419],{"class":418},"sNmU0"," imageToPreload",[67,421,423],{"class":422},"s_Sar"," =",[67,425,426],{"class":303}," [\n",[67,428,429,432],{"class":69,"line":130},[67,430,431],{"class":329},"    \"https://http.cat/100\"",[67,433,434],{"class":303},",\n",[67,436,437,440],{"class":69,"line":136},[67,438,439],{"class":329},"    \"https://http.cat/200\"",[67,441,434],{"class":303},[67,443,444,447],{"class":69,"line":141},[67,445,446],{"class":329},"    \"https://http.cat/300\"",[67,448,434],{"class":303},[67,450,452,455],{"class":69,"line":451},14,[67,453,454],{"class":329},"    \"https://http.cat/400\"",[67,456,434],{"class":303},[67,458,460],{"class":69,"line":459},15,[67,461,462],{"class":329},"    \"https://http.cat/500\"\n",[67,464,466],{"class":69,"line":465},16,[67,467,468],{"class":303},"]\n",[67,470,472,474,476],{"class":69,"line":471},17,[67,473,385],{"class":303},[67,475,396],{"class":307},[67,477,311],{"class":303},[15,479,480],{},[24,481],{"alt":275,"src":482},"https://static.031130.xyz/uploads/2024/08/12/6609db8a213da.webp",[15,484,485,486,489],{},"可以看到，红色部分的资源在 size 那一栏变成了 ",[64,487,488],{},"(disk cache)","，加载时间也明显降低，虽然方法不优雅，但起码实现了图片资源的预加载。",[206,491,492],{},"html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .s-4uI, html code.shiki .s-4uI{--shiki-default:#383A42;--shiki-dark:#98C379}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .sNmU0, html code.shiki .sNmU0{--shiki-default:#986801;--shiki-dark:#E5C07B}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":494},[],{"title":496,"date":497,"path":498,"tags":499,"body":503},"小记 - 尝试拼凑出 apt 仓库中的 deb 包下载地址","2024-03-13 21:55:04","/2024/03/13/try-to-compose-download-links-of-deb-packages-in-apt-repository",[500,501,502],"Linux","Apt","deepin",{"type":12,"value":504,"toc":728},[505,508,517,520,523,529,536,539,542,550,563,632,639,645,656,662,665,668,699,705,716,719,725],[15,506,507],{},"大概一周前，有一个来源不明的 Linux 微信，从包的结构来看是基于 qt 实现的图形化界面，deb 包中的 control 信息表明是腾讯团队官方出品的。今天听人说 UOS 的商店上架了最新的微信，便尝试从 UOS 的官方仓库提取下载链接，帮助 AUR Maintainer 获取到新的地址。",[15,509,510,511,516],{},"在我的",[32,512,515],{"href":513,"rel":514},"https://zhul.in/2021/11/20/what-is-deepin-elf-verify/",[36],"《deepin-elf-verify究竟是何物？》","这篇文章中，我成功从 uos.deepin.cn 下载到了来自 UOS 中的软件包。可惜，当我采用同样的方法搜索 weixin 或者 wechat 字样时，没有得到任何结果。",[15,518,519],{},"UOS 上的软件来源起码来自两个仓库，一个是与系统有关的软件，比如 Linux Kernel，GCC 一类开源软件，应该就是来自我之前下载到 deepin-elf-verify 的那个源。除此之外，还有一个 appstore 源，里面存放的都是应用商店中上架的软件（大部分可能是闭源的）。",[15,521,522],{},"在 chinauos.com 下载到最新的 ISO 安装镜像后，直接在虚拟机中走完正常的安装流畅，然后直捣黄龙。",[15,524,525],{},[24,526],{"alt":527,"src":528},"源地址","https://static.031130.xyz/uploads/2024/08/12/65f1b344e5581.webp",[15,530,531,532,535],{},"可以看出，",[64,533,534],{},"/etc/apt/sources.list.d/appstore.list"," 文件中列出的源很有可能就是我们要找的新版微信的所在源。",[15,537,538],{},"可惜直接访问的时候，源地址给出了 403。他们似乎不愿意公开源地址的 filelist index。",[15,540,541],{},"不过没关系，既然 UOS Desktop 目前仍然依赖 APT 实现软件安装，那它的源应该仍然符合 Debian 的 APT Repository 目录结构。",[15,543,544,545],{},"根据 ",[32,546,549],{"href":547,"rel":548},"https://wiki.debian.org/DebianRepository/Format",[36],"DebianWiki 中的描述",[252,551,552,555],{},[15,553,554],{},"gives an example:",[58,556,561],{"className":557,"code":559,"language":560},[558],"language-text","deb https://deb.debian.org/debian stable main contrib non-free\n","text",[64,562,559],{"__ignoreMap":46},[252,564,565,568,586,619],{},[15,566,567],{},"An archive can have either source packages or binary packages or both but they have to be specified separately to apt.",[15,569,570,571,577,578,581,582,585],{},"The uri, in this case ",[572,573,574],"em",{},[64,575,576],{},"https://deb.debian.org/debian"," specifies the root of the archive. Often Debian archives are in the ",[572,579,580],{},"debian/"," directory on the server but can be anywhere else (many mirrors for example have it in a ",[572,583,584],{},"pub/linux/debian"," directory, for example).",[15,587,588,589,592,593,597,598,601,602,605,606,609,610,613,614],{},"The distribution part (",[572,590,591],{},"stable"," in this case) specifies a subdirectory in ",[594,595,596],"strong",{},"$ARCHIVE_ROOT/dists",". It can contain additional slashes to specify subdirectories nested deeper, eg. ",[572,599,600],{},"stable/updates",". distribution typically corresponds to ",[594,603,604],{},"Suite"," or ",[594,607,608],{},"Codename"," specified in the ",[594,611,612],{},"Release"," files. ",[572,615,616],{},[594,617,618],{},"FIXME is this enforced anyhow?",[15,620,621,622,605,625,627,628,631],{},"To download packages from a repository apt would download an ",[594,623,624],{},"InRelease",[594,626,612],{}," file from the ",[594,629,630],{},"$ARCHIVE_ROOT/dists/$DISTRIBUTION"," directory.",[15,633,634,635,638],{},"我尝试了访问 ",[64,636,637],{},"https://pro-store-packages.uniontech.com/appstore/dists/eagle-pro/Release","，获得了一系列索引文件的索引。",[15,640,641],{},[24,642],{"alt":643,"src":644},"索引的索引（很拗口）","https://static.031130.xyz/uploads/2024/08/12/65f1b5166810a.webp",[15,646,647,648,651,652],{},"第一段中就能看到熟悉的 ",[64,649,650],{},"Packages"," 文件。根据我 deepin-elf-verify 相关博客中记载，这个文件中会保存 deb 文件的相对路径。我们先拼出 amd64 架构的 Packages 文件下载链接: ",[32,653,654],{"href":654,"rel":655},"https://pro-store-packages.uniontech.com/appstore/dists/eagle-pro/appstore/binary-amd64/Packages",[36],[15,657,658],{},[24,659],{"alt":660,"src":661},"deb 包详细信息","https://static.031130.xyz/uploads/2024/08/12/65f1b5faccc86.webp",[15,663,664],{},"这里可以看到源中每一个 deb 包的信息。图中红色方框框出的便是其中一个 deb 包在源中的相对路径。",[15,666,667],{},"我们可以使用 grep 命令去检索 weixin 或者 wechat 关键词",[58,669,673],{"className":670,"code":671,"language":672,"meta":46,"style":46},"language-bash shiki shiki-themes one-light one-dark-pro","curl -sL https://pro-store-packages.uniontech.com/appstore/dists/eagle-pro/appstore/binary-amd64/Packages | grep -E \"weixin|wechat\"\n","bash",[64,674,675],{"__ignoreMap":46},[67,676,677,681,684,687,690,693,696],{"class":69,"line":70},[67,678,680],{"class":679},"sAdtL","curl",[67,682,683],{"class":322}," -sL",[67,685,686],{"class":329}," https://pro-store-packages.uniontech.com/appstore/dists/eagle-pro/appstore/binary-amd64/Packages",[67,688,689],{"class":303}," | ",[67,691,692],{"class":679},"grep",[67,694,695],{"class":322}," -E",[67,697,698],{"class":329}," \"weixin|wechat\"\n",[15,700,701],{},[24,702],{"alt":703,"src":704},"获取到我们想要的 deb 包的相对路径","https://static.031130.xyz/uploads/2024/08/12/65f1b6a4c3239.webp",[15,706,707,708,711,712],{},"在这个路径前加上之前 ",[64,709,710],{},"appstore.list"," 文件中给出的 url 前缀，即可拼凑出 deb 包的完整下载地址: ",[32,713,714],{"href":714,"rel":715},"https://pro-store-packages.uniontech.com/appstore/pool/appstore/c/com.tencent.wechat/com.tencent.wechat_1.0.0.236_amd64.deb",[36],[15,717,718],{},"放到浏览器中尝试，果然可以正常下载",[15,720,721],{},[24,722],{"alt":723,"src":724},"正常下载","https://static.031130.xyz/uploads/2024/08/12/65f1b73567121.webp",[206,726,727],{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":729},[],{"title":731,"date":732,"path":733,"tags":734,"body":738},"在 Linux 下使用 mitmproxy 抓取 HTTPS 流量","2024-02-29 22:03:58","/2024/02/29/capture-https-traffic-on-linux-with-mitmproxy",[500,735,736,737],"Archlinux","Network","mitmproxy",{"type":12,"value":739,"toc":993},[740,743,746,751,758,777,781,784,796,804,810,820,825,829,832,839,845,856,863,883,892,913,918,930,933,937,940,947,953,962,965,971,974,977,987,990],[15,741,742],{},"作为部分 AUR Package 的 maintainer，一直以来我都有在 Linux 下抓取 https 流量的需求，比如抓取应用内的更新检测时访问的 url 地址。之前一直没有空去研究，趁着最近课少，总算是完成了这个目标。",[15,744,745],{},"在这里我使用的 mitmproxy，基于 python 和 webui 的一款开源简洁的流量代理软件，可以用于抓取 https 流量信息。",[747,748,750],"h2",{"id":749},"安装-mitmproxy","安装 mitmproxy",[15,752,753,754,757],{},"在 Arch Linux 下，官方 ",[64,755,756],{},"extra"," 源中已经打包好了这款软件，直接使用下面的命令即可完成安装。",[58,759,761],{"className":670,"code":760,"language":672,"meta":46,"style":46},"sudo pacman -S mitmproxy\n",[64,762,763],{"__ignoreMap":46},[67,764,765,768,771,774],{"class":69,"line":70},[67,766,767],{"class":679},"sudo",[67,769,770],{"class":329}," pacman",[67,772,773],{"class":322}," -S",[67,775,776],{"class":329}," mitmproxy\n",[747,778,780],{"id":779},"尝试运行-mitmweb","尝试运行 mitmweb",[15,782,783],{},"安装完成后，我们将会获得三个新的命令可用：",[785,786,787,791,793],"ul",{},[788,789,790],"li",{},"mitmdump",[788,792,737],{},[788,794,795],{},"mitmweb",[15,797,798,799,803],{},"我们只要使用 mitmweb 即可同时打开 8080 的代理端口和 8081 端口的 webui。访问 ",[32,800,801],{"href":801,"rel":802},"http://127.0.0.1:8081",[36]," 即可看到 mitmproxy 的网页。",[15,805,806],{},[24,807],{"alt":808,"src":809},"mitmweb 的界面","https://static.031130.xyz/uploads/2024/08/12/65e092503d5bb.webp",[15,811,812,813],{},"当然，也可以在 mitmweb 命令后面追加 -p ",[814,815,816,817],"port",{}," 和 --web-port=",[814,818,819],{}," 分别设置代理端口和 webui 的端口。",[15,821,822,823],{},"首先，我们先运行一次 ",[64,824,795],{},[747,826,828],{"id":827},"安装-ca-证书","安装 ca 证书",[15,830,831],{},"为了解密 https 流量，我们需要为系统安装上 mitmproxy 自己的证书文件，让系统信任我们的证书。",[15,833,834,835,838],{},"先来看看 ",[64,836,837],{},"/usr/share/ca-certificates/trust-source/README"," 这个文件",[58,840,843],{"className":841,"code":842,"language":560},[558],"This directory /usr/share/ca-certificates/trust-source/ contains CA certificates\nand trust settings in the PEM file format. The trust settings found here will be\ninterpreted with a low priority - lower than the ones found in \n/etc/ca-certificates/trust-source/ .\n\n=============================================================================\nQUICK HELP: To add a certificate in the simple PEM or DER file formats to the\n            list of CAs trusted on the system:\n\n            Copy it to the\n                    /usr/share/ca-certificates/trust-source/anchors/\n            subdirectory, and run the\n                    update-ca-trust\n            command.\n\n            If your certificate is in the extended BEGIN TRUSTED file format,\n            then place it into the main trust-source/ directory instead.\n=============================================================================\n\nPlease refer to the update-ca-trust(8) manual page for additional information.\n",[64,844,842],{"__ignoreMap":46},[15,846,847,848,851,852,855],{},"这份文件告诉我们可以在 ",[64,849,850],{},"/usr/share/ca-certificates/trust-source/anchors/"," 路径下放置 PEM 证书文件，并使用 ",[64,853,854],{},"update-ca-trust"," 命令更新系统的信任。",[15,857,858,859,862],{},"mitmproxy 软件第一次运行时，将会在当前用户的 ",[64,860,861],{},"$HOME/.mitmproxy/"," 文件夹下生成证书，我们打开这个文件夹，发现一共有六个文件：",[785,864,865,868,871,874,877,880],{},[788,866,867],{},"mitmproxy-ca-cert.cer",[788,869,870],{},"mitmproxy-ca-cert.p12",[788,872,873],{},"mitmproxy-ca-cert.pem",[788,875,876],{},"mitmproxy-ca.p12",[788,878,879],{},"mitmproxy-ca.pem",[788,881,882],{},"mitmproxy-dhparam.pem",[15,884,885,886,888,889,891],{},"我们这里需要将 ",[64,887,873],{}," 文件复制到 ",[64,890,850],{}," 路径下",[58,893,895],{"className":670,"code":894,"language":672,"meta":46,"style":46},"sudo cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem /usr/share/ca-certificates/trust-source/anchors/\n",[64,896,897],{"__ignoreMap":46},[67,898,899,901,904,907,910],{"class":69,"line":70},[67,900,767],{"class":679},[67,902,903],{"class":329}," cp",[67,905,906],{"class":307}," $HOME",[67,908,909],{"class":329},"/.mitmproxy/mitmproxy-ca-cert.pem",[67,911,912],{"class":329}," /usr/share/ca-certificates/trust-source/anchors/\n",[15,914,915,916],{},"随后执行 ",[64,917,854],{},[58,919,921],{"className":670,"code":920,"language":672,"meta":46,"style":46},"sudo update-ca-trust\n",[64,922,923],{"__ignoreMap":46},[67,924,925,927],{"class":69,"line":70},[67,926,767],{"class":679},[67,928,929],{"class":329}," update-ca-trust\n",[15,931,932],{},"这样便完成了 ca 证书的安装",[747,934,936],{"id":935},"使目标软件使用-8080-端口通信","使目标软件使用 8080 端口通信",[15,938,939],{},"其实我试过使用透明代理进行抓包，只不过我的 Archlinux 是作为日常主力机使用的，系统无时无刻不在向外通信，透明代理以后 mitmproxy 的 webui 各种刷屏，便放弃了这个想法，选择指定目标软件使用 8080 端口通信。",[15,941,942,943,946],{},"网上比较常见的做法是使用 ",[64,944,945],{},"proxychains-ng"," 代理目标软件。这个方案是可行的，只不过我这边测试下来，部分软件使用 proxychains 代理以后出现了仍然不使用代理、无法联网、甚至直接崩溃的情况。",[15,948,949],{},[24,950],{"alt":951,"src":952},"程序崩溃","https://static.031130.xyz/uploads/2024/08/12/65e09559dceef.webp",[15,954,955,956,961],{},"因此我转向了 ",[32,957,960],{"href":958,"rel":959},"https://github.com/mzz2017/gg",[36],"gg","。gg 和 proxychains-ng 的定位相同，都是使目标命令通过指定的代理进行通信，只不过 gg 解决了部分 golang 编写的软件无法被 proxychains 代理的问题，并支持一些常见的用来国际联网的协议。",[15,963,964],{},"在不对 gg 进行配置的情况下，每次启动时，gg 都会要求我们输入代理地址，这正合我意。",[15,966,967],{},[24,968],{"alt":969,"src":970},"gg 要求输入代理地址","https://static.031130.xyz/uploads/2024/08/12/65e0963840449.webp",[15,972,973],{},"此时，软件正常启动，流量全部经过 mitmproxy，可以在 webui 上看到具体情况",[747,975,976],{"id":976},"抓包成功",[15,978,979,983],{},[24,980],{"alt":981,"src":982},"命令行下看到流量信息","https://static.031130.xyz/uploads/2024/08/12/65e097dfe1f17.webp",[24,984],{"alt":985,"src":986},"mitmweb 正常获取解密后的流量信息","https://static.031130.xyz/uploads/2024/08/12/65e09780dd2c0.webp",[15,988,989],{},"我们可以看到 mitmproxy 成功捕获并解密的 https 流量，针对图片等信息甚至可以直接实现预览。",[206,991,992],{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}",{"title":46,"searchDepth":76,"depth":76,"links":994},[995,996,997,998,999],{"id":749,"depth":76,"text":750},{"id":779,"depth":76,"text":780},{"id":827,"depth":76,"text":828},{"id":935,"depth":76,"text":936},{"id":976,"depth":76,"text":976},{"title":1001,"date":1002,"path":1003,"tags":1004,"body":1009},"如何使用 docker 部署 onemanager","2024-02-11 16:30:29","/2024/02/11/how-to-deploy-onemanager-with-docker",[1005,1006,1007,1008],"PHP","OneDrive","OpenSource Project","Docker",{"type":12,"value":1010,"toc":1259},[1011,1013,1016,1023,1025,1034,1039,1069,1073,1088,1091,1095,1120,1127,1133,1142,1153,1169,1178,1187,1190,1193,1203,1222,1226,1253,1256],[55,1012],{},[747,1014,1015],{"id":1015},"部署方法",[15,1017,1018,1019],{},"如果你只是想找一个 OneManager-php 的 Docker 部署方法，直接看 ",[32,1020,1021],{"href":1021,"rel":1022},"https://github.com/zhullyb/OneManager-php-docker",[36],[55,1024],{},[15,1026,1027,1028,1033],{},"一直以来，我都是 ",[32,1029,1032],{"href":1030,"rel":1031},"https://github.com/qkqpttgf/OneManager-php",[36],"OneManager-php"," 的忠实用户。这些年来，尽管有 alist 这种 UI 好看，多种网盘高度聚合的项目逐渐取代了 onemanager 的生态位，但 onemanager 支持文件分片上传、上传流量不经服务器的特点还是让我非常满意。前一阵子，glitch 暂停了针对项目自定义域名的支持，因此在我手贱地取消了项目原本绑定的域名后，迫切地需要寻找一个新的部署的平台，只不过 onemanager 项目现在列出的方案都不太让我满意，因此我就萌生出了在 vps 上自己部署的想法。",[1035,1036,1038],"h3",{"id":1037},"docker-镜像选用","Docker 镜像选用",[15,1040,1041,1042,1046,1047,1052,1053,1056,1057,1060,1061,1064,1065,1068],{},"vps 上自己部署 php 项目，最简单的方法是使用 Docker，",[1043,1044,1045],"del",{},"使用 Docker 就可以免去配置 nginx 或者同类产品的 php-fpm 配置","才怪。我打开 Docker 提供的 ",[32,1048,1051],{"href":1049,"rel":1050},"https://hub.docker.com/_/php",[36],"php 官方镜像","，最小的镜像是带",[64,1054,1055],{},"-cli","后缀的，这个镜像就不适合进行部署，php 内置的开发服务器是单线程的，当同时打开两个网页访问开发服务器的时候，其中一个网页就会卡住；以",[64,1058,1059],{},"-fpm","结尾的镜像变体很明显，仍然需要去 nginx 或同类产品的配置文件那边去配置 fpm，这给部署了好几次 php 项目的我带来的心理阴影；剩下一个就是",[64,1062,1063],{},"-apache","后缀、使用 apache server 提供 php 服务的镜像，体积虽然大了点，但好在操作简单，只需要将 php 文件放进 ",[64,1066,1067],{},"/var/www/html","，启用 php 的相关拓展，启用 apache 的相关功能即可。",[747,1070,1072],{"id":1071},"php-拓展","php 拓展",[15,1074,1075,1076,1079,1080,1083,1084,1087],{},"php 的拓展可以使用镜像自带的 ",[64,1077,1078],{},"docker-php-ext-install"," 和 ",[64,1081,1082],{},"docker-php-ext-enable"," 命令进行操作，此外还有一个 ",[64,1085,1086],{},"docker-php-ext-configure"," 命令可以配置相关的拓展，不过我并不是 php 开发者，不熟悉拓展有什么好配置的。",[15,1089,1090],{},"OneManager-php 没有依赖任何的 php 拓展，因此这个步骤可以直接跳过。",[747,1092,1094],{"id":1093},"apache-server-配置","Apache Server 配置",[15,1096,1097,1098,1101,1102,1101,1105,1101,1108,1101,1111,1101,1114,1101,1117,1119],{},"和 php 拓展一样，镜像内也提供了几个命令进行 Apache Server 的配置，分别为 ",[64,1099,1100],{},"a2disconf","、",[64,1103,1104],{},"a2dismod",[64,1106,1107],{},"a2dissite",[64,1109,1110],{},"a2enconf",[64,1112,1113],{},"a2enmod",[64,1115,1116],{},"a2ensite",[64,1118,1116],{},"。",[15,1121,1122,1123,1126],{},"OneManager-php 在部署的时候依赖于 Apache Server 的 rewrite 的模块，因此在 Dockerfile 中需要使用 ",[64,1124,1125],{},"a2enmod rewrite"," 开启 rewrite 支持。至于别的 Apache Server 配置，都可以通过项目中的 .htaccess 文件进行配置。",[747,1128,1130],{"id":1129},"htaccess-文件纠错",[1043,1131,1132],{},".htaccess 文件纠错",[15,1134,1135],{},[1043,1136,1137,1138,1141],{},"在 OneManager-php 仓库中，",[64,1139,1140],{},".htaccess"," 文件有一些小问题。",[58,1143,1147],{"className":1144,"code":1145,"language":1146,"meta":46,"style":46},"language-htaccess shiki shiki-themes one-light one-dark-pro","RewriteRule ^(.*) index.php?/$1 [L]\n","htaccess",[64,1148,1149],{"__ignoreMap":46},[67,1150,1151],{"class":69,"line":70},[67,1152,1145],{},[15,1154,1155],{},[1043,1156,1157,1158,1161,1162,1101,1165,1168],{},"这行配置原本是将访问的路径追加到 ",[64,1159,1160],{},"index.php?/"," 后面的意思，但 一旦路径中出现了 ",[64,1163,1164],{},"[",[64,1166,1167],{},"]"," 或者空格等字符时，会触发 Apache 自带的保护，因此我们将这行改成下面这个样子即可。",[58,1170,1172],{"className":1144,"code":1171,"language":1146,"meta":46,"style":46},"RewriteRule ^(.*) index.php [QSA,L]\n",[64,1173,1174],{"__ignoreMap":46},[67,1175,1176],{"class":69,"line":70},[67,1177,1171],{},[15,1179,1180,1181,1186],{},"原项目合并了",[32,1182,1185],{"href":1183,"rel":1184},"https://github.com/qkqpttgf/OneManager-php/pull/716",[36],"我的 PR","，因此这一过程不再需要。",[747,1188,1189],{"id":1189},"处理文件权限问题",[15,1191,1192],{},"OneManager-php 在运行过程中，会有针对配置文件的读写操作，此外还内置了一键更新的功能，因此会对路径内的文件进行读写，我们需要确保 php 在运行过程中有权限对这些文件进行读写。",[15,1194,1195,1196,1198,1199,1202],{},"可以直接将 ",[64,1197,1067],{}," 路径的所有权转给 ",[64,1200,1201],{},"www-data"," 用户。",[58,1204,1206],{"className":670,"code":1205,"language":672,"meta":46,"style":46},"chown -R www-data:www-data /var/www/html\n",[64,1207,1208],{"__ignoreMap":46},[67,1209,1210,1213,1216,1219],{"class":69,"line":70},[67,1211,1212],{"class":679},"chown",[67,1214,1215],{"class":322}," -R",[67,1217,1218],{"class":329}," www-data:www-data",[67,1220,1221],{"class":329}," /var/www/html\n",[747,1223,1225],{"id":1224},"最终的-dockerfile","最终的 Dockerfile",[58,1227,1231],{"className":1228,"code":1229,"language":1230,"meta":46,"style":46},"language-dockerfile shiki shiki-themes one-light one-dark-pro","FROM php:8-apache\nRUN a2enmod rewrite\nCOPY OneManager-php /var/www/html\nRUN chown -R www-data:www-data /var/www/html\n","dockerfile",[64,1232,1233,1238,1243,1248],{"__ignoreMap":46},[67,1234,1235],{"class":69,"line":70},[67,1236,1237],{},"FROM php:8-apache\n",[67,1239,1240],{"class":69,"line":76},[67,1241,1242],{},"RUN a2enmod rewrite\n",[67,1244,1245],{"class":69,"line":82},[67,1246,1247],{},"COPY OneManager-php /var/www/html\n",[67,1249,1250],{"class":69,"line":89},[67,1251,1252],{},"RUN chown -R www-data:www-data /var/www/html\n",[15,1254,1255],{},"其实一共就 4 行，还是挺简单的。",[206,1257,1258],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}",{"title":46,"searchDepth":76,"depth":76,"links":1260},[1261,1264,1265,1266,1267,1268],{"id":1015,"depth":76,"text":1015,"children":1262},[1263],{"id":1037,"depth":82,"text":1038},{"id":1071,"depth":76,"text":1072},{"id":1093,"depth":76,"text":1094},{"id":1129,"depth":76,"text":1132},{"id":1189,"depth":76,"text":1189},{"id":1224,"depth":76,"text":1225},{"title":1270,"date":1271,"path":1272,"tags":1273,"body":1275},"crontab 中简单的@语法糖","2024-02-08 17:21:31","/2024/02/08/extra-usage-for-crontab",[500,1274],"crontab",{"type":12,"value":1276,"toc":1469},[1277,1283,1296,1419,1422,1425,1466],[15,1278,1279,1280],{},"说来惭愧，其实我用了这么久的 Linux，一直没有学会编写 crontab 脚本。一行的开头写上五位莫名其妙的数字或星号，后面跟上需要执行的命令，看上去很 kiss，",[1043,1281,1282],{},"但我确实记不住，以至于我现在每次写 crontab 都是让 ChatGPT 来帮我写。",[15,1284,1285,1286,1289,1290,1295],{},"不过我最近查阅 Linux 下设置开机自启脚本的方案的时候，意外地看到 crontab 中居然可以用 ",[64,1287,1288],{},"@reboot command"," 的方式去写，这让我意识到 crontab 也是有一些简单的语法糖的。在查阅了 ",[32,1291,1294],{"href":1292,"rel":1293},"https://man.archlinux.org/man/crontab.5.en#EXTENSIONS",[36],"crontab 的 manual"," 后，我发现一共有下面这么几种 @ 写法的语法糖。这是在全网大部分的 crontab 中文教程中是没有的。",[1297,1298,1299,1315],"table",{},[1300,1301,1302],"thead",{},[1303,1304,1305,1309,1312],"tr",{},[1306,1307,1308],"th",{},"语法糖",[1306,1310,1311],{},"执行条件",[1306,1313,1314],{},"等效表达式",[1316,1317,1318,1331,1346,1359,1374,1389,1404],"tbody",{},[1303,1319,1320,1326,1329],{},[1321,1322,1323],"td",{},[64,1324,1325],{},"@reboot",[1321,1327,1328],{},"开机时候运行",[1321,1330],{},[1303,1332,1333,1338,1341],{},[1321,1334,1335],{},[64,1336,1337],{},"@yearly",[1321,1339,1340],{},"一年一次",[1321,1342,1343],{},[64,1344,1345],{},"0 0 1 1 *",[1303,1347,1348,1353,1355],{},[1321,1349,1350],{},[64,1351,1352],{},"@annually",[1321,1354,1340],{},[1321,1356,1357],{},[64,1358,1345],{},[1303,1360,1361,1366,1369],{},[1321,1362,1363],{},[64,1364,1365],{},"@monthly",[1321,1367,1368],{},"一月一次",[1321,1370,1371],{},[64,1372,1373],{},"0 0 1 * *",[1303,1375,1376,1381,1384],{},[1321,1377,1378],{},[64,1379,1380],{},"@weekly",[1321,1382,1383],{},"一周一次",[1321,1385,1386],{},[64,1387,1388],{},"0 0 * * 0",[1303,1390,1391,1396,1399],{},[1321,1392,1393],{},[64,1394,1395],{},"@daily",[1321,1397,1398],{},"一天一次",[1321,1400,1401],{},[64,1402,1403],{},"0 0 * * *",[1303,1405,1406,1411,1414],{},[1321,1407,1408],{},[64,1409,1410],{},"@hourly",[1321,1412,1413],{},"一小时一次",[1321,1415,1416],{},[64,1417,1418],{},"0 * * * *",[15,1420,1421],{},"这几个简单的语法糖可以满足大部分 crontab 的情况，免去了对使用者学习并记忆 crontab 的表达式的要求。",[15,1423,1424],{},"比如说，如果我希望我的系统在每次开机时都用 TG Bot 发送一条上线信息，那就是",[58,1426,1428],{"className":670,"code":1427,"language":672,"meta":46,"style":46},"@reboot curl -s -X POST https://api.telegram.org/bot{id}:{apikey}/sendMessage -d chat_id={uid} -d text=\"`date`\"\n",[64,1429,1430],{"__ignoreMap":46},[67,1431,1432,1434,1437,1440,1443,1446,1449,1452,1455,1457,1460,1463],{"class":69,"line":70},[67,1433,1325],{"class":679},[67,1435,1436],{"class":329}," curl",[67,1438,1439],{"class":322}," -s",[67,1441,1442],{"class":322}," -X",[67,1444,1445],{"class":329}," POST",[67,1447,1448],{"class":329}," https://api.telegram.org/bot{id}:{apikey}/sendMessage",[67,1450,1451],{"class":322}," -d",[67,1453,1454],{"class":329}," chat_id={uid}",[67,1456,1451],{"class":322},[67,1458,1459],{"class":329}," text=\"`",[67,1461,1462],{"class":679},"date",[67,1464,1465],{"class":329},"`\"\n",[206,1467,1468],{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":1470},[],{"title":1472,"date":1473,"path":1474,"tags":1475,"body":1479},"备份 umami 数据库，并使用 TG Bot 保存 dump 文件","2024-02-01 00:00:01","/2024/02/01/backup-umami-database-and-send-it-by-tg-bot",[1476,1477,1478],"umami","Shell Script","Bot",{"type":12,"value":1480,"toc":1819},[1481,1490,1498,1504,1507,1510,1665,1676,1679,1688,1691,1697,1706,1779,1786,1810,1816],[15,1482,1483,1484,1489],{},"前一阵子看到点墨的博客",[32,1485,1488],{"href":1486,"rel":1487},"https://blog.m-l.cc/2023/11/09/ding-shi-bei-fen-mysql-mariadb-shu-ju-ku-bing-shang-chuan-zhi-tgbot/",[36],"「定时备份mysql/mariadb数据库并上传至tgbot」","，我意识到个人站点的数据库 dump 使用 TG Bot 存放是一个非常合适的做法。个人站点的数据库体积本身就不大，TG Bot 又有官方提供的 api，非常适合自动化任务。我就寻思着给我的 umami 数据库也写个定时任务备份一下，也不至于之前做一次迁移数据全部爆炸的悲剧重演。",[15,1491,1492,1493,1497],{},"我的 umami 是",[32,1494,1496],{"href":1495},"/2022/11/08/free-umami-deploy-plan/","「使用 vercel+supabase 免费部署 umami」","部署出来的，数据库在 supabase 上，因此我们先打开 supabase 的 dashboard，获取到数据库的 url。",[15,1499,1500],{},[24,1501],{"alt":1502,"src":1503},"supabase 操作面板","https://static.031130.xyz/uploads/2024/08/12/65ba6aae157e6.webp",[15,1505,1506],{},"密码我自然是不记得了，不过好在 Firefox 的密码管理器帮我记住了，直接去设置里就能找到。即使密码忘了也不要紧，往下翻有重置密码的按钮。",[15,1508,1509],{},"随后就要开始编写我们的教本了，这是我的",[58,1511,1513],{"className":670,"code":1512,"language":672,"meta":46,"style":46},"#!/bin/bash\n\nDATABASE_URL=\"postgres://\"\nDATE=$(date '+%F')\n\nTG_BOT_TOKEN='1145141919:ABCDEFGHIJKLVMNOPQRSTUVWXYZabcdefgh'\nTG_CHAT_ID='9191415411'\n\npg_dump ${DATABASE_URL} > umami_dump_${DATE}.sql\ncurl -F document=@umami_dump_${DATE}.sql https://api.telegram.org/bot${TG_BOT_TOKEN}/sendDocument?chat_id=${TG_CHAT_ID}\nrm umami_dump_${DATE}.sql\n",[64,1514,1515,1521,1525,1536,1554,1558,1568,1578,1582,1612,1649],{"__ignoreMap":46},[67,1516,1517],{"class":69,"line":70},[67,1518,1520],{"class":1519},"sW2Sy","#!/bin/bash\n",[67,1522,1523],{"class":69,"line":76},[67,1524,86],{"emptyLinePlaceholder":85},[67,1526,1527,1530,1533],{"class":69,"line":82},[67,1528,1529],{"class":307},"DATABASE_URL",[67,1531,326],{"class":1532},"sknuh",[67,1534,1535],{"class":329},"\"postgres://\"\n",[67,1537,1538,1541,1543,1546,1548,1551],{"class":69,"line":89},[67,1539,1540],{"class":307},"DATE",[67,1542,326],{"class":1532},[67,1544,1545],{"class":303},"$(",[67,1547,1462],{"class":679},[67,1549,1550],{"class":329}," '+%F'",[67,1552,1553],{"class":303},")\n",[67,1555,1556],{"class":69,"line":95},[67,1557,86],{"emptyLinePlaceholder":85},[67,1559,1560,1563,1565],{"class":69,"line":101},[67,1561,1562],{"class":307},"TG_BOT_TOKEN",[67,1564,326],{"class":1532},[67,1566,1567],{"class":329},"'1145141919:ABCDEFGHIJKLVMNOPQRSTUVWXYZabcdefgh'\n",[67,1569,1570,1573,1575],{"class":69,"line":107},[67,1571,1572],{"class":307},"TG_CHAT_ID",[67,1574,326],{"class":1532},[67,1576,1577],{"class":329},"'9191415411'\n",[67,1579,1580],{"class":69,"line":113},[67,1581,86],{"emptyLinePlaceholder":85},[67,1583,1584,1587,1591,1593,1596,1599,1602,1605,1607,1609],{"class":69,"line":119},[67,1585,1586],{"class":679},"pg_dump",[67,1588,1590],{"class":1589},"sr1Ac"," ${",[67,1592,1529],{"class":307},[67,1594,1595],{"class":1589},"}",[67,1597,1598],{"class":303}," > ",[67,1600,1601],{"class":329},"umami_dump_",[67,1603,1604],{"class":1589},"${",[67,1606,1540],{"class":307},[67,1608,1595],{"class":1589},[67,1610,1611],{"class":329},".sql\n",[67,1613,1614,1616,1619,1622,1624,1626,1628,1631,1634,1636,1638,1640,1643,1645,1647],{"class":69,"line":125},[67,1615,680],{"class":679},[67,1617,1618],{"class":322}," -F",[67,1620,1621],{"class":329}," document=@umami_dump_",[67,1623,1604],{"class":1589},[67,1625,1540],{"class":307},[67,1627,1595],{"class":1589},[67,1629,1630],{"class":329},".sql",[67,1632,1633],{"class":329}," https://api.telegram.org/bot",[67,1635,1604],{"class":1589},[67,1637,1562],{"class":307},[67,1639,1595],{"class":1589},[67,1641,1642],{"class":329},"/sendDocument?chat_id=",[67,1644,1604],{"class":1589},[67,1646,1572],{"class":307},[67,1648,122],{"class":1589},[67,1650,1651,1654,1657,1659,1661,1663],{"class":69,"line":130},[67,1652,1653],{"class":679},"rm",[67,1655,1656],{"class":329}," umami_dump_",[67,1658,1604],{"class":1589},[67,1660,1540],{"class":307},[67,1662,1595],{"class":1589},[67,1664,1611],{"class":329},[15,1666,1667,1668,1671,1672,1675],{},"将这段代码保存为 ",[64,1669,1670],{},"umami_db_dumper.sh","，随后 ",[64,1673,1674],{},"chmod +x ./umami_db_dumper.sh"," 授予可执行权限。",[15,1677,1678],{},"可以先在命令行中执行命令试一下这段脚本是否正常工作",[58,1680,1682],{"className":670,"code":1681,"language":672,"meta":46,"style":46},"./umami_db_dumper.sh\n",[64,1683,1684],{"__ignoreMap":46},[67,1685,1686],{"class":69,"line":70},[67,1687,1681],{"class":679},[15,1689,1690],{},"这段代码在我本机正常工作，可惜在我的 Ubuntu VPS 上报错",[58,1692,1695],{"className":1693,"code":1694,"language":560},[558],"pg_dump: error: server version: 14.1; pg_dump version: 12.17 (Ubuntu 12.17-0ubuntu0.20.04.1)\npg_dump: error: aborting because of server version mismatch\n",[64,1696,1694],{"__ignoreMap":46},[15,1698,1699,1700,1705],{},"看上去是 VPS 上的 PostgreSQL 版本过低，Google 搜索一顿后，我在一篇",[32,1701,1704],{"href":1702,"rel":1703},"https://devopsworld.medium.com/upgrade-pg-dump-version-in-ubuntu-545d691d4695",[36],"「Upgrade pg_dump version in ubuntu | by Anushareddy」"," 文章中找到了方案，添加 PostgreSQL 官方提供的 apt 源将 VPS 上的 PostgreSQL 更新到新版即可解决。",[58,1707,1709],{"className":670,"code":1708,"language":672,"meta":46,"style":46},"wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -\necho \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list\napt update\napt install postgresql-client\n",[64,1710,1711,1739,1761,1769],{"__ignoreMap":46},[67,1712,1713,1716,1719,1722,1725,1728,1730,1733,1736],{"class":69,"line":70},[67,1714,1715],{"class":679},"wget",[67,1717,1718],{"class":322}," --quiet",[67,1720,1721],{"class":322}," -O",[67,1723,1724],{"class":329}," -",[67,1726,1727],{"class":329}," https://www.postgresql.org/media/keys/ACCC4CF8.asc",[67,1729,689],{"class":303},[67,1731,1732],{"class":679},"apt-key",[67,1734,1735],{"class":329}," add",[67,1737,1738],{"class":329}," -\n",[67,1740,1741,1744,1747,1750,1753,1756,1758],{"class":69,"line":76},[67,1742,1743],{"class":422},"echo",[67,1745,1746],{"class":329}," \"deb http://apt.postgresql.org/pub/repos/apt/ $(",[67,1748,1749],{"class":679},"lsb_release",[67,1751,1752],{"class":322}," -cs",[67,1754,1755],{"class":329},")-pgdg main\"",[67,1757,1598],{"class":303},[67,1759,1760],{"class":329},"/etc/apt/sources.list.d/pgdg.list\n",[67,1762,1763,1766],{"class":69,"line":82},[67,1764,1765],{"class":679},"apt",[67,1767,1768],{"class":329}," update\n",[67,1770,1771,1773,1776],{"class":69,"line":89},[67,1772,1765],{"class":679},[67,1774,1775],{"class":329}," install",[67,1777,1778],{"class":329}," postgresql-client\n",[15,1780,1781,1782,1785],{},"确保脚本正常工作后，使用 ",[64,1783,1784],{},"crontab -e"," 设置自动任务",[58,1787,1789],{"className":670,"code":1788,"language":672,"meta":46,"style":46},"0 2 * * * /root/umami_db_dumper.sh\n",[64,1790,1791],{"__ignoreMap":46},[67,1792,1793,1796,1799,1803,1805,1807],{"class":69,"line":70},[67,1794,1795],{"class":679},"0",[67,1797,1798],{"class":322}," 2",[67,1800,1802],{"class":1801},"s2QsP"," *",[67,1804,1802],{"class":1801},[67,1806,1802],{"class":1801},[67,1808,1809],{"class":329}," /root/umami_db_dumper.sh\n",[15,1811,1812],{},[24,1813],{"alt":1814,"src":1815},"数据库备份","https://static.031130.xyz/uploads/2024/08/12/65c79455b2e40.webp",[206,1817,1818],{},"html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sknuh, html code.shiki .sknuh{--shiki-default:#383A42;--shiki-dark:#56B6C2}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sr1Ac, html code.shiki .sr1Ac{--shiki-default:#E45649;--shiki-dark:#ABB2BF}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .s2QsP, html code.shiki .s2QsP{--shiki-default:#E45649;--shiki-dark:#E5C07B}",{"title":46,"searchDepth":76,"depth":76,"links":1820},[],{"title":1822,"date":1823,"path":1824,"tags":1825,"body":1826},"在 JavaScript 中，箭头函数中的 this 指针到底指向哪里？","2024-01-14 02:50:03","/2024/01/14/where-does-this-refer-in-arrow-function-in-js",[219],{"type":12,"value":1827,"toc":2250},[1828,1835,2144,2147,2154,2160,2171,2174,2177,2188,2194,2210,2217,2223,2226,2233,2240,2247],[15,1829,1830,1831,1834],{},"这学期期末复习的时候，学校里负责上 JavaScript 的老师给我们提出了一个问题。下面这段代码中，",[64,1832,1833],{},"a.u2()"," 在 ES Module 下执行会抛出 TypeError 的异常，在 CommonJS 下运行则会输出 undefined，而 B 这个类的 u2 函数则能够在对象实例化以后正常运行。",[58,1836,1840],{"className":1837,"code":1838,"language":1839,"meta":46,"style":46},"language-javascript shiki shiki-themes one-light one-dark-pro","const a = {\n    x: 3,\n    u1: function () {\n        console.log(this.x)\n    },\n    u2: () => {\n        console.log(this.x)\n    }\n}\n\nclass b {\n    x = 3\n\n    u1 = function () {\n        console.log(this.x)\n    }\n\n    u2 = () => {\n        console.log(this.x)\n    }\n}\n\na.u1()\n// 3\na.u2()\n// undefined\n\nnew b().u1()\n// 3\nnew b().u2()\n// 3\n","javascript",[64,1841,1842,1854,1868,1881,1906,1911,1926,1944,1949,1953,1957,1968,1978,1982,1992,2010,2014,2018,2031,2050,2055,2060,2065,2078,2084,2095,2101,2106,2121,2126,2139],{"__ignoreMap":46},[67,1843,1844,1846,1849,1851],{"class":69,"line":70},[67,1845,415],{"class":414},[67,1847,1848],{"class":418}," a",[67,1850,423],{"class":422},[67,1852,1853],{"class":303}," {\n",[67,1855,1856,1859,1863,1866],{"class":69,"line":76},[67,1857,1858],{"class":307},"    x",[67,1860,1862],{"class":1861},"st7oF",":",[67,1864,1865],{"class":322}," 3",[67,1867,434],{"class":303},[67,1869,1870,1873,1875,1878],{"class":69,"line":82},[67,1871,1872],{"class":679},"    u1",[67,1874,1862],{"class":1861},[67,1876,1877],{"class":414}," function",[67,1879,1880],{"class":303}," () {\n",[67,1882,1883,1887,1890,1893,1896,1899,1901,1904],{"class":69,"line":89},[67,1884,1886],{"class":1885},"s7GmK","        console",[67,1888,1889],{"class":303},".",[67,1891,1892],{"class":679},"log",[67,1894,1895],{"class":303},"(",[67,1897,1898],{"class":1801},"this",[67,1900,1889],{"class":303},[67,1902,1903],{"class":307},"x",[67,1905,1553],{"class":303},[67,1907,1908],{"class":69,"line":95},[67,1909,1910],{"class":303},"    },\n",[67,1912,1913,1916,1918,1921,1924],{"class":69,"line":101},[67,1914,1915],{"class":679},"    u2",[67,1917,1862],{"class":1861},[67,1919,1920],{"class":303}," () ",[67,1922,1923],{"class":414},"=>",[67,1925,1853],{"class":303},[67,1927,1928,1930,1932,1934,1936,1938,1940,1942],{"class":69,"line":107},[67,1929,1886],{"class":1885},[67,1931,1889],{"class":303},[67,1933,1892],{"class":679},[67,1935,1895],{"class":303},[67,1937,1898],{"class":1801},[67,1939,1889],{"class":303},[67,1941,1903],{"class":307},[67,1943,1553],{"class":303},[67,1945,1946],{"class":69,"line":113},[67,1947,1948],{"class":303},"    }\n",[67,1950,1951],{"class":69,"line":119},[67,1952,122],{"class":303},[67,1954,1955],{"class":69,"line":125},[67,1956,86],{"emptyLinePlaceholder":85},[67,1958,1959,1962,1966],{"class":69,"line":130},[67,1960,1961],{"class":414},"class",[67,1963,1965],{"class":1964},"sC09Y"," b",[67,1967,1853],{"class":303},[67,1969,1970,1973,1975],{"class":69,"line":136},[67,1971,1858],{"class":1972},"sz0mV",[67,1974,423],{"class":422},[67,1976,1977],{"class":322}," 3\n",[67,1979,1980],{"class":69,"line":141},[67,1981,86],{"emptyLinePlaceholder":85},[67,1983,1984,1986,1988,1990],{"class":69,"line":451},[67,1985,1872],{"class":679},[67,1987,423],{"class":422},[67,1989,1877],{"class":414},[67,1991,1880],{"class":303},[67,1993,1994,1996,1998,2000,2002,2004,2006,2008],{"class":69,"line":459},[67,1995,1886],{"class":1885},[67,1997,1889],{"class":303},[67,1999,1892],{"class":679},[67,2001,1895],{"class":303},[67,2003,1898],{"class":1801},[67,2005,1889],{"class":303},[67,2007,1903],{"class":307},[67,2009,1553],{"class":303},[67,2011,2012],{"class":69,"line":465},[67,2013,1948],{"class":303},[67,2015,2016],{"class":69,"line":471},[67,2017,86],{"emptyLinePlaceholder":85},[67,2019,2021,2023,2025,2027,2029],{"class":69,"line":2020},18,[67,2022,1915],{"class":679},[67,2024,423],{"class":422},[67,2026,1920],{"class":303},[67,2028,1923],{"class":414},[67,2030,1853],{"class":303},[67,2032,2034,2036,2038,2040,2042,2044,2046,2048],{"class":69,"line":2033},19,[67,2035,1886],{"class":1885},[67,2037,1889],{"class":303},[67,2039,1892],{"class":679},[67,2041,1895],{"class":303},[67,2043,1898],{"class":1801},[67,2045,1889],{"class":303},[67,2047,1903],{"class":307},[67,2049,1553],{"class":303},[67,2051,2053],{"class":69,"line":2052},20,[67,2054,1948],{"class":303},[67,2056,2058],{"class":69,"line":2057},21,[67,2059,122],{"class":303},[67,2061,2063],{"class":69,"line":2062},22,[67,2064,86],{"emptyLinePlaceholder":85},[67,2066,2068,2070,2072,2075],{"class":69,"line":2067},23,[67,2069,32],{"class":1885},[67,2071,1889],{"class":303},[67,2073,2074],{"class":679},"u1",[67,2076,2077],{"class":303},"()\n",[67,2079,2081],{"class":69,"line":2080},24,[67,2082,2083],{"class":1519},"// 3\n",[67,2085,2086,2088,2090,2093],{"class":69,"line":3},[67,2087,32],{"class":1885},[67,2089,1889],{"class":303},[67,2091,2092],{"class":679},"u2",[67,2094,2077],{"class":303},[67,2096,2098],{"class":69,"line":2097},26,[67,2099,2100],{"class":1519},"// undefined\n",[67,2102,2104],{"class":69,"line":2103},27,[67,2105,86],{"emptyLinePlaceholder":85},[67,2107,2109,2112,2114,2117,2119],{"class":69,"line":2108},28,[67,2110,2111],{"class":414},"new",[67,2113,1965],{"class":679},[67,2115,2116],{"class":303},"().",[67,2118,2074],{"class":679},[67,2120,2077],{"class":303},[67,2122,2124],{"class":69,"line":2123},29,[67,2125,2083],{"class":1519},[67,2127,2129,2131,2133,2135,2137],{"class":69,"line":2128},30,[67,2130,2111],{"class":414},[67,2132,1965],{"class":679},[67,2134,2116],{"class":303},[67,2136,2092],{"class":679},[67,2138,2077],{"class":303},[67,2140,2142],{"class":69,"line":2141},31,[67,2143,2083],{"class":1519},[15,2145,2146],{},"这个问题涉及到 JavaScript 中箭头函数的作用域以及 this 指向。",[15,2148,2149,2150,2153],{},"**在 JS 中使用 function 关键字定义的普通函数中，this 指针遵循一个规则：谁调用指向谁。**即 ",[64,2151,2152],{},"obj.func()"," 这种调用情况下，func 方法内部的this指向obj；如果没有调用者，则严格模式下 this 为 undefined，非严格模式下 this 指向window(浏览器)或者global(node环境)。",[15,2155,2156,2157],{},"而箭头函数比较特殊，",[594,2158,2159],{},"箭头函数的 this 在定义时就被绑定，绑定的是定义时所在作用域中的 this。",[15,2161,2162,2163,2166,2167,2170],{},"在老师给的示例代码中，第一行定义了 a 这个对象字面量，而",[594,2164,2165],{},"定义对象字面量不会创建新的作用域","，因此 a 中定义的 u2 的 this 指向的是全局对象。因此在 Es Module 默认启用 strict mode 的情况下，全局对象的 this 指向 undefined，进而导致 a 的 u2 内 this 也指向 undefined，this.x 就抛了 TypeError；而在 ",[594,2168,2169],{},"CommonJS 未启用 strict mode 的情况下，全局对象的 this 指向全局对象","，因而 u2 内的 this 也指向全局对象，因此 this 存在，this.x 就不会抛 TypeError，只会报 undefined。",[15,2172,2173],{},"而 B 类在对象初始化阶段拥有一个新的作用域，因此箭头函数的 this 能够正确指向 B 被实例化出来的对象，因此也就能够正确读取到 this.x 的值。",[15,2175,2176],{},"理论上来说，我们可以给全局对象也赋一个不一样的 x 值，这样 a.u2() 就能够读取到全局对象中的 x 值，验证我们的结论。",[15,2178,2179,2180,2183,2184,2187],{},"在浏览器中，可以在代码的头部加一行 ",[64,2181,2182],{},"var x = 10"," 或者 ",[64,2185,2186],{},"window.x = 10","，可以看到a.u2() 顺利的输出了 10，验证了我的结论。",[15,2189,2190],{},[24,2191],{"alt":2192,"src":2193},"浏览器控制台调试","https://static.031130.xyz/uploads/2024/08/12/65a2e1d093b78.webp",[15,2195,2196,2197,2183,2199,2202,2203,2205,2206,2209],{},"但在 Node.js 中，直接使用 ",[64,2198,2182],{},[64,2200,2201],{},"global.x = 10"," 并不能达到我们想要的效果。因为Node.js 中的每个 CommonJS 模块都有其自己的模块作用域，即模块的顶层作用域不是全局作用域。在模块内部，",[64,2204,1898],{}," 关键字不是指向 ",[64,2207,2208],{},"global"," 对象，而是指向模块的导出对象。这是为了确保模块内部的作用域隔离和模块的封装性。",[15,2211,2212,2213,2216],{},"那么我们可以通过为模块的导出对象添加一个 x 属性来验证我们的结论，我们可以使用 ",[64,2214,2215],{},"exports.x = 10"," 来为模块的顶层作用域添加一个值为 10 的 x 属性。",[15,2218,2219],{},[24,2220],{"alt":2221,"src":2222},"nodejs 环境运行","https://static.031130.xyz/uploads/2024/08/12/65a2e379ba89e.webp",[747,2224,2225],{"id":2225},"参考文章",[15,2227,2228],{},[32,2229,2232],{"href":2230,"rel":2231},"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions",[36],"箭头函数表达式 - JavaScript | MDN",[15,2234,2235],{},[32,2236,2239],{"href":2237,"rel":2238},"https://segmentfault.com/q/1010000022948115",[36],"ES6箭头函数作用域的问题",[15,2241,2242],{},[32,2243,2246],{"href":2244,"rel":2245},"https://www.zhihu.com/tardis/zm/art/57204184",[36],"ES6箭头函数的this指向详解",[206,2248,2249],{},"html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .sNmU0, html code.shiki .sNmU0{--shiki-default:#986801;--shiki-dark:#E5C07B}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .st7oF, html code.shiki .st7oF{--shiki-default:#0184BC;--shiki-dark:#ABB2BF}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .s7GmK, html code.shiki .s7GmK{--shiki-default:#383A42;--shiki-dark:#E5C07B}html pre.shiki code .s2QsP, html code.shiki .s2QsP{--shiki-default:#E45649;--shiki-dark:#E5C07B}html pre.shiki code .sC09Y, html code.shiki .sC09Y{--shiki-default:#C18401;--shiki-dark:#E5C07B}html pre.shiki code .sz0mV, html code.shiki .sz0mV{--shiki-default:#383A42;--shiki-dark:#E06C75}html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":46,"searchDepth":76,"depth":76,"links":2251},[2252],{"id":2225,"depth":76,"text":2225},{"title":2254,"date":2255,"path":2256,"tags":2257,"body":2259},"结合 Vue.js 与 php 完成的 web 期末大作业，讲讲前后端分离站点开发与部署中可能遇到的 CORS 跨域问题","2024-01-10 23:55:36","/2024/01/10/cors-when-using-splited-frontend-and-backend",[217,1005,736,2258,218],"笔记",{"type":12,"value":2260,"toc":2698},[2261,2269,2272,2276,2279,2286,2291,2302,2315,2318,2329,2332,2344,2353,2362,2368,2373,2376,2385,2388,2391,2404,2407,2410,2413,2416,2422,2464,2467,2669,2676,2683,2686,2695],[15,2262,2263,2264,2268],{},"在",[32,2265,2267],{"href":2266},"/2023/12/27/php-and-vuejs-project-deploy-on-caddy/","上一篇博客","中，我讲到了 web 期末大作业的上云部署。整个项目是使用 Vue.js 作为前端，php 作为后端，mysql 作为数据库实现的。",[15,2270,2271],{},"在使用 Vue.js 开发前端界面时，我选择了使用 vite 脚手架帮助开发，这意味着我的作品将使用前后端分离的架构实现。因此在开发部署过程中均遇到了跨域的问题，故写下这篇博客记录下解决方案。",[747,2273,2275],{"id":2274},"基于后端返回对应-http-响应头的解决方案","基于后端返回对应 http 响应头的解决方案",[1035,2277,2278],{"id":2278},"开发阶段",[15,2280,2281,2282,2285],{},"在我完成前后端的开发，并且经过 Apifox 的 mock 测试后，第一次在浏览器尝试前后端对接，遇到了 ",[64,2283,2284],{},"CORS Missing Allow Origin"," 的报错。",[15,2287,2288],{},[24,2289],{"alt":2284,"src":2290},"https://static.031130.xyz/uploads/2024/08/12/659ec607c69af.webp",[15,2292,2293,2294,2297,2298,2301],{},"vite 启动的 dev 开发服务器使用的域是 ",[64,2295,2296],{},"http://localhost:5173"," ，而 php 后端我指定的是 ",[64,2299,2300],{},"http://127.0.0.1:8080"," ，前后端并不运行在一个域下，前端使用 Axios(AJAX) 向后端发送请求获取资源输入 CORS 跨域资源共享的范畴。",[15,2303,2304,2305,2310,2311,2314],{},"关于跨域资源共享 CORS 的相关内容，",[32,2306,2309],{"href":2307,"rel":2308},"https://www.ruanyifeng.com/blog/2016/04/cors.html",[36],"阮一峰老师在 2016 年就已经在他的博客中有过解释","，看了下也是全网中文内容中解释得比较通俗易懂的，因此本文在这方面不过多做解释。错误的提示信息是 Missing Allow Origin，结合阮一峰老师的博文，我们应该在后端向前端发送的 http 响应头中添加 ",[64,2312,2313],{},"Access-Control-Allow-Origin"," 这一字段。",[15,2316,2317],{},"在一般的前后端分离项目（不涉及 cookie 等 Credentials 属性）中，我们可以将这一字段设置为 * 通配符，默认允许所有的域向自己发起跨域资源请求。php 可以通过下面这行代码很方便地进行设置:",[58,2319,2323],{"className":2320,"code":2321,"language":2322,"meta":46,"style":46},"language-php shiki shiki-themes one-light one-dark-pro","header('Access-Control-Allow-Origin: *');\n","php",[64,2324,2325],{"__ignoreMap":46},[67,2326,2327],{"class":69,"line":70},[67,2328,2321],{},[15,2330,2331],{},"但在用户的注册登录方面，我使用了 session 作为用户的登录凭据。阮一峰老师关于 CORS 的博文中有这样一句话:",[252,2333,2334],{},[15,2335,2336,2337,2339,2340,2343],{},"需要注意的是，如果要发送Cookie，",[64,2338,2313],{},"就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的",[64,2341,2342],{},"document.cookie","也无法读取服务器域名下的Cookie。",[15,2345,2346,2347,2349,2350,2352],{},"因此，我们必须明确指定 ",[64,2348,2313],{}," 字段为前端所使用的域，写上 ",[64,2351,2296],{}," 才行。",[58,2354,2356],{"className":2320,"code":2355,"language":2322,"meta":46,"style":46},"header('Access-Control-Allow-Origin: http://localhost:5173');\n",[64,2357,2358],{"__ignoreMap":46},[67,2359,2360],{"class":69,"line":70},[67,2361,2355],{},[15,2363,2364,2365],{},"再次刷新网页，获得了新的错误 ",[64,2366,2367],{},"CORS Missing Allow Credentials",[15,2369,2370],{},[24,2371],{"alt":2367,"src":2372},"https://static.031130.xyz/uploads/2024/08/12/659ec95acc0bc.webp",[15,2374,2375],{},"这个问题处理起来也简单",[58,2377,2379],{"className":2320,"code":2378,"language":2322,"meta":46,"style":46},"header('Access-Control-Allow-Credentials: true');\n",[64,2380,2381],{"__ignoreMap":46},[67,2382,2383],{"class":69,"line":70},[67,2384,2378],{},[15,2386,2387],{},"再次运行网页，跨域问题成功解决。",[1035,2389,2390],{"id":2390},"部署阶段",[15,2392,2393,2394,2396,2397,2400,2401,2403],{},"顺着这个思路进行下去，我们在部署阶段解决跨域问题需要做的事情很简单。提前将前端部署起来，将前端的域写到后端返回给前端的 http 相应头中即可。需要注意的是，",[64,2395,2313],{}," 字段仅允许填写一个值，如果需要同时允许来自多个不同域的跨域资源共享，后端部分需要根据前端发来的请求头中的 ",[64,2398,2399],{},"Origin"," 字段相应地设置响应头中的 ",[64,2402,2313],{}," 。当然，nginx 等先进的 static server 也支持劫持 http 请求，添加相关的 Access-Control 语句，也可以在这一层解决这个问题。",[747,2405,2406],{"id":2406},"直接规避跨域的方案",[15,2408,2409],{},"上面通过后端返回带有 Access-Control 语句相应头的解决方案确实可以解决问题，却显得不够优雅。开发和部署阶段都要手动的去指定前端的域来允许跨域资源共享，这一点过于麻烦了，因此引出了下面的解决方案。",[1035,2411,2278],{"id":2412},"开发阶段-1",[15,2414,2415],{},"在 vite（或者其他同类开发服务器）的帮助下，我们可以使用前端的开发服务器去反向代理后端服务，也就是让前端的请求打到前端服务器上，由前端服务器去返回后端服务器返回的结果。",[15,2417,229,2418,2421],{},[64,2419,2420],{},"vite.config.ts"," 配置文件下，我将原本的",[58,2423,2427],{"className":2424,"code":2425,"language":2426,"meta":46,"style":46},"language-typescript shiki shiki-themes one-light one-dark-pro","export default defineConfig({\n  plugins: [vue()],\n})\n","typescript",[64,2428,2429,2444,2459],{"__ignoreMap":46},[67,2430,2431,2434,2438,2441],{"class":69,"line":70},[67,2432,2433],{"class":414},"export",[67,2435,2437],{"class":2436},"sq3v1"," default",[67,2439,2440],{"class":679}," defineConfig",[67,2442,2443],{"class":303},"({\n",[67,2445,2446,2449,2451,2454,2456],{"class":69,"line":76},[67,2447,2448],{"class":307},"  plugins",[67,2450,1862],{"class":1861},[67,2452,2453],{"class":303}," [",[67,2455,296],{"class":679},[67,2457,2458],{"class":303},"()],\n",[67,2460,2461],{"class":69,"line":82},[67,2462,2463],{"class":303},"})\n",[15,2465,2466],{},"换成了",[58,2468,2470],{"className":2424,"code":2469,"language":2426,"meta":46,"style":46},"export default () => {\n  process.env = { ...process.env, ...loadEnv(process.cwd(),'') };\n\n  const config = {\n    plugins: [vue()],\n    server: {\n      proxy: {\n        '/api': {\n          target: http://127.0.0.1:8080,\n          changeOrigin: true,\n          secure: false,\n        }\n      }\n    }\n  }\n  return defineConfig(config)\n};\n",[64,2471,2472,2484,2535,2539,2551,2564,2573,2582,2591,2606,2619,2631,2636,2641,2645,2650,2664],{"__ignoreMap":46},[67,2473,2474,2476,2478,2480,2482],{"class":69,"line":70},[67,2475,2433],{"class":414},[67,2477,2437],{"class":2436},[67,2479,1920],{"class":303},[67,2481,1923],{"class":414},[67,2483,1853],{"class":303},[67,2485,2486,2489,2491,2494,2496,2499,2502,2505,2507,2509,2512,2514,2517,2519,2521,2523,2526,2529,2532],{"class":69,"line":76},[67,2487,2488],{"class":1885},"  process",[67,2490,1889],{"class":303},[67,2492,2493],{"class":307},"env",[67,2495,423],{"class":422},[67,2497,2498],{"class":303}," { ",[67,2500,2501],{"class":1861},"...",[67,2503,2504],{"class":1885},"process",[67,2506,1889],{"class":303},[67,2508,2493],{"class":307},[67,2510,2511],{"class":303},", ",[67,2513,2501],{"class":1861},[67,2515,2516],{"class":679},"loadEnv",[67,2518,1895],{"class":303},[67,2520,2504],{"class":1885},[67,2522,1889],{"class":303},[67,2524,2525],{"class":679},"cwd",[67,2527,2528],{"class":303},"(),",[67,2530,2531],{"class":329},"''",[67,2533,2534],{"class":303},") };\n",[67,2536,2537],{"class":69,"line":82},[67,2538,86],{"emptyLinePlaceholder":85},[67,2540,2541,2544,2547,2549],{"class":69,"line":89},[67,2542,2543],{"class":414},"  const",[67,2545,2546],{"class":418}," config",[67,2548,423],{"class":422},[67,2550,1853],{"class":303},[67,2552,2553,2556,2558,2560,2562],{"class":69,"line":95},[67,2554,2555],{"class":307},"    plugins",[67,2557,1862],{"class":1861},[67,2559,2453],{"class":303},[67,2561,296],{"class":679},[67,2563,2458],{"class":303},[67,2565,2566,2569,2571],{"class":69,"line":101},[67,2567,2568],{"class":307},"    server",[67,2570,1862],{"class":1861},[67,2572,1853],{"class":303},[67,2574,2575,2578,2580],{"class":69,"line":107},[67,2576,2577],{"class":307},"      proxy",[67,2579,1862],{"class":1861},[67,2581,1853],{"class":303},[67,2583,2584,2587,2589],{"class":69,"line":113},[67,2585,2586],{"class":329},"        '/api'",[67,2588,1862],{"class":1861},[67,2590,1853],{"class":303},[67,2592,2593,2596,2598,2601,2603],{"class":69,"line":119},[67,2594,2595],{"class":307},"          target",[67,2597,1862],{"class":1861},[67,2599,2600],{"class":307}," http",[67,2602,1862],{"class":303},[67,2604,2605],{"class":1519},"//127.0.0.1:8080,\n",[67,2607,2608,2611,2614,2617],{"class":69,"line":125},[67,2609,2610],{"class":307},"          changeOrigin",[67,2612,2613],{"class":303},": ",[67,2615,2616],{"class":322},"true",[67,2618,434],{"class":303},[67,2620,2621,2624,2626,2629],{"class":69,"line":130},[67,2622,2623],{"class":307},"          secure",[67,2625,1862],{"class":1861},[67,2627,2628],{"class":322}," false",[67,2630,434],{"class":303},[67,2632,2633],{"class":69,"line":136},[67,2634,2635],{"class":303},"        }\n",[67,2637,2638],{"class":69,"line":141},[67,2639,2640],{"class":303},"      }\n",[67,2642,2643],{"class":69,"line":451},[67,2644,1948],{"class":303},[67,2646,2647],{"class":69,"line":459},[67,2648,2649],{"class":303},"  }\n",[67,2651,2652,2655,2657,2659,2662],{"class":69,"line":465},[67,2653,2654],{"class":414},"  return",[67,2656,2440],{"class":679},[67,2658,1895],{"class":303},[67,2660,2661],{"class":307},"config",[67,2663,1553],{"class":303},[67,2665,2666],{"class":69,"line":471},[67,2667,2668],{"class":303},"};\n",[15,2670,2671,2672,2675],{},"同时将 Axios create 时的 ",[64,2673,2674],{},"baseURL"," 参数去除。",[15,2677,2678,2679,2682],{},"这样一套组合拳下来，将所有打向 ",[64,2680,2681],{},"/api*"," 的请求和响应通过前端的开发服务器作为中介做了中转，让浏览器以为并没有跨域（事实上也没有跨域），从而解决了相关的问题。",[1035,2684,2390],{"id":2685},"部署阶段-1",[15,2687,2688,2689,2694],{},"在开发阶段，我们通过 vite 的开发服务器做反向代理规避了跨域请求，但在部署阶段就用不了了。由于 vite 服务器的性能太弱，一般情况下我们是不会在生产环境中使用 vite 作为正式的服务器的，而是使用 vite build 出网站的静态网页资源，通过 nginx 等 static server 去向用户提供前端网页。而通过 vite build 出来的静态网页资源本身是不具备反向代理的能力的，这意味着没法在前端侧规避跨域问题。此时，我们应该配置 nginx 规避跨域问题。我一向不怎么使用 nginx，使用的是它的平替品 caddy，因此 nginx 的配置文件需要大家自行搜索，",[32,2690,2693],{"href":2691,"rel":2692},"https://zhul.in/2023/12/27/php-and-vuejs-project-deploy-on-caddy/#Caddy-%E9%85%8D%E7%BD%AE",[36],"我的 caddyfile 在上一篇博客中已经给出","，仅供参考。",[206,2696,2697],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .sq3v1, html code.shiki .sq3v1{--shiki-default:#E45649;--shiki-dark:#C678DD}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .st7oF, html code.shiki .st7oF{--shiki-default:#0184BC;--shiki-dark:#ABB2BF}html pre.shiki code .s7GmK, html code.shiki .s7GmK{--shiki-default:#383A42;--shiki-dark:#E5C07B}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sNmU0, html code.shiki .sNmU0{--shiki-default:#986801;--shiki-dark:#E5C07B}html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}",{"title":46,"searchDepth":76,"depth":76,"links":2699},[2700,2704],{"id":2274,"depth":76,"text":2275,"children":2701},[2702,2703],{"id":2278,"depth":82,"text":2278},{"id":2390,"depth":82,"text":2390},{"id":2406,"depth":76,"text":2406,"children":2705},[2706,2707],{"id":2412,"depth":82,"text":2278},{"id":2685,"depth":82,"text":2390},{"title":2709,"date":2710,"path":2711,"tags":2712,"body":2714},"vuejs、php、caddy 与 docker —— web 期末大作业上云部署","2023-12-27 22:09:00","/2023/12/27/php-and-vuejs-project-deploy-on-caddy",[1005,2713,217,736,1008,218],"Caddy",{"type":12,"value":2715,"toc":3015},[2716,2733,2736,2745,2748,2776,2784,2798,2805,2868,2882,2886,2889,2896,2902,2905,2908,2915,2941,2944,2947,2958,2962,2965,2971,2994,2998,3005,3012],[252,2717,2718,2721,2727,2730],{},[15,2719,2720],{},"这学期修了一门叫《用HTML5 和 PHP编写JavaScript，jQuery 和 AJAX脚本》的 web 课（对，听起来很奇怪的名字）。期末大作业是写一个影评系统，前端允许使用框架，后端仅允许使用 php，具体的作业要求如下",[15,2722,2723],{},[24,2724],{"alt":2725,"src":2726},"作业要求","https://static.031130.xyz/uploads/2024/08/12/658c4c3128ae4.webp",[15,2728,2729],{},"（源码会在验收结束以后开源）",[15,2731,2732],{},"大作业写了得要有三个礼拜，工作时长加起来得有 30 个小时，想着验收之前上线一段时间积累一些评论数据，验收的时候也会更加顺利一些，于是就开始尝试在服务器上部署。部署的过程还是比较复杂的，所以写下这篇博客记录一下。",[747,2734,2735],{"id":2735},"后端部分",[15,2737,2738,2739,2744],{},"早前有",[32,2740,2743],{"href":2741,"rel":2742},"https://zhul.in/2021/10/21/picuploader-on-archlinux-with-caddy/",[36],"《PicUploader使用系列（一）——在Archlinux上使用Caddy部署PicUploader》","的经验，便觉得使用 Caddy + php-fpm 部署的方式多少有点麻烦了，这次便尝试了使用 Docker 部署、Caddy 反代的方式。",[15,2746,2747],{},"Dockerfile 如下:",[58,2749,2751],{"className":1228,"code":2750,"language":1230,"meta":46,"style":46},"FROM php:8-apache\nRUN docker-php-ext-install mysqli\nRUN a2enmod rewrite\nCOPY . /var/www/html\nEXPOSE 80\n",[64,2752,2753,2757,2762,2766,2771],{"__ignoreMap":46},[67,2754,2755],{"class":69,"line":70},[67,2756,1237],{},[67,2758,2759],{"class":69,"line":76},[67,2760,2761],{},"RUN docker-php-ext-install mysqli\n",[67,2763,2764],{"class":69,"line":82},[67,2765,1242],{},[67,2767,2768],{"class":69,"line":89},[67,2769,2770],{},"COPY . /var/www/html\n",[67,2772,2773],{"class":69,"line":95},[67,2774,2775],{},"EXPOSE 80\n",[15,2777,2778,2779,2783],{},"在后端的根目录下有一个 .htaccess 文件，将所有的请求都交给 index.php 来处理，这样就可以根据我的",[32,2780,2267],{"href":2781,"rel":2782},"https://zhul.in/2023/12/12/php-simple-rest-api/",[36],"中所提到的方式去构建不使用任何 php 框架实现的简易 router 效果",[58,2785,2787],{"className":1144,"code":2786,"language":1146,"meta":46,"style":46},"RewriteEngine On\nRewriteRule ^(.*) index.php [QSA,L]\n",[64,2788,2789,2794],{"__ignoreMap":46},[67,2790,2791],{"class":69,"line":70},[67,2792,2793],{},"RewriteEngine On\n",[67,2795,2796],{"class":69,"line":76},[67,2797,1171],{},[15,2799,2800,2801,2804],{},"构建 Docker 镜像时使用 ",[64,2802,2803],{},"docker build . -t mrs-php"," 命令，运行 docker 容器时使用命令",[58,2806,2808],{"className":670,"code":2807,"language":672,"meta":46,"style":46},"docker run -d \\\n    -p 7788:80 \\\n    --name mrs-php \\\n    -v /path/to/uploads:/var/www/html/uploads \\\n    --restart unless-stopped \\\n    mrs-php\n",[64,2809,2810,2823,2833,2843,2853,2863],{"__ignoreMap":46},[67,2811,2812,2815,2818,2820],{"class":69,"line":70},[67,2813,2814],{"class":679},"docker",[67,2816,2817],{"class":329}," run",[67,2819,1451],{"class":322},[67,2821,2822],{"class":422}," \\\n",[67,2824,2825,2828,2831],{"class":69,"line":76},[67,2826,2827],{"class":322},"    -p",[67,2829,2830],{"class":329}," 7788:80",[67,2832,2822],{"class":422},[67,2834,2835,2838,2841],{"class":69,"line":82},[67,2836,2837],{"class":322},"    --name",[67,2839,2840],{"class":329}," mrs-php",[67,2842,2822],{"class":422},[67,2844,2845,2848,2851],{"class":69,"line":89},[67,2846,2847],{"class":322},"    -v",[67,2849,2850],{"class":329}," /path/to/uploads:/var/www/html/uploads",[67,2852,2822],{"class":422},[67,2854,2855,2858,2861],{"class":69,"line":95},[67,2856,2857],{"class":322},"    --restart",[67,2859,2860],{"class":329}," unless-stopped",[67,2862,2822],{"class":422},[67,2864,2865],{"class":69,"line":101},[67,2866,2867],{"class":329},"    mrs-php\n",[15,2869,2870,2871,1079,2874,2877,2878,2881],{},"这样，后端就在 7788 端口上开起来了，后续 Caddy 只要将打到 ",[64,2872,2873],{},"/api/*",[64,2875,2876],{},"/uploads/*"," 的请求转发到 7788 端口即可，避免了使用 php-fpm 时需要的配置。",[64,2879,2880],{},"uploads"," 目录是用来存放图片的，我将这个路径挂在在宿主机的目录下，方便备份导入等操作。",[1035,2883,2885],{"id":2884},"mysql-连接时的小插曲","mysql 连接时的小插曲",[15,2887,2888],{},"需要注意的是，在 Docker 容器中运行的 php 如果想要访问宿主机上的 mysql，需要注意修改 mysql 服务器的 ip 地址，并允许 mysql 接收来自非本机的请求。",[15,2890,2891,2892,2895],{},"在宿主机中运行 ",[64,2893,2894],{},"ip -br a"," 命令可以看到 docker 所采用的虚拟网卡的 ip 地址",[58,2897,2900],{"className":2898,"code":2899,"language":560},[558],"docker0          UP             172.17.0.1/16 fe80::42:eff:febf:b26c/64\n",[64,2901,2899],{"__ignoreMap":46},[15,2903,2904],{},"我这边得到的 ip 地址是 172.17.0.1，所以在 php 那边访问的数据库 ip 地址就应该是 172.17.0.1，而非 localhost 或者 127.0.0.1",[15,2906,2907],{},"此外，需要允许宿主机的 mysql 接收来自 Docker 容器的请求",[15,2909,2910,2911,2914],{},"使用 ",[64,2912,2913],{},"docker network inspect bridge"," 命令可以查到 docker 容器的 ip 地址，接着需要去允许来自这个 ip 的请求。建议去网上自行搜索，因为 mysql 语句我自己也不熟悉。我使用的 mysql 版本是 8，语句似乎和以前的版本不兼容？我使用下面三个命令轮着输就好了（有时候报错，有时侯又不报错），有大佬懂的话评论区讲讲。",[58,2916,2920],{"className":2917,"code":2918,"language":2919,"meta":46,"style":46},"language-mysql shiki shiki-themes one-light one-dark-pro","use mysql;\nGRANT ALL ON *.* TO 'root'@'%';\nupdate user set host='%' where user='root';\nGRANT ALL ON *.* TO 'root'@'%';\n","mysql",[64,2921,2922,2927,2932,2937],{"__ignoreMap":46},[67,2923,2924],{"class":69,"line":70},[67,2925,2926],{},"use mysql;\n",[67,2928,2929],{"class":69,"line":76},[67,2930,2931],{},"GRANT ALL ON *.* TO 'root'@'%';\n",[67,2933,2934],{"class":69,"line":82},[67,2935,2936],{},"update user set host='%' where user='root';\n",[67,2938,2939],{"class":69,"line":89},[67,2940,2931],{},[747,2942,2943],{"id":2943},"前端部分",[15,2945,2946],{},"前端部分部署起来没什么难度",[15,2948,2949,2950,2953,2954,2957],{},"我使用的是 vite 开发的 vuejs 项目，直接使用 ",[64,2951,2952],{},"pnpm build"," 构建出静态文件，然后放入了 ",[64,2955,2956],{},"/var/www/mrs"," 目录，这部分没什么可说的",[747,2959,2961],{"id":2960},"caddy-配置","Caddy 配置",[15,2963,2964],{},"Caddy 配置如下",[58,2966,2969],{"className":2967,"code":2968,"language":560},[558],"example.com {\n    handle /api/* {\n        reverse_proxy localhost:7788\n    }\n\n    handle /uploads/* {\n        reverse_proxy localhost:7788\n    }\n\n    handle /* {\n        root * /var/www/mrs\n        file_server\n        try_files {path} /\n    }\n}\n",[64,2970,2968],{"__ignoreMap":46},[15,2972,2973,2974,1079,2976,2978,2979,2982,2983,2986,2987,2990,2991,2993],{},"将打到 ",[64,2975,2873],{},[64,2977,2876],{}," 都交给 7788 端口的后端进行处理，前端部分要使用 ",[64,2980,2981],{},"try_files"," 将请求都指向 ",[64,2984,2985],{},"/"," 或 ",[64,2988,2989],{},"/index.html"," 交由 vue-router 处理，否则 caddy 就找不到对应的文件了。这里我尝试过使用 route 关键词代替 handle，但 ",[64,2992,2981],{}," 的功能没有生效，这两者的区别官方文档中有提到，但我没看懂，等我以后看看有没有机会去折腾了。",[747,2995,2997],{"id":2996},"参考","参考:",[15,2999,3000],{},[32,3001,3004],{"href":3002,"rel":3003},"https://homeboyc.cn/blog/%E4%BD%BF%E7%94%A8caddy%E9%85%8D%E7%BD%AE%E5%90%8C%E4%B8%80%E5%9F%9F%E5%90%8D%E4%B8%8B%E7%9A%84%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB/",[36],"使用Caddy配置同一域名下的前后分离",[15,3006,3007],{},[32,3008,3011],{"href":3009,"rel":3010},"https://blog.lyh543.cn/notes/linux/caddy.html",[36],"Caddy 2",[206,3013,3014],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}",{"title":46,"searchDepth":76,"depth":76,"links":3016},[3017,3020,3021,3022],{"id":2735,"depth":76,"text":2735,"children":3018},[3019],{"id":2884,"depth":82,"text":2885},{"id":2943,"depth":76,"text":2943},{"id":2960,"depth":76,"text":2961},{"id":2996,"depth":76,"text":2997},127,1761897608974]