[{"data":1,"prerenderedAt":2911},["ShallowReactive",2],{"randomIndex/archives/page/4/":3,"index-page-4":4,"posts-nums-total":2910},0,[5,206,557,602,1505,1673,1938,2090,2206,2565],{"title":6,"date":7,"path":8,"tags":9,"body":14},"自建图床小记一——图床架构与 DNS 解析","2024-08-12 17:07:11","/2024/08/12/new-picbed-based-on-cloudflare-and-upyun",[10,11,12,13],"CDN","图床","Network","Cloudflare",{"type":15,"value":16,"toc":195},"minimark",[17,24,27,31,38,41,44,55,69,73,76,79,102,108,112,118,121,133,139,142,148,153,156,160,166,169,175,183,186],[18,19,20],"blockquote",{},[21,22,23],"p",{},"一直以来，我使用的都是使用付费的第三方图床，可惜最近几年为了节省成本，境内的稳定性出现了一些问题。过去一年中光是我本人遇到的无法访问的情况就有三四次，其中两次持续时间超过 2 小时，甚至有网友特意来 at 我告知我博客使用的图床出问题了，还有两次是在我作品验收前 24 小时内出现，幸亏我及时切换了资源链接。此外，境外 CDN 也从原先的 Cloudflare 换掉了，目前海外的解析结果似乎只有一个在美国的节点，其余地区（尤其是日本香港新加坡等常用的落地地区）的访问质量不佳，Google 的 page speed test 甚至提示我的图片拖慢了网站加载速度。",[21,25,26],{},"基于上述种种原因，我开始选择自建图床，前前后后折腾了快一周后，新图床终于投入使用，目前我的博客已经完成了所有图片资源的切换。",[28,29,30],"h2",{"id":30},"架构设计",[21,32,33],{},[34,35],"img",{"alt":36,"src":37},"图床架构设计图","https://static.031130.xyz/uploads/2024/08/12/80402e4da4ef7.webp",[21,39,40],{},"这一套架构使用 Dnspod 免费版实现在境内外的解析分流，将境内的流量导向又拍云 CDN 为境内的访客提供服务，在境外使用量大管饱的 Cloudflare CDN 节省成本，为全球提供加速访问。",[28,42,43],{"id":43},"为什么是又拍云",[21,45,46,47,54],{},"如你所见，我的博客底部挂了又拍云的 logo。",[48,49,53],"a",{"href":50,"rel":51},"https://www.upyun.com/league",[52],"nofollow","又拍云联盟","为个人开发者提供了每个月 10GB 存储和 15GB 的免费 CDN 流量，在每年通过申请后会以 67 元无门槛代金券的形式发放到账号，也不用担心某个月超了一点点而付出额外的费用。",[21,56,57,58,63,64],{},"相比之下，七牛云虽然控制台的前端 UI 不错，但出了这种事情导致其在我心里印象分极差: 「",[48,59,62],{"href":60,"rel":61},"https://blog.hanlin.press/2024/07/From-Shanxi-to-Qiniu/",[52],"从山西联通到组播IP：七牛云的奇怪视角（附分析和后日谈）","」",[48,65,68],{"href":66,"rel":67},"https://archive.md/ONeu3",[52],"Archived Here",[28,70,72],{"id":71},"为什么是-cloudflare-r2","为什么是 Cloudflare R2",[21,74,75],{},"作为自己的图床，必须要保证稳定性，境内访问的稳定性可以先放到一边，最重要的就是保证源文件的稳定性。不同于在自己的 VPS 上存储图片的方案，使用 Cloudflare R2 作为储存不需要关注 VPS 到期以后的图片迁移问题。使用 Cloudflare R2 作为储存，免费用量对于个人站点来说绰绰有余，在 10GB 存储容量超出之前不用考虑别的问题，也不用担心资金支持不下去导致的麻烦。而不使用又拍云提供的 10GB 存储也可以节省这部分的代金券金额，让代金券尽可能多的抵扣境内 CDN 流量带来的费用。",[28,77,78],{"id":78},"需要的东西",[80,81,82,86,89,96],"ul",{},[83,84,85],"li",{},"两个或两个以上的域名（其中一个需要备案）",[83,87,88],{},"Cloudflare 所支持的境外支付方式（PayPal 账号 / Visa Card / Master Card），用于开通 Cloudflare R2 和 Cloudflare SaaS 接入",[83,90,91,95],{},[92,93,94],"del",{},"很多很多钱","（其实没有很多，又拍云联盟每年的 67 元抵用券在我这里看来完全是够用的）",[83,97,98,99],{},"聪明的大脑，能够快速敲击键盘的双手，",[92,100,101],{},"能够支持你熬夜的心脏",[21,103,104],{},[105,106,107],"em",{},"* 在这一套架构中引入了香港 VPS 进行反向代理，一来是防止国内 CDN 与 Cloudflare 的网络连接质量过差导致的回源失败，二来也是方便我在没有国际联网的情况下进行图片的上传，但如果没有条件其实是可以去掉的。",[28,109,111],{"id":110},"dns-解析","DNS 解析",[21,113,114],{},[34,115],{"alt":116,"src":117},"DNS 解析方案 1","https://static.031130.xyz/uploads/2024/08/13/03d8243b67593.webp",[21,119,120],{},"如上图，将图床域名 NS 接入 DnsPod，工具人域名 NS 接入 Cloudflare 即可实现境内外分流的效果。",[122,123,124,127,130],"ol",{},[83,125,126],{},"图床访问域名在境外 CNAME 解析到工具人域名",[83,128,129],{},"图床访问域名在境内 CNAME 解析到境内 CDN 服务商",[83,131,132],{},"工具人域名在 Cloudflare 上解析到任何站点都行，只需点亮解析时 Cloudflare CDN 代理按钮即可生效。",[21,134,135],{},[34,136],{"alt":137,"src":138},"代理按钮","https://static.031130.xyz/uploads/2024/08/13/a0387d2919850.webp",[21,140,141],{},"但如果你的备案域名已经通过 NS 接入了 Cloudflare，可以采用下面这套架构。",[21,143,144],{},[34,145],{"alt":146,"src":147},"DNS 解析方案 2","https://static.031130.xyz/uploads/2024/08/13/d03d7b3155514.webp",[21,149,150],{},[105,151,152],{},"* 解析方案 2 中的图床访问域名和工具人域名可以是同属于同一二级域名的不同子域名",[21,154,155],{},"这种方案要多一步，把图床访问域名 CNAME 解析到用于分流的工具人域名。",[28,157,159],{"id":158},"cloudflare-saas-接入","Cloudflare SaaS 接入",[21,161,162],{},[34,163],{"alt":164,"src":165},"SaaS 接入","https://static.031130.xyz/uploads/2024/08/13/eb7186205b380.webp",[21,167,168],{},"SaaS 接入大概就是如图所示，此外还要配置 Cloudflare Workers 的域名访问",[21,170,171],{},[34,172],{"alt":173,"src":174},"Cloudflare Workers 域名访问","https://static.031130.xyz/uploads/2024/08/13/782a665cabe05.webp",[21,176,177,178,182],{},"这样就能保证在境外访问图床域名时将请求打到 Cloudflare Workers 上了，关于使用 Cloudflare Workers 构建图床 Restful API 相关的内容我放在",[48,179,181],{"href":180},"/2024/08/13/build-restful-api-for-cloudflare-r2-with-cloudflare-workers/","下一篇博客","讲。",[28,184,185],{"id":185},"参见",[80,187,188],{},[83,189,190],{},[48,191,194],{"href":192,"rel":193},"https://www.eallion.com/cdn-cname-cloudflare/",[52],"图床 CDN CNAME 接入 Cloudflare SaaS 实现分流",{"title":196,"searchDepth":197,"depth":197,"links":198},"",2,[199,200,201,202,203,204,205],{"id":30,"depth":197,"text":30},{"id":43,"depth":197,"text":43},{"id":71,"depth":197,"text":72},{"id":78,"depth":197,"text":78},{"id":110,"depth":197,"text":111},{"id":158,"depth":197,"text":159},{"id":185,"depth":197,"text":185},{"title":207,"date":208,"path":209,"tags":210,"body":215},"在 Linux 下使用 mitmproxy 抓取安卓手机上的 HTTPS 流量","2024-07-31 16:02:28","/2024/07/31/capture-android-https-traffic-on-linux-with-mitmproxy",[211,12,212,213,214],"mitmproxy","Linux","Archlinux","Android",{"type":15,"value":216,"toc":551},[217,220,223,261,272,275,278,285,289,353,359,362,393,397,400,474,482,485,490,493,496,501,504,509,511,547],[21,218,219],{},"纵使安卓下有小黄鸟 HttpCanary 这种抓包神器，但手机一块 6 英寸的小屏实在是不方便分析流量情况，还得是 PC 的屏幕更大一些，处理起流量信息来更得心应手一些。",[21,221,222],{},"把话说在前面，目前的安卓抓包有不小的限制",[80,224,225,228],{},[83,226,227],{},"Android 7 以下的版本: 直接以普通用户的权限安装 ssl 证书即可被信任",[83,229,230,231],{},"Android 7 以上的版本:\n",[80,232,233,246],{},[83,234,235,236,240,241,245],{},"安全性较低的应用: ",[237,238,239],"strong",{},"需要使用 root 权限","将证书移动至 ",[242,243,244],"code",{},"/system/etc/security/cacerts","使证书被系统信任",[83,247,248,249,254,255,260],{},"安全性较高的应用（比如微信 7.0 以上的版本）: 在满足上一条条件的情况下，需要阻止第三方应用使用自带的 ssl 证书信任范围（绕过 SSL Pinning）。通常情况下需要额外的手段对目标应用进行篡改，比如使用 ",[48,250,253],{"href":251,"rel":252},"https://github.com/Fuzion24/JustTrustMe",[52],"justTrustMe"," 这个 xposed 模块，或者 ",[48,256,259],{"href":257,"rel":258},"https://github.com/frida/frida/",[52],"frida","。",[18,262,263],{},[21,264,265,266,271],{},"除此之外，Linux 版本 >= 5.5 的安卓设备也可以使用 ",[48,267,270],{"href":268,"rel":269},"https://github.com/gojue/ecapture",[52],"eCapture"," 这款基于 eBPF Linux 内核模块实现的抓包软件，算是种奇技淫巧。",[21,273,274],{},"本文只讨论 Android 7 以上版本中安全性较低的应用，因为我当前的抓包目标局限于一款安全性不高的外包软件。",[28,276,277],{"id":277},"基本操作",[21,279,280,281,63],{},"见「",[48,282,284],{"href":283},"/2024/02/29/capture-https-traffic-on-linux-with-mitmproxy/","在 Linux 下使用 mitmproxy 抓取 HTTPS 流量",[28,286,288],{"id":287},"安装-ssl-证书","安装 ssl 证书",[290,291,295],"pre",{"className":292,"code":293,"language":294,"meta":196,"style":196},"language-bash shiki shiki-themes github-light github-dark","cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem $(openssl x509 -subject_hash_old -in $HOME/.mitmproxy/mitmproxy-ca-cert.pem | head -n 1).0\n","bash",[242,296,297],{"__ignoreMap":196},[298,299,302,306,310,314,317,320,323,327,330,332,334,338,341,344,347,350],"span",{"class":300,"line":301},"line",1,[298,303,305],{"class":304},"sScJk","cp",[298,307,309],{"class":308},"sVt8B"," $HOME",[298,311,313],{"class":312},"sZZnC","/.mitmproxy/mitmproxy-ca-cert.pem",[298,315,316],{"class":308}," $(",[298,318,319],{"class":304},"openssl",[298,321,322],{"class":312}," x509",[298,324,326],{"class":325},"sj4cs"," -subject_hash_old",[298,328,329],{"class":325}," -in",[298,331,309],{"class":308},[298,333,313],{"class":312},[298,335,337],{"class":336},"szBVR"," |",[298,339,340],{"class":304}," head",[298,342,343],{"class":325}," -n",[298,345,346],{"class":325}," 1",[298,348,349],{"class":308},")",[298,351,352],{"class":312},".0\n",[21,354,355,356,358],{},"此时我们就可以在家目录下找到一个以 .0 结尾的证书文件，我们的目标是将其放到手机的 ",[242,357,244],{}," 路径下。",[21,360,361],{},"对于一些出厂安卓版本较低、system 分区采用可变文件系统的手机，我们可以很轻松的使用带有 root 权限的文件管理器将证书文件移动到对应的目录（我这里就是）；而对于出厂版本较高的手机，system 分区可能是不可写的，需要采用额外的奇技淫巧。",[18,363,364,367,370,373,376,379],{},[21,365,366],{},"1、通过 ADB 将 HTTP Toolkit CA 证书推送到设备上。",[21,368,369],{},"2、从 /system/etc/security/cacerts/ 中复制所有系统证书到临时目录。",[21,371,372],{},"3、在 /system/etc/security/cacerts/ 上面挂载一个 tmpfs 内存文件系统。这实际上将一个可写的全新空文件系统放在了 /system 的一小部分上面。 将复制的系统证书移回到该挂载点。",[21,374,375],{},"4、将 HTTP Toolkit CA 证书也移动到该挂载点。",[21,377,378],{},"5、更新临时挂载点中所有文件的权限为 644，并将系统文件的 SELinux 标签设置为 system_file，以使其看起来像是合法的 Android 系统文件。",[21,380,381,382,387,388,63],{},"——",[48,383,386],{"href":384,"rel":385},"http://91fans.com.cn/post/certificate/",[52],"《安卓高版本安装系统证书 HTTPS 抓包 - 终极解决方案》"," 「",[48,389,392],{"href":390,"rel":391},"http://web.archive.org/web/20240801045307/http://91fans.com.cn/post/certificate/#gsc.tab=0",[52],"archived here",[28,394,396],{"id":395},"让被抓包的应用流量经过-mitm-代理服务器","让被抓包的应用流量经过 mitm 代理服务器",[21,398,399],{},"mitmproxy 默认会在 pc 端的 8080 端口开启一个 http 代理服务器，我们要做的就是想办法让待抓包的应用流量被这个 http 代理服务器所代理。",[290,401,403],{"className":292,"code":402,"language":294,"meta":196,"style":196},"[zhullyb@Archlinux ~]$ ip -br a\nlo               UNKNOWN        127.0.0.1/8 ::1/128\nenp0s31f6        UP             172.16.0.255/25 fe80::2df9:2927:cd44:65c/64\nwlp0s20f3        UP             192.168.20.212/24 fe80::a6bc:919:281e:dcab/64\ndocker0          DOWN           172.17.0.1/16 fe80::42:d1ff:febe:d513/64\n",[242,404,405,416,430,445,459],{"__ignoreMap":196},[298,406,407,410,413],{"class":300,"line":301},[298,408,409],{"class":308},"[zhullyb@Archlinux ",[298,411,412],{"class":336},"~",[298,414,415],{"class":308},"]$ ip -br a\n",[298,417,418,421,424,427],{"class":300,"line":197},[298,419,420],{"class":304},"lo",[298,422,423],{"class":312},"               UNKNOWN",[298,425,426],{"class":312},"        127.0.0.1/8",[298,428,429],{"class":312}," ::1/128\n",[298,431,433,436,439,442],{"class":300,"line":432},3,[298,434,435],{"class":304},"enp0s31f6",[298,437,438],{"class":312},"        UP",[298,440,441],{"class":312},"             172.16.0.255/25",[298,443,444],{"class":312}," fe80::2df9:2927:cd44:65c/64\n",[298,446,448,451,453,456],{"class":300,"line":447},4,[298,449,450],{"class":304},"wlp0s20f3",[298,452,438],{"class":312},[298,454,455],{"class":312},"             192.168.20.212/24",[298,457,458],{"class":312}," fe80::a6bc:919:281e:dcab/64\n",[298,460,462,465,468,471],{"class":300,"line":461},5,[298,463,464],{"class":304},"docker0",[298,466,467],{"class":312},"          DOWN",[298,469,470],{"class":312},"           172.17.0.1/16",[298,472,473],{"class":312}," fe80::42:d1ff:febe:d513/64\n",[21,475,476,477,481],{},"在这里我们能看到本机的无线网卡地址是 192.168.20.212，所以 http 代理服务器的地址就是 ",[48,478,479],{"href":479,"rel":480},"http://192.168.20.212:8080",[52]," 。（如果你的有线网卡和手机在同一局域网下，当然也可以用有线网卡的 ip 地址）",[21,483,484],{},"我们当然可以在安卓手机的 WIFI 连接页面填入 http 代理地址。",[21,486,487],{},[34,488],{"alt":196,"src":489},"https://static.031130.xyz/uploads/2024/08/12/66ab548080ed6.webp",[21,491,492],{},"但这对我来说似乎并不是一个好主意：一来并不是所有的应用都会默认使用 http 代理服务器，二来这回导致抓包目标不明确，非目标应用的流量也会经过代理服务器。",[21,494,495],{},"我选择了 Nekobox 这个常见的代理软件，它支持 http 代理服务器，且允许分应用代理。",[21,497,498],{},[34,499],{"alt":196,"src":500},"https://static.031130.xyz/uploads/2024/08/12/66ab54f08dfd6.webp",[21,502,503],{},"可以看到能正常抓取 https 流量",[21,505,506],{},[34,507],{"alt":196,"src":508},"https://static.031130.xyz/uploads/2024/08/12/66ab5970a6ac7.webp",[28,510,185],{"id":185},[80,512,513,520,527,534,540],{},[83,514,515],{},[48,516,519],{"href":517,"rel":518},"https://ibukifalling.github.io/2023/06/07/Android-app-packet-capture/",[52],"安卓应用防抓包机制及一些绕过",[83,521,522],{},[48,523,526],{"href":524,"rel":525},"https://chorer.github.io/2022/05/19/A-%E5%AE%89%E5%8D%937.0%E7%B3%BB%E7%BB%9F%E6%8A%93%E5%8C%85%E6%96%B9%E6%A1%88/",[52],"安卓7.0+系统抓包方案",[83,528,529],{},[48,530,533],{"href":531,"rel":532},"https://www.cnblogs.com/snad/p/17449454.html",[52],"frida抓包",[83,535,536],{},[48,537,539],{"href":268,"rel":538},[52],"gojue/ecapture",[83,541,542],{},[48,543,546],{"href":544,"rel":545},"http://91fans.com.cn/post/certificate/#gsc.tab=0",[52],"安卓高版本安装系统证书 HTTPS 抓包 - 终极解决方案",[548,549,550],"style",{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":196,"searchDepth":197,"depth":197,"links":552},[553,554,555,556],{"id":277,"depth":197,"text":277},{"id":287,"depth":197,"text":288},{"id":395,"depth":197,"text":396},{"id":185,"depth":197,"text":185},{"title":558,"date":559,"path":560,"tags":561,"body":565},"为中柏 N100 小主机开启来电自启","2024-07-22 23:31:51","/2024/07/22/enable-ac-power-loss-for-jumper-n100",[562,563,564],"Hardware","HomeServer","笔记",{"type":15,"value":566,"toc":600},[567,570,573,576,581,584,595],[21,568,569],{},"因为收到通知，寝室过两天要断电 20 分钟，所以需要打开 N100 家里云的来电自启功能。",[21,571,572],{},"正常关机短暂等待数秒后，开机，狂按 Delete 键进入 BIOS。",[21,574,575],{},"在 Advanced 选项中选择「OEM Configuration」",[21,577,578],{},[34,579],{"alt":196,"src":580},"https://static.031130.xyz/uploads/2024/08/12/669e7e6ae10a4.webp",[21,582,583],{},"可以在最后一行「AC Power Loss」中选择模式。",[80,585,586,589,592],{},[83,587,588],{},"Power Off: 关闭相关功能。",[83,590,591],{},"Power On: 传统意义上的来电自启，只要接通电源就会自启动。",[83,593,594],{},"Last State: 只有在上次关机是意外断电导致时，接通电源才会自启动。",[21,596,597],{},[34,598],{"alt":196,"src":599},"https://static.031130.xyz/uploads/2024/08/12/669e7e5ab7ad6.webp",{"title":196,"searchDepth":197,"depth":197,"links":601},[],{"title":603,"date":604,"path":605,"tags":606,"body":610},"我的博客被完整地反向代理，并自动翻译成了繁体中文","2024-07-18 11:22:37","/2024/07/18/my-blog-is-completely-proxied-and-translated-into-traditional-chinese",[607,12,13,608,609],"Blog","waline","umami",{"type":15,"value":611,"toc":1495},[612,616,619,622,628,637,640,646,649,655,713,719,722,729,732,735,738,743,754,761,766,769,774,777,782,788,791,794,800,802,809,839,843,848,859,1120,1124,1127,1131,1139,1429,1432,1438,1440,1443,1449,1456,1460,1467,1472,1481,1484,1487,1492],[28,613,615],{"id":614},"_20240820更新","2024.08.20更新",[21,617,618],{},"我将境外的 Github Pages 解析停了，所有流量全部指向我的 HK 的 vps。",[21,620,621],{},"访问对方站点 /?about/ 时，在我服务器 /about/ 收到了一个奇怪的请求，访问对方别的路径时也会在我服务器的对应路径收到请求，UA 伪装成了 Google 家的爬虫:",[21,623,624],{},[34,625],{"alt":626,"src":627},"caddy 日志","https://static.031130.xyz/uploads/2024/08/20/82e8dc389f081.webp",[21,629,630,631,636],{},"（关于为什么有 Mozilla 字段，可以参见 ",[48,632,635],{"href":633,"rel":634},"https://imbearchild.cyou/archives/2024/04/yes-browser-are-faking-to-be-firefox/",[52],"《是的，所有现代浏览器都假装自己是火狐》","）",[21,638,639],{},"这个 ip 的归属地是新加坡 Cogent，合理怀疑是对方的源站 IP（也有可能只是对方用于请求的爬虫 ip）。直接通过 ip 访问对方站点，发现是 lnmp 的安装成功提示:",[21,641,642],{},[34,643],{"alt":644,"src":645},"ip 访问","https://static.031130.xyz/uploads/2024/08/20/4d181fd0bcc11.webp",[21,647,648],{},"我注意到对方站点在 html 结尾处加了如下字段",[21,650,651],{},[34,652],{"alt":653,"src":654},"这里是直接请求的 archive 存档，所以有 archive 前缀","https://static.031130.xyz/uploads/2024/08/20/057a829ec9e4a.webp",[290,656,660],{"className":657,"code":658,"language":659,"meta":196,"style":196},"language-html shiki shiki-themes github-light github-dark","\u003C!-- freevslinks -->\u003Cdiv style=\"display:none\">\u003Ca href=\"http://www.xxfseo.com/?time=1721267439\">xxfseo.com\u003C/a>\u003C/div>\u003C!-- /freevslinks -->\n","html",[242,661,662],{"__ignoreMap":196},[298,663,664,668,671,675,678,681,684,687,689,692,694,697,700,702,705,707,710],{"class":300,"line":301},[298,665,667],{"class":666},"sJ8bj","\u003C!-- freevslinks -->",[298,669,670],{"class":308},"\u003C",[298,672,674],{"class":673},"s9eBZ","div",[298,676,677],{"class":304}," style",[298,679,680],{"class":308},"=",[298,682,683],{"class":312},"\"display:none\"",[298,685,686],{"class":308},">\u003C",[298,688,48],{"class":673},[298,690,691],{"class":304}," href",[298,693,680],{"class":308},[298,695,696],{"class":312},"\"http://www.xxfseo.com/?time=1721267439\"",[298,698,699],{"class":308},">xxfseo.com\u003C/",[298,701,48],{"class":673},[298,703,704],{"class":308},">\u003C/",[298,706,674],{"class":673},[298,708,709],{"class":308},">",[298,711,712],{"class":666},"\u003C!-- /freevslinks -->\n",[21,714,715],{},[34,716],{"alt":717,"src":718},"官网","https://static.031130.xyz/uploads/2024/08/20/b0449632623b2.webp",[21,720,721],{},"似乎是专业产生互联网垃圾的组织。",[21,723,724,725,728],{},"我目前已经屏蔽了来自 ",[242,726,727],{},"154.39.149.128"," 这个 ip 的访问请求，对方的站点暂时性崩盘，以后可能会换用别的 ip 来爬也说不准，先到此为止吧。",[730,731],"hr",{},[28,733,734],{"id":734},"现象",[21,736,737],{},"今早打开我的流量统计网站，发现我的博客有一个神奇的 referer",[21,739,740],{},[34,741],{"alt":196,"src":742},"https://static.031130.xyz/uploads/2024/08/12/66989d79e740c.webp",[21,744,745,746,751],{},"顶着我博客用的 favicon，但竟然不是我的域名。点进去一看，发现我的博客被翻译成了繁体中文，而且语句读上去也不是很通畅。",[48,747,750],{"href":748,"rel":749},"https://web.archive.org/web/20240718015038/https://theodorelobas.com/",[52],"Archived here.",[34,752],{"alt":196,"src":753},"https://static.031130.xyz/uploads/2024/08/12/66ab4ffa4eda3.webp",[21,755,756,757],{},"再打开关于页一看，把我的博客域名给干掉了，只留下一个反代域名。",[48,758,750],{"href":759,"rel":760},"http://web.archive.org/web/20240718034705/https://theodorelobas.com/?about/",[52],[21,762,763],{},[34,764],{"alt":196,"src":765},"https://static.031130.xyz/uploads/2024/08/12/66989f7f73b90.webp",[21,767,768],{},"随机打开一个幸运页面，使用 F12 控制台查看流量情况，发现 umami 统计和 waline 评论都用的我个人部署的",[21,770,771],{},[34,772],{"alt":196,"src":773},"https://static.031130.xyz/uploads/2024/08/12/6698a0bf39f8d.webp",[21,775,776],{},"查询 ip 归属地，是老朋友 Cloudflare 泛播",[21,778,779],{},[34,780],{"alt":196,"src":781},"https://static.031130.xyz/uploads/2024/08/12/6698a101845a2.webp",[21,783,784],{},[34,785],{"alt":786,"src":787},"url 上不明所以的问号","https://static.031130.xyz/uploads/2024/08/12/6698a2dd3d78a.webp",[21,789,790],{},"结合 url 上不明所以的问号，推测应该是 cloudflare workers 反向代理 + 调用翻译 api + 关键词替换。我小小更新了某个页面，发现对方站点也立马更新了，基本可以确定是反向代理。",[21,792,793],{},"whois 查询没有获得任何有用信息，一眼望去全是隐私保护。",[21,795,796],{},[34,797],{"alt":798,"src":799},"whois 信息","https://static.031130.xyz/uploads/2024/08/12/6698a2deaa9d0.webp",[730,801],{},[21,803,804,805,808],{},"事先声明，我的博客采用",[242,806,807],{},"CC BY-NC-SA 4.0","，我个人是非常欢迎任何人注明出处的情况下搬运甚至翻译我的文章的，甚至允许搬运到 csdn——只要你不开收费访问。但这种反代行为我是非常抵触的。",[122,810,811,821,827,833,836],{},[83,812,813,814,816,817],{},"文章被翻译成了繁体中文，但没有注明是翻译稿，直接把我本人的网名用繁体写了上去，这并不符合 ",[242,815,807],{}," 的要求。",[34,818],{"alt":819,"src":820},"如果修改了原文需要做出说明","https://static.031130.xyz/uploads/2024/08/12/669929695144b.webp",[83,822,823,824],{},"翻译质量很差，就连机翻都不应有这种奇怪的同义词替换，问了问熟悉繁中的朋友说是港台也没有这种用法，像是故意洗稿。",[34,825],{"alt":196,"src":826},"https://static.031130.xyz/uploads/2024/08/12/6699bdbab5f0a.webp",[83,828,829,830],{},"反向代理了我的整个网站，但把我关于页上的博客链接给去掉了，我不认为这是善意的反代行为。",[48,831,750],{"href":759,"rel":832},[52],[83,834,835],{},"仍然在使用我的 waline 评论和 umami 统计。",[83,837,838],{},"没有给我任何事先的邮件说明或者评论留言，whois 开隐私保护的情况下，我找不到任何方法去联系这位域名的持有者。",[28,840,842],{"id":841},"怎么办","怎么办？",[844,845,847],"h3",{"id":846},"植入-js-进行跳转","植入 js 进行跳转",[21,849,850,851,854,855,858],{},"因为对方同步的及时性很强，高度怀疑是 cloudflare workers 反向代理，且评论和流量统计都直接原模原样用的是我的 js，我就注入一个 js 检测 host，如果不是我的域名或者本地调试时使用的 ",[242,852,853],{},"127.0.0.1"," or ",[242,856,857],{},"localhost","，则清空页面内容，给出文字提示，五秒后跳转到我的博客。代码如下:",[290,860,864],{"className":861,"code":862,"language":863,"meta":196,"style":196},"language-javascript shiki shiki-themes github-light github-dark","const host = window.location.host\nif (host !== 'zhul.in' && ! host.startsWith('localhost') && ! host.startsWith('127.0.0.1')) {\n    document.body.innerHTML = [\n        '\u003Cdiv style=\"margin: auto;\">',\n        '\u003Ch1>当前页面并非本文作者的主页，将在五秒后跳转。\u003C/h1>',\n        '\u003Cbr />',\n        '\u003Ch1>请此站点持有者联系我: zhullyb@outlook.com\u003C/h1>',\n        '\u003C/div>',\n    ].join('')\n    document.body.style = [\n        'background-color: white;',\n        'color: black;',\n        'text-align: center;',\n        'font-size: 50px;',\n        'width: 100vw;',\n        'height: 100vh;',\n        'display: flex;',\n    ].join('')\n    setTimeout(() => {\n        window.location.href = 'https://zhul.in'\n    }, 5000)\n}\n","javascript",[242,865,866,880,932,942,950,957,965,973,981,998,1008,1016,1024,1032,1040,1048,1056,1064,1077,1092,1103,1114],{"__ignoreMap":196},[298,867,868,871,874,877],{"class":300,"line":301},[298,869,870],{"class":336},"const",[298,872,873],{"class":325}," host",[298,875,876],{"class":336}," =",[298,878,879],{"class":308}," window.location.host\n",[298,881,882,885,888,891,894,897,900,903,906,909,912,915,918,920,922,924,926,929],{"class":300,"line":197},[298,883,884],{"class":336},"if",[298,886,887],{"class":308}," (host ",[298,889,890],{"class":336},"!==",[298,892,893],{"class":312}," 'zhul.in'",[298,895,896],{"class":336}," &&",[298,898,899],{"class":336}," !",[298,901,902],{"class":308}," host.",[298,904,905],{"class":304},"startsWith",[298,907,908],{"class":308},"(",[298,910,911],{"class":312},"'localhost'",[298,913,914],{"class":308},") ",[298,916,917],{"class":336},"&&",[298,919,899],{"class":336},[298,921,902],{"class":308},[298,923,905],{"class":304},[298,925,908],{"class":308},[298,927,928],{"class":312},"'127.0.0.1'",[298,930,931],{"class":308},")) {\n",[298,933,934,937,939],{"class":300,"line":432},[298,935,936],{"class":308},"    document.body.innerHTML ",[298,938,680],{"class":336},[298,940,941],{"class":308}," [\n",[298,943,944,947],{"class":300,"line":447},[298,945,946],{"class":312},"        '\u003Cdiv style=\"margin: auto;\">'",[298,948,949],{"class":308},",\n",[298,951,952,955],{"class":300,"line":461},[298,953,954],{"class":312},"        '\u003Ch1>当前页面并非本文作者的主页，将在五秒后跳转。\u003C/h1>'",[298,956,949],{"class":308},[298,958,960,963],{"class":300,"line":959},6,[298,961,962],{"class":312},"        '\u003Cbr />'",[298,964,949],{"class":308},[298,966,968,971],{"class":300,"line":967},7,[298,969,970],{"class":312},"        '\u003Ch1>请此站点持有者联系我: zhullyb@outlook.com\u003C/h1>'",[298,972,949],{"class":308},[298,974,976,979],{"class":300,"line":975},8,[298,977,978],{"class":312},"        '\u003C/div>'",[298,980,949],{"class":308},[298,982,984,987,990,992,995],{"class":300,"line":983},9,[298,985,986],{"class":308},"    ].",[298,988,989],{"class":304},"join",[298,991,908],{"class":308},[298,993,994],{"class":312},"''",[298,996,997],{"class":308},")\n",[298,999,1001,1004,1006],{"class":300,"line":1000},10,[298,1002,1003],{"class":308},"    document.body.style ",[298,1005,680],{"class":336},[298,1007,941],{"class":308},[298,1009,1011,1014],{"class":300,"line":1010},11,[298,1012,1013],{"class":312},"        'background-color: white;'",[298,1015,949],{"class":308},[298,1017,1019,1022],{"class":300,"line":1018},12,[298,1020,1021],{"class":312},"        'color: black;'",[298,1023,949],{"class":308},[298,1025,1027,1030],{"class":300,"line":1026},13,[298,1028,1029],{"class":312},"        'text-align: center;'",[298,1031,949],{"class":308},[298,1033,1035,1038],{"class":300,"line":1034},14,[298,1036,1037],{"class":312},"        'font-size: 50px;'",[298,1039,949],{"class":308},[298,1041,1043,1046],{"class":300,"line":1042},15,[298,1044,1045],{"class":312},"        'width: 100vw;'",[298,1047,949],{"class":308},[298,1049,1051,1054],{"class":300,"line":1050},16,[298,1052,1053],{"class":312},"        'height: 100vh;'",[298,1055,949],{"class":308},[298,1057,1059,1062],{"class":300,"line":1058},17,[298,1060,1061],{"class":312},"        'display: flex;'",[298,1063,949],{"class":308},[298,1065,1067,1069,1071,1073,1075],{"class":300,"line":1066},18,[298,1068,986],{"class":308},[298,1070,989],{"class":304},[298,1072,908],{"class":308},[298,1074,994],{"class":312},[298,1076,997],{"class":308},[298,1078,1080,1083,1086,1089],{"class":300,"line":1079},19,[298,1081,1082],{"class":304},"    setTimeout",[298,1084,1085],{"class":308},"(() ",[298,1087,1088],{"class":336},"=>",[298,1090,1091],{"class":308}," {\n",[298,1093,1095,1098,1100],{"class":300,"line":1094},20,[298,1096,1097],{"class":308},"        window.location.href ",[298,1099,680],{"class":336},[298,1101,1102],{"class":312}," 'https://zhul.in'\n",[298,1104,1106,1109,1112],{"class":300,"line":1105},21,[298,1107,1108],{"class":308},"    }, ",[298,1110,1111],{"class":325},"5000",[298,1113,997],{"class":308},[298,1115,1117],{"class":300,"line":1116},22,[298,1118,1119],{"class":308},"}\n",[844,1121,1123],{"id":1122},"给-waline-和-umami-设置限制","给 waline 和 umami 设置限制",[21,1125,1126],{},"我博客使用的 waline 和 umami 均是我自己在 vercel 上架设的，我自然可以根据访客的 referer 来判断请求的来源。不过看了下，vercel.json 文件并不能直接实现这个需求，可能需要我们自己来编写一些简易的中间件。",[1128,1129,1130],"h4",{"id":608},"Waline",[21,1132,1133,1134,260],{},"waline 文档中有明确提到，waline 基于 Koa 框架开发，可以",[48,1135,1138],{"href":1136,"rel":1137},"https://waline.js.org/reference/server/plugin.html#%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%88%B6%E4%BD%9C",[52],"自行编写中间件",[290,1140,1144],{"className":1141,"code":1142,"language":1143,"meta":196,"style":196},"language-js shiki shiki-themes github-light github-dark","// example/index.cjs\nconst Application = require('@waline/vercel');\n\nmodule.exports = Application({\n    plugins: [\n        {\n            middlewares: [\n                async (ctx, next) => {\n                    const referer = ctx.request.headers['referer'];\n                    if (referer) {\n                        if (\n                            !referer.include('localhost') &&\n                            !referer.include('127.0.0.1') &&\n                            !referer.include('zhul.in')\n                        ) {\n                            ctx.status = 403\n                            ctx.body = 'Forbidden'\n                            return\n                        }\n                    }\n                    await next();\n                },\n            ]\n        }\n    ],\n    async postSave(comment) {\n        // do what ever you want after comment saved\n    },\n});\n","js",[242,1145,1146,1151,1171,1177,1195,1200,1205,1210,1234,1253,1261,1269,1289,1305,1320,1325,1335,1345,1350,1355,1360,1371,1376,1382,1388,1394,1411,1417,1423],{"__ignoreMap":196},[298,1147,1148],{"class":300,"line":301},[298,1149,1150],{"class":666},"// example/index.cjs\n",[298,1152,1153,1155,1158,1160,1163,1165,1168],{"class":300,"line":197},[298,1154,870],{"class":336},[298,1156,1157],{"class":325}," Application",[298,1159,876],{"class":336},[298,1161,1162],{"class":304}," require",[298,1164,908],{"class":308},[298,1166,1167],{"class":312},"'@waline/vercel'",[298,1169,1170],{"class":308},");\n",[298,1172,1173],{"class":300,"line":432},[298,1174,1176],{"emptyLinePlaceholder":1175},true,"\n",[298,1178,1179,1182,1185,1188,1190,1192],{"class":300,"line":447},[298,1180,1181],{"class":325},"module",[298,1183,1184],{"class":308},".",[298,1186,1187],{"class":325},"exports",[298,1189,876],{"class":336},[298,1191,1157],{"class":304},[298,1193,1194],{"class":308},"({\n",[298,1196,1197],{"class":300,"line":461},[298,1198,1199],{"class":308},"    plugins: [\n",[298,1201,1202],{"class":300,"line":959},[298,1203,1204],{"class":308},"        {\n",[298,1206,1207],{"class":300,"line":967},[298,1208,1209],{"class":308},"            middlewares: [\n",[298,1211,1212,1215,1218,1222,1225,1228,1230,1232],{"class":300,"line":975},[298,1213,1214],{"class":336},"                async",[298,1216,1217],{"class":308}," (",[298,1219,1221],{"class":1220},"s4XuR","ctx",[298,1223,1224],{"class":308},", ",[298,1226,1227],{"class":1220},"next",[298,1229,914],{"class":308},[298,1231,1088],{"class":336},[298,1233,1091],{"class":308},[298,1235,1236,1239,1242,1244,1247,1250],{"class":300,"line":983},[298,1237,1238],{"class":336},"                    const",[298,1240,1241],{"class":325}," referer",[298,1243,876],{"class":336},[298,1245,1246],{"class":308}," ctx.request.headers[",[298,1248,1249],{"class":312},"'referer'",[298,1251,1252],{"class":308},"];\n",[298,1254,1255,1258],{"class":300,"line":1000},[298,1256,1257],{"class":336},"                    if",[298,1259,1260],{"class":308}," (referer) {\n",[298,1262,1263,1266],{"class":300,"line":1010},[298,1264,1265],{"class":336},"                        if",[298,1267,1268],{"class":308}," (\n",[298,1270,1271,1274,1277,1280,1282,1284,1286],{"class":300,"line":1018},[298,1272,1273],{"class":336},"                            !",[298,1275,1276],{"class":308},"referer.",[298,1278,1279],{"class":304},"include",[298,1281,908],{"class":308},[298,1283,911],{"class":312},[298,1285,914],{"class":308},[298,1287,1288],{"class":336},"&&\n",[298,1290,1291,1293,1295,1297,1299,1301,1303],{"class":300,"line":1026},[298,1292,1273],{"class":336},[298,1294,1276],{"class":308},[298,1296,1279],{"class":304},[298,1298,908],{"class":308},[298,1300,928],{"class":312},[298,1302,914],{"class":308},[298,1304,1288],{"class":336},[298,1306,1307,1309,1311,1313,1315,1318],{"class":300,"line":1034},[298,1308,1273],{"class":336},[298,1310,1276],{"class":308},[298,1312,1279],{"class":304},[298,1314,908],{"class":308},[298,1316,1317],{"class":312},"'zhul.in'",[298,1319,997],{"class":308},[298,1321,1322],{"class":300,"line":1042},[298,1323,1324],{"class":308},"                        ) {\n",[298,1326,1327,1330,1332],{"class":300,"line":1050},[298,1328,1329],{"class":308},"                            ctx.status ",[298,1331,680],{"class":336},[298,1333,1334],{"class":325}," 403\n",[298,1336,1337,1340,1342],{"class":300,"line":1058},[298,1338,1339],{"class":308},"                            ctx.body ",[298,1341,680],{"class":336},[298,1343,1344],{"class":312}," 'Forbidden'\n",[298,1346,1347],{"class":300,"line":1066},[298,1348,1349],{"class":336},"                            return\n",[298,1351,1352],{"class":300,"line":1079},[298,1353,1354],{"class":308},"                        }\n",[298,1356,1357],{"class":300,"line":1094},[298,1358,1359],{"class":308},"                    }\n",[298,1361,1362,1365,1368],{"class":300,"line":1105},[298,1363,1364],{"class":336},"                    await",[298,1366,1367],{"class":304}," next",[298,1369,1370],{"class":308},"();\n",[298,1372,1373],{"class":300,"line":1116},[298,1374,1375],{"class":308},"                },\n",[298,1377,1379],{"class":300,"line":1378},23,[298,1380,1381],{"class":308},"            ]\n",[298,1383,1385],{"class":300,"line":1384},24,[298,1386,1387],{"class":308},"        }\n",[298,1389,1391],{"class":300,"line":1390},25,[298,1392,1393],{"class":308},"    ],\n",[298,1395,1397,1400,1403,1405,1408],{"class":300,"line":1396},26,[298,1398,1399],{"class":336},"    async",[298,1401,1402],{"class":304}," postSave",[298,1404,908],{"class":308},[298,1406,1407],{"class":1220},"comment",[298,1409,1410],{"class":308},") {\n",[298,1412,1414],{"class":300,"line":1413},27,[298,1415,1416],{"class":666},"        // do what ever you want after comment saved\n",[298,1418,1420],{"class":300,"line":1419},28,[298,1421,1422],{"class":308},"    },\n",[298,1424,1426],{"class":300,"line":1425},29,[298,1427,1428],{"class":308},"});\n",[21,1430,1431],{},"成效立竿见影",[21,1433,1434],{},[34,1435],{"alt":1436,"src":1437},"效果图","https://static.031130.xyz/uploads/2024/08/12/6698d6570a780.webp",[1128,1439,609],{"id":609},[21,1441,1442],{},"对 umami 的第一次请求是 script.js，这个请求是因为 html 头部添加了 umami 的 script 链接，这一次请求是不带有 referer 的，因此，对方站点使用我的 umami 统计并不会给我的博客访问统计造成错乱——umami 能够自行分辨对方的站点是否是当初添加网站时填写的站点。但我不能忍的地方在与 umami 的数据库会记录对方站点的流量情况，这占用了我的数据库空间。",[21,1444,1445],{},[34,1446],{"alt":1447,"src":1448},"数据库导出文件","https://static.031130.xyz/uploads/2024/08/12/6698d9c326739.webp",[21,1450,1451,1452,1455],{},"umami 使用 nextjs 开发，似乎并没有给我留可供自定义的接口，贸然修改源码则可能会在下次 merge 官方代码时遇到麻烦。为了给自己省点事，我选择不再让博客加载 ",[242,1453,1454],{},"https://umami.zhul.in/script.js"," ，而是将其中的内容复制保存下来，添加基于 host 的判断条件来决定是否向自建的 umami 服务发起请求。",[844,1457,1459],{"id":1458},"尝试向-cloudflare-举报滥用行为","尝试向 cloudflare 举报滥用行为",[21,1461,1462,1463],{},"cloudflare 是允许提交滥用举报的，这个域名正在使用 cloudflare 提供服务，因此我可以尝试举报，链接在这里: ",[48,1464,1465],{"href":1465,"rel":1466},"https://www.cloudflare.com/zh-cn/trust-hub/reporting-abuse/",[52],[21,1468,1469],{},[34,1470],{"alt":196,"src":1471},"https://static.031130.xyz/uploads/2024/08/12/669926eddb16e.webp",[21,1473,1474,1475,1477,1478,1480],{},"类别就可以选 DCMA，因为对方没有遵守 ",[242,1476,807],{}," 协议给我的文章做出合理的署名，且我的博客关于页面不属于 ",[242,1479,807],{}," 的范畴，对方是没有理由去对这一页做出二次分发的行为的。",[21,1482,1483],{},"不过我暂时还没这么做，我期待着我前面的几个方案能够奏效，我仍寄希望于对方会及时和我沟通，我也不太想为此去填一张额外的烦人的表单。",[28,1485,1486],{"id":1486},"最终效果",[21,1488,1489],{},[34,1490],{"alt":196,"src":1491},"https://static.031130.xyz/uploads/2024/08/12/66992ad0d2890.gif",[548,1493,1494],{},"html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .s4XuR, html code.shiki .s4XuR{--shiki-default:#E36209;--shiki-dark:#FFAB70}",{"title":196,"searchDepth":197,"depth":197,"links":1496},[1497,1498,1499,1504],{"id":614,"depth":197,"text":615},{"id":734,"depth":197,"text":734},{"id":841,"depth":197,"text":842,"children":1500},[1501,1502,1503],{"id":846,"depth":432,"text":847},{"id":1122,"depth":432,"text":1123},{"id":1458,"depth":432,"text":1459},{"id":1486,"depth":197,"text":1486},{"title":1506,"date":1507,"path":1508,"tags":1509,"body":1512},"尝试体验 Fedora COPR 中的 allow SSH 功能","2024-07-15 11:14:12","/2024/07/15/try-ssh-connection-in-fedora-copr",[1510,1511,212],"Fedora","Experience",{"type":15,"value":1513,"toc":1667},[1514,1517,1522,1525,1536,1539,1542,1545,1550,1553,1558,1561,1566,1569,1575,1578,1584,1587,1593,1596,1602,1605,1608,1635,1638,1658,1661],[21,1515,1516],{},"在今年的早些时候，我在 COPR 看到了一个新出现的名为「allow SSH」的按钮。",[21,1518,1519],{},[34,1520],{"alt":196,"src":1521},"https://static.031130.xyz/uploads/2024/08/12/6694949de2921.webp",[21,1523,1524],{},"我在 COPR 的 User Documentation 中找到了对应的描述。",[18,1526,1527],{},[21,1528,1529,1530,1535],{},"Sometimes it is useful to manually debug failed builds not locally but within the Copr infrastructure. That’s why it is possible to allow SSH access to a copr builder. More information in the ",[48,1531,1534],{"href":1532,"rel":1533},"https://frostyx.cz/posts/ssh-access-to-copr-builders",[52],"SSH access to Copr builders"," blog post.",[21,1537,1538],{},"COPR 的这项功能允许包维护者远程访问自己没有的 CPU 架构或 Linux 发行版的 Linux 环境，大大减少打包时的痛点。",[28,1540,1541],{"id":1541},"开始使用",[21,1543,1544],{},"尝试点击按钮，获得如下界面，可以填写自己的 ssh 公钥，最多可以选择两台设备，如果选择的设备数量大于 2，则剩下的人物会维持在 pending 状态，直到被你 ssh 连接的构建机完成对应的构建任务。",[21,1546,1547],{},[34,1548],{"alt":196,"src":1549},"https://static.031130.xyz/uploads/2024/08/12/66949782e9177.webp",[21,1551,1552],{},"在该次构建的详情页面，等待 backend.log 按钮出现",[21,1554,1555],{},[34,1556],{"alt":196,"src":1557},"https://static.031130.xyz/uploads/2024/08/12/6694ca668003e.webp",[21,1559,1560],{},"在这个 url 对应的文件中，我们可以找到需要的 ssh 命令",[21,1562,1563],{},[34,1564],{"alt":196,"src":1565},"https://static.031130.xyz/uploads/2024/08/12/6694988c63899.webp",[21,1567,1568],{},"使用对应的 ssh 命令即可连上构建服务器",[21,1570,1571],{},[34,1572],{"alt":1573,"src":1574},"连接成功","https://static.031130.xyz/uploads/2024/08/12/669499b25cd1b.webp",[21,1576,1577],{},"先跑个 neofetch 看看，双核 16G，看着还行。",[21,1579,1580],{},[34,1581],{"alt":1582,"src":1583},"neofetch","https://static.031130.xyz/uploads/2024/08/12/669499b56e156.webp",[21,1585,1586],{},"随手跑了个 speedtest，竟然是千兆上下传对等的网速。",[21,1588,1589],{},[34,1590],{"alt":1591,"src":1592},"speedtest 结果","https://static.031130.xyz/uploads/2024/08/12/6694bc062f6a3.webp",[21,1594,1595],{},"在这台机子上，我们可以使用 builder-live.log 中的命令手动触发一次构建（不过我这里跑了一半就报错了，疑似是系统不够完善）",[21,1597,1598],{},[34,1599],{"alt":1600,"src":1601},"构建命令","https://static.031130.xyz/uploads/2024/08/12/6694b09a57e06.webp",[21,1603,1604],{},"不过很可惜，COPR 似乎并没有给我们中途去干预/调试构建过程的方案，仅仅是提供了一个可供自由操作的 Linux 环境。使用 copr-rpmbuild 命令可以进行对应的构建，但构建过程依然是在沙箱内进行，且没有给中途暂停/调试的机会。如果需要一步步手动的构建，还是建议使用 rpmbuild 命令进行。",[28,1606,1607],{"id":1607},"杂项",[80,1609,1610,1617,1623,1629],{},[83,1611,1612,1613,1616],{},"使用 ",[242,1614,1615],{},"copr-builder help"," 命令可以获取打包机的提示信息",[83,1618,1612,1619,1622],{},[242,1620,1621],{},"copr-builder show"," 命令查看剩余时间",[83,1624,1612,1625,1628],{},[242,1626,1627],{},"copr-builder prolong"," 可以延长打包机的有效时长",[83,1630,1612,1631,1634],{},[242,1632,1633],{},"copr-builder release"," 可以销毁当前的打包机环境",[28,1636,1637],{"id":1637},"限制",[80,1639,1640,1643,1646,1649,1652,1655],{},[83,1641,1642],{},"由于安全原因，构建结束后，只有 spec 文件和日志可以被存储到 copr 对应项目的服务器。打包机会使用一个独特的沙箱防止其构建产物被二次使用，哪怕是同一个用户都不行。",[83,1644,1645],{},"为了避免资源艾琳娜贵妃，同一用户在同一时刻最多只能使用两台具有 ssh 访问权限的打包机。",[83,1647,1648],{},"由于上面的两套规定，当 copr 构建失败时并不能自动启动 SSH 访问权限，需要用户手动在面板上 resubmit 当前任务并选择使用 SSH 访问权限。",[83,1650,1651],{},"打包机在默认情况下 1 小时后自动销毁，除非你手动申请延长时间，最长为 48 小时。",[83,1653,1654],{},"有些打包机只有 IPv6 的访问地址，你没得选。如果你无法连接 IPv6 网络，你可以取消当前的任务并重新发布并期待能给你下发一台具有 IPv4 访问地址的打包机（其实非常少），或者使用代理。",[83,1656,1657],{},"如果 SRPM 构建失败，则不能 resubmit 当前任务。这是 COPR 的实现逻辑问题，未来可能得到改善。",[28,1659,1660],{"id":1660},"参考",[21,1662,1663],{},[48,1664,1666],{"href":1532,"rel":1665},[52],"「SSH access to Copr builders」",{"title":196,"searchDepth":197,"depth":197,"links":1668},[1669,1670,1671,1672],{"id":1541,"depth":197,"text":1541},{"id":1607,"depth":197,"text":1607},{"id":1637,"depth":197,"text":1637},{"id":1660,"depth":197,"text":1660},{"title":1674,"date":1675,"path":1676,"tags":1677,"body":1679},"在 Arch Linux 下配置使用 HP Laser 103w 打印机无线打印","2024-07-14 18:30:33","/2024/07/14/config-hp-laser-103w-printer-for-archlinux",[213,562,212,1678,563,564],"Printer",{"type":15,"value":1680,"toc":1931},[1681,1684,1687,1690,1696,1700,1709,1712,1728,1742,1750,1769,1780,1806,1808,1815,1829,1836,1839,1856,1877,1892,1895,1898,1904,1907,1910,1916,1919,1925,1928],[21,1682,1683],{},"我寝室有一台使用 wifi 连接的 HP Laser 103w 打印机，这些天刚好布置了新的 HomeServer，因此来记录一下这台打印机的配置过程，根据 HP 官网驱动包的名字「HP Laser 100 and HP Color Laser 150 Printer series Print Driver」推断，此过程应该能适用于所有的 HP Laser 100 及 HP Color Laser 150 系列的打印机。",[28,1685,1686],{"id":1686},"打印机联网",[21,1688,1689],{},"首先使用 Windows 操作系统完成打印机的联网工作，在路由器的网页管理界面可以看到这台打印机的局域网 ip 是 192.168.123.20 ，记录备用。如果有条件的话，尽量将打印机的 MAC 地址与 IP 地址绑定，避免路由器将该 IP 分配给别的设备。",[21,1691,1692],{},[34,1693],{"alt":1694,"src":1695},"路由器的网页管理界面","https://static.031130.xyz/uploads/2024/08/12/6693aa41c079b.webp",[28,1697,1699],{"id":1698},"安装-cups","安装 CUPS",[21,1701,1702,1703,1708],{},"随后按照 ArchWiki 的 ",[48,1704,1707],{"href":1705,"rel":1706},"https://wiki.archlinux.org/title/CUPS",[52],"CUPS 页面","进行相关配置，CUPS 是苹果公司开源的打印系统，是目前 Linux 下最主流的打印方案。",[21,1710,1711],{},"首先安装 cups ，如果需要「打印为 pdf」的功能，可以选装 cups-pdf。",[290,1713,1715],{"className":292,"code":1714,"language":294,"meta":196,"style":196},"pacman -S cups\n",[242,1716,1717],{"__ignoreMap":196},[298,1718,1719,1722,1725],{"class":300,"line":301},[298,1720,1721],{"class":304},"pacman",[298,1723,1724],{"class":325}," -S",[298,1726,1727],{"class":312}," cups\n",[290,1729,1731],{"className":292,"code":1730,"language":294,"meta":196,"style":196},"pacman -S cups-pdf\n",[242,1732,1733],{"__ignoreMap":196},[298,1734,1735,1737,1739],{"class":300,"line":301},[298,1736,1721],{"class":304},[298,1738,1724],{"class":325},[298,1740,1741],{"class":312}," cups-pdf\n",[21,1743,1744,1745,1749],{},"接着需要启动 cups 的服务，如果需要使用 cups 自带的 webui，可以直接启用 cups.service，这样就能在 ",[48,1746,1747],{"href":1747,"rel":1748},"http://localhost:631",[52]," 看到对应的配置页面。",[290,1751,1753],{"className":292,"code":1752,"language":294,"meta":196,"style":196},"systemctl enable cups.service --now\n",[242,1754,1755],{"__ignoreMap":196},[298,1756,1757,1760,1763,1766],{"class":300,"line":301},[298,1758,1759],{"class":304},"systemctl",[298,1761,1762],{"class":312}," enable",[298,1764,1765],{"class":312}," cups.service",[298,1767,1768],{"class":325}," --now\n",[21,1770,1771,1772,1775,1776,1779],{},"而如果你正在使用一些集成度较高的 DE 如 KDE 或 GNOME，可以安装 DE 对应的打印机管理程序。在 Arch Linux 下，KDE 自带的打印机管理程序包名为 ",[242,1773,1774],{},"print-manager","，此外还需要安装安装 ",[242,1777,1778],{},"system-config-printer"," 打印机功能支持软件包。这种方案则不需要启动 cups.service，只需要启动 cups.socket 即可。",[290,1781,1783],{"className":292,"code":1782,"language":294,"meta":196,"style":196},"pacman -S print-manager system-config-printer\nsystemctl enable cups.socket\n",[242,1784,1785,1797],{"__ignoreMap":196},[298,1786,1787,1789,1791,1794],{"class":300,"line":301},[298,1788,1721],{"class":304},[298,1790,1724],{"class":325},[298,1792,1793],{"class":312}," print-manager",[298,1795,1796],{"class":312}," system-config-printer\n",[298,1798,1799,1801,1803],{"class":300,"line":197},[298,1800,1759],{"class":304},[298,1802,1762],{"class":312},[298,1804,1805],{"class":312}," cups.socket\n",[28,1807,1607],{"id":1607},[21,1809,1810,1811,1814],{},"在常规的流程中，通常会安装 ",[242,1812,1813],{},"ghostscript"," 来适应 Non-PDF 打印机，这台 HP Laser 103w 也不例外。",[290,1816,1818],{"className":292,"code":1817,"language":294,"meta":196,"style":196},"pacman -S ghostscript\n",[242,1819,1820],{"__ignoreMap":196},[298,1821,1822,1824,1826],{"class":300,"line":301},[298,1823,1721],{"class":304},[298,1825,1724],{"class":325},[298,1827,1828],{"class":312}," ghostscript\n",[21,1830,1831,1832,1835],{},"如果是 PostScript 打印机可能还需要安装 ",[242,1833,1834],{},"gsfonts"," 包，但我这里不需要。",[28,1837,1838],{"id":1838},"安装驱动",[21,1840,1841,1842,1845,1846,1849,1850,1855],{},"OpenPrinting 维护的 ",[242,1843,1844],{},"foomatic"," 为很大一部分打印机提供的驱动文件，Gutenprint 维护的 gutenprint 包也包含了佳能(Canon)、爱普生(Epson)、利盟(Lexmark)、索尼(Sony)、奥林巴斯(Olympus) 以及 PCL 打印机的驱动程序。如果你的打印机型号和我的不同，可以尝试安装这些组织维护的驱动。具体的安装方法同样可以在 ArchWiki 的 ",[48,1847,1707],{"href":1705,"rel":1848},[52],"找到。我上一台打印机 HP LaserJet 1020 所需的驱动是在 ",[48,1851,1854],{"href":1852,"rel":1853},"https://aur.archlinux.org/packages/foo2zjs-nightly",[52],"AUR/foo2zjs-nightly"," 中取得的。",[21,1857,1858,1859,1864,1865,1870,1871,1876],{},"但 HP Laser 103w 的驱动程序都不在这些软件包中，在 HP 的官网我们可以找到",[48,1860,1863],{"href":1861,"rel":1862},"https://support.hp.com/cn-zh/drivers/hp-laser-100-printer-series/model/2100769190",[52],"这个页面","，包含了 HP Laser 103w 的 Linux 驱动",[48,1866,1869],{"href":1867,"rel":1868},"https://ftp.hp.com/pub/softlib/software13/printers/CLP150/uld-hp_V1.00.39.12_00.15.tar.gz",[52],"下载地址","（已在 web.archive.org 存档）。通过下载下来的文件名，我们可以看见名字为 uld-hp，理论上可以直接通过压缩包内的安装脚本进行安装，但我通过这个名字顺藤摸瓜，找到了 ",[48,1872,1875],{"href":1873,"rel":1874},"https://aur.archlinux.org/packages/hpuld",[52],"AUR/hpuld"," 可以直接进行安装。",[290,1878,1880],{"className":292,"code":1879,"language":294,"meta":196,"style":196},"yay -S hpuld\n",[242,1881,1882],{"__ignoreMap":196},[298,1883,1884,1887,1889],{"class":300,"line":301},[298,1885,1886],{"class":304},"yay",[298,1888,1724],{"class":325},[298,1890,1891],{"class":312}," hpuld\n",[28,1893,1894],{"id":1894},"添加打印机",[21,1896,1897],{},"打开设置中的打印机设置后，选择添加打印机，CUPS 直接帮我们找到了局域网下的打印机，并自动开始搜索驱动程序（虽然没搜到）。",[21,1899,1900],{},[34,1901],{"alt":1902,"src":1903},"自动搜索","https://static.031130.xyz/uploads/2024/08/12/6693b6e81f9c4.webp",[21,1905,1906],{},"但如果没能自动检测到打印机，也可以使用手动选项中的 AppSocket/HP JetDirect 手动输入打印机的 ip 地址进行配置。",[21,1908,1909],{},"紧接着就到了选择驱动程序的阶段，厂商选择 HP，能够找到「HP Laser 10x Series」的选项，直接选择。",[21,1911,1912],{},[34,1913],{"alt":1914,"src":1915},"选择驱动","https://static.031130.xyz/uploads/2024/08/12/6693b76b9c1ca.webp",[21,1917,1918],{},"接着就可以完成打印机的添加。",[21,1920,1921],{},[34,1922],{"alt":1923,"src":1924},"完成添加","https://static.031130.xyz/uploads/2024/08/12/6693b7ba82d99.webp",[21,1926,1927],{},"随后便能正常打印文件啦！",[548,1929,1930],{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":196,"searchDepth":197,"depth":197,"links":1932},[1933,1934,1935,1936,1937],{"id":1686,"depth":197,"text":1686},{"id":1698,"depth":197,"text":1699},{"id":1607,"depth":197,"text":1607},{"id":1838,"depth":197,"text":1838},{"id":1894,"depth":197,"text":1894},{"title":1939,"date":1940,"path":1941,"tags":1942,"body":1947},"使用动态公网 ip + ddns 实现 rustdesk 的 ip 直连","2024-06-30 18:15:00","/2024/06/30/dynamic-public-ip-and-ddns-for-rustdesk",[212,1943,1944,1945,1946,563],"OpenSource Project","Shell Script","Rustdesk","Router",{"type":15,"value":1948,"toc":2084},[1949,1952,1955,1958,1962,1965,1968,1973,1976,1991,2038,2041,2044,2047,2050,2055,2058,2063,2070,2073,2076,2081],[21,1950,1951],{},"最近跟风整了一台 n100 的迷你主机装了个 Archlinux 当 HomeServer，搭配上了显卡欺骗器，平常一直远程使用，因此需要实现稳定的远程桌面连接。开源软件 Rustdesk 本身对 Linux 的适配尚可，可惜官方提供的服务器位于境外，且前一阵子因为诈骗相关的风波使得官方对连接做出了一些限制，应当使用自建服务器或者 ip 直连。",[21,1953,1954],{},"单从网络安全的角度出发，最佳实践应该是通过 wireguard 或者别的协议先接入局域网，然后使用局域网内的 ip 直连，这是最稳妥的，但我有点懒，而且我可能会在多个设备上都有控制 HomeServer 的需求，给所有设备配置 wireguard 是一件挺麻烦的事情，因此我决定放弃安全性，直接公网裸奔。",[21,1956,1957],{},"在学校宿舍的电信宽带提供了一个动态公网 ip，因此只需要设置好 ddns 和端口转发就可以拿到一个固定的 domain + port 提供给 rustdesk 直连。",[28,1959,1961],{"id":1960},"在被控端-rustdesk-允许直连访问","在被控端 Rustdesk 允许直连访问",[21,1963,1964],{},"在「设置」中的「安全」一栏选择「解锁安全设置」，拉到最下面的「安全」栏，勾选「允许 IP 直接访问」，并选择一个端口，范围在 1000 ~35535 之间且不要被本地的其他程序占用，Rustdesk 的默认值为 21118。",[21,1966,1967],{},"可以直接在局域网内的另一台设备进行测试，直接在 Rustdesk 中输入被控端的局域网 ip 和刚刚设置的端口，看看能不能访问得通，如果不行可能需要排查一下被控端访问墙设置的问题。",[21,1969,1970],{},[34,1971],{"alt":196,"src":1972},"https://static.031130.xyz/uploads/2024/08/12/66814701cf7ce.webp",[28,1974,1975],{"id":1975},"ddns",[21,1977,1978,1979,1984,1985,1990],{},"由于我的域名是交给 cloudflare 进行解析的，就找了个",[48,1980,1983],{"href":1981,"rel":1982},"https://github.com/yulewang/cloudflare-api-v4-ddns/",[52],"支持 cloudflare 的 ddns 脚本","，大致的部署过程可以参考 ",[48,1986,1989],{"href":1987,"rel":1988},"https://www.rclogs.com/2023/06/%25e8%2587%25aa%25e5%25bb%25ba%25e5%259f%25ba%25e4%25ba%258ecloudflare%25e7%259a%2584ddns",[52],"「自建基于Cloudflare的DDNS」","，不过我小改了一下脚本中获取公网 ipv4 的方式，直接 ssh 到路由器上获取当前的 ipv4 地址，不依赖外部的服务。",[290,1992,1994],{"className":292,"code":1993,"language":294,"meta":196,"style":196},"WAN_IP=`ssh -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa root@192.168.1.1 'ip -br a' | grep pppoe-wan | awk '{print $3}'`\n",[242,1995,1996],{"__ignoreMap":196},[298,1997,1998,2001,2003,2006,2009,2012,2015,2018,2021,2024,2027,2030,2032,2035],{"class":300,"line":301},[298,1999,2000],{"class":308},"WAN_IP",[298,2002,680],{"class":336},[298,2004,2005],{"class":312},"`",[298,2007,2008],{"class":304},"ssh",[298,2010,2011],{"class":325}," -o",[298,2013,2014],{"class":312}," HostKeyAlgorithms=+ssh-rsa ",[298,2016,2017],{"class":325},"-o",[298,2019,2020],{"class":312}," PubkeyAcceptedKeyTypes=+ssh-rsa root@192.168.1.1 'ip -br a' ",[298,2022,2023],{"class":336},"|",[298,2025,2026],{"class":304}," grep",[298,2028,2029],{"class":312}," pppoe-wan ",[298,2031,2023],{"class":336},[298,2033,2034],{"class":304}," awk",[298,2036,2037],{"class":312}," '{print $3}'`\n",[21,2039,2040],{},"理论上来说，有不少路由器自身就支持不少域名解析商",[28,2042,2043],{"id":2043},"端口转发",[21,2045,2046],{},"端口转发需要在路由器的后台设置进行，我这里路由器使用的是 openwrt 系统，大部分路由器应该都支持这个操作。",[21,2048,2049],{},"在「网络」-「防火墙」",[21,2051,2052],{},[34,2053],{"alt":196,"src":2054},"https://static.031130.xyz/uploads/2024/08/12/6681635804e68.webp",[21,2056,2057],{},"选择「端口转发」",[21,2059,2060],{},[34,2061],{"alt":196,"src":2062},"https://static.031130.xyz/uploads/2024/08/12/66817e416534c.webp",[21,2064,2065,2066,2069],{},"新建端口转发，共享名随便填，外部端口是你最终要在主控端输入的端口，内部 IP 地址是被控机 的 IP 地址，可以用 ",[242,2067,2068],{},"ip -br a"," 命令看到，内部端口就是上文在 Rustdesk 指定的端口号。",[28,2071,2072],{"id":2072},"效果",[21,2074,2075],{},"可以直接在主控端口输入 ddns 的域名和端口号，实现远程控制",[21,2077,2078],{},[34,2079],{"alt":196,"src":2080},"https://static.031130.xyz/uploads/2024/08/12/66817f77aae7e.webp",[548,2082,2083],{},"html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":196,"searchDepth":197,"depth":197,"links":2085},[2086,2087,2088,2089],{"id":1960,"depth":197,"text":1961},{"id":1975,"depth":197,"text":1975},{"id":2043,"depth":197,"text":2043},{"id":2072,"depth":197,"text":2072},{"title":2091,"date":2092,"path":2093,"tags":2094,"body":2097},"使用 Windows 虚拟机运行虚拟专用网客户端为 Linux 提供内网环境","2024-05-23 01:07:44","/2024/05/23/setup-network-environment-for-non-linux-vpn-client-with-virtual-machine",[212,2095,2096,12],"Windows","Virtual Machine",{"type":15,"value":2098,"toc":2197},[2099,2102,2105,2110,2113,2116,2119,2124,2127,2132,2141,2147,2150,2154,2157,2161,2170,2175,2178,2183,2186,2189,2194],[28,2100,2101],{"id":2101},"起因",[21,2103,2104],{},"最近在某家公司实习，公司内部的 git 部署在内网环境上，需要通过虚拟专用网的客户端（天翼云的 AONE）才能够正常访问。很可惜，客户端只提供了 Windows 和 MacOS 的版本。",[21,2106,2107],{},[34,2108],{"alt":196,"src":2109},"https://static.031130.xyz/uploads/2024/08/12/664e29866c1ab.webp",[21,2111,2112],{},"工作的代码总是要提交的，我也不想改变我的开发环境，又不希望在 Windows 上使用 git-for-windows 这个近乎简陋的工具进行代码提交，更别说还有一些别的内网服务接下来可能也会用到。所以最好的办法就是在 Linux 下也配置好能够访问内网的环境。",[28,2114,2115],{"id":2115},"理论",[21,2117,2118],{},"在 Windows 下使用 AONE 的网络拓扑是这样的",[21,2120,2121],{},[34,2122],{"alt":196,"src":2123},"https://static.031130.xyz/uploads/2024/08/12/664e2b93de6f9.webp",[21,2125,2126],{},"而我的方案则是使用 Windows 虚拟机开启 AONE，并在这台虚拟机上开一个 socks5 server 负责代理 Linux 宿主机需要打到内网服务的流量。网络拓扑如下",[21,2128,2129],{},[34,2130],{"alt":196,"src":2131},"https://static.031130.xyz/uploads/2024/08/12/664e2e1b0da09.webp",[21,2133,2134,2135,2140],{},"根据 bilibili 上",[48,2136,2139],{"href":2137,"rel":2138},"https://www.bilibili.com/video/BV11M4y1J7zP/",[52],"技术蛋老师的视频总结","，我们应该选择使用网卡桥接的网络配置，只有这个配置方式同时支持「宿主->虚拟机」和 「虚拟机->互联网」的网络。",[21,2142,2143],{},[34,2144],{"alt":2145,"src":2146},"图片来源: bilibili 技术蛋老师","https://static.031130.xyz/uploads/2024/08/12/664e2fbb4a36b.webp",[28,2148,2149],{"id":2149},"实操",[844,2151,2153],{"id":2152},"在-windows-虚拟机中开启虚拟专用网客户端","在 Windows 虚拟机中开启虚拟专用网客户端",[21,2155,2156],{},"开启 AONE，不做赘述",[844,2158,2160],{"id":2159},"开启-socks-server监听地址为-0000-或者设置为宿主机的-ip-地址","开启 socks server，监听地址为 0.0.0.0 （或者设置为宿主机的 IP 地址）",[21,2162,2163,2164,2169],{},"在「",[48,2165,2168],{"href":2166,"rel":2167},"https://imbearchild.cyou/",[52],"熊孩子(BearChild)","」的推荐下，我这里采用的是大名鼎鼎的二级射线（某 V 字开头的常见软件），直接从 GIthub Release 中下载 Windows X64 的压缩包，简单配置下即可，如果没有什么特殊需求的话可以只修改图中的两处配置。",[21,2171,2172],{},[34,2173],{"alt":196,"src":2174},"https://static.031130.xyz/uploads/2024/08/12/664e328cd83b3.webp",[21,2176,2177],{},"在终端中通过该软件的 run 命令即可开启服务",[21,2179,2180],{},[34,2181],{"alt":196,"src":2182},"https://static.031130.xyz/uploads/2024/08/12/664e32e6c350a.webp",[844,2184,2185],{"id":2185},"在宿主机进行测试",[21,2187,2188],{},"我这里使用的是 mzz2017 编写的 gg 命令进行代理，代理服务器的 ip 地址使用虚拟机下 ipconfig 命令获得的 ip 地址，端口号则对应上面配置文件中的 port 参数。",[21,2190,2191],{},[34,2192],{"alt":196,"src":2193},"https://static.031130.xyz/uploads/2024/08/12/664e33c3e8320.webp",[21,2195,2196],{},"这里 curl 百度得到了正确的相应，说明通道是通的，gg 也可以用于代理浏览器。经实测能够正常访问公司内网服务，不便在博客中展示。",{"title":196,"searchDepth":197,"depth":197,"links":2198},[2199,2200,2201],{"id":2101,"depth":197,"text":2101},{"id":2115,"depth":197,"text":2115},{"id":2149,"depth":197,"text":2149,"children":2202},[2203,2204,2205],{"id":2152,"depth":432,"text":2153},{"id":2159,"depth":432,"text":2160},{"id":2185,"depth":432,"text":2185},{"title":2207,"date":2208,"path":2209,"tags":2210,"body":2212},"以 Archlinux 中 makepkg 的方式打开 rpmbuild","2024-05-03 22:48:39","/2024/05/03/open-rpmbuild-in-the-way-of-archlinux-makepkg",[213,1510,2211,212],"RPM Package",{"type":15,"value":2213,"toc":2558},[2214,2217,2224,2289,2304,2311,2351,2358,2361,2364,2367,2380,2383,2398,2406,2409,2412,2415,2423,2426,2429,2432,2457,2464,2484,2491,2496,2503,2506,2513,2531,2534,2537,2544,2550,2552,2555],[21,2215,2216],{},"在 Redhat 系的发行版上打包软件的时候，会发现与 Archlinux 完全不同的思路。",[21,2218,2219,2220,2223],{},"Fedora 所代表的 Redhat 阵营一看就是那种宏大叙事的大型发行版，rpmbuild 在默认情况下会在 $HOME/rpmbuild 下的一系列文件夹进行构建过程。使用 ",[242,2221,2222],{},"rpmdev-setuptree"," 命令会创建好下面这些目录进行构建。",[290,2225,2227],{"className":292,"code":2226,"language":294,"meta":196,"style":196},"$ tree rpmbuild\nrpmbuild\n├── BUILD\n├── BUILDROOT\n├── RPMS\n├── SOURCES\n├── SPECS\n└── SRPMS\n",[242,2228,2229,2240,2245,2253,2260,2267,2274,2281],{"__ignoreMap":196},[298,2230,2231,2234,2237],{"class":300,"line":301},[298,2232,2233],{"class":304},"$",[298,2235,2236],{"class":312}," tree",[298,2238,2239],{"class":312}," rpmbuild\n",[298,2241,2242],{"class":300,"line":197},[298,2243,2244],{"class":304},"rpmbuild\n",[298,2246,2247,2250],{"class":300,"line":432},[298,2248,2249],{"class":304},"├──",[298,2251,2252],{"class":312}," BUILD\n",[298,2254,2255,2257],{"class":300,"line":447},[298,2256,2249],{"class":304},[298,2258,2259],{"class":312}," BUILDROOT\n",[298,2261,2262,2264],{"class":300,"line":461},[298,2263,2249],{"class":304},[298,2265,2266],{"class":312}," RPMS\n",[298,2268,2269,2271],{"class":300,"line":959},[298,2270,2249],{"class":304},[298,2272,2273],{"class":312}," SOURCES\n",[298,2275,2276,2278],{"class":300,"line":967},[298,2277,2249],{"class":304},[298,2279,2280],{"class":312}," SPECS\n",[298,2282,2283,2286],{"class":300,"line":975},[298,2284,2285],{"class":304},"└──",[298,2287,2288],{"class":312}," SRPMS\n",[21,2290,2291,2292,2297,2298,2303],{},"Fedora 将所有的软件的构建都集中在一个 rpmbuild 目录中，BUILD 是编译时使用的，BUILDROOT 是最终安装目录，RPMS 是存放最终产物的，SOURCES 是存放源码等文件的，SPECS 是存放指导构建过程的 spec 文件的，而 SRPMS 是 RH 系为了 reproducibility 而单独将 spec 和源文件打包的产物。除了 rpmbuild 命令以外，Fedora 还有一套使用容器构建 rpm 包的 ",[48,2293,2296],{"href":2294,"rel":2295},"https://fedoraproject.org/wiki/Using_Mock_to_test_package_builds",[52],"mock"," 构建系统，与 Archlinux 的 ",[48,2299,2302],{"href":2300,"rel":2301},"https://archlinux.org/packages/extra/any/devtools/",[52],"devtools"," 类似，这里不作过多叙述。",[21,2305,2306,2307,2310],{},"反观 Arch 的构建目录，",[92,2308,2309],{},"就有一股浓浓的小作坊气味","。每个软件包自己拥有一个目录，指导构建过程的 PKGBUILD 文件、源文件和最终的产物都放在这个目录下，目录下的 src 和 pkg 文件夹分别对应 rpm 的 BUILD 和 BUILDROOT，前者是源文件被解压的目录和编译过程进行的目录，后者是软件最终的安装目录。",[290,2312,2314],{"className":292,"code":2313,"language":294,"meta":196,"style":196},"$ tree repo\nrepo\n├── src\n├── pkg\n└── PKGBUILD\n",[242,2315,2316,2325,2330,2337,2344],{"__ignoreMap":196},[298,2317,2318,2320,2322],{"class":300,"line":301},[298,2319,2233],{"class":304},[298,2321,2236],{"class":312},[298,2323,2324],{"class":312}," repo\n",[298,2326,2327],{"class":300,"line":197},[298,2328,2329],{"class":304},"repo\n",[298,2331,2332,2334],{"class":300,"line":432},[298,2333,2249],{"class":304},[298,2335,2336],{"class":312}," src\n",[298,2338,2339,2341],{"class":300,"line":447},[298,2340,2249],{"class":304},[298,2342,2343],{"class":312}," pkg\n",[298,2345,2346,2348],{"class":300,"line":461},[298,2347,2285],{"class":304},[298,2349,2350],{"class":312}," PKGBUILD\n",[21,2352,2353,2354,2357],{},"好巧不巧，我偏偏习惯这个小作坊气息的 arch build system，每个软件包独享一个自己的目录，",[92,2355,2356],{},"干净又卫生","。我自然也希望在 Fedora 下打 rpm 包的时候能够使用类似 Archlinux 下 makepkg 使用的目录结构。",[28,2359,2360],{"id":2360},"简单了解",[21,2362,2363],{},"在了解一系列 rpmbuild 中宏（macros）相关的知识后，我意识到这并非不可能。",[21,2365,2366],{},"使用如下的命令可以获取目前系统中定义的所有宏",[290,2368,2370],{"className":292,"code":2369,"language":294,"meta":196,"style":196},"rpm --showrc\n",[242,2371,2372],{"__ignoreMap":196},[298,2373,2374,2377],{"class":300,"line":301},[298,2375,2376],{"class":304},"rpm",[298,2378,2379],{"class":325}," --showrc\n",[21,2381,2382],{},"而可以使用如下命令检查某一个宏目前被定义成了什么值",[290,2384,2386],{"className":292,"code":2385,"language":294,"meta":196,"style":196},"rpm --eval \"%{_topdir}\"\n",[242,2387,2388],{"__ignoreMap":196},[298,2389,2390,2392,2395],{"class":300,"line":301},[298,2391,2376],{"class":304},[298,2393,2394],{"class":325}," --eval",[298,2396,2397],{"class":312}," \"%{_topdir}\"\n",[21,2399,2400,2401,2405],{},"更多关于宏的描述可以在 ",[48,2402,2403],{"href":2403,"rel":2404},"https://rpm-software-management.github.io/rpm/manual/macros.html",[52]," 获取",[28,2407,2408],{"id":2408},"修改路径",[21,2410,2411],{},"我们可以把定义成 $HOME/rpmbuild 的 %_topdir 重新定义成当前目录。",[21,2413,2414],{},"在 $HOME/.rpmmacros 中，去除顶部对 %_topdir 的定义，重新填上以下这些定义，即可初步完成我想要的效果。",[290,2416,2421],{"className":2417,"code":2419,"language":2420},[2418],"language-text","%_topdir    %(pwd)\n%_builddir %{_topdir}/src\n%_buildrootdir %{_topdir}/pkg\n%_rpmdir %{_topdir}\n%_sourcedir %{_topdir}\n%_specdir %{_topdir}\n%_srcrpmdir %{_topdir}\n","text",[242,2422,2419],{"__ignoreMap":196},[21,2424,2425],{},"现在在任何一个目录下执行 rpmbuild 相关命令，都会把 src 认为是构建目录，pkg 是最后安装目录，spec 文件和源文件早当前文件夹下，构建产物在当前文件夹下的 x86_64（或者别的架构名，这一层目录我还没有找到应该如何去掉）下。",[28,2427,2428],{"id":2428},"自动安装依赖文件",[21,2430,2431],{},"Fedora 中的 rpmbuild 不带有 makepkg -s 的功能，不能自动安装依赖。不过这也不意味着需要自己傻傻地去翻 spec 看看需要哪些构建依赖。可以使用 dnf 的 builddep 命令实现",[290,2433,2435],{"className":292,"code":2434,"language":294,"meta":196,"style":196},"sudo dnf builddep ./*.spec\n",[242,2436,2437],{"__ignoreMap":196},[298,2438,2439,2442,2445,2448,2451,2454],{"class":300,"line":301},[298,2440,2441],{"class":304},"sudo",[298,2443,2444],{"class":312}," dnf",[298,2446,2447],{"class":312}," builddep",[298,2449,2450],{"class":312}," ./",[298,2452,2453],{"class":325},"*",[298,2455,2456],{"class":312},".spec\n",[21,2458,2459,2460,2463],{},"不过 dnf 没有什么完成构建后自动卸载依赖的选项。",[92,2461,2462],{},"这些依赖装完以后就一辈子赖在你的电脑上了","，才不是，可以在构建完成后使用 dnf 自带的后悔药功能撤销上一条命令执行的效果。",[290,2465,2467],{"className":292,"code":2466,"language":294,"meta":196,"style":196},"sudo dnf history undo 0\n",[242,2468,2469],{"__ignoreMap":196},[298,2470,2471,2473,2475,2478,2481],{"class":300,"line":301},[298,2472,2441],{"class":304},[298,2474,2444],{"class":312},[298,2476,2477],{"class":312}," history",[298,2479,2480],{"class":312}," undo",[298,2482,2483],{"class":325}," 0\n",[21,2485,2486,2487,2490],{},"不过如果在 builddep 过程中，dnf 从 updates 源里更新了一些软件，那么它在 undo 时可能就没法获取更新前的软件版本。会有 ",[242,2488,2489],{},"Cannot find rpm nevra","  的提示",[21,2492,2493],{},[34,2494],{"alt":196,"src":2495},"https://static.031130.xyz/uploads/2024/08/12/6635018238ffa.webp",[21,2497,2498,2499,2502],{},"可以使用 ",[242,2500,2501],{},"--skip-broken"," 命令跳过那些没法找到老版本的软件，继续卸载其余的软件。",[28,2504,2505],{"id":2505},"自动下载源文件",[21,2507,2508,2509,2512],{},"很多使用 spec 中会在 source 里写上下载地址，而不是附上源码文件。rpm 似乎因为一些原因禁止了 rpmbuild 自动下载源文件的功能。可以通过在使用 rpmbuild 的时候带上 ",[242,2510,2511],{},"--undefine=_disable_source_fetch"," 取消定义这个行为，或者干脆在调用 rpmbuild 之前执行一遍",[290,2514,2516],{"className":292,"code":2515,"language":294,"meta":196,"style":196},"spectool -gR *.spec\n",[242,2517,2518],{"__ignoreMap":196},[298,2519,2520,2523,2526,2529],{"class":300,"line":301},[298,2521,2522],{"class":304},"spectool",[298,2524,2525],{"class":325}," -gR",[298,2527,2528],{"class":325}," *",[298,2530,2456],{"class":312},[21,2532,2533],{},"这样也能自动下载源文件。",[28,2535,2536],{"id":2536},"构建行为",[21,2538,2539,2540,2543],{},"makepkg 的默认构建行为就是只构建最终的安装包，Archlinux 中并没有 Fedora 那样打 source rpm 保证 reproduceability 的行为，这在 rpmbuild 中对应的是 ",[242,2541,2542],{},"-bb"," 选项。",[21,2545,1612,2546,2549],{},[242,2547,2548],{},"rpmbuild -bb *.spec"," 即可",[730,2551],{},[21,2553,2554],{},"上面介绍完了 rpmbuild 和 makepkg 的主要差异，应该可以自己搓一个 rpmbuild-wrapper 去实现以 makepkg 的方式打开 rpmbuild 的目标了，具体的 wrapper 脚本我就不放出来献丑了。",[548,2556,2557],{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}",{"title":196,"searchDepth":197,"depth":197,"links":2559},[2560,2561,2562,2563,2564],{"id":2360,"depth":197,"text":2360},{"id":2408,"depth":197,"text":2408},{"id":2428,"depth":197,"text":2428},{"id":2505,"depth":197,"text":2505},{"id":2536,"depth":197,"text":2536},{"title":2566,"date":2567,"path":2568,"tags":2569,"body":2571},"使用 Github Action 更新用于 rpm 打包的 spec 文件","2024-04-29 19:19:54","/2024/04/29/update-a-rpm-spec-by-github-action",[1510,2211,2570],"Github Action",{"type":15,"value":2572,"toc":2908},[2573,2580,2589,2592,2594,2597,2646,2649,2685,2688,2722,2725,2797,2800,2857,2860,2897,2905],[21,2574,2575,2576,2579],{},"有一些软件包的上游本身就是使用 Github Action 发版的，每次 commit 都会触发 Github Action 去构建并分发新版本，使用构建时的时间日期作为版本号。针对这种包，手动更新费时费力，而规范的 specfile 应当是更新 ",[242,2577,2578],{},"%changelog"," 的，因此应当是使用 rpmdev-bumpspec 命令。只不过 rpmdev-bumpspec 需要在 rpm 系发行版或者装有 rpm 系列依赖包的发行版下执行，这不是随随便便一个 Linux 环境就能运行的。",[21,2581,2582,2583,2588],{},"我找到了 ",[48,2584,2587],{"href":2585,"rel":2586},"https://github.com/netoarmando/rpmdev-bumpspec-action",[52],"netoarmando/rpmdev-bumpspec-action"," 这个 Github Action，它通过启动一个 Fedora 的 docker 实现了使用 rpmdev-bumpspec 的效果。虽然 release 中只有一个 2021 年构建的 v1 版本，~~但 Fedora 的版本高低不影响 rpmdev-bumpspec 的效果。~~但每次 Github Action 执行时都会使用 fedora:latest 的 docker 重新构建一遍，不用担心 fedora 版本过低。",[21,2590,2591],{},"于是我们便解决了最核心的问题——处理 spec 文件。接下来只要补充好头尾的步骤即可。",[730,2593],{},[21,2595,2596],{},"首先使用 actions/checkout 释出仓库内的文件",[290,2598,2602],{"className":2599,"code":2600,"language":2601,"meta":196,"style":196},"language-yaml shiki shiki-themes github-light github-dark","- name: Checkout\n  uses: actions/checkout@v2\n  with:\n    fetch-depth: 0\n","yaml",[242,2603,2604,2618,2628,2636],{"__ignoreMap":196},[298,2605,2606,2609,2612,2615],{"class":300,"line":301},[298,2607,2608],{"class":308},"- ",[298,2610,2611],{"class":673},"name",[298,2613,2614],{"class":308},": ",[298,2616,2617],{"class":312},"Checkout\n",[298,2619,2620,2623,2625],{"class":300,"line":197},[298,2621,2622],{"class":673},"  uses",[298,2624,2614],{"class":308},[298,2626,2627],{"class":312},"actions/checkout@v2\n",[298,2629,2630,2633],{"class":300,"line":432},[298,2631,2632],{"class":673},"  with",[298,2634,2635],{"class":308},":\n",[298,2637,2638,2641,2643],{"class":300,"line":447},[298,2639,2640],{"class":673},"    fetch-depth",[298,2642,2614],{"class":308},[298,2644,2645],{"class":325},"0\n",[21,2647,2648],{},"通过 shell 命令获取仓库内 spec 文件的版本号，存入 $GITHUB_ENV",[290,2650,2652],{"className":2599,"code":2651,"language":2601,"meta":196,"style":196},"- name: Get Current Version\n  run: |\n    CURRENT_VERSION=`grep -E '^Version:' *.spec | awk '{print $2}'`\n    echo \"CURRENT_VERSION=$CURRENT_VERSION\" >> $GITHUB_ENV\n",[242,2653,2654,2665,2675,2680],{"__ignoreMap":196},[298,2655,2656,2658,2660,2662],{"class":300,"line":301},[298,2657,2608],{"class":308},[298,2659,2611],{"class":673},[298,2661,2614],{"class":308},[298,2663,2664],{"class":312},"Get Current Version\n",[298,2666,2667,2670,2672],{"class":300,"line":197},[298,2668,2669],{"class":673},"  run",[298,2671,2614],{"class":308},[298,2673,2674],{"class":336},"|\n",[298,2676,2677],{"class":300,"line":432},[298,2678,2679],{"class":312},"    CURRENT_VERSION=`grep -E '^Version:' *.spec | awk '{print $2}'`\n",[298,2681,2682],{"class":300,"line":447},[298,2683,2684],{"class":312},"    echo \"CURRENT_VERSION=$CURRENT_VERSION\" >> $GITHUB_ENV\n",[21,2686,2687],{},"通过 Github API 获取目标软件的最新版本号，存入 $GITHUB_ENV",[290,2689,2691],{"className":2599,"code":2690,"language":2601,"meta":196,"style":196},"- name: Export latest geoip version\n  run: |\n    NEW_VERSION=`curl -s https://api.github.com/repos/{user_name}/{repo_name}/releases/latest | jq -r '.tag_name' | sed 's/v//g'`\n    echo \"NEW_VERSION=$NEW_VERSION\" >> $GITHUB_ENV\n",[242,2692,2693,2704,2712,2717],{"__ignoreMap":196},[298,2694,2695,2697,2699,2701],{"class":300,"line":301},[298,2696,2608],{"class":308},[298,2698,2611],{"class":673},[298,2700,2614],{"class":308},[298,2702,2703],{"class":312},"Export latest geoip version\n",[298,2705,2706,2708,2710],{"class":300,"line":197},[298,2707,2669],{"class":673},[298,2709,2614],{"class":308},[298,2711,2674],{"class":336},[298,2713,2714],{"class":300,"line":432},[298,2715,2716],{"class":312},"    NEW_VERSION=`curl -s https://api.github.com/repos/{user_name}/{repo_name}/releases/latest | jq -r '.tag_name' | sed 's/v//g'`\n",[298,2718,2719],{"class":300,"line":447},[298,2720,2721],{"class":312},"    echo \"NEW_VERSION=$NEW_VERSION\" >> $GITHUB_ENV\n",[21,2723,2724],{},"当仓库内 spec 版本号与软件最新版本号不一致时，运行 rpmdev-bumpspec",[290,2726,2728],{"className":2599,"code":2727,"language":2601,"meta":196,"style":196},"- name: Run rpmdev-bumpspec action\n  if: ${{ env.CURRENT_VERSION != env.NEW_VERSION }}\n  uses: netoarmando/rpmdev-bumpspec-action@v1\n  with: \n    specfile: '{filename}'\n    new: ${{ env.NEW_VERSION }}\n    userstring: \"username \u003Cusername@mail.com>\"\n",[242,2729,2730,2741,2751,2760,2767,2777,2787],{"__ignoreMap":196},[298,2731,2732,2734,2736,2738],{"class":300,"line":301},[298,2733,2608],{"class":308},[298,2735,2611],{"class":673},[298,2737,2614],{"class":308},[298,2739,2740],{"class":312},"Run rpmdev-bumpspec action\n",[298,2742,2743,2746,2748],{"class":300,"line":197},[298,2744,2745],{"class":673},"  if",[298,2747,2614],{"class":308},[298,2749,2750],{"class":312},"${{ env.CURRENT_VERSION != env.NEW_VERSION }}\n",[298,2752,2753,2755,2757],{"class":300,"line":432},[298,2754,2622],{"class":673},[298,2756,2614],{"class":308},[298,2758,2759],{"class":312},"netoarmando/rpmdev-bumpspec-action@v1\n",[298,2761,2762,2764],{"class":300,"line":447},[298,2763,2632],{"class":673},[298,2765,2766],{"class":308},": \n",[298,2768,2769,2772,2774],{"class":300,"line":461},[298,2770,2771],{"class":673},"    specfile",[298,2773,2614],{"class":308},[298,2775,2776],{"class":312},"'{filename}'\n",[298,2778,2779,2782,2784],{"class":300,"line":959},[298,2780,2781],{"class":673},"    new",[298,2783,2614],{"class":308},[298,2785,2786],{"class":312},"${{ env.NEW_VERSION }}\n",[298,2788,2789,2792,2794],{"class":300,"line":967},[298,2790,2791],{"class":673},"    userstring",[298,2793,2614],{"class":308},[298,2795,2796],{"class":312},"\"username \u003Cusername@mail.com>\"\n",[21,2798,2799],{},"当仓库内 spec 版本号与软件最新版本号不一致时，保存更改，推入仓库。",[290,2801,2803],{"className":2599,"code":2802,"language":2601,"meta":196,"style":196},"- name: Commit changes\n  if: ${{ env.CURRENT_VERSION != env.NEW_VERSION }}\n  run: |\n    git config --local user.email \"zhullyb@outlook.com\"\n    git config --local user.name \"zhullyb\"\n    git add .\n    git commit -m \"upgpkg: v2ray-geoip@${{ env.NEW_VERSION }}\"\n    git push\n",[242,2804,2805,2816,2824,2832,2837,2842,2847,2852],{"__ignoreMap":196},[298,2806,2807,2809,2811,2813],{"class":300,"line":301},[298,2808,2608],{"class":308},[298,2810,2611],{"class":673},[298,2812,2614],{"class":308},[298,2814,2815],{"class":312},"Commit changes\n",[298,2817,2818,2820,2822],{"class":300,"line":197},[298,2819,2745],{"class":673},[298,2821,2614],{"class":308},[298,2823,2750],{"class":312},[298,2825,2826,2828,2830],{"class":300,"line":432},[298,2827,2669],{"class":673},[298,2829,2614],{"class":308},[298,2831,2674],{"class":336},[298,2833,2834],{"class":300,"line":447},[298,2835,2836],{"class":312},"    git config --local user.email \"zhullyb@outlook.com\"\n",[298,2838,2839],{"class":300,"line":461},[298,2840,2841],{"class":312},"    git config --local user.name \"zhullyb\"\n",[298,2843,2844],{"class":300,"line":959},[298,2845,2846],{"class":312},"    git add .\n",[298,2848,2849],{"class":300,"line":967},[298,2850,2851],{"class":312},"    git commit -m \"upgpkg: v2ray-geoip@${{ env.NEW_VERSION }}\"\n",[298,2853,2854],{"class":300,"line":975},[298,2855,2856],{"class":312},"    git push\n",[21,2858,2859],{},"（可选）当仓库内 spec 版本号与软件最新版本号不一致时，通过 curl 语句触发 copr 的 webhook，让 copr 进行构建。",[290,2861,2863],{"className":2599,"code":2862,"language":2601,"meta":196,"style":196},"- name: trigger copr webhook\n  if: ${{ env.CURRENT_VERSION != env.NEW_VERSION }}\n  run: |\n    curl -X POST ${{ secrets.COPR_HOOK_URL }}v2ray-geoip/\n",[242,2864,2865,2876,2884,2892],{"__ignoreMap":196},[298,2866,2867,2869,2871,2873],{"class":300,"line":301},[298,2868,2608],{"class":308},[298,2870,2611],{"class":673},[298,2872,2614],{"class":308},[298,2874,2875],{"class":312},"trigger copr webhook\n",[298,2877,2878,2880,2882],{"class":300,"line":197},[298,2879,2745],{"class":673},[298,2881,2614],{"class":308},[298,2883,2750],{"class":312},[298,2885,2886,2888,2890],{"class":300,"line":432},[298,2887,2669],{"class":673},[298,2889,2614],{"class":308},[298,2891,2674],{"class":336},[298,2893,2894],{"class":300,"line":447},[298,2895,2896],{"class":312},"    curl -X POST ${{ secrets.COPR_HOOK_URL }}v2ray-geoip/\n",[21,2898,2899,2900],{},"最终的 yml 文件可以参考",[48,2901,2904],{"href":2902,"rel":2903},"https://github.com/v2rayA/v2raya-copr/blob/master/.github/workflows/upgpkg-v2ray-geoip.yml",[52],"这里",[548,2906,2907],{},"html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}",{"title":196,"searchDepth":197,"depth":197,"links":2909},[],127,1761699627626]