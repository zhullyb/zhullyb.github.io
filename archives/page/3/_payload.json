[{"data":1,"prerenderedAt":6050},["ShallowReactive",2],{"randomIndex/archives/page/3/":3,"index-page-3":4,"posts-nums-total":6049},2,[5,437,1651,2091,2368,2757,3144,3202,4748,5310],{"title":6,"date":7,"path":8,"tags":9,"body":12},"为 Hexo 添加 follow 认证","2024-10-23 23:11:32","/2024/10/23/follow-cert-for-hexo-feed",[10,11],"Hexo","Follow",{"type":13,"value":14,"toc":433},"minimark",[15,19,23,30,33,36,46,53,59,65,76,108,167,170,173,184,195,294,300,305,308,360,413,416,419,421,429],[16,17,18],"h2",{"id":18},"前言",[20,21,22],"p",{},"Follow 从今天开始不需要邀请码就可以开始使用部分功能了，除了只能订阅五个订阅源、成就系统没开放、签到不能获得 power 以外，还有部分功能没有解锁（如下图）",[20,24,25],{},[26,27],"img",{"alt":28,"src":29},"","https://static.031130.xyz/uploads/2024/10/23/d3a69a7bcde58.webp",[20,31,32],{},"我注意到 Follow 的认证机制目前对于 Hexo 用户还是相对不友好的，起码对于 Hexo 用户来说。",[20,34,35],{},"「内容」方案要我们在网页（也可能是 rss，follow 没有给出非常明确的指示）上添加非常明显的一段文本，我并不是很喜欢这种行为。",[37,38,43],"pre",{"className":39,"code":41,"language":42},[40],"language-text","This message is used to verify that this feed (feedId:56144913816835091) belongs to me (userId:70410173045150720). Join me in enjoying the next generation information browser https://follow.is.\n","text",[44,45,41],"code",{"__ignoreMap":28},[20,47,48,49,52],{},"「描述」方案要求我们在 rss 的 xml 文件的 ",[44,50,51],{},"\u003Cdescription />"," 字段添加一段丑丑的代码。无论是使用 follow 的读者还是其他 rss reader 的读者都会看到博客的 description 中含有一段丑丑的代码，这对于强迫症的我来说是无法忍受的，更别提 atom 类型的订阅根本没有这个字段。",[37,54,57],{"className":55,"code":56,"language":42},[40],"feedId:56144913816835091+userId:70410173045150720\n",[44,58,56],{"__ignoreMap":28},[20,60,61],{},[26,62],{"alt":63,"src":64},"即使是在 follow 中，这样的文字也是非常眨眼","https://static.031130.xyz/uploads/2024/10/23/10dfda54f4dcc.webp",[20,66,67,68,71,72,75],{},"「RSS 标签」方案是我唯一能接受的方案，这个方案需要我们在 rss 的 xml 文件中添加一个名为 ",[44,69,70],{},"\u003Cfollow_challenge>"," 的标签，或者是 json 文件中的一个 ",[44,73,74],{},"follow_challenge"," 对象。虽然具有一定的侵入性，但对于读者来说不会受到影响——应该没有除了 follow 以外的 rss reader 对这个字段进行解析。",[37,77,81],{"className":78,"code":79,"language":80,"meta":28,"style":28},"language-xml shiki shiki-themes github-light github-dark","\u003Cfollow_challenge>\n    \u003CfeedId>56144913816835091\u003C/feedId>\n    \u003CuserId>70410173045150720\u003C/userId>\n\u003C/follow_challenge>\n","xml",[44,82,83,91,96,102],{"__ignoreMap":28},[84,85,88],"span",{"class":86,"line":87},"line",1,[84,89,90],{},"\u003Cfollow_challenge>\n",[84,92,93],{"class":86,"line":3},[84,94,95],{},"    \u003CfeedId>56144913816835091\u003C/feedId>\n",[84,97,99],{"class":86,"line":98},3,[84,100,101],{},"    \u003CuserId>70410173045150720\u003C/userId>\n",[84,103,105],{"class":86,"line":104},4,[84,106,107],{},"\u003C/follow_challenge>\n",[37,109,113],{"className":110,"code":111,"language":112,"meta":28,"style":28},"language-json shiki shiki-themes github-light github-dark","{\n  \"follow_challenge\": {\n    \"feed_id\": \"56144913816835091\",\n    \"user_id\": \"70410173045150720\"\n  }\n}\n","json",[44,114,115,121,130,145,155,161],{"__ignoreMap":28},[84,116,117],{"class":86,"line":87},[84,118,120],{"class":119},"sVt8B","{\n",[84,122,123,127],{"class":86,"line":3},[84,124,126],{"class":125},"sj4cs","  \"follow_challenge\"",[84,128,129],{"class":119},": {\n",[84,131,132,135,138,142],{"class":86,"line":98},[84,133,134],{"class":125},"    \"feed_id\"",[84,136,137],{"class":119},": ",[84,139,141],{"class":140},"sZZnC","\"56144913816835091\"",[84,143,144],{"class":119},",\n",[84,146,147,150,152],{"class":86,"line":104},[84,148,149],{"class":125},"    \"user_id\"",[84,151,137],{"class":119},[84,153,154],{"class":140},"\"70410173045150720\"\n",[84,156,158],{"class":86,"line":157},5,[84,159,160],{"class":119},"  }\n",[84,162,164],{"class":86,"line":163},6,[84,165,166],{"class":119},"}\n",[16,168,169],{"id":169},"正篇",[20,171,172],{},"那么问题来了，Hexo 用户应该如何使用「RSS 标签」的方案给我们的博客进行 Follow 认证呢？",[20,174,175,176,183],{},"首先确认前提，我在使用 ",[177,178,182],"a",{"href":179,"rel":180},"https://github.com/hexojs/hexo-generator-feed",[181],"nofollow","hexo-generator-feed"," 这个 npm 库来生成 Hexo 博客的 rss 订阅文件。",[20,185,186,187,190,191,194],{},"在项目的 README 文件中，我们知道可以在 ",[44,188,189],{},"_config.yml"," 文件中指定 rss 生成时使用的模板文件。模板文件位于 ",[44,192,193],{},"./node_modules/hexo-generator-feed"," 路径下，atom.xml 和 rss2.xml 就是这个库所使用的模板文件。我正在使用 atom，所以我把 atom.xml 复制一份放到博客的根目录下魔改模板。下面是 _config.yml 的 feed 配置，你可以看到我在最后两行指定了 template 模板文件。",[37,196,200],{"className":197,"code":198,"language":199,"meta":28,"style":28},"language-yml shiki shiki-themes github-light github-dark","feed:\n    type: atom\n    path: rss.xml\n    limit: 0\n    hub:\n    content: true\n    content_limit:\n    content_limit_delim: ' '\n    template:\n      - atom.xml\n","yml",[44,201,202,211,221,231,241,248,258,266,277,285],{"__ignoreMap":28},[84,203,204,208],{"class":86,"line":87},[84,205,207],{"class":206},"s9eBZ","feed",[84,209,210],{"class":119},":\n",[84,212,213,216,218],{"class":86,"line":3},[84,214,215],{"class":206},"    type",[84,217,137],{"class":119},[84,219,220],{"class":140},"atom\n",[84,222,223,226,228],{"class":86,"line":98},[84,224,225],{"class":206},"    path",[84,227,137],{"class":119},[84,229,230],{"class":140},"rss.xml\n",[84,232,233,236,238],{"class":86,"line":104},[84,234,235],{"class":206},"    limit",[84,237,137],{"class":119},[84,239,240],{"class":125},"0\n",[84,242,243,246],{"class":86,"line":157},[84,244,245],{"class":206},"    hub",[84,247,210],{"class":119},[84,249,250,253,255],{"class":86,"line":163},[84,251,252],{"class":206},"    content",[84,254,137],{"class":119},[84,256,257],{"class":125},"true\n",[84,259,261,264],{"class":86,"line":260},7,[84,262,263],{"class":206},"    content_limit",[84,265,210],{"class":119},[84,267,269,272,274],{"class":86,"line":268},8,[84,270,271],{"class":206},"    content_limit_delim",[84,273,137],{"class":119},[84,275,276],{"class":140},"' '\n",[84,278,280,283],{"class":86,"line":279},9,[84,281,282],{"class":206},"    template",[84,284,210],{"class":119},[84,286,288,291],{"class":86,"line":287},10,[84,289,290],{"class":119},"      - ",[84,292,293],{"class":140},"atom.xml\n",[20,295,296,297,299],{},"如果是个人用途，其实可以直接硬编码，在文件的倒数第二行把我们复制的 ",[44,298,70],{}," 放进去。",[20,301,302],{},[26,303],{"alt":28,"src":304},"https://static.031130.xyz/uploads/2024/10/23/fae341d7985ea.webp",[20,306,307],{},"或者如果我们想要写得考究一些，那么可以是下面这个样子的",[37,309,311],{"className":197,"code":310,"language":199,"meta":28,"style":28},"feed:\n  template:\n    - atom.xml\n  follow_challenge:\n    feedId: 56144913816835091\n    userId: 70410173045150720\n",[44,312,313,319,326,333,340,350],{"__ignoreMap":28},[84,314,315,317],{"class":86,"line":87},[84,316,207],{"class":206},[84,318,210],{"class":119},[84,320,321,324],{"class":86,"line":3},[84,322,323],{"class":206},"  template",[84,325,210],{"class":119},[84,327,328,331],{"class":86,"line":98},[84,329,330],{"class":119},"    - ",[84,332,293],{"class":140},[84,334,335,338],{"class":86,"line":104},[84,336,337],{"class":206},"  follow_challenge",[84,339,210],{"class":119},[84,341,342,345,347],{"class":86,"line":157},[84,343,344],{"class":206},"    feedId",[84,346,137],{"class":119},[84,348,349],{"class":125},"56144913816835091\n",[84,351,352,355,357],{"class":86,"line":163},[84,353,354],{"class":206},"    userId",[84,356,137],{"class":119},[84,358,359],{"class":125},"70410173045150720\n",[37,361,363],{"className":78,"code":362,"language":80,"meta":28,"style":28},"\u003C!-- //... -->\n  {% endfor %}\n  {% if config.feed.follow_challenge %}\n    \u003Cfollow_challenge>\n      \u003CfeedId>{{ config.feed.follow_challenge.feedId }}\u003C/feedId>\n      \u003CuserId>{{ config.feed.follow_challenge.userId }}\u003C/userId>\n    \u003C/follow_challenge>\n  {% endif %}\n\u003C/feed>\n",[44,364,365,373,378,383,388,393,398,403,408],{"__ignoreMap":28},[84,366,367,370],{"class":86,"line":87},[84,368,369],{},"\u003C!--",[84,371,372],{}," //... -->\n",[84,374,375],{"class":86,"line":3},[84,376,377],{},"  {% endfor %}\n",[84,379,380],{"class":86,"line":98},[84,381,382],{},"  {% if config.feed.follow_challenge %}\n",[84,384,385],{"class":86,"line":104},[84,386,387],{},"    \u003Cfollow_challenge>\n",[84,389,390],{"class":86,"line":157},[84,391,392],{},"      \u003CfeedId>{{ config.feed.follow_challenge.feedId }}\u003C/feedId>\n",[84,394,395],{"class":86,"line":163},[84,396,397],{},"      \u003CuserId>{{ config.feed.follow_challenge.userId }}\u003C/userId>\n",[84,399,400],{"class":86,"line":260},[84,401,402],{},"    \u003C/follow_challenge>\n",[84,404,405],{"class":86,"line":268},[84,406,407],{},"  {% endif %}\n",[84,409,410],{"class":86,"line":279},[84,411,412],{},"\u003C/feed>\n",[414,415],"hr",{},[20,417,418],{},"（说起来，这两个小改动一改，其实完全可以上传 npmjs.com 作为一个新的插件，不过我有点懒了）",[414,420],{},[20,422,423,424],{},"文末附一个 follow 邀请码: ",[84,425,428],{"className":426},[427],"heimu","6O0oBazB9s",[430,431,432],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}",{"title":28,"searchDepth":3,"depth":3,"links":434},[435,436],{"id":18,"depth":3,"text":18},{"id":169,"depth":3,"text":169},{"title":438,"date":439,"path":440,"tags":441,"body":444},"使用 GPT 对 waline 的评论进行审查","2024-10-12 16:11:06","/2024/10/12/use-gpt-to-review-waline-comments",[442,443],"waline","GPT",{"type":13,"value":445,"toc":1649},[446,449,464,467,473,482,491,1108,1123,1126,1129,1132,1412,1415,1426,1432,1450,1455,1585,1590,1638,1641,1646],[20,447,448],{},"前一阵子收到了这么一条来自 waline 的评论提醒。",[450,451,452],"blockquote",{},[20,453,454,455,459,460],{},"New comment on 竹林里有冰的博客\n【网站名称】：竹林里有冰的博客\n【评论者昵称】：专业数据库\n【评论者邮箱】：",[177,456,458],{"href":457},"mailto:rakhiranijhhg@gmail.com","rakhiranijhhg@gmail.com","\n【内容】：总之，优化专业数据库对于保持数据准确性、提高系统性能和推动业务成功至关重要。通过遵循本文中概述的策略，您可以提高数据库操作的效率并释放新的增长机会。\n【地址】：",[177,461,462],{"href":462,"rel":463},"https://zhul.in/2021/04/04/yay-more/#66f7a8889ab78865d5f5ae19",[181],[20,465,466],{},"评论的内容不仅透露着一股 AI 味，还和文章内容可谓是一点关系都没有，点开评论者的网站一看，一股塑料机翻味，怕是又是个来蹭 SEO 的广告哥。",[20,468,469],{},[26,470],{"alt":471,"src":472},"广告哥留下的网站","https://static.031130.xyz/uploads/2024/10/07/4673580090861.webp",[20,474,475,476,481],{},"根据 ",[177,477,480],{"href":478,"rel":479},"https://waline.js.org/advanced/faq.html#%E5%8F%91%E5%B8%83%E8%AF%84%E8%AE%BA%E5%BE%88%E6%85%A2%E6%80%8E%E4%B9%88%E5%8A%9E",[181],"waline 的官方文档","所言，waline 是使用了 Akismet 提供的垃圾内容检测服务的。可惜它似乎对 AI 生成的垃圾没有分辨能力。因此我计划使用 GPT 代替 Akismet 对 waline 的新评论进行审核。",[20,483,484,485,490],{},"walinejs/plugin 提供了一个 ",[177,486,489],{"href":487,"rel":488},"https://github.com/walinejs/plugins/blob/master/packages/tencent-tms/index.js",[181],"tencent-cms"," 的插件，功能是使用腾讯云的内容审查接口审查评论内容，这和我们需要的功能很像，主体部分和调用方法可以直接借鉴。",[37,492,496],{"className":493,"code":494,"language":495,"meta":28,"style":28},"language-javascript shiki shiki-themes github-light github-dark","// index.js\n\nconst tencentcloud = require(\"tencentcloud-sdk-nodejs-tms\");\nconst TmsClient = tencentcloud.tms.v20201229.Client;\n\n\nmodule.exports = function({secretId, secretKey, region}) {\n  if (!secretId || !secretKey || !region) {\n    return {};\n  }\n\n  const clientConfig = {\n    credential: {\n      secretId,\n      secretKey,\n    },\n    region,\n    profile: {\n      httpProfile: {\n        endpoint: \"tms.tencentcloudapi.com\",\n      },\n    },\n  };\n  \n  return {\n    hooks: {\n      async preSave(data) {\n        const { userInfo } = this.ctx.state;\n        const isAdmin = userInfo.type === 'administrator';\n        // ignore admin comment\n        if (isAdmin) {\n          return;\n        }\n\n        const client = new TmsClient(clientConfig);\n        try {\n          const resp = await client.TextModeration({ Content: data.comment });\n          if (!resp.Suggestion) {\n            throw new Error('Suggestion is empty. Tencent Cloud TMS info:', resp);\n          }\n\n          switch(resp.Suggestion) {\n            case 'Pass':\n              data.status = 'approved';\n              break;\n            case 'Block':\n              data.status = 'spam';\n              break;\n              case 'Review':\n              default:\n                data.status = 'waiting';\n                break;\n          }\n        } catch(e) {\n          console.log(e);\n          data.status = 'waiting';\n        }\n      },\n    },\n  };\n}\n","javascript",[44,497,498,504,510,535,547,551,555,592,622,630,634,639,653,659,665,671,677,683,689,695,706,712,717,723,729,737,743,760,784,806,812,821,829,835,840,858,866,889,902,921,927,932,941,952,965,973,983,995,1002,1013,1021,1034,1042,1047,1059,1071,1083,1088,1093,1098,1103],{"__ignoreMap":28},[84,499,500],{"class":86,"line":87},[84,501,503],{"class":502},"sJ8bj","// index.js\n",[84,505,506],{"class":86,"line":3},[84,507,509],{"emptyLinePlaceholder":508},true,"\n",[84,511,512,516,519,522,526,529,532],{"class":86,"line":98},[84,513,515],{"class":514},"szBVR","const",[84,517,518],{"class":125}," tencentcloud",[84,520,521],{"class":514}," =",[84,523,525],{"class":524},"sScJk"," require",[84,527,528],{"class":119},"(",[84,530,531],{"class":140},"\"tencentcloud-sdk-nodejs-tms\"",[84,533,534],{"class":119},");\n",[84,536,537,539,542,544],{"class":86,"line":104},[84,538,515],{"class":514},[84,540,541],{"class":125}," TmsClient",[84,543,521],{"class":514},[84,545,546],{"class":119}," tencentcloud.tms.v20201229.Client;\n",[84,548,549],{"class":86,"line":157},[84,550,509],{"emptyLinePlaceholder":508},[84,552,553],{"class":86,"line":163},[84,554,509],{"emptyLinePlaceholder":508},[84,556,557,560,563,566,568,571,574,578,581,584,586,589],{"class":86,"line":260},[84,558,559],{"class":125},"module",[84,561,562],{"class":119},".",[84,564,565],{"class":125},"exports",[84,567,521],{"class":514},[84,569,570],{"class":514}," function",[84,572,573],{"class":119},"({",[84,575,577],{"class":576},"s4XuR","secretId",[84,579,580],{"class":119},", ",[84,582,583],{"class":576},"secretKey",[84,585,580],{"class":119},[84,587,588],{"class":576},"region",[84,590,591],{"class":119},"}) {\n",[84,593,594,597,600,603,606,609,612,615,617,619],{"class":86,"line":268},[84,595,596],{"class":514},"  if",[84,598,599],{"class":119}," (",[84,601,602],{"class":514},"!",[84,604,605],{"class":119},"secretId ",[84,607,608],{"class":514},"||",[84,610,611],{"class":514}," !",[84,613,614],{"class":119},"secretKey ",[84,616,608],{"class":514},[84,618,611],{"class":514},[84,620,621],{"class":119},"region) {\n",[84,623,624,627],{"class":86,"line":279},[84,625,626],{"class":514},"    return",[84,628,629],{"class":119}," {};\n",[84,631,632],{"class":86,"line":287},[84,633,160],{"class":119},[84,635,637],{"class":86,"line":636},11,[84,638,509],{"emptyLinePlaceholder":508},[84,640,642,645,648,650],{"class":86,"line":641},12,[84,643,644],{"class":514},"  const",[84,646,647],{"class":125}," clientConfig",[84,649,521],{"class":514},[84,651,652],{"class":119}," {\n",[84,654,656],{"class":86,"line":655},13,[84,657,658],{"class":119},"    credential: {\n",[84,660,662],{"class":86,"line":661},14,[84,663,664],{"class":119},"      secretId,\n",[84,666,668],{"class":86,"line":667},15,[84,669,670],{"class":119},"      secretKey,\n",[84,672,674],{"class":86,"line":673},16,[84,675,676],{"class":119},"    },\n",[84,678,680],{"class":86,"line":679},17,[84,681,682],{"class":119},"    region,\n",[84,684,686],{"class":86,"line":685},18,[84,687,688],{"class":119},"    profile: {\n",[84,690,692],{"class":86,"line":691},19,[84,693,694],{"class":119},"      httpProfile: {\n",[84,696,698,701,704],{"class":86,"line":697},20,[84,699,700],{"class":119},"        endpoint: ",[84,702,703],{"class":140},"\"tms.tencentcloudapi.com\"",[84,705,144],{"class":119},[84,707,709],{"class":86,"line":708},21,[84,710,711],{"class":119},"      },\n",[84,713,715],{"class":86,"line":714},22,[84,716,676],{"class":119},[84,718,720],{"class":86,"line":719},23,[84,721,722],{"class":119},"  };\n",[84,724,726],{"class":86,"line":725},24,[84,727,728],{"class":119},"  \n",[84,730,732,735],{"class":86,"line":731},25,[84,733,734],{"class":514},"  return",[84,736,652],{"class":119},[84,738,740],{"class":86,"line":739},26,[84,741,742],{"class":119},"    hooks: {\n",[84,744,746,749,752,754,757],{"class":86,"line":745},27,[84,747,748],{"class":514},"      async",[84,750,751],{"class":524}," preSave",[84,753,528],{"class":119},[84,755,756],{"class":576},"data",[84,758,759],{"class":119},") {\n",[84,761,763,766,769,772,775,778,781],{"class":86,"line":762},28,[84,764,765],{"class":514},"        const",[84,767,768],{"class":119}," { ",[84,770,771],{"class":125},"userInfo",[84,773,774],{"class":119}," } ",[84,776,777],{"class":514},"=",[84,779,780],{"class":125}," this",[84,782,783],{"class":119},".ctx.state;\n",[84,785,787,789,792,794,797,800,803],{"class":86,"line":786},29,[84,788,765],{"class":514},[84,790,791],{"class":125}," isAdmin",[84,793,521],{"class":514},[84,795,796],{"class":119}," userInfo.type ",[84,798,799],{"class":514},"===",[84,801,802],{"class":140}," 'administrator'",[84,804,805],{"class":119},";\n",[84,807,809],{"class":86,"line":808},30,[84,810,811],{"class":502},"        // ignore admin comment\n",[84,813,815,818],{"class":86,"line":814},31,[84,816,817],{"class":514},"        if",[84,819,820],{"class":119}," (isAdmin) {\n",[84,822,824,827],{"class":86,"line":823},32,[84,825,826],{"class":514},"          return",[84,828,805],{"class":119},[84,830,832],{"class":86,"line":831},33,[84,833,834],{"class":119},"        }\n",[84,836,838],{"class":86,"line":837},34,[84,839,509],{"emptyLinePlaceholder":508},[84,841,843,845,848,850,853,855],{"class":86,"line":842},35,[84,844,765],{"class":514},[84,846,847],{"class":125}," client",[84,849,521],{"class":514},[84,851,852],{"class":514}," new",[84,854,541],{"class":524},[84,856,857],{"class":119},"(clientConfig);\n",[84,859,861,864],{"class":86,"line":860},36,[84,862,863],{"class":514},"        try",[84,865,652],{"class":119},[84,867,869,872,875,877,880,883,886],{"class":86,"line":868},37,[84,870,871],{"class":514},"          const",[84,873,874],{"class":125}," resp",[84,876,521],{"class":514},[84,878,879],{"class":514}," await",[84,881,882],{"class":119}," client.",[84,884,885],{"class":524},"TextModeration",[84,887,888],{"class":119},"({ Content: data.comment });\n",[84,890,892,895,897,899],{"class":86,"line":891},38,[84,893,894],{"class":514},"          if",[84,896,599],{"class":119},[84,898,602],{"class":514},[84,900,901],{"class":119},"resp.Suggestion) {\n",[84,903,905,908,910,913,915,918],{"class":86,"line":904},39,[84,906,907],{"class":514},"            throw",[84,909,852],{"class":514},[84,911,912],{"class":524}," Error",[84,914,528],{"class":119},[84,916,917],{"class":140},"'Suggestion is empty. Tencent Cloud TMS info:'",[84,919,920],{"class":119},", resp);\n",[84,922,924],{"class":86,"line":923},40,[84,925,926],{"class":119},"          }\n",[84,928,930],{"class":86,"line":929},41,[84,931,509],{"emptyLinePlaceholder":508},[84,933,935,938],{"class":86,"line":934},42,[84,936,937],{"class":514},"          switch",[84,939,940],{"class":119},"(resp.Suggestion) {\n",[84,942,944,947,950],{"class":86,"line":943},43,[84,945,946],{"class":514},"            case",[84,948,949],{"class":140}," 'Pass'",[84,951,210],{"class":119},[84,953,955,958,960,963],{"class":86,"line":954},44,[84,956,957],{"class":119},"              data.status ",[84,959,777],{"class":514},[84,961,962],{"class":140}," 'approved'",[84,964,805],{"class":119},[84,966,968,971],{"class":86,"line":967},45,[84,969,970],{"class":514},"              break",[84,972,805],{"class":119},[84,974,976,978,981],{"class":86,"line":975},46,[84,977,946],{"class":514},[84,979,980],{"class":140}," 'Block'",[84,982,210],{"class":119},[84,984,986,988,990,993],{"class":86,"line":985},47,[84,987,957],{"class":119},[84,989,777],{"class":514},[84,991,992],{"class":140}," 'spam'",[84,994,805],{"class":119},[84,996,998,1000],{"class":86,"line":997},48,[84,999,970],{"class":514},[84,1001,805],{"class":119},[84,1003,1005,1008,1011],{"class":86,"line":1004},49,[84,1006,1007],{"class":514},"              case",[84,1009,1010],{"class":140}," 'Review'",[84,1012,210],{"class":119},[84,1014,1016,1019],{"class":86,"line":1015},50,[84,1017,1018],{"class":514},"              default",[84,1020,210],{"class":119},[84,1022,1024,1027,1029,1032],{"class":86,"line":1023},51,[84,1025,1026],{"class":119},"                data.status ",[84,1028,777],{"class":514},[84,1030,1031],{"class":140}," 'waiting'",[84,1033,805],{"class":119},[84,1035,1037,1040],{"class":86,"line":1036},52,[84,1038,1039],{"class":514},"                break",[84,1041,805],{"class":119},[84,1043,1045],{"class":86,"line":1044},53,[84,1046,926],{"class":119},[84,1048,1050,1053,1056],{"class":86,"line":1049},54,[84,1051,1052],{"class":119},"        } ",[84,1054,1055],{"class":514},"catch",[84,1057,1058],{"class":119},"(e) {\n",[84,1060,1062,1065,1068],{"class":86,"line":1061},55,[84,1063,1064],{"class":119},"          console.",[84,1066,1067],{"class":524},"log",[84,1069,1070],{"class":119},"(e);\n",[84,1072,1074,1077,1079,1081],{"class":86,"line":1073},56,[84,1075,1076],{"class":119},"          data.status ",[84,1078,777],{"class":514},[84,1080,1031],{"class":140},[84,1082,805],{"class":119},[84,1084,1086],{"class":86,"line":1085},57,[84,1087,834],{"class":119},[84,1089,1091],{"class":86,"line":1090},58,[84,1092,711],{"class":119},[84,1094,1096],{"class":86,"line":1095},59,[84,1097,676],{"class":119},[84,1099,1101],{"class":86,"line":1100},60,[84,1102,722],{"class":119},[84,1104,1106],{"class":86,"line":1105},61,[84,1107,166],{"class":119},[20,1109,1110,1111,1116,1117,1122],{},"可以看到，我们需要在这个被 module.exports 导出的函数中，return 一个对象，如果使用 hooks 编写的话可以调用",[177,1112,1115],{"href":1113,"rel":1114},"https://waline.js.org/reference/server/config.html#%E8%AF%84%E8%AE%BA-hooks",[181],"一些生命周期 hook",": 在 preSave 阶段，我们可以通过标注 data.status 参数来反馈评论类型。approved 为接受，spam 为垃圾邮件，waiting 为等待人工审核；除此之外，还可以",[177,1118,1121],{"href":1119,"rel":1120},"https://waline.js.org/reference/server/plugin.html#%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%88%B6%E4%BD%9C",[181],"基于 Koa 中间件制作插件","，文档中有具体的描述。",[20,1124,1125],{},"index.js 顶部是需要引入的依赖。当然，如果需要引入外部的第三方包的话，需要在 packages.json 中加入需要的依赖（使用包管理器的命令进行安装）。",[20,1127,1128],{},"有了这些基础知识，就能手搓一个基于 GPT 的评论审查插件。",[20,1130,1131],{},"OpenAI 提供的是标准的 Restful API，本身的鉴权逻辑也不复杂，其实没必要调用 SDK，直接使用 fetch 调用就行。",[37,1133,1135],{"className":493,"code":1134,"language":495,"meta":28,"style":28},"const doReview = async (comment) => {\n  const response = await fetch(openaiBaseUrl + '/v1/chat/completions', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${openaiApiKey}`,\n    },\n    body: JSON.stringify({\n      model: openaiModel,\n      messages: [\n        {\n          role: 'system',\n          content: prompt\n        },\n        {\n          role: 'user',\n          content: comment,\n        },\n      ],\n    }),\n  });\n  const data = await response.json();\n  if (data && data.choices && data.choices.length > 0) {\n    return data.choices[0].message.content;\n  } else {\n    return 'waiting';\n  }\n}\n",[44,1136,1137,1162,1188,1198,1203,1215,1233,1237,1253,1258,1263,1268,1278,1283,1288,1292,1301,1306,1310,1315,1320,1325,1344,1373,1386,1396,1404,1408],{"__ignoreMap":28},[84,1138,1139,1141,1144,1146,1149,1151,1154,1157,1160],{"class":86,"line":87},[84,1140,515],{"class":514},[84,1142,1143],{"class":524}," doReview",[84,1145,521],{"class":514},[84,1147,1148],{"class":514}," async",[84,1150,599],{"class":119},[84,1152,1153],{"class":576},"comment",[84,1155,1156],{"class":119},") ",[84,1158,1159],{"class":514},"=>",[84,1161,652],{"class":119},[84,1163,1164,1166,1169,1171,1173,1176,1179,1182,1185],{"class":86,"line":3},[84,1165,644],{"class":514},[84,1167,1168],{"class":125}," response",[84,1170,521],{"class":514},[84,1172,879],{"class":514},[84,1174,1175],{"class":524}," fetch",[84,1177,1178],{"class":119},"(openaiBaseUrl ",[84,1180,1181],{"class":514},"+",[84,1183,1184],{"class":140}," '/v1/chat/completions'",[84,1186,1187],{"class":119},", {\n",[84,1189,1190,1193,1196],{"class":86,"line":98},[84,1191,1192],{"class":119},"    method: ",[84,1194,1195],{"class":140},"'POST'",[84,1197,144],{"class":119},[84,1199,1200],{"class":86,"line":104},[84,1201,1202],{"class":119},"    headers: {\n",[84,1204,1205,1208,1210,1213],{"class":86,"line":157},[84,1206,1207],{"class":140},"      'Content-Type'",[84,1209,137],{"class":119},[84,1211,1212],{"class":140},"'application/json'",[84,1214,144],{"class":119},[84,1216,1217,1220,1222,1225,1228,1231],{"class":86,"line":163},[84,1218,1219],{"class":140},"      'Authorization'",[84,1221,137],{"class":119},[84,1223,1224],{"class":140},"`Bearer ${",[84,1226,1227],{"class":119},"openaiApiKey",[84,1229,1230],{"class":140},"}`",[84,1232,144],{"class":119},[84,1234,1235],{"class":86,"line":260},[84,1236,676],{"class":119},[84,1238,1239,1242,1245,1247,1250],{"class":86,"line":268},[84,1240,1241],{"class":119},"    body: ",[84,1243,1244],{"class":125},"JSON",[84,1246,562],{"class":119},[84,1248,1249],{"class":524},"stringify",[84,1251,1252],{"class":119},"({\n",[84,1254,1255],{"class":86,"line":279},[84,1256,1257],{"class":119},"      model: openaiModel,\n",[84,1259,1260],{"class":86,"line":287},[84,1261,1262],{"class":119},"      messages: [\n",[84,1264,1265],{"class":86,"line":636},[84,1266,1267],{"class":119},"        {\n",[84,1269,1270,1273,1276],{"class":86,"line":641},[84,1271,1272],{"class":119},"          role: ",[84,1274,1275],{"class":140},"'system'",[84,1277,144],{"class":119},[84,1279,1280],{"class":86,"line":655},[84,1281,1282],{"class":119},"          content: prompt\n",[84,1284,1285],{"class":86,"line":661},[84,1286,1287],{"class":119},"        },\n",[84,1289,1290],{"class":86,"line":667},[84,1291,1267],{"class":119},[84,1293,1294,1296,1299],{"class":86,"line":673},[84,1295,1272],{"class":119},[84,1297,1298],{"class":140},"'user'",[84,1300,144],{"class":119},[84,1302,1303],{"class":86,"line":679},[84,1304,1305],{"class":119},"          content: comment,\n",[84,1307,1308],{"class":86,"line":685},[84,1309,1287],{"class":119},[84,1311,1312],{"class":86,"line":691},[84,1313,1314],{"class":119},"      ],\n",[84,1316,1317],{"class":86,"line":697},[84,1318,1319],{"class":119},"    }),\n",[84,1321,1322],{"class":86,"line":708},[84,1323,1324],{"class":119},"  });\n",[84,1326,1327,1329,1332,1334,1336,1339,1341],{"class":86,"line":714},[84,1328,644],{"class":514},[84,1330,1331],{"class":125}," data",[84,1333,521],{"class":514},[84,1335,879],{"class":514},[84,1337,1338],{"class":119}," response.",[84,1340,112],{"class":524},[84,1342,1343],{"class":119},"();\n",[84,1345,1346,1348,1351,1354,1357,1359,1362,1365,1368,1371],{"class":86,"line":719},[84,1347,596],{"class":514},[84,1349,1350],{"class":119}," (data ",[84,1352,1353],{"class":514},"&&",[84,1355,1356],{"class":119}," data.choices ",[84,1358,1353],{"class":514},[84,1360,1361],{"class":119}," data.choices.",[84,1363,1364],{"class":125},"length",[84,1366,1367],{"class":514}," >",[84,1369,1370],{"class":125}," 0",[84,1372,759],{"class":119},[84,1374,1375,1377,1380,1383],{"class":86,"line":725},[84,1376,626],{"class":514},[84,1378,1379],{"class":119}," data.choices[",[84,1381,1382],{"class":125},"0",[84,1384,1385],{"class":119},"].message.content;\n",[84,1387,1388,1391,1394],{"class":86,"line":731},[84,1389,1390],{"class":119},"  } ",[84,1392,1393],{"class":514},"else",[84,1395,652],{"class":119},[84,1397,1398,1400,1402],{"class":86,"line":739},[84,1399,626],{"class":514},[84,1401,1031],{"class":140},[84,1403,805],{"class":119},[84,1405,1406],{"class":86,"line":745},[84,1407,160],{"class":119},[84,1409,1410],{"class":86,"line":762},[84,1411,166],{"class":119},[20,1413,1414],{},"再配合相应的封装，一款基于 GPT 的 waline 评论审核插件就完成了",[1416,1417,1418],"ul",{},[1419,1420,1421],"li",{},[177,1422,1425],{"href":1423,"rel":1424},"https://github.com/zhullyb/waline-plugin-llm-reviewer",[181],"zhullyb/waline-plugin-llm-reviewer",[20,1427,1428],{},[1429,1430,1431],"strong",{},"如何安装",[37,1433,1437],{"className":1434,"code":1435,"language":1436,"meta":28,"style":28},"language-bash shiki shiki-themes github-light github-dark","npm install waline-plugin-llm-reviewer\n","bash",[44,1438,1439],{"__ignoreMap":28},[84,1440,1441,1444,1447],{"class":86,"line":87},[84,1442,1443],{"class":524},"npm",[84,1445,1446],{"class":140}," install",[84,1448,1449],{"class":140}," waline-plugin-llm-reviewer\n",[20,1451,1452],{},[1429,1453,1454],{},"如何使用",[37,1456,1458],{"className":493,"code":1457,"language":495,"meta":28,"style":28},"// index.js\nconst Waline = require('@waline/vercel');\nconst GPTReviewer = require('waline-plugin-llm-reviewer');\n\nmodule.exports = Waline({\n  plugins: [\n    GptReviewer({\n        openaiBaseUrl: process.env.OPENAI_BASE_URL,\n        openaiModel: process.env.OPENAI_MODEL,\n        openaiApiKey: process.env.OPENAI_API_KEY,\n        openaiPrompt: process.env.OPENAI_PROMPT,\n    })\n  ]\n});\n",[44,1459,1460,1464,1482,1500,1504,1518,1523,1530,1540,1550,1560,1570,1575,1580],{"__ignoreMap":28},[84,1461,1462],{"class":86,"line":87},[84,1463,503],{"class":502},[84,1465,1466,1468,1471,1473,1475,1477,1480],{"class":86,"line":3},[84,1467,515],{"class":514},[84,1469,1470],{"class":125}," Waline",[84,1472,521],{"class":514},[84,1474,525],{"class":524},[84,1476,528],{"class":119},[84,1478,1479],{"class":140},"'@waline/vercel'",[84,1481,534],{"class":119},[84,1483,1484,1486,1489,1491,1493,1495,1498],{"class":86,"line":98},[84,1485,515],{"class":514},[84,1487,1488],{"class":125}," GPTReviewer",[84,1490,521],{"class":514},[84,1492,525],{"class":524},[84,1494,528],{"class":119},[84,1496,1497],{"class":140},"'waline-plugin-llm-reviewer'",[84,1499,534],{"class":119},[84,1501,1502],{"class":86,"line":104},[84,1503,509],{"emptyLinePlaceholder":508},[84,1505,1506,1508,1510,1512,1514,1516],{"class":86,"line":157},[84,1507,559],{"class":125},[84,1509,562],{"class":119},[84,1511,565],{"class":125},[84,1513,521],{"class":514},[84,1515,1470],{"class":524},[84,1517,1252],{"class":119},[84,1519,1520],{"class":86,"line":163},[84,1521,1522],{"class":119},"  plugins: [\n",[84,1524,1525,1528],{"class":86,"line":260},[84,1526,1527],{"class":524},"    GptReviewer",[84,1529,1252],{"class":119},[84,1531,1532,1535,1538],{"class":86,"line":268},[84,1533,1534],{"class":119},"        openaiBaseUrl: process.env.",[84,1536,1537],{"class":125},"OPENAI_BASE_URL",[84,1539,144],{"class":119},[84,1541,1542,1545,1548],{"class":86,"line":279},[84,1543,1544],{"class":119},"        openaiModel: process.env.",[84,1546,1547],{"class":125},"OPENAI_MODEL",[84,1549,144],{"class":119},[84,1551,1552,1555,1558],{"class":86,"line":287},[84,1553,1554],{"class":119},"        openaiApiKey: process.env.",[84,1556,1557],{"class":125},"OPENAI_API_KEY",[84,1559,144],{"class":119},[84,1561,1562,1565,1568],{"class":86,"line":636},[84,1563,1564],{"class":119},"        openaiPrompt: process.env.",[84,1566,1567],{"class":125},"OPENAI_PROMPT",[84,1569,144],{"class":119},[84,1571,1572],{"class":86,"line":641},[84,1573,1574],{"class":119},"    })\n",[84,1576,1577],{"class":86,"line":655},[84,1578,1579],{"class":119},"  ]\n",[84,1581,1582],{"class":86,"line":661},[84,1583,1584],{"class":119},"});\n",[20,1586,1587],{},[1429,1588,1589],{},"环境变量",[1416,1591,1592,1606,1614,1622,1630],{},[1419,1593,1594,1597,1598,1605],{},[44,1595,1596],{},"ASISMET_KEY",": Waline 使用的反垃圾评论服务，",[1429,1599,1600,1601,1604],{},"建议设置为 ",[44,1602,1603],{},"false"," 以禁用","。",[1419,1607,1608,1610,1611],{},[44,1609,1537],{},": API 基础 URL。例如 ",[44,1612,1613],{},"https://api.openai.com",[1419,1615,1616,1618,1619],{},[44,1617,1547],{},": 模型名称。例如 ",[44,1620,1621],{},"gpt-4o-mini",[1419,1623,1624,1626,1627],{},[44,1625,1557],{},": API 密钥。例如 ",[44,1628,1629],{},"ak-xxxxxx",[1419,1631,1632,1634,1635],{},[44,1633,1567],{},"(可选): 模型的提示。例如 ",[44,1636,1637],{},"这是一个评论审查: ",[20,1639,1640],{},"在 waline 中设置好对应的环境变量，使用 npm 安装好对应的包，就算大功告成了。",[20,1642,1643],{},[26,1644],{"alt":28,"src":1645},"https://static.031130.xyz/uploads/2024/10/12/45f06a78286de.webp",[430,1647,1648],{},"html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .s4XuR, html code.shiki .s4XuR{--shiki-default:#E36209;--shiki-dark:#FFAB70}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":28,"searchDepth":3,"depth":3,"links":1650},[],{"title":1652,"date":1653,"path":1654,"tags":1655,"body":1657},"基于 JavaScript 的 Hexo Fluid 主题 banner 随机背景图实现","2024-09-25 00:00:42","/2024/09/25/random-banner-backgroud-image-implement-for-hexo-fluid-with-javascript",[1656,10],"JavaScript",{"type":13,"value":1658,"toc":2078},[1659,1663,1672,1678,1683,1691,1697,1700,1703,1706,1710,1713,1717,1720,1723,1738,1744,1748,1751,1800,1803,1812,2052,2055,2063,2066,2075],[16,1660,1662],{"id":1661},"为什么要换掉随机图片-api","为什么要换掉随机图片 API",[20,1664,1665,1666,1671],{},"因为 API 太慢了。根据 ",[177,1667,1670],{"href":1668,"rel":1669},"https://pagespeed.web.dev/",[181],"PageSpeed"," 的测速，使用 API 的图片加载时间来到了整整 2.5s，这似乎有些不可忍受。",[20,1673,1674],{},[26,1675],{"alt":1676,"src":1677},"PageSpeed 测速","https://static.031130.xyz/uploads/2024/09/25/3ef1a17bca955.webp",[1679,1680,1682],"h3",{"id":1681},"vercel-冷启动问题","Vercel 冷启动问题",[20,1684,1685,1686,1690],{},"当初年少无知，为了实现 banner 随机背景图，选择了",[177,1687,1689],{"href":1688},"/2021/05/21/create-a-random-picture-api-with-vercel/","使用 vercel 创建随机图片 API","。这带来了一些问题，首先 vercel 在站点一段时间没人访问以后会进入一种类似休眠的模式，下一次启动将会经历一个冷启动（cold start）的过程。我认为这对于一个图片背景的随机 API 而言是不可忍受的。",[20,1692,1693],{},[26,1694],{"alt":1695,"src":1696},"冷启动","https://static.031130.xyz/uploads/2024/09/24/f8cb9fd7a963e.webp",[20,1698,1699],{},"观察图上就可以发现，第一次访问时花费了 1.9 秒，第二次只需要 0.5 秒，这是因为第一次是冷启动，需要花费更多时间。",[1679,1701,1702],{"id":1702},"多一次网络请求",[20,1704,1705],{},"抛开冷启动不谈，引入 API 就会导致一次额外的网络请求。访客的浏览器将会先请求随机图片 API，然后根据 API 返回的 302 相应去请求真正的图片，而且这一过程是没法并行的，只能串行执行，这会浪费更多的等待时间。",[1679,1707,1709],{"id":1708},"vercel-在大陆境内的访问质量","Vercel 在大陆境内的访问质量",[20,1711,1712],{},"Vercel 在大陆境内的访问质量其实并不算好，即使是使用了所谓的优选节点，也不一定能保证整个大陆境内大部分访客都有不错的访问质量，因此使用 Vercel 搭建 API 的行为并不是最优解。",[16,1714,1716],{"id":1715},"转向-javascript-实现","转向 JavaScript 实现",[20,1718,1719],{},"这个方案本身没多少复杂的，只不过是三年前的我对前端一无所知不敢操刀罢了。",[1679,1721,1722],{"id":1722},"删除原有的背景图",[20,1724,1725,1726,1729,1730,1733,1734,1737],{},"在 ",[44,1727,1728],{},"_config.fluid.yml"," 中，将所有的 ",[44,1731,1732],{},"banner_img:"," 字段全部置空，防止其加载默认的 ",[44,1735,1736],{},"/img/default.png"," 而白白浪费用户的流量。这个字段一共在配置文件中出现了九次。",[20,1739,1740],{},[26,1741],{"alt":1742,"src":1743},"字段置空","https://static.031130.xyz/uploads/2024/09/25/70bd0b27f5aad.webp",[1679,1745,1747],{"id":1746},"添加-js","添加 js",[20,1749,1750],{},"我们的目标是修改 id 为 banner 的 div 块的 backgroud 的 css 属性，Hexo Fluid 默认的生成内容是这样的",[37,1752,1756],{"className":1753,"code":1754,"language":1755,"meta":28,"style":28},"language-html shiki shiki-themes github-light github-dark","\u003Cdiv id=\"banner\" class=\"banner\" parallax=true style=\"background: url('/img/default.png') no-repeat center center; background-size: cover;\">\n","html",[44,1757,1758],{"__ignoreMap":28},[84,1759,1760,1763,1766,1769,1771,1774,1777,1779,1781,1784,1786,1789,1792,1794,1797],{"class":86,"line":87},[84,1761,1762],{"class":119},"\u003C",[84,1764,1765],{"class":206},"div",[84,1767,1768],{"class":524}," id",[84,1770,777],{"class":119},[84,1772,1773],{"class":140},"\"banner\"",[84,1775,1776],{"class":524}," class",[84,1778,777],{"class":119},[84,1780,1773],{"class":140},[84,1782,1783],{"class":524}," parallax",[84,1785,777],{"class":119},[84,1787,1788],{"class":140},"true",[84,1790,1791],{"class":524}," style",[84,1793,777],{"class":119},[84,1795,1796],{"class":140},"\"background: url('/img/default.png') no-repeat center center; background-size: cover;\"",[84,1798,1799],{"class":119},">\n",[20,1801,1802],{},"我们可以通过 id 来定位这个元素，修改其 style.background 属性。",[20,1804,1805,1806,1811],{},"可以在任何地方引入下面的 js 代码，在这篇名为",[177,1807,1810],{"href":1808,"rel":1809},"https://www.zywvvd.com/notes/hexo/theme/fluid/fluid-add-umami/fluid-add-umami/",[181],"《Fluid -23- 添加 Umami 统计》"," 的文章里的方案是可供参考的。",[37,1813,1815],{"className":493,"code":1814,"language":495,"meta":28,"style":28},"const imgs = [\n    \"https://example.com/1.jpg\",\n    \"https://example.com/2.jpg\",\n    \"https://example.com/3.jpg\",\n    \"https://example.com/4.jpg\",\n    \"https://example.com/5.jpg\",\n    \"https://example.com/6.jpg\",\n    \"https://example.com/7.jpg\",\n    \"https://example.com/8.jpg\",\n    \"https://example.com/9.jpg\",\n    \"https://example.com/10.jpg\",\n    \"https://example.com/11.jpg\",\n    \"https://example.com/12.jpg\",\n    \"https://example.com/13.jpg\",\n    \"https://example.com/14.jpg\",\n    \"https://example.com/15.jpg\",\n    \"https://example.com/16.jpg\",\n    \"https://example.com/17.jpg\",\n    \"https://example.com/18.jpg\",\n    \"https://example.com/19.jpg\",\n    \"https://example.com/20.jpg\",\n]\n\nconst luck_img = imgs[Math.floor(Math.random() * imgs.length)]\nconst banner = document.getElementById('banner')\nbanner.style.background = `url(${luck_img}) center center / cover no-repeat`\n",[44,1816,1817,1829,1836,1843,1850,1857,1864,1871,1878,1885,1892,1899,1906,1913,1920,1927,1934,1941,1948,1955,1962,1969,1974,1978,2013,2036],{"__ignoreMap":28},[84,1818,1819,1821,1824,1826],{"class":86,"line":87},[84,1820,515],{"class":514},[84,1822,1823],{"class":125}," imgs",[84,1825,521],{"class":514},[84,1827,1828],{"class":119}," [\n",[84,1830,1831,1834],{"class":86,"line":3},[84,1832,1833],{"class":140},"    \"https://example.com/1.jpg\"",[84,1835,144],{"class":119},[84,1837,1838,1841],{"class":86,"line":98},[84,1839,1840],{"class":140},"    \"https://example.com/2.jpg\"",[84,1842,144],{"class":119},[84,1844,1845,1848],{"class":86,"line":104},[84,1846,1847],{"class":140},"    \"https://example.com/3.jpg\"",[84,1849,144],{"class":119},[84,1851,1852,1855],{"class":86,"line":157},[84,1853,1854],{"class":140},"    \"https://example.com/4.jpg\"",[84,1856,144],{"class":119},[84,1858,1859,1862],{"class":86,"line":163},[84,1860,1861],{"class":140},"    \"https://example.com/5.jpg\"",[84,1863,144],{"class":119},[84,1865,1866,1869],{"class":86,"line":260},[84,1867,1868],{"class":140},"    \"https://example.com/6.jpg\"",[84,1870,144],{"class":119},[84,1872,1873,1876],{"class":86,"line":268},[84,1874,1875],{"class":140},"    \"https://example.com/7.jpg\"",[84,1877,144],{"class":119},[84,1879,1880,1883],{"class":86,"line":279},[84,1881,1882],{"class":140},"    \"https://example.com/8.jpg\"",[84,1884,144],{"class":119},[84,1886,1887,1890],{"class":86,"line":287},[84,1888,1889],{"class":140},"    \"https://example.com/9.jpg\"",[84,1891,144],{"class":119},[84,1893,1894,1897],{"class":86,"line":636},[84,1895,1896],{"class":140},"    \"https://example.com/10.jpg\"",[84,1898,144],{"class":119},[84,1900,1901,1904],{"class":86,"line":641},[84,1902,1903],{"class":140},"    \"https://example.com/11.jpg\"",[84,1905,144],{"class":119},[84,1907,1908,1911],{"class":86,"line":655},[84,1909,1910],{"class":140},"    \"https://example.com/12.jpg\"",[84,1912,144],{"class":119},[84,1914,1915,1918],{"class":86,"line":661},[84,1916,1917],{"class":140},"    \"https://example.com/13.jpg\"",[84,1919,144],{"class":119},[84,1921,1922,1925],{"class":86,"line":667},[84,1923,1924],{"class":140},"    \"https://example.com/14.jpg\"",[84,1926,144],{"class":119},[84,1928,1929,1932],{"class":86,"line":673},[84,1930,1931],{"class":140},"    \"https://example.com/15.jpg\"",[84,1933,144],{"class":119},[84,1935,1936,1939],{"class":86,"line":679},[84,1937,1938],{"class":140},"    \"https://example.com/16.jpg\"",[84,1940,144],{"class":119},[84,1942,1943,1946],{"class":86,"line":685},[84,1944,1945],{"class":140},"    \"https://example.com/17.jpg\"",[84,1947,144],{"class":119},[84,1949,1950,1953],{"class":86,"line":691},[84,1951,1952],{"class":140},"    \"https://example.com/18.jpg\"",[84,1954,144],{"class":119},[84,1956,1957,1960],{"class":86,"line":697},[84,1958,1959],{"class":140},"    \"https://example.com/19.jpg\"",[84,1961,144],{"class":119},[84,1963,1964,1967],{"class":86,"line":708},[84,1965,1966],{"class":140},"    \"https://example.com/20.jpg\"",[84,1968,144],{"class":119},[84,1970,1971],{"class":86,"line":714},[84,1972,1973],{"class":119},"]\n",[84,1975,1976],{"class":86,"line":719},[84,1977,509],{"emptyLinePlaceholder":508},[84,1979,1980,1982,1985,1987,1990,1993,1996,1999,2002,2005,2008,2010],{"class":86,"line":725},[84,1981,515],{"class":514},[84,1983,1984],{"class":125}," luck_img",[84,1986,521],{"class":514},[84,1988,1989],{"class":119}," imgs[Math.",[84,1991,1992],{"class":524},"floor",[84,1994,1995],{"class":119},"(Math.",[84,1997,1998],{"class":524},"random",[84,2000,2001],{"class":119},"() ",[84,2003,2004],{"class":514},"*",[84,2006,2007],{"class":119}," imgs.",[84,2009,1364],{"class":125},[84,2011,2012],{"class":119},")]\n",[84,2014,2015,2017,2020,2022,2025,2028,2030,2033],{"class":86,"line":731},[84,2016,515],{"class":514},[84,2018,2019],{"class":125}," banner",[84,2021,521],{"class":514},[84,2023,2024],{"class":119}," document.",[84,2026,2027],{"class":524},"getElementById",[84,2029,528],{"class":119},[84,2031,2032],{"class":140},"'banner'",[84,2034,2035],{"class":119},")\n",[84,2037,2038,2041,2043,2046,2049],{"class":86,"line":739},[84,2039,2040],{"class":119},"banner.style.background ",[84,2042,777],{"class":514},[84,2044,2045],{"class":140}," `url(${",[84,2047,2048],{"class":119},"luck_img",[84,2050,2051],{"class":140},"}) center center / cover no-repeat`\n",[16,2053,2054],{"id":2054},"成果",[20,2056,2057,2058,2062],{},"博客能够在不引入外部 api 的情况下通过 js 自主实现随机的 banner 背景图，",[2059,2060,2061],"del",{},"但 pagespeed 的测速结果并没有明显好转","，因为 pagespeed 模拟了低速 4G 的访问速度，无论如何都无法提升大文件的加载速度。不过避免了多一次网络请求后，打开页面时的加载速度确实有提升。",[16,2064,2065],{"id":2065},"参见",[1416,2067,2068],{},[1419,2069,2070],{},[177,2071,2074],{"href":2072,"rel":2073},"https://vercel.com/guides/how-can-i-improve-serverless-function-lambda-cold-start-performance-on-vercel",[181],"How can I improve function cold start performance on Vercel?",[430,2076,2077],{},"html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}",{"title":28,"searchDepth":3,"depth":3,"links":2079},[2080,2085,2089,2090],{"id":1661,"depth":3,"text":1662,"children":2081},[2082,2083,2084],{"id":1681,"depth":98,"text":1682},{"id":1702,"depth":98,"text":1702},{"id":1708,"depth":98,"text":1709},{"id":1715,"depth":3,"text":1716,"children":2086},[2087,2088],{"id":1722,"depth":98,"text":1722},{"id":1746,"depth":98,"text":1747},{"id":2054,"depth":3,"text":2054},{"id":2065,"depth":3,"text":2065},{"title":2092,"date":2093,"path":2094,"tags":2095,"body":2100},"使用向日葵智能插座 C2 用电记录推算宿舍上次烧水时间","2024-09-24 05:17:47","/2024/09/24/log-last-water-boiling-water-with-sunlogin-adapter-power-consumption",[2096,2097,2098,2099],"IoT","Python","Hardware","Bot",{"type":13,"value":2101,"toc":2366},[2102,2108,2114,2121,2137,2143,2150,2156,2171,2174,2180,2183,2257,2271,2274,2351,2354,2357,2363],[20,2103,2104,2105],{},"我宿舍里入口处有一张公用的桌子，上面有一个烧水壶。根据生活经验，当用手摸烧水壶外壳能感受到明显热量时，水壶内的水大概是两小时内烧的，绝对能喝；但如果用手摸烧水壶外壳感受不到明显热量时，水壶内的水就不知道是什么时候烧的了，可能是三小时前，也可能是三天前。此时，在不寻求外部科学仪器介入的情况下，唯一能做的是询问寝室成员上一次水是谁烧的，是什么时候烧的。但寝室成员并不总是能够及时回答，可能在睡觉，也可能不在寝室里，",[2059,2106,2107],{},"还有可能出现记忆错乱。",[20,2109,2110,2111],{},"因此，",[1429,2112,2113],{},"我们需要一种可靠的方案获取上一次烧水时间。",[20,2115,2116,2117,2120],{},"前两天陪黄老板出门吃宵夜的时候和他提到了这个难题，我提出在烧水壶附近加装物理按钮，按动时向局域网内的 HomeServer 发送请求记录准确的烧水时间。他提出可以在烧水壶前加装智能插座，使用智能插座的耗电量来推算上一次烧水时间。这是一个可行方案，上次烧水时间不需要分钟级的精准度，",[1429,2118,2119],{},"小时级的精准度在这个需求上完全够用","，这是一个更好的方案。",[20,2122,2123,2124,2128,2129,2132,2133,2136],{},"在「",[177,2125,2127],{"href":2126},"/2023/11/01/unveiling-sunflower-smart-adapter-api-intercepting-utilizing-api-android-packet-sniffing/","使用 Root 后的安卓手机获取向日葵智能插座 C2 的开关 api","」这篇文章中，我有过抓包向日葵官方 app 的流量数据的经验，这一次直接故技重施。很可惜，我发现",[1429,2130,2131],{},"用电量数据","并不能直接从局域网内向智能插座获取，",[1429,2134,2135],{},"必须要从向日葵官方的服务器拉下来","。其实想想也知道，用电数据一旦精确到小时级，日积月累下来会对硬件的存储提出一定的挑战，而比较合理的方案就是由硬件向官方的服务器每小时通信一次记录下来。",[20,2138,2139],{},[26,2140],{"alt":2141,"src":2142},"抓包","https://static.031130.xyz/uploads/2024/09/24/bd6b0bdbab1da.webp",[20,2144,2145,2146,2149],{},"不过好消息是，",[1429,2147,2148],{},"官方服务器的这个接口并没有进行鉴权","，不需要进行额外的操作，一条 curl 命令都能下载下来。",[20,2151,2152],{},[26,2153],{"alt":2154,"src":2155},"curl 命令下载用电量数据","https://static.031130.xyz/uploads/2024/09/24/bf4ad72e00044.webp",[37,2157,2161],{"className":2158,"code":2159,"language":2160,"meta":28,"style":28},"language-shell shiki shiki-themes github-light github-dark","https://sl-api.oray.com/smartplug/powerconsumes/${SN}\n","shell",[44,2162,2163],{"__ignoreMap":28},[84,2164,2165,2168],{"class":86,"line":87},[84,2166,2167],{"class":524},"https://sl-api.oray.com/smartplug/powerconsumes/$",[84,2169,2170],{"class":140},"{SN}\n",[20,2172,2173],{},"SN 码也不需要自己去抓包，直接在官方应用的设备关于页面就能看到。",[20,2175,2176],{},[26,2177],{"alt":2178,"src":2179},"关于页面","https://static.031130.xyz/uploads/2024/09/24/edca671f53571.webp",[20,2181,2182],{},"json 数据的结构很明显，最外层是一个 Array，里面有若干个 object",[37,2184,2186],{"className":110,"code":2185,"language":112,"meta":28,"style":28},"[\n  {\n    \"consume\": 0,\n    \"starttime\": 1727125200,\n    \"endtime\": 1727128740,\n    \"index\": 0\n  },\n...\n]\n",[44,2187,2188,2193,2198,2209,2221,2233,2242,2247,2253],{"__ignoreMap":28},[84,2189,2190],{"class":86,"line":87},[84,2191,2192],{"class":119},"[\n",[84,2194,2195],{"class":86,"line":3},[84,2196,2197],{"class":119},"  {\n",[84,2199,2200,2203,2205,2207],{"class":86,"line":98},[84,2201,2202],{"class":125},"    \"consume\"",[84,2204,137],{"class":119},[84,2206,1382],{"class":125},[84,2208,144],{"class":119},[84,2210,2211,2214,2216,2219],{"class":86,"line":104},[84,2212,2213],{"class":125},"    \"starttime\"",[84,2215,137],{"class":119},[84,2217,2218],{"class":125},"1727125200",[84,2220,144],{"class":119},[84,2222,2223,2226,2228,2231],{"class":86,"line":157},[84,2224,2225],{"class":125},"    \"endtime\"",[84,2227,137],{"class":119},[84,2229,2230],{"class":125},"1727128740",[84,2232,144],{"class":119},[84,2234,2235,2238,2240],{"class":86,"line":163},[84,2236,2237],{"class":125},"    \"index\"",[84,2239,137],{"class":119},[84,2241,240],{"class":125},[84,2243,2244],{"class":86,"line":260},[84,2245,2246],{"class":119},"  },\n",[84,2248,2249],{"class":86,"line":268},[84,2250,2252],{"class":2251},"s7hpK","...\n",[84,2254,2255],{"class":86,"line":279},[84,2256,1973],{"class":119},[1416,2258,2259,2262,2265,2268],{},[1419,2260,2261],{},"consume: 这段时间消耗的用电量，单位 Wh",[1419,2263,2264],{},"starttime: 开始时间，unix 时间戳",[1419,2266,2267],{},"endtime: 结束时间，unix 时间戳",[1419,2269,2270],{},"index: 智能插座的第几个孔位（为插排预留的参数，智能插座只有 0 这一个位置）",[20,2272,2273],{},"所以我们要做的就是每小时下载一次这个 json 文件，需要时从 json 中寻找上一次用电量较高的小时，取那个小时的 starttime 时间戳转换为东八区人类可读的时间即可。",[37,2275,2279],{"className":2276,"code":2277,"language":2278,"meta":28,"style":28},"language-python shiki shiki-themes github-light github-dark","def last_water():\n    with open('power.json', 'r') as f:\n        powers = json.load(f)\n    for i in powers:\n        if i.get('consume') >= 30:\n            t = i.get('starttime')\n            break\n    last_water_time = datetime.datetime.fromtimestamp(t)\n    now = datetime.datetime.now()\n    time_delta = now - last_water_time\n    sec = time_delta.total_seconds()\n    hours = sec / 3600\n    lwt_str = last_water_time.strftime('%m月%d日%H点')\n    return f\"上次烧水时间为「{lwt_str}」，距离现在「{hours:.2f}」小时\"\n","python",[44,2280,2281,2286,2291,2296,2301,2306,2311,2316,2321,2326,2331,2336,2341,2346],{"__ignoreMap":28},[84,2282,2283],{"class":86,"line":87},[84,2284,2285],{},"def last_water():\n",[84,2287,2288],{"class":86,"line":3},[84,2289,2290],{},"    with open('power.json', 'r') as f:\n",[84,2292,2293],{"class":86,"line":98},[84,2294,2295],{},"        powers = json.load(f)\n",[84,2297,2298],{"class":86,"line":104},[84,2299,2300],{},"    for i in powers:\n",[84,2302,2303],{"class":86,"line":157},[84,2304,2305],{},"        if i.get('consume') >= 30:\n",[84,2307,2308],{"class":86,"line":163},[84,2309,2310],{},"            t = i.get('starttime')\n",[84,2312,2313],{"class":86,"line":260},[84,2314,2315],{},"            break\n",[84,2317,2318],{"class":86,"line":268},[84,2319,2320],{},"    last_water_time = datetime.datetime.fromtimestamp(t)\n",[84,2322,2323],{"class":86,"line":279},[84,2324,2325],{},"    now = datetime.datetime.now()\n",[84,2327,2328],{"class":86,"line":287},[84,2329,2330],{},"    time_delta = now - last_water_time\n",[84,2332,2333],{"class":86,"line":636},[84,2334,2335],{},"    sec = time_delta.total_seconds()\n",[84,2337,2338],{"class":86,"line":641},[84,2339,2340],{},"    hours = sec / 3600\n",[84,2342,2343],{"class":86,"line":655},[84,2344,2345],{},"    lwt_str = last_water_time.strftime('%m月%d日%H点')\n",[84,2347,2348],{"class":86,"line":661},[84,2349,2350],{},"    return f\"上次烧水时间为「{lwt_str}」，距离现在「{hours:.2f}」小时\"\n",[20,2352,2353],{},"至于每小时下载的任务，我这里是使用 crontab + curl 命令实现的，用 python 写个死循环跑也可以。",[20,2355,2356],{},"那么数据都取到了，剩下的就是人机交互的部分，这部分夸张点的可以写 web，写小程序，甚至写个安卓应用挂个桌面插件，想怎么做都可以。我这里就单纯将数据接入 qqbot 扔到了宿舍群，简单写了个关键词触发。",[20,2358,2359],{},[26,2360],{"alt":2361,"src":2362},"宿舍群","https://static.031130.xyz/uploads/2024/09/24/1a0637d61471f.webp",[430,2364,2365],{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .s7hpK, html code.shiki .s7hpK{--shiki-default:#B31D28;--shiki-default-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic}",{"title":28,"searchDepth":3,"depth":3,"links":2367},[],{"title":2369,"date":2370,"path":2371,"tags":2372,"body":2378},"使用 Caddy 反向代理 dockerhub 需要几步？","2024-09-21 01:29:17","/2024/09/21/how-to-reverse-proxy-dockerhub-with-caddy",[2373,2374,2375,2376,2377],"Caddy","Docker","mitmproxy","Network","Linux",{"type":13,"value":2379,"toc":2749},[2380,2383,2386,2389,2392,2400,2403,2412,2459,2462,2478,2484,2502,2505,2511,2514,2520,2524,2530,2535,2540,2546,2551,2554,2560,2563,2656,2659,2663,2674,2689,2692,2706,2709,2711,2718,2724,2727,2730,2732,2739,2746],[20,2381,2382],{},"几个月前，由于众所周知的原因，中国大陆境内失去了所有公共的 dockerhub 镜像（或者说是反代）。网上随即涌现了一批自建 dockerhub 反代的，有用 Cloudflare Workers 的，也有用 nginx 的，甚至还有自建 registry 的。",[20,2384,2385],{},"我使用 caddy 去反代 dockerhub 的原因很简单，一是配置简单，二是通过一台国内访问质量良好的境外服务器进行反向代理的访问质量会比 Cloudflare 减速器好很多。",[20,2387,2388],{},"在网上一阵搜索后，并没有发现任何使用 caddy 去反向代理 dockerhub 的文章， 于是本文应运而生。",[16,2390,2391],{"id":2391},"遇事不决先抓包",[20,2393,2394,2395,2399],{},"为了弄清楚 docker 从 dockerhub 拉取镜像的过程，需要先对网络请求进行抓包。具体的抓包方案我使用的是 mitmproxy，手动信任 ssl 证书的操作在「",[177,2396,2398],{"href":2397},"/2024/02/29/capture-https-traffic-on-linux-with-mitmproxy/","在 Linux 下使用 mitmproxy 抓取 HTTPS 流量","」这篇文章中已经讲过了，只需要配置 dockerd 使用本机的 8080 端口进行代理即可。",[20,2401,2402],{},"docker pull 时，是调用 dockerd 进行镜像拉取，而 dockerd 在绝大多数发行版上都是由 systemd 进程直接启用了，在 shell 中直接设置环境变量的方式并不能进行代理，而透明代理的方案会引入大量无关请求，增加流量分析的难度。",[20,2404,2405,2406,2411],{},"比较好的方案是直接在 systemd 服务这一层设置好代理的环境变量，我这里参考的是「",[177,2407,2410],{"href":2408,"rel":2409},"https://yeasy.gitbook.io/docker_practice/advanced_network/http_https_proxy",[181],"配置 HTTP/HTTPS 网络代理 | Docker — 从入门到实践","」这篇文章。",[37,2413,2415],{"className":1434,"code":2414,"language":1436,"meta":28,"style":28},"$ cat /etc/systemd/system/docker.service.d/http-proxy.conf \n\n[Service]\nEnvironment=\"HTTP_PROXY=http://127.0.0.1:8080\"\nEnvironment=\"HTTPS_PROXY=http://127.0.0.1:8080\"\n",[44,2416,2417,2431,2435,2440,2450],{"__ignoreMap":28},[84,2418,2419,2422,2425,2428],{"class":86,"line":87},[84,2420,2421],{"class":524},"$",[84,2423,2424],{"class":140}," cat",[84,2426,2427],{"class":140}," /etc/systemd/system/docker.service.d/http-proxy.conf",[84,2429,2430],{"class":119}," \n",[84,2432,2433],{"class":86,"line":3},[84,2434,509],{"emptyLinePlaceholder":508},[84,2436,2437],{"class":86,"line":98},[84,2438,2439],{"class":119},"[Service]\n",[84,2441,2442,2445,2447],{"class":86,"line":104},[84,2443,2444],{"class":119},"Environment",[84,2446,777],{"class":514},[84,2448,2449],{"class":140},"\"HTTP_PROXY=http://127.0.0.1:8080\"\n",[84,2451,2452,2454,2456],{"class":86,"line":157},[84,2453,2444],{"class":119},[84,2455,777],{"class":514},[84,2457,2458],{"class":140},"\"HTTPS_PROXY=http://127.0.0.1:8080\"\n",[20,2460,2461],{},"重启完 systemd 服务，万事俱备，我拉取了一个较小的 docker 镜像，顺利得到了预期的结果。",[37,2463,2465],{"className":1434,"code":2464,"language":1436,"meta":28,"style":28},"docker pull svenstaro/miniserve:latest\n",[44,2466,2467],{"__ignoreMap":28},[84,2468,2469,2472,2475],{"class":86,"line":87},[84,2470,2471],{"class":524},"docker",[84,2473,2474],{"class":140}," pull",[84,2476,2477],{"class":140}," svenstaro/miniserve:latest\n",[20,2479,2480],{},[26,2481],{"alt":2482,"src":2483},"抓包结果","https://static.031130.xyz/uploads/2024/09/21/acbee0959be78.webp",[20,2485,2486,2487,2490,2491,2494,2495,2497,2498,2501],{},"docker 先请求了 ",[44,2488,2489],{},"registry-1.docker.io"," 得到了 401 的 http 状态码后转去访问了 ",[44,2492,2493],{},"auth.docker.io","，得到了 Authorization 字段以后重新请求 ",[44,2496,2489],{},"，获取源数据后被 307 转发到了 ",[44,2499,2500],{},"production.cloudflare.docker.com"," 上。",[20,2503,2504],{},"其中，第一个 401 响应的响应头中，用 WWW-Authenticate 字段标注了 auth 鉴权的域",[20,2506,2507],{},[26,2508],{"alt":2509,"src":2510},"WWW-Authenticate","https://static.031130.xyz/uploads/2024/09/21/e905c55e76a25.webp",[20,2512,2513],{},"而 307 响应的响应头中，使用 Location 字段标注了被转发到的 url",[20,2515,2516],{},[26,2517],{"alt":2518,"src":2519},"Location","https://static.031130.xyz/uploads/2024/09/21/6a2e0bf6a8284.webp",[16,2521,2523],{"id":2522},"三个域名都需要反向代理嘛","三个域名都需要反向代理嘛？",[20,2525,2526,2527,2529],{},"首先，作为我们提供反代服务的入口，",[44,2528,2489],{}," 一定是需要代理的，否则就无法提供反代后的服务。",[20,2531,2532,2534],{},[44,2533,2493],{}," 只出现了一次，需要反代嘛？根据它在境内的访问质量，恐怕是需要反代的。",[20,2536,2537],{},[26,2538],{"alt":2493,"src":2539},"https://static.031130.xyz/uploads/2024/09/21/4a70c8cac6a4c.webp",[20,2541,2542,2543,2545],{},"最后就是 ",[44,2544,2500],{}," ，这也是我们最终下载镜像文件的地方，99% 以上的流量都是打到这里去的，而 cloudflare 在境内的访问质量是知名的减速器，完全不可以信赖。",[20,2547,2548],{},[1429,2549,2550],{},"因此，三个域名都需要反代。",[16,2552,2553],{"id":2553},"如何反代",[20,2555,2556,2557,2559],{},"分三个域名各自代理，在 ",[44,2558,2489],{}," 那一块进行特殊处理，将响应头中的 WWW-Authenticate 和 location 字段进行关键词替换，将原域名替换为反代域名。",[20,2561,2562],{},"最后的成果大概就是这个样子:",[37,2564,2568],{"className":2565,"code":2566,"language":2567,"meta":28,"style":28},"language-caddyfile shiki shiki-themes github-light github-dark","dockerhub.example.com {\n    reverse_proxy https://registry-1.docker.io {\n        header_up Host {http.reverse_proxy.upstream.hostport}\n        header_down WWW-Authenticate \"https://auth.docker.io\" \"https://auth.dockerhub.example.com\"\n        header_down Location \"https://production.cloudflare.docker.com\" \"https://production.dockerhub.example.com\"\n    }\n}\n\nauth.dockerhub.example.com {\n    reverse_proxy https://auth.docker.io {\n        header_up Host {http.reverse_proxy.upstream.hostport}\n    }\n}\n\nproduction.dockerhub.example.com {\n    reverse_proxy https://production.cloudflare.docker.com {\n        header_up Host {http.reverse_proxy.upstream.hostport}\n    }\n}\n","caddyfile",[44,2569,2570,2575,2580,2585,2590,2595,2600,2604,2608,2613,2618,2622,2626,2630,2634,2639,2644,2648,2652],{"__ignoreMap":28},[84,2571,2572],{"class":86,"line":87},[84,2573,2574],{},"dockerhub.example.com {\n",[84,2576,2577],{"class":86,"line":3},[84,2578,2579],{},"    reverse_proxy https://registry-1.docker.io {\n",[84,2581,2582],{"class":86,"line":98},[84,2583,2584],{},"        header_up Host {http.reverse_proxy.upstream.hostport}\n",[84,2586,2587],{"class":86,"line":104},[84,2588,2589],{},"        header_down WWW-Authenticate \"https://auth.docker.io\" \"https://auth.dockerhub.example.com\"\n",[84,2591,2592],{"class":86,"line":157},[84,2593,2594],{},"        header_down Location \"https://production.cloudflare.docker.com\" \"https://production.dockerhub.example.com\"\n",[84,2596,2597],{"class":86,"line":163},[84,2598,2599],{},"    }\n",[84,2601,2602],{"class":86,"line":260},[84,2603,166],{},[84,2605,2606],{"class":86,"line":268},[84,2607,509],{"emptyLinePlaceholder":508},[84,2609,2610],{"class":86,"line":279},[84,2611,2612],{},"auth.dockerhub.example.com {\n",[84,2614,2615],{"class":86,"line":287},[84,2616,2617],{},"    reverse_proxy https://auth.docker.io {\n",[84,2619,2620],{"class":86,"line":636},[84,2621,2584],{},[84,2623,2624],{"class":86,"line":641},[84,2625,2599],{},[84,2627,2628],{"class":86,"line":655},[84,2629,166],{},[84,2631,2632],{"class":86,"line":661},[84,2633,509],{"emptyLinePlaceholder":508},[84,2635,2636],{"class":86,"line":667},[84,2637,2638],{},"production.dockerhub.example.com {\n",[84,2640,2641],{"class":86,"line":673},[84,2642,2643],{},"    reverse_proxy https://production.cloudflare.docker.com {\n",[84,2645,2646],{"class":86,"line":679},[84,2647,2584],{},[84,2649,2650],{"class":86,"line":685},[84,2651,2599],{},[84,2653,2654],{"class":86,"line":691},[84,2655,166],{},[20,2657,2658],{},"PS: 推荐后两个域名使用 CNAME 解析到第一个域名，这样后面更改解析的时候更方便一些。",[16,2660,2662],{"id":2661},"如何设置-docker-使用反代","如何设置 docker 使用反代",[20,2664,2665,2666,2669,2670,2673],{},"可以直接在 ",[44,2667,2668],{},"docker pull"," 和 ",[44,2671,2672],{},"docker run"," 的命令前加上域名，比如原本的",[37,2675,2677],{"className":1434,"code":2676,"language":1436,"meta":28,"style":28},"docker run hello-world\n",[44,2678,2679],{"__ignoreMap":28},[84,2680,2681,2683,2686],{"class":86,"line":87},[84,2682,2471],{"class":524},[84,2684,2685],{"class":140}," run",[84,2687,2688],{"class":140}," hello-world\n",[20,2690,2691],{},"改成",[37,2693,2695],{"className":1434,"code":2694,"language":1436,"meta":28,"style":28},"docker run dockerhub.example.com/library/hello-world\n",[44,2696,2697],{"__ignoreMap":28},[84,2698,2699,2701,2703],{"class":86,"line":87},[84,2700,2471],{"class":524},[84,2702,2685],{"class":140},[84,2704,2705],{"class":140}," dockerhub.example.com/library/hello-world\n",[20,2707,2708],{},"（如果原本的镜像由 dockerhub 官方提供，没有用户名，路径需要加上 “library”）",[414,2710],{},[20,2712,2713,2714,2717],{},"也可以选择以前的方案，创建或修改 ",[44,2715,2716],{},"/etc/docker/daemon.json","：",[37,2719,2722],{"className":2720,"code":2721,"language":42},[40],"sudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json \u003C\u003C-'EOF'\n{\n    \"registry-mirrors\": [\n        \"https://dockerhub.example.com\"\n    ]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n",[44,2723,2721],{"__ignoreMap":28},[16,2725,2726],{"id":2726},"验证",[20,2728,2729],{},"一般来说，能够在中国大陆境内的网络质量下较快地下拉镜像本身就代表反代成功了，但保险起见可以像本文的第一部分一样抓个包，看看是不是都走了自己的域名了。",[16,2731,2065],{"id":2065},[20,2733,2734],{},[177,2735,2738],{"href":2736,"rel":2737},"https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6",[181],"国内的 Docker Hub 镜像加速器，由国内教育机构与各大云服务商提供的镜像加速服务",[20,2740,2741],{},[177,2742,2745],{"href":2743,"rel":2744},"https://blog.hentioe.dev/posts/unhindered-accesss-dockerhub.html",[181],"无障碍访问 Docker Hub 的各种方法（自建 registry、Cloudflare 加速、Nginx 反代、代理 Docker 网络） | 绅士喵",[430,2747,2748],{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":28,"searchDepth":3,"depth":3,"links":2750},[2751,2752,2753,2754,2755,2756],{"id":2391,"depth":3,"text":2391},{"id":2522,"depth":3,"text":2523},{"id":2553,"depth":3,"text":2553},{"id":2661,"depth":3,"text":2662},{"id":2726,"depth":3,"text":2726},{"id":2065,"depth":3,"text":2065},{"title":2758,"date":2759,"path":2760,"tags":2761,"body":2765},"将 Rustdesk 中继服务从 Arch Linux 迁移至 Debian","2024-09-20 03:20:38","/2024/09/20/migrate-rustdesk-server-from-arch-to-debian",[2762,2763,2764,2377],"Rustdesk","Archlinux","Debian",{"type":13,"value":2766,"toc":3135},[2767,2770,2786,2789,2793,2807,2813,2817,3026,3029,3032,3035,3038,3045,3051,3054,3060,3063,3066,3081,3084,3087,3093,3098,3101,3104,3109,3111,3132],[20,2768,2769],{},"这次迁移主要是两方面原因，一来是我安装了 Arch Linux 的 VPS 要过期了，续费价格过高，没有续费的动力；二来是手上的 VPS 越来越多，逐渐意识到 Arch Linux 作为滚动发行版，每次安装新的软件都要 Syu 甚至重启系统，实在没有太多的精力去维护，这也是为什么 Arch Linux 仅适合桌面发行版。",[20,2771,2772,2773,2778,2779,2669,2782,2785],{},"原本在 Arch Linux 上部署的 rustdesk server 我是按照这篇文章「",[177,2774,2777],{"href":2775,"rel":2776},"https://www.liyp.cc/archives/1698241638248",[181],"(水文)在archlinux上部署rustdesk服务端","」部署的。本身没什么技巧，直接从 AUR 安装现成的 rustdesk-server-bin，使用 systemctl 启用 ",[44,2780,2781],{},"rustdesk-server-hbbr.service",[44,2783,2784],{},"rustdesk-server-hbbs.service"," 两个服务即可。",[20,2787,2788],{},"Rustdesk 现在为 Debian 提供了官方的中继服务器的 deb 包，而谷歌搜了一圈都是下载 zip 包使用 pm2 管理进程，故写下此文。",[16,2790,2792],{"id":2791},"备份原服务器的-rustdesk-密钥","备份原服务器的 rustdesk 密钥",[20,2794,2795,2796,2799,2800,2669,2803,2806],{},"AUR 上的安装方案将密钥放在 ",[44,2797,2798],{},"/opt/rustdesk-server/data"," 直接用 sftp 获取 ",[44,2801,2802],{},"id_ed25519",[44,2804,2805],{},"id_ed25519.pub"," 两个文件就行。如果是新部署的没有这两个文件也没事，rustdesk 服务在启动时可以自动创建，只不过需要在客户端重新输入公钥。",[37,2808,2811],{"className":2809,"code":2810,"language":42},[40],"sftp> get /opt/rustdesk-server/data/id_ed25519\nsftp> get /opt/rustdesk-server/data/id_ed25519.pub\n",[44,2812,2810],{"__ignoreMap":28},[16,2814,2816],{"id":2815},"在新服务器上下载-deb-包进行安装","在新服务器上下载 deb 包，进行安装",[37,2818,2820],{"className":1434,"code":2819,"language":1436,"meta":28,"style":28},"apt install -y curl jq\nversion=$(curl -s https://api.github.com/repos/rustdesk/rustdesk-server/releases/latest | jq .tag_name)\n\nhbbr_deb=rustdesk-server-hbbr_${version:1:-1}_amd64.deb\nhbbs_deb=rustdesk-server-hbbs_${version:1:-1}_amd64.deb\nutils_deb=rustdesk-server-utils_${version:1:-1}_amd64.deb\n\nfor deb in $hbbr_deb $hbbs_deb $utils_deb\ndo\n    curl -L https://github.com/rustdesk/rustdesk-server/releases/download/${version:1:-1}/${deb} -o ${deb}\ndone\n\ndpkg -i $hbbr_deb $hbbs_deb $utils_deb\nrm $hbbr_deb $hbbs_deb $utils_deb\n",[44,2821,2822,2838,2868,2872,2900,2922,2944,2948,2962,2967,3000,3005,3009,3019],{"__ignoreMap":28},[84,2823,2824,2827,2829,2832,2835],{"class":86,"line":87},[84,2825,2826],{"class":524},"apt",[84,2828,1446],{"class":140},[84,2830,2831],{"class":125}," -y",[84,2833,2834],{"class":140}," curl",[84,2836,2837],{"class":140}," jq\n",[84,2839,2840,2843,2845,2848,2851,2854,2857,2860,2863,2866],{"class":86,"line":3},[84,2841,2842],{"class":119},"version",[84,2844,777],{"class":514},[84,2846,2847],{"class":119},"$(",[84,2849,2850],{"class":524},"curl",[84,2852,2853],{"class":125}," -s",[84,2855,2856],{"class":140}," https://api.github.com/repos/rustdesk/rustdesk-server/releases/latest",[84,2858,2859],{"class":514}," |",[84,2861,2862],{"class":524}," jq",[84,2864,2865],{"class":140}," .tag_name",[84,2867,2035],{"class":119},[84,2869,2870],{"class":86,"line":98},[84,2871,509],{"emptyLinePlaceholder":508},[84,2873,2874,2877,2879,2882,2885,2888,2891,2894,2897],{"class":86,"line":104},[84,2875,2876],{"class":119},"hbbr_deb",[84,2878,777],{"class":514},[84,2880,2881],{"class":140},"rustdesk-server-hbbr_",[84,2883,2884],{"class":119},"${version",[84,2886,2887],{"class":514},":",[84,2889,2890],{"class":119},"1",[84,2892,2893],{"class":514},":-",[84,2895,2896],{"class":119},"1}",[84,2898,2899],{"class":140},"_amd64.deb\n",[84,2901,2902,2905,2907,2910,2912,2914,2916,2918,2920],{"class":86,"line":157},[84,2903,2904],{"class":119},"hbbs_deb",[84,2906,777],{"class":514},[84,2908,2909],{"class":140},"rustdesk-server-hbbs_",[84,2911,2884],{"class":119},[84,2913,2887],{"class":514},[84,2915,2890],{"class":119},[84,2917,2893],{"class":514},[84,2919,2896],{"class":119},[84,2921,2899],{"class":140},[84,2923,2924,2927,2929,2932,2934,2936,2938,2940,2942],{"class":86,"line":163},[84,2925,2926],{"class":119},"utils_deb",[84,2928,777],{"class":514},[84,2930,2931],{"class":140},"rustdesk-server-utils_",[84,2933,2884],{"class":119},[84,2935,2887],{"class":514},[84,2937,2890],{"class":119},[84,2939,2893],{"class":514},[84,2941,2896],{"class":119},[84,2943,2899],{"class":140},[84,2945,2946],{"class":86,"line":260},[84,2947,509],{"emptyLinePlaceholder":508},[84,2949,2950,2953,2956,2959],{"class":86,"line":268},[84,2951,2952],{"class":514},"for",[84,2954,2955],{"class":119}," deb ",[84,2957,2958],{"class":514},"in",[84,2960,2961],{"class":119}," $hbbr_deb $hbbs_deb $utils_deb\n",[84,2963,2964],{"class":86,"line":279},[84,2965,2966],{"class":514},"do\n",[84,2968,2969,2972,2975,2978,2980,2982,2984,2986,2988,2991,2994,2997],{"class":86,"line":287},[84,2970,2971],{"class":524},"    curl",[84,2973,2974],{"class":125}," -L",[84,2976,2977],{"class":140}," https://github.com/rustdesk/rustdesk-server/releases/download/",[84,2979,2884],{"class":119},[84,2981,2887],{"class":514},[84,2983,2890],{"class":119},[84,2985,2893],{"class":514},[84,2987,2896],{"class":119},[84,2989,2990],{"class":140},"/",[84,2992,2993],{"class":119},"${deb} ",[84,2995,2996],{"class":125},"-o",[84,2998,2999],{"class":119}," ${deb}\n",[84,3001,3002],{"class":86,"line":636},[84,3003,3004],{"class":514},"done\n",[84,3006,3007],{"class":86,"line":641},[84,3008,509],{"emptyLinePlaceholder":508},[84,3010,3011,3014,3017],{"class":86,"line":655},[84,3012,3013],{"class":524},"dpkg",[84,3015,3016],{"class":125}," -i",[84,3018,2961],{"class":119},[84,3020,3021,3024],{"class":86,"line":661},[84,3022,3023],{"class":524},"rm",[84,3025,2961],{"class":119},[20,3027,3028],{},"简单写了个脚本，仅适用 amd64，也没做异常处理，如果服务器在大陆境内需要自行解决 github 下载时可能出现的网络波动问题。",[20,3030,3031],{},"dpkg 安装结束后默认会启用两个 systemd 服务并开机自启，所以不需要使用 systemctl 手动启用。",[16,3033,3034],{"id":3034},"替换密钥",[20,3036,3037],{},"将刚刚备份的一个公钥和一个私钥放在 Debian 服务器的相应路径，问题是这个路径在哪里呢？",[20,3039,3040,3041,3044],{},"通过翻看 rustdesk 的 service 文件，我们大概可以定位到是在 ",[44,3042,3043],{},"/var/lib/rustdesk-server/"," 路径下的",[20,3046,3047],{},[26,3048],{"alt":3049,"src":3050},"service 问价你","https://static.031130.xyz/uploads/2024/09/20/59d08477f8a0b.webp",[20,3052,3053],{},"直接对两个密钥文件进行替换，重启 rustdesk 相关的两个 service 服务即可。",[20,3055,3056],{},[26,3057],{"alt":3058,"src":3059},"密钥文件","https://static.031130.xyz/uploads/2024/09/20/527c5b1151a57.webp",[16,3061,3062],{"id":3062},"开放服务器防火墙",[20,3064,3065],{},"需要开放如下端口，记得 Linux 的防火墙和云服务供应商面板（如果有的话）上都要开放",[1416,3067,3068,3075],{},[1419,3069,3070,3071,3074],{},"TCP(",[1429,3072,3073],{},"21115, 21116, 21117, 21118, 21119",")",[1419,3076,3077,3078,3074],{},"UDP(",[1429,3079,3080],{},"21116",[16,3082,3083],{"id":3083},"客户端设置",[20,3085,3086],{},"id_ed25519.pub 对应客户端中需要输入的 Key，大概长成下面这个样子",[37,3088,3091],{"className":3089,"code":3090,"language":42},[40],"rdtxujYccRLXwXOu2KR3V9cGgP51lEdSmE0HJHGNkn4=\n",[44,3092,3090],{"__ignoreMap":28},[20,3094,3095],{},[26,3096],{"alt":28,"src":3097},"https://static.031130.xyz/uploads/2024/09/20/cc715265b8b37.webp",[20,3099,3100],{},"ID 服务器直接输入中继服务器的 ip 或者解析到对应 ip 的域名即可，另外两个地址可以不填，RustDesk会自动推导（如果没有特别设定）",[16,3102,3103],{"id":3103},"成果展示",[20,3105,3106],{},[26,3107],{"alt":3103,"src":3108},"https://static.031130.xyz/uploads/2024/09/20/3108bac773390.webp",[16,3110,2065],{"id":2065},[1416,3112,3113,3120,3127],{},[1419,3114,3115],{},[177,3116,3119],{"href":3117,"rel":3118},"https://rustdesk.com/docs/en/self-host/rustdesk-server-oss/install/",[181],"Installation :: Documentation for RustDesk",[1419,3121,3122],{},[177,3123,3126],{"href":3124,"rel":3125},"https://catcat.blog/rustdesk-debian-%E8%87%AA%E5%BB%BA%E4%B8%AD%E7%BB%A7%E6%9C%8D%E5%8A%A1%E5%99%A8.html",[181],"RustDesk Debian 自建中继服务器",[1419,3128,3129],{},[177,3130,2777],{"href":2775,"rel":3131},[181],[430,3133,3134],{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":28,"searchDepth":3,"depth":3,"links":3136},[3137,3138,3139,3140,3141,3142,3143],{"id":2791,"depth":3,"text":2792},{"id":2815,"depth":3,"text":2816},{"id":3034,"depth":3,"text":3034},{"id":3062,"depth":3,"text":3062},{"id":3083,"depth":3,"text":3083},{"id":3103,"depth":3,"text":3103},{"id":2065,"depth":3,"text":2065},{"title":3145,"date":3146,"path":3147,"tags":3148,"body":3151},"自建图床小记五——费用","2024-08-21 00:05:15","/2024/08/21/self-host-cdn-expense",[3149,3150],"图床","CDN",{"type":13,"value":3152,"toc":3200},[3153,3156,3162,3165,3168,3174,3180,3186,3189,3195],[20,3154,3155],{},"自建的图床自 8 月 13 日正式启用以来，已经过去一周多了，具体的费用是多少呢？原先设计的 0 额外投入有没有实现呢？",[20,3157,3158],{},[26,3159],{"alt":3160,"src":3161},"博客访问统计","https://static.031130.xyz/uploads/2024/08/21/74605f0ef84a9.webp",[20,3163,3164],{},"这是我的博客访问统计，在这一周多的时间内，一共有 1.27k 次页面访问，被 671 个访客访问了 769 次，平均下来每天也有一百多次的页面访问。",[20,3166,3167],{},"Cloudflare Workers 和 Cloudflare R2 的免费额度全部够用，用量全部小于免费额度的 1%。",[20,3169,3170],{},[26,3171],{"alt":3172,"src":3173},"R2 的免费额度","https://static.031130.xyz/uploads/2024/08/21/96ec475817b8f.webp",[20,3175,3176],{},[26,3177],{"alt":3178,"src":3179},"R2 的用量","https://static.031130.xyz/uploads/2024/08/21/7a26d392e6c90.webp",[20,3181,3182],{},[26,3183],{"alt":3184,"src":3185},"Cloudflare Workers 过去 24 小时内的请求次数","https://static.031130.xyz/uploads/2024/08/21/31a7f3c316b47.webp",[20,3187,3188],{},"又拍云联盟每年可以领取 67 元的代金券，平均每天控制在 0.18 元内即可实现白嫖。",[20,3190,3191],{},[26,3192],{"alt":3193,"src":3194},"又拍云账单","https://static.031130.xyz/uploads/2024/08/21/1c4eeac63a2fb.webp",[20,3196,3197],{},[1429,3198,3199],{},"可以看到，这一套图床在我博客当前和可见的未来的访客情况下，在不被人恶意刷流量的情况下，是不需要投入除域名续费以外的其他成本的。",{"title":28,"searchDepth":3,"depth":3,"links":3201},[],{"title":3203,"date":3204,"path":3205,"tags":3206,"body":3208},"自建图床小记四——上传脚本编写与图片迁移","2024-08-20 23:12:30","/2024/08/20/picbed-upload-script-and-image-migration",[2097,3149,2377,2376,3207],"Shell Script",{"type":13,"value":3209,"toc":4744},[3210,3227,3230,3233,3239,4221,4248,4284,4294,4297,4390,4411,4419,4422,4425,4428,4741],[20,3211,3212,3213,3217,3218,2669,3222,3226],{},"前面三篇小记分别讲述了",[177,3214,3216],{"href":3215},"/2024/08/12/new-picbed-based-on-cloudflare-and-upyun/","图床的整体架构","、",[177,3219,3221],{"href":3220},"/2024/08/13/build-restful-api-for-cloudflare-r2-with-cloudflare-workers/","用 Workers 构建 Restful API",[177,3223,3225],{"href":3224},"/2024/08/14/auto-renew-ssl-certificate-and-deploy-to-upyun-with-github-action/","自动更新部署 SSL 证书","，这一篇c处理由此带来的图片上传问题，主要是要为 Typora 编写自动上传脚本，并为博客原有的图片进行迁移。",[16,3228,3229],{"id":3229},"自动上传脚本",[20,3231,3232],{},"主要还是给 Typora 用，实现这种效果",[20,3234,3235],{},[26,3236],{"alt":3237,"src":3238},"Typora 自动上传","https://static.031130.xyz/uploads/2024/08/12/62f3b881e3c4c.gif",[37,3240,3242],{"className":1434,"code":3241,"language":1436,"meta":28,"style":28},"#!/bin/bash\n\nHOST=\"upload.example.com\"\nCDN_HOST=\"cdn.example.com\"\nUPLOAD_PATH=\"uploads/$(date +%Y/%m/%d)\"\n\nAUTH_TOKEN=\"1145141919810\"\n\nwebp=false\nmarkdown=false\nforce=false\nkeep=false\n\nwhile getopts \":mwfkp:\" opt; do\n    case $opt in\n        m|markdown) markdown=true ;;\n        w|webp) webp=true ;;\n        f|force) force=true ;;\n        k|keep) keep=true ;;\n        p|path) UPLOAD_PATH=$OPTARG ;;\n        \\?) echo \"Invalid option: -$OPTARG\" ;;\n    esac\ndone\nshift $((OPTIND - 1))\n\nUPLOAD_URL=\"https://$HOST/$UPLOAD_PATH\"\nif [[ \"$UPLOAD_URL\" == */ ]]; then\n    UPLOAD_URL=\"${UPLOAD_URL%?}\"\nfi\n\nfor image in \"$@\"; do\n    if [ \"$webp\" = true ]; then\n        cwebp -quiet \"$image\" -o \"${image%.*}.webp\"\n        image=\"${image%.*}.webp\"\n    fi\n\n    if [ \"$keep\" = true ]; then\n        FILENAME=$(basename \"$image\")\n    else\n        FILENAME=\"$(md5sum $image | cut -c 1-13).$(basename $image | cut -d. -f2)\"\n    fi\n\n    if [ \"$force\" = true ]; then\n        UPLOAD_RESPONSE=$(curl -s -X PUT \"${UPLOAD_URL}/$FILENAME\" \\\n            -w \"%{http_code}\" \\\n            --data-binary @\"$image\" \\\n            -H \"X-Custom-Auth-Key: $AUTH_TOKEN\" \\\n            -H \"Overwrite: true\" \\\n        )\n    else\n        UPLOAD_RESPONSE=$(curl -s -X PUT \"${UPLOAD_URL}/$FILENAME\" \\\n            -w \"%{http_code}\" \\\n            --data-binary @\"$image\" \\\n            -H \"X-Custom-Auth-Key: $AUTH_TOKEN\" \\\n        )\n    fi\n\n    UPLOAD_HTTP_CODE=$(echo \"$UPLOAD_RESPONSE\" | tail -n1)\n    \n    if [ -n \"$UPLOAD_PATH\" ]; then\n        CDN_URL=\"https://$CDN_HOST/$UPLOAD_PATH/$FILENAME\"\n    else\n        CDN_URL=\"https://$CDN_HOST/$FILENAME\"\n    fi\n\n    if [ \"$UPLOAD_HTTP_CODE\" != \"200\" ]; then\n        echo \"上传失败: $UPLOAD_RESPONSE\"\n        continue\n    fi\n\n    if [ \"$markdown\" = true ]; then\n        echo \"![](${CDN_URL})\"\n    else\n        echo \"${CDN_URL}\"\n    fi\ndone\n",[44,3243,3244,3249,3253,3263,3273,3289,3293,3303,3307,3317,3326,3335,3344,3348,3367,3378,3401,3421,3441,3461,3481,3502,3507,3511,3531,3535,3556,3583,3601,3606,3610,3631,3656,3689,3708,3713,3717,3738,3758,3763,3806,3810,3814,3835,3869,3879,3893,3908,3917,3922,3926,3954,3962,3974,3986,3990,3994,3998,4027,4032,4051,4073,4078,4095,4100,4105,4129,4142,4148,4153,4158,4180,4194,4199,4211,4216],{"__ignoreMap":28},[84,3245,3246],{"class":86,"line":87},[84,3247,3248],{"class":502},"#!/bin/bash\n",[84,3250,3251],{"class":86,"line":3},[84,3252,509],{"emptyLinePlaceholder":508},[84,3254,3255,3258,3260],{"class":86,"line":98},[84,3256,3257],{"class":119},"HOST",[84,3259,777],{"class":514},[84,3261,3262],{"class":140},"\"upload.example.com\"\n",[84,3264,3265,3268,3270],{"class":86,"line":104},[84,3266,3267],{"class":119},"CDN_HOST",[84,3269,777],{"class":514},[84,3271,3272],{"class":140},"\"cdn.example.com\"\n",[84,3274,3275,3278,3280,3283,3286],{"class":86,"line":157},[84,3276,3277],{"class":119},"UPLOAD_PATH",[84,3279,777],{"class":514},[84,3281,3282],{"class":140},"\"uploads/$(",[84,3284,3285],{"class":524},"date",[84,3287,3288],{"class":140}," +%Y/%m/%d)\"\n",[84,3290,3291],{"class":86,"line":163},[84,3292,509],{"emptyLinePlaceholder":508},[84,3294,3295,3298,3300],{"class":86,"line":260},[84,3296,3297],{"class":119},"AUTH_TOKEN",[84,3299,777],{"class":514},[84,3301,3302],{"class":140},"\"1145141919810\"\n",[84,3304,3305],{"class":86,"line":268},[84,3306,509],{"emptyLinePlaceholder":508},[84,3308,3309,3312,3314],{"class":86,"line":279},[84,3310,3311],{"class":119},"webp",[84,3313,777],{"class":514},[84,3315,3316],{"class":140},"false\n",[84,3318,3319,3322,3324],{"class":86,"line":287},[84,3320,3321],{"class":119},"markdown",[84,3323,777],{"class":514},[84,3325,3316],{"class":140},[84,3327,3328,3331,3333],{"class":86,"line":636},[84,3329,3330],{"class":119},"force",[84,3332,777],{"class":514},[84,3334,3316],{"class":140},[84,3336,3337,3340,3342],{"class":86,"line":641},[84,3338,3339],{"class":119},"keep",[84,3341,777],{"class":514},[84,3343,3316],{"class":140},[84,3345,3346],{"class":86,"line":655},[84,3347,509],{"emptyLinePlaceholder":508},[84,3349,3350,3353,3356,3359,3362,3365],{"class":86,"line":661},[84,3351,3352],{"class":514},"while",[84,3354,3355],{"class":125}," getopts",[84,3357,3358],{"class":140}," \":mwfkp:\"",[84,3360,3361],{"class":140}," opt",[84,3363,3364],{"class":119},"; ",[84,3366,2966],{"class":514},[84,3368,3369,3372,3375],{"class":86,"line":667},[84,3370,3371],{"class":514},"    case",[84,3373,3374],{"class":119}," $opt ",[84,3376,3377],{"class":514},"in\n",[84,3379,3380,3384,3387,3389,3391,3394,3396,3398],{"class":86,"line":673},[84,3381,3383],{"class":3382},"sA_wV","        m",[84,3385,3386],{"class":514},"|",[84,3388,3321],{"class":3382},[84,3390,3074],{"class":514},[84,3392,3393],{"class":119}," markdown",[84,3395,777],{"class":514},[84,3397,1788],{"class":140},[84,3399,3400],{"class":119}," ;;\n",[84,3402,3403,3406,3408,3410,3412,3415,3417,3419],{"class":86,"line":679},[84,3404,3405],{"class":3382},"        w",[84,3407,3386],{"class":514},[84,3409,3311],{"class":3382},[84,3411,3074],{"class":514},[84,3413,3414],{"class":119}," webp",[84,3416,777],{"class":514},[84,3418,1788],{"class":140},[84,3420,3400],{"class":119},[84,3422,3423,3426,3428,3430,3432,3435,3437,3439],{"class":86,"line":685},[84,3424,3425],{"class":3382},"        f",[84,3427,3386],{"class":514},[84,3429,3330],{"class":3382},[84,3431,3074],{"class":514},[84,3433,3434],{"class":119}," force",[84,3436,777],{"class":514},[84,3438,1788],{"class":140},[84,3440,3400],{"class":119},[84,3442,3443,3446,3448,3450,3452,3455,3457,3459],{"class":86,"line":691},[84,3444,3445],{"class":3382},"        k",[84,3447,3386],{"class":514},[84,3449,3339],{"class":3382},[84,3451,3074],{"class":514},[84,3453,3454],{"class":119}," keep",[84,3456,777],{"class":514},[84,3458,1788],{"class":140},[84,3460,3400],{"class":119},[84,3462,3463,3466,3468,3471,3473,3476,3478],{"class":86,"line":697},[84,3464,3465],{"class":3382},"        p",[84,3467,3386],{"class":514},[84,3469,3470],{"class":3382},"path",[84,3472,3074],{"class":514},[84,3474,3475],{"class":119}," UPLOAD_PATH",[84,3477,777],{"class":514},[84,3479,3480],{"class":119},"$OPTARG ;;\n",[84,3482,3483,3486,3488,3491,3494,3497,3500],{"class":86,"line":708},[84,3484,3485],{"class":125},"        \\?",[84,3487,3074],{"class":514},[84,3489,3490],{"class":125}," echo",[84,3492,3493],{"class":140}," \"Invalid option: -",[84,3495,3496],{"class":119},"$OPTARG",[84,3498,3499],{"class":140},"\"",[84,3501,3400],{"class":119},[84,3503,3504],{"class":86,"line":714},[84,3505,3506],{"class":514},"    esac\n",[84,3508,3509],{"class":86,"line":719},[84,3510,3004],{"class":514},[84,3512,3513,3516,3519,3522,3525,3528],{"class":86,"line":725},[84,3514,3515],{"class":125},"shift",[84,3517,3518],{"class":119}," $((",[84,3520,3521],{"class":524},"OPTIND",[84,3523,3524],{"class":140}," -",[84,3526,3527],{"class":125}," 1",[84,3529,3530],{"class":119},"))\n",[84,3532,3533],{"class":86,"line":731},[84,3534,509],{"emptyLinePlaceholder":508},[84,3536,3537,3540,3542,3545,3548,3550,3553],{"class":86,"line":739},[84,3538,3539],{"class":119},"UPLOAD_URL",[84,3541,777],{"class":514},[84,3543,3544],{"class":140},"\"https://",[84,3546,3547],{"class":119},"$HOST",[84,3549,2990],{"class":140},[84,3551,3552],{"class":119},"$UPLOAD_PATH",[84,3554,3555],{"class":140},"\"\n",[84,3557,3558,3561,3564,3566,3569,3571,3574,3577,3580],{"class":86,"line":745},[84,3559,3560],{"class":514},"if",[84,3562,3563],{"class":119}," [[ ",[84,3565,3499],{"class":140},[84,3567,3568],{"class":119},"$UPLOAD_URL",[84,3570,3499],{"class":140},[84,3572,3573],{"class":514}," ==",[84,3575,3576],{"class":514}," *",[84,3578,3579],{"class":119},"/ ]]; ",[84,3581,3582],{"class":514},"then\n",[84,3584,3585,3588,3590,3593,3595,3598],{"class":86,"line":762},[84,3586,3587],{"class":119},"    UPLOAD_URL",[84,3589,777],{"class":514},[84,3591,3592],{"class":140},"\"${",[84,3594,3539],{"class":119},[84,3596,3597],{"class":514},"%",[84,3599,3600],{"class":140},"?}\"\n",[84,3602,3603],{"class":86,"line":786},[84,3604,3605],{"class":514},"fi\n",[84,3607,3608],{"class":86,"line":808},[84,3609,509],{"emptyLinePlaceholder":508},[84,3611,3612,3614,3617,3619,3622,3625,3627,3629],{"class":86,"line":814},[84,3613,2952],{"class":514},[84,3615,3616],{"class":119}," image ",[84,3618,2958],{"class":514},[84,3620,3621],{"class":140}," \"",[84,3623,3624],{"class":125},"$@",[84,3626,3499],{"class":140},[84,3628,3364],{"class":119},[84,3630,2966],{"class":514},[84,3632,3633,3636,3639,3641,3644,3646,3648,3651,3654],{"class":86,"line":823},[84,3634,3635],{"class":514},"    if",[84,3637,3638],{"class":119}," [ ",[84,3640,3499],{"class":140},[84,3642,3643],{"class":119},"$webp",[84,3645,3499],{"class":140},[84,3647,521],{"class":514},[84,3649,3650],{"class":125}," true",[84,3652,3653],{"class":119}," ]; ",[84,3655,3582],{"class":514},[84,3657,3658,3661,3664,3666,3669,3671,3674,3677,3680,3682,3684,3686],{"class":86,"line":831},[84,3659,3660],{"class":524},"        cwebp",[84,3662,3663],{"class":125}," -quiet",[84,3665,3621],{"class":140},[84,3667,3668],{"class":119},"$image",[84,3670,3499],{"class":140},[84,3672,3673],{"class":125}," -o",[84,3675,3676],{"class":140}," \"${",[84,3678,3679],{"class":119},"image",[84,3681,3597],{"class":514},[84,3683,562],{"class":140},[84,3685,2004],{"class":514},[84,3687,3688],{"class":140},"}.webp\"\n",[84,3690,3691,3694,3696,3698,3700,3702,3704,3706],{"class":86,"line":837},[84,3692,3693],{"class":119},"        image",[84,3695,777],{"class":514},[84,3697,3592],{"class":140},[84,3699,3679],{"class":119},[84,3701,3597],{"class":514},[84,3703,562],{"class":140},[84,3705,2004],{"class":514},[84,3707,3688],{"class":140},[84,3709,3710],{"class":86,"line":842},[84,3711,3712],{"class":514},"    fi\n",[84,3714,3715],{"class":86,"line":860},[84,3716,509],{"emptyLinePlaceholder":508},[84,3718,3719,3721,3723,3725,3728,3730,3732,3734,3736],{"class":86,"line":868},[84,3720,3635],{"class":514},[84,3722,3638],{"class":119},[84,3724,3499],{"class":140},[84,3726,3727],{"class":119},"$keep",[84,3729,3499],{"class":140},[84,3731,521],{"class":514},[84,3733,3650],{"class":125},[84,3735,3653],{"class":119},[84,3737,3582],{"class":514},[84,3739,3740,3743,3745,3747,3750,3752,3754,3756],{"class":86,"line":891},[84,3741,3742],{"class":119},"        FILENAME",[84,3744,777],{"class":514},[84,3746,2847],{"class":119},[84,3748,3749],{"class":524},"basename",[84,3751,3621],{"class":140},[84,3753,3668],{"class":119},[84,3755,3499],{"class":140},[84,3757,2035],{"class":119},[84,3759,3760],{"class":86,"line":904},[84,3761,3762],{"class":514},"    else\n",[84,3764,3765,3767,3769,3772,3775,3778,3780,3783,3786,3789,3791,3793,3795,3797,3800,3803],{"class":86,"line":923},[84,3766,3742],{"class":119},[84,3768,777],{"class":514},[84,3770,3771],{"class":140},"\"$(",[84,3773,3774],{"class":524},"md5sum",[84,3776,3777],{"class":119}," $image",[84,3779,2859],{"class":514},[84,3781,3782],{"class":524}," cut",[84,3784,3785],{"class":125}," -c",[84,3787,3788],{"class":140}," 1-13).$(",[84,3790,3749],{"class":524},[84,3792,3777],{"class":119},[84,3794,2859],{"class":514},[84,3796,3782],{"class":524},[84,3798,3799],{"class":125}," -d.",[84,3801,3802],{"class":125}," -f2",[84,3804,3805],{"class":140},")\"\n",[84,3807,3808],{"class":86,"line":929},[84,3809,3712],{"class":514},[84,3811,3812],{"class":86,"line":934},[84,3813,509],{"emptyLinePlaceholder":508},[84,3815,3816,3818,3820,3822,3825,3827,3829,3831,3833],{"class":86,"line":943},[84,3817,3635],{"class":514},[84,3819,3638],{"class":119},[84,3821,3499],{"class":140},[84,3823,3824],{"class":119},"$force",[84,3826,3499],{"class":140},[84,3828,521],{"class":514},[84,3830,3650],{"class":125},[84,3832,3653],{"class":119},[84,3834,3582],{"class":514},[84,3836,3837,3840,3842,3844,3846,3848,3851,3854,3856,3858,3861,3864,3866],{"class":86,"line":954},[84,3838,3839],{"class":119},"        UPLOAD_RESPONSE",[84,3841,777],{"class":514},[84,3843,2847],{"class":119},[84,3845,2850],{"class":524},[84,3847,2853],{"class":125},[84,3849,3850],{"class":125}," -X",[84,3852,3853],{"class":140}," PUT",[84,3855,3676],{"class":140},[84,3857,3539],{"class":119},[84,3859,3860],{"class":140},"}/",[84,3862,3863],{"class":119},"$FILENAME",[84,3865,3499],{"class":140},[84,3867,3868],{"class":125}," \\\n",[84,3870,3871,3874,3877],{"class":86,"line":967},[84,3872,3873],{"class":125},"            -w",[84,3875,3876],{"class":140}," \"%{http_code}\"",[84,3878,3868],{"class":125},[84,3880,3881,3884,3887,3889,3891],{"class":86,"line":975},[84,3882,3883],{"class":125},"            --data-binary",[84,3885,3886],{"class":140}," @\"",[84,3888,3668],{"class":119},[84,3890,3499],{"class":140},[84,3892,3868],{"class":125},[84,3894,3895,3898,3901,3904,3906],{"class":86,"line":985},[84,3896,3897],{"class":125},"            -H",[84,3899,3900],{"class":140}," \"X-Custom-Auth-Key: ",[84,3902,3903],{"class":119},"$AUTH_TOKEN",[84,3905,3499],{"class":140},[84,3907,3868],{"class":125},[84,3909,3910,3912,3915],{"class":86,"line":997},[84,3911,3897],{"class":125},[84,3913,3914],{"class":140}," \"Overwrite: true\"",[84,3916,3868],{"class":125},[84,3918,3919],{"class":86,"line":1004},[84,3920,3921],{"class":119},"        )\n",[84,3923,3924],{"class":86,"line":1015},[84,3925,3762],{"class":514},[84,3927,3928,3930,3932,3934,3936,3938,3940,3942,3944,3946,3948,3950,3952],{"class":86,"line":1023},[84,3929,3839],{"class":119},[84,3931,777],{"class":514},[84,3933,2847],{"class":119},[84,3935,2850],{"class":524},[84,3937,2853],{"class":125},[84,3939,3850],{"class":125},[84,3941,3853],{"class":140},[84,3943,3676],{"class":140},[84,3945,3539],{"class":119},[84,3947,3860],{"class":140},[84,3949,3863],{"class":119},[84,3951,3499],{"class":140},[84,3953,3868],{"class":125},[84,3955,3956,3958,3960],{"class":86,"line":1036},[84,3957,3873],{"class":125},[84,3959,3876],{"class":140},[84,3961,3868],{"class":125},[84,3963,3964,3966,3968,3970,3972],{"class":86,"line":1044},[84,3965,3883],{"class":125},[84,3967,3886],{"class":140},[84,3969,3668],{"class":119},[84,3971,3499],{"class":140},[84,3973,3868],{"class":125},[84,3975,3976,3978,3980,3982,3984],{"class":86,"line":1049},[84,3977,3897],{"class":125},[84,3979,3900],{"class":140},[84,3981,3903],{"class":119},[84,3983,3499],{"class":140},[84,3985,3868],{"class":125},[84,3987,3988],{"class":86,"line":1061},[84,3989,3921],{"class":119},[84,3991,3992],{"class":86,"line":1073},[84,3993,3712],{"class":514},[84,3995,3996],{"class":86,"line":1085},[84,3997,509],{"emptyLinePlaceholder":508},[84,3999,4000,4003,4005,4007,4010,4012,4015,4017,4019,4022,4025],{"class":86,"line":1090},[84,4001,4002],{"class":119},"    UPLOAD_HTTP_CODE",[84,4004,777],{"class":514},[84,4006,2847],{"class":119},[84,4008,4009],{"class":125},"echo",[84,4011,3621],{"class":140},[84,4013,4014],{"class":119},"$UPLOAD_RESPONSE",[84,4016,3499],{"class":140},[84,4018,2859],{"class":514},[84,4020,4021],{"class":524}," tail",[84,4023,4024],{"class":125}," -n1",[84,4026,2035],{"class":119},[84,4028,4029],{"class":86,"line":1095},[84,4030,4031],{"class":119},"    \n",[84,4033,4034,4036,4038,4041,4043,4045,4047,4049],{"class":86,"line":1100},[84,4035,3635],{"class":514},[84,4037,3638],{"class":119},[84,4039,4040],{"class":514},"-n",[84,4042,3621],{"class":140},[84,4044,3552],{"class":119},[84,4046,3499],{"class":140},[84,4048,3653],{"class":119},[84,4050,3582],{"class":514},[84,4052,4053,4056,4058,4060,4063,4065,4067,4069,4071],{"class":86,"line":1105},[84,4054,4055],{"class":119},"        CDN_URL",[84,4057,777],{"class":514},[84,4059,3544],{"class":140},[84,4061,4062],{"class":119},"$CDN_HOST",[84,4064,2990],{"class":140},[84,4066,3552],{"class":119},[84,4068,2990],{"class":140},[84,4070,3863],{"class":119},[84,4072,3555],{"class":140},[84,4074,4076],{"class":86,"line":4075},62,[84,4077,3762],{"class":514},[84,4079,4081,4083,4085,4087,4089,4091,4093],{"class":86,"line":4080},63,[84,4082,4055],{"class":119},[84,4084,777],{"class":514},[84,4086,3544],{"class":140},[84,4088,4062],{"class":119},[84,4090,2990],{"class":140},[84,4092,3863],{"class":119},[84,4094,3555],{"class":140},[84,4096,4098],{"class":86,"line":4097},64,[84,4099,3712],{"class":514},[84,4101,4103],{"class":86,"line":4102},65,[84,4104,509],{"emptyLinePlaceholder":508},[84,4106,4108,4110,4112,4114,4117,4119,4122,4125,4127],{"class":86,"line":4107},66,[84,4109,3635],{"class":514},[84,4111,3638],{"class":119},[84,4113,3499],{"class":140},[84,4115,4116],{"class":119},"$UPLOAD_HTTP_CODE",[84,4118,3499],{"class":140},[84,4120,4121],{"class":514}," !=",[84,4123,4124],{"class":140}," \"200\"",[84,4126,3653],{"class":119},[84,4128,3582],{"class":514},[84,4130,4132,4135,4138,4140],{"class":86,"line":4131},67,[84,4133,4134],{"class":125},"        echo",[84,4136,4137],{"class":140}," \"上传失败: ",[84,4139,4014],{"class":119},[84,4141,3555],{"class":140},[84,4143,4145],{"class":86,"line":4144},68,[84,4146,4147],{"class":514},"        continue\n",[84,4149,4151],{"class":86,"line":4150},69,[84,4152,3712],{"class":514},[84,4154,4156],{"class":86,"line":4155},70,[84,4157,509],{"emptyLinePlaceholder":508},[84,4159,4161,4163,4165,4167,4170,4172,4174,4176,4178],{"class":86,"line":4160},71,[84,4162,3635],{"class":514},[84,4164,3638],{"class":119},[84,4166,3499],{"class":140},[84,4168,4169],{"class":119},"$markdown",[84,4171,3499],{"class":140},[84,4173,521],{"class":514},[84,4175,3650],{"class":125},[84,4177,3653],{"class":119},[84,4179,3582],{"class":514},[84,4181,4183,4185,4188,4191],{"class":86,"line":4182},72,[84,4184,4134],{"class":125},[84,4186,4187],{"class":140}," \"![](${",[84,4189,4190],{"class":119},"CDN_URL",[84,4192,4193],{"class":140},"})\"\n",[84,4195,4197],{"class":86,"line":4196},73,[84,4198,3762],{"class":514},[84,4200,4202,4204,4206,4208],{"class":86,"line":4201},74,[84,4203,4134],{"class":125},[84,4205,3676],{"class":140},[84,4207,4190],{"class":119},[84,4209,4210],{"class":140},"}\"\n",[84,4212,4214],{"class":86,"line":4213},75,[84,4215,3712],{"class":514},[84,4217,4219],{"class":86,"line":4218},76,[84,4220,3004],{"class":514},[20,4222,4223,4224,3217,4227,2669,4230,4233,4234,4236,4237,2669,4239,4241,4242,2669,4244,4247],{},"这一次使用 Cloudflare Workers 构建的 Restful API 很有意思，使用了 ",[44,4225,4226],{},"GET",[44,4228,4229],{},"PUT",[44,4231,4232],{},"DELETE"," 三个请求类型。",[44,4235,4226],{}," 请求很常见，是用来获取图片的，",[44,4238,4229],{},[44,4240,4232],{}," 在 web 开发就不如 ",[44,4243,4226],{},[44,4245,4246],{},"POST"," 常见了，这一次也是让我体会到了这两个 http verb 在 Storage Bucket 操作中是有多么形象了。",[1416,4249,4250,4273],{},[1419,4251,4252,4254,4255,4258,4259,4262,4263,4266,4267,4269,4270,4272],{},[44,4253,4229],{}," - 从直观上来讲，就是将某个文件放到目标位置",[4256,4257],"br",{},"打个比方，我向 ",[44,4260,4261],{},"https://cdn.example.com/img/avatar.webp"," 打了一个请求，并带上了要上传的文件，那就意味着我将这个文件放到了 Storage Bucket 的 ",[44,4264,4265],{},"/img/avatar.webp"," 这个位置，所以我在上传后，应该就能用 ",[44,4268,4226],{}," 请求我刚才 ",[44,4271,4229],{}," 的那个 URL 获取我刚才上传的东西。如果那个路径存在文件，那么默认行为是直接覆盖。",[1419,4274,4275,4277,4278,4280,4281,4283],{},[44,4276,4232],{}," - 删除目标路径的文件",[4256,4279],{},"和 ",[44,4282,4229],{}," 一样，我在请求对应 URL 后，Storage Bucket 中对应 URL 路径的资源应该被删除。",[20,4285,4286,2669,4288,4290,4291,4293],{},[44,4287,4229],{},[44,4289,4232],{}," 这两个 Http Verb 让我们更像是在对一个真实的文件系统进行操作，而非那种传统的使用 ",[44,4292,4246],{}," 上传的图床那样，我们并不通过 POST 请求上传一个文件，然后获取资源最终被放置位置的 URL —— 我们自己决定资源被存放的位置。",[20,4295,4296],{},"在这个 Shell 脚本中，引入了四个可选选项",[37,4298,4300],{"className":1434,"code":4299,"language":1436,"meta":28,"style":28},"    m|markdown) markdown=true ;;\n    w|webp) webp=true ;;\n    f|force) force=true ;;\n    k|keep) keep=true ;;\n    p|path) UPLOAD_PATH=$OPTARG ;;\n",[44,4301,4302,4320,4338,4356,4374],{"__ignoreMap":28},[84,4303,4304,4307,4309,4311,4314,4316,4318],{"class":86,"line":87},[84,4305,4306],{"class":524},"    m",[84,4308,3386],{"class":514},[84,4310,3321],{"class":524},[84,4312,4313],{"class":119},") markdown",[84,4315,777],{"class":514},[84,4317,1788],{"class":140},[84,4319,3400],{"class":119},[84,4321,4322,4325,4327,4329,4332,4334,4336],{"class":86,"line":3},[84,4323,4324],{"class":524},"    w",[84,4326,3386],{"class":514},[84,4328,3311],{"class":524},[84,4330,4331],{"class":119},") webp",[84,4333,777],{"class":514},[84,4335,1788],{"class":140},[84,4337,3400],{"class":119},[84,4339,4340,4343,4345,4347,4350,4352,4354],{"class":86,"line":98},[84,4341,4342],{"class":524},"    f",[84,4344,3386],{"class":514},[84,4346,3330],{"class":524},[84,4348,4349],{"class":119},") force",[84,4351,777],{"class":514},[84,4353,1788],{"class":140},[84,4355,3400],{"class":119},[84,4357,4358,4361,4363,4365,4368,4370,4372],{"class":86,"line":104},[84,4359,4360],{"class":524},"    k",[84,4362,3386],{"class":514},[84,4364,3339],{"class":524},[84,4366,4367],{"class":119},") keep",[84,4369,777],{"class":514},[84,4371,1788],{"class":140},[84,4373,3400],{"class":119},[84,4375,4376,4379,4381,4383,4386,4388],{"class":86,"line":157},[84,4377,4378],{"class":524},"    p",[84,4380,3386],{"class":514},[84,4382,3470],{"class":524},[84,4384,4385],{"class":119},") UPLOAD_PATH",[84,4387,777],{"class":514},[84,4389,3480],{"class":119},[1416,4391,4392,4399,4402,4405,4408],{},[1419,4393,4394,4395,4398],{},"markdown 选项决定返回值是否以 ",[44,4396,4397],{},"![]()"," 这种 URL 格式返回",[1419,4400,4401],{},"webp 决定上传过程中是否将图片转为 webp 后再上传",[1419,4403,4404],{},"force 决定如果遇到文件路径冲突，是否强制覆盖云端的文件",[1419,4406,4407],{},"keep 决定是否保留文件原有的文件名进行上传",[1419,4409,4410],{},"path 决定文件具体被存放的路径（或者使用默认的路径）",[20,4412,4413,4415,4416,4418],{},[44,4414,3257],{}," 是图床用于上传的地址，",[44,4417,3267],{}," 是图床用于被方可访问的地址。",[20,4420,4421],{},"由于急着用，也没考虑协程的处理方式，等等看后期有没有时间用 Python 重写吧。",[16,4423,4424],{"id":4424},"博客图床迁移脚本",[20,4426,4427],{},"因为只用一次，所以也没使用协程或者多线程的方式去上传文件——毕竟图片不多，也就两三百张。",[37,4429,4431],{"className":2276,"code":4430,"language":2278,"meta":28,"style":28},"import os\nimport re\nimport requests\n\n# 哪些后缀的文件需要检测是否存在老图床的 URL 并进行迁移？\nfile_extension = [\n    '.md',\n    '.yml',\n    '.html'\n]\n\npic_urls = []\n\n_files = []\n\n# 用于匹配老图床的正则表达式，这里是按照 lsky pro 的格式编写的\npattern = r'https://cdn.example.com/\\d{4}/\\d{2}/\\d{2}/[a-z0-9]{13}\\.[a-z]{3,4}'\n\n# 图片的上传部分，需要先从原 url 中下载图片，在上传到新图床中，如果需要的话可以在中途转换为 webp 格式\ndef upload(url):\n    \"\"\"\n    此处的返回值应该是新的 url\n    \"\"\"\n\n# 遍历目标后缀文件名的文件，如果存在老图床的 url，则将 url 加入到 pic_urls 列表中，并将这个文件的文件名（相对路径）添加到 _files 列表中\nfor root, dirs, files in os.walk(\".\"):\n    for file in files:\n        if file.endswith(tuple(file_extension)):\n            file_name = os.path.join(root, file)\n            with open(file_name, 'r') as f:\n                content = f.read()\n            urls = re.findall(pattern, content)\n            if urls:\n                pic_urls.extend(urls)\n                _files.append(file_name)\n\n# 先转为集合，再转回列表，进行去重\npic_urls = list(set(pic_urls))\nprint(\"共找到图片：\", len(pic_urls))\n\nurl_dict = {}\n\n# 将列表中的图片进行上传，每张图片最多尝试三次上传，如果三次都失败，则保留原连接\nfor i,u in enumerate(pci_urls, start=1):\n    for t in range(1,4):\n        try:\n            new_u = upload(u)\n            continue\n        except:\n            if t == 3:\n                new_u = u\n                print(f\"{u} 无法上传：{e}\")\n    url_dict[u] = new_u\n    print(f\"{i} / {len(pic_urls)}\")\n\n# 对 _files 列表中的文件一一完成替换\nfor file in _files:\n    with open(file, 'r') as f:\n        content = f.read()\n    for k, v in url_dict.items():\n        content = content.replace(k, v)\n    with open(file, 'w') as f:\n        f.write(content)\n    print(\"完成替换：\", file)\n",[44,4432,4433,4438,4443,4448,4452,4457,4462,4467,4472,4477,4481,4485,4490,4494,4499,4503,4508,4513,4517,4522,4527,4532,4537,4541,4545,4550,4555,4560,4565,4570,4575,4580,4585,4590,4595,4600,4604,4609,4614,4619,4623,4628,4632,4637,4642,4647,4652,4657,4662,4667,4672,4677,4682,4687,4692,4696,4701,4706,4711,4716,4721,4726,4731,4736],{"__ignoreMap":28},[84,4434,4435],{"class":86,"line":87},[84,4436,4437],{},"import os\n",[84,4439,4440],{"class":86,"line":3},[84,4441,4442],{},"import re\n",[84,4444,4445],{"class":86,"line":98},[84,4446,4447],{},"import requests\n",[84,4449,4450],{"class":86,"line":104},[84,4451,509],{"emptyLinePlaceholder":508},[84,4453,4454],{"class":86,"line":157},[84,4455,4456],{},"# 哪些后缀的文件需要检测是否存在老图床的 URL 并进行迁移？\n",[84,4458,4459],{"class":86,"line":163},[84,4460,4461],{},"file_extension = [\n",[84,4463,4464],{"class":86,"line":260},[84,4465,4466],{},"    '.md',\n",[84,4468,4469],{"class":86,"line":268},[84,4470,4471],{},"    '.yml',\n",[84,4473,4474],{"class":86,"line":279},[84,4475,4476],{},"    '.html'\n",[84,4478,4479],{"class":86,"line":287},[84,4480,1973],{},[84,4482,4483],{"class":86,"line":636},[84,4484,509],{"emptyLinePlaceholder":508},[84,4486,4487],{"class":86,"line":641},[84,4488,4489],{},"pic_urls = []\n",[84,4491,4492],{"class":86,"line":655},[84,4493,509],{"emptyLinePlaceholder":508},[84,4495,4496],{"class":86,"line":661},[84,4497,4498],{},"_files = []\n",[84,4500,4501],{"class":86,"line":667},[84,4502,509],{"emptyLinePlaceholder":508},[84,4504,4505],{"class":86,"line":673},[84,4506,4507],{},"# 用于匹配老图床的正则表达式，这里是按照 lsky pro 的格式编写的\n",[84,4509,4510],{"class":86,"line":679},[84,4511,4512],{},"pattern = r'https://cdn.example.com/\\d{4}/\\d{2}/\\d{2}/[a-z0-9]{13}\\.[a-z]{3,4}'\n",[84,4514,4515],{"class":86,"line":685},[84,4516,509],{"emptyLinePlaceholder":508},[84,4518,4519],{"class":86,"line":691},[84,4520,4521],{},"# 图片的上传部分，需要先从原 url 中下载图片，在上传到新图床中，如果需要的话可以在中途转换为 webp 格式\n",[84,4523,4524],{"class":86,"line":697},[84,4525,4526],{},"def upload(url):\n",[84,4528,4529],{"class":86,"line":708},[84,4530,4531],{},"    \"\"\"\n",[84,4533,4534],{"class":86,"line":714},[84,4535,4536],{},"    此处的返回值应该是新的 url\n",[84,4538,4539],{"class":86,"line":719},[84,4540,4531],{},[84,4542,4543],{"class":86,"line":725},[84,4544,509],{"emptyLinePlaceholder":508},[84,4546,4547],{"class":86,"line":731},[84,4548,4549],{},"# 遍历目标后缀文件名的文件，如果存在老图床的 url，则将 url 加入到 pic_urls 列表中，并将这个文件的文件名（相对路径）添加到 _files 列表中\n",[84,4551,4552],{"class":86,"line":739},[84,4553,4554],{},"for root, dirs, files in os.walk(\".\"):\n",[84,4556,4557],{"class":86,"line":745},[84,4558,4559],{},"    for file in files:\n",[84,4561,4562],{"class":86,"line":762},[84,4563,4564],{},"        if file.endswith(tuple(file_extension)):\n",[84,4566,4567],{"class":86,"line":786},[84,4568,4569],{},"            file_name = os.path.join(root, file)\n",[84,4571,4572],{"class":86,"line":808},[84,4573,4574],{},"            with open(file_name, 'r') as f:\n",[84,4576,4577],{"class":86,"line":814},[84,4578,4579],{},"                content = f.read()\n",[84,4581,4582],{"class":86,"line":823},[84,4583,4584],{},"            urls = re.findall(pattern, content)\n",[84,4586,4587],{"class":86,"line":831},[84,4588,4589],{},"            if urls:\n",[84,4591,4592],{"class":86,"line":837},[84,4593,4594],{},"                pic_urls.extend(urls)\n",[84,4596,4597],{"class":86,"line":842},[84,4598,4599],{},"                _files.append(file_name)\n",[84,4601,4602],{"class":86,"line":860},[84,4603,509],{"emptyLinePlaceholder":508},[84,4605,4606],{"class":86,"line":868},[84,4607,4608],{},"# 先转为集合，再转回列表，进行去重\n",[84,4610,4611],{"class":86,"line":891},[84,4612,4613],{},"pic_urls = list(set(pic_urls))\n",[84,4615,4616],{"class":86,"line":904},[84,4617,4618],{},"print(\"共找到图片：\", len(pic_urls))\n",[84,4620,4621],{"class":86,"line":923},[84,4622,509],{"emptyLinePlaceholder":508},[84,4624,4625],{"class":86,"line":929},[84,4626,4627],{},"url_dict = {}\n",[84,4629,4630],{"class":86,"line":934},[84,4631,509],{"emptyLinePlaceholder":508},[84,4633,4634],{"class":86,"line":943},[84,4635,4636],{},"# 将列表中的图片进行上传，每张图片最多尝试三次上传，如果三次都失败，则保留原连接\n",[84,4638,4639],{"class":86,"line":954},[84,4640,4641],{},"for i,u in enumerate(pci_urls, start=1):\n",[84,4643,4644],{"class":86,"line":967},[84,4645,4646],{},"    for t in range(1,4):\n",[84,4648,4649],{"class":86,"line":975},[84,4650,4651],{},"        try:\n",[84,4653,4654],{"class":86,"line":985},[84,4655,4656],{},"            new_u = upload(u)\n",[84,4658,4659],{"class":86,"line":997},[84,4660,4661],{},"            continue\n",[84,4663,4664],{"class":86,"line":1004},[84,4665,4666],{},"        except:\n",[84,4668,4669],{"class":86,"line":1015},[84,4670,4671],{},"            if t == 3:\n",[84,4673,4674],{"class":86,"line":1023},[84,4675,4676],{},"                new_u = u\n",[84,4678,4679],{"class":86,"line":1036},[84,4680,4681],{},"                print(f\"{u} 无法上传：{e}\")\n",[84,4683,4684],{"class":86,"line":1044},[84,4685,4686],{},"    url_dict[u] = new_u\n",[84,4688,4689],{"class":86,"line":1049},[84,4690,4691],{},"    print(f\"{i} / {len(pic_urls)}\")\n",[84,4693,4694],{"class":86,"line":1061},[84,4695,509],{"emptyLinePlaceholder":508},[84,4697,4698],{"class":86,"line":1073},[84,4699,4700],{},"# 对 _files 列表中的文件一一完成替换\n",[84,4702,4703],{"class":86,"line":1085},[84,4704,4705],{},"for file in _files:\n",[84,4707,4708],{"class":86,"line":1090},[84,4709,4710],{},"    with open(file, 'r') as f:\n",[84,4712,4713],{"class":86,"line":1095},[84,4714,4715],{},"        content = f.read()\n",[84,4717,4718],{"class":86,"line":1100},[84,4719,4720],{},"    for k, v in url_dict.items():\n",[84,4722,4723],{"class":86,"line":1105},[84,4724,4725],{},"        content = content.replace(k, v)\n",[84,4727,4728],{"class":86,"line":4075},[84,4729,4730],{},"    with open(file, 'w') as f:\n",[84,4732,4733],{"class":86,"line":4080},[84,4734,4735],{},"        f.write(content)\n",[84,4737,4738],{"class":86,"line":4097},[84,4739,4740],{},"    print(\"完成替换：\", file)\n",[430,4742,4743],{},"html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sA_wV, html code.shiki .sA_wV{--shiki-default:#032F62;--shiki-dark:#DBEDFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":28,"searchDepth":3,"depth":3,"links":4745},[4746,4747],{"id":3229,"depth":3,"text":3229},{"id":4424,"depth":3,"text":4424},{"title":4749,"date":4750,"path":4751,"tags":4752,"body":4755},"自建图床小记三—— SSL 证书的自动更新与部署","2024-08-14 10:35:18","/2024/08/14/auto-renew-ssl-certificate-and-deploy-to-upyun-with-github-action",[2099,3150,4753,2376,2377,4754,3149],"Github Action","SSL",{"type":13,"value":4756,"toc":5298},[4757,4761,4764,4767,4771,4774,4777,4783,4786,4789,4795,4798,4802,4805,4814,4817,4820,4826,4832,4835,4841,4844,4884,4887,4893,4899,4903,4912,4919,4924,4960,4964,4994,4998,5028,5032,5081,5084,5113,5117,5156,5159,5168,5264,5270,5272,5295],[16,4758,4760],{"id":4759},"为什么要自动更新","为什么要自动更新？",[20,4762,4763],{},"众所周知，为站点开启 https 访问需要获得对应 host 的 ssl 证书，而如果希望证书被访客的浏览器所信任，需要拿到由 Certificate Authority (CA) 签发的 ssl 证书。在前一阵子那波 BAT 等大厂提供的云服务停止发放免费的由 TrustAsia/DigiCert 签发的一年有效期免费 ssl 证书之后，市面上已经没有被广泛信任的 CA 签发的免费的一年有效期的 ssl 证书了，于是不得不用回由 Let's Encrypt/ZeroSSL 等 CA 签发三个月免费证书。",[20,4765,4766],{},"但话又说回来，三个月有效期确实不太够，一年有效期的证书就一年一更，手动申请部署也不麻烦；三个月有效期的证书手动就有点麻烦了——我一般会在证书到期的前 15 天进行更新，防止最后几天自己太忙了没时间管。",[16,4768,4770],{"id":4769},"这套图床架构的自动更新有没有困难","这套图床架构的自动更新有没有困难？",[1679,4772,4773],{"id":4773},"境外",[20,4775,4776],{},"通过 Cloudflare SaaS 接入的域名通过验证后会自动获得由 Cloudflare 提供的由 Google Trust Services 签发的证书，不需要我们操心。",[20,4778,4779],{},[26,4780],{"alt":4781,"src":4782},"SSL Certificate provided by Cloudflare","https://static.031130.xyz/uploads/2024/08/14/831d714565906.webp",[1679,4784,4785],{"id":4785},"境内",[20,4787,4788],{},"咱选用的又拍云 CDN 提供了免费的 Let's Encrypt 证书及其自动续期服务，但需要我们把图床访问域名的 DNS CNAME 解析到他们家。",[20,4790,4791],{},[26,4792],{"alt":4793,"src":4794},"SSL Certificate provided by upyun","https://static.031130.xyz/uploads/2024/08/14/b16f7752ef522.webp",[20,4796,4797],{},"这里有个问题，我们这套图床架构在境外的解析是解析到 Cloudflare 的，不可能通过 Let's Encrypt 的 acme challenge。如果使用 upyun 申请 ssl 证书，则意味着每次更新都要我们手动将境外的 dns 解析记录暂时解析到又拍云，待证书更新成功后再解析回 Cloudflare，非常麻烦。",[16,4799,4801],{"id":4800},"使用-github-action-跑-acmesh-获取-ssl-证书","使用 Github Action 跑 acme.sh 获取 ssl 证书",[20,4803,4804],{},"本着「能使用长期免费稳定服务就使用长期免费稳定服务」的思想，决定使用 Github Action 申请 ssl 证书。",[20,4806,4807,4808,4813],{},"在 Github Action 跑 acme.sh 获取 ssl 证书意味着不能使用 http 文件检验的方式检验域名所有权，需要使用 dns 检验。截至本文写作时间，acme.sh 已经支持了 150+ 个主流的 DNS 解析商（Managed DNS providers）的 api，针对不支持 api 修改 dns 解析记录的，还可以使用 ",[177,4809,4812],{"href":4810,"rel":4811},"https://github.com/acmesh-official/acme.sh/wiki/DNS-alias-mode",[181],"DNS alias 模式","——即将需要申请 ssl 证书的域名先 cname 到一个工具人域名上，将工具人域名通过 NS 解析到 acme.sh 支持的 DNS 解析商，进而实现 CA 对域名所有权的验证。",[1679,4815,4816],{"id":4816},"先在本地跑起来",[20,4818,4819],{},"我采用的是 Cloudflare，直接在个人资料页创建一个具有编辑 DNS 权限的 API 令牌",[20,4821,4822],{},[26,4823],{"alt":4824,"src":4825},"创建令牌","https://static.031130.xyz/uploads/2024/08/14/c0262d4aea708.webp",[20,4827,4828],{},[26,4829],{"alt":4830,"src":4831},"获得令牌","https://static.031130.xyz/uploads/2024/08/14/f30bfc93970bc.webp",[20,4833,4834],{},"随后在自己的域名页面，找到区域 ID 和 账户 ID",[20,4836,4837],{},[26,4838],{"alt":4839,"src":4840},"区域 ID 和 账户 ID","https://static.031130.xyz/uploads/2024/08/14/4c8d4a2019812.webp",[20,4842,4843],{},"在自己的本机安装 acme.sh,设置好 Cloudflare DNS 的几个变量",[37,4845,4847],{"className":1434,"code":4846,"language":1436,"meta":28,"style":28},"export CF_Token=\"\"\nexport CF_Account_ID=\"\"\nexport CF_Zone_ID=\"\"\n",[44,4848,4849,4862,4873],{"__ignoreMap":28},[84,4850,4851,4854,4857,4859],{"class":86,"line":87},[84,4852,4853],{"class":514},"export",[84,4855,4856],{"class":119}," CF_Token",[84,4858,777],{"class":514},[84,4860,4861],{"class":140},"\"\"\n",[84,4863,4864,4866,4869,4871],{"class":86,"line":3},[84,4865,4853],{"class":514},[84,4867,4868],{"class":119}," CF_Account_ID",[84,4870,777],{"class":514},[84,4872,4861],{"class":140},[84,4874,4875,4877,4880,4882],{"class":86,"line":98},[84,4876,4853],{"class":514},[84,4878,4879],{"class":119}," CF_Zone_ID",[84,4881,777],{"class":514},[84,4883,4861],{"class":140},[20,4885,4886],{},"随后可以尝试使用 acme.sh 签发 ssl 证书",[37,4888,4891],{"className":4889,"code":4890,"language":42},[40],"acme.sh --issue --dns dns_cf -d cdn.example.com\n",[44,4892,4890],{"__ignoreMap":28},[20,4894,4895],{},[26,4896],{"alt":4897,"src":4898},"ssl 证书到手","https://static.031130.xyz/uploads/2024/08/14/c78bc5afa3641.webp",[1679,4900,4902],{"id":4901},"上-github-action","上 Github Action",[20,4904,4905,4906,4911],{},"原本是打算直接用 ",[177,4907,4910],{"href":4908,"rel":4909},"https://github.com/Menci/acme",[181],"Menci/acme"," 这个 Action的，可惜遇到了点问题。",[20,4913,4914,4915,4918],{},"在我本地，Cloudflare 相关的 Token 和 ID 并没有被写入到 account.conf，而是被写在 ",[44,4916,4917],{},"cdn.example.com_ecc/cdn.exampe.com.conf","，大概就没办法直接用这个 Action 了，不得不转去手搓。不过好在 Menci/acme 中还是能抄到不少的。",[4920,4921,4923],"h4",{"id":4922},"压缩本地的-ca-文件夹","压缩本地的 ca 文件夹",[37,4925,4927],{"className":1434,"code":4926,"language":1436,"meta":28,"style":28},"cd $HOME/.acme.sh/ && tar cz ca | base64 -w0\n",[44,4928,4929],{"__ignoreMap":28},[84,4930,4931,4934,4937,4940,4943,4946,4949,4952,4954,4957],{"class":86,"line":87},[84,4932,4933],{"class":125},"cd",[84,4935,4936],{"class":119}," $HOME",[84,4938,4939],{"class":140},"/.acme.sh/",[84,4941,4942],{"class":119}," && ",[84,4944,4945],{"class":524},"tar",[84,4947,4948],{"class":140}," cz",[84,4950,4951],{"class":140}," ca",[84,4953,2859],{"class":514},[84,4955,4956],{"class":524}," base64",[84,4958,4959],{"class":125}," -w0\n",[4920,4961,4963],{"id":4962},"安装-acmesh","安装 acme.sh",[37,4965,4969],{"className":4966,"code":4967,"language":4968,"meta":28,"style":28},"language-yaml shiki shiki-themes github-light github-dark","- name: Install acme.sh\n  run: curl https://get.acme.sh | sh\n","yaml",[44,4970,4971,4984],{"__ignoreMap":28},[84,4972,4973,4976,4979,4981],{"class":86,"line":87},[84,4974,4975],{"class":119},"- ",[84,4977,4978],{"class":206},"name",[84,4980,137],{"class":119},[84,4982,4983],{"class":140},"Install acme.sh\n",[84,4985,4986,4989,4991],{"class":86,"line":3},[84,4987,4988],{"class":206},"  run",[84,4990,137],{"class":119},[84,4992,4993],{"class":140},"curl https://get.acme.sh | sh\n",[4920,4995,4997],{"id":4996},"解压-ca-文件夹","解压 ca 文件夹",[37,4999,5001],{"className":4966,"code":5000,"language":4968,"meta":28,"style":28},"- name: Extract account files for acme.sh\n  run: |\n    echo \"${{ secrets.ACME_SH_ACCOUNT_TAR }}\" | base64 -d | tar -C ~/.acme.sh -xz\n",[44,5002,5003,5014,5023],{"__ignoreMap":28},[84,5004,5005,5007,5009,5011],{"class":86,"line":87},[84,5006,4975],{"class":119},[84,5008,4978],{"class":206},[84,5010,137],{"class":119},[84,5012,5013],{"class":140},"Extract account files for acme.sh\n",[84,5015,5016,5018,5020],{"class":86,"line":3},[84,5017,4988],{"class":206},[84,5019,137],{"class":119},[84,5021,5022],{"class":514},"|\n",[84,5024,5025],{"class":86,"line":98},[84,5026,5027],{"class":140},"    echo \"${{ secrets.ACME_SH_ACCOUNT_TAR }}\" | base64 -d | tar -C ~/.acme.sh -xz\n",[4920,5029,5031],{"id":5030},"执行-acmesh-申请证书","执行 acme.sh 申请证书",[37,5033,5035],{"className":4966,"code":5034,"language":4968,"meta":28,"style":28},"- name: Issue Certificate\n  run: |\n    export CF_Token=\"${{ secrets.CF_TOKEN }}\"\n    export CF_Zone_ID=\"${{ secrets.CF_ZONE_ID }}\"\n    export CF_Account_ID=\"${{ secrets.CF_ACCOUNT_ID }}\"\n    mkdir -p output\n    ~/.acme.sh/acme.sh --issue --dns dns_cf --force -d ${{ env.domain }} --fullchain-file output/fullchain.pem --key-file output/key.pem\n",[44,5036,5037,5048,5056,5061,5066,5071,5076],{"__ignoreMap":28},[84,5038,5039,5041,5043,5045],{"class":86,"line":87},[84,5040,4975],{"class":119},[84,5042,4978],{"class":206},[84,5044,137],{"class":119},[84,5046,5047],{"class":140},"Issue Certificate\n",[84,5049,5050,5052,5054],{"class":86,"line":3},[84,5051,4988],{"class":206},[84,5053,137],{"class":119},[84,5055,5022],{"class":514},[84,5057,5058],{"class":86,"line":98},[84,5059,5060],{"class":140},"    export CF_Token=\"${{ secrets.CF_TOKEN }}\"\n",[84,5062,5063],{"class":86,"line":104},[84,5064,5065],{"class":140},"    export CF_Zone_ID=\"${{ secrets.CF_ZONE_ID }}\"\n",[84,5067,5068],{"class":86,"line":157},[84,5069,5070],{"class":140},"    export CF_Account_ID=\"${{ secrets.CF_ACCOUNT_ID }}\"\n",[84,5072,5073],{"class":86,"line":163},[84,5074,5075],{"class":140},"    mkdir -p output\n",[84,5077,5078],{"class":86,"line":260},[84,5079,5080],{"class":140},"    ~/.acme.sh/acme.sh --issue --dns dns_cf --force -d ${{ env.domain }} --fullchain-file output/fullchain.pem --key-file output/key.pem\n",[4920,5082,5083],{"id":5083},"压缩证书",[37,5085,5087],{"className":4966,"code":5086,"language":4968,"meta":28,"style":28},"- name: zip Certificate\n  run: |\n    zip -j output/${{ env.domain }}_$(date +%Y%m%d).zip output/fullchain.pem output/key.pem\n",[44,5088,5089,5100,5108],{"__ignoreMap":28},[84,5090,5091,5093,5095,5097],{"class":86,"line":87},[84,5092,4975],{"class":119},[84,5094,4978],{"class":206},[84,5096,137],{"class":119},[84,5098,5099],{"class":140},"zip Certificate\n",[84,5101,5102,5104,5106],{"class":86,"line":3},[84,5103,4988],{"class":206},[84,5105,137],{"class":119},[84,5107,5022],{"class":514},[84,5109,5110],{"class":86,"line":98},[84,5111,5112],{"class":140},"    zip -j output/${{ env.domain }}_$(date +%Y%m%d).zip output/fullchain.pem output/key.pem\n",[4920,5114,5116],{"id":5115},"通过-tg-bot-发送压缩包给自己","通过 tg bot 发送压缩包给自己",[37,5118,5120],{"className":4966,"code":5119,"language":4968,"meta":28,"style":28},"- name: Push Certificate\n  run: |\n    TG_BOT_TOKEN=\"${{ secrets.TG_BOT_TOKEN }}\"\n    TG_CHAT_ID=\"${{ secrets.TG_CHAT_ID }}\"\n    curl -s -X POST https://api.telegram.org/bot${TG_BOT_TOKEN}/sendDocument -F chat_id=${TG_CHAT_ID} -F document=\"@output/${{ env.domain }}_$(date +%Y%m%d).zip\"\n",[44,5121,5122,5133,5141,5146,5151],{"__ignoreMap":28},[84,5123,5124,5126,5128,5130],{"class":86,"line":87},[84,5125,4975],{"class":119},[84,5127,4978],{"class":206},[84,5129,137],{"class":119},[84,5131,5132],{"class":140},"Push Certificate\n",[84,5134,5135,5137,5139],{"class":86,"line":3},[84,5136,4988],{"class":206},[84,5138,137],{"class":119},[84,5140,5022],{"class":514},[84,5142,5143],{"class":86,"line":98},[84,5144,5145],{"class":140},"    TG_BOT_TOKEN=\"${{ secrets.TG_BOT_TOKEN }}\"\n",[84,5147,5148],{"class":86,"line":104},[84,5149,5150],{"class":140},"    TG_CHAT_ID=\"${{ secrets.TG_CHAT_ID }}\"\n",[84,5152,5153],{"class":86,"line":157},[84,5154,5155],{"class":140},"    curl -s -X POST https://api.telegram.org/bot${TG_BOT_TOKEN}/sendDocument -F chat_id=${TG_CHAT_ID} -F document=\"@output/${{ env.domain }}_$(date +%Y%m%d).zip\"\n",[4920,5157,5158],{"id":5158},"部署到又拍云",[20,5160,5161,5162,5167],{},"这里使用的是 ",[177,5163,5166],{"href":5164,"rel":5165},"https://github.com/Menci/deploy-certificate-to-upyun/",[181],"menci/deploy-certificate-to-upyun","。由于又拍云没有提供上传 ssl 证书的 api，因此只能通过模拟用户登陆的方式实现。",[37,5169,5171],{"className":4966,"code":5170,"language":4968,"meta":28,"style":28},"- name: Deploy To Upyun\n  uses: Menci/deploy-certificate-to-upyun@beta-v2\n  with:\n    subaccount-username: ${{ secrets.UPYUN_SUBACCOUNT_USERNAME }}\n    subaccount-password: ${{ secrets.UPYUN_SUBACCOUNT_PASSWORD }}\n    fullchain-file: output/fullchain.pem\n    key-file: output/key.pem\n    domains: |\n      ${{ env.domain }}\n    delete-unused-certificates: true\n",[44,5172,5173,5184,5194,5201,5211,5221,5231,5241,5250,5255],{"__ignoreMap":28},[84,5174,5175,5177,5179,5181],{"class":86,"line":87},[84,5176,4975],{"class":119},[84,5178,4978],{"class":206},[84,5180,137],{"class":119},[84,5182,5183],{"class":140},"Deploy To Upyun\n",[84,5185,5186,5189,5191],{"class":86,"line":3},[84,5187,5188],{"class":206},"  uses",[84,5190,137],{"class":119},[84,5192,5193],{"class":140},"Menci/deploy-certificate-to-upyun@beta-v2\n",[84,5195,5196,5199],{"class":86,"line":98},[84,5197,5198],{"class":206},"  with",[84,5200,210],{"class":119},[84,5202,5203,5206,5208],{"class":86,"line":104},[84,5204,5205],{"class":206},"    subaccount-username",[84,5207,137],{"class":119},[84,5209,5210],{"class":140},"${{ secrets.UPYUN_SUBACCOUNT_USERNAME }}\n",[84,5212,5213,5216,5218],{"class":86,"line":157},[84,5214,5215],{"class":206},"    subaccount-password",[84,5217,137],{"class":119},[84,5219,5220],{"class":140},"${{ secrets.UPYUN_SUBACCOUNT_PASSWORD }}\n",[84,5222,5223,5226,5228],{"class":86,"line":163},[84,5224,5225],{"class":206},"    fullchain-file",[84,5227,137],{"class":119},[84,5229,5230],{"class":140},"output/fullchain.pem\n",[84,5232,5233,5236,5238],{"class":86,"line":260},[84,5234,5235],{"class":206},"    key-file",[84,5237,137],{"class":119},[84,5239,5240],{"class":140},"output/key.pem\n",[84,5242,5243,5246,5248],{"class":86,"line":268},[84,5244,5245],{"class":206},"    domains",[84,5247,137],{"class":119},[84,5249,5022],{"class":514},[84,5251,5252],{"class":86,"line":279},[84,5253,5254],{"class":140},"      ${{ env.domain }}\n",[84,5256,5257,5260,5262],{"class":86,"line":287},[84,5258,5259],{"class":206},"    delete-unused-certificates",[84,5261,137],{"class":119},[84,5263,257],{"class":125},[20,5265,5266],{},[26,5267],{"alt":5268,"src":5269},"SSL 证书成功部署到又拍云","https://static.031130.xyz/uploads/2024/08/14/222a754d25c97.webp",[16,5271,2065],{"id":2065},[1416,5273,5274,5281,5288],{},[1419,5275,5276],{},[177,5277,5280],{"href":5278,"rel":5279},"https://blog.men.ci/ssl-with-github-actions/",[181],"使用 GitHub Actions 自动申请与部署 ACME SSL 证书",[1419,5282,5283],{},[177,5284,5287],{"href":5285,"rel":5286},"https://shiping.date/82.html",[181],"（续）acme.sh脚本使用新cloudflare api令牌申请证书",[1419,5289,5290],{},[177,5291,5294],{"href":5292,"rel":5293},"https://github.com/acmesh-official/acme.sh",[181],"acmesh-official/acme.sh",[430,5296,5297],{},"html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}",{"title":28,"searchDepth":3,"depth":3,"links":5299},[5300,5301,5305,5309],{"id":4759,"depth":3,"text":4760},{"id":4769,"depth":3,"text":4770,"children":5302},[5303,5304],{"id":4773,"depth":98,"text":4773},{"id":4785,"depth":98,"text":4785},{"id":4800,"depth":3,"text":4801,"children":5306},[5307,5308],{"id":4816,"depth":98,"text":4816},{"id":4901,"depth":98,"text":4902},{"id":2065,"depth":3,"text":2065},{"title":5311,"date":5312,"path":5313,"tags":5314,"body":5316},"自建图床小记二——使用 Workers 为 R2 构建 Restful API","2024-08-13 22:58:26","/2024/08/13/build-restful-api-for-cloudflare-r2-with-cloudflare-workers",[3149,5315,1656,2097],"Cloudflare",{"type":13,"value":5317,"toc":6031},[5318,5322,5325,5329,5335,5339,5345,5347,5352,5356,5359,5362,5369,5375,5378,5385,5387,5392,5396,5399,5402,5408,5412,5417,5432,5437,5441,5444,5448,5461,5467,5469,5474,5478,5481,5489,5493,5496,5812,5815,5829,5832,5836,5839,5844,5848,5851,5854,5923,5926,5933,5936,5939,5998,6000,6028],[16,5319,5321],{"id":5320},"访问-r2-的两种方式","访问 R2 的两种方式",[20,5323,5324],{},"一般来说，想要访问 Cloudflare R2 中的文件，会有两种方式。",[1679,5326,5328],{"id":5327},"一种是在-r2-的设置界面设置自定义域","一种是在 R2 的设置界面设置自定义域",[20,5330,5331],{},[26,5332],{"alt":5333,"src":5334},"设置自定义域","https://static.031130.xyz/uploads/2024/08/13/61fe9ede194af.webp",[1679,5336,5338],{"id":5337},"另一种是通过-cloudflare-workers-进行访问","另一种是通过 Cloudflare Workers 进行访问",[20,5340,5341],{},[26,5342],{"alt":5343,"src":5344},"通过 Cloudflare Workers","https://static.031130.xyz/uploads/2024/08/13/846164273571d.webp",[414,5346],{},[20,5348,5349],{},[1429,5350,5351],{},"那么应该选择哪种？选择 Cloudflare Workers！",[16,5353,5355],{"id":5354},"为什么是-cloudflare-workers","为什么是 Cloudflare Workers？",[20,5357,5358],{},"要回答这个问题比较困难，但可以回答另一个问题——「为什么不设置自定义域实现直接访问？」",[1679,5360,5361],{"id":5361},"自定义域的访问存在限制",[20,5363,5364,5365,5368],{},"设置自定义域的访问方式存在较多的限制，让我们先来复习一下",[177,5366,5367],{"href":3215},"上一篇博客中","提到的 DNS 解析方案 1",[20,5370,5371],{},[26,5372],{"alt":5373,"src":5374},"DNS 解析方案 1","https://static.031130.xyz/uploads/2024/08/13/03d8243b67593.webp",[20,5376,5377],{},"在这里，我们需要将图床访问域名通过 NS 接入 DnsPod 实现境内外的分流，但 R2 所允许设置的自定义域必须是通过 NS 接入 Cloudflare 的，这存在冲突。那如果我们先将自定义域设置为通过 NS 接入 Cloudflare 的工具人域名，再将图床访问域名通过 CNAME 解析到工具人域名会不会有问题呢？恭喜你获得 403 Forbidden。",[20,5379,5380,5381,5384],{},"如果通过",[177,5382,5383],{"href":3215},"上一篇文章","中的 DNS 解析方案 2 来进行 DNS 解析，能不能成功设置为 Cloudflare R2 的自定义域呢？也不行，Cloudflare R2 的自定义域会占用域名的解析，这意味着你无法将图床访问域名解析到用于分流的工具人域名。",[414,5386],{},[20,5388,5389],{},[1429,5390,5391],{},"结论：截至本文写作时间，设置自定义域的方案不适用于 DNS 分流的图床架构。",[1679,5393,5395],{"id":5394},"如何上传文件到-cloudflare-r2","如何上传文件到 Cloudflare R2？",[4920,5397,5398],{"id":5398},"网页端直接上传",[20,5400,5401],{},"最简单的上传方式是直接在 Cloudflare 进行网页上传，但这种方案不适合自动化脚本，也没法接入 Typora",[20,5403,5404],{},[26,5405],{"alt":5406,"src":5407},"直接在网页端进行上传","https://static.031130.xyz/uploads/2024/08/13/b4d1b5b3edfae.webp",[4920,5409,5411],{"id":5410},"使用-amazon-s3-的兼容-api","使用 Amazon S3 的兼容 API",[5413,5414,5416],"h5",{"id":5415},"手动调用-s3-api","手动调用 S3 API",[20,5418,5419,5420,5425,5426,5431],{},"Cloudflare R2 被设计为兼容 Amazon S3 的存储方案，自然兼容 Amazon S3 的上传 API，在 ",[177,5421,5424],{"href":5422,"rel":5423},"https://developers.cloudflare.com/r2/api/s3/api/",[181],"Cloudflare Docs 中有关于 S3 API 的实现情况","记载，大部分接口功能都是实现了的。但。。。但 S3 使用的是 ",[177,5427,5430],{"href":5428,"rel":5429},"https://docs.aws.amazon.com/zh_cn/IAM/latest/UserGuide/create-signed-request.html",[181],"AWS Signature"," 作为鉴权，你不会希望在每个自动化程序中都自己实现一次的。。。",[20,5433,5434],{},[26,5435],{"alt":5436,"src":5436},"https://docs.aws.amazon.com/zh_cn/IAM/latest/UserGuide/images/sigV4-using-auth-header.png",[5413,5438,5440],{"id":5439},"使用-aws-cli-等-sdk","使用 aws-cli 等 SDK",[20,5442,5443],{},"使用 aws-cli 可以自动实现计算 AWS Signature，这是一种可行的方案，但我可能会在别的服务中使用到我的图床，不是所有的服务所处的环境都能够执行 shell 命令，也不是所有的编程语言都有现成的 SDK 可用。",[4920,5445,5447],{"id":5446},"使用-cloudflare-workers-构建-restful-api","使用 Cloudflare Workers 构建 Restful API",[20,5449,5450,5455,5456,1605],{},[177,5451,5454],{"href":5452,"rel":5453},"https://developers.cloudflare.com/r2/api/workers/workers-api-usage/#5-access-your-r2-bucket-from-your-worker",[181],"在 Cloudflare Docs 中明确提出可以使用 Cloudflare Workers 访问 Cloudflare R2 Bucket，","通过 Workers 设置界面的按钮，可以非常方便的将 R2 Bucket 作为一个 R2Object 绑定到 JavaScript 的一个变量中，",[177,5457,5460],{"href":5458,"rel":5459},"https://developers.cloudflare.com/r2/api/workers/workers-api-reference/",[181],"这里有相关的开发文档",[20,5462,5463],{},[26,5464],{"alt":5465,"src":5466},"绑定为变量","https://static.031130.xyz/uploads/2024/08/13/45e58b47f3aeb.webp",[414,5468],{},[20,5470,5471],{},[1429,5472,5473],{},"结论: 从易用性上来看，使用 Cloudflare Workers 构建 Restful API 这种上传文件的方案是最为合适的。",[16,5475,5477],{"id":5476},"使用-cloudflare-workers-构建-restful-api-的方案有没有什么缺点","使用 Cloudflare Workers 构建 Restful API 的方案有没有什么缺点？",[20,5479,5480],{},"有。",[1416,5482,5483,5486],{},[1419,5484,5485],{},"Cloudflare Workers 的每日额度是有限的，在极端的流量下可能会用完（应该不会吧？）",[1419,5487,5488],{},"Cloudflare Workers 的内存限制为 128MB，在上传下载 > 100MB 的文件时可能会出错。有这种体积上传需求的场景建议使用别的上传方案。",[16,5490,5492],{"id":5491},"如何构建","如何构建？",[20,5494,5495],{},"直接贴代码",[37,5497,5499],{"className":493,"code":5498,"language":495,"meta":28,"style":28},"const hasValidHeader = (request, env) => {\n    return request.headers.get('X-Custom-Auth-Key') === env.AUTH_KEY_SECRET;\n};\n\nfunction authorizeRequest(request, env, key) {\n    switch (request.method) {\n        case 'PUT':\n        case 'DELETE':\n            return hasValidHeader(request, env);\n        case 'GET':\n            return true;\n        default:\n            return false;\n    }\n}\n\nexport default {\n    async fetch(request, env) {\n        const url = new URL(request.url);\n        const key = decodeURI(url.pathname.slice(1));\n\n        if (!authorizeRequest(request, env, key)) {\n            return new Response('Forbidden\\n', { status: 403 });\n        }\n\n        switch (request.method) {\n            case 'PUT':\n                const objectExists = await env.MY_BUCKET.get(key);\n\n                if (objectExists !== null) {\n                    if (request.headers.get('Overwrite') !== 'true') {\n                        return new Response('Object Already Exists\\n', { status: 409 });\n                    }\n                }\n\n                await env.MY_BUCKET.put(key, request.body);\n                return new Response(`Put ${key} successfully!\\n`);\n\n            case 'GET':\n                const object = await env.MY_BUCKET.get(key);\n\n                if (object === null) {\n                    return new Response('Object Not Found\\n', { status: 404 });\n                }\n\n                const headers = new Headers();\n                object.writeHttpMetadata(headers);\n                headers.set('etag', object.httpEtag);\n\n                return new Response(object.body, {\n                    headers,\n                });\n            case 'DELETE':\n                await env.MY_BUCKET.delete(key);\n                return new Response('Deleted!\\n');\n\n            default:\n                return new Response('Method Not Allowed\\n', {\n                    status: 405,\n                    headers: {\n                        Allow: 'PUT, GET, DELETE',\n                    },\n                });\n        }\n    },\n};\n",[44,5500,5501,5506,5511,5516,5520,5525,5530,5535,5540,5545,5550,5555,5560,5565,5569,5573,5577,5582,5587,5592,5597,5601,5606,5611,5615,5619,5624,5629,5634,5638,5643,5648,5653,5658,5663,5667,5672,5677,5681,5686,5691,5695,5700,5705,5709,5713,5718,5723,5728,5732,5737,5742,5747,5752,5757,5762,5766,5771,5776,5781,5786,5791,5796,5800,5804,5808],{"__ignoreMap":28},[84,5502,5503],{"class":86,"line":87},[84,5504,5505],{},"const hasValidHeader = (request, env) => {\n",[84,5507,5508],{"class":86,"line":3},[84,5509,5510],{},"    return request.headers.get('X-Custom-Auth-Key') === env.AUTH_KEY_SECRET;\n",[84,5512,5513],{"class":86,"line":98},[84,5514,5515],{},"};\n",[84,5517,5518],{"class":86,"line":104},[84,5519,509],{"emptyLinePlaceholder":508},[84,5521,5522],{"class":86,"line":157},[84,5523,5524],{},"function authorizeRequest(request, env, key) {\n",[84,5526,5527],{"class":86,"line":163},[84,5528,5529],{},"    switch (request.method) {\n",[84,5531,5532],{"class":86,"line":260},[84,5533,5534],{},"        case 'PUT':\n",[84,5536,5537],{"class":86,"line":268},[84,5538,5539],{},"        case 'DELETE':\n",[84,5541,5542],{"class":86,"line":279},[84,5543,5544],{},"            return hasValidHeader(request, env);\n",[84,5546,5547],{"class":86,"line":287},[84,5548,5549],{},"        case 'GET':\n",[84,5551,5552],{"class":86,"line":636},[84,5553,5554],{},"            return true;\n",[84,5556,5557],{"class":86,"line":641},[84,5558,5559],{},"        default:\n",[84,5561,5562],{"class":86,"line":655},[84,5563,5564],{},"            return false;\n",[84,5566,5567],{"class":86,"line":661},[84,5568,2599],{},[84,5570,5571],{"class":86,"line":667},[84,5572,166],{},[84,5574,5575],{"class":86,"line":673},[84,5576,509],{"emptyLinePlaceholder":508},[84,5578,5579],{"class":86,"line":679},[84,5580,5581],{},"export default {\n",[84,5583,5584],{"class":86,"line":685},[84,5585,5586],{},"    async fetch(request, env) {\n",[84,5588,5589],{"class":86,"line":691},[84,5590,5591],{},"        const url = new URL(request.url);\n",[84,5593,5594],{"class":86,"line":697},[84,5595,5596],{},"        const key = decodeURI(url.pathname.slice(1));\n",[84,5598,5599],{"class":86,"line":708},[84,5600,509],{"emptyLinePlaceholder":508},[84,5602,5603],{"class":86,"line":714},[84,5604,5605],{},"        if (!authorizeRequest(request, env, key)) {\n",[84,5607,5608],{"class":86,"line":719},[84,5609,5610],{},"            return new Response('Forbidden\\n', { status: 403 });\n",[84,5612,5613],{"class":86,"line":725},[84,5614,834],{},[84,5616,5617],{"class":86,"line":731},[84,5618,509],{"emptyLinePlaceholder":508},[84,5620,5621],{"class":86,"line":739},[84,5622,5623],{},"        switch (request.method) {\n",[84,5625,5626],{"class":86,"line":745},[84,5627,5628],{},"            case 'PUT':\n",[84,5630,5631],{"class":86,"line":762},[84,5632,5633],{},"                const objectExists = await env.MY_BUCKET.get(key);\n",[84,5635,5636],{"class":86,"line":786},[84,5637,509],{"emptyLinePlaceholder":508},[84,5639,5640],{"class":86,"line":808},[84,5641,5642],{},"                if (objectExists !== null) {\n",[84,5644,5645],{"class":86,"line":814},[84,5646,5647],{},"                    if (request.headers.get('Overwrite') !== 'true') {\n",[84,5649,5650],{"class":86,"line":823},[84,5651,5652],{},"                        return new Response('Object Already Exists\\n', { status: 409 });\n",[84,5654,5655],{"class":86,"line":831},[84,5656,5657],{},"                    }\n",[84,5659,5660],{"class":86,"line":837},[84,5661,5662],{},"                }\n",[84,5664,5665],{"class":86,"line":842},[84,5666,509],{"emptyLinePlaceholder":508},[84,5668,5669],{"class":86,"line":860},[84,5670,5671],{},"                await env.MY_BUCKET.put(key, request.body);\n",[84,5673,5674],{"class":86,"line":868},[84,5675,5676],{},"                return new Response(`Put ${key} successfully!\\n`);\n",[84,5678,5679],{"class":86,"line":891},[84,5680,509],{"emptyLinePlaceholder":508},[84,5682,5683],{"class":86,"line":904},[84,5684,5685],{},"            case 'GET':\n",[84,5687,5688],{"class":86,"line":923},[84,5689,5690],{},"                const object = await env.MY_BUCKET.get(key);\n",[84,5692,5693],{"class":86,"line":929},[84,5694,509],{"emptyLinePlaceholder":508},[84,5696,5697],{"class":86,"line":934},[84,5698,5699],{},"                if (object === null) {\n",[84,5701,5702],{"class":86,"line":943},[84,5703,5704],{},"                    return new Response('Object Not Found\\n', { status: 404 });\n",[84,5706,5707],{"class":86,"line":954},[84,5708,5662],{},[84,5710,5711],{"class":86,"line":967},[84,5712,509],{"emptyLinePlaceholder":508},[84,5714,5715],{"class":86,"line":975},[84,5716,5717],{},"                const headers = new Headers();\n",[84,5719,5720],{"class":86,"line":985},[84,5721,5722],{},"                object.writeHttpMetadata(headers);\n",[84,5724,5725],{"class":86,"line":997},[84,5726,5727],{},"                headers.set('etag', object.httpEtag);\n",[84,5729,5730],{"class":86,"line":1004},[84,5731,509],{"emptyLinePlaceholder":508},[84,5733,5734],{"class":86,"line":1015},[84,5735,5736],{},"                return new Response(object.body, {\n",[84,5738,5739],{"class":86,"line":1023},[84,5740,5741],{},"                    headers,\n",[84,5743,5744],{"class":86,"line":1036},[84,5745,5746],{},"                });\n",[84,5748,5749],{"class":86,"line":1044},[84,5750,5751],{},"            case 'DELETE':\n",[84,5753,5754],{"class":86,"line":1049},[84,5755,5756],{},"                await env.MY_BUCKET.delete(key);\n",[84,5758,5759],{"class":86,"line":1061},[84,5760,5761],{},"                return new Response('Deleted!\\n');\n",[84,5763,5764],{"class":86,"line":1073},[84,5765,509],{"emptyLinePlaceholder":508},[84,5767,5768],{"class":86,"line":1085},[84,5769,5770],{},"            default:\n",[84,5772,5773],{"class":86,"line":1090},[84,5774,5775],{},"                return new Response('Method Not Allowed\\n', {\n",[84,5777,5778],{"class":86,"line":1095},[84,5779,5780],{},"                    status: 405,\n",[84,5782,5783],{"class":86,"line":1100},[84,5784,5785],{},"                    headers: {\n",[84,5787,5788],{"class":86,"line":1105},[84,5789,5790],{},"                        Allow: 'PUT, GET, DELETE',\n",[84,5792,5793],{"class":86,"line":4075},[84,5794,5795],{},"                    },\n",[84,5797,5798],{"class":86,"line":4080},[84,5799,5746],{},[84,5801,5802],{"class":86,"line":4097},[84,5803,834],{},[84,5805,5806],{"class":86,"line":4102},[84,5807,676],{},[84,5809,5810],{"class":86,"line":4107},[84,5811,5515],{},[20,5813,5814],{},"代码的大部分都是基于 Cloudflare Docs 中给出的样例，修改了几个小的优化点",[1416,5816,5817,5820,5826],{},[1419,5818,5819],{},"删除了 ALLOW_LIST 部分代码，默认所有文件都是可以被访问的",[1419,5821,5822,5823],{},"在上传一个文件时，如果目标路径存在同名文件，则不直接覆盖，而是返回 409 的异常 HTTP 相应，如果想要强制覆盖，则需要在 Http Header 中加入 ",[44,5824,5825],{},"Overwrite: true",[1419,5827,5828],{},"解出请求路径时，使用 decodeURI( ) 方法先进行解码，解决文件路径中含有中文时会导致请求失败的问题。",[20,5830,5831],{},"填入代码后，还需要绑定两个变量，一个是 R2 Bucket",[20,5833,5834],{},[26,5835],{"alt":28,"src":5466},[20,5837,5838],{},"另一个是自己的管理密码",[20,5840,5841],{},[26,5842],{"alt":28,"src":5843},"https://static.031130.xyz/uploads/2024/08/14/96da1f62f5fe7.webp",[16,5845,5847],{"id":5846},"如何使用-cloudflare-workers-构建的-restful-api-进行文件操作","如何使用 Cloudflare Workers 构建的 Restful API 进行文件操作？",[1679,5849,5850],{"id":5850},"上传",[20,5852,5853],{},"以 python 为例，上传一个文件 1MB.bin 到 /example/ 目录下，上传的 url 就是文件最终的存在路径。",[37,5855,5857],{"className":2276,"code":5856,"language":2278,"meta":28,"style":28},"import requests\n\nAUTH_KEY_SECRET='1145141919810'\n\nwith open('1MB.bin', ''rb) as f:\n    file_content = f.read()\n    \nrequests.put(\n    'https://r2.example.workers.dev/example/1MB.bin',\n    headers={\n        'X-Custom-Auth-Key': AUTH_KEY_SECRET,\n        'Overwrite': True   # 如果不需要强制覆盖可以删除这一行\n    }\n)\n",[44,5858,5859,5863,5867,5872,5876,5881,5886,5890,5895,5900,5905,5910,5915,5919],{"__ignoreMap":28},[84,5860,5861],{"class":86,"line":87},[84,5862,4447],{},[84,5864,5865],{"class":86,"line":3},[84,5866,509],{"emptyLinePlaceholder":508},[84,5868,5869],{"class":86,"line":98},[84,5870,5871],{},"AUTH_KEY_SECRET='1145141919810'\n",[84,5873,5874],{"class":86,"line":104},[84,5875,509],{"emptyLinePlaceholder":508},[84,5877,5878],{"class":86,"line":157},[84,5879,5880],{},"with open('1MB.bin', ''rb) as f:\n",[84,5882,5883],{"class":86,"line":163},[84,5884,5885],{},"    file_content = f.read()\n",[84,5887,5888],{"class":86,"line":260},[84,5889,4031],{},[84,5891,5892],{"class":86,"line":268},[84,5893,5894],{},"requests.put(\n",[84,5896,5897],{"class":86,"line":279},[84,5898,5899],{},"    'https://r2.example.workers.dev/example/1MB.bin',\n",[84,5901,5902],{"class":86,"line":287},[84,5903,5904],{},"    headers={\n",[84,5906,5907],{"class":86,"line":636},[84,5908,5909],{},"        'X-Custom-Auth-Key': AUTH_KEY_SECRET,\n",[84,5911,5912],{"class":86,"line":641},[84,5913,5914],{},"        'Overwrite': True   # 如果不需要强制覆盖可以删除这一行\n",[84,5916,5917],{"class":86,"line":655},[84,5918,2599],{},[84,5920,5921],{"class":86,"line":661},[84,5922,2035],{},[1679,5924,5925],{"id":5925},"访问",[20,5927,5928,5929,5932],{},"通过浏览器直接访问 ",[44,5930,5931],{},"https://r2.example.workers.dev/example/1MB.bin"," 应该就能访问到",[1679,5934,5935],{"id":5935},"删除",[20,5937,5938],{},"仍然以 python 为例，删除刚才的文件",[37,5940,5942],{"className":2276,"code":5941,"language":2278,"meta":28,"style":28},"import requests\n\nAUTH_KEY_SECRET='1145141919810'\n\nwith open('1MB.bin', ''rb) as f:\n    file_content = f.read()\n    \nrequests.delete(\n    'https://r2.example.workers.dev/example/1MB.bin',\n    headers={\n        'X-Custom-Auth-Key': AUTH_KEY_SECRET\n    }\n)\n",[44,5943,5944,5948,5952,5956,5960,5964,5968,5972,5977,5981,5985,5990,5994],{"__ignoreMap":28},[84,5945,5946],{"class":86,"line":87},[84,5947,4447],{},[84,5949,5950],{"class":86,"line":3},[84,5951,509],{"emptyLinePlaceholder":508},[84,5953,5954],{"class":86,"line":98},[84,5955,5871],{},[84,5957,5958],{"class":86,"line":104},[84,5959,509],{"emptyLinePlaceholder":508},[84,5961,5962],{"class":86,"line":157},[84,5963,5880],{},[84,5965,5966],{"class":86,"line":163},[84,5967,5885],{},[84,5969,5970],{"class":86,"line":260},[84,5971,4031],{},[84,5973,5974],{"class":86,"line":268},[84,5975,5976],{},"requests.delete(\n",[84,5978,5979],{"class":86,"line":279},[84,5980,5899],{},[84,5982,5983],{"class":86,"line":287},[84,5984,5904],{},[84,5986,5987],{"class":86,"line":636},[84,5988,5989],{},"        'X-Custom-Auth-Key': AUTH_KEY_SECRET\n",[84,5991,5992],{"class":86,"line":641},[84,5993,2599],{},[84,5995,5996],{"class":86,"line":655},[84,5997,2035],{},[16,5999,2065],{"id":2065},[1416,6001,6002,6009,6015,6022],{},[1419,6003,6004],{},[177,6005,6008],{"href":6006,"rel":6007},"https://blog.yswtrue.com/yong-cloudflare-de-r2-he-worker-lai-zuo-wen-jian-tuo-guan/",[181],"用 cloudflare 的 R2 和 worker 来做文件托管",[1419,6010,6011],{},[177,6012,6014],{"href":5458,"rel":6013},[181],"Workers API reference",[1419,6016,6017],{},[177,6018,6021],{"href":6019,"rel":6020},"https://developers.cloudflare.com/r2/api/workers/workers-api-usage/",[181],"Use R2 from Workers",[1419,6023,6024],{},[177,6025,6027],{"href":5428,"rel":6026},[181],"创建已签名的 AWS API 请求",[430,6029,6030],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":28,"searchDepth":3,"depth":3,"links":6032},[6033,6037,6041,6042,6043,6048],{"id":5320,"depth":3,"text":5321,"children":6034},[6035,6036],{"id":5327,"depth":98,"text":5328},{"id":5337,"depth":98,"text":5338},{"id":5354,"depth":3,"text":5355,"children":6038},[6039,6040],{"id":5361,"depth":98,"text":5361},{"id":5394,"depth":98,"text":5395},{"id":5476,"depth":3,"text":5477},{"id":5491,"depth":3,"text":5492},{"id":5846,"depth":3,"text":5847,"children":6044},[6045,6046,6047],{"id":5850,"depth":98,"text":5850},{"id":5925,"depth":98,"text":5925},{"id":5935,"depth":98,"text":5935},{"id":2065,"depth":3,"text":2065},127,1761699627613]