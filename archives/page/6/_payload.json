[{"data":1,"prerenderedAt":5353},["ShallowReactive",2],{"randomIndex/archives/page/6/":3,"index-page-6":4,"posts-nums-total":5352},22,[5,1521,1753,2054,2447,2565,2956,3105,3382,4806],{"title":6,"date":7,"path":8,"tags":9,"body":12},"【翻译】使用 PHP 构建简单的 REST API","2023-12-12 13:07:32","/2023/12/12/php-simple-rest-api",[10,11],"翻译","PHP",{"type":13,"value":14,"toc":1499},"minimark",[15,28,32,41,50,53,56,69,72,75,78,86,89,93,96,99,103,106,117,120,126,129,132,140,143,146,149,152,155,194,197,200,206,209,217,221,224,227,230,296,299,302,309,312,315,318,327,330,345,348,351,369,372,584,587,594,597,600,603,646,653,656,659,668,671,680,683,686,689,714,720,723,785,792,799,804,807,873,880,885,888,976,981,984,1049,1054,1057,1060,1063,1417,1420,1423,1451,1454,1463,1466,1469,1472,1475,1478,1495],[16,17,18],"blockquote",{},[19,20,21,22],"p",{},"我这学期有一门偏向前端的 WEB 课程，期末大作业要求使用 PHP 作为后端语言实现一个简单的影评系统，应该是不允许使用框架，使用中文关键字在搜索引擎上搜了一阵子似乎没有可供参考的案例，后来就找到了这篇博客，当中的许多观点与我不谋而合，因此我将这篇博客翻译成中文，原文戳这里: ",[23,24,25],"a",{"href":25,"rel":26},"https://amirkamizi.com/blog/php-simple-rest-api",[27],"nofollow",[29,30,31],"h2",{"id":31},"介绍",[19,33,34,35,40],{},"上周 @rapid_api 发了一个非常好的关于",[23,36,39],{"href":37,"rel":38},"https://twitter.com/Rapid_API/status/1486423046424563714",[27],"使用 nodejs 和 express 创建 REST API"," 的教程帖子。我想要帮助你使用 PHP 开发同样简单的 REST API。",[19,42,43,44,49],{},"首先，如果你不了解 REST API，请务必查看这个 ",[23,45,48],{"href":46,"rel":47},"https://twitter.com/Rapid_API/status/1452932706967461890",[27],"Twitter 帖子","。",[29,51,52],{"id":52},"目标",[19,54,55],{},"在我们开始之前，我想提一句，当我写这篇帖子的时候，我想确保：",[57,58,59,63,66],"ol",{},[60,61,62],"li",{},"我使用单纯的 PHP，不使用框架",[60,64,65],{},"我使用最简单的函数和结构体以便所有人都可以理解并跟上",[60,67,68],{},"我将主体部分分开",[19,70,71],{},"现在让我们开始吧",[29,73,74],{"id":74},"准备",[19,76,77],{},"在我本地的机器上，我创建了一个叫 api 的文件夹于 xampp > htdocs，在里面有一个叫 index.php 的文件",[19,79,80,81],{},"如果你没有 xampp 或者你不知道如何把 php 跑起来，请务必查看",[23,82,85],{"href":83,"rel":84},"https://amirkamizi.com/blog/introduction-to-php",[27],"这篇文章",[19,87,88],{},"现在，如果你尝试访问 localhost/api，你将得到一个空的响应，因为 index.php 文件是空的",[29,90,92],{"id":91},"优雅的-url","优雅的 URL",[19,94,95],{},"项目中，我们需要处理的第一件事是 url",[19,97,98],{},"REST API 的关键特性之一是每一个 url 负责一个资源和一个操作",[100,101,102],"h3",{"id":102},"问题",[19,104,105],{},"这时候如果我创建一个 users.php，我需要访问",[107,108,113],"pre",{"className":109,"code":111,"language":112},[110],"language-text","localhost/api/users.php\n","text",[114,115,111],"code",{"__ignoreMap":116},"",[19,118,119],{},"我需要为每一个 user id 创建一个新的文件",[107,121,124],{"className":122,"code":123,"language":112},[110],"localhost/api/users/1.php\nlocalhost/api/users/2.php\n",[114,125,123],{"__ignoreMap":116},[19,127,128],{},"以此类推。",[19,130,131],{},"这种方案有两个问题",[57,133,134,137],{},[60,135,136],{},"为每个用户创建一个新文件是非常无聊和耗时的",[60,138,139],{},"路由不优雅，每个路径后面都带有 .php",[100,141,142],{"id":142},"解决方案",[19,144,145],{},"让我们解决这个问题。",[19,147,148],{},"正如我所提到的，我不想使用任何框架，并且我想使用最简单的、最让人能够理解的方案",[19,150,151],{},"让我们看看如何解决这个问题",[19,153,154],{},"在 api 文件夹下创建一个叫 .htaccess 的文件，并且将下面的文本复制进去",[107,156,160],{"className":157,"code":158,"language":159,"meta":116,"style":116},"language-htaccess shiki shiki-themes github-light github-dark","RewriteEngine On\nRewriteBase /api\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(.+)$ index.php [QSA,L]\n","htaccess",[114,161,162,170,176,182,188],{"__ignoreMap":116},[163,164,167],"span",{"class":165,"line":166},"line",1,[163,168,169],{},"RewriteEngine On\n",[163,171,173],{"class":165,"line":172},2,[163,174,175],{},"RewriteBase /api\n",[163,177,179],{"class":165,"line":178},3,[163,180,181],{},"RewriteCond %{REQUEST_FILENAME} !-d\n",[163,183,185],{"class":165,"line":184},4,[163,186,187],{},"RewriteCond %{REQUEST_FILENAME} !-f\n",[163,189,191],{"class":165,"line":190},5,[163,192,193],{},"RewriteRule ^(.+)$ index.php [QSA,L]\n",[19,195,196],{},"我们告诉服务器，将所有指向 /api 的请求都转发到 index.php 文件",[19,198,199],{},"现在，所有的 url 都指向 index.php 了，比如下面的 url 都是指向 index.php 的",[107,201,204],{"className":202,"code":203,"language":112},[110],"api/users\napi/users/10\napi/users/5\n",[114,205,203],{"__ignoreMap":116},[19,207,208],{},"现在我们同时解决了这两个问题",[57,210,211,214],{},[60,212,213],{},"所有的 url 都被一个文件处理",[60,215,216],{},"url 都很优雅，结尾处没有 .php",[29,218,220],{"id":219},"uri","URI",[19,222,223],{},"但如何知道用户请求的是哪个 uri 呢？",[19,225,226],{},"很简单，使用 $_SERVER 超全局变量",[19,228,229],{},"让我们来看一些例子",[107,231,235],{"className":232,"code":233,"language":234,"meta":116,"style":116},"language-php shiki shiki-themes github-light github-dark","// url api/users\necho $_SERVER['REQUEST_URI'];\n// /api/users\n\n// url api/users/5\necho $_SERVER['REQUEST_URI'];\n// /api/users/5\n\n// url api\necho $_SERVER['REQUEST_URI'];\n// /api\n","php",[114,236,237,242,247,252,258,263,268,274,279,285,290],{"__ignoreMap":116},[163,238,239],{"class":165,"line":166},[163,240,241],{},"// url api/users\n",[163,243,244],{"class":165,"line":172},[163,245,246],{},"echo $_SERVER['REQUEST_URI'];\n",[163,248,249],{"class":165,"line":178},[163,250,251],{},"// /api/users\n",[163,253,254],{"class":165,"line":184},[163,255,257],{"emptyLinePlaceholder":256},true,"\n",[163,259,260],{"class":165,"line":190},[163,261,262],{},"// url api/users/5\n",[163,264,266],{"class":165,"line":265},6,[163,267,246],{},[163,269,271],{"class":165,"line":270},7,[163,272,273],{},"// /api/users/5\n",[163,275,277],{"class":165,"line":276},8,[163,278,257],{"emptyLinePlaceholder":256},[163,280,282],{"class":165,"line":281},9,[163,283,284],{},"// url api\n",[163,286,288],{"class":165,"line":287},10,[163,289,246],{},[163,291,293],{"class":165,"line":292},11,[163,294,295],{},"// /api\n",[19,297,298],{},"看见了吗？这就是我们所需要的",[19,300,301],{},"现在，使用一个简单的 if 或者 switch 语句，我们就可以处理不同的路径了",[19,303,304,305,49],{},"如果你从来没有用过这些语句，去读",[23,306,85],{"href":307,"rel":308},"https://amirkamizi.com/blog/php-conditionals",[27],[29,310,311],{"id":311},"请求方法",[19,313,314],{},"接下来，我们需要从请求中获取请求的方法，以查看它是GET、POST、PUT、PATCH还是DELETE。",[19,316,317],{},"你可以从 $_SERVER 超全局数组中获取这个信息。",[107,319,321],{"className":232,"code":320,"language":234,"meta":116,"style":116},"$_SERVER['REQUEST_METHOD']\n",[114,322,323],{"__ignoreMap":116},[163,324,325],{"class":165,"line":166},[163,326,320],{},[19,328,329],{},"让我们将这两个值存储在变量中：",[107,331,333],{"className":232,"code":332,"language":234,"meta":116,"style":116},"$uri = $_SERVER['REQUEST_URI'];\n$method = $_SERVER['REQUEST_METHOD'];\n",[114,334,335,340],{"__ignoreMap":116},[163,336,337],{"class":165,"line":166},[163,338,339],{},"$uri = $_SERVER['REQUEST_URI'];\n",[163,341,342],{"class":165,"line":172},[163,343,344],{},"$method = $_SERVER['REQUEST_METHOD'];\n",[19,346,347],{},"我们可以在一个简单的 switch 语句中使用这两个变量来处理不同的请求。",[19,349,350],{},"我们需要判断以下请求",[352,353,354,357,360,363,366],"ul",{},[60,355,356],{},"api/users 的 GET 请求",[60,358,359],{},"api/users/{id} 的 GET 请求",[60,361,362],{},"api/users 的 POST 请求",[60,364,365],{},"api/users/{id} 的 PUT 请求",[60,367,368],{},"api/users/{id} 的 DELETE 请求",[19,370,371],{},"让我们编写针对上述请求的 switch 语句",[107,373,375],{"className":232,"code":374,"language":234,"meta":116,"style":116},"switch ($method | $uri) {\n   /*\n   * Path: GET /api/users\n   * Task: show all the users\n   */\n   case ($method == 'GET' && $uri == '/api/users'):\n       break;\n   /*\n   * Path: GET /api/users/{id}\n   * Task: get one user\n   */\n   case ($method == 'GET' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n       break;\n   /*\n   * Path: POST /api/users\n   * Task: store one user\n   */\n   case ($method == 'POST' && $uri == '/api/users'):\n       break;\n   /*\n   * Path: PUT /api/users/{id}\n   * Task: update one user\n   */\n   case ($method == 'PUT' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n       break;\n   /*\n   * Path: DELETE /api/users/{id}\n   * Task: delete one user\n   */\n   case ($method == 'DELETE' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n       break;\n   /*\n   * Path: ?\n   * Task: this path doesn't match any of the defined paths\n   *      throw an error\n   */\n   default:\n       break;\n}\n",[114,376,377,382,387,392,397,402,407,412,416,421,426,430,436,441,446,452,458,463,469,474,479,485,490,495,501,506,511,517,523,528,534,539,544,550,556,562,567,573,578],{"__ignoreMap":116},[163,378,379],{"class":165,"line":166},[163,380,381],{},"switch ($method | $uri) {\n",[163,383,384],{"class":165,"line":172},[163,385,386],{},"   /*\n",[163,388,389],{"class":165,"line":178},[163,390,391],{},"   * Path: GET /api/users\n",[163,393,394],{"class":165,"line":184},[163,395,396],{},"   * Task: show all the users\n",[163,398,399],{"class":165,"line":190},[163,400,401],{},"   */\n",[163,403,404],{"class":165,"line":265},[163,405,406],{},"   case ($method == 'GET' && $uri == '/api/users'):\n",[163,408,409],{"class":165,"line":270},[163,410,411],{},"       break;\n",[163,413,414],{"class":165,"line":276},[163,415,386],{},[163,417,418],{"class":165,"line":281},[163,419,420],{},"   * Path: GET /api/users/{id}\n",[163,422,423],{"class":165,"line":287},[163,424,425],{},"   * Task: get one user\n",[163,427,428],{"class":165,"line":292},[163,429,401],{},[163,431,433],{"class":165,"line":432},12,[163,434,435],{},"   case ($method == 'GET' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n",[163,437,439],{"class":165,"line":438},13,[163,440,411],{},[163,442,444],{"class":165,"line":443},14,[163,445,386],{},[163,447,449],{"class":165,"line":448},15,[163,450,451],{},"   * Path: POST /api/users\n",[163,453,455],{"class":165,"line":454},16,[163,456,457],{},"   * Task: store one user\n",[163,459,461],{"class":165,"line":460},17,[163,462,401],{},[163,464,466],{"class":165,"line":465},18,[163,467,468],{},"   case ($method == 'POST' && $uri == '/api/users'):\n",[163,470,472],{"class":165,"line":471},19,[163,473,411],{},[163,475,477],{"class":165,"line":476},20,[163,478,386],{},[163,480,482],{"class":165,"line":481},21,[163,483,484],{},"   * Path: PUT /api/users/{id}\n",[163,486,487],{"class":165,"line":3},[163,488,489],{},"   * Task: update one user\n",[163,491,493],{"class":165,"line":492},23,[163,494,401],{},[163,496,498],{"class":165,"line":497},24,[163,499,500],{},"   case ($method == 'PUT' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n",[163,502,504],{"class":165,"line":503},25,[163,505,411],{},[163,507,509],{"class":165,"line":508},26,[163,510,386],{},[163,512,514],{"class":165,"line":513},27,[163,515,516],{},"   * Path: DELETE /api/users/{id}\n",[163,518,520],{"class":165,"line":519},28,[163,521,522],{},"   * Task: delete one user\n",[163,524,526],{"class":165,"line":525},29,[163,527,401],{},[163,529,531],{"class":165,"line":530},30,[163,532,533],{},"   case ($method == 'DELETE' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n",[163,535,537],{"class":165,"line":536},31,[163,538,411],{},[163,540,542],{"class":165,"line":541},32,[163,543,386],{},[163,545,547],{"class":165,"line":546},33,[163,548,549],{},"   * Path: ?\n",[163,551,553],{"class":165,"line":552},34,[163,554,555],{},"   * Task: this path doesn't match any of the defined paths\n",[163,557,559],{"class":165,"line":558},35,[163,560,561],{},"   *      throw an error\n",[163,563,565],{"class":165,"line":564},36,[163,566,401],{},[163,568,570],{"class":165,"line":569},37,[163,571,572],{},"   default:\n",[163,574,576],{"class":165,"line":575},38,[163,577,411],{},[163,579,581],{"class":165,"line":580},39,[163,582,583],{},"}\n",[19,585,586],{},"当我们想要在 switch 语句中使用两个变量，我们可以使用 | 符号",[19,588,589,590,49],{},"如果你想知道 preg_match 是如何工作的，看",[23,591,85],{"href":592,"rel":593},"https://amirkamizi.com/blog/php-regular-expressions",[27],[29,595,596],{"id":596},"数据库",[19,598,599],{},"现在是说说数据。储存数据的最好方法是将数据储存在数据库中。但在这篇教程中，我不想使用数据库。因此，我们使用一个 json 文件当作数据库来保证数据的持久性。",[19,601,602],{},"我的 json 文件看起来长成这个样子：",[107,604,608],{"className":605,"code":606,"language":607,"meta":116,"style":116},"language-json shiki shiki-themes github-light github-dark","{\n   \"1\": \"Pratham\",\n   \"2\": \"Amir\"\n}\n","json",[114,609,610,616,632,642],{"__ignoreMap":116},[163,611,612],{"class":165,"line":166},[163,613,615],{"class":614},"sVt8B","{\n",[163,617,618,622,625,629],{"class":165,"line":172},[163,619,621],{"class":620},"sj4cs","   \"1\"",[163,623,624],{"class":614},": ",[163,626,628],{"class":627},"sZZnC","\"Pratham\"",[163,630,631],{"class":614},",\n",[163,633,634,637,639],{"class":165,"line":178},[163,635,636],{"class":620},"   \"2\"",[163,638,624],{"class":614},[163,640,641],{"class":627},"\"Amir\"\n",[163,643,644],{"class":165,"line":184},[163,645,583],{"class":614},[19,647,648,649],{},"如果你想知道如何使用 json，看",[23,650,85],{"href":651,"rel":652},"https://amirkamizi.com/blog/php-xml-and-json",[27],[19,654,655],{},"我加载 json 数据并将其转换为数组，然后在 php 使用他们。如果我想要更改数据，我将数组转换回 json 并将其重新写入文件。",[19,657,658],{},"要将整个文件作为一个字符串读取并存储在变量中，我使用：",[107,660,662],{"className":232,"code":661,"language":234,"meta":116,"style":116},"file_get_contents($jsonFile);\n",[114,663,664],{"__ignoreMap":116},[163,665,666],{"class":165,"line":166},[163,667,661],{},[19,669,670],{},"而要将json写入文件，我使用：",[107,672,674],{"className":232,"code":673,"language":234,"meta":116,"style":116},"file_put_contents($jsonFile, $data);\n",[114,675,676],{"__ignoreMap":116},[163,677,678],{"class":165,"line":166},[163,679,673],{},[19,681,682],{},"好了，现在我们的数据库处理好了，让我们开始处理所有的路径。",[19,684,685],{},"我使用 Postman 发送请求并查看响应。",[29,687,688],{"id":688},"获取所有用户",[107,690,692],{"className":232,"code":691,"language":234,"meta":116,"style":116},"case ($method == 'GET' && $uri == '/api/users'):\n   header('Content-Type: application/json');\n   echo json_encode($users, JSON_PRETTY_PRINT);\n   break;\n",[114,693,694,699,704,709],{"__ignoreMap":116},[163,695,696],{"class":165,"line":166},[163,697,698],{},"case ($method == 'GET' && $uri == '/api/users'):\n",[163,700,701],{"class":165,"line":172},[163,702,703],{},"   header('Content-Type: application/json');\n",[163,705,706],{"class":165,"line":178},[163,707,708],{},"   echo json_encode($users, JSON_PRETTY_PRINT);\n",[163,710,711],{"class":165,"line":184},[163,712,713],{},"   break;\n",[19,715,716],{},[717,718],"img",{"alt":116,"src":719},"https://static.031130.xyz/uploads/2024/08/12/6577fcdf64a96.webp",[29,721,722],{"id":722},"获取单个用户",[107,724,726],{"className":232,"code":725,"language":234,"meta":116,"style":116},"case ($method == 'GET' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n   header('Content-Type: application/json');\n   // get the id\n   $id = basename($uri);\n   if (!array_key_exists($id, $users)) {\n       http_response_code(404);\n       echo json_encode(['error' => 'user does not exist']);\n       break;\n   }\n   $responseData = [$id => $users[$id]];\n   echo json_encode($responseData, JSON_PRETTY_PRINT);\n   break;\n",[114,727,728,733,737,742,747,752,757,762,766,771,776,781],{"__ignoreMap":116},[163,729,730],{"class":165,"line":166},[163,731,732],{},"case ($method == 'GET' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n",[163,734,735],{"class":165,"line":172},[163,736,703],{},[163,738,739],{"class":165,"line":178},[163,740,741],{},"   // get the id\n",[163,743,744],{"class":165,"line":184},[163,745,746],{},"   $id = basename($uri);\n",[163,748,749],{"class":165,"line":190},[163,750,751],{},"   if (!array_key_exists($id, $users)) {\n",[163,753,754],{"class":165,"line":265},[163,755,756],{},"       http_response_code(404);\n",[163,758,759],{"class":165,"line":270},[163,760,761],{},"       echo json_encode(['error' => 'user does not exist']);\n",[163,763,764],{"class":165,"line":276},[163,765,411],{},[163,767,768],{"class":165,"line":281},[163,769,770],{},"   }\n",[163,772,773],{"class":165,"line":287},[163,774,775],{},"   $responseData = [$id => $users[$id]];\n",[163,777,778],{"class":165,"line":292},[163,779,780],{},"   echo json_encode($responseData, JSON_PRETTY_PRINT);\n",[163,782,783],{"class":165,"line":432},[163,784,713],{},[19,786,787,791],{},[788,789,790],"strong",{},"basename","($uri) 会将 uri 的最后一部分给我。比如一个 api/users/10 这样的路径，它会返回 10.",[19,793,794,795,798],{},"然后我使用 ",[788,796,797],{},"array_key_exists"," 检查是否存在一个 id 为 10 的用户",[19,800,801],{},[717,802],{"alt":116,"src":803},"https://static.031130.xyz/uploads/2024/08/12/6577fd77c3d06.webp",[29,805,806],{"id":806},"添加一个新用户",[107,808,810],{"className":232,"code":809,"language":234,"meta":116,"style":116},"case ($method == 'POST' && $uri == '/api/users'):\n   header('Content-Type: application/json');\n   $requestBody = json_decode(file_get_contents('php://input'), true);\n   $name = $requestBody['name'];\n   if (empty($name)) {\n       http_response_code(404);\n       echo json_encode(['error' => 'Please add name of the user']);\n   }\n   $users[] = $name;\n   $data = json_encode($users, JSON_PRETTY_PRINT);\n   file_put_contents($jsonFile, $data);\n   echo json_encode(['message' => 'user added successfully']);\n   break;\n",[114,811,812,817,821,826,831,836,840,845,849,854,859,864,869],{"__ignoreMap":116},[163,813,814],{"class":165,"line":166},[163,815,816],{},"case ($method == 'POST' && $uri == '/api/users'):\n",[163,818,819],{"class":165,"line":172},[163,820,703],{},[163,822,823],{"class":165,"line":178},[163,824,825],{},"   $requestBody = json_decode(file_get_contents('php://input'), true);\n",[163,827,828],{"class":165,"line":184},[163,829,830],{},"   $name = $requestBody['name'];\n",[163,832,833],{"class":165,"line":190},[163,834,835],{},"   if (empty($name)) {\n",[163,837,838],{"class":165,"line":265},[163,839,756],{},[163,841,842],{"class":165,"line":270},[163,843,844],{},"       echo json_encode(['error' => 'Please add name of the user']);\n",[163,846,847],{"class":165,"line":276},[163,848,770],{},[163,850,851],{"class":165,"line":281},[163,852,853],{},"   $users[] = $name;\n",[163,855,856],{"class":165,"line":287},[163,857,858],{},"   $data = json_encode($users, JSON_PRETTY_PRINT);\n",[163,860,861],{"class":165,"line":292},[163,862,863],{},"   file_put_contents($jsonFile, $data);\n",[163,865,866],{"class":165,"line":432},[163,867,868],{},"   echo json_encode(['message' => 'user added successfully']);\n",[163,870,871],{"class":165,"line":438},[163,872,713],{},[19,874,875,876,879],{},"我使用 ",[788,877,878],{},"file_get_contents('php://input')"," 以获取请求的 body 部分。由于在这个例子中我使用的是 json，我将会解码 json 以便我可以获取到名字。",[19,881,882],{},[717,883],{"alt":116,"src":884},"https://static.031130.xyz/uploads/2024/08/12/6577fdca88f76.webp",[29,886,887],{"id":887},"更新一个用户",[107,889,891],{"className":232,"code":890,"language":234,"meta":116,"style":116},"case ($method == 'PUT' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n   header('Content-Type: application/json');\n   // get the id\n   $id = basename($uri);\n   if (!array_key_exists($id, $users)) {\n       http_response_code(404);\n       echo json_encode(['error' => 'user does not exist']);\n       break;\n   }\n   $requestBody = json_decode(file_get_contents('php://input'), true);\n   $name = $requestBody['name'];\n   if (empty($name)) {\n       http_response_code(404);\n       echo json_encode(['error' => 'Please add name of the user']);\n   }\n   $users[$id] = $name;\n   $data = json_encode($users, JSON_PRETTY_PRINT);\n   file_put_contents($jsonFile, $data);\n   echo json_encode(['message' => 'user updated successfully']);\n   break;\n",[114,892,893,898,902,906,910,914,918,922,926,930,934,938,942,946,950,954,959,963,967,972],{"__ignoreMap":116},[163,894,895],{"class":165,"line":166},[163,896,897],{},"case ($method == 'PUT' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n",[163,899,900],{"class":165,"line":172},[163,901,703],{},[163,903,904],{"class":165,"line":178},[163,905,741],{},[163,907,908],{"class":165,"line":184},[163,909,746],{},[163,911,912],{"class":165,"line":190},[163,913,751],{},[163,915,916],{"class":165,"line":265},[163,917,756],{},[163,919,920],{"class":165,"line":270},[163,921,761],{},[163,923,924],{"class":165,"line":276},[163,925,411],{},[163,927,928],{"class":165,"line":281},[163,929,770],{},[163,931,932],{"class":165,"line":287},[163,933,825],{},[163,935,936],{"class":165,"line":292},[163,937,830],{},[163,939,940],{"class":165,"line":432},[163,941,835],{},[163,943,944],{"class":165,"line":438},[163,945,756],{},[163,947,948],{"class":165,"line":443},[163,949,844],{},[163,951,952],{"class":165,"line":448},[163,953,770],{},[163,955,956],{"class":165,"line":454},[163,957,958],{},"   $users[$id] = $name;\n",[163,960,961],{"class":165,"line":460},[163,962,858],{},[163,964,965],{"class":165,"line":465},[163,966,863],{},[163,968,969],{"class":165,"line":471},[163,970,971],{},"   echo json_encode(['message' => 'user updated successfully']);\n",[163,973,974],{"class":165,"line":476},[163,975,713],{},[19,977,978],{},[717,979],{"alt":116,"src":980},"https://static.031130.xyz/uploads/2024/08/12/6577fdf646402.webp",[29,982,983],{"id":983},"删除一个用户",[107,985,987],{"className":232,"code":986,"language":234,"meta":116,"style":116},"case ($method == 'DELETE' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n   header('Content-Type: application/json');\n   // get the id\n   $id = basename($uri);\n   if (empty($users[$id])) {\n       http_response_code(404);\n       echo json_encode(['error' => 'user does not exist']);\n       break;\n   }\n   unset($users[$id]);\n   $data = json_encode($users, JSON_PRETTY_PRINT);\n   file_put_contents($jsonFile, $data);\n   echo json_encode(['message' => 'user deleted successfully']);\n   break;\n",[114,988,989,994,998,1002,1006,1011,1015,1019,1023,1027,1032,1036,1040,1045],{"__ignoreMap":116},[163,990,991],{"class":165,"line":166},[163,992,993],{},"case ($method == 'DELETE' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n",[163,995,996],{"class":165,"line":172},[163,997,703],{},[163,999,1000],{"class":165,"line":178},[163,1001,741],{},[163,1003,1004],{"class":165,"line":184},[163,1005,746],{},[163,1007,1008],{"class":165,"line":190},[163,1009,1010],{},"   if (empty($users[$id])) {\n",[163,1012,1013],{"class":165,"line":265},[163,1014,756],{},[163,1016,1017],{"class":165,"line":270},[163,1018,761],{},[163,1020,1021],{"class":165,"line":276},[163,1022,411],{},[163,1024,1025],{"class":165,"line":281},[163,1026,770],{},[163,1028,1029],{"class":165,"line":287},[163,1030,1031],{},"   unset($users[$id]);\n",[163,1033,1034],{"class":165,"line":292},[163,1035,858],{},[163,1037,1038],{"class":165,"line":432},[163,1039,863],{},[163,1041,1042],{"class":165,"line":438},[163,1043,1044],{},"   echo json_encode(['message' => 'user deleted successfully']);\n",[163,1046,1047],{"class":165,"line":443},[163,1048,713],{},[19,1050,1051],{},[717,1052],{"alt":116,"src":1053},"https://static.031130.xyz/uploads/2024/08/12/6577fe0c3a95b.webp",[29,1055,1056],{"id":1056},"最终文件",[19,1058,1059],{},"现在我们的 index.php 文件看起来是这样的",[19,1061,1062],{},"在 70 行左右的代码中，我们使用 PHP 创建了一个 RESTful API，很神奇吧？",[107,1064,1066],{"className":232,"code":1065,"language":234,"meta":116,"style":116},"\u003C?php\n$jsonFile = 'users.json';\n$data = file_get_contents($jsonFile);\n$users = json_decode($data, true);\n$uri = $_SERVER['REQUEST_URI'];\n$method = $_SERVER['REQUEST_METHOD'];\nswitch ($method | $uri) {\n   case ($method == 'GET' && $uri == '/api/users'):\n       header('Content-Type: application/json');\n       echo json_encode($users, JSON_PRETTY_PRINT);\n       break;\n   case ($method == 'GET' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n       header('Content-Type: application/json');\n       $id = basename($uri);\n       if (!array_key_exists($id, $users)) {\n           http_response_code(404);\n           echo json_encode(['error' => 'user does not exist']);\n           break;\n       }\n       $responseData = [$id => $users[$id]];\n       echo json_encode($responseData, JSON_PRETTY_PRINT);\n       break;\n   case ($method == 'POST' && $uri == '/api/users'):\n       header('Content-Type: application/json');\n       $requestBody = json_decode(file_get_contents('php://input'), true);\n       $name = $requestBody['name'];\n       if (empty($name)) {\n           http_response_code(404);\n           echo json_encode(['error' => 'Please add name of the user']);\n       }\n       $users[] = $name;\n       $data = json_encode($users, JSON_PRETTY_PRINT);\n       file_put_contents($jsonFile, $data);\n       echo json_encode(['message' => 'user added successfully']);\n       break;\n   case ($method == 'PUT' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n       header('Content-Type: application/json');\n       $id = basename($uri);\n       if (!array_key_exists($id, $users)) {\n           http_response_code(404);\n           echo json_encode(['error' => 'user does not exist']);\n           break;\n       }\n       $requestBody = json_decode(file_get_contents('php://input'), true);\n       $name = $requestBody['name'];\n       if (empty($name)) {\n           http_response_code(404);\n           echo json_encode(['error' => 'Please add name of the user']);\n       }\n       $users[$id] = $name;\n       $data = json_encode($users, JSON_PRETTY_PRINT);\n       file_put_contents($jsonFile, $data);\n       echo json_encode(['message' => 'user updated successfully']);\n       break;\n   case ($method == 'DELETE' && preg_match('/\\/api\\/users\\/[1-9]/', $uri)):\n       header('Content-Type: application/json');\n       $id = basename($uri);\n       if (empty($users[$id])) {\n           http_response_code(404);\n           echo json_encode(['error' => 'user does not exist']);\n           break;\n       }\n       unset($users[$id]);\n       $data = json_encode($users, JSON_PRETTY_PRINT);\n       file_put_contents($jsonFile, $data);\n       echo json_encode(['message' => 'user deleted successfully']);\n       break;\n   default:\n       http_response_code(404);\n       echo json_encode(['error' => \"We cannot find what you're looking for.\"]);\n       break;\n}\n",[114,1067,1068,1073,1078,1083,1088,1092,1096,1100,1104,1109,1114,1118,1122,1126,1131,1136,1141,1146,1151,1156,1161,1166,1170,1174,1178,1183,1188,1193,1197,1202,1206,1211,1216,1221,1226,1230,1234,1238,1242,1246,1251,1256,1261,1266,1271,1276,1281,1286,1291,1296,1302,1307,1312,1318,1323,1328,1333,1338,1344,1349,1354,1359,1364,1370,1375,1380,1386,1391,1396,1401,1407,1412],{"__ignoreMap":116},[163,1069,1070],{"class":165,"line":166},[163,1071,1072],{},"\u003C?php\n",[163,1074,1075],{"class":165,"line":172},[163,1076,1077],{},"$jsonFile = 'users.json';\n",[163,1079,1080],{"class":165,"line":178},[163,1081,1082],{},"$data = file_get_contents($jsonFile);\n",[163,1084,1085],{"class":165,"line":184},[163,1086,1087],{},"$users = json_decode($data, true);\n",[163,1089,1090],{"class":165,"line":190},[163,1091,339],{},[163,1093,1094],{"class":165,"line":265},[163,1095,344],{},[163,1097,1098],{"class":165,"line":270},[163,1099,381],{},[163,1101,1102],{"class":165,"line":276},[163,1103,406],{},[163,1105,1106],{"class":165,"line":281},[163,1107,1108],{},"       header('Content-Type: application/json');\n",[163,1110,1111],{"class":165,"line":287},[163,1112,1113],{},"       echo json_encode($users, JSON_PRETTY_PRINT);\n",[163,1115,1116],{"class":165,"line":292},[163,1117,411],{},[163,1119,1120],{"class":165,"line":432},[163,1121,435],{},[163,1123,1124],{"class":165,"line":438},[163,1125,1108],{},[163,1127,1128],{"class":165,"line":443},[163,1129,1130],{},"       $id = basename($uri);\n",[163,1132,1133],{"class":165,"line":448},[163,1134,1135],{},"       if (!array_key_exists($id, $users)) {\n",[163,1137,1138],{"class":165,"line":454},[163,1139,1140],{},"           http_response_code(404);\n",[163,1142,1143],{"class":165,"line":460},[163,1144,1145],{},"           echo json_encode(['error' => 'user does not exist']);\n",[163,1147,1148],{"class":165,"line":465},[163,1149,1150],{},"           break;\n",[163,1152,1153],{"class":165,"line":471},[163,1154,1155],{},"       }\n",[163,1157,1158],{"class":165,"line":476},[163,1159,1160],{},"       $responseData = [$id => $users[$id]];\n",[163,1162,1163],{"class":165,"line":481},[163,1164,1165],{},"       echo json_encode($responseData, JSON_PRETTY_PRINT);\n",[163,1167,1168],{"class":165,"line":3},[163,1169,411],{},[163,1171,1172],{"class":165,"line":492},[163,1173,468],{},[163,1175,1176],{"class":165,"line":497},[163,1177,1108],{},[163,1179,1180],{"class":165,"line":503},[163,1181,1182],{},"       $requestBody = json_decode(file_get_contents('php://input'), true);\n",[163,1184,1185],{"class":165,"line":508},[163,1186,1187],{},"       $name = $requestBody['name'];\n",[163,1189,1190],{"class":165,"line":513},[163,1191,1192],{},"       if (empty($name)) {\n",[163,1194,1195],{"class":165,"line":519},[163,1196,1140],{},[163,1198,1199],{"class":165,"line":525},[163,1200,1201],{},"           echo json_encode(['error' => 'Please add name of the user']);\n",[163,1203,1204],{"class":165,"line":530},[163,1205,1155],{},[163,1207,1208],{"class":165,"line":536},[163,1209,1210],{},"       $users[] = $name;\n",[163,1212,1213],{"class":165,"line":541},[163,1214,1215],{},"       $data = json_encode($users, JSON_PRETTY_PRINT);\n",[163,1217,1218],{"class":165,"line":546},[163,1219,1220],{},"       file_put_contents($jsonFile, $data);\n",[163,1222,1223],{"class":165,"line":552},[163,1224,1225],{},"       echo json_encode(['message' => 'user added successfully']);\n",[163,1227,1228],{"class":165,"line":558},[163,1229,411],{},[163,1231,1232],{"class":165,"line":564},[163,1233,500],{},[163,1235,1236],{"class":165,"line":569},[163,1237,1108],{},[163,1239,1240],{"class":165,"line":575},[163,1241,1130],{},[163,1243,1244],{"class":165,"line":580},[163,1245,1135],{},[163,1247,1249],{"class":165,"line":1248},40,[163,1250,1140],{},[163,1252,1254],{"class":165,"line":1253},41,[163,1255,1145],{},[163,1257,1259],{"class":165,"line":1258},42,[163,1260,1150],{},[163,1262,1264],{"class":165,"line":1263},43,[163,1265,1155],{},[163,1267,1269],{"class":165,"line":1268},44,[163,1270,1182],{},[163,1272,1274],{"class":165,"line":1273},45,[163,1275,1187],{},[163,1277,1279],{"class":165,"line":1278},46,[163,1280,1192],{},[163,1282,1284],{"class":165,"line":1283},47,[163,1285,1140],{},[163,1287,1289],{"class":165,"line":1288},48,[163,1290,1201],{},[163,1292,1294],{"class":165,"line":1293},49,[163,1295,1155],{},[163,1297,1299],{"class":165,"line":1298},50,[163,1300,1301],{},"       $users[$id] = $name;\n",[163,1303,1305],{"class":165,"line":1304},51,[163,1306,1215],{},[163,1308,1310],{"class":165,"line":1309},52,[163,1311,1220],{},[163,1313,1315],{"class":165,"line":1314},53,[163,1316,1317],{},"       echo json_encode(['message' => 'user updated successfully']);\n",[163,1319,1321],{"class":165,"line":1320},54,[163,1322,411],{},[163,1324,1326],{"class":165,"line":1325},55,[163,1327,533],{},[163,1329,1331],{"class":165,"line":1330},56,[163,1332,1108],{},[163,1334,1336],{"class":165,"line":1335},57,[163,1337,1130],{},[163,1339,1341],{"class":165,"line":1340},58,[163,1342,1343],{},"       if (empty($users[$id])) {\n",[163,1345,1347],{"class":165,"line":1346},59,[163,1348,1140],{},[163,1350,1352],{"class":165,"line":1351},60,[163,1353,1145],{},[163,1355,1357],{"class":165,"line":1356},61,[163,1358,1150],{},[163,1360,1362],{"class":165,"line":1361},62,[163,1363,1155],{},[163,1365,1367],{"class":165,"line":1366},63,[163,1368,1369],{},"       unset($users[$id]);\n",[163,1371,1373],{"class":165,"line":1372},64,[163,1374,1215],{},[163,1376,1378],{"class":165,"line":1377},65,[163,1379,1220],{},[163,1381,1383],{"class":165,"line":1382},66,[163,1384,1385],{},"       echo json_encode(['message' => 'user deleted successfully']);\n",[163,1387,1389],{"class":165,"line":1388},67,[163,1390,411],{},[163,1392,1394],{"class":165,"line":1393},68,[163,1395,572],{},[163,1397,1399],{"class":165,"line":1398},69,[163,1400,756],{},[163,1402,1404],{"class":165,"line":1403},70,[163,1405,1406],{},"       echo json_encode(['error' => \"We cannot find what you're looking for.\"]);\n",[163,1408,1410],{"class":165,"line":1409},71,[163,1411,411],{},[163,1413,1415],{"class":165,"line":1414},72,[163,1416,583],{},[29,1418,1419],{"id":1419},"额外内容",[19,1421,1422],{},"在这种情况下，我不希望删除我的所有用户，所以我加了一个新的语句，如果只剩下最后一个用户，它将不会被删除，像这样",[107,1424,1426],{"className":232,"code":1425,"language":234,"meta":116,"style":116},"if (sizeof($users) == 1){\n   http_response_code(404);\n   echo json_encode(['error' => 'there is only one user left. you cannot delete it!']);\n   break;\n}\n",[114,1427,1428,1433,1438,1443,1447],{"__ignoreMap":116},[163,1429,1430],{"class":165,"line":166},[163,1431,1432],{},"if (sizeof($users) == 1){\n",[163,1434,1435],{"class":165,"line":172},[163,1436,1437],{},"   http_response_code(404);\n",[163,1439,1440],{"class":165,"line":178},[163,1441,1442],{},"   echo json_encode(['error' => 'there is only one user left. you cannot delete it!']);\n",[163,1444,1445],{"class":165,"line":184},[163,1446,713],{},[163,1448,1449],{"class":165,"line":190},[163,1450,583],{},[29,1452,1453],{"id":1453},"源码",[19,1455,1456,1457,1462],{},"你可以在",[23,1458,1461],{"href":1459,"rel":1460},"https://github.com/amirkamizi/php-simple-restful-api",[27],"原作者的 github"," 上看到完整注释的源代码以及 post man 集合",[29,1464,1465],{"id":1465},"总结",[19,1467,1468],{},"现在你知道如何在 PHP 中创建一个简单的 RESTful API。",[19,1470,1471],{},"我推荐你打开一个 PHP 文件并复习所有的这些我们进行的步骤，并且像本文一样添加一些额外的资源",[19,1473,1474],{},"如果你有任何的建议、问题或者观点，请联系文章原作者，他期待着听到你的声音。",[29,1476,1477],{"id":1477},"要点",[352,1479,1480,1483,1486,1489,1492],{},[60,1481,1482],{},"不使用框架，用 PHP 创建一个 RESTful API",[60,1484,1485],{},"在 PHP 中使用优雅的 URL",[60,1487,1488],{},"处理请求的 body",[60,1490,1491],{},"使用 Json 文件作为你的数据库",[60,1493,1494],{},"使用多个变量作为 switch 的关键词",[1496,1497,1498],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}",{"title":116,"searchDepth":172,"depth":172,"links":1500},[1501,1502,1503,1504,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520],{"id":31,"depth":172,"text":31},{"id":52,"depth":172,"text":52},{"id":74,"depth":172,"text":74},{"id":91,"depth":172,"text":92,"children":1505},[1506,1507],{"id":102,"depth":178,"text":102},{"id":142,"depth":178,"text":142},{"id":219,"depth":172,"text":220},{"id":311,"depth":172,"text":311},{"id":596,"depth":172,"text":596},{"id":688,"depth":172,"text":688},{"id":722,"depth":172,"text":722},{"id":806,"depth":172,"text":806},{"id":887,"depth":172,"text":887},{"id":983,"depth":172,"text":983},{"id":1056,"depth":172,"text":1056},{"id":1419,"depth":172,"text":1419},{"id":1453,"depth":172,"text":1453},{"id":1465,"depth":172,"text":1465},{"id":1477,"depth":172,"text":1477},{"title":1522,"date":1523,"path":1524,"tags":1525,"body":1529},"在 Hexo Fluid 主题中使用霞鹜文楷","2023-11-28 00:16:23","/2023/11/28/use-lxgw-wenkai-in-hexo-fluid",[1526,1527,1528],"Hexo","CSS","Web",{"type":13,"value":1530,"toc":1751},[1531,1534,1540,1548,1567,1576,1613,1625,1628,1654,1657,1670,1676,1685,1692,1730,1733,1748],[19,1532,1533],{},"我的博客换到 fluid 主题已经有两年了，期间一直有为博客更换字体的想法，但之前没有前端开发的相关知识支撑我换字体的需求。不过现在，我已经有了一些 Vue.js 的开发经验，相信能支撑我完成这个目标。",[19,1535,1536],{},[717,1537],{"alt":1538,"src":1539},"最终成品","https://static.031130.xyz/uploads/2024/08/12/6564d0f926e58.webp",[19,1541,1542,1543,49],{},"我在谷歌搜索到了这篇文章——",[23,1544,1547],{"href":1545,"rel":1546},"https://penghh.fun/2023/05/07/2023-5-7-hexo_blog_font/",[27],"《Hexo博客Fluid主题，字体全局更改为霞鹜文楷体》",[19,1549,1550,1551,1554,1555,1558,1559,1562,1563,1566],{},"文章中直接修改了 ",[114,1552,1553],{},"themes/fluid/layout/_partial/head.ejs"," 让文章生成时在 html 的 head 标签中引入 lxgw-wenkai-screen-webfont 的 css 文件，并使用自定义 css 方案。但这种方案我不喜欢，我的 fluid 主题是通过 npm 安装 hexo-theme-fluid 的方式引入的，这意味着我不能直接编辑 ",[114,1556,1557],{},"themes/fluid"," 下的文件，包括文章中需要编辑的 ",[114,1560,1561],{},"head.ejs"," 和 ",[114,1564,1565],{},"_config.yml"," 。",[19,1568,1569,1570,1575],{},"我翻阅了 ",[23,1571,1574],{"href":1572,"rel":1573},"https://github.com/chawyehsu/lxgw-wenkai-webfont",[27],"lxgw-wenkai-webfont"," 的 README，找到了使用 cdn 引入的方式。我们需要在 html 的 head 标签中加上下面这段:",[107,1577,1581],{"className":1578,"code":1579,"language":1580,"meta":116,"style":116},"language-html shiki shiki-themes github-light github-dark","\u003Clink rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/lxgw-wenkai-screen-webfont@1.1.0/style.css\" />\n","html",[114,1582,1583],{"__ignoreMap":116},[163,1584,1585,1588,1592,1596,1599,1602,1605,1607,1610],{"class":165,"line":166},[163,1586,1587],{"class":614},"\u003C",[163,1589,1591],{"class":1590},"s9eBZ","link",[163,1593,1595],{"class":1594},"sScJk"," rel",[163,1597,1598],{"class":614},"=",[163,1600,1601],{"class":627},"\"stylesheet\"",[163,1603,1604],{"class":1594}," href",[163,1606,1598],{"class":614},[163,1608,1609],{"class":627},"\"https://cdn.jsdelivr.net/npm/lxgw-wenkai-screen-webfont@1.1.0/style.css\"",[163,1611,1612],{"class":614}," />\n",[19,1614,1615],{},[1616,1617,1618,1619,1624],"del",{},"但我注意到我想要的 lxgw-wenkai-screen-webfont 在 ",[23,1620,1623],{"href":1621,"rel":1622},"https://staticfile.org/",[27],"staticfile.org"," 上也有 cdn 提供，且该 cdn 有海外节点，是不错的选择，所以我要通过下面这段引入:",[19,1626,1627],{},"staticfile 已经因为供应链投毒被各 adblock 插件屏蔽，已改用 npmmirror",[107,1629,1631],{"className":1578,"code":1630,"language":1580,"meta":116,"style":116},"\u003Clink rel=\"stylesheet\" href=\"https://registry.npmmirror.com/lxgw-wenkai-screen-web/latest/files/style.min.css\" />\n",[114,1632,1633],{"__ignoreMap":116},[163,1634,1635,1637,1639,1641,1643,1645,1647,1649,1652],{"class":165,"line":166},[163,1636,1587],{"class":614},[163,1638,1591],{"class":1590},[163,1640,1595],{"class":1594},[163,1642,1598],{"class":614},[163,1644,1601],{"class":627},[163,1646,1604],{"class":1594},[163,1648,1598],{"class":614},[163,1650,1651],{"class":627},"\"https://registry.npmmirror.com/lxgw-wenkai-screen-web/latest/files/style.min.css\"",[163,1653,1612],{"class":614},[19,1655,1656],{},"但要如何引入呢？",[19,1658,1659,1660,1665,1666,1669],{},"在 hexo 的",[23,1661,1664],{"href":1662,"rel":1663},"https://hexo.io/docs/plugins.html",[27],"官方文档","中，我找到了一个方案。可以在博客的 workdir 下创建一个 ",[114,1667,1668],{},"scripts"," 文件夹，在当中放入需要执行的 js 脚本。",[19,1671,1672],{},[717,1673],{"alt":1674,"src":1675},"hexo 文档","https://static.031130.xyz/uploads/2024/08/12/6564cea5c71ca.webp",[19,1677,1678,1679,1684],{},"在这篇名为",[23,1680,1683],{"href":1681,"rel":1682},"https://www.zywvvd.com/notes/hexo/theme/fluid/fluid-add-umami/fluid-add-umami/",[27],"《Fluid -23- 添加 Umami 统计》"," 的文章里，我找到了在 hexo 生成静态文件时直接注入的方式。",[19,1686,1687,1688,1691],{},"在 ",[114,1689,1690],{},"scripts/font.js"," 中写入:",[107,1693,1697],{"className":1694,"code":1695,"language":1696,"meta":116,"style":116},"language-javascript shiki shiki-themes github-light github-dark","hexo.extend.injector.register('head_end',\n'\u003Clink rel=\"stylesheet\" href=\"https://registry.npmmirror.com/lxgw-wenkai-screen-web/latest/files/style.min.css\" />',\n'default');\n","javascript",[114,1698,1699,1715,1722],{"__ignoreMap":116},[163,1700,1701,1704,1707,1710,1713],{"class":165,"line":166},[163,1702,1703],{"class":614},"hexo.extend.injector.",[163,1705,1706],{"class":1594},"register",[163,1708,1709],{"class":614},"(",[163,1711,1712],{"class":627},"'head_end'",[163,1714,631],{"class":614},[163,1716,1717,1720],{"class":165,"line":172},[163,1718,1719],{"class":627},"'\u003Clink rel=\"stylesheet\" href=\"https://registry.npmmirror.com/lxgw-wenkai-screen-web/latest/files/style.min.css\" />'",[163,1721,631],{"class":614},[163,1723,1724,1727],{"class":165,"line":178},[163,1725,1726],{"class":627},"'default'",[163,1728,1729],{"class":614},");\n",[19,1731,1732],{},"这样一来，字体文件的 css 便被我们成功引入了，我们还需要指定页面使用霞鹜文楷作为默认字体。",[19,1734,1735,1736,1739,1740,1743,1744,1747],{},"在 fluid 主题的配置文件 ",[114,1737,1738],{},"_config.fluid.yml"," 中，有一个名为 ",[114,1741,1742],{},"font-family"," 的配置项，直接写上 ",[114,1745,1746],{},"font-family: \"LXGW Wenkai Screen\""," 便可大功告成。",[1496,1749,1750],{},"html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":116,"searchDepth":172,"depth":172,"links":1752},[],{"title":1754,"date":1755,"path":1756,"tags":1757,"body":1759},"【翻译】GLWTPL——祝你好运开源许可证","2023-11-12 01:09:09","/2023/11/12/a-introduce-of-glwtpl",[1758,10],"Fun",{"type":13,"value":1760,"toc":2049},[1761,1770,1773,1779,1788,1791,1797,1806,1809,1826,1829,2020,2025,2028,2031,2034,2040,2043],[16,1762,1763],{},[19,1764,1765,1766],{},"说实话，当我第一次看见 GLWTPL( Good Luck With That Public License ) 的时候，我差点把嘴里的饭给喷出来了，这是一个非常有意思的开源许可证。原文请直接戳原仓库 -> ",[23,1767,1768],{"href":1768,"rel":1769},"https://github.com/me-shaon/GLWTPL",[27],[19,1771,1772],{},"如果你对你的代码有这样的感觉:",[107,1774,1777],{"className":1775,"code":1776,"language":112},[110],"当我写下这段代码的时候，只有上帝和我知道我在写什么。\n现在只有上帝知道了。\n",[114,1778,1776],{"__ignoreMap":116},[19,1780,1781,1782,1787],{},"那不如来考虑一下将这份",[23,1783,1786],{"href":1784,"rel":1785},"https://github.com/me-shaon/GLWTPL/blob/master/LICENSE",[27],"开源许可证","添加到你的项目中！",[19,1789,1790],{},"并且，祝你未来的自己、人类同胞、外星人或人工智能机器人（可以编码并会毁灭人类）——实际上是任何敢于参与你的项目的人好运。",[19,1792,1793],{},[717,1794],{"alt":1795,"src":1796},"good-luck.gif","https://static.031130.xyz/uploads/2024/08/12/654fb6e4581bf.gif",[19,1798,1799,1800,1805],{},"当然，它还有一个",[23,1801,1804],{"href":1802,"rel":1803},"https://github.com/me-shaon/GLWTPL/blob/master/NSFW_LICENSE",[27],"脏话版本","。干杯！",[29,1807,1808],{"id":1808},"可能的使用场景",[352,1810,1811,1814,1817,1820,1823],{},[60,1812,1813],{},"你写了一些你并不为此自豪的代码，但你想要将它开源。",[60,1815,1816],{},"你想要将你写的代码“放生”，但不想为此负任何责任。",[60,1818,1819],{},"“无论如何我都已经写完了”，并且你没有时间/意图对你的代码进行修复、修改或改进。",[60,1821,1822],{},"想要将自己参加的黑客马拉松/代码竞赛的代码打造成一个爆火的仓库？该使用什么开源许可证？这就是为你量身打造的开源许可证！",[60,1824,1825],{},"你的大学课设或科研工作与这份许可证是天作之合。",[29,1827,1828],{"id":1828},"一些翻译版本",[352,1830,1831,1838,1845,1852,1859,1866,1873,1880,1887,1894,1901,1908,1915,1922,1929,1936,1943,1950,1957,1964,1971,1978,1985,1992,1999,2006,2013],{},[60,1832,1833],{},[23,1834,1837],{"href":1835,"rel":1836},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_al-AL",[27],"Albanian - Shqip",[60,1839,1840],{},[23,1841,1844],{"href":1842,"rel":1843},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_ar-AR",[27],"Arabic - العربية",[60,1846,1847],{},[23,1848,1851],{"href":1849,"rel":1850},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_bn-BN",[27],"Bangla - বাংলা",[60,1853,1854],{},[23,1855,1858],{"href":1856,"rel":1857},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_zh-HK",[27],"Cantonese - 廣東話",[60,1860,1861],{},[23,1862,1865],{"href":1863,"rel":1864},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_cat-CAT",[27],"Catalan - Català",[60,1867,1868],{},[23,1869,1872],{"href":1870,"rel":1871},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_hr-HR",[27],"Croatian - Hrvatski",[60,1874,1875],{},[23,1876,1879],{"href":1877,"rel":1878},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_da-DK",[27],"Danish - Dansk",[60,1881,1882],{},[23,1883,1886],{"href":1884,"rel":1885},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_nl-NL",[27],"Dutch - Nederlands",[60,1888,1889],{},[23,1890,1893],{"href":1891,"rel":1892},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_fr-FR",[27],"French - Français",[60,1895,1896],{},[23,1897,1900],{"href":1898,"rel":1899},"https://github.com/me-shaon/GLWTPL/blob/master/translations/NSFW_LICENSE_gl-GL",[27],"Galician - Galego",[60,1902,1903],{},[23,1904,1907],{"href":1905,"rel":1906},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_ka-GE",[27],"Georgian - ქართული",[60,1909,1910],{},[23,1911,1914],{"href":1912,"rel":1913},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_de-DE",[27],"German - Deutsch",[60,1916,1917],{},[23,1918,1921],{"href":1919,"rel":1920},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_gr-GR",[27],"Greek - Ελληνικά",[60,1923,1924],{},[23,1925,1928],{"href":1926,"rel":1927},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_he-HE",[27],"Hebrew - עברית",[60,1930,1931],{},[23,1932,1935],{"href":1933,"rel":1934},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_id-ID",[27],"Indonesian - Bahasa Indonesia",[60,1937,1938],{},[23,1939,1942],{"href":1940,"rel":1941},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_it-IT",[27],"Italian - Italiano",[60,1944,1945],{},[23,1946,1949],{"href":1947,"rel":1948},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_ja-JP",[27],"Japanese - 日本語",[60,1951,1952],{},[23,1953,1956],{"href":1954,"rel":1955},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_ko-KR",[27],"Korea - 한국어",[60,1958,1959],{},[23,1960,1963],{"href":1961,"rel":1962},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_lv-LV",[27],"Latvian - Latviski",[60,1965,1966],{},[23,1967,1970],{"href":1968,"rel":1969},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_pt-BR",[27],"Portuguese - Português (BR)",[60,1972,1973],{},[23,1974,1977],{"href":1975,"rel":1976},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_ru-RU",[27],"Russian - Русский",[60,1979,1980],{},[23,1981,1984],{"href":1982,"rel":1983},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_zh-CN",[27],"Simplified Chinese - 简体中文",[60,1986,1987],{},[23,1988,1991],{"href":1989,"rel":1990},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_es-ES",[27],"Spanish - Español",[60,1993,1994],{},[23,1995,1998],{"href":1996,"rel":1997},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_sv-SE",[27],"Swedish - Svenska",[60,2000,2001],{},[23,2002,2005],{"href":2003,"rel":2004},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_zh-TW",[27],"Traditional Chinese - 正體中文",[60,2007,2008],{},[23,2009,2012],{"href":2010,"rel":2011},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_tr-TR",[27],"Turkish - Türkçe",[60,2014,2015],{},[23,2016,2019],{"href":2017,"rel":2018},"https://github.com/me-shaon/GLWTPL/blob/master/translations/LICENSE_vn-VN",[27],"Vietnamese - Tiếng Việt",[16,2021,2022],{},[19,2023,2024],{},"本译文翻译于 2023 年 11 月 12 日，日后大概率也不会对本文进行任何改进，故也采用 GLWTPL 向所有人授权。",[2026,2027],"hr",{},[29,2029,2030],{"id":2030},"附",[19,2032,2033],{},"此协议的英文原版：",[107,2035,2038],{"className":2036,"code":2037,"language":112},[110],"               GLWT(Good Luck With That) Public License\n                 Copyright (c) Everyone, except Author\n\nEveryone is permitted to copy, distribute, modify, merge, sell, publish,\nsublicense or whatever they want with this software but at their OWN RISK.\n\n                            Preamble\n\nThe author has absolutely no clue what the code in this project does.\nIt might just work or not, there is no third option.\n\n\n                GOOD LUCK WITH THAT PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION, AND MODIFICATION\n\n  0. You just DO WHATEVER YOU WANT TO as long as you NEVER LEAVE A\nTRACE TO TRACK THE AUTHOR of the original product to blame for or hold\nresponsible.\n\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\nGood luck and Godspeed.\n",[114,2039,2037],{"__ignoreMap":116},[19,2041,2042],{},"此协议在 Github 上的中文翻译版本：",[107,2044,2047],{"className":2045,"code":2046,"language":112},[110],"GLWT（Good Luck With That，祝你好运）公共许可证\n版权所有© 每个人，除了作者\n\n任何人都被允许复制、分发、修改、合并、销售、出版、再授权或\n任何其它操作，但风险自负。\n\n作者对这个项目中的代码一无所知。\n代码处于可用或不可用状态，没有第三种情况。\n\n\n                祝你好运公共许可证\n            复制、分发和修改的条款和条件\n\n0 ：在不导致作者被指责或承担责任的情况下，你可以做任何你想\n要做的事情。\n\n无论是在合同行为、侵权行为或其它因使用本软件产生的情形，作\n者不对任何索赔、损害承担责任。\n\n祖宗保佑。\n",[114,2048,2046],{"__ignoreMap":116},{"title":116,"searchDepth":172,"depth":172,"links":2050},[2051,2052,2053],{"id":1808,"depth":172,"text":1808},{"id":1828,"depth":172,"text":1828},{"id":2030,"depth":172,"text":2030},{"title":2055,"date":2056,"path":2057,"tags":2058,"body":2065},"通过巴法云将向日葵智能插座接入米家，实现小爱同学远程控制","2023-11-02 10:17:02","/2023/11/02/integrating-sunflower-smart-socket-with-mi-home-via-bemfa-cloud",[2059,2060,2061,2062,2063,2064,1758],"IoT","MiAI","Network","Linux","Python","Hardware",{"type":13,"value":2066,"toc":2444},[2067,2075,2084,2093,2102,2107,2110,2116,2119,2122,2162,2168,2171,2177,2180,2183,2186,2415,2418,2441],[19,2068,2069,2070,2074],{},"在",[23,2071,2073],{"href":2072},"/2023/11/01/unveiling-sunflower-smart-adapter-api-intercepting-utilizing-api-android-packet-sniffing/","上一篇博客","中，我们介绍了如何在本地局域网中通过发送 http 请求控制向日葵智能插座 C2 的开关状态。但这还远远不够，我自己是小米生态链的忠实用户，在宿舍里也接入了四五个米家的智能设备，因此我想把这个智能插座接入米家，实现离家时一键关闭。",[19,2076,2077,2078,2083],{},"在阅读",[23,2079,2082],{"href":2080,"rel":2081},"https://iot.mi.com/",[27],"小米IoT开发者平台","的接入文档后，我发现米家对于个人开发者并不友好，接入文档大部分要完成企业认证以后才能实现。在谷歌一番搜索过后，我发现了通过假设 Home Assistant 后通过巴法云接入米家的方案。但我眼下就这一个非米家的智能家具，暂时还不想去碰 Home Assistant 那套体系。",[19,2085,2086,2087,2092],{},"因此我便找上了",[23,2088,2091],{"href":2089,"rel":2090},"https://cloud.bemfa.com/",[27],"巴法云","。在巴法云的官网中提到，他们是「专注物联网设备接入&一站式解决方案」，对于个人开发者，目前平台免费使用。网站的文档虽然并不优雅美观，却透露出实用主义的气息，针对接入提供了 TCP 长连接和 MQTT 两种方案，看着就很适合实现我的需求。",[19,2094,2095,2096,2101],{},"在巴法云文档中的「",[23,2097,2100],{"href":2098,"rel":2099},"https://cloud.bemfa.com/docs/#/?id=_21-%e8%ae%a2%e9%98%85%e5%8f%91%e5%b8%83%e6%a8%a1%e5%bc%8f",[27],"五分钟入门","」那一栏介绍了远程控制的业务逻辑:",[16,2103,2104],{},[19,2105,2106],{},"如果单片机订阅了一个主题，手机往这个主题推送个消息指令，单片机由于订阅了这个主题，就可以收到发往这个主题的消息，就可以达到手机控制单片机的目的。",[19,2108,2109],{},"所以我需要在巴法云的控制台创建一个针对于智能插座的主题，让我局域网内的一台设备订阅这个主题。接入米家以后，米家需要控制向日葵的智能插座时就向巴法云的这个主题推送一条消息，局域网内的设备就能接收到推送消息，进而调用智能插座的 api 实现远程开关。在这里，我选择使用一台刷了 Armbian 的 N1 作为局域网内的转发器。整个控制流程看上去是下面这个样子:",[19,2111,2112],{},[717,2113],{"alt":2114,"src":2115},"控制流程图","https://static.031130.xyz/uploads/2024/08/12/65430fbf56dee.webp",[19,2117,2118],{},"我并不知道 tcp 长连接的数据传输应该如何实现，但看起来 MQTT 是一个比较成熟的协议，因此我选择使用 MQTT 作为巴法云和 N1 之间的通讯协议。",[19,2120,2121],{},"在巴法云的控制台，选择 MQTT 设备云，创建一个新的主题，注意需要以 001~009 结尾，否则在米家里看不见创建的这个主题。",[16,2123,2124,2129,2134,2139,2144,2149,2154,2159],{},[16,2125,2126],{},[19,2127,2128],{},"当主题名字后三位是001时为插座设备。",[16,2130,2131],{},[19,2132,2133],{},"当主题名字后三位是002时为灯泡设备。",[16,2135,2136],{},[19,2137,2138],{},"当主题名字后三位是003时为风扇设备。",[16,2140,2141],{},[19,2142,2143],{},"当主题名字后三位是004时为传感器设备。",[16,2145,2146],{},[19,2147,2148],{},"当主题名字后三位是005时为空调设备。",[16,2150,2151],{},[19,2152,2153],{},"当主题名字后三位是006时为开关设备。",[16,2155,2156],{},[19,2157,2158],{},"当主题名字后三位是009时为窗帘设备。",[19,2160,2161],{},"当主题名字为其他时，默认为普通主题节点，不会同步到米家。",[19,2163,2164],{},[717,2165],{"alt":2166,"src":2167},"创建新主题","https://static.031130.xyz/uploads/2024/08/12/654310bb3133b.webp",[19,2169,2170],{},"此时，我便可以在手机的米家中找到巴法云并接入这个插座。",[19,2172,2173],{},[717,2174],{"alt":2175,"src":2176},"米家找连接巴法云","https://static.031130.xyz/uploads/2024/08/12/654312974e393.webp",[19,2178,2179],{},"至此，米家那边的接入已经完成了，虽然没法在米家中找到对应设备的卡片，但是可以在小爱同学的小爱训练计划中找到对应的设备。",[19,2181,2182],{},"我们还需要让本地的 N1 盒子使用 MQTT 协议订阅巴法云的消息。",[19,2184,2185],{},"参考代码如下:",[107,2187,2191],{"className":2188,"code":2189,"language":2190,"meta":116,"style":116},"language-python shiki shiki-themes github-light github-dark","#!/usr/bin/python3\n\nimport paho.mqtt.client as mqtt\nimport requests\n\n# 智能插座相关\nhost = ''\nsn = ''\nkey = ''\ntime = ''\n\n# 巴法云相关\nclient_id = ''\ntheme = ''\n\ndef set_adapter_status(status: bool):\n    url = 'http://' + host + '/plug'\n    requests.get(url, params={\n        \"status\": 1 if status else 0,\n        \"sn\": sn,\n        \"key\": key,\n        \"_api\": \"set_plug_status\",\n        \"time\": time,\n        \"index\": 0\n    })\n\ndef on_connect(client, userdata, flags, rc):\n    print(\"Connection returned with result code:\" + str(rc))\n    client.subscribe(theme, qos=1)\n\ndef on_message(client, userdata, msg):\n    if msg.payload.decode(\"utf-8\") == 'on':\n        set_adapter_status(True)\n    elif msg.payload.decode(\"utf-8\") == 'off':\n        set_adapter_status(False)\n\ndef on_subscribe(client, userdata, mid, granted_qos):\n    print(\"Subscribed: \" + str(mid) + \" \" + str(granted_qos))\n    \nclient = mqtt.Client(client_id=client_id, clean_session=False, protocol=mqtt.MQTTv311)\nclient.on_connect = on_connect\nclient.on_message = on_message\nclient.on_subscribe = on_subscribe\n\nclient.connect(\"bemfa.com\", 9501, 60)\nclient.loop_forever()\n","python",[114,2192,2193,2198,2202,2207,2212,2216,2221,2226,2231,2236,2241,2245,2250,2255,2260,2264,2269,2274,2279,2284,2289,2294,2299,2304,2309,2314,2318,2323,2328,2333,2337,2342,2347,2352,2357,2362,2366,2371,2376,2381,2386,2391,2396,2401,2405,2410],{"__ignoreMap":116},[163,2194,2195],{"class":165,"line":166},[163,2196,2197],{},"#!/usr/bin/python3\n",[163,2199,2200],{"class":165,"line":172},[163,2201,257],{"emptyLinePlaceholder":256},[163,2203,2204],{"class":165,"line":178},[163,2205,2206],{},"import paho.mqtt.client as mqtt\n",[163,2208,2209],{"class":165,"line":184},[163,2210,2211],{},"import requests\n",[163,2213,2214],{"class":165,"line":190},[163,2215,257],{"emptyLinePlaceholder":256},[163,2217,2218],{"class":165,"line":265},[163,2219,2220],{},"# 智能插座相关\n",[163,2222,2223],{"class":165,"line":270},[163,2224,2225],{},"host = ''\n",[163,2227,2228],{"class":165,"line":276},[163,2229,2230],{},"sn = ''\n",[163,2232,2233],{"class":165,"line":281},[163,2234,2235],{},"key = ''\n",[163,2237,2238],{"class":165,"line":287},[163,2239,2240],{},"time = ''\n",[163,2242,2243],{"class":165,"line":292},[163,2244,257],{"emptyLinePlaceholder":256},[163,2246,2247],{"class":165,"line":432},[163,2248,2249],{},"# 巴法云相关\n",[163,2251,2252],{"class":165,"line":438},[163,2253,2254],{},"client_id = ''\n",[163,2256,2257],{"class":165,"line":443},[163,2258,2259],{},"theme = ''\n",[163,2261,2262],{"class":165,"line":448},[163,2263,257],{"emptyLinePlaceholder":256},[163,2265,2266],{"class":165,"line":454},[163,2267,2268],{},"def set_adapter_status(status: bool):\n",[163,2270,2271],{"class":165,"line":460},[163,2272,2273],{},"    url = 'http://' + host + '/plug'\n",[163,2275,2276],{"class":165,"line":465},[163,2277,2278],{},"    requests.get(url, params={\n",[163,2280,2281],{"class":165,"line":471},[163,2282,2283],{},"        \"status\": 1 if status else 0,\n",[163,2285,2286],{"class":165,"line":476},[163,2287,2288],{},"        \"sn\": sn,\n",[163,2290,2291],{"class":165,"line":481},[163,2292,2293],{},"        \"key\": key,\n",[163,2295,2296],{"class":165,"line":3},[163,2297,2298],{},"        \"_api\": \"set_plug_status\",\n",[163,2300,2301],{"class":165,"line":492},[163,2302,2303],{},"        \"time\": time,\n",[163,2305,2306],{"class":165,"line":497},[163,2307,2308],{},"        \"index\": 0\n",[163,2310,2311],{"class":165,"line":503},[163,2312,2313],{},"    })\n",[163,2315,2316],{"class":165,"line":508},[163,2317,257],{"emptyLinePlaceholder":256},[163,2319,2320],{"class":165,"line":513},[163,2321,2322],{},"def on_connect(client, userdata, flags, rc):\n",[163,2324,2325],{"class":165,"line":519},[163,2326,2327],{},"    print(\"Connection returned with result code:\" + str(rc))\n",[163,2329,2330],{"class":165,"line":525},[163,2331,2332],{},"    client.subscribe(theme, qos=1)\n",[163,2334,2335],{"class":165,"line":530},[163,2336,257],{"emptyLinePlaceholder":256},[163,2338,2339],{"class":165,"line":536},[163,2340,2341],{},"def on_message(client, userdata, msg):\n",[163,2343,2344],{"class":165,"line":541},[163,2345,2346],{},"    if msg.payload.decode(\"utf-8\") == 'on':\n",[163,2348,2349],{"class":165,"line":546},[163,2350,2351],{},"        set_adapter_status(True)\n",[163,2353,2354],{"class":165,"line":552},[163,2355,2356],{},"    elif msg.payload.decode(\"utf-8\") == 'off':\n",[163,2358,2359],{"class":165,"line":558},[163,2360,2361],{},"        set_adapter_status(False)\n",[163,2363,2364],{"class":165,"line":564},[163,2365,257],{"emptyLinePlaceholder":256},[163,2367,2368],{"class":165,"line":569},[163,2369,2370],{},"def on_subscribe(client, userdata, mid, granted_qos):\n",[163,2372,2373],{"class":165,"line":575},[163,2374,2375],{},"    print(\"Subscribed: \" + str(mid) + \" \" + str(granted_qos))\n",[163,2377,2378],{"class":165,"line":580},[163,2379,2380],{},"    \n",[163,2382,2383],{"class":165,"line":1248},[163,2384,2385],{},"client = mqtt.Client(client_id=client_id, clean_session=False, protocol=mqtt.MQTTv311)\n",[163,2387,2388],{"class":165,"line":1253},[163,2389,2390],{},"client.on_connect = on_connect\n",[163,2392,2393],{"class":165,"line":1258},[163,2394,2395],{},"client.on_message = on_message\n",[163,2397,2398],{"class":165,"line":1263},[163,2399,2400],{},"client.on_subscribe = on_subscribe\n",[163,2402,2403],{"class":165,"line":1268},[163,2404,257],{"emptyLinePlaceholder":256},[163,2406,2407],{"class":165,"line":1273},[163,2408,2409],{},"client.connect(\"bemfa.com\", 9501, 60)\n",[163,2411,2412],{"class":165,"line":1278},[163,2413,2414],{},"client.loop_forever()\n",[29,2416,2417],{"id":2417},"参考链接",[352,2419,2420,2427,2434],{},[60,2421,2422],{},[23,2423,2426],{"href":2424,"rel":2425},"https://cloud.bemfa.com/docs/#/",[27],"巴法开放平台",[60,2428,2429],{},[23,2430,2433],{"href":2431,"rel":2432},"https://www.cnblogs.com/Mickey-7/p/17402095.html",[27],"Python MQTT客户端  paho-mqtt",[60,2435,2436],{},[23,2437,2440],{"href":2438,"rel":2439},"https://www.emqx.com/zh/blog/comparision-of-python-mqtt-client",[27],"Python MQTT 客户端对比",[1496,2442,2443],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":116,"searchDepth":172,"depth":172,"links":2445},[2446],{"id":2417,"depth":172,"text":2417},{"title":2448,"date":2449,"path":2450,"tags":2451,"body":2453},"使用 Root 后的安卓手机获取向日葵智能插座 C2 的开关 api","2023-11-01 23:46:28","/2023/11/01/unveiling-sunflower-smart-adapter-api-intercepting-utilizing-api-android-packet-sniffing",[2452,2061,2059,1758,2064],"Android",{"type":13,"value":2454,"toc":2563},[2455,2466,2469,2475,2478,2484,2487,2529,2532,2535,2541,2544,2550,2557],[16,2456,2457],{},[19,2458,2459,2460,2465],{},"之前看到 ",[23,2461,2464],{"href":2462,"rel":2463},"https://https.gs/archives/338/",[27],"https.gs 上的一篇文章","，发现可以抓取向日葵智能插座 C1Pro 的开关 api，并实现局域网或公网的控制。这样一来，我们其实就不需要依赖于向日葵自己家的 App 去实现智能插座的开关操作，还是比较方便的。今年趁着双十一，直接低价拿下来带有计电功能的 C2，便也来试一试能不能抓到接口。",[19,2467,2468],{},"首先，拿到插座以后肯定还是下载向日葵的官方 App，完成 wifi 的链接，这里就不再赘述。",[19,2470,2471],{},[717,2472],{"alt":2473,"src":2474},"向日葵的操作界面","https://static.031130.xyz/uploads/2024/08/12/65427474ba54d.webp",[19,2476,2477],{},"然后就可以打开我们的抓包软件。需要注意的是，原博客中抓到的接口是 http 协议，但这个接口在新版的 App 上已经变为了 https 协议，因此我们需要找一台 Root 过后的安卓机去抓包。抓包的步骤没什么好说的，用 Root 权限给本地安装自己的 CA 证书，然后打开抓包模式，在向日葵的 App 那边开关几次插座，回来就能看到这一段时间内的请求。",[19,2479,2480],{},[717,2481],{"alt":2482,"src":2483},"HttpCanary 操作界面","https://static.031130.xyz/uploads/2024/08/12/654275e167583.webp",[19,2485,2486],{},"点开可以看到，这是一个 GET 请求，一共有如下几个参数",[352,2488,2489,2495,2501,2507,2517,2523],{},[60,2490,2491,2494],{},[114,2492,2493],{},"status"," 这是状态设置，设置为 1 时为打开指令，0 为关闭指令",[60,2496,2497,2500],{},[114,2498,2499],{},"sn"," 这个应该是设备码",[60,2502,2503,2506],{},[114,2504,2505],{},"key"," 应该是用来操作设备的密钥",[60,2508,2509,2512,2513,2516],{},[114,2510,2511],{},"_api"," 操作类型，我只关心插座的打开关闭，所以设为 ",[114,2514,2515],{},"set_plug_status"," 即可",[60,2518,2519,2522],{},[114,2520,2521],{},"time"," 奇奇怪怪的而参数，也不是 unix 时间戳，反正照抄就行了",[60,2524,2525,2528],{},[114,2526,2527],{},"index"," 原博说是用来给插排操作指定第几个孔位的，我们智能插座直接设置为 0 即可",[19,2530,2531],{},"理论上你用抓出来的 url 已经可以实现公网访问了，但我测试下来并不行，可能是向日葵那边的服务器做了别的校验，比如说判断了 ua 之类的？不过无所谓，我本来就是打算局域网内操作。",[19,2533,2534],{},"登陆路由器后台，寻找疑似智能插座的设备，一般很容易就能找到。",[19,2536,2537],{},[717,2538],{"alt":2539,"src":2540},"路由器后台管理界面","https://static.031130.xyz/uploads/2024/08/12/654277f0d5c2a.webp",[19,2542,2543],{},"使用 nmap 命令扫对应 ip 开放的端口。不知道是不是巧合，我和原博扫出来的端口都是 6767 端口。",[19,2545,2546],{},[717,2547],{"alt":2548,"src":2549},"扫描端口","https://static.031130.xyz/uploads/2024/08/12/654278685f137.webp",[19,2551,2552,2553,2556],{},"将上面抓到的 url 的域名换成 ",[114,2554,2555],{},"ip:port","，https 协议改成 http 协议，在浏览器中直接访问，获得了 0 的状态码，插座也正常开关。",[19,2558,2559],{},[717,2560],{"alt":2561,"src":2562},"浏览器操作测试","https://static.031130.xyz/uploads/2024/08/12/654279513c1f8.webp",{"title":116,"searchDepth":172,"depth":172,"links":2564},[],{"title":2566,"date":2567,"path":2568,"tags":2569,"body":2572},"创建 b23.tv 追踪参数移除 bot","2023-10-29 00:35:48","/2023/10/29/create-b23tv-remover-bot",[2063,2570,2571],"Bot","Privacy",{"type":13,"value":2573,"toc":2951},[2574,2579,2582,2585,2588,2592,2595,2600,2603,2609,2612,2616,2619,2622,2629,2632,2686,2689,2691,2762,2766,2769,2771,2929,2938,2949],[16,2575,2576],{},[19,2577,2578],{},"前两天似乎有人高调宣称自己发 b23.tv 没问题，结果过两天就被拿下的消息。我自己并不是他的粉丝，但这个戏剧性的流言也又一次说明了注重隐私保护的重要性。",[19,2580,2581],{},"早前就有 b23.tf 和 b23.wtf 两个域名专门在做移除追踪参数的事情。只要将短链接中的 b23.tv 改成 b23.tf ，别人访问链接时就会被转到移除了追踪参数的链接。但这需要发送者在分享时手动更改域名。",[19,2583,2584],{},"因此，我也开始为自己的 bot 添加了 b23.tv 的 track id 移除功能。当用户的信息中包含 b23.tv 短链接，将会自动发送一条移除了 track id 的信息，用户就可以直接点击无追踪参数的链接。",[19,2586,2587],{},"当然，这两种方案并不能保护链接分享者的个人信息泄漏，因为 b23.tv 后面的参数是可以被别人看到的，通过这些参数就可以定位到链接分享者的个人信息，所以不能防止群里的内鬼倒查分享者的个人信息，但起码可以阻止大数据算法对群里的几个人产生关联。",[29,2589,2591],{"id":2590},"b23-短链接将会泄漏哪些个人信息","b23 短链接将会泄漏哪些个人信息？",[19,2593,2594],{},"通过 curl 命令，我们就可以看到 b23.tv 短链接重定向到了哪个页面。",[19,2596,2597],{},[717,2598],{"alt":116,"src":2599},"https://static.031130.xyz/uploads/2024/08/12/653d49fe955f7.webp",[19,2601,2602],{},"这是所携带的 GET 请求参数",[107,2604,2607],{"className":2605,"code":2606,"language":112},[110]," 'buvid': ['*************************************'],\n 'from_spmid': ['tm.recommend.0.0'],\n 'is_story_h5': ['false'],\n 'mid': ['************************'],\n 'p': ['1'],\n 'plat_id': ['116'],\n 'share_from': ['ugc'],\n 'share_medium': ['android'],\n 'share_plat': ['android'],\n 'share_session_id': ['************************************'],\n 'share_source': ['GENERIC'],\n 'share_tag': ['s_i'],\n 'spmid': ['united.player-video-detail.0.0'],\n 'timestamp': ['**********'],\n 'unique_k': ['*******'],\n 'up_id': ['*********']\n",[114,2608,2606],{"__ignoreMap":116},[19,2610,2611],{},"其中，我替换成星号的部分都是有可能涉及到信息泄漏的部分，甚至没打码的部分也可以用来推测你的平台信息。",[29,2613,2615],{"id":2614},"qq-bot","QQ Bot",[19,2617,2618],{},"尽管目前腾讯针对 go-cqhttp 的封杀力度挺大的，但我还在用。",[19,2620,2621],{},"在 QQ 中的 b23.tv 追踪参数移除主要有两个方面。一是用户发送的消息中可能含有 b23.tv 短链接，二是用户在手机端直接调用 bilibili 自带的「分享到QQ」的功能，这样的话在 QQ 中会显示为小程序，go-cqhttp 接收到的是一个 json 的 CQ Code。",[19,2623,2624,2625,2628],{},"针对第一种情况，处理起来就相对简单，首先判断用户的信息中是否存在 ",[114,2626,2627],{},"b23.tv"," 这一关键词，然后用正则表达式获取完整的 b23 链接，再使用 python 的 requests 库去请求对应链接，返回带有明文追踪参数的 url 后去除 GET 参数即可。",[19,2630,2631],{},"参考代码如下",[107,2633,2635],{"className":2188,"code":2634,"language":2190,"meta":116,"style":116},"if 'https://b23.tv' in message:\n    pattern = r'https://b23\\.tv/[^\\s]+'\n    urls = re.findall(pattern, message)\n    ret = 'TrackID removed:'\n    for i in urls:\n    ret = ret + '\\n' + b23_to_bvid(i)\n    \ndef b23_to_bvid(url):\n    tracked_url = requests.get(url,allow_redirects=False).headers['location']\n    return tracked_url.split('?', 1)[0]\n",[114,2636,2637,2642,2647,2652,2657,2662,2667,2671,2676,2681],{"__ignoreMap":116},[163,2638,2639],{"class":165,"line":166},[163,2640,2641],{},"if 'https://b23.tv' in message:\n",[163,2643,2644],{"class":165,"line":172},[163,2645,2646],{},"    pattern = r'https://b23\\.tv/[^\\s]+'\n",[163,2648,2649],{"class":165,"line":178},[163,2650,2651],{},"    urls = re.findall(pattern, message)\n",[163,2653,2654],{"class":165,"line":184},[163,2655,2656],{},"    ret = 'TrackID removed:'\n",[163,2658,2659],{"class":165,"line":190},[163,2660,2661],{},"    for i in urls:\n",[163,2663,2664],{"class":165,"line":265},[163,2665,2666],{},"    ret = ret + '\\n' + b23_to_bvid(i)\n",[163,2668,2669],{"class":165,"line":270},[163,2670,2380],{},[163,2672,2673],{"class":165,"line":276},[163,2674,2675],{},"def b23_to_bvid(url):\n",[163,2677,2678],{"class":165,"line":281},[163,2679,2680],{},"    tracked_url = requests.get(url,allow_redirects=False).headers['location']\n",[163,2682,2683],{"class":165,"line":287},[163,2684,2685],{},"    return tracked_url.split('?', 1)[0]\n",[19,2687,2688],{},"而针对第二种情况，则需要先解析对应的 json 信息，再参考第一种方法获取无追踪参数的链接。",[19,2690,2631],{},[107,2692,2694],{"className":2188,"code":2693,"language":2190,"meta":116,"style":116},"if message.startswith('[CQ:json,data') and 'b23.tv' in message:\n    decoded_data = html.unescape(message)\n    match = re.search(r'\\[CQ:json,data=(\\{.*?\\})\\]', decoded_data)\n    json_str = match.group(1)\n    json_data = json.loads(json_str)\n    if json_data['meta'].get('detail_1') is not None:\n        raw_url = json_data['meta'].get('detail_1').get('qqdocurl')\n    elif json_data['meta'].get('news') is not None:\n        raw_url = json_data['meta'].get('news').get('jumpUrl')\n    clean_url = b23_to_bvid(raw_url)\n    \ndef b23_to_bvid(url):\n    tracked_url = requests.get(url,allow_redirects=False).headers['location']\n    return tracked_url.split('?', 1)[0]\n",[114,2695,2696,2701,2706,2711,2716,2721,2726,2731,2736,2741,2746,2750,2754,2758],{"__ignoreMap":116},[163,2697,2698],{"class":165,"line":166},[163,2699,2700],{},"if message.startswith('[CQ:json,data') and 'b23.tv' in message:\n",[163,2702,2703],{"class":165,"line":172},[163,2704,2705],{},"    decoded_data = html.unescape(message)\n",[163,2707,2708],{"class":165,"line":178},[163,2709,2710],{},"    match = re.search(r'\\[CQ:json,data=(\\{.*?\\})\\]', decoded_data)\n",[163,2712,2713],{"class":165,"line":184},[163,2714,2715],{},"    json_str = match.group(1)\n",[163,2717,2718],{"class":165,"line":190},[163,2719,2720],{},"    json_data = json.loads(json_str)\n",[163,2722,2723],{"class":165,"line":265},[163,2724,2725],{},"    if json_data['meta'].get('detail_1') is not None:\n",[163,2727,2728],{"class":165,"line":270},[163,2729,2730],{},"        raw_url = json_data['meta'].get('detail_1').get('qqdocurl')\n",[163,2732,2733],{"class":165,"line":276},[163,2734,2735],{},"    elif json_data['meta'].get('news') is not None:\n",[163,2737,2738],{"class":165,"line":281},[163,2739,2740],{},"        raw_url = json_data['meta'].get('news').get('jumpUrl')\n",[163,2742,2743],{"class":165,"line":287},[163,2744,2745],{},"    clean_url = b23_to_bvid(raw_url)\n",[163,2747,2748],{"class":165,"line":292},[163,2749,2380],{},[163,2751,2752],{"class":165,"line":432},[163,2753,2675],{},[163,2755,2756],{"class":165,"line":438},[163,2757,2680],{},[163,2759,2760],{"class":165,"line":443},[163,2761,2685],{},[29,2763,2765],{"id":2764},"tg-bot","TG Bot",[19,2767,2768],{},"这个平台是提供了 Bot 的 API 的，所以也不用担心会被官方封杀，可惜用户访问起来可能相对困难，也不能要求所有联系人都迁移到这个平台上。思路也是一样的，用 requests 去请求 b23 短链，返回去除跟踪参数的 url。",[19,2770,2631],{},[107,2772,2774],{"className":2188,"code":2773,"language":2190,"meta":116,"style":116},"from telegram import Update\nfrom telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters\nimport requests\nimport re\n\nua = 'Mozilla/5.0 (X11; Linux x86_64; rv:120.0) Gecko/20100101 Firefox/120.0'\n\nasync def start(update: Update, context):\n    await context.bot.send_message(chat_id=update.effective_chat.id, text=\"Hello World!\")\n    \nasync def b23_remover(update: Update, context):\n    seng_msg = 'TrackID removed:'\n    if 'https://b23.tv' in update.message.text:\n        pattern = r'https://b23\\.tv/[^\\s]+'\n        urls = re.findall(pattern, update.message.text)\n        for i in urls:\n            seng_msg += '\\n' + await b23_to_bvid(i)\n        await context.bot.send_message(chat_id=update.effective_chat.id, text=seng_msg)\n        \nasync def b23_to_bvid(url):\n    tracked_url = requests.get(url,allow_redirects=False,headers={'User-Agent': ua}).headers['Location']\n    return tracked_url.split('?', 1)[0]\n    \nstart_handler = CommandHandler(\"start\", start)\nb23_remove_handler = MessageHandler(filters.TEXT, b23_remover)\n\nif __name__ == '__main__':\n    TOKEN='**********************************************'\n    application = ApplicationBuilder().token(TOKEN).build()\n    application.add_handler(start_handler)\n    application.add_handler(b23_remove_handler)\n    application.run_polling()\n\n",[114,2775,2776,2781,2786,2790,2795,2799,2804,2808,2813,2818,2822,2827,2832,2837,2842,2847,2852,2857,2862,2867,2872,2877,2881,2885,2890,2895,2899,2904,2909,2914,2919,2924],{"__ignoreMap":116},[163,2777,2778],{"class":165,"line":166},[163,2779,2780],{},"from telegram import Update\n",[163,2782,2783],{"class":165,"line":172},[163,2784,2785],{},"from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters\n",[163,2787,2788],{"class":165,"line":178},[163,2789,2211],{},[163,2791,2792],{"class":165,"line":184},[163,2793,2794],{},"import re\n",[163,2796,2797],{"class":165,"line":190},[163,2798,257],{"emptyLinePlaceholder":256},[163,2800,2801],{"class":165,"line":265},[163,2802,2803],{},"ua = 'Mozilla/5.0 (X11; Linux x86_64; rv:120.0) Gecko/20100101 Firefox/120.0'\n",[163,2805,2806],{"class":165,"line":270},[163,2807,257],{"emptyLinePlaceholder":256},[163,2809,2810],{"class":165,"line":276},[163,2811,2812],{},"async def start(update: Update, context):\n",[163,2814,2815],{"class":165,"line":281},[163,2816,2817],{},"    await context.bot.send_message(chat_id=update.effective_chat.id, text=\"Hello World!\")\n",[163,2819,2820],{"class":165,"line":287},[163,2821,2380],{},[163,2823,2824],{"class":165,"line":292},[163,2825,2826],{},"async def b23_remover(update: Update, context):\n",[163,2828,2829],{"class":165,"line":432},[163,2830,2831],{},"    seng_msg = 'TrackID removed:'\n",[163,2833,2834],{"class":165,"line":438},[163,2835,2836],{},"    if 'https://b23.tv' in update.message.text:\n",[163,2838,2839],{"class":165,"line":443},[163,2840,2841],{},"        pattern = r'https://b23\\.tv/[^\\s]+'\n",[163,2843,2844],{"class":165,"line":448},[163,2845,2846],{},"        urls = re.findall(pattern, update.message.text)\n",[163,2848,2849],{"class":165,"line":454},[163,2850,2851],{},"        for i in urls:\n",[163,2853,2854],{"class":165,"line":460},[163,2855,2856],{},"            seng_msg += '\\n' + await b23_to_bvid(i)\n",[163,2858,2859],{"class":165,"line":465},[163,2860,2861],{},"        await context.bot.send_message(chat_id=update.effective_chat.id, text=seng_msg)\n",[163,2863,2864],{"class":165,"line":471},[163,2865,2866],{},"        \n",[163,2868,2869],{"class":165,"line":476},[163,2870,2871],{},"async def b23_to_bvid(url):\n",[163,2873,2874],{"class":165,"line":481},[163,2875,2876],{},"    tracked_url = requests.get(url,allow_redirects=False,headers={'User-Agent': ua}).headers['Location']\n",[163,2878,2879],{"class":165,"line":3},[163,2880,2685],{},[163,2882,2883],{"class":165,"line":492},[163,2884,2380],{},[163,2886,2887],{"class":165,"line":497},[163,2888,2889],{},"start_handler = CommandHandler(\"start\", start)\n",[163,2891,2892],{"class":165,"line":503},[163,2893,2894],{},"b23_remove_handler = MessageHandler(filters.TEXT, b23_remover)\n",[163,2896,2897],{"class":165,"line":508},[163,2898,257],{"emptyLinePlaceholder":256},[163,2900,2901],{"class":165,"line":513},[163,2902,2903],{},"if __name__ == '__main__':\n",[163,2905,2906],{"class":165,"line":519},[163,2907,2908],{},"    TOKEN='**********************************************'\n",[163,2910,2911],{"class":165,"line":525},[163,2912,2913],{},"    application = ApplicationBuilder().token(TOKEN).build()\n",[163,2915,2916],{"class":165,"line":530},[163,2917,2918],{},"    application.add_handler(start_handler)\n",[163,2920,2921],{"class":165,"line":536},[163,2922,2923],{},"    application.add_handler(b23_remove_handler)\n",[163,2925,2926],{"class":165,"line":541},[163,2927,2928],{},"    application.run_polling()\n",[19,2930,2931,2932,2937],{},"代码编写参考了 ",[23,2933,2936],{"href":2934,"rel":2935},"https://krau.top/posts/tg-bot-dev-note-kmua",[27],"柯罗krau的博客 | krau's blog","，使用时请注意以下问题:",[352,2939,2940,2943,2946],{},[60,2941,2942],{},"你的机子是否拥有能访问到对应的 api 的网络环境",[60,2944,2945],{},"botfather 那边是否打开了 allow group",[60,2947,2948],{},"botfather 那边是否关闭了 privacy mode",[1496,2950,2443],{},{"title":116,"searchDepth":172,"depth":172,"links":2952},[2953,2954,2955],{"id":2590,"depth":172,"text":2591},{"id":2614,"depth":172,"text":2615},{"id":2764,"depth":172,"text":2765},{"title":2957,"date":2958,"path":2959,"tags":2960,"body":2962},"jinja2 中如何优雅地实现换行","2023-09-03 13:37:35","/2023/09/03/jinja2-nl-to-br",[2062,2063,2961,1527],"jinja2",{"type":13,"value":2963,"toc":3103},[2964,2974,2984,3072,3075,3083,3094,3101],[19,2965,2966,2967,2970,2971,2973],{},"在使用 python 的 jinja2 模板引擎生成 html 的时候，会遇到 ",[114,2968,2969],{},"\\n"," 换行符无法被正常换行的问题。我本能的想法就是将 ",[114,2972,2969],{}," 替换成 html 标签 \u003Cbr />，但失败了，jinja2 有自动转义的功能，直接将标签原模原样地渲染了出来，并没有生效。而为这一段代码块关闭自动转义则会有被 js 注入的风险，因此这也不是上策。",[19,2975,2976,2977,2979,2980],{},"在 jinja2 的官方文档中，提出了使用 filter 的方案。也就是说，filter 将 ",[114,2978,2969],{}," 识别出来，并自动替换成 \u003Cbr /> 标签，并且使用 Markup 函数将这一段 html 文本标记成安全且无需转义的。见: ",[23,2981,2982],{"href":2982,"rel":2983},"https://jinja.palletsprojects.com/en/3.1.x/api/#custom-filters",[27],[16,2985,2986],{},[107,2987,2989],{"className":2188,"code":2988,"language":2190,"meta":116,"style":116},"import re\nfrom jinja2 import pass_eval_context\nfrom markupsafe import Markup, escape\n\n@pass_eval_context\ndef nl2br(eval_ctx, value):\n    br = \"\u003Cbr>\\n\"\n\n    if eval_ctx.autoescape:\n        value = escape(value)\n        br = Markup(br)\n\n    result = \"\\n\\n\".join(\n        f\"\u003Cp>{br.join(p.splitlines())}\u003C\\p>\"\n        for p in re.split(r\"(?:\\r\\n|\\r(?!\\n)|\\n){2,}\", value)\n    )\n    return Markup(result) if autoescape else result\n",[114,2990,2991,2995,3000,3005,3009,3014,3019,3024,3028,3033,3038,3043,3047,3052,3057,3062,3067],{"__ignoreMap":116},[163,2992,2993],{"class":165,"line":166},[163,2994,2794],{},[163,2996,2997],{"class":165,"line":172},[163,2998,2999],{},"from jinja2 import pass_eval_context\n",[163,3001,3002],{"class":165,"line":178},[163,3003,3004],{},"from markupsafe import Markup, escape\n",[163,3006,3007],{"class":165,"line":184},[163,3008,257],{"emptyLinePlaceholder":256},[163,3010,3011],{"class":165,"line":190},[163,3012,3013],{},"@pass_eval_context\n",[163,3015,3016],{"class":165,"line":265},[163,3017,3018],{},"def nl2br(eval_ctx, value):\n",[163,3020,3021],{"class":165,"line":270},[163,3022,3023],{},"    br = \"\u003Cbr>\\n\"\n",[163,3025,3026],{"class":165,"line":276},[163,3027,257],{"emptyLinePlaceholder":256},[163,3029,3030],{"class":165,"line":281},[163,3031,3032],{},"    if eval_ctx.autoescape:\n",[163,3034,3035],{"class":165,"line":287},[163,3036,3037],{},"        value = escape(value)\n",[163,3039,3040],{"class":165,"line":292},[163,3041,3042],{},"        br = Markup(br)\n",[163,3044,3045],{"class":165,"line":432},[163,3046,257],{"emptyLinePlaceholder":256},[163,3048,3049],{"class":165,"line":438},[163,3050,3051],{},"    result = \"\\n\\n\".join(\n",[163,3053,3054],{"class":165,"line":443},[163,3055,3056],{},"        f\"\u003Cp>{br.join(p.splitlines())}\u003C\\p>\"\n",[163,3058,3059],{"class":165,"line":448},[163,3060,3061],{},"        for p in re.split(r\"(?:\\r\\n|\\r(?!\\n)|\\n){2,}\", value)\n",[163,3063,3064],{"class":165,"line":454},[163,3065,3066],{},"    )\n",[163,3068,3069],{"class":165,"line":460},[163,3070,3071],{},"    return Markup(result) if autoescape else result\n",[19,3073,3074],{},"使用这段代码后，我遇到了连续两个换行符被识别成一个换行符的问题，依然不满意。",[19,3076,1687,3077,3082],{},[23,3078,3081],{"href":3079,"rel":3080},"https://github.com/pallets/flask/issues/2628",[27],"issue#2628"," 中，我找到了一个相对优雅的解决方案——使用 css 样式来完成这个任务。",[19,3084,3085,3086,3089,3090,3093],{},"通过设置 ",[114,3087,3088],{},"white-space: pre-line;"," 的 css 样式，html 在被渲染时将会不再忽略换行符，浏览器就能够在没有 br 标签标注的情况下实现自动换行。而如果设置为 ",[114,3091,3092],{},"white-space: pre-wrap;"," 则多个空格将不会再被合并成一个空格，直接治好了我在入门 html 时的各种不适。",[19,3095,3096,3097,3100],{},"此外，通过 ",[114,3098,3099],{},"word-break: break-word;"," 的 css 样式可以实现只有当一个单词一整行都显示不下时，才会拆分换行该单词的效果，可以避免 break-all 拆分所有单词或者 normal 时遇到长单词直接元素溢出的问题。",[1496,3102,2443],{},{"title":116,"searchDepth":172,"depth":172,"links":3104},[],{"title":3106,"date":3107,"path":3108,"tags":3109,"body":3111},"手动指定 python-selenium 的 driver path 以解决在中国大陆网络环境下启动卡住的问题","2023-09-02 01:59:18","/2023/09/02/python-selenium-start-difficult-in-china-mainland",[2063,3110,2062],"selenium",{"type":13,"value":3112,"toc":3380},[3113,3122,3125,3243,3251,3256,3259,3272,3280,3326,3329,3375,3378],[19,3114,3115,3116,3121],{},"之前因为学校社团迎新的需求，就临时写了一个 QQ Bot，最近又给 bot 加上了 ",[23,3117,3120],{"href":3118,"rel":3119},"https://github.com/zhullyb/qq-quote-generator",[27],"/q 的功能","，原理是通过 python 的 selenium 去启动一个 headless Firefox 去截由 jinja2 模板引擎生成的 html 的图。",[19,3123,3124],{},"每次这个 bot 重启的时候都因为 selenium 而需要花费好几秒的时间，甚至经常概率性启动失败。我就寻思者应该把这个图片生成的 generator 从 bot 中抽出来，这样就不至于每次重启 bot 都要遭此一劫。但就在我将 generator 打包成 docker 部署上云服务器的时候，发现居然无法启动。于是手动进 docker 的 shell 开 python 的交互式终端，发现在创建 firefox 的 webdriver 对象的时候异常缓慢，等了半分钟以后蹲到一个报错如下:",[107,3126,3130],{"className":3127,"code":3128,"language":3129,"meta":116,"style":116},"language-pyth shiki shiki-themes github-light github-dark","Traceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/common/driver_finder.py\", line 38, in get_path\n    path = SeleniumManager().driver_location(options) if path is None else path\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/common/selenium_manager.py\", line 95, in driver_location\n    output = self.run(args)\n             ^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/common/selenium_manager.py\", line 141, in run\n    raise WebDriverException(f\"Unsuccessful command executed: {command}.\\n{result}{stderr}\")\nselenium.common.exceptions.WebDriverException: Message: Unsuccessful command executed: /usr/local/lib/python3.11/site-packages/selenium/webdriver/common/linux/selenium-manager --browser firefox --output json.\n{'code': 65, 'message': 'error sending request for url (https://github.com/mozilla/geckodriver/releases/latest): connection error: unexpected end of file', 'driver_path': '', 'browser_path': ''}\n\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"\u003Cstdin>\", line 1, in \u003Cmodule>\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/firefox/webdriver.py\", line 59, in __init__\n    self.service.path = DriverFinder.get_path(self.service, options)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/common/driver_finder.py\", line 41, in get_path\n    raise NoSuchDriverException(msg) from err\nselenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for firefox using Selenium Manager.; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location\n","pyth",[114,3131,3132,3137,3142,3147,3152,3157,3162,3167,3172,3177,3182,3187,3191,3195,3200,3204,3208,3213,3218,3223,3228,3233,3238],{"__ignoreMap":116},[163,3133,3134],{"class":165,"line":166},[163,3135,3136],{},"Traceback (most recent call last):\n",[163,3138,3139],{"class":165,"line":172},[163,3140,3141],{},"  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/common/driver_finder.py\", line 38, in get_path\n",[163,3143,3144],{"class":165,"line":178},[163,3145,3146],{},"    path = SeleniumManager().driver_location(options) if path is None else path\n",[163,3148,3149],{"class":165,"line":184},[163,3150,3151],{},"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",[163,3153,3154],{"class":165,"line":190},[163,3155,3156],{},"  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/common/selenium_manager.py\", line 95, in driver_location\n",[163,3158,3159],{"class":165,"line":265},[163,3160,3161],{},"    output = self.run(args)\n",[163,3163,3164],{"class":165,"line":270},[163,3165,3166],{},"             ^^^^^^^^^^^^^^\n",[163,3168,3169],{"class":165,"line":276},[163,3170,3171],{},"  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/common/selenium_manager.py\", line 141, in run\n",[163,3173,3174],{"class":165,"line":281},[163,3175,3176],{},"    raise WebDriverException(f\"Unsuccessful command executed: {command}.\\n{result}{stderr}\")\n",[163,3178,3179],{"class":165,"line":287},[163,3180,3181],{},"selenium.common.exceptions.WebDriverException: Message: Unsuccessful command executed: /usr/local/lib/python3.11/site-packages/selenium/webdriver/common/linux/selenium-manager --browser firefox --output json.\n",[163,3183,3184],{"class":165,"line":292},[163,3185,3186],{},"{'code': 65, 'message': 'error sending request for url (https://github.com/mozilla/geckodriver/releases/latest): connection error: unexpected end of file', 'driver_path': '', 'browser_path': ''}\n",[163,3188,3189],{"class":165,"line":432},[163,3190,257],{"emptyLinePlaceholder":256},[163,3192,3193],{"class":165,"line":438},[163,3194,257],{"emptyLinePlaceholder":256},[163,3196,3197],{"class":165,"line":443},[163,3198,3199],{},"The above exception was the direct cause of the following exception:\n",[163,3201,3202],{"class":165,"line":448},[163,3203,257],{"emptyLinePlaceholder":256},[163,3205,3206],{"class":165,"line":454},[163,3207,3136],{},[163,3209,3210],{"class":165,"line":460},[163,3211,3212],{},"  File \"\u003Cstdin>\", line 1, in \u003Cmodule>\n",[163,3214,3215],{"class":165,"line":465},[163,3216,3217],{},"  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/firefox/webdriver.py\", line 59, in __init__\n",[163,3219,3220],{"class":165,"line":471},[163,3221,3222],{},"    self.service.path = DriverFinder.get_path(self.service, options)\n",[163,3224,3225],{"class":165,"line":476},[163,3226,3227],{},"                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",[163,3229,3230],{"class":165,"line":481},[163,3231,3232],{},"  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/common/driver_finder.py\", line 41, in get_path\n",[163,3234,3235],{"class":165,"line":3},[163,3236,3237],{},"    raise NoSuchDriverException(msg) from err\n",[163,3239,3240],{"class":165,"line":492},[163,3241,3242],{},"selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for firefox using Selenium Manager.; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location\n",[19,3244,3245,3246,3250],{},"我才发现 selenium 试图访问 ",[23,3247,3248],{"href":3248,"rel":3249},"https://github.com/mozilla/geckodriver/releases/latest",[27]," 且访问失败了。仔细阅读了 selenium 项目的文档发现新版本的 selenium 会尝试自动下载 webdriver:",[16,3252,3253],{},[19,3254,3255],{},"As of Selenium 4.6, Selenium downloads the correct driver for you. You shouldn’t need to do anything.",[19,3257,3258],{},"表面上看上去我不需要做任何事情，但项目组忽略了中国大陆的网络环境。",[19,3260,3261,3262,3267,3268,3271],{},"服务是要在境内的云服务器上跑的，我也不敢开代理，现在比较靠谱的方案是我去手动指定 Firefox 的 geckodriver，避免 selenium 去帮我自动下载一份。在 ",[23,3263,3266],{"href":3264,"rel":3265},"https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.firefox.webdriver",[27],"python-selenium 的官方文档","中是让我们创建 Firefox 的 webdriver 时去传入一个 ",[114,3269,3270],{},"executable_path='geckodriver'"," 的关键词参数，可惜这是过时的用法，应该是维护者还没来得及更新文档。",[19,3273,3274,3275],{},"随后便在 stackoverflow 上找到了新版 selenium ",[23,3276,3279],{"href":3277,"rel":3278},"https://stackoverflow.com/questions/76550506/typeerror-webdriver-init-got-an-unexpected-keyword-argument-executable-p",[27],"手动指定 Chrome 的 chromedriver 的方法",[16,3281,3282],{},[107,3283,3285],{"className":2188,"code":3284,"language":2190,"meta":116,"style":116},"from selenium import webdriver\nfrom selenium.webdriver.chrome.service import Service\n\nservice = Service(executable_path='chromedriver.exe') \noptions = webdriver.ChromeOptions()\ndriver = webdriver.Chrome(service=service, options=options)\n# ...\ndriver.quit()\n",[114,3286,3287,3292,3297,3301,3306,3311,3316,3321],{"__ignoreMap":116},[163,3288,3289],{"class":165,"line":166},[163,3290,3291],{},"from selenium import webdriver\n",[163,3293,3294],{"class":165,"line":172},[163,3295,3296],{},"from selenium.webdriver.chrome.service import Service\n",[163,3298,3299],{"class":165,"line":178},[163,3300,257],{"emptyLinePlaceholder":256},[163,3302,3303],{"class":165,"line":184},[163,3304,3305],{},"service = Service(executable_path='chromedriver.exe') \n",[163,3307,3308],{"class":165,"line":190},[163,3309,3310],{},"options = webdriver.ChromeOptions()\n",[163,3312,3313],{"class":165,"line":265},[163,3314,3315],{},"driver = webdriver.Chrome(service=service, options=options)\n",[163,3317,3318],{"class":165,"line":270},[163,3319,3320],{},"# ...\n",[163,3322,3323],{"class":165,"line":276},[163,3324,3325],{},"driver.quit()\n",[19,3327,3328],{},"原文给的是 chrome 的方案，但 Firefox 的方案基本也是一致的，应该也是去创建一个 service 对象，猜一猜就能猜到。",[107,3330,3332],{"className":2188,"code":3331,"language":2190,"meta":116,"style":116},"from selenium import webdriver\nfrom selenium.webdriver.firefox.service import Service\nfrom selenium.webdriver.firefox.options import Options\n\nservice = Service(executable_path='/root/geckodriver') # 我这里是 docker 打包，懒得创建一个普通用户了，就直接用了 root 用户的 home 目录\noptions = Options(\"--headless\")\ndriver = webdriver.Firefox(service=service, options=options)\n# ...\ndriver.quit()\n",[114,3333,3334,3338,3343,3348,3352,3357,3362,3367,3371],{"__ignoreMap":116},[163,3335,3336],{"class":165,"line":166},[163,3337,3291],{},[163,3339,3340],{"class":165,"line":172},[163,3341,3342],{},"from selenium.webdriver.firefox.service import Service\n",[163,3344,3345],{"class":165,"line":178},[163,3346,3347],{},"from selenium.webdriver.firefox.options import Options\n",[163,3349,3350],{"class":165,"line":184},[163,3351,257],{"emptyLinePlaceholder":256},[163,3353,3354],{"class":165,"line":190},[163,3355,3356],{},"service = Service(executable_path='/root/geckodriver') # 我这里是 docker 打包，懒得创建一个普通用户了，就直接用了 root 用户的 home 目录\n",[163,3358,3359],{"class":165,"line":265},[163,3360,3361],{},"options = Options(\"--headless\")\n",[163,3363,3364],{"class":165,"line":270},[163,3365,3366],{},"driver = webdriver.Firefox(service=service, options=options)\n",[163,3368,3369],{"class":165,"line":276},[163,3370,3320],{},[163,3372,3373],{"class":165,"line":281},[163,3374,3325],{},[19,3376,3377],{},"手动指定 geckodriver 后，在我 1 核 1 G 的小主机上创建 webdriver 对象，基本都可以秒完成。",[1496,3379,2443],{},{"title":116,"searchDepth":172,"depth":172,"links":3381},[],{"title":3383,"date":3384,"path":3385,"tags":3386,"body":3389},"从零开始的静态网页部署（到个人云服务器）","2023-08-04 01:19:22","/2023/08/04/static-webpage-deployment-for-a-beginner",[2062,2061,3387,3388,1528],"Vue.js","Caddy",{"type":13,"value":3390,"toc":4775},[3391,3408,3412,3415,3426,3429,3432,3435,3438,3446,3449,3456,3465,3468,3471,3474,3477,3481,3484,3487,3490,3493,3496,3499,3502,3505,3508,3511,3515,3518,3522,3525,3528,3554,3650,3653,3656,3659,3672,3679,3690,3693,3699,3704,3707,3713,3716,3721,3725,3738,3848,3852,3860,3863,3981,3984,4009,4012,4019,4055,4058,4062,4066,4071,4074,4087,4090,4110,4117,4164,4178,4195,4201,4217,4223,4238,4247,4266,4273,4276,4279,4282,4285,4288,4292,4297,4300,4332,4335,4338,4344,4347,4412,4416,4420,4424,4427,4434,4502,4506,4509,4513,4520,4526,4564,4568,4574,4579,4623,4633,4639,4642,4645,4648,4651,4667,4670,4687,4690,4707,4710,4726,4729,4745,4748,4762,4765,4769,4772],[16,3392,3393,3402,3405],{},[19,3394,3395,3396,3401],{},"这篇博客是受 ",[23,3397,3400],{"href":3398,"rel":3399},"https://blog.tiancy.cn/",[27],"Tiancy"," 之托，在2023年精弘网络暑期授课的前端系列第七节课时针对项目部署这一块内容时所产生的产物。在授课视频中，受时长所限，我不得不采用宝塔面板+纯 ip 访问的方式来完成一个简单的部署，但这终究不是什么优雅的方案: 宝塔的安全性堪忧、其隐私性也是备受争议，而纯 ip 访问的方式也过于简陋，且没有支持 https 访问。",[19,3403,3404],{},"因此这篇博客将以面对初学者的口吻去讲述如何从零开始部署一个 Vue.js 的项目到云服务器，以解我心头的愧疚。但是，我没有备案过的域名，且国内云服务器厂商众多，这篇博客终究不可能做到像保姆级教学那样去一一演示每一家云服务器厂商网页面板上的操作过程，而一些比较基础的概念我会给出简单的解释和例子以及引用一些外部链接，但终究不会全面覆盖到，诸位还请见谅。",[19,3406,3407],{},"本文采用了一些 ChatGPT 和 Google Bard 提供的内容，准确性经过我本人核阅。",[29,3409,3411],{"id":3410},"基础-web-知识","基础 Web 知识",[19,3413,3414],{},"针对以下三个知识点，我是在初中的信息课上学到的，互联网上应该不乏对于这三个问题的权威解释，因此我也不在此赘述，不知道的小伙伴请自行搜索。",[352,3416,3417,3420,3423],{},[60,3418,3419],{},"ip 地址是什么",[60,3421,3422],{},"域名是什么",[60,3424,3425],{},"DNS 服务器是干什么的",[29,3427,3428],{"id":3428},"关于备案",[100,3430,3431],{"id":3431},"不备案的影响",[19,3433,3434],{},"当你通过域名去访问境内服务器的 80 (http 默认端口) 和 443 (https 默认端口)时，如果该域名没有备案或者境内这台云服务器的云服务器商不知道你在别的服务商那里有备案的情况下，则会对请求进行拦截。对于访问 80 的请求，将会直接劫持 http 请求以重定向到他们的备案提示页面；对于访问 443 的请求，由于 https 没法被劫持，则会通过连接重置的方式阻止你访问。如果你确定你需要使用中国大陆境内的云服务器，应当采取「备案」和「接入备案」两种方式分别解决上述两种情况。",[100,3436,3437],{"id":3437},"备案方法",[19,3439,3440,3441,49],{},"每个省都有自己对应的管局，而各省的管局对于备案的规则都有些差异，而个人备案一般是找自己户籍所在地的管局去备案，详细的可以看",[23,3442,3445],{"href":3443,"rel":3444},"https://help.aliyun.com/zh/icp-filing/user-guide/icp-filing-regulations-of-the-miit-for-different-regions",[27],"阿里云写的文档",[100,3447,3448],{"id":3448},"使用中国大陆境外的云服务器",[19,3450,3451,3452,3455],{},"可以选择和我一样去中国大陆以外的地区部署云服务，但由于众所周知的原因，访问别的国家或地区的服务器可能会有速度慢、延迟高等问题，这涉及到线路优化，也比较复杂。更糟糕的情况是，你甚至有可能刚开出来一台机子就发现这个 ip 在中国大陆境内是无法访问到的，这也是比较尴尬的地方。一般来说，可以选择在境内的云服务器商那里实名认证（不是备案）去购买他们的境外服务器（比如 ucloud 新用户优惠的香港云服务器，",[1616,3453,3454],{},"ucloud 的客户经理看到了能不能再送我一台机子啊","），这种机子是线路相对比较好的。",[19,3457,3458,3459,3464],{},"选购中国大陆境外的云服务器时，厂商可能会提供测试 ip 来帮助你判断线路质量，可以使用 ipip.net 提供的 ",[23,3460,3463],{"href":3461,"rel":3462},"https://www.ipip.net/product/client.html",[27],"besttrace"," 程序来查看数据包经过的地方，很可能你买一台香港的服务器，数据却要从日本或者美国绕一圈，这就非常尴尬。",[29,3466,3467],{"id":3467},"域名部分",[100,3469,3470],{"id":3470},"域名注册",[19,3472,3473],{},"要获得一个域名，最简单的方式是花钱。境内的阿里云、腾讯云、华为云等几家比较有名的云服务器厂商均有域名注册的业务且价格基本差距不大，可以随便找一个注册。而境外的域名注册商，我这边个人推荐 namesilo，这家支持支付宝付款且价格尚可，首次购买前可以去搜索引擎搜一搜近期的优惠码，可能会有一些优惠折扣。（可恶我没有拿到 aff 回扣）",[100,3475,3476],{"id":3476},"域名解析",[3478,3479,3480],"h4",{"id":3480},"域名解析的作用",[19,3482,3483],{},"如果你了解了 dns 的作用，那我们可以来简单讲讲域名解析是干什么的。dns 服务器将会告诉用户的设备某一个域名它对应的 ip 是多少，而域名解析这一步就是告诉世界上所有的 dns 服务器这个域名从此刻开始对应的 ip 是多少，以便世界上所有的 dns 服务器向网民在需要时告知他们正确的 ip 地址。",[19,3485,3486],{},"要实现这一步骤并不复杂，作为初学者我们也不必去担心会不会有人把你花钱买来的域名指向错误的 ip 地址，这些都交给域名解析服务去解决。几乎每一家提供的域名解析服务页面上都会指导你去将域名的 NameServer 设置为他们家的服务器，这里也不做教学。",[3478,3488,3489],{"id":3489},"域名解析服务推荐",[19,3491,3492],{},"凡是提供域名注册服务的云服务商基本也都会提供域名解析服务，在这里我主要推荐两家云服务商（我没拿广告费啊）—— cloudflare 和 dnspod。这两家免费版套餐的操作页面都简洁明了，没有非常扎眼的广告。前者提供了除中国大陆以外地区的 cdn 加速服务，而后者可以提供境内境外分线路解析的功能（把来自境内的用户指向 ip 地址 A，来自境外的用户指向 ip 地址 B）。",[3478,3494,3495],{"id":3495},"解析记录类型",[19,3497,3498],{},"作为初学者只需要了解 A 记录和 CNAME 记录就行了。",[19,3500,3501],{},"A 记录的意思就是将一个域名指向一个 ipv4 地址，也就是去实现 dns 服务器最主要的作用。而 CNAME 记录是将一个域名指向另一个域名，通俗来讲就是「和它一样」。比如 a.com 如果 CNAME 指向 b.com，意思就是说我现在不确定 a.com 的 ip 是多少，但我知道 a.com 的 ip 和 b.com 一样，所以你去查 b.com 就行了。",[29,3503,3504],{"id":3504},"服务器部分",[100,3506,3507],{"id":3507},"云服务器的购买",[19,3509,3510],{},"这部分我直接忽略过去了，本文在「关于备案」这一部分已经详细阐述了备案相关的内容，购买中国大陆境内还是境外的服务器需要由屏幕前的各位自己决定~~（应该没人会把我的博客打印成纸质稿看吧）~~。",[100,3512,3514],{"id":3513},"如何选择云服务器上要运行的-linux-发行版","如何选择云服务器上要运行的 Linux 发行版",[19,3516,3517],{},"服务器上常用的 Linux 发行版主要是 Debian、Ubuntu、CentOS(这个死得差不多了) 这三个，那我个人更熟悉的是 Ubuntu，版本号越新越好，截止本文发出最新的 lts 版本是 22.04 lts，所以直接选择这个就行。",[100,3519,3521],{"id":3520},"使用-ssh-连接上服务器","使用 ssh 连接上服务器",[19,3523,3524],{},"在云服务器的网页面板上选择好服务器的配置与运行的操作系统后，云服务商应该至少给你提供两样东西: 云服务器的 ip 和 root 用户的登陆密码。这可能是在网页面板上展示的，一些境外的云服务商可能是直接发送到你注册时预留的邮箱中的，这都无所谓。拿到这两样东西我们就可以使用 ssh 连接到服务器的终端，进行配置操作。",[19,3526,3527],{},"打开自己系统的终端，使用如下命令去连接云服务器（Win10 以上的系统应该也已经自带 openssh 了）",[107,3529,3533],{"className":3530,"code":3531,"language":3532,"meta":116,"style":116},"language-bash shiki shiki-themes github-light github-dark","ssh root@\u003Cyour_server_ip>\n","bash",[114,3534,3535],{"__ignoreMap":116},[163,3536,3537,3540,3543,3546,3549,3551],{"class":165,"line":166},[163,3538,3539],{"class":1594},"ssh",[163,3541,3542],{"class":627}," root@",[163,3544,1587],{"class":3545},"szBVR",[163,3547,3548],{"class":627},"your_server_i",[163,3550,19],{"class":614},[163,3552,3553],{"class":3545},">\n",[107,3555,3557],{"className":3530,"code":3556,"language":3532,"meta":116,"style":116},"[zhullyb@Archlinux ~]$ ssh root@120.55.63.96\nThe authenticity of host '120.55.63.96 (120.55.63.96)' can't be established.\nED25519 key fingerprint is SHA256:Op8u4Fv+NvtOxJDKeBQ/jIsFpuR4EYTUt53qjG8k6ok.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '120.55.63.96' (ED25519) to the list of known hosts.\nroot@120.55.63.96's password: \nWelcome to Ubuntu 22.04.2 LTS (GNU/Linux 5.15.0-78-generic x86_64)\n",[114,3558,3559,3570,3590,3595,3600,3605,3610,3621],{"__ignoreMap":116},[163,3560,3561,3564,3567],{"class":165,"line":166},[163,3562,3563],{"class":614},"[zhullyb@Archlinux ",[163,3565,3566],{"class":3545},"~",[163,3568,3569],{"class":614},"]$ ssh root@120.55.63.96\n",[163,3571,3572,3575,3578,3581,3584,3587],{"class":165,"line":172},[163,3573,3574],{"class":1594},"The",[163,3576,3577],{"class":627}," authenticity",[163,3579,3580],{"class":627}," of",[163,3582,3583],{"class":627}," host",[163,3585,3586],{"class":627}," '120.55.63.96 (120.55.63.96)'",[163,3588,3589],{"class":627}," can't be established.\n",[163,3591,3592],{"class":165,"line":178},[163,3593,3594],{"class":627},"ED25519 key fingerprint is SHA256:Op8u4Fv+NvtOxJDKeBQ/jIsFpuR4EYTUt53qjG8k6ok.\n",[163,3596,3597],{"class":165,"line":184},[163,3598,3599],{"class":627},"This key is not known by any other names.\n",[163,3601,3602],{"class":165,"line":190},[163,3603,3604],{"class":627},"Are you sure you want to continue connecting (yes/no/[fingerprint])? yes\n",[163,3606,3607],{"class":165,"line":265},[163,3608,3609],{"class":627},"Warning: Permanently added '120.55.63.96' (ED25519) to the list of known hosts.\n",[163,3611,3612,3615,3618],{"class":165,"line":270},[163,3613,3614],{"class":627},"root@120.55.63.96's",[163,3616,3617],{"class":627}," password:",[163,3619,3620],{"class":614}," \n",[163,3622,3623,3626,3629,3632,3635,3638,3641,3644,3647],{"class":165,"line":276},[163,3624,3625],{"class":1594},"Welcome",[163,3627,3628],{"class":627}," to",[163,3630,3631],{"class":627}," Ubuntu",[163,3633,3634],{"class":620}," 22.04.2",[163,3636,3637],{"class":627}," LTS",[163,3639,3640],{"class":614}," (GNU/Linux ",[163,3642,3643],{"class":627},"5.15.0-78-generic",[163,3645,3646],{"class":627}," x86_64",[163,3648,3649],{"class":614},")\n",[19,3651,3652],{},"输入密码时，已经输入的密码部分在屏幕上不会显示，但无需理会，只要将云服务器的密码粘贴后直接敲回车就好。",[100,3654,3655],{"id":3655},"如何编辑一个服务器上的文件",[19,3657,3658],{},"一般来说，网上的教程会推荐你使用 vim 这个 tui 界面的编辑器去编辑这个文件，但 vim 的学习成本有点高，如果只是临时编辑服务器上的文件的话，我个人更加推荐使用 nano",[107,3660,3662],{"className":3530,"code":3661,"language":3532,"meta":116,"style":116},"nano /etc/caddy/conf.d/example.conf\n",[114,3663,3664],{"__ignoreMap":116},[163,3665,3666,3669],{"class":165,"line":166},[163,3667,3668],{"class":1594},"nano",[163,3670,3671],{"class":627}," /etc/caddy/conf.d/example.conf\n",[19,3673,3674,3675,3678],{},"这行命令表示我要编辑 ",[114,3676,3677],{},"/etc/caddy/conf.d/example.conf"," 这个文件，如果这个文件不存在则去创建这个文件。",[19,3680,3681,3682,3685,3686,3689],{},"随后你可以根据自己的需求去编辑文件了，上下左右按键可以调整光标位置，直接敲键盘上的字母按键就可以把字母敲进去，想推出时使用 ",[114,3683,3684],{},"ctrl+s"," 保存，再使用 ",[114,3687,3688],{},"ctrl+x"," 退出就可以了。",[100,3691,3692],{"id":3692},"云服务器的安全组规则",[19,3694,3695,3696],{},"一般是国内的云服务厂商会有安全组规则这种东西，你可以理解成一个额外的防火墙。一般来说，80 和 443 两个端口被我们约定作为网页的默认端口，80 是 http 的端口，而 443 则是 https 的端口。因此，我们需要在安全组规则这里去允许 80 和 443 两个端口能被外部访问到。截图中是阿里云的控制面板。",[717,3697],{"alt":116,"src":3698},"https://static.031130.xyz/uploads/2024/08/12/64d4e31fd5270.webp",[19,3700,3701],{},[717,3702],{"alt":116,"src":3703},"https://static.031130.xyz/uploads/2024/08/12/64d4e34db94ee.webp",[19,3705,3706],{},"云服务商给的默认规则应该是下面这个样子的:",[19,3708,3709],{},[717,3710],{"alt":3711,"src":3712},"image-20230810151900653","https://static.031130.xyz/uploads/2024/08/12/64d4e3ca6aa29.webp",[19,3714,3715],{},"这里开放的 22 端口用于 ssh 连接服务器，而3389 则是 Windows 的远程桌面。我们可以使用「快速添加」按钮来开放 80 和 443 端口",[19,3717,3718],{},[717,3719],{"alt":116,"src":3720},"https://static.031130.xyz/uploads/2024/08/12/64d4e4e5b1e68.webp",[100,3722,3724],{"id":3723},"linux-下常见的文件路径及对应作用","Linux 下常见的文件路径及对应作用",[19,3726,3727,3728,3733,3734,3737],{},"在这一章节中，我只罗列了几个比较常见的路径，更多的资料推荐查阅",[23,3729,3732],{"href":3730,"rel":3731},"https://www.runoob.com/linux/linux-system-contents.html",[27],"菜鸟教程","，写得还不错。",[114,3735,3736],{},"$USER"," 指当前用户的用户名",[3739,3740,3741,3754],"table",{},[3742,3743,3744],"thead",{},[3745,3746,3747,3751],"tr",{},[3748,3749,3750],"th",{},"路径",[3748,3752,3753],{},"作用",[3755,3756,3757,3772,3782,3795,3808,3818,3828,3838],"tbody",{},[3745,3758,3759,3765],{},[3760,3761,3762],"td",{},[114,3763,3764],{},"/home/$USER",[3760,3766,3767,3768,3771],{},"用户的家目录，下有 Desktop，Download，Picture 等多个文件夹（root 用户的家目录是 ",[114,3769,3770],{},"/root","）",[3745,3773,3774,3779],{},[3760,3775,3776],{},[114,3777,3778],{},"/etc",[3760,3780,3781],{},"存放软件的配置文件的地方",[3745,3783,3784,3789],{},[3760,3785,3786],{},[114,3787,3788],{},"/usr/bin",[3760,3790,3791,3792],{},"存放二进制可执行文件的地方，一般也会被链接到 ",[114,3793,3794],{},"/bin",[3745,3796,3797,3802],{},[3760,3798,3799],{},[114,3800,3801],{},"/usr/lib",[3760,3803,3804,3805],{},"一般用于存放依赖库(动态链接库)，一般会被链接到 ",[114,3806,3807],{},"/lib",[3745,3809,3810,3815],{},[3760,3811,3812],{},[114,3813,3814],{},"/usr/share",[3760,3816,3817],{},"一些共享数据，比如帮助文档、软件需要的资源文件等等",[3745,3819,3820,3825],{},[3760,3821,3822],{},[114,3823,3824],{},"/opt",[3760,3826,3827],{},"optional(可选) 的缩写，一些由官网提供的（区别于发行版自带的）软件可能被安装到这里",[3745,3829,3830,3835],{},[3760,3831,3832],{},[114,3833,3834],{},"/boot",[3760,3836,3837],{},"开机引导使用的路径，一般在正常使用时不会去操作这里",[3745,3839,3840,3845],{},[3760,3841,3842],{},[114,3843,3844],{},"/var",[3760,3846,3847],{},"variable(变量) 的缩写，存放那些经常被变更的东西，比如运行日志、网站数据等等",[100,3849,3851],{"id":3850},"caddy-的配置与使用","caddy 的配置与使用",[19,3853,3854,3855,3859],{},"caddy 是一个 web 服务器，他是使用 golang 写的一个平替品，拥有配置更简单、自动申请 Let's Encrypt 证书的优势，我个人非常推荐非专业运维去使用这个。caddy 的官方文档在 ",[23,3856,3857],{"href":3857,"rel":3858},"https://caddyserver.com/docs/",[27]," ，但我相信你们不会去看（我也没有认真看过），有问题可以尝试去问问 chatgpt 看看能不能得到想要的配置文件。caddy 现在已经迭代到 V2 版本了，与 V1 版本相比有一些语法差异以支持更多的功能，且许可证允许商用更加自由。",[19,3861,3862],{},"caddy V2 支持使用 json 配置文件或者 Caddyfile，对于不复杂的需求我个人更推荐后者，简洁易懂。下面是我博客所使用的 Caddyfile 示例:",[107,3864,3868],{"className":3865,"code":3866,"language":3867,"meta":116,"style":116},"language-nginx shiki shiki-themes github-light github-dark","# 这里表示，使用 zhul.in 这个域名访问 443 端口时，提供以下内容\nzhul.in:443 {\n        # 这里设置了所需提供内容的目录\n        root * /var/www/blog\n\n        # 这里设置的是开启 https 支持时所需要使用的 ssl 证书文件，但如果不设置也不碍事，caddy 会自动帮你申请 Let's Encrypt 的 ssl 证书\n        tls /var/www/key/zhul.in.cert /var/www/key/zhul.in.key\n\n        # 这里表示我们开启了 zstd 和 gzip 两种压缩算法，来减少数据传输量，不设置也没问题\n        encode zstd gzip\n        # 这里表示我们开启了一个文件服务器，当你访问 https://zhul.in/example_file 时，caddy 会提供 /var/www/blog/example_file 这个文件的内容\n        file_server\n\n        # 这里是错误处理部分\n        handle_errors {\n                # 这里表示当发生错误时，将请求重定向到 /404.html 这个文件\n                rewrite * /404.html\n                # 这里使用了模板来处理错误页面。当发生错误时，Caddy会使用模板引擎来填充错误页面的内容，以便向用户显示有关错误的相关信息。\n                templates\n                #这里表示继续使用文件服务器来提供错误页面\n                file_server\n        }\n}\n","nginx",[114,3869,3870,3875,3880,3885,3890,3894,3899,3904,3908,3913,3918,3923,3928,3932,3937,3942,3947,3952,3957,3962,3967,3972,3977],{"__ignoreMap":116},[163,3871,3872],{"class":165,"line":166},[163,3873,3874],{},"# 这里表示，使用 zhul.in 这个域名访问 443 端口时，提供以下内容\n",[163,3876,3877],{"class":165,"line":172},[163,3878,3879],{},"zhul.in:443 {\n",[163,3881,3882],{"class":165,"line":178},[163,3883,3884],{},"        # 这里设置了所需提供内容的目录\n",[163,3886,3887],{"class":165,"line":184},[163,3888,3889],{},"        root * /var/www/blog\n",[163,3891,3892],{"class":165,"line":190},[163,3893,257],{"emptyLinePlaceholder":256},[163,3895,3896],{"class":165,"line":265},[163,3897,3898],{},"        # 这里设置的是开启 https 支持时所需要使用的 ssl 证书文件，但如果不设置也不碍事，caddy 会自动帮你申请 Let's Encrypt 的 ssl 证书\n",[163,3900,3901],{"class":165,"line":270},[163,3902,3903],{},"        tls /var/www/key/zhul.in.cert /var/www/key/zhul.in.key\n",[163,3905,3906],{"class":165,"line":276},[163,3907,257],{"emptyLinePlaceholder":256},[163,3909,3910],{"class":165,"line":281},[163,3911,3912],{},"        # 这里表示我们开启了 zstd 和 gzip 两种压缩算法，来减少数据传输量，不设置也没问题\n",[163,3914,3915],{"class":165,"line":287},[163,3916,3917],{},"        encode zstd gzip\n",[163,3919,3920],{"class":165,"line":292},[163,3921,3922],{},"        # 这里表示我们开启了一个文件服务器，当你访问 https://zhul.in/example_file 时，caddy 会提供 /var/www/blog/example_file 这个文件的内容\n",[163,3924,3925],{"class":165,"line":432},[163,3926,3927],{},"        file_server\n",[163,3929,3930],{"class":165,"line":438},[163,3931,257],{"emptyLinePlaceholder":256},[163,3933,3934],{"class":165,"line":443},[163,3935,3936],{},"        # 这里是错误处理部分\n",[163,3938,3939],{"class":165,"line":448},[163,3940,3941],{},"        handle_errors {\n",[163,3943,3944],{"class":165,"line":454},[163,3945,3946],{},"                # 这里表示当发生错误时，将请求重定向到 /404.html 这个文件\n",[163,3948,3949],{"class":165,"line":460},[163,3950,3951],{},"                rewrite * /404.html\n",[163,3953,3954],{"class":165,"line":465},[163,3955,3956],{},"                # 这里使用了模板来处理错误页面。当发生错误时，Caddy会使用模板引擎来填充错误页面的内容，以便向用户显示有关错误的相关信息。\n",[163,3958,3959],{"class":165,"line":471},[163,3960,3961],{},"                templates\n",[163,3963,3964],{"class":165,"line":476},[163,3965,3966],{},"                #这里表示继续使用文件服务器来提供错误页面\n",[163,3968,3969],{"class":165,"line":481},[163,3970,3971],{},"                file_server\n",[163,3973,3974],{"class":165,"line":3},[163,3975,3976],{},"        }\n",[163,3978,3979],{"class":165,"line":492},[163,3980,583],{},[19,3982,3983],{},"你可以发现，如果要把这个 Caddyfile 写到最简单，仅仅是能跑的状态，只需要这几行:",[107,3985,3987],{"className":3865,"code":3986,"language":3867,"meta":116,"style":116},"zhul.in:443 {\n        root * /var/www/blog\n        \n        file_server\n}\n",[114,3988,3989,3993,3997,4001,4005],{"__ignoreMap":116},[163,3990,3991],{"class":165,"line":166},[163,3992,3879],{},[163,3994,3995],{"class":165,"line":172},[163,3996,3889],{},[163,3998,3999],{"class":165,"line":178},[163,4000,2866],{},[163,4002,4003],{"class":165,"line":184},[163,4004,3927],{},[163,4006,4007],{"class":165,"line":190},[163,4008,583],{},[19,4010,4011],{},"这就是我为什么推荐非专业运维去使用 caddy 的原因，只需要三行代码就可以跑起来一个简单的服务。",[19,4013,4014,4015,4018],{},"而部署一个 Vue.js 项目，我们可能会需要多加一行 ",[114,4016,4017],{},"try_files {path} {path}/ /index.html"," ，这一行代码的意思是当用户尝试访问 /example 时，实际需要用户的浏览器去访问 /index.html 这个地方，因为使用了 vue-router 的项目的编译产物只有 /index.html 而没有 /example.html，而后者的内容是包括在前者中的。以下的 Caddyfile 是精弘的首页正在使用的配置文件，应该可以适用于绝大多数的 Vue 项目:",[107,4020,4022],{"className":3865,"code":4021,"language":3867,"meta":116,"style":116},"www.myzjut.org {\n        root * /var/www/jh\n\n        encode zstd gzip\n        file_server\n        try_files {path} {path} /index.html\n}\n",[114,4023,4024,4029,4034,4038,4042,4046,4051],{"__ignoreMap":116},[163,4025,4026],{"class":165,"line":166},[163,4027,4028],{},"www.myzjut.org {\n",[163,4030,4031],{"class":165,"line":172},[163,4032,4033],{},"        root * /var/www/jh\n",[163,4035,4036],{"class":165,"line":178},[163,4037,257],{"emptyLinePlaceholder":256},[163,4039,4040],{"class":165,"line":184},[163,4041,3917],{},[163,4043,4044],{"class":165,"line":190},[163,4045,3927],{},[163,4047,4048],{"class":165,"line":265},[163,4049,4050],{},"        try_files {path} {path} /index.html\n",[163,4052,4053],{"class":165,"line":270},[163,4054,583],{},[19,4056,4057],{},"第一行省略了端口号，说明 80 和 443 端口都支持。",[100,4059,4061],{"id":4060},"通过sftprsync将本地的静态网页上传到云服务器的对应目录","通过sftp/rsync将本地的静态网页上传到云服务器的对应目录",[3478,4063,4065],{"id":4064},"使用-sftp-部署","使用 sftp 部署",[16,4067,4068],{},[19,4069,4070],{},"sftp 是一个交互性比较强的上下传工具，如果不喜欢背命令的话可以考虑使用 sftp，操作起来都比较顺其自然",[19,4072,4073],{},"首先，我们在本地 cd 到静态网页文件所在的路径，比如一个 Vue 项目编译产生的文件可能就会在 dist 下面",[107,4075,4077],{"className":3530,"code":4076,"language":3532,"meta":116,"style":116},"cd dist/\n",[114,4078,4079],{"__ignoreMap":116},[163,4080,4081,4084],{"class":165,"line":166},[163,4082,4083],{"class":620},"cd",[163,4085,4086],{"class":627}," dist/\n",[19,4088,4089],{},"然后，我们使用 sftp 连接到服务器，这和 ssh 命令没什么两样的，就换了个命令名。",[107,4091,4093],{"className":3530,"code":4092,"language":3532,"meta":116,"style":116},"sftp root@\u003Cyour_server_ip>\n",[114,4094,4095],{"__ignoreMap":116},[163,4096,4097,4100,4102,4104,4106,4108],{"class":165,"line":166},[163,4098,4099],{"class":1594},"sftp",[163,4101,3542],{"class":627},[163,4103,1587],{"class":3545},[163,4105,3548],{"class":627},[163,4107,19],{"class":614},[163,4109,3553],{"class":3545},[19,4111,4112,4113,4116],{},"输入 root 用户的密码后，命令行的提示符就会变成 ",[114,4114,4115],{},"sftp >"," 的样子",[107,4118,4120],{"className":3530,"code":4119,"language":3532,"meta":116,"style":116},"[zhullyb@Archlinux ~]$ sftp root@\u003Cyour_server_ip>\nConnected to \u003Cyour_server_ip>.\nsftp>\n",[114,4121,4122,4138,4158],{"__ignoreMap":116},[163,4123,4124,4126,4128,4131,4133,4136],{"class":165,"line":166},[163,4125,3563],{"class":614},[163,4127,3566],{"class":3545},[163,4129,4130],{"class":614},"]$ sftp root@",[163,4132,1587],{"class":3545},[163,4134,4135],{"class":614},"your_server_ip",[163,4137,3553],{"class":3545},[163,4139,4140,4143,4145,4148,4150,4152,4155],{"class":165,"line":172},[163,4141,4142],{"class":1594},"Connected",[163,4144,3628],{"class":627},[163,4146,4147],{"class":3545}," \u003C",[163,4149,3548],{"class":627},[163,4151,19],{"class":614},[163,4153,4154],{"class":3545},">",[163,4156,4157],{"class":627},".\n",[163,4159,4160,4162],{"class":165,"line":178},[163,4161,4099],{"class":1594},[163,4163,3553],{"class":614},[19,4165,4166,4167,4169,4170,4173,4174,4177],{},"这是一个交互式的命令行窗口，可以使用 ",[114,4168,4083],{},"、",[114,4171,4172],{},"mkdir"," 等几个简单的命令。我们先创建 ",[114,4175,4176],{},"/var/www"," 这个文件夹:",[107,4179,4181],{"className":3530,"code":4180,"language":3532,"meta":116,"style":116},"sftp> mkdir /var/www\n",[114,4182,4183],{"__ignoreMap":116},[163,4184,4185,4187,4190,4192],{"class":165,"line":166},[163,4186,4099],{"class":1594},[163,4188,4189],{"class":614},"> ",[163,4191,4172],{"class":627},[163,4193,4194],{"class":627}," /var/www\n",[19,4196,4197,4198,4177],{},"再创建 ",[114,4199,4200],{},"/var/www/jh",[107,4202,4204],{"className":3530,"code":4203,"language":3532,"meta":116,"style":116},"sftp> mkdir /var/www/jh\n",[114,4205,4206],{"__ignoreMap":116},[163,4207,4208,4210,4212,4214],{"class":165,"line":166},[163,4209,4099],{"class":1594},[163,4211,4189],{"class":614},[163,4213,4172],{"class":627},[163,4215,4216],{"class":627}," /var/www/jh\n",[19,4218,4219,4220,4222],{},"随后，我们就可以进入远程服务器的 ",[114,4221,4200],{}," 目录下",[107,4224,4226],{"className":3530,"code":4225,"language":3532,"meta":116,"style":116},"sftp> cd /var/www/jh\n",[114,4227,4228],{"__ignoreMap":116},[163,4229,4230,4232,4234,4236],{"class":165,"line":166},[163,4231,4099],{"class":1594},[163,4233,4189],{"class":614},[163,4235,4083],{"class":627},[163,4237,4216],{"class":627},[19,4239,4240,4241,4244,4245],{},"这样我们就可以把本地的静态网页文件上传到服务器，使用 ",[114,4242,4243],{},"put"," 命令即可，下面的命令表示将本地当前目录下的所有文件以及其子文件夹全部内容都上传到服务器的当前文件夹，也就是 ",[114,4246,4200],{},[107,4248,4250],{"className":3530,"code":4249,"language":3532,"meta":116,"style":116},"sftp> put -r *\n",[114,4251,4252],{"__ignoreMap":116},[163,4253,4254,4256,4258,4260,4263],{"class":165,"line":166},[163,4255,4099],{"class":1594},[163,4257,4189],{"class":614},[163,4259,4243],{"class":627},[163,4261,4262],{"class":620}," -r",[163,4264,4265],{"class":620}," *\n",[19,4267,4268,4269,4272],{},"再输入 ",[114,4270,4271],{},"exit"," 即可推出 sftp 状态。",[19,4274,4275],{},"这边再教一些 sftp 使用中的常用命令:",[19,4277,4278],{},"ls: 查看远程服务器中当前目录中所有非隐藏文件",[19,4280,4281],{},"lls: 查看本地当前路径中的所有非隐藏文件",[19,4283,4284],{},"pwd: 查看远程服务器中当前的路径",[19,4286,4287],{},"lpwd: 查看本地当前的路径",[3478,4289,4291],{"id":4290},"使用-rsync-部署","使用 rsync 部署",[16,4293,4294],{},[19,4295,4296],{},"rsync 的交互性就不太强，是在本机操作的，需要提前写好一行比较长的命令去执行操作，比较适合写在脚本里。",[19,4298,4299],{},"下面这行代码是我们精弘网络首页使用 github action 部署时的命令",[107,4301,4303],{"className":3530,"code":4302,"language":3532,"meta":116,"style":116},"rsync -avzP --delete dist/ root@\u003Cyour_server_ip>:/var/www/jh/\n",[114,4304,4305],{"__ignoreMap":116},[163,4306,4307,4310,4313,4316,4319,4321,4323,4325,4327,4329],{"class":165,"line":166},[163,4308,4309],{"class":1594},"rsync",[163,4311,4312],{"class":620}," -avzP",[163,4314,4315],{"class":620}," --delete",[163,4317,4318],{"class":627}," dist/",[163,4320,3542],{"class":627},[163,4322,1587],{"class":3545},[163,4324,3548],{"class":627},[163,4326,19],{"class":614},[163,4328,4154],{"class":3545},[163,4330,4331],{"class":627},":/var/www/jh/\n",[19,4333,4334],{},"dist/ 表示我想要上传当前路径下的 dist 文件夹下的所有文件",[19,4336,4337],{},"root@\u003Cyour_server_ip> 这一段和前面的 ssh 与 sftp 一样，都表示用户名和对应的服务器 ip，",[19,4339,4340,4343],{},[114,4341,4342],{},":var/www/jh"," 表示文件将被上传到服务器的这个路径下。",[19,4345,4346],{},"以下是 rsync 的一些常用参数：",[352,4348,4349,4355,4361,4367,4373],{},[60,4350,4351,4354],{},[114,4352,4353],{},"-a","：以归档模式进行同步，即保持文件的所有属性（如权限、属主、属组、时间戳等）。",[60,4356,4357,4360],{},[114,4358,4359],{},"-v","：显示详细的同步过程。",[60,4362,4363,4366],{},[114,4364,4365],{},"-z","：使用压缩算法进行数据传输，以减少网络带宽的占用。",[60,4368,4369,4372],{},[114,4370,4371],{},"--delete","：在目标目录中删除源目录中不存在的文件。",[60,4374,4375,4378,4379,4381,4382,4385,4386,4389,4390,4405,4408,4409,4411],{},[114,4376,4377],{},"-P","选项是",[114,4380,4309],{},"命令的一个常用选项，它的作用是将",[114,4383,4384],{},"--partial","和",[114,4387,4388],{},"--progress","选项组合在一起使用。",[352,4391,4392,4400],{},[60,4393,4394,4396,4397,4399],{},[114,4395,4384],{},"选项表示如果文件传输被中断，",[114,4398,4309],{},"会保留已经传输的部分文件，下次继续传输时可以从上次中断的地方继续。",[60,4401,4402,4404],{},[114,4403,4388],{},"选项表示显示文件传输的进度信息，包括已经传输的字节数、传输速度和估计剩余时间等。",[4406,4407],"br",{},"使用",[114,4410,4377],{},"选项可以方便地同时启用这两个选项，以便在文件传输期间显示进度信息，并在中断后继续传输。",[29,4413,4415],{"id":4414},"附-其他相关的一些操作技巧还没写完等我填坑","附 : 其他相关的一些操作技巧（还没写完，等我填坑）",[100,4417,4419],{"id":4418},"使用-ssh-copy-id-将本地的-ssh-公钥复制到服务器上","使用 ssh-copy-id 将本地的 ssh 公钥复制到服务器上",[100,4421,4423],{"id":4422},"配置-sshd-以加强服务器的安全性","配置 sshd 以加强服务器的安全性",[19,4425,4426],{},"sshd 是 Secure Shell Daemon 的缩写，它是一个 ssh 的守护进程，允许用户通过 SSH 协议安全地连接到远程服务器。",[19,4428,4429,4430,4433],{},"sshd 的配置文件应该在 ",[114,4431,4432],{},"/etc/ssh/sshd_config"," 文件中，通过更改其中一些配置项，我们可以让我们的服务器更安全。",[3739,4435,4436,4446],{},[3742,4437,4438],{},[3745,4439,4440,4443],{},[3748,4441,4442],{},"建议",[3748,4444,4445],{},"修改方式",[3755,4447,4448,4464,4478,4489],{},[3745,4449,4450,4453],{},[3760,4451,4452],{},"禁用 root 用户通过 SSH 登录",[3760,4454,4455,4456,4459,4460,4463],{},"在 sshd配置文件中将 ",[114,4457,4458],{},"PermitRootLogin"," 选项设置为 ",[114,4461,4462],{},"no","。（在此之前，你应该创建一个非 root 用户并设置好对应的账号密码，修改好 /etc/sudoers 文件确保该用户能够通过 sudo 执行一些需要 root 权限去执行的语句）",[3745,4465,4466,4469],{},[3760,4467,4468],{},"强制使用 SSH 密钥登录",[3760,4470,4471,4472,4459,4475,4477],{},"在 sshd 配置文件中将 ",[114,4473,4474],{},"PasswordAuthentication",[114,4476,4462],{},"。（在此之前，你应该完成上一步 ssh-copy-id 将本地的 ssh 公钥复制到服务器上）",[3745,4479,4480,4483],{},[3760,4481,4482],{},"更改 SSH 端口",[3760,4484,4471,4485,4488],{},[114,4486,4487],{},"Port"," 选项设置为一个未使用的端口。（在此之前，使用 ssh 命令连接到服务器时，需要使用 -p \u003Cport> 参数去指定端口）",[3745,4490,4491,4494],{},[3760,4492,4493],{},"启用 SSH 日志记录",[3760,4495,4471,4496,4459,4499,49],{},[114,4497,4498],{},"SyslogFacility",[114,4500,4501],{},"auth",[100,4503,4505],{"id":4504},"systemd-的作用与使用方法","systemd 的作用与使用方法",[19,4507,4508],{},"systemd 是一个用于管理 Linux 系统的服务管理器和初始化系统。",[3478,4510,4512],{"id":4511},"使用-systemctl-命令管理服务状态","使用 systemctl 命令管理服务状态",[19,4514,4515,4516,4519],{},"在我们静态网页部署这一块，我们主要用 ",[114,4517,4518],{},"systemctl"," 命令去管理一些服务的状态，比如我们想要将 caddy 设置为开机自启，这样我们即使重启了服务器，caddy 也能自动开始提供服务。",[19,4521,4522,4523,4525],{},"以下是一些常见的 ",[114,4524,4518],{}," 命令：",[352,4527,4528,4534,4540,4546,4552,4558],{},[60,4529,4530,4533],{},[114,4531,4532],{},"systemctl start","：启动服务。",[60,4535,4536,4539],{},[114,4537,4538],{},"systemctl stop","：停止服务。",[60,4541,4542,4545],{},[114,4543,4544],{},"systemctl restart","：重新启动服务。",[60,4547,4548,4551],{},[114,4549,4550],{},"systemctl status","：查看服务的状态。",[60,4553,4554,4557],{},[114,4555,4556],{},"systemctl enable","：使服务在启动时自动启动。",[60,4559,4560,4563],{},[114,4561,4562],{},"systemctl disable","：使服务在启动时不自动启动。",[3478,4565,4567],{"id":4566},"使用-journalctl-命令来查看日志消息","使用 journalctl 命令来查看日志消息",[19,4569,4570,4571,4573],{},"在服务出现问题的时候，我们可以通过 ",[114,4572,4518],{}," 命令去查看服务在运行过程中留下的日志消息，方便我们去排错。",[19,4575,4522,4576,4525],{},[114,4577,4578],{},"journalctl",[352,4580,4581,4587,4593,4599,4605,4611,4617],{},[60,4582,4583,4586],{},[114,4584,4585],{},"journalctl -b",": 显示当前系统日志。",[60,4588,4589,4592],{},[114,4590,4591],{},"journalctl -b -1",": 显示最近一条系统日志。",[60,4594,4595,4598],{},[114,4596,4597],{},"journalctl -b -10",": 显示最近 10 条系统日志。",[60,4600,4601,4604],{},[114,4602,4603],{},"journalctl -u \u003Cunit>",": 显示指定单元的日志。",[60,4606,4607,4610],{},[114,4608,4609],{},"journalctl -u \u003Cunit> -b",": 显示指定单元的最近系统日志。",[60,4612,4613,4616],{},[114,4614,4615],{},"journalctl -u \u003Cunit> -b -1",": 显示指定单元的最近一条系统日志。",[60,4618,4619,4622],{},[114,4620,4621],{},"journalctl -u \u003Cunit> -b -10",": 显示指定单元的最近 10 条系统日志。",[19,4624,4625,4626,4628,4629,4632],{},"还可以使用 ",[114,4627,4578],{}," 命令来导出日志消息到文件。例如，以下命令将当前系统日志导出到 ",[114,4630,4631],{},"/home/user/journal.log"," 文件：",[107,4634,4637],{"className":4635,"code":4636,"language":112},[110],"journalctl > /home/user/journal.log\n",[114,4638,4636],{"__ignoreMap":116},[100,4640,4641],{"id":4641},"防火墙的配置",[19,4643,4644],{},"关于防火墙，iptables 是 Linux 系统中最早使用的防火墙工具，它基于内核模块来过滤网络数据包。nftables 是 iptables 的继任者，与 iptables 相比，nftables 更简单易用，同时性能也更好。",[19,4646,4647],{},"但我这边想要推荐的是 ufw，他是 iptables 的一个前端，它提供一个更简单、更易于使用的命令行界面。UFW 基于 iptables 来实现其功能，但它不被用来直接使用 iptables 命令。UFW 使用自己的命令来配置防火墙，这些命令被转换为 iptables 命令并执行。",[19,4649,4650],{},"查看 ufw 状态",[107,4652,4654],{"className":3530,"code":4653,"language":3532,"meta":116,"style":116},"sudo ufw status\n",[114,4655,4656],{"__ignoreMap":116},[163,4657,4658,4661,4664],{"class":165,"line":166},[163,4659,4660],{"class":1594},"sudo",[163,4662,4663],{"class":627}," ufw",[163,4665,4666],{"class":627}," status\n",[19,4668,4669],{},"禁用所有端口",[107,4671,4673],{"className":3530,"code":4672,"language":3532,"meta":116,"style":116},"sudo ufw deny all\n",[114,4674,4675],{"__ignoreMap":116},[163,4676,4677,4679,4681,4684],{"class":165,"line":166},[163,4678,4660],{"class":1594},[163,4680,4663],{"class":627},[163,4682,4683],{"class":627}," deny",[163,4685,4686],{"class":627}," all\n",[19,4688,4689],{},"开放 22 端口(ssh 的默认端口，禁用可能导致服务器失联)",[107,4691,4693],{"className":3530,"code":4692,"language":3532,"meta":116,"style":116},"sudo ufw allow 22\n",[114,4694,4695],{"__ignoreMap":116},[163,4696,4697,4699,4701,4704],{"class":165,"line":166},[163,4698,4660],{"class":1594},[163,4700,4663],{"class":627},[163,4702,4703],{"class":627}," allow",[163,4705,4706],{"class":620}," 22\n",[19,4708,4709],{},"开放 80 端口",[107,4711,4713],{"className":3530,"code":4712,"language":3532,"meta":116,"style":116},"sudo ufw allow 80\n",[114,4714,4715],{"__ignoreMap":116},[163,4716,4717,4719,4721,4723],{"class":165,"line":166},[163,4718,4660],{"class":1594},[163,4720,4663],{"class":627},[163,4722,4703],{"class":627},[163,4724,4725],{"class":620}," 80\n",[19,4727,4728],{},"开放 443 端口",[107,4730,4732],{"className":3530,"code":4731,"language":3532,"meta":116,"style":116},"sudo ufw allow 443\n",[114,4733,4734],{"__ignoreMap":116},[163,4735,4736,4738,4740,4742],{"class":165,"line":166},[163,4737,4660],{"class":1594},[163,4739,4663],{"class":627},[163,4741,4703],{"class":627},[163,4743,4744],{"class":620}," 443\n",[19,4746,4747],{},"启用 ufw",[107,4749,4751],{"className":3530,"code":4750,"language":3532,"meta":116,"style":116},"sudo ufw enable\n",[114,4752,4753],{"__ignoreMap":116},[163,4754,4755,4757,4759],{"class":165,"line":166},[163,4756,4660],{"class":1594},[163,4758,4663],{"class":627},[163,4760,4761],{"class":627}," enable\n",[100,4763,4764],{"id":4764},"包管理器是什么",[100,4766,4768],{"id":4767},"linux-常用命令","Linux 常用命令",[100,4770,4771],{"id":4771},"常用的一些debug手段",[1496,4773,4774],{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}",{"title":116,"searchDepth":172,"depth":172,"links":4776},[4777,4778,4783,4787,4797],{"id":3410,"depth":172,"text":3411},{"id":3428,"depth":172,"text":3428,"children":4779},[4780,4781,4782],{"id":3431,"depth":178,"text":3431},{"id":3437,"depth":178,"text":3437},{"id":3448,"depth":178,"text":3448},{"id":3467,"depth":172,"text":3467,"children":4784},[4785,4786],{"id":3470,"depth":178,"text":3470},{"id":3476,"depth":178,"text":3476},{"id":3504,"depth":172,"text":3504,"children":4788},[4789,4790,4791,4792,4793,4794,4795,4796],{"id":3507,"depth":178,"text":3507},{"id":3513,"depth":178,"text":3514},{"id":3520,"depth":178,"text":3521},{"id":3655,"depth":178,"text":3655},{"id":3692,"depth":178,"text":3692},{"id":3723,"depth":178,"text":3724},{"id":3850,"depth":178,"text":3851},{"id":4060,"depth":178,"text":4061},{"id":4414,"depth":172,"text":4415,"children":4798},[4799,4800,4801,4802,4803,4804,4805],{"id":4418,"depth":178,"text":4419},{"id":4422,"depth":178,"text":4423},{"id":4504,"depth":178,"text":4505},{"id":4641,"depth":178,"text":4641},{"id":4764,"depth":178,"text":4764},{"id":4767,"depth":178,"text":4768},{"id":4771,"depth":178,"text":4771},{"title":4807,"date":4808,"path":4809,"tags":4810,"body":4811},"在运行OpenWRT的N1盒子上部署 QQBot","2023-07-31 04:11:31","/2023/07/31/run-qq-bot-on-phicomm-n1-openwrt",[2062,2061,2570],{"type":13,"value":4812,"toc":5343},[4813,4816,4820,4839,4920,4935,4939,4948,4971,4975,4984,4988,4991,4995,4998,5002,5005,5008,5015,5018,5323,5340],[19,4814,4815],{},"由于学校社团的招新需要，我写了一个依赖于 go-cqhttp 运行的 QQ Bot，并没有实现什么花里胡哨的功能，只是实现了关键词回复和新人入群时的欢迎语。因为没考虑后续维护的问题，代码也写得比较草，但毕竟是能跑。这么一个小型的程序并不会占用的多少的服务器资源，单独为这么一个 Bot 去开一台国内的 vps 似乎是有些大材小用了，刚好我手上有一台运行在 OpenWRT 上的 Phicomm N1 盒子，反正也是 Linux 系统，便打算拿来挂 QQ Bot。",[29,4817,4819],{"id":4818},"安装-jdk","安装 JDK",[19,4821,4822,4823,4828,4829,4832,4833,4838],{},"由于腾讯近几个月对于 Bot 风控非常严格，所以不得不采用 SignServer 项目 ",[23,4824,4827],{"href":4825,"rel":4826},"https://github.com/fuqiuluo/unidbg-fetch-qsign",[27],"fuqiuluo/unidbg-fetch-qsign"," 来确保 Bot 账号不会被风控一次保证 Bot 运行的稳定性。而这个项目又是使用 Java 开发的，因此需要先安装 JDK/JRE。但 OpenWRT 的开发者可能并没有考虑到在路由器设备上运行 Java 程序的需求，因此 OpenWRT 的源里面是没有预先打包 JDK 的，因此我们需要额外安装。我直接 google 搜索了 ",[114,4830,4831],{},"install java on openwrt"," 的关键词，在 Github 找到了这个脚本: ",[23,4834,4837],{"href":4835,"rel":4836},"https://gist.github.com/simonswine/64773a80e748f36615e3251234f29d1d%E3%80%82%E4%BD%86%E5%BE%88%E9%81%97%E6%86%BE%EF%BC%8C%E4%BB%A3%E7%A0%81%E8%B7%91%E4%B8%8D%E8%B5%B7%E6%9D%A5%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%97%B6%E6%8F%90%E7%A4%BA",[27],"https://gist.github.com/simonswine/64773a80e748f36615e3251234f29d1d。但很遗憾，代码跑不起来，下载时提示"," 404。于是我打开脚本细细一看，脚本中 jdk 的版本号和设备的架构均需要改动。具体改动如下:",[107,4840,4844],{"className":4841,"code":4842,"language":4843,"meta":116,"style":116},"language-diff shiki shiki-themes github-light github-dark","- REVISION=8.212.04-r0\n+ REVISION=8.302.08-r1\n# 版本号请自行去仓库内翻最新的\n......\n- URL=http://dl-cdn.alpinelinux.org/alpine/v3.10/community/armv7/\n+ URL=http://dl-cdn.alpinelinux.org/alpine/v3.14/community/aarch64/\n......\n- # verify packages\n- sha256sum -c \u003C\u003CEOF\n- e2fce9ee7348e9322c542206c3c3949e40690716d65e9f0e44dbbfca95d59d8c  openjdk8-8.212.04-r0.apk\n- 26ad786ff1ebeeb7cd24abee10bc56211a026a2d871cf161bb309563e1fcbabc  openjdk8-jre-8.212.04-r0.apk\n- 947d5f72ed2dc367c97d1429158913c9366f9c6ae01b7311dd8546b10ded8743  openjdk8-jre-base-- 8.212.04-r0.apk\n- c6a65402bf0a7051c60b45e1c6a8f4277a68a8b7e807078f20db17e0233dea8e  openjdk8-jre-lib-8.212.04-r0.apk\n- EOF\n# 我这里直接将 sha256 校验给删除了，有兴趣可以自己去更新这几个文件的文件名和其对应的哈希值\n","diff",[114,4845,4846,4851,4856,4861,4866,4871,4876,4880,4885,4890,4895,4900,4905,4910,4915],{"__ignoreMap":116},[163,4847,4848],{"class":165,"line":166},[163,4849,4850],{},"- REVISION=8.212.04-r0\n",[163,4852,4853],{"class":165,"line":172},[163,4854,4855],{},"+ REVISION=8.302.08-r1\n",[163,4857,4858],{"class":165,"line":178},[163,4859,4860],{},"# 版本号请自行去仓库内翻最新的\n",[163,4862,4863],{"class":165,"line":184},[163,4864,4865],{},"......\n",[163,4867,4868],{"class":165,"line":190},[163,4869,4870],{},"- URL=http://dl-cdn.alpinelinux.org/alpine/v3.10/community/armv7/\n",[163,4872,4873],{"class":165,"line":265},[163,4874,4875],{},"+ URL=http://dl-cdn.alpinelinux.org/alpine/v3.14/community/aarch64/\n",[163,4877,4878],{"class":165,"line":270},[163,4879,4865],{},[163,4881,4882],{"class":165,"line":276},[163,4883,4884],{},"- # verify packages\n",[163,4886,4887],{"class":165,"line":281},[163,4888,4889],{},"- sha256sum -c \u003C\u003CEOF\n",[163,4891,4892],{"class":165,"line":287},[163,4893,4894],{},"- e2fce9ee7348e9322c542206c3c3949e40690716d65e9f0e44dbbfca95d59d8c  openjdk8-8.212.04-r0.apk\n",[163,4896,4897],{"class":165,"line":292},[163,4898,4899],{},"- 26ad786ff1ebeeb7cd24abee10bc56211a026a2d871cf161bb309563e1fcbabc  openjdk8-jre-8.212.04-r0.apk\n",[163,4901,4902],{"class":165,"line":432},[163,4903,4904],{},"- 947d5f72ed2dc367c97d1429158913c9366f9c6ae01b7311dd8546b10ded8743  openjdk8-jre-base-- 8.212.04-r0.apk\n",[163,4906,4907],{"class":165,"line":438},[163,4908,4909],{},"- c6a65402bf0a7051c60b45e1c6a8f4277a68a8b7e807078f20db17e0233dea8e  openjdk8-jre-lib-8.212.04-r0.apk\n",[163,4911,4912],{"class":165,"line":443},[163,4913,4914],{},"- EOF\n",[163,4916,4917],{"class":165,"line":448},[163,4918,4919],{},"# 我这里直接将 sha256 校验给删除了，有兴趣可以自己去更新这几个文件的文件名和其对应的哈希值\n",[19,4921,4922,4923,4926,4927,4930,4931,4934],{},"随后 ",[114,4924,4925],{},"chmod +x"," 授予脚本可执行权限后直接执行，我们就将 alpine linux 上的 openjdk 成功解包并安装到了我们的 OpenWRT 中，我们只需要配置好环境变量即可完成安装。但我又比较懒，我看见 SignServer 的启动脚本里是可以通过读取 ",[114,4928,4929],{},"$JAVA_HOME"," 来获取 Java 二进制可执行文件的代码逻辑，于是我便在每次启动 SignServer 脚本前提前执行 ",[114,4932,4933],{},"export JAVA_HOME=/opt/java-1.8-openjdk"," 即可。",[29,4936,4938],{"id":4937},"安装-screen","安装 screen",[19,4940,4941,4942,4947],{},"相比起前面 JDK 的安装，这一步 screen 的安装反而没有那么麻烦，",[23,4943,4946],{"href":4944,"rel":4945},"https://openwrt.org/packages/pkgdata/screen",[27],"在最新版本的 OpenWRT 源中，screen 已经被包括进去了","，我们直接把 OpenWRT 换好源，从源里就可以安装。",[107,4949,4951],{"className":3530,"code":4950,"language":3532,"meta":116,"style":116},"opkg update\nopkg install screen\n",[114,4952,4953,4961],{"__ignoreMap":116},[163,4954,4955,4958],{"class":165,"line":166},[163,4956,4957],{"class":1594},"opkg",[163,4959,4960],{"class":627}," update\n",[163,4962,4963,4965,4968],{"class":165,"line":172},[163,4964,4957],{"class":1594},[163,4966,4967],{"class":627}," install",[163,4969,4970],{"class":627}," screen\n",[29,4972,4974],{"id":4973},"下载-fixed-版本的-go-cqhttp","下载 fixed 版本的 go-cqhttp",[19,4976,4977,4978,4983],{},"由于 SignServer 更新，在其请求中多添加了 key 的参数要求，导致原版 go-cqhttp 的最新 release 中释出的二进制文件无法适配最新版的 SignServer，我暂时选用了一个",[23,4979,4982],{"href":4980,"rel":4981},"https://github.com/tomato-aoarasi/go-cqhttp-1.1.0-sign-fixed/",[27],"修复了这个问题的 fork"," 去运行 Bot。下载到 OpenWRT 后记得也要授予可执行文件。",[29,4985,4987],{"id":4986},"安装-python-脚本中所需要使用到的库","安装 Python 脚本中所需要使用到的库",[19,4989,4990],{},"OpenWRT 自带了 python 和 pip，这让我很欣慰。直接使用 pip 安装 flask 和 xlrd 等库即可，完全没有难度。",[29,4992,4994],{"id":4993},"运行-signserver","运行 SignServer",[19,4996,4997],{},"这一步很简单，将原项目的 Release 下载下来解压后上传到 OpenWRT 的某个路径后，开个 screen 窗口，设置好 JAVA_HOME 变量后再去调用 SignServer 中自带的 shell 脚本即可",[29,4999,5001],{"id":5000},"运行-go-cqhttp","运行 go-cqhttp",[19,5003,5004],{},"这一步也很简单，得益于 go 静态链接的特性，我们不需要为 go-cqhttp 安装任何额外的依赖就可以执行 Release 中的二进制文件，直接将我们在 PC 上登录好的 session、配置好的 device.json、config.yml 等文件上传到 N1 ，开个 screen 窗口运行即可。",[29,5006,5007],{"id":5007},"运行主程序",[19,5009,5010,5011,5014],{},"这个没什么好讲的，同样是开个 screen 窗口运行 ",[114,5012,5013],{},"python main.py"," 的事情",[19,5016,5017],{},"python 代码如下:",[107,5019,5021],{"className":2188,"code":5020,"language":2190,"meta":116,"style":116},"from flask import Flask,request\nimport requests\nimport xlrd\n\n# 读取 xls 中的关键词以及回应语句，将其加载到 dict 数据结构中\n_data2 = xlrd.open_workbook('/root/8yue222.xls')\nmain_table2 = _data2.sheets()[0]\nkey_lst2 = main_table2.col_values(0)[1:]\nvalue_lst2 = main_table2.col_values(1)[1:]\nfinal_dict = dict(zip(key_lst2,value_lst2))\n# 读取第二份 xls，并对相同的关键词做覆盖\n_data = xlrd.open_workbook('/root/daihao.xls')\nmain_table = _data.sheets()[0]\nkey_lst = main_table.col_values(4)[1:]\nkey_lst = [str(int(item)) if type(item) == float else item for item in key_lst if item != '']\nkey_lst.remove('Gary')\nvalue_lst = main_table.col_values(5)[1:]\nvalue_lst = [str(int(item)) if type(item) == float else item for item in value_lst if item != '']\nfinal_dict.update(dict(zip(key_lst,value_lst)))\n\napp = Flask(__name__)\nclass API:\n        @staticmethod\n        def send(message):\n                url = \"http://127.0.0.1:5700/send_msg\"\n                data = request.get_json()\n                params = {\n                        \"group_id\":data['group_id'],\n                        \"message\":message\n                }\n                requests.get(url,params=params)\n\n@app.route('/', methods=[\"POST\"])\ndef post_data():\n    data = request.get_json()\n    print(data)\n    if data['post_type'] == 'message':\n        message = data['message']\n        messagex()\n    elif data['post_type'] == 'notice' and data['notice_type'] == 'group_increase':\n        welcome()\n    else:\n        print(\"忽略消息\")\n\n    return \"OK\"\n\ndef messagex():\n        data = request.get_json()\n        message = data['message'].replace('％','%')\n        for key in final_dict.keys():\n                if key == message:\n                        API.send(final_dict[key])\n                        break\n\ndef welcome():\n        data = request.get_json()\n        group_id = data['group_id']\n        user_id = data['user_id']\n        API.send(\"[CQ:at,qq={}] 欢迎来到浙江工业大学，精弘网络欢迎各位的到来！如果想进一步了解我们，请戳精弘首页：www.jh.zjut.edu.cn\\n输入 菜单 获取精小弘机器人的菜单 哦！\\n请及时修改群名片\\n格式如下：姓名+专业/大类\".format(user_id))\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5701)\n",[114,5022,5023,5028,5032,5037,5041,5046,5051,5056,5061,5066,5071,5076,5081,5086,5091,5096,5101,5106,5111,5116,5120,5125,5130,5135,5140,5145,5150,5155,5160,5165,5170,5175,5179,5184,5189,5194,5199,5204,5209,5214,5219,5224,5229,5234,5238,5243,5247,5252,5257,5262,5267,5272,5277,5282,5286,5291,5295,5300,5305,5310,5314,5318],{"__ignoreMap":116},[163,5024,5025],{"class":165,"line":166},[163,5026,5027],{},"from flask import Flask,request\n",[163,5029,5030],{"class":165,"line":172},[163,5031,2211],{},[163,5033,5034],{"class":165,"line":178},[163,5035,5036],{},"import xlrd\n",[163,5038,5039],{"class":165,"line":184},[163,5040,257],{"emptyLinePlaceholder":256},[163,5042,5043],{"class":165,"line":190},[163,5044,5045],{},"# 读取 xls 中的关键词以及回应语句，将其加载到 dict 数据结构中\n",[163,5047,5048],{"class":165,"line":265},[163,5049,5050],{},"_data2 = xlrd.open_workbook('/root/8yue222.xls')\n",[163,5052,5053],{"class":165,"line":270},[163,5054,5055],{},"main_table2 = _data2.sheets()[0]\n",[163,5057,5058],{"class":165,"line":276},[163,5059,5060],{},"key_lst2 = main_table2.col_values(0)[1:]\n",[163,5062,5063],{"class":165,"line":281},[163,5064,5065],{},"value_lst2 = main_table2.col_values(1)[1:]\n",[163,5067,5068],{"class":165,"line":287},[163,5069,5070],{},"final_dict = dict(zip(key_lst2,value_lst2))\n",[163,5072,5073],{"class":165,"line":292},[163,5074,5075],{},"# 读取第二份 xls，并对相同的关键词做覆盖\n",[163,5077,5078],{"class":165,"line":432},[163,5079,5080],{},"_data = xlrd.open_workbook('/root/daihao.xls')\n",[163,5082,5083],{"class":165,"line":438},[163,5084,5085],{},"main_table = _data.sheets()[0]\n",[163,5087,5088],{"class":165,"line":443},[163,5089,5090],{},"key_lst = main_table.col_values(4)[1:]\n",[163,5092,5093],{"class":165,"line":448},[163,5094,5095],{},"key_lst = [str(int(item)) if type(item) == float else item for item in key_lst if item != '']\n",[163,5097,5098],{"class":165,"line":454},[163,5099,5100],{},"key_lst.remove('Gary')\n",[163,5102,5103],{"class":165,"line":460},[163,5104,5105],{},"value_lst = main_table.col_values(5)[1:]\n",[163,5107,5108],{"class":165,"line":465},[163,5109,5110],{},"value_lst = [str(int(item)) if type(item) == float else item for item in value_lst if item != '']\n",[163,5112,5113],{"class":165,"line":471},[163,5114,5115],{},"final_dict.update(dict(zip(key_lst,value_lst)))\n",[163,5117,5118],{"class":165,"line":476},[163,5119,257],{"emptyLinePlaceholder":256},[163,5121,5122],{"class":165,"line":481},[163,5123,5124],{},"app = Flask(__name__)\n",[163,5126,5127],{"class":165,"line":3},[163,5128,5129],{},"class API:\n",[163,5131,5132],{"class":165,"line":492},[163,5133,5134],{},"        @staticmethod\n",[163,5136,5137],{"class":165,"line":497},[163,5138,5139],{},"        def send(message):\n",[163,5141,5142],{"class":165,"line":503},[163,5143,5144],{},"                url = \"http://127.0.0.1:5700/send_msg\"\n",[163,5146,5147],{"class":165,"line":508},[163,5148,5149],{},"                data = request.get_json()\n",[163,5151,5152],{"class":165,"line":513},[163,5153,5154],{},"                params = {\n",[163,5156,5157],{"class":165,"line":519},[163,5158,5159],{},"                        \"group_id\":data['group_id'],\n",[163,5161,5162],{"class":165,"line":525},[163,5163,5164],{},"                        \"message\":message\n",[163,5166,5167],{"class":165,"line":530},[163,5168,5169],{},"                }\n",[163,5171,5172],{"class":165,"line":536},[163,5173,5174],{},"                requests.get(url,params=params)\n",[163,5176,5177],{"class":165,"line":541},[163,5178,257],{"emptyLinePlaceholder":256},[163,5180,5181],{"class":165,"line":546},[163,5182,5183],{},"@app.route('/', methods=[\"POST\"])\n",[163,5185,5186],{"class":165,"line":552},[163,5187,5188],{},"def post_data():\n",[163,5190,5191],{"class":165,"line":558},[163,5192,5193],{},"    data = request.get_json()\n",[163,5195,5196],{"class":165,"line":564},[163,5197,5198],{},"    print(data)\n",[163,5200,5201],{"class":165,"line":569},[163,5202,5203],{},"    if data['post_type'] == 'message':\n",[163,5205,5206],{"class":165,"line":575},[163,5207,5208],{},"        message = data['message']\n",[163,5210,5211],{"class":165,"line":580},[163,5212,5213],{},"        messagex()\n",[163,5215,5216],{"class":165,"line":1248},[163,5217,5218],{},"    elif data['post_type'] == 'notice' and data['notice_type'] == 'group_increase':\n",[163,5220,5221],{"class":165,"line":1253},[163,5222,5223],{},"        welcome()\n",[163,5225,5226],{"class":165,"line":1258},[163,5227,5228],{},"    else:\n",[163,5230,5231],{"class":165,"line":1263},[163,5232,5233],{},"        print(\"忽略消息\")\n",[163,5235,5236],{"class":165,"line":1268},[163,5237,257],{"emptyLinePlaceholder":256},[163,5239,5240],{"class":165,"line":1273},[163,5241,5242],{},"    return \"OK\"\n",[163,5244,5245],{"class":165,"line":1278},[163,5246,257],{"emptyLinePlaceholder":256},[163,5248,5249],{"class":165,"line":1283},[163,5250,5251],{},"def messagex():\n",[163,5253,5254],{"class":165,"line":1288},[163,5255,5256],{},"        data = request.get_json()\n",[163,5258,5259],{"class":165,"line":1293},[163,5260,5261],{},"        message = data['message'].replace('％','%')\n",[163,5263,5264],{"class":165,"line":1298},[163,5265,5266],{},"        for key in final_dict.keys():\n",[163,5268,5269],{"class":165,"line":1304},[163,5270,5271],{},"                if key == message:\n",[163,5273,5274],{"class":165,"line":1309},[163,5275,5276],{},"                        API.send(final_dict[key])\n",[163,5278,5279],{"class":165,"line":1314},[163,5280,5281],{},"                        break\n",[163,5283,5284],{"class":165,"line":1320},[163,5285,257],{"emptyLinePlaceholder":256},[163,5287,5288],{"class":165,"line":1325},[163,5289,5290],{},"def welcome():\n",[163,5292,5293],{"class":165,"line":1330},[163,5294,5256],{},[163,5296,5297],{"class":165,"line":1335},[163,5298,5299],{},"        group_id = data['group_id']\n",[163,5301,5302],{"class":165,"line":1340},[163,5303,5304],{},"        user_id = data['user_id']\n",[163,5306,5307],{"class":165,"line":1346},[163,5308,5309],{},"        API.send(\"[CQ:at,qq={}] 欢迎来到浙江工业大学，精弘网络欢迎各位的到来！如果想进一步了解我们，请戳精弘首页：www.jh.zjut.edu.cn\\n输入 菜单 获取精小弘机器人的菜单 哦！\\n请及时修改群名片\\n格式如下：姓名+专业/大类\".format(user_id))\n",[163,5311,5312],{"class":165,"line":1351},[163,5313,257],{"emptyLinePlaceholder":256},[163,5315,5316],{"class":165,"line":1356},[163,5317,2903],{},[163,5319,5320],{"class":165,"line":1361},[163,5321,5322],{},"    app.run(host='0.0.0.0', port=5701)\n",[16,5324,5325,5328,5334],{},[19,5326,5327],{},"参考资料:",[19,5329,5330],{},[23,5331,5332],{"href":5332,"rel":5333},"https://gist.github.com/simonswine/64773a80e748f36615e3251234f29d1d",[27],[19,5335,5336],{},[23,5337,5338],{"href":5338,"rel":5339},"https://blog.csdn.net/qq_64126275/article/details/128586651",[27],[1496,5341,5342],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}",{"title":116,"searchDepth":172,"depth":172,"links":5344},[5345,5346,5347,5348,5349,5350,5351],{"id":4818,"depth":172,"text":4819},{"id":4937,"depth":172,"text":4938},{"id":4973,"depth":172,"text":4974},{"id":4986,"depth":172,"text":4987},{"id":4993,"depth":172,"text":4994},{"id":5000,"depth":172,"text":5001},{"id":5007,"depth":172,"text":5007},127,1761697386600]