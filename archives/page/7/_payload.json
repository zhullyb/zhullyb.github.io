[{"data":1,"prerenderedAt":3087},["ShallowReactive",2],{"randomIndex/archives/page/7/":3,"index-page-7":4,"posts-nums-total":3086},8,[5,1028,1357,1453,1542,1786,2220,2556,2631,2798],{"title":6,"date":7,"path":8,"tags":9,"body":12},"在浙工大宿舍使用路由器连接移动网络(校园网)","2023-06-24 14:30:24","/2023/06/24/connect-china-mobile-with-router-in-zjut-dormitory",[10,11],"Network","Router",{"type":13,"value":14,"toc":1024},"minimark",[15,22,33,36,39,44,47,49,54,61,70,72,77,83,90,92,98,114,119,122,128,131,134,140,143,148,157,160,166,916,919,925,932,938,941,954,957,960,975,981,988,993,999,1002,1008,1014,1020],[16,17,18],"p",{},[19,20,21],"strong",{},"2025.09.01 Updates:",[16,23,24,25,32],{},"最近看到这篇博客的热度还挺高，应该是最近新生开学有不少都在看。但移动的认证方式于今年的 8 月 15 日发生了变更，具体可以看",[26,27,31],"a",{"href":28,"rel":29},"https://mp.weixin.qq.com/s/KtaP62A3h96FETerPdnQmw",[30],"nofollow","这篇微信公众号文章","。我近期不在学校，没有环境去研究新的认证方式，但据我身边的人说不再需要什么 l2tp 了，找台常见的路由器直接走 dhcp 以后过一遍网页验证就好了。",[16,34,35],{},"祝各位新生在工大能渡过愉快的四年！",[37,38],"hr",{},[16,40,41],{},[19,42,43],{},"2024.04.09 Updates:",[16,45,46],{},"几天前移动对网页认证的页面进行了更新，原有的脚本失效，本博客已更新适配新版网页认证的脚本。",[37,48],{},[16,50,51],{},[19,52,53],{},"2023.7.10 Updates:",[16,55,56,57,60],{},"首先，",[19,58,59],{},"搬到屏峰校区以后，l2tp 服务器确实依然为 192.168.115.1","，这点挺奇怪的。",[16,62,63,64,69],{},"然后我发现 6.26 我的那个解决方案过于复杂，原先写的认证脚本完全可以胜任这项工作，之前失败的原因是因为我在朝晖抓的脚本参数不适用于屏峰校区，目前已经修复。脚本的变动情况可以看",[26,65,68],{"href":66,"rel":67},"https://gist.github.com/zhullyb/4c8708df5724c42f913d3d86ed49d929/revisions#diff-c33ee93215d3dddc16517dae8107b3473f7abc77f56ff5afedc1f263e7e22b27",[30],"这里","。",[37,71],{},[16,73,74],{},[19,75,76],{},"2023.6.26 Updates:",[16,78,79],{},[80,81,82],"del",{},"在我于 2023 年 6 月 26 日搬去屏峰校区以后，发生了连不上网的情况。目前一个可行的方案: 在 192.168.210.100 将自己的 MAC 地址全部解绑，然后使用自己的一台设备连接网线接口，正常通过网页验证。随后在 192.168.210.100 查看刚才通过网页验证的设备的 MAC 地址，将这一串 MAC 地址复制到 Padavan 的「外部网络（WAN）- MAC 地址」中，且将 l2tp 服务器改为 192.168.115.1 （没错，填朝晖的可以用）并重新连接 l2tp。",[16,84,85],{},[86,87],"img",{"alt":88,"src":89},"MAC 地址设置","https://static.031130.xyz/uploads/2024/08/12/649987173e542.webp",[37,91],{},[16,93,94],{},[86,95],{"alt":96,"src":97},"这是我们上一篇博客的成果","https://static.031130.xyz/uploads/2024/08/12/6496ac4f3170f.webp",[99,100,101],"blockquote",{},[16,102,103,107,108,113],{},[26,104,106],{"href":105},"/2023/06/24/redmi-ac2100-router-with-padavan/","上一篇博客","中，我为 Redmi AC2100 刷入了 Padavan，接下来就打算使用这台路由器进行联网。其实",[26,109,112],{"href":110,"rel":111},"https://static.031130.xyz/uploads/2024/08/12/6496ab42d74bf.webp",[30],"小米大多数路由器都是支持 l2tp 的协议的","，只需要在路由器后台稍微设置一下就能上网，服务器 ip 填 192.168.113.1，账号密码就是 hxzha+手机尾号后8位，密码就是手机尾号后6位。我使用 Padavan 是我个人有一些别的官方固件所不能提供的功能。",[115,116,118],"h2",{"id":117},"l2tp-相关设置","l2tp 相关设置",[16,120,121],{},"我们将 WAN 口插上墙壁一侧的网口，左侧菜单栏点击外部网络，将外网连接类型改为 l2tp",[16,123,124],{},[86,125],{"alt":126,"src":127},"外网连接类型","https://static.031130.xyz/uploads/2024/08/12/6496acaf4435b.webp",[16,129,130],{},"DNS 建议前两个填写学校的内网 DNS 地址( 172.16.7.10 ， 172.16.7.30)，最后一个填一个稳定的公共 DNS 即可，由于这一步是可选项，所以就不提供截图了。",[16,132,133],{},"往下拉，设置 l2tp 相关的设置项，只需要设置红色框框内的设置项即可。朝晖的 l2tp 服务器 ip 是 192.168.115.1 ， 屏峰校区是 192.168.113.1 ，这里不要填错了。",[16,135,136],{},[86,137],{"alt":138,"src":139},"Screenshot_20230623_213510.webp","https://static.031130.xyz/uploads/2024/08/12/6496ae85a4d4f.webp",[115,141,142],{"id":142},"网页认证脚本",[99,144,145],{},[16,146,147],{},"做完这些步骤，其实就可以正常上网了，只不过每次断网以后可能都需要重新过一遍验证，所以我专门写了一个脚本去过这个验证。",[16,149,150,151,156],{},"这份脚本我已经开源到 ",[26,152,155],{"href":153,"rel":154},"https://gist.github.com/zhullyb/4c8708df5724c42f913d3d86ed49d929",[30],"github gist"," 了，在顶部填好自己网页认证时的账号密码以后就可以用了。",[16,158,159],{},"顶部 TODO 处要写的账号密码就是那个有图书馆背景的网页认证密码。",[16,161,162],{},[86,163],{"alt":164,"src":165},"","https://static.031130.xyz/uploads/2024/08/12/6506a036d0f55.webp",[167,168,172],"pre",{"className":169,"code":170,"language":171,"meta":164,"style":164},"language-bash shiki shiki-themes one-light one-dark-pro","#!/bin/bash\n\n# Login webpage identify for China Mobile in Zhejiang University of Technology automatically\n# Author: zhullyb\n# Email: zhullyb@outlook.com\n\n\n# TODO: Fill Your Account and Password for 192.168.210.112/192.168.210.111 here\nuser_account=\nuser_password=\n\nif `ip route | grep -q 10.129.0.1`; then\n  gateway=10.129.0.1\nelif `ip route | grep -q 10.136.0.1`; then\n  gateway=10.136.0.1\nfi\n\nif whoami | grep -q \"admin\\|root\" && [ -n \"$gateway\" ]; then\n  route add -net 192.168.210.111 netmask 255.255.255.255 gw ${gateway}\n  route add -net 192.168.210.112 netmask 255.255.255.255 gw ${gateway}\n  route add -net 192.168.210.100 netmask 255.255.255.255 gw ${gateway}\n  route add -net 172.16.0.0 netmask 255.255.0.0 gw ${gateway}\nfi\n\n# 尝试访问内网服务器，如果未通过网页认证则会获得 url 跳转信息，用于判断用户为朝晖校区或屏峰校区，并获取用户 ip\ntest_curl=$(curl -s http://172.16.19.160)\nwlan_user_ip=$(echo ${test_curl} | grep -oE 'wlanuserip=[0-9\\.]+' | grep -oE '[0-9\\.]+')\nwlan_ac_ip=$(echo ${test_curl} | grep -oE 'wlanacip=[0-9\\.]+' | grep -oE '[0-9\\.]+')\nwlan_user_mac=$(echo ${test_curl} | grep -oE 'usermac=[[:xdigit:]-]+' | cut -d'=' -f2 | tr -d '-')\nwlan_ac_name=$(echo ${test_curl} | grep -o \"wlanacname=[^&]*\" | cut -d'=' -f2)\n\n# 朝晖校区宿舍楼内的移动宽带的认证请求\nif echo \"${test_curl}\" | grep -q \"192.168.210.112\"; then \\\ncurl \"http://192.168.210.112:801/eportal/portal/login?callback=dr1003&login_method=1&user_account=%2C0%2C${user_account}%40cmcczhyx&user_password=${user_password}&wlan_user_ip=${wlan_user_ip}&wlan_user_ipv6=&wlan_user_mac=${wlan_user_mac}&wlan_ac_ip=${wlan_ac_ip}&wlan_ac_name=${wlan_ac_name}&jsVersion=4.2.1&terminal_type=1&lang=zh-cn&v=5099&lang=zh\"\n# 屏峰校区宿舍楼内的移动宽带的认证请求\nelif echo \"${test_curl}\" | grep -q \"192.168.210.111\"; then \\\ncurl \"http://192.168.210.111:801/eportal/portal/login?callback=dr1003&login_method=1&user_account=%2C0%2C${user_account}%40cmccpfyx&user_password=${user_password}&wlan_user_ip=${wlan_user_ip}&wlan_user_ipv6=&wlan_user_mac=${wlan_user_mac}&wlan_ac_ip=${wlan_ac_ip}&wlan_ac_name=${wlan_ac_name}&jsVersion=4.2.1&terminal_type=1&lang=zh-cn&v=5099&lang=zh\"\nfi\n","bash",[173,174,175,184,191,197,203,209,214,219,224,235,243,248,289,301,328,338,344,349,388,422,446,470,495,500,505,511,534,576,613,666,706,711,717,754,816,822,854,911],"code",{"__ignoreMap":164},[176,177,180],"span",{"class":178,"line":179},"line",1,[176,181,183],{"class":182},"sW2Sy","#!/bin/bash\n",[176,185,187],{"class":178,"line":186},2,[176,188,190],{"emptyLinePlaceholder":189},true,"\n",[176,192,194],{"class":178,"line":193},3,[176,195,196],{"class":182},"# Login webpage identify for China Mobile in Zhejiang University of Technology automatically\n",[176,198,200],{"class":178,"line":199},4,[176,201,202],{"class":182},"# Author: zhullyb\n",[176,204,206],{"class":178,"line":205},5,[176,207,208],{"class":182},"# Email: zhullyb@outlook.com\n",[176,210,212],{"class":178,"line":211},6,[176,213,190],{"emptyLinePlaceholder":189},[176,215,217],{"class":178,"line":216},7,[176,218,190],{"emptyLinePlaceholder":189},[176,220,221],{"class":178,"line":3},[176,222,223],{"class":182},"# TODO: Fill Your Account and Password for 192.168.210.112/192.168.210.111 here\n",[176,225,227,231],{"class":178,"line":226},9,[176,228,230],{"class":229},"sJa8x","user_account",[176,232,234],{"class":233},"sknuh","=\n",[176,236,238,241],{"class":178,"line":237},10,[176,239,240],{"class":229},"user_password",[176,242,234],{"class":233},[176,244,246],{"class":178,"line":245},11,[176,247,190],{"emptyLinePlaceholder":189},[176,249,251,255,259,263,266,270,273,277,280,283,286],{"class":178,"line":250},12,[176,252,254],{"class":253},"sLKXg","if",[176,256,258],{"class":257},"sDhpE"," `",[176,260,262],{"class":261},"sAdtL","ip",[176,264,265],{"class":257}," route ",[176,267,269],{"class":268},"s5ixo","|",[176,271,272],{"class":261}," grep",[176,274,276],{"class":275},"sAGMh"," -q",[176,278,279],{"class":275}," 10.129.0.1",[176,281,282],{"class":257},"`",[176,284,285],{"class":268},"; ",[176,287,288],{"class":253},"then\n",[176,290,292,295,298],{"class":178,"line":291},13,[176,293,294],{"class":229},"  gateway",[176,296,297],{"class":233},"=",[176,299,300],{"class":257},"10.129.0.1\n",[176,302,304,307,309,311,313,315,317,319,322,324,326],{"class":178,"line":303},14,[176,305,306],{"class":253},"elif",[176,308,258],{"class":257},[176,310,262],{"class":261},[176,312,265],{"class":257},[176,314,269],{"class":268},[176,316,272],{"class":261},[176,318,276],{"class":275},[176,320,321],{"class":275}," 10.136.0.1",[176,323,282],{"class":257},[176,325,285],{"class":268},[176,327,288],{"class":253},[176,329,331,333,335],{"class":178,"line":330},15,[176,332,294],{"class":229},[176,334,297],{"class":233},[176,336,337],{"class":257},"10.136.0.1\n",[176,339,341],{"class":178,"line":340},16,[176,342,343],{"class":253},"fi\n",[176,345,347],{"class":178,"line":346},17,[176,348,190],{"emptyLinePlaceholder":189},[176,350,352,354,357,360,363,365,368,371,374,377,380,383,386],{"class":178,"line":351},18,[176,353,254],{"class":253},[176,355,356],{"class":261}," whoami",[176,358,359],{"class":268}," | ",[176,361,362],{"class":261},"grep",[176,364,276],{"class":275},[176,366,367],{"class":257}," \"admin\\|root\"",[176,369,370],{"class":268}," && [ ",[176,372,373],{"class":233},"-n",[176,375,376],{"class":257}," \"",[176,378,379],{"class":229},"$gateway",[176,381,382],{"class":257},"\"",[176,384,385],{"class":268}," ]; ",[176,387,288],{"class":253},[176,389,391,394,397,400,403,406,409,412,416,419],{"class":178,"line":390},19,[176,392,393],{"class":261},"  route",[176,395,396],{"class":257}," add",[176,398,399],{"class":275}," -net",[176,401,402],{"class":275}," 192.168.210.111",[176,404,405],{"class":257}," netmask",[176,407,408],{"class":275}," 255.255.255.255",[176,410,411],{"class":257}," gw",[176,413,415],{"class":414},"sr1Ac"," ${",[176,417,418],{"class":229},"gateway",[176,420,421],{"class":414},"}\n",[176,423,425,427,429,431,434,436,438,440,442,444],{"class":178,"line":424},20,[176,426,393],{"class":261},[176,428,396],{"class":257},[176,430,399],{"class":275},[176,432,433],{"class":275}," 192.168.210.112",[176,435,405],{"class":257},[176,437,408],{"class":275},[176,439,411],{"class":257},[176,441,415],{"class":414},[176,443,418],{"class":229},[176,445,421],{"class":414},[176,447,449,451,453,455,458,460,462,464,466,468],{"class":178,"line":448},21,[176,450,393],{"class":261},[176,452,396],{"class":257},[176,454,399],{"class":275},[176,456,457],{"class":275}," 192.168.210.100",[176,459,405],{"class":257},[176,461,408],{"class":275},[176,463,411],{"class":257},[176,465,415],{"class":414},[176,467,418],{"class":229},[176,469,421],{"class":414},[176,471,473,475,477,479,482,484,487,489,491,493],{"class":178,"line":472},22,[176,474,393],{"class":261},[176,476,396],{"class":257},[176,478,399],{"class":275},[176,480,481],{"class":275}," 172.16.0.0",[176,483,405],{"class":257},[176,485,486],{"class":275}," 255.255.0.0",[176,488,411],{"class":257},[176,490,415],{"class":414},[176,492,418],{"class":229},[176,494,421],{"class":414},[176,496,498],{"class":178,"line":497},23,[176,499,343],{"class":253},[176,501,503],{"class":178,"line":502},24,[176,504,190],{"emptyLinePlaceholder":189},[176,506,508],{"class":178,"line":507},25,[176,509,510],{"class":182},"# 尝试访问内网服务器，如果未通过网页认证则会获得 url 跳转信息，用于判断用户为朝晖校区或屏峰校区，并获取用户 ip\n",[176,512,514,517,519,522,525,528,531],{"class":178,"line":513},26,[176,515,516],{"class":229},"test_curl",[176,518,297],{"class":233},[176,520,521],{"class":268},"$(",[176,523,524],{"class":261},"curl",[176,526,527],{"class":275}," -s",[176,529,530],{"class":257}," http://172.16.19.160",[176,532,533],{"class":268},")\n",[176,535,537,540,542,544,548,550,552,555,557,559,562,565,567,569,571,574],{"class":178,"line":536},27,[176,538,539],{"class":229},"wlan_user_ip",[176,541,297],{"class":233},[176,543,521],{"class":268},[176,545,547],{"class":546},"s_Sar","echo",[176,549,415],{"class":414},[176,551,516],{"class":229},[176,553,554],{"class":414},"}",[176,556,359],{"class":268},[176,558,362],{"class":261},[176,560,561],{"class":275}," -oE",[176,563,564],{"class":257}," 'wlanuserip=[0-9\\.]+'",[176,566,359],{"class":268},[176,568,362],{"class":261},[176,570,561],{"class":275},[176,572,573],{"class":257}," '[0-9\\.]+'",[176,575,533],{"class":268},[176,577,579,582,584,586,588,590,592,594,596,598,600,603,605,607,609,611],{"class":178,"line":578},28,[176,580,581],{"class":229},"wlan_ac_ip",[176,583,297],{"class":233},[176,585,521],{"class":268},[176,587,547],{"class":546},[176,589,415],{"class":414},[176,591,516],{"class":229},[176,593,554],{"class":414},[176,595,359],{"class":268},[176,597,362],{"class":261},[176,599,561],{"class":275},[176,601,602],{"class":257}," 'wlanacip=[0-9\\.]+'",[176,604,359],{"class":268},[176,606,362],{"class":261},[176,608,561],{"class":275},[176,610,573],{"class":257},[176,612,533],{"class":268},[176,614,616,619,621,623,625,627,629,631,633,635,637,640,642,645,648,651,654,656,659,661,664],{"class":178,"line":615},29,[176,617,618],{"class":229},"wlan_user_mac",[176,620,297],{"class":233},[176,622,521],{"class":268},[176,624,547],{"class":546},[176,626,415],{"class":414},[176,628,516],{"class":229},[176,630,554],{"class":414},[176,632,359],{"class":268},[176,634,362],{"class":261},[176,636,561],{"class":275},[176,638,639],{"class":257}," 'usermac=[[:xdigit:]-]+'",[176,641,359],{"class":268},[176,643,644],{"class":261},"cut",[176,646,647],{"class":275}," -d",[176,649,650],{"class":257},"'='",[176,652,653],{"class":275}," -f2",[176,655,359],{"class":268},[176,657,658],{"class":261},"tr",[176,660,647],{"class":275},[176,662,663],{"class":257}," '-'",[176,665,533],{"class":268},[176,667,669,672,674,676,678,680,682,684,686,688,691,694,696,698,700,702,704],{"class":178,"line":668},30,[176,670,671],{"class":229},"wlan_ac_name",[176,673,297],{"class":233},[176,675,521],{"class":268},[176,677,547],{"class":546},[176,679,415],{"class":414},[176,681,516],{"class":229},[176,683,554],{"class":414},[176,685,359],{"class":268},[176,687,362],{"class":261},[176,689,690],{"class":275}," -o",[176,692,693],{"class":257}," \"wlanacname=[^&]*\"",[176,695,359],{"class":268},[176,697,644],{"class":261},[176,699,647],{"class":275},[176,701,650],{"class":257},[176,703,653],{"class":275},[176,705,533],{"class":268},[176,707,709],{"class":178,"line":708},31,[176,710,190],{"emptyLinePlaceholder":189},[176,712,714],{"class":178,"line":713},32,[176,715,716],{"class":182},"# 朝晖校区宿舍楼内的移动宽带的认证请求\n",[176,718,720,722,725,727,731,733,735,737,739,741,743,746,748,751],{"class":178,"line":719},33,[176,721,254],{"class":253},[176,723,724],{"class":546}," echo",[176,726,376],{"class":257},[176,728,730],{"class":729},"sTIpt","${",[176,732,516],{"class":229},[176,734,554],{"class":729},[176,736,382],{"class":257},[176,738,359],{"class":268},[176,740,362],{"class":261},[176,742,276],{"class":275},[176,744,745],{"class":257}," \"192.168.210.112\"",[176,747,285],{"class":268},[176,749,750],{"class":253},"then",[176,752,753],{"class":546}," \\\n",[176,755,757,759,762,764,766,768,771,773,775,777,780,782,784,786,789,791,793,795,798,800,802,804,807,809,811,813],{"class":178,"line":756},34,[176,758,524],{"class":261},[176,760,761],{"class":257}," \"http://192.168.210.112:801/eportal/portal/login?callback=dr1003&login_method=1&user_account=%2C0%2C",[176,763,730],{"class":729},[176,765,230],{"class":229},[176,767,554],{"class":729},[176,769,770],{"class":257},"%40cmcczhyx&user_password=",[176,772,730],{"class":729},[176,774,240],{"class":229},[176,776,554],{"class":729},[176,778,779],{"class":257},"&wlan_user_ip=",[176,781,730],{"class":729},[176,783,539],{"class":229},[176,785,554],{"class":729},[176,787,788],{"class":257},"&wlan_user_ipv6=&wlan_user_mac=",[176,790,730],{"class":729},[176,792,618],{"class":229},[176,794,554],{"class":729},[176,796,797],{"class":257},"&wlan_ac_ip=",[176,799,730],{"class":729},[176,801,581],{"class":229},[176,803,554],{"class":729},[176,805,806],{"class":257},"&wlan_ac_name=",[176,808,730],{"class":729},[176,810,671],{"class":229},[176,812,554],{"class":729},[176,814,815],{"class":257},"&jsVersion=4.2.1&terminal_type=1&lang=zh-cn&v=5099&lang=zh\"\n",[176,817,819],{"class":178,"line":818},35,[176,820,821],{"class":182},"# 屏峰校区宿舍楼内的移动宽带的认证请求\n",[176,823,825,827,829,831,833,835,837,839,841,843,845,848,850,852],{"class":178,"line":824},36,[176,826,306],{"class":253},[176,828,724],{"class":546},[176,830,376],{"class":257},[176,832,730],{"class":729},[176,834,516],{"class":229},[176,836,554],{"class":729},[176,838,382],{"class":257},[176,840,359],{"class":268},[176,842,362],{"class":261},[176,844,276],{"class":275},[176,846,847],{"class":257}," \"192.168.210.111\"",[176,849,285],{"class":268},[176,851,750],{"class":253},[176,853,753],{"class":546},[176,855,857,859,862,864,866,868,871,873,875,877,879,881,883,885,887,889,891,893,895,897,899,901,903,905,907,909],{"class":178,"line":856},37,[176,858,524],{"class":261},[176,860,861],{"class":257}," \"http://192.168.210.111:801/eportal/portal/login?callback=dr1003&login_method=1&user_account=%2C0%2C",[176,863,730],{"class":729},[176,865,230],{"class":229},[176,867,554],{"class":729},[176,869,870],{"class":257},"%40cmccpfyx&user_password=",[176,872,730],{"class":729},[176,874,240],{"class":229},[176,876,554],{"class":729},[176,878,779],{"class":257},[176,880,730],{"class":729},[176,882,539],{"class":229},[176,884,554],{"class":729},[176,886,788],{"class":257},[176,888,730],{"class":729},[176,890,618],{"class":229},[176,892,554],{"class":729},[176,894,797],{"class":257},[176,896,730],{"class":729},[176,898,581],{"class":229},[176,900,554],{"class":729},[176,902,806],{"class":257},[176,904,730],{"class":729},[176,906,671],{"class":229},[176,908,554],{"class":729},[176,910,815],{"class":257},[176,912,914],{"class":178,"line":913},38,[176,915,343],{"class":253},[16,917,918],{},"在 Padavan 的设置界面中，我们去打开 ssh 服务",[16,920,921],{},[86,922],{"alt":923,"src":924},"打开 ssh 服务","https://static.031130.xyz/uploads/2024/08/12/6496afd695464.webp",[16,926,927,928,931],{},"在自己的电脑上通过 ssh 连接到路由器的终端 ",[173,929,930],{},"ssh admin@192.168.123.1","，默认密码也是 admin，就和进入 Padavan 后台的默认管理密码一样。",[16,933,934],{},[86,935],{"alt":936,"src":937},"进入路由器终端","https://static.031130.xyz/uploads/2024/08/12/6496b029dfe3f.webp",[16,939,940],{},"看了一下 Padavan 并没有自带 nano 这个方便的 tui 编辑器，只好用自带的 vi 将就一下将认证代码复制到路由器中。",[167,942,944],{"className":169,"code":943,"language":171,"meta":164,"style":164},"vi /etc/storage/login_edu.sh\n",[173,945,946],{"__ignoreMap":164},[176,947,948,951],{"class":178,"line":179},[176,949,950],{"class":261},"vi",[176,952,953],{"class":257}," /etc/storage/login_edu.sh\n",[16,955,956],{},"关于 vi 的使用方法我在这里也不展开讲，我个人也不熟悉这款编辑器。",[16,958,959],{},"将脚本复制进去后，记得输入自己网页认证的账号密码，然后保存离开，给这个脚本赋予 x 权限。",[167,961,963],{"className":169,"code":962,"language":171,"meta":164,"style":164},"chmod a+x /etc/storage/login_edu.sh\n",[173,964,965],{"__ignoreMap":164},[176,966,967,970,973],{"class":178,"line":179},[176,968,969],{"class":261},"chmod",[176,971,972],{"class":257}," a+x",[176,974,953],{"class":257},[16,976,977],{},[86,978],{"alt":979,"src":980},"保存认证脚本","https://static.031130.xyz/uploads/2024/08/12/6496b11b7c541.webp",[16,982,983,984,987],{},"随后运行 ",[173,985,986],{},"crontab -e"," ，设置运行脚本为每天早上 6 点 01 分执行一次（因为工作日凌晨 00:30 断网，早上网络恢复以后有可能会要求你通过网页认证后才能再次联网）",[16,989,990],{},[173,991,992],{},"1 6 * * * /etc/storage/login_edu.sh",[16,994,995],{},[86,996],{"alt":997,"src":998},"设置 crontab","https://static.031130.xyz/uploads/2024/08/12/6496b1132f497.webp",[16,1000,1001],{},"随后来到路由器的设置界面，设置「在 WAN 上行/下行启动后执行」和「在防火墙规则启动后执行」这两个地方分别调用我们的网页认证脚本，防止因停电、网线接口松动等故障恢复后依然没法联网的问题。图中的 logger 命令是给我自己排错看的，不需要设置。",[16,1003,1004],{},[86,1005],{"alt":1006,"src":1007},"脚本设置界面","https://static.031130.xyz/uploads/2024/08/12/6496b36585000.webp",[16,1009,1010],{},[86,1011],{"alt":1012,"src":1013},"WAN上下行","https://static.031130.xyz/uploads/2024/08/12/6496b369bbd70.webp",[16,1015,1016],{},[86,1017],{"alt":1018,"src":1019},"防火墙规则","https://static.031130.xyz/uploads/2024/08/12/6496b3703197f.webp",[1021,1022,1023],"style",{},"html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sknuh, html code.shiki .sknuh{--shiki-default:#383A42;--shiki-dark:#56B6C2}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sr1Ac, html code.shiki .sr1Ac{--shiki-default:#E45649;--shiki-dark:#ABB2BF}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .sTIpt, html code.shiki .sTIpt{--shiki-default:#E45649;--shiki-dark:#98C379}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":164,"searchDepth":186,"depth":186,"links":1025},[1026,1027],{"id":117,"depth":186,"text":118},{"id":142,"depth":186,"text":142},{"title":1029,"date":1030,"path":1031,"tags":1032,"body":1033},"为红米 Redmi AC2100 路由器刷入 Padavan","2023-06-24 00:22:53","/2023/06/24/redmi-ac2100-router-with-padavan",[11,10],{"type":13,"value":1034,"toc":1350},[1035,1040,1043,1046,1049,1052,1055,1061,1064,1069,1072,1077,1080,1085,1088,1094,1098,1101,1112,1115,1124,1131,1139,1142,1148,1154,1160,1163,1169,1172,1183,1189,1193,1196,1203,1209,1220,1226,1229,1235,1241,1248,1254,1257,1263,1267,1270,1277,1283,1286,1292,1295,1301,1304,1307,1313,1316,1321,1347],[99,1036,1037],{},[16,1038,1039],{},"大一一年转眼就要过去了，最近要搬校区了，顺手就把之前刷过的「小米路由器4A千兆版」出手给了同学，自己反手入了一个 「Redmi AC 2100」，尽管是跟着教程走，但过程中依然是遇见了不少坑，因此就开一篇博客记录了一下。",[115,1041,1042],{"id":1042},"重置路由器",[16,1044,1045],{},"这一步其实可有可无，只是我从闲鱼上入手这个路由器，买家并没有告知我密码，于是我只能手动 RESET 这个路由器来进入后台。",[115,1047,1048],{"id":1048},"通过网络设置引导",[16,1050,1051],{},"原本就是连上路由器后简单地通过引导界面，但由于我没有一个正常的网络环境，所以这一步走的其实也是有点困难的，我还是稍微记一下。",[16,1053,1054],{},"首先浏览器地址栏输入 192.168.31.1 (小米家的路由器默认好像都是这个 ip 地址)，看到下图界面，加不加入用户改善计划其实都是无所谓的，反正马上就要刷掉这个系统了。",[16,1056,1057],{},[86,1058],{"alt":1059,"src":1060},"路由器设置引导界面","https://static.031130.xyz/uploads/2024/08/12/6495c9a227d2c.webp",[16,1062,1063],{},"此处选择「不插网线，继续配置」，因为我们没有标准的网络环境，还指望着这台路由器跑 l2tp 帮我们连校园网呢。",[16,1065,1066],{},[86,1067],{"alt":1059,"src":1068},"https://static.031130.xyz/uploads/2024/08/12/6495ca724bf14.webp",[16,1070,1071],{},"这里需要选择「自动获取IP」（静态 IP）好像也行，但别的选项在我的网络环境下恐怕都是没法继续配置下去的。",[16,1073,1074],{},[86,1075],{"alt":1059,"src":1076},"https://static.031130.xyz/uploads/2024/08/12/6495cae48566d.webp",[16,1078,1079],{},"随后随手输个 WIFI 名称和密码，主要是记住密码进路由器后台管理。",[16,1081,1082],{},[86,1083],{"alt":1059,"src":1084},"https://static.031130.xyz/uploads/2024/08/12/6495cb8eba4b5.webp",[16,1086,1087],{},"设置完上述设置项以后，再次进入 192.168.31.1 ，就能看见路由器后台管理的登陆页面了。",[16,1089,1090],{},[86,1091],{"alt":1092,"src":1093},"路由器后台管理首页","https://static.031130.xyz/uploads/2024/08/12/6495cc2ff1e02.webp",[115,1095,1097],{"id":1096},"获取-ssh-权限","获取 ssh 权限",[16,1099,1100],{},"输入登陆密码，进入路由器后台管理页面，我们需要通过 bug 去获取打开官方系统的 ssh 功能",[99,1102,1103],{},[16,1104,1105,1106,1111],{},"这里提一嘴，当初我刷小米路由器4A千兆版的时候用的是",[26,1107,1110],{"href":1108,"rel":1109},"https://github.com/acecilia/OpenWRTInvasion/",[30],"这个仓库","来打开 ssh。",[16,1113,1114],{},"首先是确认路由器的版本，我从闲鱼上购得的路由器自带的版本是官方稳定版 2.0.23，一开始跟着别人的思路就降级到了 2.0.7，但后来遇见问题在网上查解决方案的时候看到有人说这个漏洞在 2.0.23 依然可用，但我也没有去试。",[16,1116,1117,1118,1123],{},"在电脑上下载 2.0.7 的",[26,1119,1122],{"href":1120,"rel":1121},"https://cdn.cnbj1.fds.api.mi-img.com/xiaoqiang/rom/rm2100/miwifi_rm2100_firmware_d6234_2.0.7.bin",[30],"升级包","，在路由器设置界面的常用设置->系统状态->手动升级 选择自己下载的升级包，确认等待重启即可。有些教程说可以选择保留数据，但我也懒得试，就直接清除了所有数据，又不得不再次过一遍上面的配置引导。",[16,1125,1126,1127,1130],{},"在地址栏，删除 ",[173,1128,1129],{},"/web/home#router"," 部分，加入下面这串代码",[167,1132,1137],{"className":1133,"code":1135,"language":1136,"meta":164},[1134],"language-text","/api/misystem/set_config_iotdev?bssid=Xiaomi&user_id=longdike&ssid=-h%3B%20nvram%20set%20ssh_en%3D1%3B%20nvram%20commit%3B%20sed%20-i%20's%2Fchannel%3D.*%2Fchannel%3D%5C%22debug%5C%22%2Fg'%20%2Fetc%2Finit.d%2Fdropbear%3B%20%2Fetc%2Finit.d%2Fdropbear%20start%3B\n","text",[173,1138,1135],{"__ignoreMap":164},[16,1140,1141],{},"再次删除后面的代码，加入下面这串代码",[167,1143,1146],{"className":1144,"code":1145,"language":1136,"meta":164},[1134],"/api/misystem/set_config_iotdev?bssid=Xiaomi&user_id=longdike&ssid=-h%3B%20echo%20-e%20'admin%5Cnadmin'%20%7C%20passwd%20root%3B\n",[173,1147,1145],{"__ignoreMap":164},[16,1149,1150],{},[86,1151],{"alt":1152,"src":1153},"需要被去除的 url 部分","https://static.031130.xyz/uploads/2024/08/12/6495ce20b91d1.webp",[16,1155,1156],{},[86,1157],{"alt":1158,"src":1159},"被截剩的 url 部分","https://static.031130.xyz/uploads/2024/08/12/6495ce1de2acd.webp",[16,1161,1162],{},"两次请求的正常反馈应该长成下面这个样子。",[16,1164,1165],{},[86,1166],{"alt":1167,"src":1168},"正常反馈","https://static.031130.xyz/uploads/2024/08/12/6495ce8d86b03.webp",[16,1170,1171],{},"此时应该就可以使用 ssh 访问路由器的 root 账户了，密码已经被改为了 admin",[167,1173,1177],{"className":1174,"code":1175,"language":1176,"meta":164,"style":164},"language-ba shiki shiki-themes one-light one-dark-pro","ssh -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa root@192.168.31.1\n","ba",[173,1178,1179],{"__ignoreMap":164},[176,1180,1181],{"class":178,"line":179},[176,1182,1175],{},[16,1184,1185],{},[86,1186],{"alt":1187,"src":1188},"登陆成功","https://static.031130.xyz/uploads/2024/08/12/6495cf0b224c4.webp",[115,1190,1192],{"id":1191},"刷入-breed","刷入 breed",[16,1194,1195],{},"如果用我在安卓刷机的经验来讲 breed 是什么的话，我会把他类比成第三方 Recovery (TWRP)。这是一个能够帮助你去输入系统、备份系统的恢复模式。虽然我们可以直接刷入 padavan，但如果系统没有自带镜像刷写工具或者输入的系统打不开了，那可能就是一台路由器的报废，或许得靠编程器才能救回来。",[16,1197,1198,1199],{},"首先，我们到 breed 下载站上下载 breed 的镜像: ",[26,1200,1201],{"href":1201,"rel":1202},"https://breed.hackpascal.net/",[30],[16,1204,1205],{},[86,1206],{"alt":1207,"src":1208},"需要下载的 breed 镜像","https://static.031130.xyz/uploads/2024/08/12/6495cf9ca81de.webp",[16,1210,1211,1212,1215,1216,1219],{},"随后，在电脑上这个存放了 breed 镜像的路径上开一个 http server，我这里选择的是 ",[173,1213,1214],{},"darkhttpd","，Windows 或者 MacOS 用户可以选择使用 ",[173,1217,1218],{},"miniserve","，他们呢起的是一样的效果，甚至可以使用 python 直接开一个 local server。",[16,1221,1222],{},[86,1223],{"alt":1224,"src":1225},"本地 http 服务","https://static.031130.xyz/uploads/2024/08/12/6495d0bd79f4c.webp",[16,1227,1228],{},"接下来，通过自己电脑在路由器局域网内的那个 ip 地址并添加端口号在浏览器上访问你开的 http server，直接右键复制 breed 镜像的下载链接。",[16,1230,1231],{},[86,1232],{"alt":1233,"src":1234},"查看本机 ip","https://static.031130.xyz/uploads/2024/08/12/6495d0bd79f4d.webp",[16,1236,1237],{},[86,1238],{"alt":1239,"src":1240},"复制下载链接","https://static.031130.xyz/uploads/2024/08/12/6495d10b09fe0.webp",[16,1242,1243,1244,1247],{},"将 ssh 连接到的路由器终端 cd 到 /tmp 路径下，使用 wget 命令去下载你刚刚复制到的 url，这样我们就简单地将 breed 镜像传输到了路由器的内存上。再使用 ",[173,1245,1246],{},"mtd -r write breed-mt7621-xiaomi-r3g.bin Bootloader"," 刷入 breed，刷入成功后 ssh 将会自动断开连接，但并不会直接进入 breed。",[16,1249,1250],{},[86,1251],{"alt":1252,"src":1253},"Screenshot_20230623_203903.png","https://static.031130.xyz/uploads/2024/08/12/6495d17602f3a.webp",[16,1255,1256],{},"我们需要先断开路由器的电源，使用一根针（比如取卡针）怼在 RESET 按钮上面，再次接通路由器的电源并持续按压 RESET 按钮几秒钟，浏览器这时就会进入 breed 状态，浏览器访问 192.168.1.1 就可以看到他的控制面板。",[16,1258,1259],{},[86,1260],{"alt":1261,"src":1262},"Breed Web 界面","https://static.031130.xyz/uploads/2024/08/12/6495d2129a764.webp",[115,1264,1266],{"id":1265},"刷入-padavan","刷入 Padavan",[16,1268,1269],{},"在 Breed 中拥有很多的功能，不过我们用到的只是「固件更新」这一个功能，备份功能什么的可以自己尝试，这只是一个可选项。",[16,1271,1272,1273],{},"首先去下载站下载适配 Redmi AC2100 的 Padavan 镜像: ",[26,1274,1275],{"href":1275,"rel":1276},"https://opt.cn2qq.com/padavan/",[30],[16,1278,1279],{},[86,1280],{"alt":1281,"src":1282},"适配 Redmi AC2100 的 Padavan 镜像","https://static.031130.xyz/uploads/2024/08/12/6495d5cbbb5b9.webp",[16,1284,1285],{},"然后在 Breed 的 web 端控制台直接选择 Padavan 的系统镜像进行固件更新",[16,1287,1288],{},[86,1289],{"alt":1290,"src":1291},"固件更新界面","https://static.031130.xyz/uploads/2024/08/12/6495d63261ad4.webp",[16,1293,1294],{},"确认后直接刷入",[16,1296,1297],{},[86,1298],{"alt":1299,"src":1300},"固件刷入中","https://static.031130.xyz/uploads/2024/08/12/6495d64fd1e0e.webp",[16,1302,1303],{},"自动重启后，Padavan 就刷入完成了。",[16,1305,1306],{},"Padavan 的默认 WIFI 名是 PDCN 和 PDCN_5G，WIFI 密码是 1234567890",[16,1308,1309],{},[86,1310],{"alt":1311,"src":1312},"Padavan 的默认 WIFI","https://static.031130.xyz/uploads/2024/08/12/6495d6c11aa01.webp",[16,1314,1315],{},"浏览器输入 192.168.123.1 就可以进入默认的后台管理页面，管理页面的用户名和密码都是 admin",[16,1317,1318],{},[86,1319],{"alt":1320,"src":97},"Padavan 设置界面",[99,1322,1323,1326,1333,1340],{},[16,1324,1325],{},"参考文章:",[16,1327,1328],{},[26,1329,1332],{"href":1330,"rel":1331},"https://www.bilibili.com/read/cv18237601/",[30],"《小米/红米AC2100刷OpenWrt/Padavan/第三方固件的详细教程（2022年8月23日更新）》",[16,1334,1335],{},[26,1336,1339],{"href":1337,"rel":1338},"https://zhuanlan.zhihu.com/p/260531160",[30],"《小米、红米 AC2100 一键开启 SSH，可自定义安装各种插件》",[16,1341,1342],{},[26,1343,1346],{"href":1344,"rel":1345},"https://blog.alanwei.com/blog/2022/01/24/ssh-no-matching-host-key-type-found/",[30],"《解决SSH no matching host key type found 问题》",[1021,1348,1349],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":164,"searchDepth":186,"depth":186,"links":1351},[1352,1353,1354,1355,1356],{"id":1042,"depth":186,"text":1042},{"id":1048,"depth":186,"text":1048},{"id":1096,"depth":186,"text":1097},{"id":1191,"depth":186,"text":1192},{"id":1265,"depth":186,"text":1266},{"title":1358,"date":1359,"path":1360,"tags":1361,"body":1363},"Azure 教育订阅申请时遇到的麻烦","2023-05-12 23:38:29","/2023/05/12/troubles-when-applying-azure-education",[1362],"Azure",{"type":13,"value":1364,"toc":1451},[1365,1372,1385,1391,1394,1400,1403,1406,1412,1424,1427,1433,1436,1442,1445],[16,1366,1367,1368,1371],{},"进入大学已经快一年了，但我的 Azure 教育订阅申请一直没有成功，每年有 100 刀的额度，",[80,1369,1370],{},"再这样下去就要亏掉近 700 元了","，于是便打算趁期中考试刚结束的闲暇时间把 Azure 的教育订阅给过了。",[16,1373,1374,1375,1379,1380,1384],{},"我拥有 *.edu.cn 的邮箱，并且通过了 Github Student Pack 的认证，但每次在 ",[26,1376,1377],{"href":1377,"rel":1378},"https://signup.azure.com/studentverification?offerType=1",[30]," 页面尝试申请 Azure 订阅时，总是会得到一句冷冷的「你没有资格使用 Azure 免费帐户」。于是，我找到了 Azure 订阅支持客服帮忙，链接是这个: ",[26,1381,1382],{"href":1382,"rel":1383},"https://azureforeducation.microsoft.com/en-us/institutions/Contact",[30],"，简要填写了我的基本信息后就开始等待邮件回复了。",[16,1386,1387],{},[86,1388],{"alt":1389,"src":1390},"提交工单","https://static.031130.xyz/uploads/2024/08/12/645e646bc5b58.webp",[16,1392,1393],{},"我是周四上午申请的，不到一个小时就等来了微软的工单生成通知",[16,1395,1396],{},[86,1397],{"alt":1398,"src":1399},"微软的工单通知","https://static.031130.xyz/uploads/2024/08/12/645e5fdfb25a3.webp",[16,1401,1402],{},"但光有这工单也没有用，我只能继续等人工客服的介入。",[16,1404,1405],{},"在周五的早上十点，我收到了来自人工客服的邮件，并且在几分钟后收到了来自人工客服的电话（电话是 021 开头的，是归属地为上海的座机打来的，但客服操着严重的港台口音，可能是港台那边的客服通过上海的座机中转打给我的？）:",[16,1407,1408],{},[86,1409],{"alt":1410,"src":1411},"人工客服的邮件","https://static.031130.xyz/uploads/2024/08/12/645e60ad79001.webp",[16,1413,1414,1415,1418,1419,1423],{},"但很显然，这封邮件并没有提供任何行之有效的方案，我只能按照邮件中的指示将我的截图发了过去。不过客服不知道出于什么原因一定要求全屏截图（如果电话说的是全面屏，那也是指 PC 端的全屏截图），可能是他们有什么工作制度吧。回复邮件的时候一定要选择",[19,1416,1417],{},"回复全部","，好像是他们只使用 ",[26,1420,1422],{"href":1421},"mailto:support@mail.support.microsoft.com","support@mail.support.microsoft.com"," 这一个邮箱与我们通信，微软的服务器收到内容后会将我们发送的内容再抄送给给我们分配的客服手上，如果不选择「回复全部」的话，客服可能就看不到之前的通信记录了。",[16,1425,1426],{},"于是就在当天下午的2点收到了人工客服的第二封邮件，说是已经帮我提交到了后台处理。",[16,1428,1429],{},[86,1430],{"alt":1431,"src":1432},"来自人工客服的第二封邮件","https://static.031130.xyz/uploads/2024/08/12/645e62bae0c0a.webp",[16,1434,1435],{},"20 分钟后，我收到了这封应该是系统自动发送的邮件，说明我的账号因异常而触发了审查所以过不了 Azure 的教育订阅，需要我提交能够佐证我的学生身份的东西上去，当晚7点我便按照要求回信。",[16,1437,1438],{},[86,1439],{"alt":1440,"src":1441},"1683907484369.png","https://static.031130.xyz/uploads/2024/08/12/645e639e2c9d1.webp",[16,1443,1444],{},"当晚8点半，我便收到了来自系统的消息，得知异常已经解除，再次申请 Azure 学生认证就成功了。",[16,1446,1447],{},[86,1448],{"alt":1449,"src":1450},"异常解除","https://static.031130.xyz/uploads/2024/08/12/645e63e39523f.webp",{"title":164,"searchDepth":186,"depth":186,"links":1452},[],{"title":1454,"date":1455,"path":1456,"tags":1457,"body":1459},"执行 repo sync 后将 git-lfs 中的资源文件 checkout","2023-05-03 01:15:35","/2023/05/03/checkout-lfs-file-after-repo-sync",[1458],"笔记",{"type":13,"value":1460,"toc":1540},[1461,1466,1481,1498,1508,1518,1537],[99,1462,1463],{},[16,1464,1465],{},"最近期中考试挺忙的，五一好不容易有一些自己的时间，于是打算重操旧业，搞点有意思的内容，没想到准备阶段就出了新问题，有点跟不上时代了",[16,1467,1468,1469,1472,1473,1476,1477,1480],{},"本次遇到的问题是在执行 ",[173,1470,1471],{},"repo sync"," 命令后储存在 git-lfs 中的文件没有被自动 pull 并 checkout 出来，尽管我在 ",[173,1474,1475],{},"repo init"," 阶段已经加了 ",[173,1478,1479],{},"--git-lfs"," 参数了。",[16,1482,1483,1484,1489,1490,1493,1494,1497],{},"上 google 简单查了查，查到一篇 ",[26,1485,1488],{"href":1486,"rel":1487},"https://stackoverflow.com/questions/67280310/how-to-run-git-lfs-automatically-after-repo-sync",[30],"stackoverflow"," 的回答，给出的思路是使用 ",[173,1491,1492],{},"repo forall -c 'git lfs pull'"," 的方案解决的，意思是在 repo 同步的每一个 git 仓库中都自动执行 ",[173,1495,1496],{},"git lfs pull"," 命令，但这个解决方案在我这有两个问题。",[1499,1500,1501,1505],"ul",{},[1502,1503,1504],"li",{},"仓库的 git-lfs 没有被安装，所以 git-lfs 会直接报错",[1502,1506,1507],{},"将整个安装源码一千多个仓库一一执行这些命令的速度太慢了",[16,1509,1510,1511,1514,1515],{},"解决方案也很简单，直接检测每个 git 仓库下是否存在 ",[173,1512,1513],{},".lfsconfg"," 文件，存在的话就执行 ",[173,1516,1517],{},"git lfs install && git lfs pull",[167,1519,1521],{"className":169,"code":1520,"language":171,"meta":164,"style":164},"repo forall -c 'test -e .lfsconfig && git lfs install && git lfs pull'\n",[173,1522,1523],{"__ignoreMap":164},[176,1524,1525,1528,1531,1534],{"class":178,"line":179},[176,1526,1527],{"class":261},"repo",[176,1529,1530],{"class":257}," forall",[176,1532,1533],{"class":275}," -c",[176,1535,1536],{"class":257}," 'test -e .lfsconfig && git lfs install && git lfs pull'\n",[1021,1538,1539],{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":164,"searchDepth":186,"depth":186,"links":1541},[],{"title":1543,"date":1544,"path":1545,"tags":1546,"body":1547},"隐式转发——骚套路建站方案","2023-03-26 00:10:02","/2023/03/26/implicit-forwarding-is-a-new-site-deploying-method",[10],{"type":13,"value":1548,"toc":1784},[1549,1552,1558,1561,1569,1588,1591,1678,1681,1687,1694,1699,1702,1709,1714,1718,1721,1724,1738,1741,1759,1761,1781],[16,1550,1551],{},"其实很久以前就接触到了国内 DNS 解析服务商提供的这个「隐式 URL」 这种 “DNS 记录类型”了，但我域名没有备案，一直没有机会去体验。",[16,1553,1554],{},[86,1555],{"alt":1556,"src":1557},"DNSPOD 的解析面板中提供的记录类型","https://static.031130.xyz/uploads/2024/08/12/641f1e2cd8809.webp",[16,1559,1560],{},"今天社团内某个同学在折腾自己博客的时候又用到了「隐式 URL」，于是就借此机会了解了一下相关内容。",[16,1562,1563,1568],{},[26,1564,1567],{"href":1565,"rel":1566},"https://docs.dnspod.cn/dns/help-redirect-url/",[30],"DNSPOD 文档的描述","如下",[99,1570,1571],{},[16,1572,1573,1576,1577,1580,1581,1584,1585,1587],{},[19,1574,1575],{},"隐性转发","：用的是 iframe 框架技术、非重定向技术，效果为浏览器地址栏输入 ",[173,1578,1579],{},"http://www.dnspod.cn"," 回车，打开网站内容是目标地址 ",[173,1582,1583],{},"http://cloud.tencent.com/"," 的网站内容，但地址栏显示当前地址 ",[173,1586,1579],{}," 。",[16,1589,1590],{},"也就是说，所谓「隐式 URL」，只不过是域名解析的服务商用他们的服务器去响应了访客的请求，并回应了一段使用了 iframe 的 html 。这段代码打开了一个大小为 100% 的窗口去请求了被“隐式代理”的站点。我这位同学域名是备案在阿里云下的，阿里云所使用的 html 代码如下:",[167,1592,1596],{"className":1593,"code":1594,"language":1595,"meta":164,"style":164},"language-html shiki shiki-themes one-light one-dark-pro","\u003C!doctype html>\u003Chtml>\u003Cframeset rows=\"100%\">\u003Cframe src=\"http://example.com\">\u003Cnoframes>\u003Ca href=\"http://example.com\">Click here\u003C/a>\u003C/noframes>\u003C/frameset>\u003C/html>\n","html",[173,1597,1598],{"__ignoreMap":164},[176,1599,1600,1603,1606,1609,1612,1614,1616,1620,1623,1625,1628,1630,1633,1636,1638,1641,1643,1646,1648,1650,1653,1655,1657,1660,1662,1665,1667,1669,1671,1673,1675],{"class":178,"line":179},[176,1601,1602],{"class":268},"\u003C!",[176,1604,1605],{"class":229},"doctype",[176,1607,1608],{"class":275}," html",[176,1610,1611],{"class":268},">\u003C",[176,1613,1595],{"class":229},[176,1615,1611],{"class":268},[176,1617,1619],{"class":1618},"s-dj3","frameset",[176,1621,1622],{"class":275}," rows",[176,1624,297],{"class":268},[176,1626,1627],{"class":257},"\"100%\"",[176,1629,1611],{"class":268},[176,1631,1632],{"class":1618},"frame",[176,1634,1635],{"class":275}," src",[176,1637,297],{"class":268},[176,1639,1640],{"class":257},"\"http://example.com\"",[176,1642,1611],{"class":268},[176,1644,1645],{"class":1618},"noframes",[176,1647,1611],{"class":268},[176,1649,26],{"class":229},[176,1651,1652],{"class":275}," href",[176,1654,297],{"class":268},[176,1656,1640],{"class":257},[176,1658,1659],{"class":268},">Click here\u003C/",[176,1661,26],{"class":229},[176,1663,1664],{"class":268},">\u003C/",[176,1666,1645],{"class":1618},[176,1668,1664],{"class":268},[176,1670,1619],{"class":1618},[176,1672,1664],{"class":268},[176,1674,1595],{"class":229},[176,1676,1677],{"class":268},">\n",[16,1679,1680],{},"在下图中，我通过更改 hosts 文件实现将百度的域名在本地被解析到 localhost，并使用 iframe 标签将 b 站嵌入到页面中。当然，这并不能说明什么事情，不过是我个人的恶趣味罢了。",[16,1682,1683],{},[86,1684],{"alt":1685,"src":1686},"example","https://static.031130.xyz/uploads/2024/08/12/641f2272ab7fb.webp",[16,1688,1689,1690,1693],{},"将 ",[173,1691,1692],{},"http://example.com","改为目标站点，我们完全可以摆脱国内云服务商，在自己的服务器上直接实现「隐式代理」的效果。",[16,1695,1696],{},[19,1697,1698],{},"而这种方案，恰巧可以用于在境内机子上建站，尤其是针对未备案的域名。",[16,1700,1701],{},"碍于 Github Pages 在境内的访问体验并不好，所以直接把博客部署在 Github Pages 下一直都不是首选，因此很多人都会选择去购买一台境内的小鸡，带宽虽然不大，但跑个博客什么的其实没什么大问题，但备案就很麻烦了。",[16,1703,1704,1705,1708],{},"我们可以通过在 Github Pages（或者其他境外的服务器） 上挂一个 ",[173,1706,1707],{},"index.html"," ，html 中使用 iframe 嵌套一个部署在境内小鸡上的网页来规避掉备案的问题。而境内小鸡可以选用非标准端口去监听请求。",[86,1710],{"src":1711,"alt":1712,"style":1713},"https://static.031130.xyz/uploads/2024/08/12/642014b05bb43.webp","使用隐式转发","zoom:67%;",[86,1715],{"src":1716,"alt":1717,"style":1713},"https://static.031130.xyz/uploads/2024/08/12/642014519ce2a.webp","2.drawio.png",[16,1719,1720],{},"这样带来的好处是访客只需要从境外的服务器上获取一个不到 1 KB 大小的 html ，随后的所有请求都是指向境内云服务器的，所以网页打开时的体验会得到改善。",[16,1722,1723],{},"隐式转发拥有以下优势：",[1499,1725,1726,1729,1732,1735],{},[1502,1727,1728],{},"直接向境内的云服务器发送请求，速度会得到改善 （相比于直接部署在境外服务器上的方案）",[1502,1730,1731],{},"不怎么消耗境外服务器的流量 （相比于使用境外服务器反向代理的方案）",[1502,1733,1734],{},"浏览器的地址栏不会直接显示 ip 或端口号（相比于未备案使用境内服务器的非标准端口的方案）",[1502,1736,1737],{},"不需要备案（相比于备案后使用境内服务器的 80/443 端口的方案）",[16,1739,1740],{},"但也存在以下劣势：",[1499,1742,1743,1746,1753,1756],{},[1502,1744,1745],{},"移动端设备访问时好像还是会展示 PC 端的界面（存疑",[1502,1747,1748,1749,1752],{},"现代浏览器访问时可能会有 ",[173,1750,1751],{},"strict-origin-when-cross-origin"," 的问题（一般好像是出现在 iframe 的 html 是 https 访问，而目标站点是 http 访问的情况？）",[1502,1754,1755],{},"一些古老的浏览器可能不支持 iframe （？",[1502,1757,1758],{},"访问目标站点的其他路径时，浏览器地址栏的显示的地址不会变",[37,1760],{},[16,1762,1763,1764,1769,1770,1775,1776,69],{},"那么应",[26,1765,1768],{"href":1766,"rel":1767},"https://static.031130.xyz/uploads/2024/08/12/64201607999e3.webp",[30],"某些群友的要求","，本文的第二作者为 ",[26,1771,1774],{"href":1772,"rel":1773},"https://blog.f1nley.xyz",[30],"Finley","，通信作者为 ",[26,1777,1780],{"href":1778,"rel":1779},"https://blog.chordvers.com/",[30],"LanStarD",[1021,1782,1783],{},"html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .s-dj3, html code.shiki .s-dj3{--shiki-default:#000000;--shiki-dark:#FFFFFF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":164,"searchDepth":186,"depth":186,"links":1785},[],{"title":1787,"date":1788,"path":1789,"tags":1790,"body":1796},"在 vps 上配合 caddy 部署 siteproxy","2023-02-01 22:33:53","/2023/02/01/deploy-siteproxy-with-caddy-on-vps",[1791,1792,1793,1794,1795],"OpenSource Project","siteproxy","Archlinux","nodejs","Caddy",{"type":13,"value":1797,"toc":2209},[1798,1806,1813,1816,1831,1834,1838,1853,1909,1919,1923,1937,1940,1947,1950,1953,1995,2026,2031,2034,2112,2116,2123,2136,2143,2146,2159,2166,2172,2175,2178,2184,2191,2195,2202,2206],[16,1799,1800,1801,1805],{},"之前趁着春节活动的时候在某 vps 服务商买了 1 年的 vps，线路不算太好，但勉强够用，于是打算在上面部署一些反代程序。在群友的推荐下，发现了这款名为 ",[26,1802,1792],{"href":1803,"rel":1804},"https://github.com/netptop/siteproxy",[30]," 的开源项目。",[16,1807,1808,1809,1812],{},"siteproxy 相较于我在 ",[173,1810,1811],{},"r.zhullyb.top"," 部署的那个反代，其特点是可以运行在 vps 上，且将会替换被反代页面上的所有 url，因此遇到使用相对路径的网页也可以从容应对。",[16,1814,1815],{},"在项目的 README 中介绍了一种部署方案，但我仍有以下几点不太满意",[1499,1817,1818,1821,1828],{},[1502,1819,1820],{},"README 中的方案仅支持 nginx 部署，但我希望使用 caddy",[1502,1822,1823,1824,1827],{},"README 中的方案使用 npm 安装了 ",[173,1825,1826],{},"forever"," 来达到保活的目的，甚至为此安装了 nvm，但我一不希望使用 npm 在系统上安装软件、二不希望安装 nvm 与 forever",[1502,1829,1830],{},"原项目把根目录页做成了一个导航，指向了一些比较敏感的站点，而我希望换掉这个网页。",[16,1832,1833],{},"因此这篇博客也就应运而生。",[115,1835,1837],{"id":1836},"反代-8011-端口","反代 8011 端口",[16,1839,1840,1841,1844,1845,1849,1850,69],{},"根据项目 README 的描述，我们应当使用 nginx 去反代 ",[173,1842,1843],{},"127.0.0.1:8011"," 端口，但我是 caddy 用户，此前也",[26,1846,1848],{"href":1847},"/2022/05/30/use-caddy-to-proxy-wikipedia/","有过使用 caddy 反代","的经验，所以很容易写出一段使得程序可以正确运行的 ",[173,1851,1852],{},"Caddyfile",[167,1854,1858],{"className":1855,"code":1856,"language":1857,"meta":164,"style":164},"language-nginx shiki shiki-themes one-light one-dark-pro","example.com {\n        reverse_proxy   127.0.0.1:8011 {\n                header_up Host {upstream_hostport}\n                header_up X-Real-IP {http.request.remote.host}\n                header_up X-Forwarded-For {http.request.remote.host}\n                header_up X-Forwarded-Port {http.request.port}\n                header_up X-Forwarded-Proto {http.request.scheme}\n                header_up Accept-Encoding identity\n        }\n}\n","nginx",[173,1859,1860,1865,1870,1875,1880,1885,1890,1895,1900,1905],{"__ignoreMap":164},[176,1861,1862],{"class":178,"line":179},[176,1863,1864],{},"example.com {\n",[176,1866,1867],{"class":178,"line":186},[176,1868,1869],{},"        reverse_proxy   127.0.0.1:8011 {\n",[176,1871,1872],{"class":178,"line":193},[176,1873,1874],{},"                header_up Host {upstream_hostport}\n",[176,1876,1877],{"class":178,"line":199},[176,1878,1879],{},"                header_up X-Real-IP {http.request.remote.host}\n",[176,1881,1882],{"class":178,"line":205},[176,1883,1884],{},"                header_up X-Forwarded-For {http.request.remote.host}\n",[176,1886,1887],{"class":178,"line":211},[176,1888,1889],{},"                header_up X-Forwarded-Port {http.request.port}\n",[176,1891,1892],{"class":178,"line":216},[176,1893,1894],{},"                header_up X-Forwarded-Proto {http.request.scheme}\n",[176,1896,1897],{"class":178,"line":3},[176,1898,1899],{},"                header_up Accept-Encoding identity\n",[176,1901,1902],{"class":178,"line":226},[176,1903,1904],{},"        }\n",[176,1906,1907],{"class":178,"line":237},[176,1908,421],{},[16,1910,1689,1911,1914,1915,1918],{},[173,1912,1913],{},"example.com"," 的 A 记录解析到 vps 主机的 ip，并使用 ",[173,1916,1917],{},"systemctl"," 重新启动 caddy，这一步就算完成了。",[115,1920,1922],{"id":1921},"安装-nodejs","安装 nodejs",[16,1924,1925,1926,1929,1930,1933,1934,1936],{},"我在 vps 上安装的发行版是 Archlinux，所以直接 ",[173,1927,1928],{},"pacman -S nodejs"," 安装完就是了，别的发行版应该也可以直接调用系统默认的包管理器安装 ",[173,1931,1932],{},"node"," 或者 ",[173,1935,1794],{}," 完成这一步。",[115,1938,1939],{"id":1939},"下载程序",[16,1941,1942,1943,1946],{},"首先，我们需要一个地方来存放我们下载的程序，我使用的是 ",[173,1944,1945],{},"/opt"," 路径。",[16,1948,1949],{},"我们可以直接根据 README 所说的，直接 clone 整个项目，但我本人并不想这么做，项目里似乎有太多对于 vps 用户没有用的东西了。此外，整个项目首页我也不想要，首页的导航指向了一些比较敏感的网站，而我的反代就想安安心心的一个人用。",[16,1951,1952],{},"综合以上需求，我所需要的文件一共就五个:",[167,1954,1956],{"className":169,"code":1955,"language":171,"meta":164,"style":164},"├── config.js\n├── index.js\n├── logger.js\n├── package.json\n└── Proxy.js\n",[173,1957,1958,1966,1973,1980,1987],{"__ignoreMap":164},[176,1959,1960,1963],{"class":178,"line":179},[176,1961,1962],{"class":261},"├──",[176,1964,1965],{"class":257}," config.js\n",[176,1967,1968,1970],{"class":178,"line":186},[176,1969,1962],{"class":261},[176,1971,1972],{"class":257}," index.js\n",[176,1974,1975,1977],{"class":178,"line":193},[176,1976,1962],{"class":261},[176,1978,1979],{"class":257}," logger.js\n",[176,1981,1982,1984],{"class":178,"line":199},[176,1983,1962],{"class":261},[176,1985,1986],{"class":257}," package.json\n",[176,1988,1989,1992],{"class":178,"line":205},[176,1990,1991],{"class":261},"└──",[176,1993,1994],{"class":257}," Proxy.js\n",[167,1996,1998],{"className":169,"code":1997,"language":171,"meta":164,"style":164},"mkdir -p /opt/siteproxy\ncd /opt/siteproxy\nwget https://raw.githubusercontent.com/netptop/siteproxy/master/{config.js,index.js,logger.js,package.json,Proxy.js}\n",[173,1999,2000,2011,2018],{"__ignoreMap":164},[176,2001,2002,2005,2008],{"class":178,"line":179},[176,2003,2004],{"class":261},"mkdir",[176,2006,2007],{"class":275}," -p",[176,2009,2010],{"class":257}," /opt/siteproxy\n",[176,2012,2013,2016],{"class":178,"line":186},[176,2014,2015],{"class":546},"cd",[176,2017,2010],{"class":257},[176,2019,2020,2023],{"class":178,"line":193},[176,2021,2022],{"class":261},"wget",[176,2024,2025],{"class":257}," https://raw.githubusercontent.com/netptop/siteproxy/master/{config.js,index.js,logger.js,package.json,Proxy.js}\n",[16,2027,2028,2029],{},"然后补上一个 ",[173,2030,1707],{},[16,2032,2033],{},"我这边选择直接使用 JavaScript 将对于 / 的访问直接重定向到我的博客。",[167,2035,2039],{"className":2036,"code":2037,"language":2038,"meta":164,"style":164},"language-javascript shiki shiki-themes one-light one-dark-pro","\u003Chtml>\u003Chead>\u003Cmeta http-equiv=\"refresh\" content=\"0; url=https://zhul.in/\" />\u003C/head>\u003Cbody>Redirect to \u003Ca href=\"\">https://zhul.in/\u003C/a>\u003C/body>\u003C/html>\n","javascript",[173,2040,2041],{"__ignoreMap":164},[176,2042,2043,2046,2048,2050,2053,2055,2058,2062,2064,2067,2070,2072,2075,2078,2080,2082,2085,2088,2090,2092,2094,2097,2100,2102,2104,2106,2108,2110],{"class":178,"line":179},[176,2044,2045],{"class":268},"\u003C",[176,2047,1595],{"class":229},[176,2049,1611],{"class":268},[176,2051,2052],{"class":229},"head",[176,2054,1611],{"class":268},[176,2056,2057],{"class":229},"meta",[176,2059,2061],{"class":2060},"so_Uh"," http-equiv",[176,2063,297],{"class":233},[176,2065,2066],{"class":257},"\"refresh\"",[176,2068,2069],{"class":2060}," content",[176,2071,297],{"class":233},[176,2073,2074],{"class":257},"\"0; url=https://zhul.in/\"",[176,2076,2077],{"class":268}," />\u003C/",[176,2079,2052],{"class":229},[176,2081,1611],{"class":268},[176,2083,2084],{"class":229},"body",[176,2086,2087],{"class":268},">Redirect to \u003C",[176,2089,26],{"class":229},[176,2091,1652],{"class":2060},[176,2093,297],{"class":233},[176,2095,2096],{"class":257},"\"\"",[176,2098,2099],{"class":268},">https://zhul.in/\u003C/",[176,2101,26],{"class":229},[176,2103,1664],{"class":268},[176,2105,2084],{"class":229},[176,2107,1664],{"class":268},[176,2109,1595],{"class":229},[176,2111,1677],{"class":268},[2113,2114,2115],"h3",{"id":2115},"安装依赖",[16,2117,2118,2119,2122],{},"在 ",[173,2120,2121],{},"/opt/siteproxy"," 目录下执行",[167,2124,2126],{"className":169,"code":2125,"language":171,"meta":164,"style":164},"npm install\n",[173,2127,2128],{"__ignoreMap":164},[176,2129,2130,2133],{"class":178,"line":179},[176,2131,2132],{"class":261},"npm",[176,2134,2135],{"class":257}," install\n",[16,2137,2138,2139,2142],{},"npm 将会根据 ",[173,2140,2141],{},"package.json"," 的内容自动安装所需的依赖。",[115,2144,2145],{"id":2145},"修改配置文件",[167,2147,2149],{"className":169,"code":2148,"language":171,"meta":164,"style":164},"$EDITOR /opt/siteproxy/config.js\n",[173,2150,2151],{"__ignoreMap":164},[176,2152,2153,2156],{"class":178,"line":179},[176,2154,2155],{"class":229},"$EDITOR",[176,2157,2158],{"class":268}," /opt/siteproxy/config.js\n",[16,2160,2161,2162,2165],{},"按照 README 所说，修改 ",[173,2163,2164],{},"serverName"," 字段",[16,2167,2168],{},[86,2169],{"alt":2170,"src":2171},"需要修改的 serverName 字段","https://static.031130.xyz/uploads/2024/08/12/63da866e26712.webp",[115,2173,2174],{"id":2174},"设置开机自启动",[16,2176,2177],{},"这里我选择使用 systemd 帮助我实现 siteproxy 程序的开机自启动，service 文件是我直接根据 frp 程序提供的 service 改的。",[167,2179,2182],{"className":2180,"code":2181,"language":1136},[1134],"cat /usr/lib/systemd/system/siteproxy.service \n-----\n[Unit]\nDescription=SiteProxy\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nType=simple\nUser=nobody\nRestart=on-failure\nRestartSec=5s\nEnvironment=\"NODE_PATH=/opt/siteproxy/\"\nExecStart=node --tls-min-v1.0 /opt/siteproxy/index.js \n\n[Install]\nWantedBy=multi-user.target\n",[173,2183,2181],{"__ignoreMap":164},[16,2185,2186,2187,2190],{},"随后使用 ",[173,2188,2189],{},"systemctl enable siteproxy --now"," 启动即可访问。",[115,2192,2194],{"id":2193},"为反代站点添加访问密码可选","为反代站点添加访问密码（可选）",[16,2196,2197,2198,69],{},"参考",[26,2199,2201],{"href":2200},"/2021/10/21/picuploader-on-archlinux-with-caddy/#%E8%AE%BE%E7%BD%AE%E8%AE%BF%E9%97%AE%E5%AF%86%E7%A0%81%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89","我的另一篇博客",[115,2203,2205],{"id":2204},"使用防火墙程序禁止-8011-的公网访问可选","使用防火墙程序禁止 8011 的公网访问（可选）",[1021,2207,2208],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .so_Uh, html code.shiki .so_Uh{--shiki-default:#986801;--shiki-default-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic}html pre.shiki code .sknuh, html code.shiki .sknuh{--shiki-default:#383A42;--shiki-dark:#56B6C2}",{"title":164,"searchDepth":186,"depth":186,"links":2210},[2211,2212,2213,2216,2217,2218,2219],{"id":1836,"depth":186,"text":1837},{"id":1921,"depth":186,"text":1922},{"id":1939,"depth":186,"text":1939,"children":2214},[2215],{"id":2115,"depth":193,"text":2115},{"id":2145,"depth":186,"text":2145},{"id":2174,"depth":186,"text":2174},{"id":2193,"depth":186,"text":2194},{"id":2204,"depth":186,"text":2205},{"title":2221,"date":2222,"path":2223,"tags":2224,"body":2228},"onedrive(by abraunegg) —— 一个 Linux 下的开源 OneDrive 客户端(cli)","2022-12-24 22:40:13","/2022/12/24/onedrive-abraunegg-recommendation",[2225,1793,1791,2226,2227],"Linux","Experience","OneDrive",{"type":13,"value":2229,"toc":2543},[2230,2238,2241,2250,2257,2276,2279,2290,2297,2303,2306,2317,2323,2329,2332,2343,2345,2372,2374,2381,2387,2415,2421,2427,2431,2440,2443,2446,2458,2461,2465,2471,2475,2481,2485,2490,2494,2499,2503,2512,2516,2522,2541],[99,2231,2232],{},[16,2233,2234,2235],{},"这款 Linux 下的 OneDrive 客户端我其实一年前就已经在用了，最近打算给自己的 vps 重装系统并重新部署下 aria 的下载服务，顺便把上传到 OneDrive 的功能增加进去，便又想到了这款运行在命令行中的第三方开源 Linux 客户端，去谷歌上搜索了一番，依然没有什么成规模的中文博客去写它的用法，于是就打算自己来写。",[80,2236,2237],{},"那肯定不是因为我博客这个月没有什么题材",[115,2239,2240],{"id":2240},"安装",[16,2242,2243,2244,2249],{},"abraunegg 用 D 语言写的 OneDrive 客户端安装起来并不是什么难事，Ubuntu/Debian/Fedora 等常见发行版的仓库中均有它的身影，具体情况在 ",[26,2245,2248],{"href":2246,"rel":2247},"https://github.com/abraunegg/onedrive/blob/master/docs/INSTALL.md",[30],"Github 项目页面","中都有描述。",[16,2251,2252,2253,2256],{},"在 Archlinux 下，我可以直接从 AUR/ArchlinuxCN 中安装 ",[173,2254,2255],{},"onedrive-abraunegg"," 这个包来安装这个项目。",[167,2258,2260],{"className":169,"code":2259,"language":171,"meta":164,"style":164},"sudo pacman -S onedrive-abraunegg\n",[173,2261,2262],{"__ignoreMap":164},[176,2263,2264,2267,2270,2273],{"class":178,"line":179},[176,2265,2266],{"class":261},"sudo",[176,2268,2269],{"class":257}," pacman",[176,2271,2272],{"class":275}," -S",[176,2274,2275],{"class":257}," onedrive-abraunegg\n",[115,2277,2278],{"id":2278},"运行前配置",[99,2280,2281],{},[16,2282,2283,2284,2289],{},"本章内容中的所用到的和没有用到的命令都可以在",[26,2285,2288],{"href":2286,"rel":2287},"https://github.com/abraunegg/onedrive/blob/master/docs/USAGE.md",[30],"该项目的 Github 仓库","中找到。",[16,2291,2292,2293,2296],{},"在终端直接运行 ",[173,2294,2295],{},"onedrive"," 命令，程序将打印出一行地址。",[16,2298,2299],{},[86,2300],{"alt":2301,"src":2302},"登陆地址","https://static.031130.xyz/uploads/2024/08/12/63a71dbfd6ed3.webp",[16,2304,2305],{},"使用浏览器打开地址，就会跳出微软的登陆页面，正常登陆即可。",[16,2307,2308,2309,2312,2313,2316],{},"登陆成功后，浏览器将会显示一片白屏，不必慌张，直接将浏览器地址栏中的网址复制后粘贴进终端中即可完成配置，获取到的 ",[173,2310,2311],{},"refresh_token"," 将会被保存到 ",[173,2314,2315],{},"$HOME/.config/onedrive"," 下。",[16,2318,2319],{},[86,2320],{"alt":2321,"src":2322},"浏览器显示白屏","https://static.031130.xyz/uploads/2024/08/12/63a71e1f9c916.webp",[16,2324,2325],{},[86,2326],{"alt":2327,"src":2328},"授权成功","https://static.031130.xyz/uploads/2024/08/12/63a71ec6d5aca.webp",[16,2330,2331],{},"账号授权成功以后我有两个迫切的需求需要在开始同步前解决:",[1499,2333,2334,2337],{},[1502,2335,2336],{},"我不希望把我 OneDrive 里所有的文件下载下来，我在 OneDrive 中存放了至少 1T 的数据，而我的系统盘就只有 512G，这绝对是放不下的，所以我想仅同步部分文件夹。",[1502,2338,2339,2340,2316],{},"我需要修改被同步到的文件夹的路径，我不想把 OneDrive 上的文件下载到我的 ",[173,2341,2342],{},"/home",[37,2344],{},[16,2346,2347,2348,2351,2352,2354,2355,2357,2358,2361,2362,2365,2366,2371],{},"要解决第一个需求，我们可以通过创建 ",[173,2349,2350],{},"sync_list"," 的方式指定我们要同步的文件，在 ",[173,2353,2315],{}," 路径下创建 ",[173,2356,2350],{}," ，并填入需要的文件或文件夹名，或在 ",[173,2359,2360],{},"!","或",[173,2363,2364],{},"-"," 后面写上不想同步的文件或文件夹名即可，支持通配符，在",[26,2367,2370],{"href":2368,"rel":2369},"https://github.com/abraunegg/onedrive/blob/master/docs/USAGE.md#performing-a-selective-sync-via-sync_list-file",[30],"原仓库的文档中","给出了非常详细的描述。",[37,2373],{},[16,2375,2376,2377,2380],{},"我们可以先使用 ",[173,2378,2379],{},"onedrive --display-config"," 命令查看我们当前的配置情况。（我这边直接应用 Github 文档中展示的内容）",[167,2382,2385],{"className":2383,"code":2384,"language":1136},[1134],"onedrive version                             = vX.Y.Z-A-bcdefghi\nConfig path                                  = /home/alex/.config/onedrive\nConfig file found in config path             = true\nConfig option 'sync_dir'                     = /home/alex/OneDrive\nConfig option 'enable_logging'               = false\n...\nSelective sync 'sync_list' configured        = false\nConfig option 'sync_business_shared_folders' = false\nBusiness Shared Folders configured           = false\nConfig option 'webhook_enabled'              = false\n",[173,2386,2384],{"__ignoreMap":164},[16,2388,2389,2390,2393,2394,2397,2398,2401,2402,2407,2408,2411,2412],{},"这很显然，OneDrive 中的文件默认将会被保存到 ",[173,2391,2392],{},"$HOME/OneDrive"," 中。为了修改这个位置项，我们直接在 ",[173,2395,2396],{},"$HOME/.config/onedrive/"," 路径下创建一个名为 ",[173,2399,2400],{},"config"," 的文件，把此处给的 c",[26,2403,2406],{"href":2404,"rel":2405},"https://github.com/abraunegg/onedrive/blob/master/docs/USAGE.md#the-default-configuration-file-is-listed-below",[30],"onfiguration examples"," 全部复制进去，找到 ",[173,2409,2410],{},"sync_dir"," 把前面的注释删掉，改成自己喜欢的路径 ",[80,2413,2414],{},"（别问我为什么写 /tmp，问就是我内存够大",[16,2416,2417],{},[86,2418],{"alt":2419,"src":2420},"修改同步路径！","https://static.031130.xyz/uploads/2024/08/12/63a7282ee55e7.webp",[16,2422,2423,2424,2426],{},"修改好此处的配置文件后，可以再次运行 ",[173,2425,2379],{}," 检查自己的配置文件格式有没有问题、自己更改的配置项有没有生效，这样就解决了我的第二个需求。",[115,2428,2430],{"id":2429},"standalone-mode-monitor-mode","Standalone Mode / Monitor Mode?",[16,2432,2433,2434,2439],{},"这款 OneDrive 客户端支持以两种方式运行，monitor 模式将会监控本地磁盘上的文件状态，因而在同步路径内的文件从一个路径移动到另一个路径时，客户端将不会傻傻地执行「在原路径删除远端文件-重新上传新路径的本地文件」的这一个过程，具体使用 monitor 或 standalone 模式还请自行斟酌，可参考 ",[26,2435,2438],{"href":2436,"rel":2437},"https://github.com/abraunegg/onedrive/blob/master/docs/known-issues.md#moving-files-into-different-folders-should-not-cause-data-to-delete-and-be-re-uploaded",[30],"Moving files into different folders should not cause data to delete and be re-uploaded"," .",[115,2441,2442],{"id":2442},"开始同步",[16,2444,2445],{},"使用该客户端执行同步的命令很简单，即",[167,2447,2449],{"className":169,"code":2448,"language":171,"meta":164,"style":164},"onedrive --synchronize\n",[173,2450,2451],{"__ignoreMap":164},[176,2452,2453,2455],{"class":178,"line":179},[176,2454,2295],{"class":261},[176,2456,2457],{"class":275}," --synchronize\n",[16,2459,2460],{},"但可选的运行参数很多，我只举出最常用的几个例子",[2113,2462,2464],{"id":2463},"dry-run","--dry-run",[16,2466,2467,2468,2470],{},"使用 ",[173,2469,2464],{}," 选项后，OneDrive 将不会执行同步操作，它将在终端输出原本将会被执行的操作以供你排查自己的配置是否正确。",[2113,2472,2474],{"id":2473},"local-first","--local-first",[16,2476,2477,2478,2480],{},"字面意思，",[173,2479,2474],{}," 即为本地优先，同步时如果遇到文件冲突将会优先参考本地的情况。",[2113,2482,2484],{"id":2483},"single-directory","--single-directory",[16,2486,2487,2489],{},[173,2488,2484],{}," 后面需要跟一个子文件夹在 OneDrive 根目录中的相对路径，这将使本次的同步操作仅对单个文件夹生效。",[2113,2491,2493],{"id":2492},"download-only","--download-only",[16,2495,2477,2496,2498],{},[173,2497,2493],{}," 即为仅下载模式。",[2113,2500,2502],{"id":2501},"upload-only","--upload-only",[16,2504,2477,2505,2507,2508,2511],{},[173,2506,2502],{},"即为仅上传模式，后跟 ",[173,2509,2510],{},"--no-remote-delete","将不会在 OneDrive 网盘中删除本地相较于网盘中缺少的文件，真正做到 upload only.",[2113,2513,2515],{"id":2514},"resync","--resync",[16,2517,2518,2519,2521],{},"当下列配置项被更改时，需要执行 ",[173,2520,2515],{}," 来确保客户端正在按照更新后的配置文件来同步你的数据",[1499,2523,2524,2526,2529,2532,2535,2538],{},[1502,2525,2410],{},[1502,2527,2528],{},"skip_dir",[1502,2530,2531],{},"skip_file",[1502,2533,2534],{},"drive_id",[1502,2536,2537],{},"Modifying sync_list",[1502,2539,2540],{},"Modifying business_shared_folders",[1021,2542,1539],{},{"title":164,"searchDepth":186,"depth":186,"links":2544},[2545,2546,2547,2548],{"id":2240,"depth":186,"text":2240},{"id":2278,"depth":186,"text":2278},{"id":2429,"depth":186,"text":2430},{"id":2442,"depth":186,"text":2442,"children":2549},[2550,2551,2552,2553,2554,2555],{"id":2463,"depth":193,"text":2464},{"id":2473,"depth":193,"text":2474},{"id":2483,"depth":193,"text":2484},{"id":2492,"depth":193,"text":2493},{"id":2501,"depth":193,"text":2502},{"id":2514,"depth":193,"text":2515},{"title":2557,"date":2558,"path":2559,"tags":2560,"body":2563},"【翻译】关于2022年11月的事件的一些话[Z-Library]","2022-11-21 13:24:33","/2022/11/21/a-few-words-about-the-events-of-november-2022",[2561,2562],"翻译","Z-Library",{"type":13,"value":2564,"toc":2629},[2565,2576,2578,2589,2597,2602,2605,2610,2613,2623],[99,2566,2567],{},[16,2568,2569,2570,2575],{},"正如我们所知道的那样，Z-Library 的主域名在前不久已经被美国警方给 take down 了，目前仅剩下 Telegram Bot 和 Tor 网络两种访问方式是我们仍然可以信任的。在11月18日，Z-Library 于其博客上发布了",[26,2571,2574],{"href":2572,"rel":2573},"http://bookszlibb74ugqojhzhg2a63w5i2atv5bqarulgczawnbmsb6s6qead.onion/blog/36",[30],"一篇新的文章（onion链接）","，此处是我的翻译版本。",[37,2577],{},[99,2579,2580],{},[16,2581,2582,2583,2588],{},"As many of you know, on November 3rd most of our domains were seized and some our servers were suspended by the United States Department of  Justice and Federal Bureau of Investigation. In addition, on November 16 the United States Department of Justice ",[26,2584,2587],{"href":2585,"rel":2586},"https://www.justice.gov/usao-edny/pr/two-russian-nationals-charged-running-massive-e-book-piracy-website",[30],"published"," the indictment against two citizens of Russia, Anton and Valeria. They  are accused of criminal copyright infringement, wire fraud and money  laundering to operate the Z-Library.",[16,2590,2591,2592,2596],{},"正如你们大多数人所知道的那样，在11月3日，我们大多数的域名和一部分服务器被美国司法部和联邦调查局封禁了。此外，在11月16日，美国司法部出",[26,2593,2595],{"href":2585,"rel":2594},[30],"发布了","针对两个俄罗斯公民—— Anton 和 Valeria 的指控。他们因经营 Z-Library 而被指控犯有侵犯版权、电汇欺诈和洗钱等罪名。",[99,2598,2599],{},[16,2600,2601],{},"We refrain commenting on the alleged Anton and Valeria involvement in  the Z-Library project and the charges against them. We are very sorry  they are arrested. We also regret that some authors have suffered  because of Z-Library and ask for their forgiveness. We do our best to  respond to all complaints about files hosted in our library if it  violates author's rights.",[16,2603,2604],{},"我们不评论 Anton 和 Valeria 涉嫌参与 Z-Library 项目的行为以及对他们的指控。我们对他们的被捕感到非常抱歉，也对一些因为 Z-Library 而遭受的损失的作者表示歉意，并请求他们的原谅。如果我们的网站中托管的文件侵犯了作者的权利，我们会尽最大努力回应所有的投诉。",[99,2606,2607],{},[16,2608,2609],{},"We see the resonance recent events caused, we see how many  people support and believe in Z-Library. Thank you for your support, it  is extremely valuable to us. Thank you for each donation you make. You  are the ones who making the existence of the Z-Library possible. We  believe the knowledge and cultural heritage of mankind should be  accessible to all people around the world, regardless of their wealth,  social status, nationality, citizenship, etc. This is the only purpose  Z-Library is made for.",[16,2611,2612],{},"我们看到最近发生的事件所引起的共鸣，我们看到了有多少人支持并信任 Z-Library。 感谢您的支持，这对我们来说极其珍贵。我们感激您的每一笔捐款，你们是使 Z-Library 的存在成为可能的人。 我们认为，人类的知识和文化遗产应该为全世界所有人所用，无论其财富、社会地位、国籍、公民身份等，而这，正是 Z-Library 存在的唯一目的。",[99,2614,2615],{},[16,2616,2618,2619,2622],{"align":2617},"right","My makeup may be flaking",[2620,2621],"br",{},"But my smile still stays on",[16,2624,2625,2626,2628],{"align":2617},"我的妆容可能会脱落",[2620,2627],{},"但我的笑容将会永存",{"title":164,"searchDepth":186,"depth":186,"links":2630},[],{"title":2632,"date":2633,"path":2634,"tags":2635,"body":2638},"【已过期】使用 vercel+supabase 免费部署 umami","2022-11-08 13:37:53","/2022/11/08/free-umami-deploy-plan",[10,2636,1791,2637],"umami","vercel",{"type":13,"value":2639,"toc":2796},[2640,2651,2654,2657,2660,2666,2674,2688,2694,2697,2703,2709,2715,2721,2733,2739,2742,2748,2759,2765,2771,2777,2780,2786],[99,2641,2642,2648],{},[16,2643,2644,2645,69],{},"讲起静态网站的访客统计，我最先使用的是百度统计，但后来转到了 umeng，发现后续的几天百度爬虫的光顾次数反而多了起来。好家伙，使用百度统计相当于把自己网站访问量向百度全盘托出，",[80,2646,2647],{},"我说我的博客怎么还不被百度收录呢",[16,2649,2650],{},"后来，umeng 推出了新的服务条款，好像是说不再向未备案的站点提供服务，随后不得不转向自部署的开源网站统计程序。",[16,2652,2653],{},"umami 提供了多种部署方式，在 vps 上可以非常轻松地使用 docker 一键部署，但上次 vps 到期时用 1Mbps 的小水管拖了好久都没有把博客前几个月的访客数据拖下来，一气之下我选择直接丢掉了这些可有可无的数据。",[16,2655,2656],{},"所以这一次，我决定放弃在自己的 vps 上部署，转去探索免费的部署方案。",[16,2658,2659],{},"umami 的官方文档上提供了非常多的部署方案，我个人比较喜欢 vercel，本站的随机图片 api 就是挂在 vercel 上的，界面比较简洁，且境内访问还算OK。",[16,2661,2662],{},[86,2663],{"alt":2664,"src":2665},"umami官方文档提供的部署方案","https://static.031130.xyz/uploads/2024/08/12/6369ee9308dc3.webp",[16,2667,2668,2669,69],{},"但问题在于 vercel 本身并不提供免费的数据库，所以我们不得不去寻找一些长期免费提供数据库的供应商，我选择了 ",[26,2670,2673],{"href":2671,"rel":2672},"https://supabase.com/pricing",[30],"supabase",[16,2675,2676,2677,2680,2681,2684,2685],{},"在下图中选择顶栏的 ",[19,2678,2679],{},"Pricing"," 后看到这个 ",[19,2682,2683],{},"$0/month"," 就",[80,2686,2687],{},"疯狂戳烂这个 Get Started",[16,2689,2690],{},[86,2691],{"alt":2692,"src":2693},"supabase价目表","https://static.031130.xyz/uploads/2024/08/12/6369ef8d3451e.webp",[16,2695,2696],{},"随便填写个项目名然后输入一个足够强大的密码，地区选择美国就行，东部西部无所谓（毕竟我也不知道 vercel 的机房是在东部还是西部）",[16,2698,2699],{},[86,2700],{"alt":2701,"src":2702},"创建项目ing","https://static.031130.xyz/uploads/2024/08/12/6369f03faba15.webp",[16,2704,2705,2706],{},"看到这个小小的绿标就说明数据库正在初始化(",[80,2707,2708],{},"你先别急，让我先急",[16,2710,2711],{},[86,2712],{"alt":2713,"src":2714},"项目初始化中","https://static.031130.xyz/uploads/2024/08/12/6369f0d98a59c.webp",[16,2716,2717],{},[86,2718],{"alt":2719,"src":2720},"进行一通设置，把网站关闭后直接打入冷宫（x","https://static.031130.xyz/uploads/2024/08/12/6369f209c27aa.webp",[16,2722,2723,2724,2729,2730],{},"随后打开官方文档，点击其",[26,2725,2728],{"href":2726,"rel":2727},"https://umami.is/docs/running-on-vercel",[30],"描述 vercel 那一页","中大大的 ",[19,2731,2732],{},"Deploy",[16,2734,2735],{},[86,2736],{"alt":2737,"src":2738},"vercel on Document","https://static.031130.xyz/uploads/2024/08/12/6369f2bda5f78.webp",[16,2740,2741],{},"初始化过程中，vercel 会要求你创建一个 git 仓库，一般私有库就够了。",[16,2743,2744],{},[86,2745],{"alt":2746,"src":2747},"创建仓库","https://static.031130.xyz/uploads/2024/08/12/6369f33ccf6d0.webp",[16,2749,2750,2751,2754,2755,2758],{},"随后需要我们设置两个环境变量，第一个 ",[173,2752,2753],{},"DATABASE_URL"," 就是我们刚刚从 supabase 中复制下来并替换好 password 的 url，第二个 ",[173,2756,2757],{},"HASH_SALT","需要你随意生成一长串字符串~~（比如你可以找一个新手让他帮你退出 vim~~",[16,2760,2761],{},[86,2762],{"alt":2763,"src":2764},"设置环境变量","https://static.031130.xyz/uploads/2024/08/12/6369f3adbd34d.webp",[16,2766,2767,2768,2770],{},"点击 ",[19,2769,2732],{}," 并等上两分钟，我们就部署完啦（首页没东西，白屏是正常的",[16,2772,2773],{},[86,2774],{"alt":2775,"src":2776},"部署成功","https://static.031130.xyz/uploads/2024/08/12/6369f58f6acd4.webp",[16,2778,2779],{},"来到项目首页，点击任意域名即可访问到我们部署的 umami，不过 vercel 的域名近年来也有被污染的情况，建议在设置里绑定自己的域名。",[16,2781,2782],{},[86,2783],{"alt":2784,"src":2785},"项目首页","https://static.031130.xyz/uploads/2024/08/12/6369f5ec7a0e2.webp",[16,2787,2788,2789,2792,2793,2795],{},"哦对了，别忘了 umami 的默认用户名密码是",[173,2790,2791],{},"admin","和",[173,2794,2636],{},"，别到时候点击进去看到登陆框一脸懵，这是在文档里写过的。",{"title":164,"searchDepth":186,"depth":186,"links":2797},[],{"title":2799,"date":2800,"path":2801,"tags":2802,"body":2806},"我的博客部署方案","2022-11-04 16:41:28","/2022/11/04/my-blog-plan",[10,2803,2804,2805],"Github Action","Hexo","Blog",{"type":13,"value":2807,"toc":3084},[2808,2811,2822,2834,2837,2846,2852,2859,2868,3072,3074,3081],[16,2809,2810],{},"一直以来，我的博客使用的几乎都是 Hexo 框架。",[16,2812,2813,2814,2817,2818,2821],{},"静态博客的一大优点就是可以支持 Serverless 部署，这使得我们可以直接在 Github Pages、Vercel 等平台直接部署上我的博客，如果用上 ",[173,2815,2816],{},".eu.org"," ",[80,2819,2820],{},"或者非洲国家免费域名","就可以实现零成本的博客部署。",[16,2823,2824,2825,2828,2829,2833],{},"当然，我现在的博客并非是零成本搭建的，如你所见，我购入了印度国别域名 ",[173,2826,2827],{},"zhul.in"," 来凑出 ",[2830,2831,2832],"em",{},"竹林"," 的谐音。并在 Github Pages、Vercel 等平台的访问质量每况愈下的情况下又购入了位于香港的 VPS，这就引申出了今天的内容——介绍我博客的部署方案。",[16,2835,2836],{},"我的博客是使用 HK vps + Github Pages 两处部署实现的，通过 dnspod 免费版的域名分境内/外解析实现了分流。当境内的访客访问我的博客时，他们将会被解析到香港的 vps 上以获得更好的体验，而境外的访客将会被解析到 Github pages，毕竟 Github Pages 在境外的速度并不慢，并且稳定性肯定比我这小鸡要好得多。",[16,2838,2839,2840,2845],{},"不过关于通过 dns 解析分流这件事，之前看",[26,2841,2844],{"href":2842,"rel":2843},"https://www.cities.ee/read-1553.html",[30],"城南旧事","的博客中有提到可以使用境外的 GeoScaling 完成，其免费支持全球分as、城市、经纬等智能解析，也支持自编辑脚本，看起来以后可以去试一试。",[16,2847,2848],{},[86,2849],{"alt":2850,"src":2851},"Dnspod截图","https://static.031130.xyz/uploads/2024/08/12/6364d4f46ff1c.webp",[16,2853,2854,2855,2858],{},"而 Hexo 框架最被人诟病的一点是更新麻烦。这一点不可否认，使用 ",[173,2856,2857],{},"hexo generate"," 生成静态网页文件再部署到服务器上的过程在一台新设备上是不小的工作量，它涉及 git、nodejs 的安装，涉及到 ssh key 和 rsync，整个环境的搭建就要废上不小的工夫。",[16,2860,2861,2862,2867],{},"在博客内容的更新方面，我选择了将整个 Hexo 的 workdir 全部上传到 github，使用 Github Action 帮助我同时完成静态页面的生成和 Github Pages 及 vps 的部署工作。具体的代码可以直接",[26,2863,2866],{"href":2864,"rel":2865},"https://github.com/zhullyb/zhullyb.github.io/blob/master/.github/workflows/deploy.yml",[30],"见我的 GIthub 仓库","，我在这里简单讲下思路。",[2869,2870,2871,2879,2889,2984,3012,3028,3036,3057],"ol",{},[1502,2872,1922,2873,2875,2876,69],{},[2620,2874],{},"这个没什么可说的，有现成的 Github Action 去完成这件事，我这边直接使用了",[173,2877,2878],{},"actions/setup-node@v2",[1502,2880,2881,2882,2884,2885,2888],{},"使用 npm/yarn 安装相关依赖",[2620,2883],{},"这个直接跑 ",[173,2886,2887],{},"yarn install"," 即可。",[1502,2890,2891,2892,2894,2895,2897,2898,2903,2904],{},"为每个文件重新设定最后修改时间",[2620,2893],{},"这一步其实是挺重要的，Hexo框架生成每篇文章的最后修改时间的依据是该文件的最后修改时间，而对于 Github Action 的容器来说，每一个文件都刚刚被下载下来，都是最新的，这就会导致你的每一篇文章每次部署时都会被认为刚才修改过。",[2620,2896],{},"我们这边可以直接使用 git 记录的时间来作为文件的最后修改时间。（参考 ",[26,2899,2902],{"href":2900,"rel":2901},"https://mrseawave.github.io/blogs/articles/2021/01/07/ci-hexo-update-time/",[30],"Sea's Blog","）",[167,2905,2907],{"className":169,"code":2906,"language":171,"meta":164,"style":164},"git ls-files | while read filepath; do touch -d \"$(git log -1 --format='@%ct' $filepath)\" \"$filepath\" && echo \"Fixed: $filepath\"; done\n",[173,2908,2909],{"__ignoreMap":164},[176,2910,2911,2914,2917,2919,2922,2925,2928,2930,2933,2936,2938,2941,2943,2946,2949,2952,2955,2958,2961,2963,2965,2967,2970,2972,2975,2977,2979,2981],{"class":178,"line":179},[176,2912,2913],{"class":261},"git",[176,2915,2916],{"class":257}," ls-files",[176,2918,359],{"class":268},[176,2920,2921],{"class":253},"while",[176,2923,2924],{"class":546}," read",[176,2926,2927],{"class":257}," filepath",[176,2929,285],{"class":268},[176,2931,2932],{"class":253},"do",[176,2934,2935],{"class":261}," touch",[176,2937,647],{"class":275},[176,2939,2940],{"class":257}," \"$(",[176,2942,2913],{"class":261},[176,2944,2945],{"class":257}," log ",[176,2947,2948],{"class":275},"-1",[176,2950,2951],{"class":275}," --format=",[176,2953,2954],{"class":257},"'@%ct' ",[176,2956,2957],{"class":229},"$filepath",[176,2959,2960],{"class":257},")\"",[176,2962,376],{"class":257},[176,2964,2957],{"class":229},[176,2966,382],{"class":257},[176,2968,2969],{"class":268}," && ",[176,2971,547],{"class":546},[176,2973,2974],{"class":257}," \"Fixed: ",[176,2976,2957],{"class":229},[176,2978,382],{"class":257},[176,2980,285],{"class":268},[176,2982,2983],{"class":253},"done\n",[1502,2985,2986,2987,2989,2990,2993,2994],{},"设置时区",[2620,2988],{},"读我的博客的人应该大多都是东八区的人，那我们应当把 Github Action 容器的时区设置为东八区，和自己 ",[173,2991,2992],{},"git commit"," 时所使用的设备的时间保持一致，否则某些文章的日期可能会发生一天的偏移。",[167,2995,2997],{"className":169,"code":2996,"language":171,"meta":164,"style":164},"export TZ='Asia/Shanghai'\n",[173,2998,2999],{"__ignoreMap":164},[176,3000,3001,3004,3007,3009],{"class":178,"line":179},[176,3002,3003],{"class":253},"export",[176,3005,3006],{"class":229}," TZ",[176,3008,297],{"class":233},[176,3010,3011],{"class":257},"'Asia/Shanghai'\n",[1502,3013,3014,3015],{},"生成静态网页文件",[167,3016,3018],{"className":169,"code":3017,"language":171,"meta":164,"style":164},"yarn build\n",[173,3019,3020],{"__ignoreMap":164},[176,3021,3022,3025],{"class":178,"line":179},[176,3023,3024],{"class":261},"yarn",[176,3026,3027],{"class":257}," build\n",[1502,3029,3030,3031,2467,3033],{},"部署到 Github Pages",[2620,3032],{},[173,3034,3035],{},"peaceiris/actions-gh-pages@v3",[1502,3037,3038,3039,3041,3042,3044,3048,3050,3051,3056],{},"初始化 Github Action 容器上的 ssh 私钥",[2620,3040],{},"应当在 Github 仓库的设置里先新建一个 secret，填入自己的 ssh 私钥（更加标准的做法应当是为 github action 专门生成一对 ssh 密钥，将公钥上传到自己的 vps，将私钥上传到 Github 仓库的 secret 中）。",[2620,3043],{},[86,3045],{"alt":3046,"src":3047},"github secret setting","https://static.031130.xyz/uploads/2024/08/12/6364dbbfeb8f6.webp",[2620,3049],{},"我这边直接从",[26,3052,3055],{"href":3053,"rel":3054},"https://blog.m-l.cc/2021/07/06/yong-github-actions-bu-shu-hexo/",[30],"点墨阁","那边抄了点代码直接用。",[1502,3058,3059,3060],{},"使用 hexo 的 deploy 插件调用 rsync 将静态文件上传到自己服务器的对应目录（static server 你应当已经设置好了）",[167,3061,3063],{"className":169,"code":3062,"language":171,"meta":164,"style":164},"yarn deploy\n",[173,3064,3065],{"__ignoreMap":164},[176,3066,3067,3069],{"class":178,"line":179},[176,3068,3024],{"class":261},[176,3070,3071],{"class":257}," deploy\n",[37,3073],{},[16,3075,3076,3077,3080],{},"注: 本篇博客中引用的所有博客页面均在 ",[173,3078,3079],{},"web.archive.org"," 进行了存档，如后续遇到页面打不开的问题请自行前往查询存档。",[1021,3082,3083],{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sknuh, html code.shiki .sknuh{--shiki-default:#383A42;--shiki-dark:#56B6C2}",{"title":164,"searchDepth":186,"depth":186,"links":3085},[],127,1761836963121]