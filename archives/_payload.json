[{"data":1,"prerenderedAt":7785},["ShallowReactive",2],{"randomIndex/archives":3,"index-page-1":4,"posts-nums-total":7784},0,[5,1076,1452,1665,2072,3998,5380,6255,6844,7553],{"title":6,"date":7,"path":8,"tags":9,"body":13},"Nuxt Content v3 中数组字段的筛选困境与性能优化","2025-10-20 21:52:59","/2025/10/20/nuxt-content-v3-z-array-query-challenge",[10,11,12],"Nuxt","Nuxt Content","JavaScript",{"type":14,"value":15,"toc":1070},"minimark",[16,34,37,101,108,113,123,254,269,447,457,467,471,474,757,763,781,788,793,797,810,827,833,847,1017,1020,1030,1036,1042,1047,1050,1057,1066],[17,18,19,20,24,25,28,29,33],"p",{},"Nuxt Content 是 Nuxt 生态中用于处理 Markdown、YAML 等内容的强大模块。最近，我在使用 ",[21,22,23],"strong",{},"Nuxt v4 + Nuxt Content v3"," 重构博客（原为 Hexo）时，遇到了一个棘手的问题：v3 版本的默认查询 API ",[21,26,27],{},"并未直接提供","对数组字段进行“包含”（",[30,31,32],"code",{},"$contains","）操作的支持。",[17,35,36],{},"例如，这是我的正在写的这篇博客的 Front Matter：",[38,39,44],"pre",{"className":40,"code":41,"language":42,"meta":43,"style":43},"language-markdown shiki shiki-themes one-light one-dark-pro","---\ntitle: Nuxt Content v3 中数组字段的筛选困境\ndate: 2025-10-20 21:52:59\nsticky:\ntags:\n- Nuxt\n- Nuxt Content\n- JavaScript\n---\n","markdown","",[30,45,46,54,60,66,72,78,84,90,96],{"__ignoreMap":43},[47,48,51],"span",{"class":49,"line":50},"line",1,[47,52,53],{},"---\n",[47,55,57],{"class":49,"line":56},2,[47,58,59],{},"title: Nuxt Content v3 中数组字段的筛选困境\n",[47,61,63],{"class":49,"line":62},3,[47,64,65],{},"date: 2025-10-20 21:52:59\n",[47,67,69],{"class":49,"line":68},4,[47,70,71],{},"sticky:\n",[47,73,75],{"class":49,"line":74},5,[47,76,77],{},"tags:\n",[47,79,81],{"class":49,"line":80},6,[47,82,83],{},"- Nuxt\n",[47,85,87],{"class":49,"line":86},7,[47,88,89],{},"- Nuxt Content\n",[47,91,93],{"class":49,"line":92},8,[47,94,95],{},"- JavaScript\n",[47,97,99],{"class":49,"line":98},9,[47,100,53],{},[17,102,103,104,107],{},"我的目标是创建一个 ",[21,105,106],{},"Tag 页面","，列出所有包含特定 Tag（例如 'Nuxt'）的文章。",[109,110,112],"h2",{"id":111},"v2-的便捷与-v3-的限制","v2 的便捷与 v3 的限制",[17,114,115,116,119,120,122],{},"在 Nuxt Content v2 中，数据基于文件系统存储，查询方式是对文件内容的抽象，模拟了类似 ",[21,117,118],{},"MongoDB 的 JSON 文档查询","语法。我们可以轻松地使用 ",[30,121,32],{}," 方法获取所有包含 “Nuxt” 标签的文章：",[38,124,128],{"className":125,"code":126,"language":127,"meta":43,"style":43},"language-typescript shiki shiki-themes one-light one-dark-pro","const tag = decodeURIComponent(route.params.tag as string)\n\nconst articles = await queryContent('posts')\n  .where({ tags: { $contains: tag } })  // ✅ v2 中的 MongoDB Style 查询\n  .find()\n","typescript",[30,129,130,180,186,209,244],{"__ignoreMap":43},[47,131,132,136,140,144,148,152,156,159,163,165,169,173,177],{"class":49,"line":50},[47,133,135],{"class":134},"sLKXg","const",[47,137,139],{"class":138},"sNmU0"," tag",[47,141,143],{"class":142},"s_Sar"," =",[47,145,147],{"class":146},"sAdtL"," decodeURIComponent",[47,149,151],{"class":150},"s5ixo","(",[47,153,155],{"class":154},"s7GmK","route",[47,157,158],{"class":150},".",[47,160,162],{"class":161},"s2QsP","params",[47,164,158],{"class":150},[47,166,168],{"class":167},"sJa8x","tag",[47,170,172],{"class":171},"sblXP"," as",[47,174,176],{"class":175},"sN9Y4"," string",[47,178,179],{"class":150},")\n",[47,181,182],{"class":49,"line":56},[47,183,185],{"emptyLinePlaceholder":184},true,"\n",[47,187,188,190,193,195,198,201,203,207],{"class":49,"line":62},[47,189,135],{"class":134},[47,191,192],{"class":138}," articles",[47,194,143],{"class":142},[47,196,197],{"class":134}," await",[47,199,200],{"class":146}," queryContent",[47,202,151],{"class":150},[47,204,206],{"class":205},"sDhpE","'posts'",[47,208,179],{"class":150},[47,210,211,214,217,220,223,227,230,232,234,237,240],{"class":49,"line":68},[47,212,213],{"class":150},"  .",[47,215,216],{"class":146},"where",[47,218,219],{"class":150},"({ ",[47,221,222],{"class":167},"tags",[47,224,226],{"class":225},"st7oF",":",[47,228,229],{"class":150}," { ",[47,231,32],{"class":167},[47,233,226],{"class":225},[47,235,139],{"class":236},"sz0mV",[47,238,239],{"class":150}," } })  ",[47,241,243],{"class":242},"sW2Sy","// ✅ v2 中的 MongoDB Style 查询\n",[47,245,246,248,251],{"class":49,"line":74},[47,247,213],{"class":150},[47,249,250],{"class":146},"find",[47,252,253],{"class":150},"()\n",[17,255,256,257,264,265,268],{},"但在使用 ",[21,258,259,260,263],{},"Nuxt Content v3 的 ",[30,261,262],{},"queryCollection"," API"," 时，我们很自然地会尝试使用 ",[30,266,267],{},".where()"," 方法进行筛选：",[38,270,272],{"className":125,"code":271,"language":127,"meta":43,"style":43},"const tag = decodeURIComponent(route.params.tag as string)\n\nconst { data } = await useAsyncData(`tag-${tag}`, () =>\n    queryCollection('posts')\n        .where(tag, 'in', 'tags')  // ❌ 这样会报错，因为第一次参数必须是字段名\n        .order('date', 'DESC')\n        .select('title', 'date', 'path', 'tags')\n        .all()\n)\n",[30,273,274,302,306,349,360,388,407,434,443],{"__ignoreMap":43},[47,275,276,278,280,282,284,286,288,290,292,294,296,298,300],{"class":49,"line":50},[47,277,135],{"class":134},[47,279,139],{"class":138},[47,281,143],{"class":142},[47,283,147],{"class":146},[47,285,151],{"class":150},[47,287,155],{"class":154},[47,289,158],{"class":150},[47,291,162],{"class":161},[47,293,158],{"class":150},[47,295,168],{"class":167},[47,297,172],{"class":171},[47,299,176],{"class":175},[47,301,179],{"class":150},[47,303,304],{"class":49,"line":56},[47,305,185],{"emptyLinePlaceholder":184},[47,307,308,310,312,315,318,321,323,326,328,331,335,337,340,343,346],{"class":49,"line":62},[47,309,135],{"class":134},[47,311,229],{"class":150},[47,313,314],{"class":138},"data",[47,316,317],{"class":150}," } ",[47,319,320],{"class":142},"=",[47,322,197],{"class":134},[47,324,325],{"class":146}," useAsyncData",[47,327,151],{"class":150},[47,329,330],{"class":205},"`tag-",[47,332,334],{"class":333},"sAOjX","${",[47,336,168],{"class":236},[47,338,339],{"class":333},"}",[47,341,342],{"class":205},"`",[47,344,345],{"class":150},", () ",[47,347,348],{"class":134},"=>\n",[47,350,351,354,356,358],{"class":49,"line":68},[47,352,353],{"class":146},"    queryCollection",[47,355,151],{"class":150},[47,357,206],{"class":205},[47,359,179],{"class":150},[47,361,362,365,367,369,371,374,377,379,382,385],{"class":49,"line":74},[47,363,364],{"class":150},"        .",[47,366,216],{"class":146},[47,368,151],{"class":150},[47,370,168],{"class":236},[47,372,373],{"class":150},", ",[47,375,376],{"class":205},"'in'",[47,378,373],{"class":150},[47,380,381],{"class":205},"'tags'",[47,383,384],{"class":150},")  ",[47,386,387],{"class":242},"// ❌ 这样会报错，因为第一次参数必须是字段名\n",[47,389,390,392,395,397,400,402,405],{"class":49,"line":80},[47,391,364],{"class":150},[47,393,394],{"class":146},"order",[47,396,151],{"class":150},[47,398,399],{"class":205},"'date'",[47,401,373],{"class":150},[47,403,404],{"class":205},"'DESC'",[47,406,179],{"class":150},[47,408,409,411,414,416,419,421,423,425,428,430,432],{"class":49,"line":86},[47,410,364],{"class":150},[47,412,413],{"class":146},"select",[47,415,151],{"class":150},[47,417,418],{"class":205},"'title'",[47,420,373],{"class":150},[47,422,399],{"class":205},[47,424,373],{"class":150},[47,426,427],{"class":205},"'path'",[47,429,373],{"class":150},[47,431,381],{"class":205},[47,433,179],{"class":150},[47,435,436,438,441],{"class":49,"line":92},[47,437,364],{"class":150},[47,439,440],{"class":146},"all",[47,442,253],{"class":150},[47,444,445],{"class":49,"line":98},[47,446,179],{"class":150},[17,448,449,450,452,453,456],{},"遗憾的是，这样是行不通的。",[30,451,267],{}," 的方法签名要求字段名必须作为首个参数传入：",[30,454,455],{},"where(field: keyof Collection | string, operator: SqlOperator, value?: unknown)","。",[17,458,459,460,463,464,466],{},"由于 Nuxt Content v3 ",[21,461,462],{},"底层采用 SQLite 作为本地数据库","，所有查询都必须遵循类 SQL 语法。如果设计时未提供针对数组字段的内置操作符（例如 ",[30,465,32],{}," 的 SQL 等价形式），最终的解决方案往往会显得比较“别扭”。",[109,468,470],{"id":469},"初版实现牺牲性能的全量拉取","初版实现：牺牲性能的“全量拉取”",[17,472,473],{},"本着“尽快重构，后续优化”的思路，我写出了以下代码：",[38,475,477],{"className":125,"code":476,"language":127,"meta":43,"style":43},"// 初版实现：全量拉取后使用 JS 筛选\nconst allPosts = (\n    await useAsyncData(`tag-${route.params.tag}`, () =>\n        queryCollection('posts')\n            .order('date', 'DESC')\n            .select('title', 'date', 'path', 'tags')\n            .all()\n    )\n).data as Ref\u003CPost[]>\n\nconst Posts = computed(() => {\n    return allPosts.value.filter(post =>\n        typeof post.tags?.map === 'function'\n            ? post.tags?.includes(decodeURIComponent(route.params.tag as string))\n            : false\n    )\n})\n",[30,478,479,484,496,528,539,556,580,588,593,615,620,642,669,695,736,746,751],{"__ignoreMap":43},[47,480,481],{"class":49,"line":50},[47,482,483],{"class":242},"// 初版实现：全量拉取后使用 JS 筛选\n",[47,485,486,488,491,493],{"class":49,"line":56},[47,487,135],{"class":134},[47,489,490],{"class":146}," allPosts",[47,492,143],{"class":142},[47,494,495],{"class":150}," (\n",[47,497,498,501,503,505,507,509,511,514,516,518,520,522,524,526],{"class":49,"line":62},[47,499,500],{"class":134},"    await",[47,502,325],{"class":146},[47,504,151],{"class":150},[47,506,330],{"class":205},[47,508,334],{"class":333},[47,510,155],{"class":154},[47,512,158],{"class":513},"sMj0N",[47,515,162],{"class":161},[47,517,158],{"class":513},[47,519,168],{"class":167},[47,521,339],{"class":333},[47,523,342],{"class":205},[47,525,345],{"class":150},[47,527,348],{"class":134},[47,529,530,533,535,537],{"class":49,"line":68},[47,531,532],{"class":146},"        queryCollection",[47,534,151],{"class":150},[47,536,206],{"class":205},[47,538,179],{"class":150},[47,540,541,544,546,548,550,552,554],{"class":49,"line":74},[47,542,543],{"class":150},"            .",[47,545,394],{"class":146},[47,547,151],{"class":150},[47,549,399],{"class":205},[47,551,373],{"class":150},[47,553,404],{"class":205},[47,555,179],{"class":150},[47,557,558,560,562,564,566,568,570,572,574,576,578],{"class":49,"line":80},[47,559,543],{"class":150},[47,561,413],{"class":146},[47,563,151],{"class":150},[47,565,418],{"class":205},[47,567,373],{"class":150},[47,569,399],{"class":205},[47,571,373],{"class":150},[47,573,427],{"class":205},[47,575,373],{"class":150},[47,577,381],{"class":205},[47,579,179],{"class":150},[47,581,582,584,586],{"class":49,"line":86},[47,583,543],{"class":150},[47,585,440],{"class":146},[47,587,253],{"class":150},[47,589,590],{"class":49,"line":92},[47,591,592],{"class":150},"    )\n",[47,594,595,598,600,602,606,609,612],{"class":49,"line":98},[47,596,597],{"class":150},").",[47,599,314],{"class":167},[47,601,172],{"class":171},[47,603,605],{"class":604},"sC09Y"," Ref",[47,607,608],{"class":150},"\u003C",[47,610,611],{"class":604},"Post",[47,613,614],{"class":150},"[]>\n",[47,616,618],{"class":49,"line":617},10,[47,619,185],{"emptyLinePlaceholder":184},[47,621,623,625,628,630,633,636,639],{"class":49,"line":622},11,[47,624,135],{"class":134},[47,626,627],{"class":138}," Posts",[47,629,143],{"class":142},[47,631,632],{"class":146}," computed",[47,634,635],{"class":150},"(() ",[47,637,638],{"class":134},"=>",[47,640,641],{"class":150}," {\n",[47,643,645,648,650,652,655,657,660,662,666],{"class":49,"line":644},12,[47,646,647],{"class":134},"    return",[47,649,490],{"class":154},[47,651,158],{"class":150},[47,653,654],{"class":161},"value",[47,656,158],{"class":150},[47,658,659],{"class":146},"filter",[47,661,151],{"class":150},[47,663,665],{"class":664},"s8iYz","post",[47,667,668],{"class":134}," =>\n",[47,670,672,676,679,681,683,686,689,692],{"class":49,"line":671},13,[47,673,675],{"class":674},"s7DPa","        typeof",[47,677,678],{"class":154}," post",[47,680,158],{"class":150},[47,682,222],{"class":161},[47,684,685],{"class":150},"?.",[47,687,688],{"class":167},"map",[47,690,691],{"class":142}," ===",[47,693,694],{"class":205}," 'function'\n",[47,696,698,701,703,705,707,709,712,714,717,719,721,723,725,727,729,731,733],{"class":49,"line":697},14,[47,699,700],{"class":674},"            ?",[47,702,678],{"class":154},[47,704,158],{"class":150},[47,706,222],{"class":161},[47,708,685],{"class":150},[47,710,711],{"class":146},"includes",[47,713,151],{"class":150},[47,715,716],{"class":146},"decodeURIComponent",[47,718,151],{"class":150},[47,720,155],{"class":154},[47,722,158],{"class":150},[47,724,162],{"class":161},[47,726,158],{"class":150},[47,728,168],{"class":167},[47,730,172],{"class":171},[47,732,176],{"class":175},[47,734,735],{"class":150},"))\n",[47,737,739,742],{"class":49,"line":738},15,[47,740,741],{"class":674},"            :",[47,743,745],{"class":744},"sAGMh"," false\n",[47,747,749],{"class":49,"line":748},16,[47,750,592],{"class":150},[47,752,754],{"class":49,"line":753},17,[47,755,756],{"class":150},"})\n",[17,758,759,760],{},"这种方法虽然满足了需求，但也带来了明显的性能代价：",[21,761,762],{},"_payload.json 文件体积的膨胀。",[17,764,765,766,769,770,773,774,777,778,780],{},"在 Nuxt 项目中，",[30,767,768],{},"_payload.json"," 用于存储 ",[30,771,772],{},"useAsyncData"," 的结果等动态数据。在全量拉取的方案下，",[21,775,776],{},"每一个 Tag 页面"," 都会加载包含所有文章信息的 ",[30,779,768],{},"，造成数据冗余。很多 Tag 页面仅需一两篇文章的数据，却被迫加载了全部文章信息，严重影响了性能。",[17,782,783],{},[784,785],"img",{"alt":786,"src":787},"tags 目录占据了 2.9MiB，是所有目录中最大的","https://static.031130.xyz/uploads/2025/10/20/a748878c03c64.webp",[17,789,790],{},[784,791],{"alt":768,"src":792},"https://static.031130.xyz/uploads/2025/10/20/8ef786d873da1.webp",[109,794,796],{"id":795},"讨巧方案利用-sqlite-的存储特性进行优化","讨巧方案：利用 SQLite 的存储特性进行优化",[17,798,799,800,802,803,456],{},"为了减少 ",[30,801,772],{}," 返回的查询结果，我查阅了 Nuxt Content 的 GitHub Discussions，发现",[804,805,809],"a",{"href":806,"rel":807},"https://github.com/nuxt/content/discussions/2955",[808],"nofollow","在 v3.alpha.8 版本时就有人提出了一种“巧妙”的解决方案",[17,811,812,813,822,823,826],{},"由于 Nuxt Content v3 使用 SQLite 数据库，原本在 Front Matter 中定义的 ",[21,814,815,817,818,821],{},[30,816,222],{}," 数组（通过 ",[30,819,820],{},"z.array()"," 定义）最终会以 JSON 字符串的形式存储","在数据库中（具体格式可在 ",[30,824,825],{},".nuxt/content/sql_dump.txt"," 文件中查看）。",[17,828,829],{},[784,830],{"alt":831,"src":832},"sql_dump.txt","https://static.031130.xyz/uploads/2025/10/20/b70036c55bb29.webp",[17,834,835,836,839,840,846],{},"这意味着我们可以利用 SQLite 的",[21,837,838],{},"字符串操作","特性，通过 ",[21,841,842,845],{},[30,843,844],{},"LIKE"," 动词配合通配符","来完成数组包含的筛选，本质上是查询 JSON 字符串是否包含特定子串：",[38,848,850],{"className":125,"code":849,"language":127,"meta":43,"style":43},"const tag = decodeURIComponent(route.params.tag as string)\n\nconst { data } = await useAsyncData(`tag-${route.params.tag}`, () =>\n    queryCollection('posts')\n        .where('tags', 'LIKE', `%\"${tag}\"%`)\n        .order('date', 'DESC')\n        .select('title', 'date', 'path', 'tags')\n        .all()\n)\n",[30,851,852,880,884,924,934,965,981,1005,1013],{"__ignoreMap":43},[47,853,854,856,858,860,862,864,866,868,870,872,874,876,878],{"class":49,"line":50},[47,855,135],{"class":134},[47,857,139],{"class":138},[47,859,143],{"class":142},[47,861,147],{"class":146},[47,863,151],{"class":150},[47,865,155],{"class":154},[47,867,158],{"class":150},[47,869,162],{"class":161},[47,871,158],{"class":150},[47,873,168],{"class":167},[47,875,172],{"class":171},[47,877,176],{"class":175},[47,879,179],{"class":150},[47,881,882],{"class":49,"line":56},[47,883,185],{"emptyLinePlaceholder":184},[47,885,886,888,890,892,894,896,898,900,902,904,906,908,910,912,914,916,918,920,922],{"class":49,"line":62},[47,887,135],{"class":134},[47,889,229],{"class":150},[47,891,314],{"class":138},[47,893,317],{"class":150},[47,895,320],{"class":142},[47,897,197],{"class":134},[47,899,325],{"class":146},[47,901,151],{"class":150},[47,903,330],{"class":205},[47,905,334],{"class":333},[47,907,155],{"class":154},[47,909,158],{"class":513},[47,911,162],{"class":161},[47,913,158],{"class":513},[47,915,168],{"class":167},[47,917,339],{"class":333},[47,919,342],{"class":205},[47,921,345],{"class":150},[47,923,348],{"class":134},[47,925,926,928,930,932],{"class":49,"line":68},[47,927,353],{"class":146},[47,929,151],{"class":150},[47,931,206],{"class":205},[47,933,179],{"class":150},[47,935,936,938,940,942,944,946,949,951,954,956,958,960,963],{"class":49,"line":74},[47,937,364],{"class":150},[47,939,216],{"class":146},[47,941,151],{"class":150},[47,943,381],{"class":205},[47,945,373],{"class":150},[47,947,948],{"class":205},"'LIKE'",[47,950,373],{"class":150},[47,952,953],{"class":205},"`%\"",[47,955,334],{"class":333},[47,957,168],{"class":236},[47,959,339],{"class":333},[47,961,962],{"class":205},"\"%`",[47,964,179],{"class":150},[47,966,967,969,971,973,975,977,979],{"class":49,"line":80},[47,968,364],{"class":150},[47,970,394],{"class":146},[47,972,151],{"class":150},[47,974,399],{"class":205},[47,976,373],{"class":150},[47,978,404],{"class":205},[47,980,179],{"class":150},[47,982,983,985,987,989,991,993,995,997,999,1001,1003],{"class":49,"line":86},[47,984,364],{"class":150},[47,986,413],{"class":146},[47,988,151],{"class":150},[47,990,418],{"class":205},[47,992,373],{"class":150},[47,994,399],{"class":205},[47,996,373],{"class":150},[47,998,427],{"class":205},[47,1000,373],{"class":150},[47,1002,381],{"class":205},[47,1004,179],{"class":150},[47,1006,1007,1009,1011],{"class":49,"line":92},[47,1008,364],{"class":150},[47,1010,440],{"class":146},[47,1012,253],{"class":150},[47,1014,1015],{"class":49,"line":98},[47,1016,179],{"class":150},[17,1018,1019],{},"下面是优化后重新生成的文件占用，体积减小还是非常显著的",[1021,1022,1023,1027],"ul",{},[1024,1025,1026],"li",{},"tags 目录体积: 2.9MiB -> 1.4MiB",[1024,1028,1029],{},"单个 _payload.json 的体积: 23.1KiB -> 1.01 KiB",[17,1031,1032,1033,1035],{},"通过这种方法，我们成功将查询逻辑下推到了数据库层，避免了不必要的全量数据传输，显著降低了单个目录中 ",[30,1034,768],{}," 的体积，实现了性能优化。",[17,1037,1038],{},[784,1039],{"alt":1040,"src":1041},"tags 目录体积下降","https://static.031130.xyz/uploads/2025/10/20/007e72e7b476d.webp",[17,1043,1044],{},[784,1045],{"alt":768,"src":1046},"https://static.031130.xyz/uploads/2025/10/20/17ba3ccbbdf9e.webp",[109,1048,1049],{"id":1049},"参见",[17,1051,1052],{},[804,1053,1056],{"href":1054,"rel":1055},"https://content.nuxt.com/docs/utils/query-collection#wherefield-keyof-collection-string-operator-sqloperator-value-unknown",[808],"queryCollection - Nuxt Content",[17,1058,1059],{},[804,1060,1062,1063,1065],{"href":806,"rel":1061},[808],"How do you query ",[30,1064,820],{}," fields (e.g. tags) in the latest nuxt-content module (v3.alpha.8) · nuxt/content · Discussion #2955",[1067,1068,1069],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .sNmU0, html code.shiki .sNmU0{--shiki-default:#986801;--shiki-dark:#E5C07B}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .s7GmK, html code.shiki .s7GmK{--shiki-default:#383A42;--shiki-dark:#E5C07B}html pre.shiki code .s2QsP, html code.shiki .s2QsP{--shiki-default:#E45649;--shiki-dark:#E5C07B}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sblXP, html code.shiki .sblXP{--shiki-default:#383A42;--shiki-dark:#C678DD}html pre.shiki code .sN9Y4, html code.shiki .sN9Y4{--shiki-default:#0184BC;--shiki-dark:#E5C07B}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .st7oF, html code.shiki .st7oF{--shiki-default:#0184BC;--shiki-dark:#ABB2BF}html pre.shiki code .sz0mV, html code.shiki .sz0mV{--shiki-default:#383A42;--shiki-dark:#E06C75}html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html pre.shiki code .sAOjX, html code.shiki .sAOjX{--shiki-default:#CA1243;--shiki-dark:#C678DD}html pre.shiki code .sMj0N, html code.shiki .sMj0N{--shiki-default:#50A14F;--shiki-dark:#ABB2BF}html pre.shiki code .sC09Y, html code.shiki .sC09Y{--shiki-default:#C18401;--shiki-dark:#E5C07B}html pre.shiki code .s8iYz, html code.shiki .s8iYz{--shiki-default:#383A42;--shiki-default-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic}html pre.shiki code .s7DPa, html code.shiki .s7DPa{--shiki-default:#0184BC;--shiki-dark:#C678DD}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}",{"title":43,"searchDepth":56,"depth":56,"links":1071},[1072,1073,1074,1075],{"id":111,"depth":56,"text":112},{"id":469,"depth":56,"text":470},{"id":795,"depth":56,"text":796},{"id":1049,"depth":56,"text":1049},{"title":1077,"date":1078,"path":1079,"tags":1080,"body":1087},"后 OCSP 时代，浏览器如何应对证书吊销新挑战","2025-10-16 15:38:50","/2025/10/16/how-s-mozilla-crlite-going-now",[1081,1082,1083,1084,1085,1086],"SSL","Firefox","Web PKI","OCSP","CRLSets","CRLite",{"type":14,"value":1088,"toc":1442},[1089,1092,1101,1110,1121,1126,1130,1141,1144,1151,1161,1168,1173,1180,1184,1187,1190,1198,1202,1205,1214,1235,1238,1242,1245,1258,1261,1285,1304,1307,1314,1317,1320,1324,1327,1351,1358,1364,1366],[17,1090,1091],{},"2023 年 8 月，CA/Browser Forum 通过了一项投票——不再强制要求 Let’s Encrypt 等公开信任的 CA 设立 OCSP Server",[17,1093,1094,1095,1100],{},"2024 年 7 月，Let's Encrypt 发布",[804,1096,1099],{"href":1097,"rel":1098},"https://letsencrypt.org/2024/07/23/replacing-ocsp-with-crls",[808],"博客","，披露其计划关闭 OCSP Server",[17,1102,1103,1104,1109],{},"同年 12 月，Let's Encrypt 发布",[804,1105,1108],{"href":1106,"rel":1107},"https://letsencrypt.org/2024/12/05/ending-ocsp",[808],"其关闭 OCSP Server 的时间计划表","，大致情况如下：",[1021,1111,1112,1115,1118],{},[1024,1113,1114],{},"2025 年 1 月 30 日 - Let’s Encrypt 不再接受新的包含 OCSP Must-Staple 扩展的证书签发请求，除非你的账号先前申请过此类证书",[1024,1116,1117],{},"2025 年 5 月 7 日 - Let's Encrypt 新签发的证书将加入 CRL URLs，不再包含 OCSP URLs，并且所有新的包含 OCSP Must-Staple 扩展的证书签发请求都将被拒绝",[1024,1119,1120],{},"2025 年 8 月 6 日 - Let's Encrypt 关闭 OCSP 服务器",[17,1122,1123],{},[21,1124,1125],{},"Let's Encrypt 是全世界最大的免费 SSL 证书颁发机构，而这一举动标志着我们已逐渐步入后 OCSP 时代。",[109,1127,1129],{"id":1128},"ocsp-的困境性能与隐私的权衡","OCSP 的困境：性能与隐私的权衡",[17,1131,1132,1133,1136,1137,1140],{},"Let's Encrypt 这一举动的背后，是人们对 OCSP（在线证书状态协议）长久以来累积的不满。OCSP 作为一种实时查询证书有效性的方式，最初的设想很美好：当浏览器访问一个网站时，它可以向 ",[21,1134,1135],{},"CA（证书颁发机构）"," 的 OCSP 服务器发送一个简短的请求，询问该证书是否仍然有效。这似乎比下载一个巨大的 ",[21,1138,1139],{},"CRL（证书吊销列表）"," 要高效得多。",[17,1142,1143],{},"然而，OCSP 在实际应用中暴露出众多缺陷：",[17,1145,1146,1147,1150],{},"首先是",[21,1148,1149],{},"性能问题","。尽管单个请求很小，但当数百万用户同时访问网站时，OCSP 服务器需要处理海量的实时查询。这不仅给 CA 带来了巨大的服务器压力，也增加了用户访问网站的延迟。如果 OCSP 服务器响应缓慢甚至宕机，浏览器可能会因为无法确认证书状态而中断连接，或者为了用户体验而不得不“睁一只眼闭一只眼”，这都削弱了 OCSP 的安全性。",[17,1152,1153,1154,1157,1158],{},"更严重的是",[21,1155,1156],{},"隐私问题","。每一次 OCSP 查询，都相当于向 CA 报告了用户的访问行为。这意味着 CA 能够知道某个用户在何时访问了哪个网站。虽然 OCSP 查询本身不包含个人身份信息，但将这些信息与 IP 地址等数据结合起来，CA 完全可以建立起用户的浏览习惯画像。对于重视隐私的用户和开发者来说，这种“无声的监视”是不可接受的。",[21,1159,1160],{},"即使 CA 故意不保留这些信息，地区法律也可能强制 CA 收集这些信息。",[17,1162,1163,1164,1167],{},"再者，OCSP  还存在设计上的",[21,1165,1166],{},"安全缺陷","。由于担心连接超时影响用户体验，浏览器通常默认采用 soft-fail 机制：一旦无法连接 OCSP  服务器，便会选择放行而非阻断连接。攻击者恰恰可以利用这一点，通过阻断客户端与 OCSP  服务器之间的通信，使查询始终超时，从而轻松绕过证书状态验证。",[1169,1170,1172],"h3",{"id":1171},"ocsp-装订-ocsp-stapling","OCSP 装订 (OCSP stapling)",[17,1174,1175,1176,456],{},"基于上面这些缺陷，我们有了 OCSP 装订 (OCSP stapling) 方案，这",[804,1177,1179],{"href":1178},"/2024/11/19/firefox-is-the-only-mainstream-brower-doing-online-certificate-revocation-checks/#OCSP-%E8%A3%85%E8%AE%A2-OCSP-stapling","在我去年的博客里讲过，欢迎回顾",[1169,1181,1183],{"id":1182},"强制-ocsp-装订-ocsp-must-staple","强制 OCSP 装订 (OCSP Must-Staple)",[17,1185,1186],{},"OCSP Must-Staple 是一个在 ssl 证书申请时的拓展项，该扩展会告知浏览器：若在证书中识别到此扩展，则不得向证书颁发机构发送查询请求，而应在握手阶段获取装订式副本。若未能获得有效副本，浏览器应拒绝连接。",[17,1188,1189],{},"这项功能赋予了浏览器开发者 hard-fail 的勇气，但在 OCSP 淡出历史之前，Let's Encrypt 似乎是唯一支持这一拓展的主流 CA，并且这项功能并没有得到广泛使用。",[17,1191,1192,1193,456],{},"~~本来不想介绍这项功能的（因为根本没人用），但考虑到这东西快入土了，还是给它在中文互联网中立个碑，~~更多信息参考 ",[804,1194,1197],{"href":1195,"rel":1196},"https://letsencrypt.org/2024/12/05/ending-ocsp#must-staple",[808],"Let's Encrypt 的博客",[109,1199,1201],{"id":1200},"chromium-的方案弱水三千只取一瓢","Chromium 的方案：弱水三千只取一瓢",[17,1203,1204],{},"OCSP 的隐私和性能问题并非秘密，浏览器厂商们早就开始了各自的探索。2012 年，Chrome 默认禁用了 CRLs、OCSP 检查，转向自行设计的证书校验机制。",[17,1206,1207,1208,1213],{},"众所周知，吊销列表可以非常庞大。如果浏览器需要下载和解析一个完整的全球吊销列表，那将是一场性能灾难（Mozilla 团队在",[804,1209,1212],{"href":1210,"rel":1211},"https://hacks.mozilla.org/2025/08/crlite-fast-private-and-comprehensive-certificate-revocation-checking-in-firefox/",[808],"今年的博客","中提到，从 3000 个活跃的 CRL 下载的文件大小将达到 300MB）。Chromium 团队通过分析历史数据发现，大多数被吊销的证书属于少数高风险类别，例如证书颁发机构（CA）本身被攻破、或者某些大型网站的证书被吊销。基于此洞察，CRLSets 采取了以下策略：",[1215,1216,1217,1223,1229],"ol",{},[1024,1218,1219,1222],{},[21,1220,1221],{},"分层吊销","：Chromium 不会下载所有被吊销的证书信息，而是由 Google 团队维护一个精简的、包含“最重要”吊销信息的列表。这个列表会定期更新并通过 Chrome 浏览器更新推送给用户。",[1024,1224,1225,1228],{},[21,1226,1227],{},"精简高效","：这个列表体积非常小，目前大概只有 600KB。它包含了那些一旦被滥用就会造成大规模安全事故的证书，例如 CA 的中间证书、或者一些知名网站（如 Google、Facebook）的证书。",[1024,1230,1231,1234],{},[21,1232,1233],{},"牺牲部分安全性","：这种方案的缺点也很明显——它无法覆盖所有的证书吊销情况。对于一个普通网站的证书被吊销，CRLSets 大概率无法检测到。根据 Mozilla 今年的博客所说，CRLSets 只包含了 1%~2% 的未过期的被吊销证书信息。",[17,1236,1237],{},"虽然 CRLSets 是一种“不完美”的解决方案，但它在性能和可用性之间找到了一个平衡点。它确保了用户在访问主流网站时的基础安全，同时避免了 OCSP 带来的性能和隐私开销。对于 Chromium 而言，与其追求一个在现实中难以完美实现的 OCSP 方案，不如集中精力解决最紧迫的安全威胁。",[109,1239,1241],{"id":1240},"firefox-的方案从-crls-到-crlite","Firefox 的方案：从 CRLs 到 CRLite",[17,1243,1244],{},"与 Chromium 的“只取一瓢”策略不同，Firefox 的开发者们一直在寻找一种既能保证全面性，又能解决性能问题的方案。",[17,1246,1247,1248,1250,1251,1254,1255,456],{},"为了解决这个问题，Mozilla 提出了一个创新的方案：",[21,1249,1086],{},"。CRLite 的设计理念是通过",[21,1252,1253],{},"哈希函数和布隆过滤器","等数据结构，将庞大的证书吊销列表压缩成一个",[21,1256,1257],{},"小巧、可下载且易于本地验证的格式",[17,1259,1260],{},"CRLite 的工作原理可以简单概括为：",[1215,1262,1263,1269,1279],{},[1024,1264,1265,1268],{},[21,1266,1267],{},"数据压缩","：CA 定期生成其全部吊销证书的列表。",[1024,1270,1271,1274,1275,1278],{},[21,1272,1273],{},"服务器处理","：Mozilla 的服务器会收集这些列表，并使用加密哈希函数和布隆过滤器等技术，将所有吊销证书的信息",[21,1276,1277],{},"编码","成一个非常紧凑的数据结构。",[1024,1280,1281,1284],{},[21,1282,1283],{},"客户端验证","：浏览器下载这个压缩文件，当访问网站时，只需本地对证书进行哈希计算，然后查询这个本地文件，就能快速判断该证书是否已被吊销。",[17,1286,1287,1288,1291,1292,1295,1296,1299,1300,1303],{},"与 CRLSets 相比，CRLite 的优势在于它能够实现",[21,1289,1290],{},"对所有吊销证书的全面覆盖","，同时保持",[21,1293,1294],{},"极小的体积","。更重要的是，它",[21,1297,1298],{},"完全在本地完成验证","，这意味着浏览器",[21,1301,1302],{},"无需向任何第三方服务器发送请求","，从而彻底解决了 OCSP 的隐私问题。",[17,1305,1306],{},"Firefox 当前的策略为每 12 小时对 CRLite 数据进行一次增量更新，每日的下载数据大约为 300KB；每 45 天进行一次全量的快照同步，下载数据约为 4MB。",[17,1308,1309,1310],{},"Mozilla 开放了他们的数据看板，你可以在这里找到近期的 CRLite 数据大小：",[804,1311,1312],{"href":1312,"rel":1313},"https://yardstick.mozilla.org/dashboard/snapshot/c1WZrxGkNxdm9oZp7xVvGUEFJCELfApN",[808],[17,1315,1316],{},"自 2025 年 4 月 1 日发布的 Firefox Desktop 137 版本起，Firefox 开始逐步以 CRLite 替换 OCSP 校验；同年 8 月 19 日，Firefox Desktop 142 针对 DV 证书正式弃用 OCSP 检验。",[17,1318,1319],{},"CRLite 已经成为 Firefox 未来证书吊销验证的核心方案，它代表了对性能、隐私和安全性的全面追求。",[109,1321,1323],{"id":1322},"后-ocsp-时代的展望","后 OCSP 时代的展望",[17,1325,1326],{},"随着 Let's Encrypt 等主要 CA 关闭 OCSP 服务，OCSP 的时代正在加速落幕。我们可以看到，浏览器厂商们已经开始各自探索更高效、更安全的替代方案。",[1021,1328,1329,1339],{},[1024,1330,1331,1334,1335,1338],{},[21,1332,1333],{},"Chromium"," 凭借其 CRLSets 方案，在",[21,1336,1337],{},"性能和关键安全保障","之间取得了务实的平衡。",[1024,1340,1341,1343,1344,1346,1347,1350],{},[21,1342,1082],{}," 则通过 ",[21,1345,1086],{}," 这一技术创新，试图在",[21,1348,1349],{},"全面性、隐私和性能","三者之间找到最佳的解决方案。",[17,1352,1353,1354,1357],{},"这些方案的共同点是：",[21,1355,1356],{},"将证书吊销验证从实时在线查询（OCSP）转变为本地化验证","，从而规避了 OCSP 固有的性能瓶颈和隐私风险。",[17,1359,1360,1361],{},"未来，证书吊销的生态系统将不再依赖单一的、中心化的 OCSP 服务器。取而代之的是，一个更加多元、分布式和智能化的新时代正在到来。",[21,1362,1363],{},"OCSP 这一技术可能逐渐被淘汰，但它所试图解决的“证书吊销”这一核心安全问题，将永远是浏览器和网络安全社区关注的重点。",[109,1365,1049],{"id":1049},[1021,1367,1368,1374,1381,1388,1395,1401,1407,1414,1421,1428,1435],{},[1024,1369,1370],{},[804,1371,1373],{"href":1210,"rel":1372},[808],"CRLite: Fast, private, and comprehensive certificate revocation checking in Firefox - Mozilla Hacks - the Web developer blog",[1024,1375,1376],{},[804,1377,1380],{"href":1378,"rel":1379},"https://www.feistyduck.com/newsletter/issue_121_the_slow_death_of_ocsp",[808],"The Slow Death of OCSP | Feisty Duck",[1024,1382,1383],{},[804,1384,1387],{"href":1385,"rel":1386},"https://github.com/mozilla/crlite",[808],"mozilla/crlite: Compact certificate revocation lists for the WebPKI",[1024,1389,1390],{},[804,1391,1394],{"href":1392,"rel":1393},"https://letsencrypt.org/2025/08/06/ocsp-service-has-reached-end-of-life",[808],"OCSP Service Has Reached End of Life - Let's Encrypt",[1024,1396,1397],{},[804,1398,1400],{"href":1106,"rel":1399},[808],"Ending OCSP Support in 2025 - Let's Encrypt",[1024,1402,1403],{},[804,1404,1406],{"href":1097,"rel":1405},[808],"Intent to End OCSP Service - Let's Encrypt",[1024,1408,1409],{},[804,1410,1413],{"href":1411,"rel":1412},"https://www.chromium.org/Home/chromium-security/crlsets/",[808],"CRLSets - The Chromium Projects",[1024,1415,1416],{},[804,1417,1420],{"href":1418,"rel":1419},"https://www.pcworld.com/article/474296/google_chrome_will_no_longer_check_for_revoked_ssl_certificates_online-2.html",[808],"Google Chrome Will No Longer Check for Revoked SSL Certificates Online | PCWorld",[1024,1422,1423],{},[804,1424,1427],{"href":1425,"rel":1426},"https://www.zdnet.com/article/chrome-does-certificate-revocation-better/",[808],"Chrome does certificate revocation better | ZDNET",[1024,1429,1430],{},[804,1431,1434],{"href":1432,"rel":1433},"https://www.hats-land.com/WIP/2025-technical-and-analysis-of-mainstream-clientbrowser-certificate-revocation-verification-mechanism.html",[808],"主流客户端/浏览器证书吊销验证机制技术对与分析 | 帽之岛, Hat's Land",[1024,1436,1437],{},[804,1438,1441],{"href":1439,"rel":1440},"https://blog.gslin.org/archives/2025/02/02/12239/ocsp-%E7%9A%84%E6%B7%A1%E5%87%BA/",[808],"OCSP 的淡出… – Gea-Suan Lin's BLOG",{"title":43,"searchDepth":56,"depth":56,"links":1443},[1444,1448,1449,1450,1451],{"id":1128,"depth":56,"text":1129,"children":1445},[1446,1447],{"id":1171,"depth":62,"text":1172},{"id":1182,"depth":62,"text":1183},{"id":1200,"depth":56,"text":1201},{"id":1240,"depth":56,"text":1241},{"id":1322,"depth":56,"text":1323},{"id":1049,"depth":56,"text":1049},{"title":1453,"date":1454,"path":1455,"tags":1456,"body":1461},"初试 Github Action Self-hosted Runner，想说爱你不容易","2025-09-05 05:54:17","/2025/09/05/first-try-of-github-action-self-hosted-runner",[1457,1458,1459,1460],"Github","Github Action","CI/CD","Experience",{"type":14,"value":1462,"toc":1659},[1463,1477,1480,1491,1494,1497,1500,1505,1508,1513,1516,1521,1526,1529,1534,1537,1542,1546,1549,1576,1579,1586,1591,1608,1627,1634,1638,1649,1656],[17,1464,1465,1466,1471,1472,456],{},"在今年八月的时候，我这边所在的一个 Github Organization 在私有项目开发阶段频繁触发 CI，耗尽了 Github 为免费计划 (Free Plan) 提供的",[804,1467,1470],{"href":1468,"rel":1469},"https://docs.github.com/en/get-started/learning-about-github/githubs-plans#github-free-for-organizations",[808],"每月 2000 分钟 Action 额度","（所有私有仓库共享，公有仓库不计）。大致看了下，CI 流设置得是合理的，那么就要另寻他法看看有没有办法去提供更宽裕的资源，因此也就盯上了文章标题中所提到的 ",[804,1473,1476],{"href":1474,"rel":1475},"https://docs.github.com/en/actions/concepts/runners/self-hosted-runners",[808],"Github Action Self-hosted Runner",[17,1478,1479],{},"对于这个 Self-hosted Runner，与 Github 官方提供的 runner 相比，主要有以下几个优势",[1021,1481,1482,1485,1488],{},[1024,1483,1484],{},"针对私有仓库，拥有无限制的 Action 运行时长",[1024,1486,1487],{},"可以自行搭配更强大的硬件计算能力和内存",[1024,1489,1490],{},"可以接入内网环境，方便与内网/局域网设备通信",[109,1492,1493],{"id":1493},"配置安装",[17,1495,1496],{},"由于不清楚需要的网络环境，我这次测试直接选用了一台闲置的香港 vps，4核4G + 80G 硬盘 + 1Gbps 大口子的配置，除了硬盘读写稍微拉胯一些，别的地方可以说是拉满了。",[17,1498,1499],{},"Self-hosted Runner 的配置本身是相当直接和清晰的，照着官方提供的方案基本没什么问题。",[17,1501,1502],{},[784,1503],{"alt":43,"src":1504},"https://static.031130.xyz/uploads/2025/09/05/7c0475cdb1aa9.webp",[17,1506,1507],{},"三个主流平台都有，如果好好加以利用，应该可以涵盖包括 iPhone 应用打包等一系列的需求。",[17,1509,1510],{},[784,1511],{"alt":43,"src":1512},"https://static.031130.xyz/uploads/2025/09/05/96ff7cb263da1.webp",[17,1514,1515],{},"在观察一下我这边拿到手的 2.328.0 版本的 runner 安装文件压缩包的体积在 220MB 左右，内置了 node20 和 node24 各两个版本的运行环境。",[17,1517,1518],{},[784,1519],{"alt":43,"src":1520},"https://static.031130.xyz/uploads/2025/09/05/f775e3bcd2cdc.webp",[17,1522,1523],{},[784,1524],{"alt":43,"src":1525},"https://static.031130.xyz/uploads/2025/09/05/d0d4fe4611a40.webp",[17,1527,1528],{},"在执行完 config.sh 后，当前目录下就会多出一个 svc.sh，可以帮助利用这东西来调用 systemd 实现进程守护之类的需求。",[17,1530,1531],{},[784,1532],{"alt":43,"src":1533},"https://static.031130.xyz/uploads/2025/09/05/43c6b19038def.webp",[17,1535,1536],{},"再次刷新网页，就可以看到 Self-hosted Runner 处于已经上线的状态了",[17,1538,1539],{},[784,1540],{"alt":43,"src":1541},"https://static.031130.xyz/uploads/2025/09/05/6dad15beff900.webp",[109,1543,1545],{"id":1544},"指定-action-采用自己的-runner","指定 Action 采用自己的 Runner",[17,1547,1548],{},"这一步很简单，只需在原 Action 的 yml 文件中改变 runs-on 字段即可",[38,1550,1554],{"className":1551,"code":1552,"language":1553,"meta":43,"style":43},"language-diff shiki shiki-themes one-light one-dark-pro","jobs:\n  run:\n+    runs-on: self-hosted\n-    runs-on: ubuntu-latest\n","diff",[30,1555,1556,1561,1566,1571],{"__ignoreMap":43},[47,1557,1558],{"class":49,"line":50},[47,1559,1560],{},"jobs:\n",[47,1562,1563],{"class":49,"line":56},[47,1564,1565],{},"  run:\n",[47,1567,1568],{"class":49,"line":62},[47,1569,1570],{},"+    runs-on: self-hosted\n",[47,1572,1573],{"class":49,"line":68},[47,1574,1575],{},"-    runs-on: ubuntu-latest\n",[109,1577,1578],{"id":1578},"实测",[17,1580,1581,1582,1585],{},"当我满心欢喜地将 CI 流程从 Github 官方的 runner 切换到自托管的 runner 后，问题很快就浮现了，而这也正是我“爱不起来”的主要原因。问题集中体现在我习以为常的 ",[30,1583,1584],{},"setup-python"," 这一由 Github 官方维护的 Github Action Flow 中，提示 3.12 版本没找到。",[17,1587,1588],{},[784,1589],{"alt":43,"src":1590},"https://static.031130.xyz/uploads/2025/09/05/1c93947170a85.webp",[17,1592,1593,1594,1597,1598,1601,1602,1607],{},"在 Github 官方提供的虚拟环境中，这些 Action 会为我们准备好指定版本的开发环境。例如，",[30,1595,1596],{},"uses: actions/setup-python"," 加上 ",[30,1599,1600],{},"with: python-version: '3.12'"," 就会自动在环境中安装并配置好 Python 3.12.x。我对此已经习以为常，认为这是一个“开箱即用”的功能。但在 Self-hosted Runner 上，情况略有些不同。setup-python 在",[804,1603,1606],{"href":1604,"rel":1605},"https://github.com/actions/setup-python/blob/main/docs/advanced-usage.md#using-setup-python-with-a-self-hosted-runner",[808],"文档","中指出",[1609,1610,1611],"blockquote",{},[17,1612,1613,1614,1619,1620,1623,1624,1626],{},"Python distributions are only available for the same ",[804,1615,1618],{"href":1616,"rel":1617},"https://github.com/actions/runner-images#available-images",[808],"environments"," that GitHub Actions hosted environments are available for. If you are using an unsupported version of Ubuntu such as ",[30,1621,1622],{},"19.04"," or another Linux distribution such as Fedora, ",[30,1625,1584],{}," may not work.",[17,1628,1629,1630,1633],{},"setup-python 这个 Action ",[21,1631,1632],{},"只支持 Github Action 所采用的同款操作系统","，而我 VPS 的 Debian 不受支持，因此有这个误报，同时也给我的 Debian 判了死刑。",[109,1635,1637],{"id":1636},"症结所在对-self-hosted-runner-的误解","症结所在：对 Self-hosted Runner 的误解",[17,1639,1640,1641,1644,1645,1648],{},"我潜意识里认为，Self-hosted Runner 仅仅是将计算成本从 Github 服务器转移到了本地，而 ",[30,1642,1643],{},"actions/setup-python"," 这种官方标准动作，理应会像 Github-hosted Runner 中那样，优雅地为我下载、安装、并配置好我需要的一切。然而，",[21,1646,1647],{},"Self-hosted  Runner 的本质只是从 Github 接收任务，并在当前的操作系统环境中执行指令","，并不保证和 Github 官方提供的 Runner 的运行环境一致。",[17,1650,1651,1652,1655],{},"Self-hosted Runner 不是一个开箱即用的“服务”，而是",[21,1653,1654],{},"一个需要你亲自管理的“基础设施”","。你需要负责服务器的安装、配置、安全更新、依赖管理、磁盘清理等一系列运维工作。它更适合那些对 CI/CD 有更高阶需求的团队或个人：比如 CI/CD 消费大户、需要特定硬件（如 ARM、GPU）进行构建的团队、或者 CI 流程深度依赖内部网络资源的企业。对于像我这样只是愿意拿出更多的本地计算资源来获取更多 Action 运行时长的普通开发者而言，它带来的运维心智负担，似乎是有一点重了。",[1067,1657,1658],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":43,"searchDepth":56,"depth":56,"links":1660},[1661,1662,1663,1664],{"id":1493,"depth":56,"text":1493},{"id":1544,"depth":56,"text":1545},{"id":1578,"depth":56,"text":1578},{"id":1636,"depth":56,"text":1637},{"title":1666,"date":1667,"path":1668,"tags":1669,"body":1676},"DNS 解析时长毁了我精心设计的图床网络架构","2025-08-11 00:06:40","/2025/08/11/dns-resolve-time-destroyed-my-optimization-for-pic-cdn",[1670,1671,1672,1673,1674,1675],"CDN","图床","DNS","Network","Cloudflare","Dnspod",{"type":14,"value":1677,"toc":2070},[1678,1685,1690,1696,1706,1711,1800,1815,1820,1823,1895,1900,1903,1908,1931,1936,1947],[17,1679,1680,1681,1684],{},"去年夏天，我兴致勃勃地写了好几篇博文，详细讲述了我如何搭建博客图床。核心目标很明确：",[21,1682,1683],{},"分地区解析 DNS","，让国内外的访客都能嗖嗖地加载图片，体验拉满。想法嘛，绝对是走在技术前沿的，堪称完美！然而……现实它总是喜欢给你来点小惊喜，对吧？",[17,1686,1687],{},[784,1688],{"alt":43,"src":1689},"https://static.031130.xyz/uploads/2025/08/11/26306b2a483ba.webp",[17,1691,1692,1695],{},[21,1693,1694],{},"955 毫秒！"," 看到这个 DNS  解析时长的时候，我差点把刚喝下去的霸王茶姬喷在屏幕上。这简直就是一个隐形刺客，在我精心设计的图床网络架构背后，悄咪咪地给了致命一击。想象一下，访客满怀期待地点开你的博客，结果光是为了搞清楚图片服务器在哪，就要等上差不多一秒钟？这体验优化了个寂寞啊！",[17,1697,1698,1699,1702,1703,456],{},"为啥之前没发现？这得“感谢”",[21,1700,1701],{},"DNS 缓存","这位老好人。它勤勤恳恳地帮后来的访客记住了答案，让我的本地测试和复访测试都一片祥和。直到最近，有群友向我反馈了首次访问时图片的加载速度过慢，我才如梦初醒。再结合最近为了秋招准备的八股文中里面关于 DNS 解析那套繁琐的流程（递归查询、权威查询、根域名、顶级域名……查个地址堪比查户口本），我瞬间锁定了罪魁祸首：",[21,1704,1705],{},"首次访问时的 DNS 解析延迟",[17,1707,1708],{},[21,1709,1710],{},"来，复盘一下我那“曲折离奇”的 DNS 寻址之旅（访客视角）：",[1215,1712,1713,1722,1735,1752,1764,1780,1795],{},[1024,1714,1715],{},[21,1716,1717,1718,1721],{},"访客想访问 ",[30,1719,1720],{},"static.031130.xyz"," 的图片。",[1024,1723,1724,1731,1732,1734],{},[21,1725,1726,1727,1730],{},"查 ",[30,1728,1729],{},"031130.xyz"," 的权威 DNS："," 问了一圈，发现权威服务器原来在 ",[21,1733,1674],{}," (国外)。",[1024,1736,1737,1740,1741,1743,1744,1747,1748,1751],{},[21,1738,1739],{},"Cloudflare 权威服务器回复："," “哦，",[30,1742,1720],{}," 啊？它是个马甲 (",[30,1745,1746],{},"CNAME",")，真身是 ",[30,1749,1750],{},"cdn-cname.zhul.in","，你去找它吧！”",[1024,1753,1754,1759,1760,1763],{},[21,1755,1726,1756,1730],{},[30,1757,1758],{},"zhul.in"," 这次权威服务器在 ",[21,1761,1762],{},"DNSPod"," (国内)。",[1024,1765,1766,1769,1770,1772,1773,1775,1776,1779],{},[21,1767,1768],{},"DNSPod 权威服务器回复 (针对国内用户)："," “",[30,1771,1750],{}," 也是个马甲 (",[30,1774,1746],{},")，它实际是 ",[30,1777,1778],{},"small-storage-cdn.b0.aicdn.com","，接着找！”",[1024,1781,1782,1787,1788,1790,1791,1794],{},[21,1783,1726,1784,1786],{},[30,1785,1778],{},"："," 最终，它可能还会再 ",[30,1789,1746],{}," 到类似 ",[30,1792,1793],{},"nm.aicdn.com"," 这样的 CDN 节点主机名。",[1024,1796,1797],{},[21,1798,1799],{},"最终获得 IP 地址，开始连接 CDN 节点下载图片。",[17,1801,1802,1803,1806,1807,1810,1811,1814],{},"发现问题没？",[21,1804,1805],{},"关键的第一步和第二步，权威 DNS 查询指向了国外的 Cloudflare！"," 对于国内用户，虽然最终解析到的 CDN 节点 (",[30,1808,1809],{},"small-storage-cdn.b0.aicdn.com/nm.aicdn.com",") 是国内的、速度飞快，但光是",[21,1812,1813],{},"前两步跨越重洋的 DNS 查询","，就足够让首次访问的用户体验跌入谷底。那个 955ms 的解析时长，基本就是花在跟国外 DNS 服务器“跨国聊天”上了。",[17,1816,1817],{},[21,1818,1819],{},"优化方案：三管齐下，围剿 DNS 延迟",[17,1821,1822],{},"既然找到了病根，就得下猛药：",[1215,1824,1825,1843,1855],{},[1024,1826,1827,1834,1835,1838,1839,1842],{},[21,1828,1829,1830,1833],{},"DNS 预取 (",[30,1831,1832],{},"dns-prefetch","):"," 在博客的 HTML ",[30,1836,1837],{},"\u003Chead>"," 里，早早地加上 ",[30,1840,1841],{},"\u003Clink rel=\"dns-prefetch\" href=\"//static.031130.xyz\">","。这相当于浏览器在渲染页面时，就悄悄开始解析图床域名了，等真需要加载图片时，DNS 结果可能已经准备好了，神不知鬼不觉。当然也可以使用 preconnect 等等更激进的策略，但本文着重讲 DNS 解析，因此不做拓展。",[1024,1844,1845,1848,1849,1851,1852,1854],{},[21,1846,1847],{},"延长 DNS 记录的 TTL (生存时间)："," 把 ",[30,1850,1720],{}," 这个 ",[30,1853,1746],{}," 记录的 TTL 值调大。以前都设置得较短，方便快速切换。现在为了缓存，适当延长（比如几小时甚至一天）。这样，一旦有用户解析过，本地 DNS 服务器就能记住更久，后续用户（包括同一用户再次访问）就能直接从缓存拿到结果，省掉跨国查询。",[1024,1856,1857,1860,1861,1863,1864,1867,1868,1871,1872],{},[21,1858,1859],{},"釜底抽薪：迁移权威 DNS！"," 这是最核心的一步。直接把 ",[30,1862,1729],{}," 域名的",[21,1865,1866],{},"权威 DNS 服务器","，从 Cloudflare ",[21,1869,1870],{},"搬回国内 DNSPod","。这样一来：\n",[1021,1873,1874,1880,1892],{},[1024,1875,1876,1877,1879],{},"访客的递归 DNS 服务器查询 ",[30,1878,1729],{}," 的权威服务器时，直接找到的就是国内的 DNSPod，响应飞快。",[1024,1881,1882,1883,1885,1886,1888,1889,1891],{},"DNSPod 直接告诉递归服务器 ",[30,1884,1720],{}," -> ",[30,1887,1778],{}," 完全在国内完成，丝般顺滑，不需要 ",[30,1890,1750],{}," 当分区域解析的工具人",[1024,1893,1894],{},"整个 DNS 解析链路都在国内高速完成，首次访问的 955ms 噩梦彻底拜拜。",[17,1896,1897],{},[21,1898,1899],{},"效果如何？",[17,1901,1902],{},"受限于 DNS 缓存带来的测试困难，最终的效果确实很难在短时间内测试出来。但迁移权威 DNS 到 DNSPod + 调整 TTL +  加上预取之后，再测试首次访问的 DNS 解析时间总算是降到了可接受的程度，这才是 CDN  优化该有的样子！",[17,1904,1905],{},[21,1906,1907],{},"教训总结：",[1021,1909,1910,1916,1925],{},[1024,1911,1912,1915],{},[21,1913,1914],{},"别让 DNS 成为性能短板！"," 尤其是在涉及多地优化时，权威 DNS 的地理位置对首次访问延迟至关重要。能用国内的权威，就别用国外的。",[1024,1917,1918,1921,1922,1924],{},[21,1919,1920],{},"缓存是好东西，但首次访问是软肋。"," 善用 ",[30,1923,1832],{}," 和合理设置 TTL 能有效缓解。",[1024,1926,1927,1930],{},[21,1928,1929],{},"监控和用户反馈是金。"," 自己的测试环境往往有缓存“美化”，真实世界的首次访问体验要靠更细致的监控和用户的火眼金睛（感谢反馈的朋友！）。",[17,1932,1933],{},[21,1934,1935],{},"!!! 超级重要补充：警惕 CNAME 拉平 !!!",[17,1937,1938,1939,1946],{},"最后，必须给各位提个醒！如果你和我一样，需要依赖分地区解析来让访客访问到最近的 CDN 节点（比如让国内走国内CDN，国外走Cloudflare），那么千万要",[21,1940,1941,1942,1945],{},"避开 ",[30,1943,1944],{},"CNAME Flattening"," (CNAME 拉平) 这个“优化”方案","！",[1021,1948,1949,1982,1994,2029],{},[1024,1950,1951,1954,1955,1957,1958,1885,1961,1964,1965,1967,1968,1971,1972,1975,1976,1979,1980,456],{},[21,1952,1953],{},"CNAME 拉平是什么？"," 简单说，就是权威 DNS 服务器（比如 Cloudflare）看到你设置了一个 ",[30,1956,1746],{}," 记录（比如 ",[30,1959,1960],{},"static.example.com",[30,1962,1963],{},"cdn.cname.target.com","），它主动帮你去找 ",[30,1966,1963],{}," 的最终 ",[30,1969,1970],{},"A","/",[30,1973,1974],{},"AAAA"," 记录 (IP地址)，然后把 ",[21,1977,1978],{},"最终的 IP 地址"," 直接返回给查询者，而不是返回 ",[30,1981,1746],{},[1024,1983,1984,1987,1988,1786,1991],{},[21,1985,1986],{},"听起来很美好？它确实能减少 CNAME 链的长度！"," 但它有个",[21,1989,1990],{},"致命缺点",[21,1992,1993],{},"权威 DNS 服务器在拉平解析时，会丢掉分地区解析的上下文！",[1024,1995,1996,1999,2000,2003,2004,2007,2008,2011,2012,2014,2015,2017,2018,2020,2021,2024,2025,2028],{},[21,1997,1998],{},"为什么失效？"," 分地区解析 (",[30,2001,2002],{},"DNS View"," 或 ",[30,2005,2006],{},"GeoDNS",") 的功能是",[21,2009,2010],{},"在权威 DNS 服务器层面实现的","。当权威服务器执行 ",[30,2013,1746],{}," 拉平时，它是在它自己所在的位置去查询 ",[30,2016,1963],{}," 的 IP。比如你的权威 DNS 在 Cloudflare (美国节点)，它拉平查询时，拿到的 ",[30,2019,1963],{}," 的 IP ",[21,2022,2023],{},"大概率是给美国用户用的最优 IP","。然后它把这个 IP ",[21,2026,2027],{},"返回给了所有地区的查询者","，包括中国用户！你精心配置的让中国用户解析到国内 CDN IP 的策略就完全失效了！",[1024,2030,2031,2034,2035,2041,2042,2045,2046,2048,2049,373,2052,2055,2056,2058,2059,2061,2062,1885,2064,2066,2067,2069],{},[21,2032,2033],{},"结论："," 如果你需要 ",[21,2036,2037,2038,2040],{},"分地区解析 (",[30,2039,2006],{},")"," 功能，",[21,2043,2044],{},"绝对不要","在你希望应用分地区解析的域名上启用 ",[30,2047,1944],{}," (或 ",[30,2050,2051],{},"ALIAS",[30,2053,2054],{},"ANAME"," 等实现类似拉平效果的功能)。老老实实用 ",[30,2057,1746],{}," 指向另一个支持 ",[30,2060,2006],{}," 的域名（就像我初始方案里 ",[30,2063,1720],{},[30,2065,1750],{},"，而 ",[30,2068,1758],{}," 在 DNSPod 上做分地区解析），才能保证你的分流策略正确执行。",{"title":43,"searchDepth":56,"depth":56,"links":2071},[],{"title":2073,"date":2074,"path":2075,"tags":2076,"body":2082},"Vue Markdown 渲染优化实战(下)：告别 DOM 操作，拥抱 AST 与函数式渲染","2025-07-13 00:01:35","/2025/07/13/vue-markdown-render-improvement-2",[2077,2078,2079,12,2080,2081],"Vue.js","Markdown","AST","Web","unified",{"type":14,"value":2083,"toc":3985},[2084,2092,2107,2110,2113,2116,2126,2136,2140,2149,2166,2176,2179,2194,2198,2219,2222,2226,2236,2266,2270,2273,2294,2297,2462,2465,2717,2721,2728,2740,2743,3375,3379,3386,3716,3719,3833,3837,3840,3945,3949,3952,3976,3979,3982],[109,2085,2087,2088,2091],{"id":2086},"上回回顾当-morphdom-遇上-vue","上回回顾：当 ",[30,2089,2090],{},"morphdom"," 遇上 Vue",[17,2093,2094,2095,2099,2100,2103,2104,2106],{},"在",[804,2096,2098],{"href":2097},"/2025/07/12/vue-markdown-render-improvement-1/","上一篇文章","中，我们经历了一场 Markdown 渲染的性能优化之旅。从最原始的 ",[30,2101,2102],{},"v-html"," 全量刷新，到按块更新，最终我们请出了 ",[30,2105,2090],{}," 这个“终极武器”。它通过直接比对和操作真实 DOM，以最小的代价更新视图，完美解决了实时渲染中的性能瓶颈和交互状态丢失问题。",[17,2108,2109],{},"然而，一个根本性问题始终存在：在 Vue 的地盘里，绕过 Vue 的虚拟 DOM (Virtual DOM) 和 Diff 算法，直接用一个第三方库去“动刀”真实 DOM，总感觉有些“旁门左道”。这就像在一个精密的自动化工厂里，引入了一个老师傅拿着锤子和扳手进行手动修补。虽然活干得漂亮，但总觉得破坏了原有的工作流，不够“Vue”。",[17,2111,2112],{},"那么，有没有一种更优雅、更“原生”的方式，让我们既能享受精准更新的快感，又能完全融入 Vue 的生态体系呢？",[17,2114,2115],{},"带着这个问题，我询问了前端群里的伙伴们。",[1609,2117,2118],{},[17,2119,2120,2121],{},"如果就要做一个渲染器，你这个思路不是最佳实践。每次更新时，你都生成全量的虚拟 HTML，然后再对 HTML 做减法来优化性能。然而，每次更新的增量部分是明确的，为什么不直接用这部分增量去做加法？增量部分通过 markdown-it 的库无法直接获取，但更好的做法是在这一步进行改造：先解析 Markdown 的结构，再利用 Vue 的动态渲染能力生成 DOM。这样，DOM 的复用就可以借助 Vue 自身的能力来实现。—— ",[804,2122,2125],{"href":2123,"rel":2124},"https://site.j10c.cc/",[808],"j10c",[1609,2127,2128],{},[17,2129,2130,2131],{},"可以用 unified 结合 remark-parse 插件，将 markdown 字符串解析为 ast，然后根据 ast 使用 render func 进行渲染即可。—— bii & ",[804,2132,2135],{"href":2133,"rel":2134},"https://github.com/nekomeowww",[808],"nekomeowww",[109,2137,2139],{"id":2138},"新思路从字符串转换到结构化渲染","新思路：从“字符串转换”到“结构化渲染”",[17,2141,2142,2143,2145,2146,2148],{},"我们之前的方案，无论是 ",[30,2144,2102],{}," 还是 ",[30,2147,2090],{},"，其核心思路都是：",[17,2150,2151,1885,2154,1885,2157,1885,2160,1885,2163],{},[30,2152,2153],{},"Markdown 字符串",[30,2155,2156],{},"markdown-it",[30,2158,2159],{},"HTML 字符串",[30,2161,2162],{},"浏览器/morphdom",[30,2164,2165],{},"DOM",[17,2167,2168,2169,2171,2172,2175],{},"这条链路的问题在于，从 ",[30,2170,2159],{}," 这一步开始，我们就丢失了 Markdown 的",[21,2173,2174],{},"原始结构信息","。我们得到的是一堆非结构化的文本，Vue 无法理解其内在逻辑，只能将其囫囵吞下。",[17,2177,2178],{},"而新的思路则是将流程改造为：",[17,2180,2181,1885,2183,1885,2186,1885,2189,1885,2192],{},[30,2182,2153],{},[30,2184,2185],{},"AST (抽象语法树)",[30,2187,2188],{},"Vue VNodes (虚拟节点)",[30,2190,2191],{},"Vue",[30,2193,2165],{},[1169,2195,2197],{"id":2196},"什么是-ast","什么是 AST？",[17,2199,2200,2203,2204,2207,2208,2211,2212,2215,2216,456],{},[21,2201,2202],{},"AST (Abstract Syntax Tree)"," ，即抽象语法树，是源代码或标记语言的结构化表示。它将一长串的文本，解析成一个层级分明的树状对象。对于 Markdown 来说，一个一级标题会变成一个 ",[30,2205,2206],{},"type: 'heading', depth: 1"," 的节点，一个段落会变成一个 ",[30,2209,2210],{},"type: 'paragraph'"," 的节点，而段落里的文字，则是 ",[30,2213,2214],{},"paragraph"," 节点的 ",[30,2217,2218],{},"children",[17,2220,2221],{},"一旦我们将 Markdown 转换成 AST，就相当于拥有了整个文档的“结构图纸”。我们不再是面对一堆模糊的 HTML 字符串，而是面对一个清晰、可编程的 JavaScript 对象。",[1169,2223,2225],{"id":2224},"我们的新工具unified-与-remark","我们的新工具：unified 与 remark",[17,2227,2228,2229,2232,2233,2235],{},"为了实现 ",[30,2230,2231],{},"Markdown -> AST"," 的转换，我们引入 ",[30,2234,2081],{}," 生态。",[1021,2237,2238,2247],{},[1024,2239,2240,2246],{},[21,2241,2242],{},[804,2243,2081],{"href":2244,"rel":2245},"https://github.com/unifiedjs/unified",[808],": 一个强大的内容处理引擎。你可以把它想象成一条流水线，原始文本是原料，通过添加不同的“插件”来对它进行解析、转换和序列化。",[1024,2248,2249,2256,2257,2259,2260,2265],{},[21,2250,2251],{},[804,2252,2255],{"href":2253,"rel":2254},"https://github.com/remarkjs/remark",[808],"remark-parse",": 一个 ",[30,2258,2081],{}," 插件，专门负责将 Markdown 文本解析成 AST（具体来说是 ",[804,2261,2264],{"href":2262,"rel":2263},"https://github.com/syntax-tree/mdast",[808],"mdast"," 格式）。",[109,2267,2269],{"id":2268},"第一步将-markdown-解析为-ast","第一步：将 Markdown 解析为 AST",[17,2271,2272],{},"首先，我们需要安装相关依赖：",[38,2274,2278],{"className":2275,"code":2276,"language":2277,"meta":43,"style":43},"language-bash shiki shiki-themes one-light one-dark-pro","npm install unified remark-parse\n","bash",[30,2279,2280],{"__ignoreMap":43},[47,2281,2282,2285,2288,2291],{"class":49,"line":50},[47,2283,2284],{"class":146},"npm",[47,2286,2287],{"class":205}," install",[47,2289,2290],{"class":205}," unified",[47,2292,2293],{"class":205}," remark-parse\n",[17,2295,2296],{},"然后，我们可以轻松地将 Markdown 字符串转换为 AST：",[38,2298,2302],{"className":2299,"code":2300,"language":2301,"meta":43,"style":43},"language-javascript shiki shiki-themes one-light one-dark-pro","import { unified } from 'unified'\nimport remarkParse from 'remark-parse'\n\nconst markdownContent = '# Hello, AST!\\n\\nThis is a paragraph.'\n\n// 创建一个处理器实例\nconst processor = unified().use(remarkParse)\n\n// 解析 Markdown 内容\nconst ast = processor.parse(markdownContent)\n\nconsole.log(JSON.stringify(ast, null, 2))\n","javascript",[30,2303,2304,2321,2334,2338,2356,2360,2365,2389,2393,2398,2421,2425],{"__ignoreMap":43},[47,2305,2306,2309,2311,2313,2315,2318],{"class":49,"line":50},[47,2307,2308],{"class":134},"import",[47,2310,229],{"class":150},[47,2312,2081],{"class":167},[47,2314,317],{"class":150},[47,2316,2317],{"class":134},"from",[47,2319,2320],{"class":205}," 'unified'\n",[47,2322,2323,2325,2328,2331],{"class":49,"line":56},[47,2324,2308],{"class":134},[47,2326,2327],{"class":167}," remarkParse",[47,2329,2330],{"class":134}," from",[47,2332,2333],{"class":205}," 'remark-parse'\n",[47,2335,2336],{"class":49,"line":62},[47,2337,185],{"emptyLinePlaceholder":184},[47,2339,2340,2342,2345,2347,2350,2353],{"class":49,"line":68},[47,2341,135],{"class":134},[47,2343,2344],{"class":138}," markdownContent",[47,2346,143],{"class":142},[47,2348,2349],{"class":205}," '# Hello, AST!",[47,2351,2352],{"class":142},"\\n\\n",[47,2354,2355],{"class":205},"This is a paragraph.'\n",[47,2357,2358],{"class":49,"line":74},[47,2359,185],{"emptyLinePlaceholder":184},[47,2361,2362],{"class":49,"line":80},[47,2363,2364],{"class":242},"// 创建一个处理器实例\n",[47,2366,2367,2369,2372,2374,2376,2379,2382,2384,2387],{"class":49,"line":86},[47,2368,135],{"class":134},[47,2370,2371],{"class":138}," processor",[47,2373,143],{"class":142},[47,2375,2290],{"class":146},[47,2377,2378],{"class":150},"().",[47,2380,2381],{"class":146},"use",[47,2383,151],{"class":150},[47,2385,2386],{"class":236},"remarkParse",[47,2388,179],{"class":150},[47,2390,2391],{"class":49,"line":92},[47,2392,185],{"emptyLinePlaceholder":184},[47,2394,2395],{"class":49,"line":98},[47,2396,2397],{"class":242},"// 解析 Markdown 内容\n",[47,2399,2400,2402,2405,2407,2409,2411,2414,2416,2419],{"class":49,"line":617},[47,2401,135],{"class":134},[47,2403,2404],{"class":138}," ast",[47,2406,143],{"class":142},[47,2408,2371],{"class":154},[47,2410,158],{"class":150},[47,2412,2413],{"class":146},"parse",[47,2415,151],{"class":150},[47,2417,2418],{"class":236},"markdownContent",[47,2420,179],{"class":150},[47,2422,2423],{"class":49,"line":622},[47,2424,185],{"emptyLinePlaceholder":184},[47,2426,2427,2430,2432,2435,2437,2440,2442,2445,2447,2450,2452,2455,2457,2460],{"class":49,"line":644},[47,2428,2429],{"class":154},"console",[47,2431,158],{"class":150},[47,2433,2434],{"class":146},"log",[47,2436,151],{"class":150},[47,2438,2439],{"class":138},"JSON",[47,2441,158],{"class":150},[47,2443,2444],{"class":146},"stringify",[47,2446,151],{"class":150},[47,2448,2449],{"class":236},"ast",[47,2451,373],{"class":150},[47,2453,2454],{"class":744},"null",[47,2456,373],{"class":150},[47,2458,2459],{"class":744},"2",[47,2461,735],{"class":150},[17,2463,2464],{},"运行以上代码，我们将得到一个如下所示的 JSON 对象，这就是我们梦寐以求的 AST：",[38,2466,2470],{"className":2467,"code":2468,"language":2469,"meta":43,"style":43},"language-json shiki shiki-themes one-light one-dark-pro","{\n  \"type\": \"root\",\n  \"children\": [\n    {\n      \"type\": \"heading\",\n      \"depth\": 1,\n      \"children\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"Hello, AST!\",\n          \"position\": { ... }\n        }\n      ],\n      \"position\": { ... }\n    },\n    {\n      \"type\": \"paragraph\",\n      \"children\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"This is a paragraph.\",\n          \"position\": { ... }\n        }\n      ],\n      \"position\": { ... }\n    }\n  ],\n  \"position\": { ... }\n}\n","json",[30,2471,2472,2477,2491,2499,2504,2516,2528,2535,2540,2552,2564,2579,2584,2589,2600,2605,2609,2620,2627,2632,2643,2655,2666,2671,2676,2687,2693,2699,2711],{"__ignoreMap":43},[47,2473,2474],{"class":49,"line":50},[47,2475,2476],{"class":150},"{\n",[47,2478,2479,2482,2485,2488],{"class":49,"line":56},[47,2480,2481],{"class":167},"  \"type\"",[47,2483,2484],{"class":150},": ",[47,2486,2487],{"class":205},"\"root\"",[47,2489,2490],{"class":150},",\n",[47,2492,2493,2496],{"class":49,"line":62},[47,2494,2495],{"class":167},"  \"children\"",[47,2497,2498],{"class":150},": [\n",[47,2500,2501],{"class":49,"line":68},[47,2502,2503],{"class":150},"    {\n",[47,2505,2506,2509,2511,2514],{"class":49,"line":74},[47,2507,2508],{"class":167},"      \"type\"",[47,2510,2484],{"class":150},[47,2512,2513],{"class":205},"\"heading\"",[47,2515,2490],{"class":150},[47,2517,2518,2521,2523,2526],{"class":49,"line":80},[47,2519,2520],{"class":167},"      \"depth\"",[47,2522,2484],{"class":150},[47,2524,2525],{"class":744},"1",[47,2527,2490],{"class":150},[47,2529,2530,2533],{"class":49,"line":86},[47,2531,2532],{"class":167},"      \"children\"",[47,2534,2498],{"class":150},[47,2536,2537],{"class":49,"line":92},[47,2538,2539],{"class":150},"        {\n",[47,2541,2542,2545,2547,2550],{"class":49,"line":98},[47,2543,2544],{"class":167},"          \"type\"",[47,2546,2484],{"class":150},[47,2548,2549],{"class":205},"\"text\"",[47,2551,2490],{"class":150},[47,2553,2554,2557,2559,2562],{"class":49,"line":617},[47,2555,2556],{"class":167},"          \"value\"",[47,2558,2484],{"class":150},[47,2560,2561],{"class":205},"\"Hello, AST!\"",[47,2563,2490],{"class":150},[47,2565,2566,2569,2572,2576],{"class":49,"line":622},[47,2567,2568],{"class":167},"          \"position\"",[47,2570,2571],{"class":150},": { ",[47,2573,2575],{"class":2574},"sUNH4","...",[47,2577,2578],{"class":150}," }\n",[47,2580,2581],{"class":49,"line":644},[47,2582,2583],{"class":150},"        }\n",[47,2585,2586],{"class":49,"line":671},[47,2587,2588],{"class":150},"      ],\n",[47,2590,2591,2594,2596,2598],{"class":49,"line":697},[47,2592,2593],{"class":167},"      \"position\"",[47,2595,2571],{"class":150},[47,2597,2575],{"class":2574},[47,2599,2578],{"class":150},[47,2601,2602],{"class":49,"line":738},[47,2603,2604],{"class":150},"    },\n",[47,2606,2607],{"class":49,"line":748},[47,2608,2503],{"class":150},[47,2610,2611,2613,2615,2618],{"class":49,"line":753},[47,2612,2508],{"class":167},[47,2614,2484],{"class":150},[47,2616,2617],{"class":205},"\"paragraph\"",[47,2619,2490],{"class":150},[47,2621,2623,2625],{"class":49,"line":2622},18,[47,2624,2532],{"class":167},[47,2626,2498],{"class":150},[47,2628,2630],{"class":49,"line":2629},19,[47,2631,2539],{"class":150},[47,2633,2635,2637,2639,2641],{"class":49,"line":2634},20,[47,2636,2544],{"class":167},[47,2638,2484],{"class":150},[47,2640,2549],{"class":205},[47,2642,2490],{"class":150},[47,2644,2646,2648,2650,2653],{"class":49,"line":2645},21,[47,2647,2556],{"class":167},[47,2649,2484],{"class":150},[47,2651,2652],{"class":205},"\"This is a paragraph.\"",[47,2654,2490],{"class":150},[47,2656,2658,2660,2662,2664],{"class":49,"line":2657},22,[47,2659,2568],{"class":167},[47,2661,2571],{"class":150},[47,2663,2575],{"class":2574},[47,2665,2578],{"class":150},[47,2667,2669],{"class":49,"line":2668},23,[47,2670,2583],{"class":150},[47,2672,2674],{"class":49,"line":2673},24,[47,2675,2588],{"class":150},[47,2677,2679,2681,2683,2685],{"class":49,"line":2678},25,[47,2680,2593],{"class":167},[47,2682,2571],{"class":150},[47,2684,2575],{"class":2574},[47,2686,2578],{"class":150},[47,2688,2690],{"class":49,"line":2689},26,[47,2691,2692],{"class":150},"    }\n",[47,2694,2696],{"class":49,"line":2695},27,[47,2697,2698],{"class":150},"  ],\n",[47,2700,2702,2705,2707,2709],{"class":49,"line":2701},28,[47,2703,2704],{"class":167},"  \"position\"",[47,2706,2571],{"class":150},[47,2708,2575],{"class":2574},[47,2710,2578],{"class":150},[47,2712,2714],{"class":49,"line":2713},29,[47,2715,2716],{"class":150},"}\n",[109,2718,2720],{"id":2719},"第二步从-ast-到-vue-vnodes","第二步：从 AST 到 Vue VNodes",[17,2722,2723,2724,2727],{},"拿到了 AST，下一步就是将这个“结构图纸”真正地“施工”成用户可见的界面。在 Vue 的世界里，描述 UI 的蓝图就是虚拟节点 (VNode)，而 ",[30,2725,2726],{},"h()"," 函数（即 hyperscript）就是创建 VNode 的画笔。",[17,2729,2730,2731,373,2734,373,2736,2739],{},"我们的任务是编写一个渲染函数，它能够递归地遍历 AST，并为每一种节点类型（",[30,2732,2733],{},"heading",[30,2735,2214],{},[30,2737,2738],{},"text"," 等）生成对应的 VNode。",[17,2741,2742],{},"下面是一个简单的渲染函数实现：",[38,2744,2746],{"className":2299,"code":2745,"language":2301,"meta":43,"style":43},"function renderAst(node) {\n  if (!node) return null\n  switch (node.type) {\n    case 'root':\n      return h('div', {}, node.children.map(renderAst))\n    case 'paragraph':\n      return h('p', {}, node.children.map(renderAst))\n    case 'text':\n      return node.value\n    case 'emphasis':\n      return h('em', {}, node.children.map(renderAst))\n    case 'strong':\n      return h('strong', {}, node.children.map(renderAst))\n    case 'inlineCode':\n      return h('code', {}, node.value)\n    case 'heading':\n      return h('h' + node.depth, {}, node.children.map(renderAst))\n    case 'code':\n      return h('pre', {}, [h('code', {}, node.value)])\n    case 'list':\n      return h(node.ordered ? 'ol' : 'ul', {}, node.children.map(renderAst))\n    case 'listItem':\n      return h('li', {}, node.children.map(renderAst))\n    case 'thematicBreak':\n      return h('hr')\n    case 'blockquote':\n      return h('blockquote', {}, node.children.map(renderAst))\n    case 'link':\n      return h('a', { href: node.url, target: '_blank' }, node.children.map(renderAst))\n    default:\n      // 其它未实现类型\n      return h('span', { }, `[${node.type}]`)\n  }\n}\n",[30,2747,2748,2764,2786,2802,2813,2846,2855,2884,2893,2905,2914,2943,2952,2981,2990,3011,3020,3059,3068,3101,3110,3155,3164,3193,3202,3215,3224,3253,3262,3317,3325,3331,3364,3370],{"__ignoreMap":43},[47,2749,2750,2753,2756,2758,2761],{"class":49,"line":50},[47,2751,2752],{"class":134},"function",[47,2754,2755],{"class":146}," renderAst",[47,2757,151],{"class":150},[47,2759,2760],{"class":664},"node",[47,2762,2763],{"class":150},") {\n",[47,2765,2766,2769,2772,2775,2777,2780,2783],{"class":49,"line":56},[47,2767,2768],{"class":134},"  if",[47,2770,2771],{"class":150}," (",[47,2773,2774],{"class":142},"!",[47,2776,2760],{"class":236},[47,2778,2779],{"class":150},") ",[47,2781,2782],{"class":134},"return",[47,2784,2785],{"class":744}," null\n",[47,2787,2788,2791,2793,2795,2797,2800],{"class":49,"line":62},[47,2789,2790],{"class":134},"  switch",[47,2792,2771],{"class":150},[47,2794,2760],{"class":154},[47,2796,158],{"class":150},[47,2798,2799],{"class":167},"type",[47,2801,2763],{"class":150},[47,2803,2804,2807,2810],{"class":49,"line":68},[47,2805,2806],{"class":134},"    case",[47,2808,2809],{"class":205}," 'root'",[47,2811,2812],{"class":150},":\n",[47,2814,2815,2818,2821,2823,2826,2829,2831,2833,2835,2837,2839,2841,2844],{"class":49,"line":74},[47,2816,2817],{"class":134},"      return",[47,2819,2820],{"class":146}," h",[47,2822,151],{"class":150},[47,2824,2825],{"class":205},"'div'",[47,2827,2828],{"class":150},", {}, ",[47,2830,2760],{"class":154},[47,2832,158],{"class":150},[47,2834,2218],{"class":161},[47,2836,158],{"class":150},[47,2838,688],{"class":146},[47,2840,151],{"class":150},[47,2842,2843],{"class":236},"renderAst",[47,2845,735],{"class":150},[47,2847,2848,2850,2853],{"class":49,"line":80},[47,2849,2806],{"class":134},[47,2851,2852],{"class":205}," 'paragraph'",[47,2854,2812],{"class":150},[47,2856,2857,2859,2861,2863,2866,2868,2870,2872,2874,2876,2878,2880,2882],{"class":49,"line":86},[47,2858,2817],{"class":134},[47,2860,2820],{"class":146},[47,2862,151],{"class":150},[47,2864,2865],{"class":205},"'p'",[47,2867,2828],{"class":150},[47,2869,2760],{"class":154},[47,2871,158],{"class":150},[47,2873,2218],{"class":161},[47,2875,158],{"class":150},[47,2877,688],{"class":146},[47,2879,151],{"class":150},[47,2881,2843],{"class":236},[47,2883,735],{"class":150},[47,2885,2886,2888,2891],{"class":49,"line":92},[47,2887,2806],{"class":134},[47,2889,2890],{"class":205}," 'text'",[47,2892,2812],{"class":150},[47,2894,2895,2897,2900,2902],{"class":49,"line":98},[47,2896,2817],{"class":134},[47,2898,2899],{"class":154}," node",[47,2901,158],{"class":150},[47,2903,2904],{"class":167},"value\n",[47,2906,2907,2909,2912],{"class":49,"line":617},[47,2908,2806],{"class":134},[47,2910,2911],{"class":205}," 'emphasis'",[47,2913,2812],{"class":150},[47,2915,2916,2918,2920,2922,2925,2927,2929,2931,2933,2935,2937,2939,2941],{"class":49,"line":622},[47,2917,2817],{"class":134},[47,2919,2820],{"class":146},[47,2921,151],{"class":150},[47,2923,2924],{"class":205},"'em'",[47,2926,2828],{"class":150},[47,2928,2760],{"class":154},[47,2930,158],{"class":150},[47,2932,2218],{"class":161},[47,2934,158],{"class":150},[47,2936,688],{"class":146},[47,2938,151],{"class":150},[47,2940,2843],{"class":236},[47,2942,735],{"class":150},[47,2944,2945,2947,2950],{"class":49,"line":644},[47,2946,2806],{"class":134},[47,2948,2949],{"class":205}," 'strong'",[47,2951,2812],{"class":150},[47,2953,2954,2956,2958,2960,2963,2965,2967,2969,2971,2973,2975,2977,2979],{"class":49,"line":671},[47,2955,2817],{"class":134},[47,2957,2820],{"class":146},[47,2959,151],{"class":150},[47,2961,2962],{"class":205},"'strong'",[47,2964,2828],{"class":150},[47,2966,2760],{"class":154},[47,2968,158],{"class":150},[47,2970,2218],{"class":161},[47,2972,158],{"class":150},[47,2974,688],{"class":146},[47,2976,151],{"class":150},[47,2978,2843],{"class":236},[47,2980,735],{"class":150},[47,2982,2983,2985,2988],{"class":49,"line":697},[47,2984,2806],{"class":134},[47,2986,2987],{"class":205}," 'inlineCode'",[47,2989,2812],{"class":150},[47,2991,2992,2994,2996,2998,3001,3003,3005,3007,3009],{"class":49,"line":738},[47,2993,2817],{"class":134},[47,2995,2820],{"class":146},[47,2997,151],{"class":150},[47,2999,3000],{"class":205},"'code'",[47,3002,2828],{"class":150},[47,3004,2760],{"class":154},[47,3006,158],{"class":150},[47,3008,654],{"class":167},[47,3010,179],{"class":150},[47,3012,3013,3015,3018],{"class":49,"line":748},[47,3014,2806],{"class":134},[47,3016,3017],{"class":205}," 'heading'",[47,3019,2812],{"class":150},[47,3021,3022,3024,3026,3028,3031,3034,3036,3038,3041,3043,3045,3047,3049,3051,3053,3055,3057],{"class":49,"line":753},[47,3023,2817],{"class":134},[47,3025,2820],{"class":146},[47,3027,151],{"class":150},[47,3029,3030],{"class":205},"'h'",[47,3032,3033],{"class":142}," +",[47,3035,2899],{"class":154},[47,3037,158],{"class":150},[47,3039,3040],{"class":167},"depth",[47,3042,2828],{"class":150},[47,3044,2760],{"class":154},[47,3046,158],{"class":150},[47,3048,2218],{"class":161},[47,3050,158],{"class":150},[47,3052,688],{"class":146},[47,3054,151],{"class":150},[47,3056,2843],{"class":236},[47,3058,735],{"class":150},[47,3060,3061,3063,3066],{"class":49,"line":2622},[47,3062,2806],{"class":134},[47,3064,3065],{"class":205}," 'code'",[47,3067,2812],{"class":150},[47,3069,3070,3072,3074,3076,3079,3082,3085,3087,3089,3091,3093,3095,3098],{"class":49,"line":2629},[47,3071,2817],{"class":134},[47,3073,2820],{"class":146},[47,3075,151],{"class":150},[47,3077,3078],{"class":205},"'pre'",[47,3080,3081],{"class":150},", {}, [",[47,3083,3084],{"class":146},"h",[47,3086,151],{"class":150},[47,3088,3000],{"class":205},[47,3090,2828],{"class":150},[47,3092,2760],{"class":154},[47,3094,158],{"class":150},[47,3096,654],{"class":3097},"sj4iG",[47,3099,3100],{"class":150},")])\n",[47,3102,3103,3105,3108],{"class":49,"line":2634},[47,3104,2806],{"class":134},[47,3106,3107],{"class":205}," 'list'",[47,3109,2812],{"class":150},[47,3111,3112,3114,3116,3118,3120,3122,3125,3128,3131,3134,3137,3139,3141,3143,3145,3147,3149,3151,3153],{"class":49,"line":2645},[47,3113,2817],{"class":134},[47,3115,2820],{"class":146},[47,3117,151],{"class":150},[47,3119,2760],{"class":154},[47,3121,158],{"class":150},[47,3123,3124],{"class":167},"ordered",[47,3126,3127],{"class":674}," ?",[47,3129,3130],{"class":205}," 'ol'",[47,3132,3133],{"class":674}," :",[47,3135,3136],{"class":205}," 'ul'",[47,3138,2828],{"class":150},[47,3140,2760],{"class":154},[47,3142,158],{"class":150},[47,3144,2218],{"class":161},[47,3146,158],{"class":150},[47,3148,688],{"class":146},[47,3150,151],{"class":150},[47,3152,2843],{"class":236},[47,3154,735],{"class":150},[47,3156,3157,3159,3162],{"class":49,"line":2657},[47,3158,2806],{"class":134},[47,3160,3161],{"class":205}," 'listItem'",[47,3163,2812],{"class":150},[47,3165,3166,3168,3170,3172,3175,3177,3179,3181,3183,3185,3187,3189,3191],{"class":49,"line":2668},[47,3167,2817],{"class":134},[47,3169,2820],{"class":146},[47,3171,151],{"class":150},[47,3173,3174],{"class":205},"'li'",[47,3176,2828],{"class":150},[47,3178,2760],{"class":154},[47,3180,158],{"class":150},[47,3182,2218],{"class":161},[47,3184,158],{"class":150},[47,3186,688],{"class":146},[47,3188,151],{"class":150},[47,3190,2843],{"class":236},[47,3192,735],{"class":150},[47,3194,3195,3197,3200],{"class":49,"line":2673},[47,3196,2806],{"class":134},[47,3198,3199],{"class":205}," 'thematicBreak'",[47,3201,2812],{"class":150},[47,3203,3204,3206,3208,3210,3213],{"class":49,"line":2678},[47,3205,2817],{"class":134},[47,3207,2820],{"class":146},[47,3209,151],{"class":150},[47,3211,3212],{"class":205},"'hr'",[47,3214,179],{"class":150},[47,3216,3217,3219,3222],{"class":49,"line":2689},[47,3218,2806],{"class":134},[47,3220,3221],{"class":205}," 'blockquote'",[47,3223,2812],{"class":150},[47,3225,3226,3228,3230,3232,3235,3237,3239,3241,3243,3245,3247,3249,3251],{"class":49,"line":2695},[47,3227,2817],{"class":134},[47,3229,2820],{"class":146},[47,3231,151],{"class":150},[47,3233,3234],{"class":205},"'blockquote'",[47,3236,2828],{"class":150},[47,3238,2760],{"class":154},[47,3240,158],{"class":150},[47,3242,2218],{"class":161},[47,3244,158],{"class":150},[47,3246,688],{"class":146},[47,3248,151],{"class":150},[47,3250,2843],{"class":236},[47,3252,735],{"class":150},[47,3254,3255,3257,3260],{"class":49,"line":2701},[47,3256,2806],{"class":134},[47,3258,3259],{"class":205}," 'link'",[47,3261,2812],{"class":150},[47,3263,3264,3266,3268,3270,3273,3276,3279,3281,3283,3285,3288,3290,3293,3295,3298,3301,3303,3305,3307,3309,3311,3313,3315],{"class":49,"line":2713},[47,3265,2817],{"class":134},[47,3267,2820],{"class":146},[47,3269,151],{"class":150},[47,3271,3272],{"class":205},"'a'",[47,3274,3275],{"class":150},", { ",[47,3277,3278],{"class":167},"href",[47,3280,226],{"class":225},[47,3282,2899],{"class":154},[47,3284,158],{"class":150},[47,3286,3287],{"class":167},"url",[47,3289,373],{"class":150},[47,3291,3292],{"class":167},"target",[47,3294,226],{"class":225},[47,3296,3297],{"class":205}," '_blank'",[47,3299,3300],{"class":150}," }, ",[47,3302,2760],{"class":154},[47,3304,158],{"class":150},[47,3306,2218],{"class":161},[47,3308,158],{"class":150},[47,3310,688],{"class":146},[47,3312,151],{"class":150},[47,3314,2843],{"class":236},[47,3316,735],{"class":150},[47,3318,3320,3323],{"class":49,"line":3319},30,[47,3321,3322],{"class":134},"    default",[47,3324,2812],{"class":150},[47,3326,3328],{"class":49,"line":3327},31,[47,3329,3330],{"class":242},"      // 其它未实现类型\n",[47,3332,3334,3336,3338,3340,3343,3346,3349,3351,3353,3355,3357,3359,3362],{"class":49,"line":3333},32,[47,3335,2817],{"class":134},[47,3337,2820],{"class":146},[47,3339,151],{"class":150},[47,3341,3342],{"class":205},"'span'",[47,3344,3345],{"class":150},", { }, ",[47,3347,3348],{"class":205},"`[",[47,3350,334],{"class":333},[47,3352,2760],{"class":154},[47,3354,158],{"class":513},[47,3356,2799],{"class":167},[47,3358,339],{"class":333},[47,3360,3361],{"class":205},"]`",[47,3363,179],{"class":150},[47,3365,3367],{"class":49,"line":3366},33,[47,3368,3369],{"class":150},"  }\n",[47,3371,3373],{"class":49,"line":3372},34,[47,3374,2716],{"class":150},[109,3376,3378],{"id":3377},"第三步封装-vue-组件","第三步：封装 Vue 组件",[17,3380,3381,3382,3385],{},"整合上述逻辑，我们可以构建一个 Vue 组件。鉴于直接生成 VNode 的特性，采用函数式组件或显式 ",[30,3383,3384],{},"render"," 函数最为适宜。",[38,3387,3391],{"className":3388,"code":3389,"language":3390,"meta":43,"style":43},"language-vue shiki shiki-themes one-light one-dark-pro","\u003Ctemplate>\n  \u003Ccomponent :is=\"VNodeTree\" />\n\u003C/template>\n\n\u003Cscript setup>\nimport { computed, h, shallowRef, watchEffect } from 'vue'\nimport { unified } from 'unified'\nimport remarkParse from 'remark-parse'\n\nconst props = defineProps({\n  mdText: {\n    type: String,\n    default: ''\n  }\n})\n\nconst ast = shallowRef(null)\nconst parser = unified().use(remarkParse)\n\nwatchEffect(() => {\n  ast.value = parser.parse(props.mdText)\n})\n\n// AST 渲染函数 (同上文 renderAst 函数)\nfunction renderAst(node) { ... }\n\nconst VNodeTree = computed(() => renderAst(ast.value))\n\n\u003C/script>\n","vue",[30,3392,3393,3403,3422,3431,3435,3447,3477,3491,3501,3505,3520,3529,3541,3550,3554,3558,3562,3579,3600,3604,3614,3643,3647,3651,3656,3673,3677,3704,3708],{"__ignoreMap":43},[47,3394,3395,3397,3400],{"class":49,"line":50},[47,3396,608],{"class":150},[47,3398,3399],{"class":167},"template",[47,3401,3402],{"class":150},">\n",[47,3404,3405,3408,3411,3414,3416,3419],{"class":49,"line":56},[47,3406,3407],{"class":150},"  \u003C",[47,3409,3410],{"class":167},"component",[47,3412,3413],{"class":744}," :is",[47,3415,320],{"class":150},[47,3417,3418],{"class":205},"\"VNodeTree\"",[47,3420,3421],{"class":150}," />\n",[47,3423,3424,3427,3429],{"class":49,"line":62},[47,3425,3426],{"class":150},"\u003C/",[47,3428,3399],{"class":167},[47,3430,3402],{"class":150},[47,3432,3433],{"class":49,"line":68},[47,3434,185],{"emptyLinePlaceholder":184},[47,3436,3437,3439,3442,3445],{"class":49,"line":74},[47,3438,608],{"class":150},[47,3440,3441],{"class":167},"script",[47,3443,3444],{"class":744}," setup",[47,3446,3402],{"class":150},[47,3448,3449,3451,3453,3456,3458,3460,3462,3465,3467,3470,3472,3474],{"class":49,"line":80},[47,3450,2308],{"class":134},[47,3452,229],{"class":150},[47,3454,3455],{"class":167},"computed",[47,3457,373],{"class":150},[47,3459,3084],{"class":167},[47,3461,373],{"class":150},[47,3463,3464],{"class":167},"shallowRef",[47,3466,373],{"class":150},[47,3468,3469],{"class":167},"watchEffect",[47,3471,317],{"class":150},[47,3473,2317],{"class":134},[47,3475,3476],{"class":205}," 'vue'\n",[47,3478,3479,3481,3483,3485,3487,3489],{"class":49,"line":86},[47,3480,2308],{"class":134},[47,3482,229],{"class":150},[47,3484,2081],{"class":167},[47,3486,317],{"class":150},[47,3488,2317],{"class":134},[47,3490,2320],{"class":205},[47,3492,3493,3495,3497,3499],{"class":49,"line":92},[47,3494,2308],{"class":134},[47,3496,2327],{"class":167},[47,3498,2330],{"class":134},[47,3500,2333],{"class":205},[47,3502,3503],{"class":49,"line":98},[47,3504,185],{"emptyLinePlaceholder":184},[47,3506,3507,3509,3512,3514,3517],{"class":49,"line":617},[47,3508,135],{"class":134},[47,3510,3511],{"class":138}," props",[47,3513,143],{"class":142},[47,3515,3516],{"class":146}," defineProps",[47,3518,3519],{"class":150},"({\n",[47,3521,3522,3525,3527],{"class":49,"line":622},[47,3523,3524],{"class":167},"  mdText",[47,3526,226],{"class":225},[47,3528,641],{"class":150},[47,3530,3531,3534,3536,3539],{"class":49,"line":644},[47,3532,3533],{"class":167},"    type",[47,3535,226],{"class":225},[47,3537,3538],{"class":236}," String",[47,3540,2490],{"class":150},[47,3542,3543,3545,3547],{"class":49,"line":671},[47,3544,3322],{"class":167},[47,3546,226],{"class":225},[47,3548,3549],{"class":205}," ''\n",[47,3551,3552],{"class":49,"line":697},[47,3553,3369],{"class":150},[47,3555,3556],{"class":49,"line":738},[47,3557,756],{"class":150},[47,3559,3560],{"class":49,"line":748},[47,3561,185],{"emptyLinePlaceholder":184},[47,3563,3564,3566,3568,3570,3573,3575,3577],{"class":49,"line":753},[47,3565,135],{"class":134},[47,3567,2404],{"class":138},[47,3569,143],{"class":142},[47,3571,3572],{"class":146}," shallowRef",[47,3574,151],{"class":150},[47,3576,2454],{"class":744},[47,3578,179],{"class":150},[47,3580,3581,3583,3586,3588,3590,3592,3594,3596,3598],{"class":49,"line":2622},[47,3582,135],{"class":134},[47,3584,3585],{"class":138}," parser",[47,3587,143],{"class":142},[47,3589,2290],{"class":146},[47,3591,2378],{"class":150},[47,3593,2381],{"class":146},[47,3595,151],{"class":150},[47,3597,2386],{"class":236},[47,3599,179],{"class":150},[47,3601,3602],{"class":49,"line":2629},[47,3603,185],{"emptyLinePlaceholder":184},[47,3605,3606,3608,3610,3612],{"class":49,"line":2634},[47,3607,3469],{"class":146},[47,3609,635],{"class":150},[47,3611,638],{"class":134},[47,3613,641],{"class":150},[47,3615,3616,3619,3621,3623,3625,3627,3629,3631,3633,3636,3638,3641],{"class":49,"line":2645},[47,3617,3618],{"class":154},"  ast",[47,3620,158],{"class":150},[47,3622,654],{"class":167},[47,3624,143],{"class":142},[47,3626,3585],{"class":154},[47,3628,158],{"class":150},[47,3630,2413],{"class":146},[47,3632,151],{"class":150},[47,3634,3635],{"class":154},"props",[47,3637,158],{"class":150},[47,3639,3640],{"class":167},"mdText",[47,3642,179],{"class":150},[47,3644,3645],{"class":49,"line":2657},[47,3646,756],{"class":150},[47,3648,3649],{"class":49,"line":2668},[47,3650,185],{"emptyLinePlaceholder":184},[47,3652,3653],{"class":49,"line":2673},[47,3654,3655],{"class":242},"// AST 渲染函数 (同上文 renderAst 函数)\n",[47,3657,3658,3660,3662,3664,3666,3669,3671],{"class":49,"line":2678},[47,3659,2752],{"class":134},[47,3661,2755],{"class":146},[47,3663,151],{"class":150},[47,3665,2760],{"class":664},[47,3667,3668],{"class":150},") { ",[47,3670,2575],{"class":225},[47,3672,2578],{"class":150},[47,3674,3675],{"class":49,"line":2689},[47,3676,185],{"emptyLinePlaceholder":184},[47,3678,3679,3681,3684,3686,3688,3690,3692,3694,3696,3698,3700,3702],{"class":49,"line":2695},[47,3680,135],{"class":134},[47,3682,3683],{"class":138}," VNodeTree",[47,3685,143],{"class":142},[47,3687,632],{"class":146},[47,3689,635],{"class":150},[47,3691,638],{"class":134},[47,3693,2755],{"class":146},[47,3695,151],{"class":150},[47,3697,2449],{"class":154},[47,3699,158],{"class":150},[47,3701,654],{"class":167},[47,3703,735],{"class":150},[47,3705,3706],{"class":49,"line":2701},[47,3707,185],{"emptyLinePlaceholder":184},[47,3709,3710,3712,3714],{"class":49,"line":2713},[47,3711,3426],{"class":150},[47,3713,3441],{"class":167},[47,3715,3402],{"class":150},[17,3717,3718],{},"现在就可以像使用普通组件一样使用它了：",[38,3720,3722],{"className":3388,"code":3721,"language":3390,"meta":43,"style":43},"\u003Ctemplate>\n  \u003CMarkdownRenderer :mdText=\"markdownContent\" />\n\u003C/template>\n\n\u003Cscript setup>\nimport { ref } from 'vue'\nimport MarkdownRenderer from './MarkdownRenderer.vue'\n\nconst markdownContent = ref('# Hello Vue\\n\\nThis is rendered via AST!')\n\u003C/script>\n",[30,3723,3724,3732,3749,3757,3761,3771,3786,3798,3802,3825],{"__ignoreMap":43},[47,3725,3726,3728,3730],{"class":49,"line":50},[47,3727,608],{"class":150},[47,3729,3399],{"class":167},[47,3731,3402],{"class":150},[47,3733,3734,3736,3739,3742,3744,3747],{"class":49,"line":56},[47,3735,3407],{"class":150},[47,3737,3738],{"class":167},"MarkdownRenderer",[47,3740,3741],{"class":744}," :mdText",[47,3743,320],{"class":150},[47,3745,3746],{"class":205},"\"markdownContent\"",[47,3748,3421],{"class":150},[47,3750,3751,3753,3755],{"class":49,"line":62},[47,3752,3426],{"class":150},[47,3754,3399],{"class":167},[47,3756,3402],{"class":150},[47,3758,3759],{"class":49,"line":68},[47,3760,185],{"emptyLinePlaceholder":184},[47,3762,3763,3765,3767,3769],{"class":49,"line":74},[47,3764,608],{"class":150},[47,3766,3441],{"class":167},[47,3768,3444],{"class":744},[47,3770,3402],{"class":150},[47,3772,3773,3775,3777,3780,3782,3784],{"class":49,"line":80},[47,3774,2308],{"class":134},[47,3776,229],{"class":150},[47,3778,3779],{"class":167},"ref",[47,3781,317],{"class":150},[47,3783,2317],{"class":134},[47,3785,3476],{"class":205},[47,3787,3788,3790,3793,3795],{"class":49,"line":86},[47,3789,2308],{"class":134},[47,3791,3792],{"class":167}," MarkdownRenderer",[47,3794,2330],{"class":134},[47,3796,3797],{"class":205}," './MarkdownRenderer.vue'\n",[47,3799,3800],{"class":49,"line":92},[47,3801,185],{"emptyLinePlaceholder":184},[47,3803,3804,3806,3808,3810,3813,3815,3818,3820,3823],{"class":49,"line":98},[47,3805,135],{"class":134},[47,3807,2344],{"class":138},[47,3809,143],{"class":142},[47,3811,3812],{"class":146}," ref",[47,3814,151],{"class":150},[47,3816,3817],{"class":205},"'# Hello Vue",[47,3819,2352],{"class":142},[47,3821,3822],{"class":205},"This is rendered via AST!'",[47,3824,179],{"class":150},[47,3826,3827,3829,3831],{"class":49,"line":617},[47,3828,3426],{"class":150},[47,3830,3441],{"class":167},[47,3832,3402],{"class":150},[109,3834,3836],{"id":3835},"ast-方案的巨大优势","AST 方案的巨大优势",[17,3838,3839],{},"切换到 AST 赛道后，我们获得了前所未有的超能力：",[1215,3841,3842,3854,3926,3939],{},[1024,3843,3844,3847,3848,3850,3851,3853],{},[21,3845,3846],{},"原生集成，性能卓越","：我们不再需要 ",[30,3849,2102],{}," 的暴力刷新，也不再需要 ",[30,3852,2090],{}," 这样的“外援”。所有更新都交由 Vue 自己的 Diff 算法处理，这不仅性能极高，而且完全符合 Vue 的设计哲学，是真正的“自己人”。",[1024,3855,3856,3859,3860],{},[21,3857,3858],{},"高度灵活性与可扩展性","：AST 作为可编程的 JavaScript 对象，为定制化处理提供了坚实基础：\n",[1021,3861,3862,3883,3905],{},[1024,3863,3864,3867,3868,3871,3872,3875,3876,3878,3879,3882],{},[21,3865,3866],{},"元素替换","：可将原生元素（如 ",[30,3869,3870],{},"\u003Ch2>","）无缝替换为自定义 Vue 组件（如 ",[30,3873,3874],{},"\u003CFancyHeading>","），仅在 ",[30,3877,2843],{}," 函数中调整对应 ",[30,3880,3881],{},"case"," 逻辑即可。",[1024,3884,3885,3888,3889,3892,3893,3896,3897,3900,3901,3904],{},[21,3886,3887],{},"逻辑注入","：可便捷地为外部链接 ",[30,3890,3891],{},"\u003Ca>"," 添加 ",[30,3894,3895],{},"target=\"_blank\""," 与 ",[30,3898,3899],{},"rel=\"noopener noreferrer\""," 属性，或为图片 ",[30,3902,3903],{},"\u003Cimg>"," 包裹懒加载组件，此类操作在 AST 层面易于实现。",[1024,3906,3907,3910,3911,3913,3914,3917,3918,3921,3922,3925],{},[21,3908,3909],{},"生态集成","：充分利用 ",[30,3912,2081],{}," 丰富的插件生态（如 ",[30,3915,3916],{},"remark-gfm"," 支持 GFM 语法，",[30,3919,3920],{},"remark-prism"," 实现代码高亮），仅需在处理器链中引入相应插件（",[30,3923,3924],{},".use(pluginName)","）。",[1024,3927,3928,3931,3932,3935,3936,3938],{},[21,3929,3930],{},"关注点分离","：解析逻辑（",[30,3933,3934],{},"remark","）、渲染逻辑（",[30,3937,2843],{},"）和业务逻辑（Vue 组件）被清晰地分离开来，代码结构更清晰，维护性更强。",[1024,3940,3941,3944],{},[21,3942,3943],{},"类型安全与可预测性","：相较于操作字符串或原始 HTML，基于结构化 AST 的渲染逻辑更易于进行类型校验与逻辑推理。",[109,3946,3948],{"id":3947},"结论从功能实现到架构优化的演进","结论：从功能实现到架构优化的演进",[17,3950,3951],{},"回顾优化历程：",[1021,3953,3954,3959,3965,3970],{},[1024,3955,3956,3958],{},[21,3957,2102],{},"：实现简单，但存在性能与安全性隐患。",[1024,3960,3961,3964],{},[21,3962,3963],{},"分块更新","：缓解了部分性能问题，但方案存在局限性。",[1024,3966,3967,3969],{},[21,3968,2090],{},"：有效提升了性能与用户体验，但与 Vue 核心机制存在隔阂。",[1024,3971,3972,3975],{},[21,3973,3974],{},"AST + 函数式渲染","：回归 Vue 原生范式，提供了性能、灵活性、可维护性俱佳的终极解决方案。",[17,3977,3978],{},"通过采用 AST，我们不仅解决了具体的技术挑战，更重要的是实现了思维范式的转变——从面向结果（HTML 字符串）的编程，转向面向过程与结构（AST）的编程。这使我们能够深入内容本质，从而实现对渲染流程的精确控制。",[17,3980,3981],{},"本次从“全量刷新”到“结构化渲染”的优化实践，不仅是一次性能提升的技术过程，更是一次深入理解现代前端工程化思想的系统性探索。最终实现的 Markdown 渲染方案，在性能、功能性与架构优雅性上均达到了较高水准。",[1067,3983,3984],{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sNmU0, html code.shiki .sNmU0{--shiki-default:#986801;--shiki-dark:#E5C07B}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html pre.shiki code .sz0mV, html code.shiki .sz0mV{--shiki-default:#383A42;--shiki-dark:#E06C75}html pre.shiki code .s7GmK, html code.shiki .s7GmK{--shiki-default:#383A42;--shiki-dark:#E5C07B}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sUNH4, html code.shiki .sUNH4{--shiki-default:white;--shiki-dark:#FFFFFF}html pre.shiki code .s8iYz, html code.shiki .s8iYz{--shiki-default:#383A42;--shiki-default-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic}html pre.shiki code .s2QsP, html code.shiki .s2QsP{--shiki-default:#E45649;--shiki-dark:#E5C07B}html pre.shiki code .sj4iG, html code.shiki .sj4iG{--shiki-default:#C18401;--shiki-dark:#E06C75}html pre.shiki code .s7DPa, html code.shiki .s7DPa{--shiki-default:#0184BC;--shiki-dark:#C678DD}html pre.shiki code .st7oF, html code.shiki .st7oF{--shiki-default:#0184BC;--shiki-dark:#ABB2BF}html pre.shiki code .sAOjX, html code.shiki .sAOjX{--shiki-default:#CA1243;--shiki-dark:#C678DD}html pre.shiki code .sMj0N, html code.shiki .sMj0N{--shiki-default:#50A14F;--shiki-dark:#ABB2BF}",{"title":43,"searchDepth":56,"depth":56,"links":3986},[3987,3989,3993,3994,3995,3996,3997],{"id":2086,"depth":56,"text":3988},"上回回顾：当 morphdom 遇上 Vue",{"id":2138,"depth":56,"text":2139,"children":3990},[3991,3992],{"id":2196,"depth":62,"text":2197},{"id":2224,"depth":62,"text":2225},{"id":2268,"depth":56,"text":2269},{"id":2719,"depth":56,"text":2720},{"id":3377,"depth":56,"text":3378},{"id":3835,"depth":56,"text":3836},{"id":3947,"depth":56,"text":3948},{"title":3999,"date":4000,"path":4001,"tags":4002,"body":4004},"Vue Markdown 渲染优化实战(上)：从暴力刷新、分块更新到 Morphdom 的华丽变身","2025-07-12 20:48:56","/2025/07/12/vue-markdown-render-improvement-1",[2077,2078,12,2080,4003],"HTML",{"type":14,"value":4005,"toc":5369},[4006,4009,4012,4039,4043,4046,4049,4059,4062,4265,4269,4276,4287,4299,4307,4310,4859,4863,4866,4870,4878,4884,4895,4905,4908,4911,5321,5325,5328,5334,5339,5345,5348,5354,5360,5366],[109,4007,4008],{"id":4008},"需求背景",[17,4010,4011],{},"在最近接手的 AI 需求中，需要实现一个类似 ChatGPT 的对话交互界面。其核心流程是：后端通过 SSE（Server-Sent  Events）协议，持续地将 AI 生成的 Markdown 格式文本片段推送到前端。前端负责动态接收并拼接这些 Markdown  片段，最终将拼接完成的 Markdown 文本实时渲染并显示在用户界面上。",[17,4013,4014,4015,4020,4021,4026,4027,4032,4033,4038],{},"Markdown 渲染并不是什么罕见的需求，尤其是在 LLM 相关落地产品满天飞的当下。不同于 React 生态拥有一个 14k+ star 的著名第三方库——",[804,4016,4019],{"href":4017,"rel":4018},"https://github.com/remarkjs/react-markdown",[808],"react-markdown","，Vue 这边似乎暂时还没有一个仍在活跃维护的、star 数量不低（起码得 2k+ 吧？）的 markdown 渲染库。",[804,4022,4025],{"href":4023,"rel":4024},"https://github.com/cloudacy/vue-markdown-render#readme",[808],"cloudacy/vue-markdown-render"," 最后一次发版在一年前，但截止本文写作时间只有 103 个 star；",[804,4028,4031],{"href":4029,"rel":4030},"https://github.com/miaolz123/vue-markdown",[808],"miaolz123/vue-markdown"," 有 2k star，但最后一次 commit 已经是 7 年前了；",[804,4034,4037],{"href":4035,"rel":4036},"https://github.com/zhaoxuhui1122/vue-markdown",[808],"zhaoxuhui1122/vue-markdown"," 更是 archived 状态。",[109,4040,4042],{"id":4041},"第一版方案简单粗暴的-v-html","第一版方案：简单粗暴的 v-html",[17,4044,4045],{},"简单调研了一圈，发现 Vue 生态里确实缺少一个能打的 Markdown 渲染库。既然没有现成的轮子，那咱就自己造一个！",[17,4047,4048],{},"根据大部分文章以及 LLM 的推荐，我们首先采用 markdown-it 这个第三方库将 markdown 转换为 html 字符串，再通过 v-html 传入。",[17,4050,4051,4054,4055,4058],{},[21,4052,4053],{},"PS:"," 我们这里假设 Markdown 内容是可信的（比如由我们自己的 AI 生成）。如果内容来自用户输入，一定要使用 ",[30,4056,4057],{},"DOMPurify"," 这类库来防止 XSS 攻击，避免给网站“开天窗”哦！",[17,4060,4061],{},"示例代码如下：",[38,4063,4065],{"className":3388,"code":4064,"language":3390,"meta":43,"style":43},"\u003Ctemplate>\n  \u003Cdiv v-html=\"renderedHtml\">\u003C/div>\n\u003C/template>\n\n\u003Cscript setup>\nimport { computed, onMounted, ref } from 'vue';\nimport MarkdownIt from 'markdown-it';\n\nconst markdownContent = ref('');\nconst md = new MarkdownIt();\n\nconst renderedHtml = computed(() => md.render(markdownContent.value))\n\nonMounted(() => {\n  // markdownContent.value = await fetch() ...\n})\n\u003C/script>\n",[30,4066,4067,4075,4097,4105,4109,4119,4146,4160,4164,4182,4199,4203,4234,4238,4248,4253,4257],{"__ignoreMap":43},[47,4068,4069,4071,4073],{"class":49,"line":50},[47,4070,608],{"class":150},[47,4072,3399],{"class":167},[47,4074,3402],{"class":150},[47,4076,4077,4079,4082,4085,4087,4090,4093,4095],{"class":49,"line":56},[47,4078,3407],{"class":150},[47,4080,4081],{"class":167},"div",[47,4083,4084],{"class":744}," v-html",[47,4086,320],{"class":150},[47,4088,4089],{"class":205},"\"renderedHtml\"",[47,4091,4092],{"class":150},">\u003C/",[47,4094,4081],{"class":167},[47,4096,3402],{"class":150},[47,4098,4099,4101,4103],{"class":49,"line":62},[47,4100,3426],{"class":150},[47,4102,3399],{"class":167},[47,4104,3402],{"class":150},[47,4106,4107],{"class":49,"line":68},[47,4108,185],{"emptyLinePlaceholder":184},[47,4110,4111,4113,4115,4117],{"class":49,"line":74},[47,4112,608],{"class":150},[47,4114,3441],{"class":167},[47,4116,3444],{"class":744},[47,4118,3402],{"class":150},[47,4120,4121,4123,4125,4127,4129,4132,4134,4136,4138,4140,4143],{"class":49,"line":80},[47,4122,2308],{"class":134},[47,4124,229],{"class":150},[47,4126,3455],{"class":167},[47,4128,373],{"class":150},[47,4130,4131],{"class":167},"onMounted",[47,4133,373],{"class":150},[47,4135,3779],{"class":167},[47,4137,317],{"class":150},[47,4139,2317],{"class":134},[47,4141,4142],{"class":205}," 'vue'",[47,4144,4145],{"class":150},";\n",[47,4147,4148,4150,4153,4155,4158],{"class":49,"line":86},[47,4149,2308],{"class":134},[47,4151,4152],{"class":167}," MarkdownIt",[47,4154,2330],{"class":134},[47,4156,4157],{"class":205}," 'markdown-it'",[47,4159,4145],{"class":150},[47,4161,4162],{"class":49,"line":92},[47,4163,185],{"emptyLinePlaceholder":184},[47,4165,4166,4168,4170,4172,4174,4176,4179],{"class":49,"line":98},[47,4167,135],{"class":134},[47,4169,2344],{"class":138},[47,4171,143],{"class":142},[47,4173,3812],{"class":146},[47,4175,151],{"class":150},[47,4177,4178],{"class":205},"''",[47,4180,4181],{"class":150},");\n",[47,4183,4184,4186,4189,4191,4194,4196],{"class":49,"line":617},[47,4185,135],{"class":134},[47,4187,4188],{"class":138}," md",[47,4190,143],{"class":142},[47,4192,4193],{"class":134}," new",[47,4195,4152],{"class":146},[47,4197,4198],{"class":150},"();\n",[47,4200,4201],{"class":49,"line":622},[47,4202,185],{"emptyLinePlaceholder":184},[47,4204,4205,4207,4210,4212,4214,4216,4218,4220,4222,4224,4226,4228,4230,4232],{"class":49,"line":644},[47,4206,135],{"class":134},[47,4208,4209],{"class":138}," renderedHtml",[47,4211,143],{"class":142},[47,4213,632],{"class":146},[47,4215,635],{"class":150},[47,4217,638],{"class":134},[47,4219,4188],{"class":154},[47,4221,158],{"class":150},[47,4223,3384],{"class":146},[47,4225,151],{"class":150},[47,4227,2418],{"class":154},[47,4229,158],{"class":150},[47,4231,654],{"class":167},[47,4233,735],{"class":150},[47,4235,4236],{"class":49,"line":671},[47,4237,185],{"emptyLinePlaceholder":184},[47,4239,4240,4242,4244,4246],{"class":49,"line":697},[47,4241,4131],{"class":146},[47,4243,635],{"class":150},[47,4245,638],{"class":134},[47,4247,641],{"class":150},[47,4249,4250],{"class":49,"line":738},[47,4251,4252],{"class":242},"  // markdownContent.value = await fetch() ...\n",[47,4254,4255],{"class":49,"line":748},[47,4256,756],{"class":150},[47,4258,4259,4261,4263],{"class":49,"line":753},[47,4260,3426],{"class":150},[47,4262,3441],{"class":167},[47,4264,3402],{"class":150},[109,4266,4268],{"id":4267},"进化版给-markdown-分块更新","进化版：给 Markdown 分块更新",[17,4270,4271,4272,4275],{},"上述方案虽然能实现基础渲染，但在实时更新场景下存在明显缺陷：",[21,4273,4274],{},"每次接收到新的 Markdown 片段，整个文档都会触发全量重渲染","。即使只有最后一行是新增内容，整个文档的 DOM 也会被完全替换。这导致两个核心问题：",[1215,4277,4278,4284],{},[1024,4279,4280,4281,4283],{},"**性能顶不住：**Markdown 内容增长时，",[30,4282,2156],{}," 解析和 DOM 重建的开销呈线性上升。",[1024,4285,4286],{},"**交互状态丢失：**全量刷新会把用户当前的操作状态冲掉。最明显的就是，如果你选中了某段文字，一刷新，选中状态就没了！",[17,4288,4289,4290,4295,4296,4298],{},"为了解决这两个问题，",[804,4291,4294],{"href":4292,"rel":4293},"https://juejin.cn/post/7480900772386734143",[808],"我们在网上找到了分块渲染的方案"," —— 把 Markdown 按两个连续的换行符 (",[30,4297,2352],{},") 切成一块一块的。这样每次更新，只重新渲染最后一块新的，前面的老块直接复用缓存。好处很明显：",[1021,4300,4301,4304],{},[1024,4302,4303],{},"用户如果选中了前面块里的文字，下次更新时选中状态不会丢（因为前面的块没动）。",[1024,4305,4306],{},"需要重新渲染的 DOM 变少了，性能自然就上来了。",[17,4308,4309],{},"代码调整后像这样：",[38,4311,4313],{"className":3388,"code":4312,"language":3390,"meta":43,"style":43},"\u003Ctemplate>\n  \u003Cdiv>\n    \u003Cdiv\n      v-for=\"(block, idx) in renderedBlocks\"\n      :key=\"idx\"\n      v-html=\"block\"\n      class=\"markdown-block\"\n    >\u003C/div>\n  \u003C/div>\n\u003C/template>\n\n\u003Cscript setup>\nimport { ref, computed, watch } from 'vue'\nimport MarkdownIt from 'markdown-it'\n\nconst markdownContent = ref('')\nconst md = new MarkdownIt()\n\nconst renderedBlocks = ref([])\nconst blockCache = ref([])\n\nwatch(\n  markdownContent,\n  (newContent, oldContent) => {\n    const blocks = newContent.split(/\\n{2,}/)\n    // 只重新渲染最后一个块，其余用缓存\n    // 处理块减少、块增多的场景\n    blockCache.value.length = blocks.length\n    for (let i = 0; i \u003C blocks.length; i++) {\n      // 只渲染最后一个，或新块\n      if (i === blocks.length - 1 || !blockCache.value[i]) {\n        blockCache.value[i] = md.render(blocks[i] || '')\n      }\n      // 其余块直接复用\n    }\n    renderedBlocks.value = blockCache.value.slice()\n  },\n  { immediate: true }\n)\n\nonMounted(() => {\n  // markdownContent.value = await fetch() ...\n})\n\u003C/script>\n",[30,4314,4315,4323,4331,4339,4349,4359,4369,4379,4388,4397,4405,4409,4419,4442,4453,4457,4473,4487,4491,4505,4518,4522,4529,4536,4555,4590,4595,4600,4623,4665,4670,4714,4757,4762,4767,4772,4797,4803,4819,4824,4829,4840,4845,4850],{"__ignoreMap":43},[47,4316,4317,4319,4321],{"class":49,"line":50},[47,4318,608],{"class":150},[47,4320,3399],{"class":167},[47,4322,3402],{"class":150},[47,4324,4325,4327,4329],{"class":49,"line":56},[47,4326,3407],{"class":150},[47,4328,4081],{"class":167},[47,4330,3402],{"class":150},[47,4332,4333,4336],{"class":49,"line":62},[47,4334,4335],{"class":150},"    \u003C",[47,4337,4338],{"class":167},"div\n",[47,4340,4341,4344,4346],{"class":49,"line":68},[47,4342,4343],{"class":744},"      v-for",[47,4345,320],{"class":150},[47,4347,4348],{"class":205},"\"(block, idx) in renderedBlocks\"\n",[47,4350,4351,4354,4356],{"class":49,"line":74},[47,4352,4353],{"class":744},"      :key",[47,4355,320],{"class":150},[47,4357,4358],{"class":205},"\"idx\"\n",[47,4360,4361,4364,4366],{"class":49,"line":80},[47,4362,4363],{"class":744},"      v-html",[47,4365,320],{"class":150},[47,4367,4368],{"class":205},"\"block\"\n",[47,4370,4371,4374,4376],{"class":49,"line":86},[47,4372,4373],{"class":744},"      class",[47,4375,320],{"class":150},[47,4377,4378],{"class":205},"\"markdown-block\"\n",[47,4380,4381,4384,4386],{"class":49,"line":92},[47,4382,4383],{"class":150},"    >\u003C/",[47,4385,4081],{"class":167},[47,4387,3402],{"class":150},[47,4389,4390,4393,4395],{"class":49,"line":98},[47,4391,4392],{"class":150},"  \u003C/",[47,4394,4081],{"class":167},[47,4396,3402],{"class":150},[47,4398,4399,4401,4403],{"class":49,"line":617},[47,4400,3426],{"class":150},[47,4402,3399],{"class":167},[47,4404,3402],{"class":150},[47,4406,4407],{"class":49,"line":622},[47,4408,185],{"emptyLinePlaceholder":184},[47,4410,4411,4413,4415,4417],{"class":49,"line":644},[47,4412,608],{"class":150},[47,4414,3441],{"class":167},[47,4416,3444],{"class":744},[47,4418,3402],{"class":150},[47,4420,4421,4423,4425,4427,4429,4431,4433,4436,4438,4440],{"class":49,"line":671},[47,4422,2308],{"class":134},[47,4424,229],{"class":150},[47,4426,3779],{"class":167},[47,4428,373],{"class":150},[47,4430,3455],{"class":167},[47,4432,373],{"class":150},[47,4434,4435],{"class":167},"watch",[47,4437,317],{"class":150},[47,4439,2317],{"class":134},[47,4441,3476],{"class":205},[47,4443,4444,4446,4448,4450],{"class":49,"line":697},[47,4445,2308],{"class":134},[47,4447,4152],{"class":167},[47,4449,2330],{"class":134},[47,4451,4452],{"class":205}," 'markdown-it'\n",[47,4454,4455],{"class":49,"line":738},[47,4456,185],{"emptyLinePlaceholder":184},[47,4458,4459,4461,4463,4465,4467,4469,4471],{"class":49,"line":748},[47,4460,135],{"class":134},[47,4462,2344],{"class":138},[47,4464,143],{"class":142},[47,4466,3812],{"class":146},[47,4468,151],{"class":150},[47,4470,4178],{"class":205},[47,4472,179],{"class":150},[47,4474,4475,4477,4479,4481,4483,4485],{"class":49,"line":753},[47,4476,135],{"class":134},[47,4478,4188],{"class":138},[47,4480,143],{"class":142},[47,4482,4193],{"class":134},[47,4484,4152],{"class":146},[47,4486,253],{"class":150},[47,4488,4489],{"class":49,"line":2622},[47,4490,185],{"emptyLinePlaceholder":184},[47,4492,4493,4495,4498,4500,4502],{"class":49,"line":2629},[47,4494,135],{"class":134},[47,4496,4497],{"class":138}," renderedBlocks",[47,4499,143],{"class":142},[47,4501,3812],{"class":146},[47,4503,4504],{"class":150},"([])\n",[47,4506,4507,4509,4512,4514,4516],{"class":49,"line":2634},[47,4508,135],{"class":134},[47,4510,4511],{"class":138}," blockCache",[47,4513,143],{"class":142},[47,4515,3812],{"class":146},[47,4517,4504],{"class":150},[47,4519,4520],{"class":49,"line":2645},[47,4521,185],{"emptyLinePlaceholder":184},[47,4523,4524,4526],{"class":49,"line":2657},[47,4525,4435],{"class":146},[47,4527,4528],{"class":150},"(\n",[47,4530,4531,4534],{"class":49,"line":2668},[47,4532,4533],{"class":236},"  markdownContent",[47,4535,2490],{"class":150},[47,4537,4538,4541,4544,4546,4549,4551,4553],{"class":49,"line":2673},[47,4539,4540],{"class":150},"  (",[47,4542,4543],{"class":664},"newContent",[47,4545,373],{"class":150},[47,4547,4548],{"class":664},"oldContent",[47,4550,2779],{"class":150},[47,4552,638],{"class":134},[47,4554,641],{"class":150},[47,4556,4557,4560,4563,4565,4568,4570,4573,4575,4578,4582,4586,4588],{"class":49,"line":2678},[47,4558,4559],{"class":134},"    const",[47,4561,4562],{"class":138}," blocks",[47,4564,143],{"class":142},[47,4566,4567],{"class":154}," newContent",[47,4569,158],{"class":150},[47,4571,4572],{"class":146},"split",[47,4574,151],{"class":150},[47,4576,1971],{"class":4577},"sDaw7",[47,4579,4581],{"class":4580},"sRZ4U","\\n",[47,4583,4585],{"class":4584},"sYoRg","{2,}",[47,4587,1971],{"class":4577},[47,4589,179],{"class":150},[47,4591,4592],{"class":49,"line":2689},[47,4593,4594],{"class":242},"    // 只重新渲染最后一个块，其余用缓存\n",[47,4596,4597],{"class":49,"line":2695},[47,4598,4599],{"class":242},"    // 处理块减少、块增多的场景\n",[47,4601,4602,4605,4607,4609,4611,4614,4616,4618,4620],{"class":49,"line":2701},[47,4603,4604],{"class":154},"    blockCache",[47,4606,158],{"class":150},[47,4608,654],{"class":161},[47,4610,158],{"class":150},[47,4612,4613],{"class":167},"length",[47,4615,143],{"class":142},[47,4617,4562],{"class":154},[47,4619,158],{"class":150},[47,4621,4622],{"class":167},"length\n",[47,4624,4625,4628,4630,4633,4636,4638,4641,4644,4647,4650,4652,4654,4656,4658,4660,4663],{"class":49,"line":2713},[47,4626,4627],{"class":134},"    for",[47,4629,2771],{"class":150},[47,4631,4632],{"class":134},"let",[47,4634,4635],{"class":236}," i",[47,4637,143],{"class":142},[47,4639,4640],{"class":744}," 0",[47,4642,4643],{"class":150},"; ",[47,4645,4646],{"class":236},"i",[47,4648,4649],{"class":142}," \u003C",[47,4651,4562],{"class":154},[47,4653,158],{"class":150},[47,4655,4613],{"class":167},[47,4657,4643],{"class":150},[47,4659,4646],{"class":236},[47,4661,4662],{"class":142},"++",[47,4664,2763],{"class":150},[47,4666,4667],{"class":49,"line":3319},[47,4668,4669],{"class":242},"      // 只渲染最后一个，或新块\n",[47,4671,4672,4675,4677,4679,4681,4683,4685,4687,4690,4693,4696,4699,4702,4704,4706,4709,4711],{"class":49,"line":3327},[47,4673,4674],{"class":134},"      if",[47,4676,2771],{"class":150},[47,4678,4646],{"class":236},[47,4680,691],{"class":142},[47,4682,4562],{"class":154},[47,4684,158],{"class":150},[47,4686,4613],{"class":167},[47,4688,4689],{"class":142}," -",[47,4691,4692],{"class":744}," 1",[47,4694,4695],{"class":142}," ||",[47,4697,4698],{"class":142}," !",[47,4700,4701],{"class":154},"blockCache",[47,4703,158],{"class":150},[47,4705,654],{"class":167},[47,4707,4708],{"class":150},"[",[47,4710,4646],{"class":236},[47,4712,4713],{"class":150},"]) {\n",[47,4715,4716,4719,4721,4723,4725,4727,4730,4732,4734,4736,4738,4740,4743,4745,4747,4749,4752,4755],{"class":49,"line":3333},[47,4717,4718],{"class":154},"        blockCache",[47,4720,158],{"class":150},[47,4722,654],{"class":167},[47,4724,4708],{"class":150},[47,4726,4646],{"class":236},[47,4728,4729],{"class":150},"] ",[47,4731,320],{"class":142},[47,4733,4188],{"class":154},[47,4735,158],{"class":150},[47,4737,3384],{"class":146},[47,4739,151],{"class":150},[47,4741,4742],{"class":236},"blocks",[47,4744,4708],{"class":150},[47,4746,4646],{"class":236},[47,4748,4729],{"class":150},[47,4750,4751],{"class":142},"||",[47,4753,4754],{"class":205}," ''",[47,4756,179],{"class":150},[47,4758,4759],{"class":49,"line":3366},[47,4760,4761],{"class":150},"      }\n",[47,4763,4764],{"class":49,"line":3372},[47,4765,4766],{"class":242},"      // 其余块直接复用\n",[47,4768,4770],{"class":49,"line":4769},35,[47,4771,2692],{"class":150},[47,4773,4775,4778,4780,4782,4784,4786,4788,4790,4792,4795],{"class":49,"line":4774},36,[47,4776,4777],{"class":154},"    renderedBlocks",[47,4779,158],{"class":150},[47,4781,654],{"class":167},[47,4783,143],{"class":142},[47,4785,4511],{"class":154},[47,4787,158],{"class":150},[47,4789,654],{"class":161},[47,4791,158],{"class":150},[47,4793,4794],{"class":146},"slice",[47,4796,253],{"class":150},[47,4798,4800],{"class":49,"line":4799},37,[47,4801,4802],{"class":150},"  },\n",[47,4804,4806,4809,4812,4814,4817],{"class":49,"line":4805},38,[47,4807,4808],{"class":150},"  { ",[47,4810,4811],{"class":167},"immediate",[47,4813,226],{"class":225},[47,4815,4816],{"class":744}," true",[47,4818,2578],{"class":150},[47,4820,4822],{"class":49,"line":4821},39,[47,4823,179],{"class":150},[47,4825,4827],{"class":49,"line":4826},40,[47,4828,185],{"emptyLinePlaceholder":184},[47,4830,4832,4834,4836,4838],{"class":49,"line":4831},41,[47,4833,4131],{"class":146},[47,4835,635],{"class":150},[47,4837,638],{"class":134},[47,4839,641],{"class":150},[47,4841,4843],{"class":49,"line":4842},42,[47,4844,4252],{"class":242},[47,4846,4848],{"class":49,"line":4847},43,[47,4849,756],{"class":150},[47,4851,4853,4855,4857],{"class":49,"line":4852},44,[47,4854,3426],{"class":150},[47,4856,3441],{"class":167},[47,4858,3402],{"class":150},[109,4860,4862],{"id":4861},"终极武器用-morphdom-实现精准更新","终极武器：用 morphdom 实现精准更新",[17,4864,4865],{},"分块渲染虽然解决了大部分问题，但遇到 Markdown 列表就有点力不从心了。因为 Markdown 语法里，列表项之间通常只有一个换行符，整个列表会被当成一个大块。想象一下一个几百项的列表，哪怕只更新最后一项，整个列表块也要全部重来，前面的问题又回来了。",[1169,4867,4869],{"id":4868},"morphdom-是何方神圣","morphdom 是何方神圣？",[17,4871,4872,4874,4875,456],{},[30,4873,2090],{}," 是一个仅 5KB（gzip 后）的 JavaScript 库，核心功能是：",[21,4876,4877],{},"接收两个 DOM 节点（或 HTML 字符串），计算出最小化的 DOM 操作，将第一个节点 “变形” 为第二个节点，而非直接替换",[17,4879,4880,4881,1786],{},"其工作原理类似虚拟 DOM 的 Diff 算法，但",[21,4882,4883],{},"直接操作真实 DOM",[1215,4885,4886,4889,4892],{},[1024,4887,4888],{},"对比新旧 DOM 的标签名、属性、文本内容等；",[1024,4890,4891],{},"仅对差异部分执行增 / 删 / 改操作（如修改文本、更新属性、移动节点位置）；",[1024,4893,4894],{},"未变化的 DOM 节点会被完整保留，包括其事件监听、滚动位置、选中状态等。",[17,4896,4897,4898,4901,4902,4904],{},"Markdown 把列表当整体，但生成的 HTML 里，每个列表项 (",[30,4899,4900],{},"\u003Cli>",") 都是独立的！",[30,4903,2090],{}," 在更新后面的列表项时，能保证前面的列表项纹丝不动，状态自然就保住了。",[17,4906,4907],{},"这不就是我们梦寐以求的效果吗？在 Markdown 实时更新的同时，最大程度留住用户的操作状态，还能省掉一堆不必要的 DOM 操作！",[1169,4909,4910],{"id":4910},"示例代码",[38,4912,4914],{"className":3388,"code":4913,"language":3390,"meta":43,"style":43},"\u003Ctemplate>\n  \u003Cdiv ref=\"markdownContainer\" class=\"markdown-container\">\n    \u003Cdiv id=\"md-root\">\u003C/div>\n  \u003C/div>\n\u003C/template>\n\n\u003Cscript setup>\nimport { nextTick, ref, watch } from 'vue';\nimport MarkdownIt from 'markdown-it';\nimport morphdom from 'morphdom';\n\nconst markdownContent = ref('');\nconst markdownContainer = ref(null);\nconst md = new MarkdownIt();\n    \nconst render = () => {\n  if (!markdownContainer.value.querySelector('#md-root')) return;\n  \n  const newHtml = `\u003Cdiv id=\"md-root\">` + md.render(markdownContent.value) + `\u003C/div>`\n\n  morphdom(markdownContainer.value, newHtml, {\n    childrenOnly: true\n  });\n}\n\nwatch(markdownContent, () => {\n    render()\n});\n    \nonMounted(async () => {\n  // 等待 Dom 被挂载上\n  await nextTick()\n  render()\n})\n\u003C/script>\n\n",[30,4915,4916,4924,4947,4967,4975,4983,4987,4997,5022,5034,5048,5052,5068,5085,5099,5104,5120,5152,5157,5194,5198,5219,5229,5234,5238,5242,5256,5263,5268,5272,5287,5292,5302,5309,5313],{"__ignoreMap":43},[47,4917,4918,4920,4922],{"class":49,"line":50},[47,4919,608],{"class":150},[47,4921,3399],{"class":167},[47,4923,3402],{"class":150},[47,4925,4926,4928,4930,4932,4934,4937,4940,4942,4945],{"class":49,"line":56},[47,4927,3407],{"class":150},[47,4929,4081],{"class":167},[47,4931,3812],{"class":744},[47,4933,320],{"class":150},[47,4935,4936],{"class":205},"\"markdownContainer\"",[47,4938,4939],{"class":744}," class",[47,4941,320],{"class":150},[47,4943,4944],{"class":205},"\"markdown-container\"",[47,4946,3402],{"class":150},[47,4948,4949,4951,4953,4956,4958,4961,4963,4965],{"class":49,"line":62},[47,4950,4335],{"class":150},[47,4952,4081],{"class":167},[47,4954,4955],{"class":744}," id",[47,4957,320],{"class":150},[47,4959,4960],{"class":205},"\"md-root\"",[47,4962,4092],{"class":150},[47,4964,4081],{"class":167},[47,4966,3402],{"class":150},[47,4968,4969,4971,4973],{"class":49,"line":68},[47,4970,4392],{"class":150},[47,4972,4081],{"class":167},[47,4974,3402],{"class":150},[47,4976,4977,4979,4981],{"class":49,"line":74},[47,4978,3426],{"class":150},[47,4980,3399],{"class":167},[47,4982,3402],{"class":150},[47,4984,4985],{"class":49,"line":80},[47,4986,185],{"emptyLinePlaceholder":184},[47,4988,4989,4991,4993,4995],{"class":49,"line":86},[47,4990,608],{"class":150},[47,4992,3441],{"class":167},[47,4994,3444],{"class":744},[47,4996,3402],{"class":150},[47,4998,4999,5001,5003,5006,5008,5010,5012,5014,5016,5018,5020],{"class":49,"line":92},[47,5000,2308],{"class":134},[47,5002,229],{"class":150},[47,5004,5005],{"class":167},"nextTick",[47,5007,373],{"class":150},[47,5009,3779],{"class":167},[47,5011,373],{"class":150},[47,5013,4435],{"class":167},[47,5015,317],{"class":150},[47,5017,2317],{"class":134},[47,5019,4142],{"class":205},[47,5021,4145],{"class":150},[47,5023,5024,5026,5028,5030,5032],{"class":49,"line":98},[47,5025,2308],{"class":134},[47,5027,4152],{"class":167},[47,5029,2330],{"class":134},[47,5031,4157],{"class":205},[47,5033,4145],{"class":150},[47,5035,5036,5038,5041,5043,5046],{"class":49,"line":617},[47,5037,2308],{"class":134},[47,5039,5040],{"class":167}," morphdom",[47,5042,2330],{"class":134},[47,5044,5045],{"class":205}," 'morphdom'",[47,5047,4145],{"class":150},[47,5049,5050],{"class":49,"line":622},[47,5051,185],{"emptyLinePlaceholder":184},[47,5053,5054,5056,5058,5060,5062,5064,5066],{"class":49,"line":644},[47,5055,135],{"class":134},[47,5057,2344],{"class":138},[47,5059,143],{"class":142},[47,5061,3812],{"class":146},[47,5063,151],{"class":150},[47,5065,4178],{"class":205},[47,5067,4181],{"class":150},[47,5069,5070,5072,5075,5077,5079,5081,5083],{"class":49,"line":671},[47,5071,135],{"class":134},[47,5073,5074],{"class":138}," markdownContainer",[47,5076,143],{"class":142},[47,5078,3812],{"class":146},[47,5080,151],{"class":150},[47,5082,2454],{"class":744},[47,5084,4181],{"class":150},[47,5086,5087,5089,5091,5093,5095,5097],{"class":49,"line":697},[47,5088,135],{"class":134},[47,5090,4188],{"class":138},[47,5092,143],{"class":142},[47,5094,4193],{"class":134},[47,5096,4152],{"class":146},[47,5098,4198],{"class":150},[47,5100,5101],{"class":49,"line":738},[47,5102,5103],{"class":150},"    \n",[47,5105,5106,5108,5111,5113,5116,5118],{"class":49,"line":748},[47,5107,135],{"class":134},[47,5109,5110],{"class":146}," render",[47,5112,143],{"class":142},[47,5114,5115],{"class":150}," () ",[47,5117,638],{"class":134},[47,5119,641],{"class":150},[47,5121,5122,5124,5126,5128,5131,5133,5135,5137,5140,5142,5145,5148,5150],{"class":49,"line":753},[47,5123,2768],{"class":134},[47,5125,2771],{"class":150},[47,5127,2774],{"class":142},[47,5129,5130],{"class":154},"markdownContainer",[47,5132,158],{"class":150},[47,5134,654],{"class":161},[47,5136,158],{"class":150},[47,5138,5139],{"class":146},"querySelector",[47,5141,151],{"class":150},[47,5143,5144],{"class":205},"'#md-root'",[47,5146,5147],{"class":150},")) ",[47,5149,2782],{"class":134},[47,5151,4145],{"class":150},[47,5153,5154],{"class":49,"line":2622},[47,5155,5156],{"class":150},"  \n",[47,5158,5159,5162,5165,5167,5170,5172,5174,5176,5178,5180,5182,5184,5186,5188,5191],{"class":49,"line":2629},[47,5160,5161],{"class":134},"  const",[47,5163,5164],{"class":138}," newHtml",[47,5166,143],{"class":142},[47,5168,5169],{"class":205}," `\u003Cdiv id=\"md-root\">`",[47,5171,3033],{"class":142},[47,5173,4188],{"class":154},[47,5175,158],{"class":150},[47,5177,3384],{"class":146},[47,5179,151],{"class":150},[47,5181,2418],{"class":154},[47,5183,158],{"class":150},[47,5185,654],{"class":167},[47,5187,2779],{"class":150},[47,5189,5190],{"class":142},"+",[47,5192,5193],{"class":205}," `\u003C/div>`\n",[47,5195,5196],{"class":49,"line":2634},[47,5197,185],{"emptyLinePlaceholder":184},[47,5199,5200,5203,5205,5207,5209,5211,5213,5216],{"class":49,"line":2645},[47,5201,5202],{"class":146},"  morphdom",[47,5204,151],{"class":150},[47,5206,5130],{"class":154},[47,5208,158],{"class":150},[47,5210,654],{"class":167},[47,5212,373],{"class":150},[47,5214,5215],{"class":236},"newHtml",[47,5217,5218],{"class":150},", {\n",[47,5220,5221,5224,5226],{"class":49,"line":2657},[47,5222,5223],{"class":167},"    childrenOnly",[47,5225,226],{"class":225},[47,5227,5228],{"class":744}," true\n",[47,5230,5231],{"class":49,"line":2668},[47,5232,5233],{"class":150},"  });\n",[47,5235,5236],{"class":49,"line":2673},[47,5237,2716],{"class":150},[47,5239,5240],{"class":49,"line":2678},[47,5241,185],{"emptyLinePlaceholder":184},[47,5243,5244,5246,5248,5250,5252,5254],{"class":49,"line":2689},[47,5245,4435],{"class":146},[47,5247,151],{"class":150},[47,5249,2418],{"class":236},[47,5251,345],{"class":150},[47,5253,638],{"class":134},[47,5255,641],{"class":150},[47,5257,5258,5261],{"class":49,"line":2695},[47,5259,5260],{"class":146},"    render",[47,5262,253],{"class":150},[47,5264,5265],{"class":49,"line":2701},[47,5266,5267],{"class":150},"});\n",[47,5269,5270],{"class":49,"line":2713},[47,5271,5103],{"class":150},[47,5273,5274,5276,5278,5281,5283,5285],{"class":49,"line":3319},[47,5275,4131],{"class":146},[47,5277,151],{"class":150},[47,5279,5280],{"class":134},"async",[47,5282,5115],{"class":150},[47,5284,638],{"class":134},[47,5286,641],{"class":150},[47,5288,5289],{"class":49,"line":3327},[47,5290,5291],{"class":242},"  // 等待 Dom 被挂载上\n",[47,5293,5294,5297,5300],{"class":49,"line":3333},[47,5295,5296],{"class":134},"  await",[47,5298,5299],{"class":146}," nextTick",[47,5301,253],{"class":150},[47,5303,5304,5307],{"class":49,"line":3366},[47,5305,5306],{"class":146},"  render",[47,5308,253],{"class":150},[47,5310,5311],{"class":49,"line":3372},[47,5312,756],{"class":150},[47,5314,5315,5317,5319],{"class":49,"line":4769},[47,5316,3426],{"class":150},[47,5318,3441],{"class":167},[47,5320,3402],{"class":150},[1169,5322,5324],{"id":5323},"眼见为实demo-对比","眼见为实：Demo 对比",[17,5326,5327],{},"下面这个 iframe 里放了个对比 Demo，展示了不同方案的效果差异。",[17,5329,5330,5333],{},[21,5331,5332],{},"小技巧："," 如果你用的是 Chrome、Edge 这类 Chromium 内核的浏览器，打开开发者工具 (DevTools)，找到“渲染”(Rendering) 标签页，勾选「突出显示重绘区域(Paint flashing)」。这样你就能直观看到每次更新时，哪些部分被重新绘制了——重绘区域越少，性能越好！",[17,5335,5336],{},[784,5337],{"alt":43,"src":5338},"https://static.031130.xyz/uploads/2025/07/12/d5721c40fb076.webp",[5340,5341],"iframe",{"src":5342,"width":5343,"height":5344,"allowFullScreen":184},"https://static.031130.xyz/demo/morphdom-vs-markdown-chunk.html","100%",500,[109,5346,5347],{"id":5347},"阶段性成果",[17,5349,5350,5351,5353],{},"从最开始的“暴力全量刷新”，到“聪明点的分块更新”，再到如今“精准手术刀般的 ",[30,5352,2090],{}," 更新”，我们一步步把那些不必要的渲染开销给砍掉了，最终搞出了一个既快又能留住用户状态的 Markdown 实时渲染方案。",[17,5355,5356,5357,5359],{},"不过，用 ",[30,5358,2090],{}," 这个第三方库来直接操作 Vue 组件里的 DOM，总觉得有点...不够“Vue”？它虽然解决了核心的性能和状态问题，但在 Vue 的世界里这么玩，多少有点旁门左道的意思。",[17,5361,5362,5365],{},[21,5363,5364],{},"下篇预告："," 在下一篇文章里，咱们就来聊聊，在 Vue 的世界里，有没有更优雅、更“原生”的方案来搞定 Markdown 的精准更新？敬请期待！",[1067,5367,5368],{},"html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .sNmU0, html code.shiki .sNmU0{--shiki-default:#986801;--shiki-dark:#E5C07B}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .s7GmK, html code.shiki .s7GmK{--shiki-default:#383A42;--shiki-dark:#E5C07B}html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sz0mV, html code.shiki .sz0mV{--shiki-default:#383A42;--shiki-dark:#E06C75}html pre.shiki code .s8iYz, html code.shiki .s8iYz{--shiki-default:#383A42;--shiki-default-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic}html pre.shiki code .sDaw7, html code.shiki .sDaw7{--shiki-default:#0184BC;--shiki-dark:#E06C75}html pre.shiki code .sRZ4U, html code.shiki .sRZ4U{--shiki-default:#986801;--shiki-dark:#E06C75}html pre.shiki code .sYoRg, html code.shiki .sYoRg{--shiki-default:#0184BC;--shiki-dark:#D19A66}html pre.shiki code .s2QsP, html code.shiki .s2QsP{--shiki-default:#E45649;--shiki-dark:#E5C07B}html pre.shiki code .st7oF, html code.shiki .st7oF{--shiki-default:#0184BC;--shiki-dark:#ABB2BF}",{"title":43,"searchDepth":56,"depth":56,"links":5370},[5371,5372,5373,5374,5379],{"id":4008,"depth":56,"text":4008},{"id":4041,"depth":56,"text":4042},{"id":4267,"depth":56,"text":4268},{"id":4861,"depth":56,"text":4862,"children":5375},[5376,5377,5378],{"id":4868,"depth":62,"text":4869},{"id":4910,"depth":62,"text":4910},{"id":5323,"depth":62,"text":5324},{"id":5347,"depth":56,"text":5347},{"title":5381,"date":5382,"path":5383,"tags":5384,"body":5387},"node-sass 迁移至 dart-sass 踩坑实录","2025-07-05 17:57:02","/2025/07/05/node-sass-migration-to-dart-sass",[2080,2077,5385,5386,12],"Sass","CSS",{"type":14,"value":5388,"toc":6233},[5389,5392,5403,5407,5422,5425,5457,5460,5464,5467,5471,5480,5483,5492,5539,5542,5545,5548,5578,5587,5590,5594,5598,5622,5626,5740,5744,5753,5791,5795,5798,5864,5867,5871,5874,5877,5903,5906,5947,5956,5961,5965,5974,5981,6033,6036,6091,6094,6117,6120,6122,6230],[109,5390,5391],{"id":5391},"更新目标",[1021,5393,5394,5397,5400],{},[1024,5395,5396],{},"node-sass -> sass ( dart-sass )",[1024,5398,5399],{},"减少影响面，非必要不更新其他依赖的版本",[1024,5401,5402],{},"在前两条基础上，看看能否提升 node.js 的版本",[109,5404,5406],{"id":5405},"抛弃-node-sass-的理由","抛弃 node-sass 的理由",[1021,5408,5409,5416,5419],{},[1024,5410,5411],{},[804,5412,5415],{"href":5413,"rel":5414},"https://sass-lang.com/blog/libsass-is-deprecated/",[808],"node-sass 已经停止维护，dart-sass 是 sass 官方主推的继任者",[1024,5417,5418],{},"node-sass 在 windows 下的安装非常麻烦，npm 安装时需要开发机上同时装有 python2 和 Microsoft Visual C++",[1024,5420,5421],{},"在安装 node-sass 时，需要从 Github 拉取资源，在特定网络环境下成功率并不高",[109,5423,5424],{"id":5424},"项目依赖版本现状",[1021,5426,5427,5432,5437,5442,5447,5452],{},[1024,5428,5429],{},[30,5430,5431],{},"node@^12",[1024,5433,5434],{},[30,5435,5436],{},"vue@^2",[1024,5438,5439],{},[30,5440,5441],{},"webpack@^3",[1024,5443,5444],{},[30,5445,5446],{},"vue-loader@^14",[1024,5448,5449],{},[30,5450,5451],{},"sass-loader@^7.0.3",[1024,5453,5454],{},[30,5455,5456],{},"node-sass@^4",[109,5458,5459],{"id":5459},"更新思路",[1169,5461,5463],{"id":5462},"nodejs","node.js",[17,5465,5466],{},"webpack 官方并没有提供 webpack 3 支持的最高 node 版本，且即使 webpack 官方支持，webpack 的相关插件也未必支持。因此 node 版本能否更新就只能自己试。好在尽管这个项目的 CI/CD 跑在 node 12，但我日常都在用 node 14 开发，因此顺势将 node 版本提升至 14。",[1169,5468,5470],{"id":5469},"webpacksass-loader","webpack、sass-loader",[17,5472,5473,5474,5479],{},"webpack 的版本目前处于非必要不更新的定时炸弹状态，基于现有的 webpack 3 限制，所支持的最高 sass-loader 版本就是 ^7 （ sass-loader 在 ",[804,5475,5478],{"href":5476,"rel":5477},"https://github.com/webpack-contrib/sass-loader/blob/v8.0.0/CHANGELOG.md",[808],"8.0.0 版本的更新日志","中明确指出 8.0.0 版本需要 webpack 4.36.0）。",[17,5481,5482],{},"如果项目中 sass-loader@^7 支持使用 dart-sass 就可以不更新 sass-loader，也就不必更新 webpack 版本；反之，就需要同步更新 webpack 至 4，再视情况定下 sass-loader 的版本。",[17,5484,5485,5486,5491],{},"那么到底支不支持呢？我在 ",[804,5487,5490],{"href":5488,"rel":5489},"https://www.webpackjs.com/loaders/sass-loader/",[808],"webpack 官方文档介绍 sass-loader 的页面","找到了这样一段 package.json 片段",[38,5493,5495],{"className":2467,"code":5494,"language":2469,"meta":43,"style":43},"{\n  \"devDependencies\": {\n    \"sass-loader\": \"^7.2.0\",\n    \"sass\": \"^1.22.10\"\n  }\n}\n",[30,5496,5497,5501,5509,5521,5531,5535],{"__ignoreMap":43},[47,5498,5499],{"class":49,"line":50},[47,5500,2476],{"class":150},[47,5502,5503,5506],{"class":49,"line":56},[47,5504,5505],{"class":167},"  \"devDependencies\"",[47,5507,5508],{"class":150},": {\n",[47,5510,5511,5514,5516,5519],{"class":49,"line":62},[47,5512,5513],{"class":167},"    \"sass-loader\"",[47,5515,2484],{"class":150},[47,5517,5518],{"class":205},"\"^7.2.0\"",[47,5520,2490],{"class":150},[47,5522,5523,5526,5528],{"class":49,"line":68},[47,5524,5525],{"class":167},"    \"sass\"",[47,5527,2484],{"class":150},[47,5529,5530],{"class":205},"\"^1.22.10\"\n",[47,5532,5533],{"class":49,"line":74},[47,5534,3369],{"class":150},[47,5536,5537],{"class":49,"line":80},[47,5538,2716],{"class":150},[17,5540,5541],{},"这证明起码在 sass-loader@7.2.0 这一版本就已经支持 dart-sass 了，因此 webpack 版本可以停留在 ^3，而 sass-loader 暂时停留在 7.0.3 版本，如果后续有问题可以更新到 ^7 版本中最新的 7.3.1 版本。",[1169,5543,5544],{"id":5544},"dart-sass",[17,5546,5547],{},"sass-loader@^7 所支持的最高 sass 我并没有查到，Github Copilot 信誓旦旦地告诉我",[1609,5549,5550,5555,5560,5565],{},[17,5551,5552],{},[21,5553,5554],{},"官方文档引用：",[1609,5556,5557],{},[17,5558,5559],{},"sass-loader@^7.0.0 requires node-sass >=4.0.0 or sass >=1.3.0, \u003C=1.26.5.",[17,5561,5562],{},[21,5563,5564],{},"建议：",[1021,5566,5567],{},[1024,5568,5569,5570,5573,5574,5577],{},"如果需要使用更高版本的 ",[30,5571,5572],{},"sass","，请升级到 ",[30,5575,5576],{},"sass-loader"," 8 或更高版本。",[17,5579,5580,5581,5586],{},"但事实上，我并没有在互联网上找到这段文本的蛛丝马迹。并且在 sass 的 ~1.26 版本中最后一个版本是 1.26.11 而非 1.26.5，",[804,5582,5585],{"href":5583,"rel":5584},"https://docs.npmjs.com/about-semantic-versioning",[808],"根据常见的 npm 版本号原则","，major version 和 minor version 不变，只改变了 patch version 的发版一般只有 bugfix 而没有 breaking change，不至于从 1.26.5 更新到 1.26.11 就突然不支持 sass-loader 7 了，因此更可能是 AI 幻觉或者是训练数据受限。",[17,5588,5589],{},"出于谨慎考虑，最终决定采用 webpack 官方文档中提到的 sass 1.22 的最后一个版本，也就是 1.22.12。",[109,5591,5593],{"id":5592},"分析完成动手更新","分析完成，动手更新",[1169,5595,5597],{"id":5596},"第一步卸载-node-sass安装-sass12212","第一步，卸载 node-sass，安装 sass@^1.22.12",[38,5599,5601],{"className":2275,"code":5600,"language":2277,"meta":43,"style":43},"npm uninstall node-sass\nnpm install sass@^1.22.12\n",[30,5602,5603,5613],{"__ignoreMap":43},[47,5604,5605,5607,5610],{"class":49,"line":50},[47,5606,2284],{"class":146},[47,5608,5609],{"class":205}," uninstall",[47,5611,5612],{"class":205}," node-sass\n",[47,5614,5615,5617,5619],{"class":49,"line":56},[47,5616,2284],{"class":146},[47,5618,2287],{"class":205},[47,5620,5621],{"class":205}," sass@^1.22.12\n",[1169,5623,5625],{"id":5624},"第二步更新-webpack-配置非必须","第二步，更新 webpack 配置（非必须）",[38,5627,5629],{"className":1551,"code":5628,"language":1553,"meta":43,"style":43},"module.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.(scss|sass)$/,\n        use: [\n          'style-loader',\n          'css-loader',\n          {\n            loader: 'sass-loader',\n+            options: {\n+                // 事实上，这一行在大部分 sass-loader 版本中不用加，sass-loader 能自动检测本地是 sass 还是 node-sass\n+                implementation: require('sass')\n+              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n",[30,5630,5631,5636,5641,5646,5651,5656,5661,5666,5671,5676,5681,5686,5691,5696,5701,5706,5711,5716,5721,5726,5731,5735],{"__ignoreMap":43},[47,5632,5633],{"class":49,"line":50},[47,5634,5635],{},"module.exports = {\n",[47,5637,5638],{"class":49,"line":56},[47,5639,5640],{},"  // ...\n",[47,5642,5643],{"class":49,"line":62},[47,5644,5645],{},"  module: {\n",[47,5647,5648],{"class":49,"line":68},[47,5649,5650],{},"    rules: [\n",[47,5652,5653],{"class":49,"line":74},[47,5654,5655],{},"      {\n",[47,5657,5658],{"class":49,"line":80},[47,5659,5660],{},"        test: /\\.(scss|sass)$/,\n",[47,5662,5663],{"class":49,"line":86},[47,5664,5665],{},"        use: [\n",[47,5667,5668],{"class":49,"line":92},[47,5669,5670],{},"          'style-loader',\n",[47,5672,5673],{"class":49,"line":98},[47,5674,5675],{},"          'css-loader',\n",[47,5677,5678],{"class":49,"line":617},[47,5679,5680],{},"          {\n",[47,5682,5683],{"class":49,"line":622},[47,5684,5685],{},"            loader: 'sass-loader',\n",[47,5687,5688],{"class":49,"line":644},[47,5689,5690],{},"+            options: {\n",[47,5692,5693],{"class":49,"line":671},[47,5694,5695],{},"+                // 事实上，这一行在大部分 sass-loader 版本中不用加，sass-loader 能自动检测本地是 sass 还是 node-sass\n",[47,5697,5698],{"class":49,"line":697},[47,5699,5700],{},"+                implementation: require('sass')\n",[47,5702,5703],{"class":49,"line":738},[47,5704,5705],{},"+              },\n",[47,5707,5708],{"class":49,"line":748},[47,5709,5710],{},"            },\n",[47,5712,5713],{"class":49,"line":753},[47,5714,5715],{},"          },\n",[47,5717,5718],{"class":49,"line":2622},[47,5719,5720],{},"        ],\n",[47,5722,5723],{"class":49,"line":2629},[47,5724,5725],{},"      },\n",[47,5727,5728],{"class":49,"line":2634},[47,5729,5730],{},"    ],\n",[47,5732,5733],{"class":49,"line":2645},[47,5734,4802],{},[47,5736,5737],{"class":49,"line":2657},[47,5738,5739],{},"};\n",[1169,5741,5743],{"id":5742},"第三步批量替换-deep-语法为-v-deep","第三步，批量替换 /deep/ 语法为 ::v-deep",[17,5745,5746,5747,5752],{},"因为 ",[804,5748,5751],{"href":5749,"rel":5750},"https://chromestatus.com/feature/4964279606312960",[808],"/deep/ 写法在 2017 年被弃用"," ，/deep/ 变成了不受支持的深度作用选择器，node-sass 凭借其出色的容错性能够继续提供兼容，但 dart-sass 则不支持这种写法。于是需要将 /deep/ 语法批量替换成 ::v-deep 写法，这种写法虽然在 vue 的后续 rfc 被放弃了，但直至今日依然在事实上被支持。",[38,5754,5756],{"className":2275,"code":5755,"language":2277,"meta":43,"style":43},"# 大概就是这么个意思，用 vscode 的批量替换其实也行\nsed -i 's#\\s*/deep/\\s*# ::v-deep #g' $(grep -rl '/deep/' .)\n",[30,5757,5758,5763],{"__ignoreMap":43},[47,5759,5760],{"class":49,"line":50},[47,5761,5762],{"class":242},"# 大概就是这么个意思，用 vscode 的批量替换其实也行\n",[47,5764,5765,5768,5771,5774,5777,5780,5783,5786,5789],{"class":49,"line":56},[47,5766,5767],{"class":146},"sed",[47,5769,5770],{"class":744}," -i",[47,5772,5773],{"class":205}," 's#\\s*/deep/\\s*# ::v-deep #g'",[47,5775,5776],{"class":150}," $(",[47,5778,5779],{"class":146},"grep",[47,5781,5782],{"class":744}," -rl",[47,5784,5785],{"class":205}," '/deep/'",[47,5787,5788],{"class":205}," .",[47,5790,179],{"class":150},[1169,5792,5794],{"id":5793},"第四步修复其他-sass-语法错误","第四步，修复其他 sass 语法错误",[17,5796,5797],{},"在迁移的过程中，我发现项目中有一些不规范的写法，node-sass 凭借出色的鲁棒性不吭一声强行解析，而 dart-sass 则干不了这粗活。因此需要根据编译时的报错手动修复一下这些语法错误，我这里一共遇到两种。",[38,5799,5801],{"className":1551,"code":5800,"language":1553,"meta":43,"style":43},"// 多打了一个冒号\n.foo {\n-  color:: #fff;\n+  color: #fff;\n}\n\n// :nth-last-child 没指定数字\n.bar {\n-  &:nth-last-child() {\n+  &:nth-last-child(1) {\n      margin-bottom: 0;\n  }\n}\n",[30,5802,5803,5808,5813,5818,5823,5827,5831,5836,5841,5846,5851,5856,5860],{"__ignoreMap":43},[47,5804,5805],{"class":49,"line":50},[47,5806,5807],{},"// 多打了一个冒号\n",[47,5809,5810],{"class":49,"line":56},[47,5811,5812],{},".foo {\n",[47,5814,5815],{"class":49,"line":62},[47,5816,5817],{},"-  color:: #fff;\n",[47,5819,5820],{"class":49,"line":68},[47,5821,5822],{},"+  color: #fff;\n",[47,5824,5825],{"class":49,"line":74},[47,5826,2716],{},[47,5828,5829],{"class":49,"line":80},[47,5830,185],{"emptyLinePlaceholder":184},[47,5832,5833],{"class":49,"line":86},[47,5834,5835],{},"// :nth-last-child 没指定数字\n",[47,5837,5838],{"class":49,"line":92},[47,5839,5840],{},".bar {\n",[47,5842,5843],{"class":49,"line":98},[47,5844,5845],{},"-  &:nth-last-child() {\n",[47,5847,5848],{"class":49,"line":617},[47,5849,5850],{},"+  &:nth-last-child(1) {\n",[47,5852,5853],{"class":49,"line":622},[47,5854,5855],{},"      margin-bottom: 0;\n",[47,5857,5858],{"class":49,"line":644},[47,5859,3369],{},[47,5861,5862],{"class":49,"line":671},[47,5863,2716],{},[109,5865,5866],{"id":5866},"踩坑",[1169,5868,5870],{"id":5869},"v-deep-样式不生效","::v-deep 样式不生效",[17,5872,5873],{},"依赖更新完后看了两眼好像是没问题，就推测试环境了。结果一天没到就被同事 call 了，::v-deep 这种深度作用选择器居然没有生效？",[17,5875,5876],{},"抱着试一试的态度，GPT 给了如下回答",[1609,5878,5879],{},[17,5880,5881,5882,5885,5886,5889,5890,5896,5897,5900,5901,3925],{},"在 ",[21,5883,5884],{},"Vue 2 + vue-loader + Sass"," 的组合下，",[21,5887,5888],{},"这种写法是正确的","，",[21,5891,5892,5893],{},"前提是你的构建工具链支持 ",[30,5894,5895],{},"::v-deep"," 语法（如 ",[30,5898,5899],{},"vue-loader@15"," 及以上版本 + ",[30,5902,5576],{},[17,5904,5905],{},"虽说我依然没有查证到为什么更新 vue-loader@15 才能使用 ::v-deep 语法，但对 vue-loader 进行更新后，::v-deep 语法确实生效了。在撰写本文时，我找到了些许蛛丝马迹，可能能解释这一问题。",[1215,5907,5908,5922],{},[1024,5909,5910,5911,5916,5917,456],{},"vue-loader 在 ",[804,5912,5915],{"href":5913,"rel":5914},"https://vue-loader-v14.vuejs.org/en/features/scoped-css.html#deep-selectors",[808],"14 版本的官方文档","就是没有 ::v-deep 写法的示例，",[804,5918,5921],{"href":5919,"rel":5920},"https://github.com/vuejs/vue-loader/commit/2585d254fc774386a898887467fbdd30eb864b53",[808],"这一示例一直在 vue-loader 15.7.0 版本发布后才被加入",[1024,5923,5924,5925,5932,5935,5936,5941,5942],{},"vue-cli 的 Github Issue 评论区中有人提到",[1609,5926,5927],{},[17,5928,5929,5931],{},[30,5930,5895],{}," implemented in @vue/component-compiler-utils v2.6.0, should work after you reinstall the deps.",[5933,5934],"br",{},"而 vue-loader 在 15.0.0-beta.1 版本才",[804,5937,5940],{"href":5938,"rel":5939},"https://github.com/vuejs/vue-loader/commit/e32cd0e4372fcc6f13b6c307402713807516d71c#diff-7ae45ad102eab3b6d7e7896acd08c427a9b25b346470d7bc6507b6481575d519",[808],"将 @vue/component-compiler-utils 加入到自己的 dependencies 中","，并直到 vue-loader 15.7.1 中才",[804,5943,5946],{"href":5944,"rel":5945},"https://github.com/vuejs/vue-loader/commit/c359a38db0fbb4135fc97114baec3cd557d4123a",[808],"将其 @vue/component-compiler-utils 的版本号更新到满足要求的 ^3.0.0",[17,5948,5949,5950,5955],{},"那能否升级到 vue-loader 16 甚至 17 版本呢？不行，在 ",[804,5951,5954],{"href":5952,"rel":5953},"https://github.com/vuejs/vue-loader/releases/tag/v16.1.2",[808],"vue-loader v16.1.2 的更新日志","中明确写道",[1609,5957,5958],{},[17,5959,5960],{},"Note: vue-loader v16 is for Vue 3 only.",[1169,5962,5964],{"id":5963},"vue-loader-14-15-breaking-change","vue-loader 14 -> 15 breaking change",[17,5966,5967,5968,5973],{},"vue-loader 从 14 往上迁移时，不修改 webpack 配置直接跑会遇到 vue 语法不识别的问题。具体表现为 .vue 文件命名都是正确有效的语法，但构建开发时编译器就是不认，报语法错误。vue-loader 官方有一份",[804,5969,5972],{"href":5970,"rel":5971},"https://vue-loader.vuejs.org/migrating.html",[808],"迁移文档","，需要注意一下。",[38,5975,5979],{"className":5976,"code":5978,"language":2738},[5977],"language-text","ERROR in ./src/......\nModule parse failed: Unexpected token(1:0)\nYou may need an appropriate loader to handle this file type.\n",[30,5980,5978],{"__ignoreMap":43},[38,5982,5984],{"className":1551,"code":5983,"language":1553,"meta":43,"style":43},"// ...\nimport path from 'path'\n+const VueLoaderPlugin = require('vue-loader/lib/plugin')\n\n// ...\n\n  plugins: [\n+    new VueLoaderPlugin()\n    // ...\n  ]\n",[30,5985,5986,5991,5996,6001,6005,6009,6013,6018,6023,6028],{"__ignoreMap":43},[47,5987,5988],{"class":49,"line":50},[47,5989,5990],{},"// ...\n",[47,5992,5993],{"class":49,"line":56},[47,5994,5995],{},"import path from 'path'\n",[47,5997,5998],{"class":49,"line":62},[47,5999,6000],{},"+const VueLoaderPlugin = require('vue-loader/lib/plugin')\n",[47,6002,6003],{"class":49,"line":68},[47,6004,185],{"emptyLinePlaceholder":184},[47,6006,6007],{"class":49,"line":74},[47,6008,5990],{},[47,6010,6011],{"class":49,"line":80},[47,6012,185],{"emptyLinePlaceholder":184},[47,6014,6015],{"class":49,"line":86},[47,6016,6017],{},"  plugins: [\n",[47,6019,6020],{"class":49,"line":92},[47,6021,6022],{},"+    new VueLoaderPlugin()\n",[47,6024,6025],{"class":49,"line":98},[47,6026,6027],{},"    // ...\n",[47,6029,6030],{"class":49,"line":617},[47,6031,6032],{},"  ]\n",[17,6034,6035],{},"除此之外，在我这个项目中需要额外移除 webpack 配置中针对 .vue 文件的 babel-loader",[38,6037,6039],{"className":1551,"code":6038,"language":1553,"meta":43,"style":43},"{\n  test: /\\.vue$/,\n  use: [\n-    {\n-      loader: 'babel-loader'\n-    },\n    {\n      loader: 'vue-loader',\n    }\n  ]\n}\n",[30,6040,6041,6045,6050,6055,6060,6065,6070,6074,6079,6083,6087],{"__ignoreMap":43},[47,6042,6043],{"class":49,"line":50},[47,6044,2476],{},[47,6046,6047],{"class":49,"line":56},[47,6048,6049],{},"  test: /\\.vue$/,\n",[47,6051,6052],{"class":49,"line":62},[47,6053,6054],{},"  use: [\n",[47,6056,6057],{"class":49,"line":68},[47,6058,6059],{},"-    {\n",[47,6061,6062],{"class":49,"line":74},[47,6063,6064],{},"-      loader: 'babel-loader'\n",[47,6066,6067],{"class":49,"line":80},[47,6068,6069],{},"-    },\n",[47,6071,6072],{"class":49,"line":86},[47,6073,2503],{},[47,6075,6076],{"class":49,"line":92},[47,6077,6078],{},"      loader: 'vue-loader',\n",[47,6080,6081],{"class":49,"line":98},[47,6082,2692],{},[47,6084,6085],{"class":49,"line":617},[47,6086,6032],{},[47,6088,6089],{"class":49,"line":622},[47,6090,2716],{},[109,6092,6093],{"id":6093},"最终更新情况",[1021,6095,6096,6103,6110],{},[1024,6097,6098,1885,6100],{},[30,6099,5431],{},[30,6101,6102],{},"node@^14",[1024,6104,6105,1885,6107],{},[30,6106,5446],{},[30,6108,6109],{},"vue-loader@^15",[1024,6111,6112,1885,6114],{},[30,6113,5456],{},[30,6115,6116],{},"sass@^1.22.12",[17,6118,6119],{},"其余依赖版本维持不变",[109,6121,1049],{"id":1049},[1021,6123,6124,6141,6148,6154,6160,6167,6174,6180,6186,6192,6198,6204,6210,6217,6224],{},[1024,6125,6126],{},[804,6127,6130,6131,6133,6134,6137,6138,6140],{"href":6128,"rel":6129},"https://juejin.cn/post/7327094228350500914",[808],"node-sass更换为dart-sass",[30,6132,5544],{}," 和 ",[30,6135,6136],{},"node-sass","都是用来将",[30,6139,5572],{},"编译成 - 掘金",[1024,6142,6143],{},[804,6144,6147],{"href":6145,"rel":6146},"https://sunchenggit.github.io/2021/01/13/node-sass%E8%BF%81%E7%A7%BBdart-sass/",[808],"node-sass迁移dart-sass | Bolg",[1024,6149,6150],{},[804,6151,6153],{"href":5488,"rel":6152},[808],"sass-loader | webpack 中文文档 | webpack中文文档 | webpack中文网",[1024,6155,6156],{},[804,6157,6159],{"href":5413,"rel":6158},[808],"Sass: LibSass is Deprecated",[1024,6161,6162],{},[804,6163,6166],{"href":6164,"rel":6165},"https://www.npmjs.com/package/sass?activeTab=versions",[808],"sass - npm",[1024,6168,6169],{},[804,6170,6173],{"href":6171,"rel":6172},"https://www.npmjs.com/package/node-sass",[808],"node-sass - npm",[1024,6175,6176],{},[804,6177,6179],{"href":5583,"rel":6178},[808],"About semantic versioning | npm Docs",[1024,6181,6182],{},[804,6183,6185],{"href":5749,"rel":6184},[808],"Make /deep/ behave like the descendant combinator \" \" in CSS live profile (in css file or inside of \u003Cstyle>) - Chrome Platform Status",[1024,6187,6188],{},[804,6189,6191],{"href":5476,"rel":6190},[808],"sass-loader/CHANGELOG.md at v8.0.0 · webpack-contrib/sass-loader",[1024,6193,6194],{},[804,6195,6197],{"href":5952,"rel":6196},[808],"Release v16.1.2 · vuejs/vue-loader",[1024,6199,6200],{},[804,6201,6203],{"href":5938,"rel":6202},[808],"refactor: use @vue/component-compiler-utils · vuejs/vue-loader@e32cd0e",[1024,6205,6206],{},[804,6207,6209],{"href":5944,"rel":6208},[808],"chore: update @vue/component-compiler-utils to v3 · vuejs/vue-loader@c359a38",[1024,6211,6212],{},[804,6213,6216],{"href":6214,"rel":6215},"https://github.com/vuejs/vue-cli/issues/3399#issuecomment-466319019",[808],"dart-sass does not support /deep/ selector · Issue #3399 · vuejs/vue-cli",[1024,6218,6219],{},[804,6220,6223],{"href":6221,"rel":6222},"https://vue-loader-v14.vuejs.org/en/features/scoped-css.html",[808],"Scoped CSS · vue-loader v14",[1024,6225,6226],{},[804,6227,6229],{"href":5970,"rel":6228},[808],"Migrating from v14 | Vue Loader",[1067,6231,6232],{},"html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}",{"title":43,"searchDepth":56,"depth":56,"links":6234},[6235,6236,6237,6238,6243,6249,6253,6254],{"id":5391,"depth":56,"text":5391},{"id":5405,"depth":56,"text":5406},{"id":5424,"depth":56,"text":5424},{"id":5459,"depth":56,"text":5459,"children":6239},[6240,6241,6242],{"id":5462,"depth":62,"text":5463},{"id":5469,"depth":62,"text":5470},{"id":5544,"depth":62,"text":5544},{"id":5592,"depth":56,"text":5593,"children":6244},[6245,6246,6247,6248],{"id":5596,"depth":62,"text":5597},{"id":5624,"depth":62,"text":5625},{"id":5742,"depth":62,"text":5743},{"id":5793,"depth":62,"text":5794},{"id":5866,"depth":56,"text":5866,"children":6250},[6251,6252],{"id":5869,"depth":62,"text":5870},{"id":5963,"depth":62,"text":5964},{"id":6093,"depth":56,"text":6093},{"id":1049,"depth":56,"text":1049},{"title":6256,"date":6257,"path":6258,"tags":6259,"body":6261},"前端中的量子力学——一打开 F12 就消失的 Bug","2025-06-08 01:22:13","/2025/06/08/front-end-bug-gone-when-open-devtool",[2080,4003,5386,12,6260],"Debug",{"type":14,"value":6262,"toc":6837},[6263,6267,6270,6278,6280,6286,6289,6303,6307,6310,6466,6469,6472,6475,6478,6484,6487,6521,6525,6538,6541,6608,6611,6773,6776,6779,6783,6790,6801,6804,6809,6811,6834],[109,6264,6266],{"id":6265},"前端量子态现象的首次观测","前端「量子态」现象的首次观测",[17,6268,6269],{},"这事说来也邪乎，半个月前吃着火锅唱着歌，在工位上嘎嘎写码，发现一个诡异的 bug。作为如假包换的人类程序员，写出 bug 是再正常不过的事情了，但这 bug 邪门就邪门在我一打开 F12 的 DevTools 观察相关的 dom 结构，这 bug 就自动消失了；再把 DevTools 一关，Ctrl + F5 一刷新页面，Bug 又出现了。",[17,6271,6272,6273],{},"下面是使用 iframe 引入的 ",[804,6274,6277],{"href":6275,"rel":6276},"https://static.031130.xyz/demo/scroll-jump-bug.html",[808],"demo",[5340,6279],{"src":6275,"width":5343,"height":5344,"allowFullScreen":184},[17,6281,6282],{},[784,6283],{"alt":6284,"src":6285},"“观测”指南","https://static.031130.xyz/uploads/2025/06/08/65620d31fce6f.webp",[17,6287,6288],{},"这 Bug 给我整得脑瓜子嗡嗡的，我又不是物理学家，写个前端怎么量子力学的观察者效应都给我整出来了（？",[1609,6290,6291,6297,6300],{},[17,6292,6293,6296],{},[21,6294,6295],{},"观测者效应","（Observer effect），是指“观测”这种行为对被观测对象造成一定影响的效应。",[17,6298,6299],{},"在量子力学实验中，如果要测算一个电子所处的速度，就要用两个光子隔一段时间去撞击这个电子，但第一个光子就已经把这个电子撞飞了，便改变了电子的原有速度，我们便无法测出真正准确的速度（不确定原理）。时间流逝的快慢也会受到观测者的影响，用很高的频率去观测粒子的衰变，反而使得粒子长时间不衰变。",[17,6301,6302],{},"——wikipedia",[109,6304,6306],{"id":6305},"量子迷雾浏览器机制","量子迷雾❌浏览器机制✅",[17,6308,6309],{},"这里先稍微解释一下 demo 中的代码片段:",[38,6311,6313],{"className":2299,"code":6312,"language":2301,"meta":43,"style":43},"if (scrollIndex >= groupLength) {\n  setTimeout(() => {\n    wrapper.style.transition = \"none\";\n    scrollIndex = 0;\n    wrapper.style.transform = `translateY(-${crollIndex * itemHeight}px)`;\n\n    requestAnimationFrame(() => {\n      wrapper.style.transition = \"transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)\";\n    });\n  }, 500);\n}\n",[30,6314,6315,6333,6344,6365,6376,6412,6416,6427,6447,6452,6462],{"__ignoreMap":43},[47,6316,6317,6320,6322,6325,6328,6331],{"class":49,"line":50},[47,6318,6319],{"class":134},"if",[47,6321,2771],{"class":150},[47,6323,6324],{"class":236},"scrollIndex",[47,6326,6327],{"class":142}," >=",[47,6329,6330],{"class":236}," groupLength",[47,6332,2763],{"class":150},[47,6334,6335,6338,6340,6342],{"class":49,"line":56},[47,6336,6337],{"class":146},"  setTimeout",[47,6339,635],{"class":150},[47,6341,638],{"class":134},[47,6343,641],{"class":150},[47,6345,6346,6349,6351,6353,6355,6358,6360,6363],{"class":49,"line":62},[47,6347,6348],{"class":154},"    wrapper",[47,6350,158],{"class":150},[47,6352,1067],{"class":161},[47,6354,158],{"class":150},[47,6356,6357],{"class":167},"transition",[47,6359,143],{"class":142},[47,6361,6362],{"class":205}," \"none\"",[47,6364,4145],{"class":150},[47,6366,6367,6370,6372,6374],{"class":49,"line":68},[47,6368,6369],{"class":236},"    scrollIndex",[47,6371,143],{"class":142},[47,6373,4640],{"class":744},[47,6375,4145],{"class":150},[47,6377,6378,6380,6382,6384,6386,6389,6391,6394,6396,6399,6402,6405,6407,6410],{"class":49,"line":74},[47,6379,6348],{"class":154},[47,6381,158],{"class":150},[47,6383,1067],{"class":161},[47,6385,158],{"class":150},[47,6387,6388],{"class":167},"transform",[47,6390,143],{"class":142},[47,6392,6393],{"class":205}," `translateY(-",[47,6395,334],{"class":333},[47,6397,6398],{"class":236},"crollIndex",[47,6400,6401],{"class":142}," *",[47,6403,6404],{"class":236}," itemHeight",[47,6406,339],{"class":333},[47,6408,6409],{"class":205},"px)`",[47,6411,4145],{"class":150},[47,6413,6414],{"class":49,"line":80},[47,6415,185],{"emptyLinePlaceholder":184},[47,6417,6418,6421,6423,6425],{"class":49,"line":86},[47,6419,6420],{"class":146},"    requestAnimationFrame",[47,6422,635],{"class":150},[47,6424,638],{"class":134},[47,6426,641],{"class":150},[47,6428,6429,6432,6434,6436,6438,6440,6442,6445],{"class":49,"line":92},[47,6430,6431],{"class":154},"      wrapper",[47,6433,158],{"class":150},[47,6435,1067],{"class":161},[47,6437,158],{"class":150},[47,6439,6357],{"class":167},[47,6441,143],{"class":142},[47,6443,6444],{"class":205}," \"transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)\"",[47,6446,4145],{"class":150},[47,6448,6449],{"class":49,"line":98},[47,6450,6451],{"class":150},"    });\n",[47,6453,6454,6457,6460],{"class":49,"line":617},[47,6455,6456],{"class":150},"  }, ",[47,6458,6459],{"class":744},"500",[47,6461,4181],{"class":150},[47,6463,6464],{"class":49,"line":622},[47,6465,2716],{"class":150},[17,6467,6468],{},"我这边拿到的需求是需要写一个无限滚动的轮播标题列表，每次展示三个，2 秒后标题列表整体上移，原本的第一个标题就移出可视范围了，下面会新补充一个新的标题列表。（可能解释的不清楚，但各位应该都看过上面的 demo 了）",[17,6470,6471],{},"当列表滚动到最底部的时候，我先取消 transition 过渡动画效果，趁机将整体列表平移到上一次可视范围内出现相同的三个标题的位置，再把 transition 过渡动画的效果加回来，这样就能在视觉上造成无限滚动的效果。",[17,6473,6474],{},"但问题就出在明明把 transition 属性取消了，但这一次平移仍然触发了过渡动画效果。",[17,6476,6477],{},"说实话，这是我短暂的码农生涯当中最绝望的一次，一方面是遇到的 bug 过于逆天以至于说出去都可能没人信，一方面是遇上这种问题是完全不能指望搜索引擎能给出什么解决方案的——毕竟我自己都不知道该怎么组织关键词进行搜索。",[17,6479,6480],{},[784,6481],{"alt":6482,"src":6483},"这是小麦茶，带我入坑前端的学长","https://static.031130.xyz/uploads/2025/06/08/475a61b332454.webp",[17,6485,6486],{},"于是抱着试一试的心态，把相关代码喂给 ChatGPT-4o 看看能不能问出个所以然来。",[1609,6488,6489,6503],{},[17,6490,6491,6492,6495,6496,6499,6500,456],{},"你描述的现象——“",[21,6493,6494],{},"滚动第九次时列表出现突兀的自下而上跳动","，而",[21,6497,6498],{},"打开 F12 时不会出现问题","”——",[21,6501,6502],{},"几乎可以确定是由于浏览器在某些渲染状态下跳过了某些帧（帧率波动）或者定时器精度的问题导致动画突变",[17,6504,6505,6506,6509,6510,6513,6514,6517,6518,456],{},"这种问题多半发生在“使用 ",[30,6507,6508],{},"setInterval"," 控制动画”和“切换样式（transition）时机不当”所引起的 ",[21,6511,6512],{},"过渡跳帧问题","，而打开 DevTools 会 ",[21,6515,6516],{},"强制刷新帧或提高定时器精度","，从而",[21,6519,6520],{},"掩盖了这个问题",[109,6522,6524],{"id":6523},"太好了是-requestanimationframe我们有救了","太好了，是 requestAnimationFrame，我们有救了",[1609,6526,6527,6535],{},[17,6528,6529,6534],{},[21,6530,6531],{},[30,6532,6533],{},"window.requestAnimationFrame()"," 方法会告诉浏览器你希望执行一个动画。它要求浏览器在下一次重绘之前，调用用户提供的回调函数。",[17,6536,6537],{},"——MDN",[17,6539,6540],{},"这是 GPT 给出的方案，非常有效",[38,6542,6544],{"className":1551,"code":6543,"language":1553,"meta":43,"style":43},"if (scrollIndex >= groupLength) {\n  setTimeout(() => {\n    wrapper.style.transition = \"none\";\n    scrollIndex = 0;\n    wrapper.style.transform = `translateY(-${crollIndex * itemHeight}px)`;\n\n    requestAnimationFrame(() => {\n+      requestAnimationFrame(() => {\n         wrapper.style.transition = \"transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)\";\n+      });\n    });\n  }, 500);\n}\n",[30,6545,6546,6551,6556,6561,6566,6571,6575,6580,6585,6590,6595,6599,6604],{"__ignoreMap":43},[47,6547,6548],{"class":49,"line":50},[47,6549,6550],{},"if (scrollIndex >= groupLength) {\n",[47,6552,6553],{"class":49,"line":56},[47,6554,6555],{},"  setTimeout(() => {\n",[47,6557,6558],{"class":49,"line":62},[47,6559,6560],{},"    wrapper.style.transition = \"none\";\n",[47,6562,6563],{"class":49,"line":68},[47,6564,6565],{},"    scrollIndex = 0;\n",[47,6567,6568],{"class":49,"line":74},[47,6569,6570],{},"    wrapper.style.transform = `translateY(-${crollIndex * itemHeight}px)`;\n",[47,6572,6573],{"class":49,"line":80},[47,6574,185],{"emptyLinePlaceholder":184},[47,6576,6577],{"class":49,"line":86},[47,6578,6579],{},"    requestAnimationFrame(() => {\n",[47,6581,6582],{"class":49,"line":92},[47,6583,6584],{},"+      requestAnimationFrame(() => {\n",[47,6586,6587],{"class":49,"line":98},[47,6588,6589],{},"         wrapper.style.transition = \"transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)\";\n",[47,6591,6592],{"class":49,"line":617},[47,6593,6594],{},"+      });\n",[47,6596,6597],{"class":49,"line":622},[47,6598,6451],{},[47,6600,6601],{"class":49,"line":644},[47,6602,6603],{},"  }, 500);\n",[47,6605,6606],{"class":49,"line":671},[47,6607,2716],{},[17,6609,6610],{},"如果觉得嵌套两层 requestAnimationFrame 比较难理解，那下面的代码是等效的",[38,6612,6614],{"className":2299,"code":6613,"language":2301,"meta":43,"style":43},"if (scrollIndex >= groupLength) {\n  setTimeout(() => {\n    scrollIndex = 0;\n\n    requestAnimationFrame(() => {\n      // 第一帧\n      wrapper.style.transition = \"none\";\n      wrapper.style.transform = `translateY(-${crollIndex * itemHeight}px)`;\n      // 第二帧\n      requestAnimationFrame(() => {\n        wrapper.style.transition = \"transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)\";\n      });\n    });\n  }, 500);\n}\n",[30,6615,6616,6630,6640,6650,6654,6664,6669,6687,6717,6722,6733,6752,6757,6761,6769],{"__ignoreMap":43},[47,6617,6618,6620,6622,6624,6626,6628],{"class":49,"line":50},[47,6619,6319],{"class":134},[47,6621,2771],{"class":150},[47,6623,6324],{"class":236},[47,6625,6327],{"class":142},[47,6627,6330],{"class":236},[47,6629,2763],{"class":150},[47,6631,6632,6634,6636,6638],{"class":49,"line":56},[47,6633,6337],{"class":146},[47,6635,635],{"class":150},[47,6637,638],{"class":134},[47,6639,641],{"class":150},[47,6641,6642,6644,6646,6648],{"class":49,"line":62},[47,6643,6369],{"class":236},[47,6645,143],{"class":142},[47,6647,4640],{"class":744},[47,6649,4145],{"class":150},[47,6651,6652],{"class":49,"line":68},[47,6653,185],{"emptyLinePlaceholder":184},[47,6655,6656,6658,6660,6662],{"class":49,"line":74},[47,6657,6420],{"class":146},[47,6659,635],{"class":150},[47,6661,638],{"class":134},[47,6663,641],{"class":150},[47,6665,6666],{"class":49,"line":80},[47,6667,6668],{"class":242},"      // 第一帧\n",[47,6670,6671,6673,6675,6677,6679,6681,6683,6685],{"class":49,"line":86},[47,6672,6431],{"class":154},[47,6674,158],{"class":150},[47,6676,1067],{"class":161},[47,6678,158],{"class":150},[47,6680,6357],{"class":167},[47,6682,143],{"class":142},[47,6684,6362],{"class":205},[47,6686,4145],{"class":150},[47,6688,6689,6691,6693,6695,6697,6699,6701,6703,6705,6707,6709,6711,6713,6715],{"class":49,"line":92},[47,6690,6431],{"class":154},[47,6692,158],{"class":150},[47,6694,1067],{"class":161},[47,6696,158],{"class":150},[47,6698,6388],{"class":167},[47,6700,143],{"class":142},[47,6702,6393],{"class":205},[47,6704,334],{"class":333},[47,6706,6398],{"class":236},[47,6708,6401],{"class":142},[47,6710,6404],{"class":236},[47,6712,339],{"class":333},[47,6714,6409],{"class":205},[47,6716,4145],{"class":150},[47,6718,6719],{"class":49,"line":98},[47,6720,6721],{"class":242},"      // 第二帧\n",[47,6723,6724,6727,6729,6731],{"class":49,"line":617},[47,6725,6726],{"class":146},"      requestAnimationFrame",[47,6728,635],{"class":150},[47,6730,638],{"class":134},[47,6732,641],{"class":150},[47,6734,6735,6738,6740,6742,6744,6746,6748,6750],{"class":49,"line":622},[47,6736,6737],{"class":154},"        wrapper",[47,6739,158],{"class":150},[47,6741,1067],{"class":161},[47,6743,158],{"class":150},[47,6745,6357],{"class":167},[47,6747,143],{"class":142},[47,6749,6444],{"class":205},[47,6751,4145],{"class":150},[47,6753,6754],{"class":49,"line":644},[47,6755,6756],{"class":150},"      });\n",[47,6758,6759],{"class":49,"line":671},[47,6760,6451],{"class":150},[47,6762,6763,6765,6767],{"class":49,"line":697},[47,6764,6456],{"class":150},[47,6766,6459],{"class":744},[47,6768,4181],{"class":150},[47,6770,6771],{"class":49,"line":738},[47,6772,2716],{"class":150},[17,6774,6775],{},"总之，我们需要杜绝浏览器将设置 transform 偏移值（瞬移列表位置）与恢复 transition 动画两件事合并到同一帧里去，而两层嵌套的 requestAnimationFrame 方法能很好的解决这个问题",[5340,6777],{"src":6778,"width":5343,"height":5344,"allowFullScreen":184},"https://static.031130.xyz/demo/scroll-jump-bug-fixed.html",[109,6780,6782],{"id":6781},"驯服量子态前端开发者的新技能","驯服量子态：前端开发者的新技能",[17,6784,6785,6786,6789],{},"就这样，通过使用两层",[30,6787,6788],{},"requestAnimationFrame","，我们成功驯服了这个\"量子态\"的bug。现在无论是否打开F12，它都会乖乖地按照我们的预期滚动，不再玩消失的把戏。",[17,6791,6792,6793,6797,6798,6800],{},"看来，在前端的世界里，我们不仅要懂JavaScript，",[6794,6795,6796],"del",{},"还得懂点量子力学","。下次再遇到这种\"一观测就消失\"的bug，不妨试试这个\"量子纠缠解决方案\"——双重",[30,6799,6788],{},"，没准就能让bug从\"量子态\"坍缩成\"稳定态\"呢！",[17,6802,6803],{},"当然，如果你有更神奇的 debug 经历，欢迎分享你的经历——毕竟，在代码的宇宙里，我们永远不知道下一个bug会以怎样的形态出现。也许，这就是编程的乐趣（？）所在吧！",[1609,6805,6806],{},[17,6807,6808],{},"本文由 ChatGPT 与 DeepSeek 协助撰写，但 bug 是真人真事（泪）。",[109,6810,1049],{"id":1049},[1021,6812,6813,6820,6827],{},[1024,6814,6815],{},[804,6816,6819],{"href":6817,"rel":6818},"https://zh.wikipedia.org/wiki/%E8%A7%82%E6%B5%8B%E8%80%85%E6%95%88%E5%BA%94",[808],"观测者效应 - 维基百科，自由的百科全书",[1024,6821,6822],{},[804,6823,6826],{"href":6824,"rel":6825},"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame",[808],"Window：requestAnimationFrame() 方法 - Web API | MDN",[1024,6828,6829],{},[804,6830,6833],{"href":6831,"rel":6832},"https://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html",[808],"网页性能管理详解 - 阮一峰的网络日志",[1067,6835,6836],{},"html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sz0mV, html code.shiki .sz0mV{--shiki-default:#383A42;--shiki-dark:#E06C75}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .s7GmK, html code.shiki .s7GmK{--shiki-default:#383A42;--shiki-dark:#E5C07B}html pre.shiki code .s2QsP, html code.shiki .s2QsP{--shiki-default:#E45649;--shiki-dark:#E5C07B}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sAOjX, html code.shiki .sAOjX{--shiki-default:#CA1243;--shiki-dark:#C678DD}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}",{"title":43,"searchDepth":56,"depth":56,"links":6838},[6839,6840,6841,6842,6843],{"id":6265,"depth":56,"text":6266},{"id":6305,"depth":56,"text":6306},{"id":6523,"depth":56,"text":6524},{"id":6781,"depth":56,"text":6782},{"id":1049,"depth":56,"text":1049},{"title":6845,"date":6846,"path":6847,"tags":6848,"body":6849},"2025 年，如何为 web 页面上展示的视频选择合适的压缩算法？","2025-06-02 20:59:10","/2025/06/02/choosing-the-right-video-compression-format-for-web-in-2025",[4003,2080,1673],{"type":14,"value":6850,"toc":7537},[6851,6854,6858,6862,6865,6870,6875,6881,6887,6890,6895,6899,6902,6909,6912,6918,6922,6932,6937,6940,6943,6946,6950,6953,6960,6963,6966,6969,6972,6975,7211,7215,7218,7224,7231,7235,7246,7333,7339,7342,7346,7353,7359,7365,7369,7372,7378,7381,7384,7387,7390,7399,7401,7534],[17,6852,6853],{},"事情的起因是需要在网页上展示一个时长约为 5 分钟的产品展示视频，拿到的 H264 编码的原文件有 60MB 大。高达 1646 Kbps 码率的视频文件通过网络传输，烧 cdn 流量费用不说，对于弱网环境下的用户体验也绝对不会好。因此必须在兼顾浏览器兼容性（太好了不用管 IE）的情况下，使用更现代的视频压缩算法进行压缩。",[109,6855,6857],{"id":6856},"哪些压缩算法是目前的主流","哪些压缩算法是目前的主流？",[1169,6859,6861],{"id":6860},"av1","AV1",[17,6863,6864],{},"AV1 作为目前压缩效率最高的主流视频编码格式，在 2025 年的今天已经在 YouTube、Netflix、Bilibili 等视频网站全面铺开，毫无疑问是最值得优先考虑的选择；除了优异的压缩效率以外，AV1 免版税的优势使得各硬件厂商和浏览器内核开发者可以无所顾忌的将 AV1 编码的支持添加到自己的产品中。",[17,6866,6867],{},[784,6868],{"alt":43,"src":6869},"https://static.031130.xyz/uploads/2025/06/02/aec1af1718064.webp",[17,6871,6872],{},[784,6873],{"alt":43,"src":6874},"https://static.031130.xyz/uploads/2025/06/02/76a312b5a668b.webp",[17,6876,6877,6878],{},"可惜的是，Safari 并没有对 AV1 编码添加软解支持，只有在搭载 Apple M3 及后续生产的 Mac 和 iPhone 15 Pro 后续的机型才拥有硬解 AV1 的能力，在此之前生产的产品均无法使用 Safari 播放 AV1 编码的视频。",[6794,6879,6880],{},"我宣布 Safari 已经成为当代 IE，妥妥阻碍 Web 发展的绊脚石",[17,6882,6883],{},[784,6884],{"alt":6885,"src":6886},"Safari 在搭载 M2Pro 处理器的 Macbook Pro 上直接罢工了","https://static.031130.xyz/uploads/2025/06/02/01ddcc3948406.webp",[17,6888,6889],{},"除此之外，AV1 在压制视频时对设备的要求较高。在桌面端的消费级显卡中，目前只有 NVIDIA RTX 40 系、AMD Radeon RX 7000 系、IntelArc A380 及后续的产品拥有 AV1 的编码（encode）支持。而 Apple M 系列芯片至今没有任何一款产品拥有对 AV1 编码的硬件支持。这也导致我在我搭载 Intel Core i7-1165G7 的 ThinkPad 上使用 AV1 编码压缩视频时被迫使用 libaom-av1 进行软件编码，1080p 的视频压缩效率为 0.0025x 的速率，五分钟的视频要压一天多的时间。",[17,6891,6892],{},[784,6893],{"alt":43,"src":6894},"https://static.031130.xyz/uploads/2025/06/02/923ca02e1d835.webp",[1169,6896,6898],{"id":6897},"h265-hevc","H.265 / HEVC",[17,6900,6901],{},"作为 H.264 / AVC 的下一代继任者，H.265（又称 HEVC）的表现可谓是一手好牌打得稀巴烂。HEVC 由多个专利池（如 MPEG LA、HEVC Advance 和 Velos Media）管理，授权费用高且分散，昂贵的专利授权费用严重限制了它的普及速度和范围，尤其是在开放生态和网页端应用中。",[17,6903,6904,6905,6908],{},"Chromium / Firefox 不愿意当承担专利授权费的冤大头，拒绝在当今世界最大的两个开源浏览器内核中添加默认的 H.265 软解支持，目前主流浏览器普遍采用",[21,6906,6907],{},"能硬解就硬解，硬解不了就摆烂","的支持策略。Firefox on Linux 倒是另辟蹊径，不仅会尝试使用硬解，还会尝试使用用户在电脑上装的 ffmpeg 软解曲线救国。不过好在毕竟是 2013 年就确定的标准，现在大部分硬件厂商都集体被摁着脖子交了专利授权费以保证产品竞争力，Apple 更是 HEVC 的一等公民，保证了全系产品的 HEVC 解码能力。",[17,6910,6911],{},"目前未覆盖到的场景主要是 Chromium / Firefox on Windows 7 和 Chromium on Linux（包括 UOS、麒麟等一众国产 Linux 发行版）。",[17,6913,6914],{},[784,6915],{"alt":6916,"src":6917},"在 Linux 上不支持硬解 H.265 的 Chrome 直接把视频当作音频播放了","https://static.031130.xyz/uploads/2025/06/02/2e8e5100f645a.webp",[1169,6919,6921],{"id":6920},"vp9","VP9",[17,6923,6924,6925,6928,6929],{},"VP9 是 Google 于 2013 年推出的视频编码格式，作为 H.264 的继任者之一，在压缩效率上接近 H.265（HEVC），但最大的杀手锏是——",[21,6926,6927],{},"彻底免专利费","。这也让 VP9 成为 Google 对 HEVC 高额授权费用的掀桌式回应：",[21,6930,6931],{},"你们慢慢吃，我开一桌免费的。",[17,6933,6934],{},[784,6935],{"alt":43,"src":6936},"https://static.031130.xyz/uploads/2025/06/03/a9b473a3bd120.webp",[17,6938,6939],{},"借着免专利的东风和 Google 自家产品矩阵的强推，VP9 在 YouTube、WebRTC 乃至 Chrome 浏览器中迅速站稳了脚跟。特别是在 AV1 普及之前，VP9 几乎是网页视频播放领域的事实标准，甚至逼得苹果这个“编解码俱乐部元老”在 macOS 11 Big Sur 和 iOS 14 上的 Safari 破天荒地加入了 VP9 支持（尽管 VP9 in webm 的支持稍晚一些，具体见上表）。",[17,6941,6942],{},"VP9 的软解码支持基本无死角：Chromium、Firefox、Edge 都原生支持，Safari 也一反常态地“从了”。硬件解码方面，从 Intel Skylake（第六代酷睿）开始，NVIDIA GTX 950 及以上、AMD Vega 和 RDNA 系显卡基本都具备完整的 VP9 解码能力——总之，只要不是博物馆级别的老电脑，就能愉快播放 VP9 视频。",[17,6944,6945],{},"当然，编码仍是 VP9 的短板。Google 官方提供的开源实现 libvpx，速度比不上 x264/x265 等老牌选手，在缺乏硬件加速的场景下，仍然属于“关机前压一宿”的那种体验。不过相比 AV1 的 libaom-av1，VP9 至少还能算“可用”，适合轻量化应用、实时通信或是对压制速度敏感的用户，而早在 7 代 Intel 的 Kaby Lake 系列产品就已经引入了 VP9 的硬件编码支持，各家硬件厂商对 VP9 硬件编码的支持发展到今天还算不错。",[1169,6947,6949],{"id":6948},"h264-avc","H.264 / AVC",[17,6951,6952],{},"作为“老将出马一个顶俩”的代表，H.264 / AVC 无疑是过去二十年视频编码领域的霸主。自 2003 年标准确定以来，凭借良好的压缩效率、广泛的硬件支持和相对合理的专利授权策略，H.264 迅速成为从网络视频、蓝光光盘到直播、监控乃至手机录像的默认选择。如果你打开一个视频网站的视频流、下载一个在线视频、剪辑一个 vlog，大概率都绕不开 H.264 的身影。",[17,6954,6955,6956,6959],{},"H.264 的最大优势在于——",[21,6957,6958],{},"兼容性无敌","。不夸张地说，只要是带屏幕的设备，就能播放 H.264 视频。软解？早在十几年前的浏览器和媒体播放器中就已普及；硬解？从 Intel Sandy Bridge、NVIDIA Fermi、AMD VLIW4 这些“史前”架构开始就已加入对 H.264 的完整支持——你甚至可以在树莓派、智能冰箱上流畅播放 H.264 视频。",[17,6961,6962],{},"虽然 H.264 同样存在和 H.265 相同的专利问题，但其授权策略明显更温和——MPEG LA 提供的专利池授权门槛较低，且不向免费网络视频收取费用，使得包括 Chromium、Firefox 在内的浏览器都默认集成了 H.264 的软解功能。Apple 和 Microsoft 更是早早将其作为视频编码和解码的第一公民，Safari 和 Edge 天生支持 H.264，不存在任何兼容性烦恼。",[17,6964,6965],{},"当然，作为一项 20 多年前的技术，H.264 在压缩效率上已经明显落后于 VP9、HEVC 和 AV1。相同画质下，H.264 的码率要比 AV1 高出 30～50%，在追求极致带宽利用或存储节省的应用场景中就显得有些力不从心。然而在今天这个“能播比好看更重要”的现实环境中，H.264 依然是默认方案，是“稳健老哥”的代名词。",[17,6967,6968],{},"所以，即便 AV1、HEVC、VP9 各有亮点，H.264 依旧凭借“老、稳、全”三大核心竞争力，在 2025 年依然牢牢占据着视频生态链的中枢地位——只要这个世界还有浏览器不支持 AV1（可恶的 Safari 不支持软解），服务器不想烧钱转码视频，或用户设备太老，H.264 就不会退场。",[1169,6970,6971],{"id":6971},"小结",[17,6973,6974],{},"在视频编码方面，浏览器不再是那个能靠一己之力抹平硬件和系统差异的超人，所以总有一些特殊情况是表格中无法涵盖的。",[6976,6977,6978,7003],"table",{},[6979,6980,6981],"thead",{},[6982,6983,6984,6988,6991,6994,6997,7000],"tr",{},[6985,6986,6987],"th",{},"编解码器",[6985,6989,6990],{},"压缩效率",[6985,6992,6993],{},"浏览器",[6985,6995,6996],{},"桌面端支持",[6985,6998,6999],{},"移动端支持",[6985,7001,7002],{},"备注",[7004,7005,7006,7025,7041,7064,7085,7102,7119,7135,7149,7166,7183,7197],"tbody",{},[6982,7007,7008,7011,7014,7017,7020,7022],{},[7009,7010,6861],"td",{},[7009,7012,7013],{},"★★★",[7009,7015,7016],{},"Chrome / Chromium",[7009,7018,7019],{},"是 (v70+，发布于 2018 年 10 月)",[7009,7021,7019],{},[7009,7023,7024],{},"硬解优先，软解后备",[6982,7026,7027,7029,7031,7033,7036,7039],{},[7009,7028],{},[7009,7030],{},[7009,7032,1082],{},[7009,7034,7035],{},"是 (v67+，发布于 2019 年 5 月)",[7009,7037,7038],{},"是 (v113+，发布于 2023 年 5 月)",[7009,7040,7024],{},[6982,7042,7043,7045,7047,7050,7053,7055],{},[7009,7044],{},[7009,7046],{},[7009,7048,7049],{},"Safari",[7009,7051,7052],{},"不完全支持 (仅近两年的产品支持)",[7009,7054,7052],{},[7009,7056,7057,7060,7061],{},[21,7058,7059],{},"仅支持硬解"," (M3, A17 Pro 系芯片后开始支持)，",[21,7062,7063],{},"无软解支持",[6982,7065,7066,7069,7072,7074,7077,7079],{},[7009,7067,7068],{},"HEVC (H.265)",[7009,7070,7071],{},"★★☆",[7009,7073,7016],{},[7009,7075,7076],{},"不完全支持",[7009,7078,7076],{},[7009,7080,7081,7084],{},[21,7082,7083],{},"仅支持硬解，无软解支持","（Windows 可从微软商店安装付费的软解插件）",[6982,7086,7087,7089,7091,7093,7095,7097],{},[7009,7088],{},[7009,7090],{},[7009,7092,1082],{},[7009,7094,7076],{},[7009,7096,7076],{},[7009,7098,7099,7101],{},[21,7100,7083],{},"（Linux 可依赖系统 ffmpeg 实现软解）",[6982,7103,7104,7106,7108,7110,7113,7116],{},[7009,7105],{},[7009,7107],{},[7009,7109,7049],{},[7009,7111,7112],{},"近期设备全部支持 (macOS High Sierra+，发布于 2017 年 6 月)",[7009,7114,7115],{},"近期设备全部支持 (iOS 11+，发布于 2017 年 10 月)",[7009,7117,7118],{},"苹果是 H.265 一等公民",[6982,7120,7121,7123,7125,7127,7130,7132],{},[7009,7122,6921],{},[7009,7124,7071],{},[7009,7126,7016],{},[7009,7128,7129],{},"是",[7009,7131,7129],{},[7009,7133,7134],{},"支持良好",[6982,7136,7137,7139,7141,7143,7145,7147],{},[7009,7138],{},[7009,7140],{},[7009,7142,1082],{},[7009,7144,7129],{},[7009,7146,7129],{},[7009,7148,7134],{},[6982,7150,7151,7153,7155,7157,7160,7163],{},[7009,7152],{},[7009,7154],{},[7009,7156,7049],{},[7009,7158,7159],{},"是 (v14.1+，发布于 2021 年 4 月)",[7009,7161,7162],{},"是 (iOS 17.4+，发布于 2024 年 3 月)",[7009,7164,7165],{},"支持稍晚（此处指兼容 vp9 的 webm 时间，vp9 in WebRTC 的兼容时间更早）",[6982,7167,7168,7171,7174,7176,7178,7180],{},[7009,7169,7170],{},"H.264 (AVC)",[7009,7172,7173],{},"★☆☆",[7009,7175,7016],{},[7009,7177,7129],{},[7009,7179,7129],{},[7009,7181,7182],{},"通用",[6982,7184,7185,7187,7189,7191,7193,7195],{},[7009,7186],{},[7009,7188],{},[7009,7190,1082],{},[7009,7192,7129],{},[7009,7194,7129],{},[7009,7196,7182],{},[6982,7198,7199,7201,7203,7205,7207,7209],{},[7009,7200],{},[7009,7202],{},[7009,7204,7049],{},[7009,7206,7129],{},[7009,7208,7129],{},[7009,7210,7182],{},[109,7212,7214],{"id":7213},"怎么选","怎么选？",[17,7216,7217],{},"我们不是专业的视频托管平台，不像 YouTube、Bilibili 那样专业到可以向用户提供多种分辨率、压缩算法的选择。",[17,7219,7220],{},[784,7221],{"alt":7222,"src":7223},"Bilibili 为用户提供了三种压缩算法的视频源","https://static.031130.xyz/uploads/2025/06/03/096484dbc0f3a.webp",[17,7225,7226,7227,7230],{},"最终的选择策略，必须在",[21,7228,7229],{},"压缩效率、播放兼容性、编码耗时","等维度之间做出权衡。",[1169,7232,7234],{"id":7233},"选择一av1-挑大梁h264-保兼容","选择一：AV1 挑大梁，H.264 保兼容",[17,7236,7237,7238,7241,7242,7245],{},"现代浏览器支持在 ",[30,7239,7240],{},"\u003Cvideo>"," 标签中使用 ",[30,7243,7244],{},"\u003Csource>"," 标签和 MIME type 让浏览器按需播放",[38,7247,7251],{"className":7248,"code":7249,"language":7250,"meta":43,"style":43},"language-html shiki shiki-themes one-light one-dark-pro","\u003Cvideo controls poster=\"preview.jpg\">\n  \u003Csource src=\"video.av1.webm\" type='video/webm; codecs=\"av01\"' />\n  \u003Csource src=\"video.h264.mp4\" type='video/mp4' />\n  当前浏览器不支持视频播放\n\u003C/video>\n","html",[30,7252,7253,7273,7298,7320,7325],{"__ignoreMap":43},[47,7254,7255,7257,7260,7263,7266,7268,7271],{"class":49,"line":50},[47,7256,608],{"class":150},[47,7258,7259],{"class":167},"video",[47,7261,7262],{"class":744}," controls",[47,7264,7265],{"class":744}," poster",[47,7267,320],{"class":150},[47,7269,7270],{"class":205},"\"preview.jpg\"",[47,7272,3402],{"class":150},[47,7274,7275,7277,7280,7283,7285,7288,7291,7293,7296],{"class":49,"line":56},[47,7276,3407],{"class":150},[47,7278,7279],{"class":167},"source",[47,7281,7282],{"class":744}," src",[47,7284,320],{"class":150},[47,7286,7287],{"class":205},"\"video.av1.webm\"",[47,7289,7290],{"class":744}," type",[47,7292,320],{"class":150},[47,7294,7295],{"class":205},"'video/webm; codecs=\"av01\"'",[47,7297,3421],{"class":150},[47,7299,7300,7302,7304,7306,7308,7311,7313,7315,7318],{"class":49,"line":62},[47,7301,3407],{"class":150},[47,7303,7279],{"class":167},[47,7305,7282],{"class":744},[47,7307,320],{"class":150},[47,7309,7310],{"class":205},"\"video.h264.mp4\"",[47,7312,7290],{"class":744},[47,7314,320],{"class":150},[47,7316,7317],{"class":205},"'video/mp4'",[47,7319,3421],{"class":150},[47,7321,7322],{"class":49,"line":68},[47,7323,7324],{"class":150},"  当前浏览器不支持视频播放\n",[47,7326,7327,7329,7331],{"class":49,"line":74},[47,7328,3426],{"class":150},[47,7330,7259],{"class":167},[47,7332,3402],{"class":150},[17,7334,7335,7336,7338],{},"通过这样的写法，浏览器会自动选择最先能解码的 ",[30,7337,7279],{},"，无需写复杂的判断逻辑或使用 JavaScript 动态切换。默认的 AV1 编码在最大程度上减少了传输流量降低成本，享受现代浏览器与设备的压缩红利；而 H.264 则作为兜底方案，保证了在不支持 AV1 的 Safari 等老旧设备上的回放兼容性。",[17,7340,7341],{},"然而这个选择可能并不是太合适，一方面我手上最先进的处理器 Apple M4 并不支持硬件编码 AV1 视频，5 分钟的视频压完需要整整 3 个小时，如果还需要视压缩质量来回调整压缩参数重新压上几次，那可真是遭老罪了；另一方面，即使 Chromium / Firefox 等主流浏览器内核现在都支持 AV1 的软解，但在一些硬件较老的设备上播放 AV1 编码的视频可能让用户的电脑风扇原地起飞，这一点在 YouTube 大力推广 AV1 的时候就曾遭到不少用户的诟病。",[1169,7343,7345],{"id":7344},"选择二vp9-独挑大梁","选择二：VP9 独挑大梁",[17,7347,7348,7349,7352],{},"考虑到 AV1 编码的高昂成本和",[6794,7350,7351],{},"用户电脑风扇原地起飞的风险","，VP9 也是一个非常具有竞争力的选择。VP9 在主流浏览器中得到了非常好的兼容，因此可以考虑放弃 H.264 的 fallback 方案独挑大梁。而 VP9 硬件编码在近几年的硬件设备上的普遍支持也给足了我勇气，让我可以多次调整压缩质量重新压缩，找一个在文件体积和画面清晰度之间的 sweet point。",[17,7354,7355],{},[7356,7357,7358],"em",{},"由于是 VP9 独挑大梁，因此大多数人可能会考虑使用与 VP9 最为适配的 webm 格式封装视频。但目前在 webm 中最广泛使用的音频编码 opus 在 Safari 上的兼容性并不是太好（在 2024 年 3 月发布的 Safari 17.4 才开始支持），建议斟酌一下是不是继续用回 AAC 编码，并将视频封装在 mp4 中。",[17,7360,7361],{},[784,7362],{"alt":7363,"src":7364},"https://caniuse.com/opus","https://static.031130.xyz/uploads/2025/06/03/ec3b5dbcbcc29.webp",[109,7366,7368],{"id":7367},"音频码率太高再砍一刀","音频码率太高？再砍一刀",[17,7370,7371],{},"上面说了那么多的视频压缩算法，其实只是局限于视频画面的压缩，音频这一块其实还能再压一点出来。",[38,7373,7376],{"className":7374,"code":7375,"language":2738},[5977],"Stream #0:1[0x2](und): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, stereo, fltp, 128 kb/s (default)\n",[30,7377,7375],{"__ignoreMap":43},[17,7379,7380],{},"一个介绍产品的视频，在音频部分采用了 48000 Hz 双声道采样，码率高达 128 kbps，说实话有点奢侈。我直接砍成 64 kbps 单声道，又省下 2MB 的文件大小。",[109,7382,7383],{"id":7383},"写在最后",[17,7385,7386],{},"对于前端开发者来说，视频压缩算法的选择早已不是单纯的“压得小不小”问题，而是一场在设备能力、浏览器兼容性、用户体验与开发成本之间的博弈。我们既要跟上技术演进的节奏，拥抱 AV1、VP9 等更高效的编解码器，也要在实际项目中照顾到现实中的设备分布和播放环境。",[17,7388,7389],{},"在理想与落地之间，我们所能做的，就是充分利用 HTML5 提供的容错机制，搭配好合适的编码策略和封装格式，让网页上的每一段视频都能在合适的设备上、以合理的代价播放出来。",[17,7391,7392,7393,7395,7396,7398],{},"毕竟，Web 从来不缺“能不能做”，缺的是“做得优雅”。如果说编码器是硬件工程师和视频平台的战场，那 ",[30,7394,7240],{}," 标签下的这几行 ",[30,7397,7244],{},"，才是属于我们前端工程师的战壕。",[109,7400,1049],{"id":1049},[1021,7402,7403,7410,7417,7424,7431,7438,7445,7452,7458,7465,7472,7479,7486,7493,7500,7507,7517,7524,7531],{},[1024,7404,7405],{},[804,7406,7409],{"href":7407,"rel":7408},"https://developer.mozilla.org/zh-CN/docs/Web/Media/Guides/Formats/Video_codecs",[808],"网页视频编码指南 - Web 媒体技术 | MDN",[1024,7411,7412],{},[804,7413,7416],{"href":7414,"rel":7415},"https://research.netflix.com/research-area/video-encoding-and-quality",[808],"Encoding & Quality - Netflix Research",[1024,7418,7419],{},[804,7420,7423],{"href":7421,"rel":7422},"https://optiview.dolby.com/resources/blog/playback/how-the-vp9-codec-supports-now-streaming-to-apple-devices-more/",[808],"How the VP9 Codec Supports Now Streaming to Apple Devices & More | dolby.io",[1024,7425,7426],{},[804,7427,7430],{"href":7428,"rel":7429},"https://www.chromium.org/audio-video/",[808],"Audio/Video | The Chromium Project",[1024,7432,7433],{},[804,7434,7437],{"href":7435,"rel":7436},"https://caniuse.com/av1",[808],"AV1 video format | Can I use... Support tables for HTML5, CSS3, etc",[1024,7439,7440],{},[804,7441,7444],{"href":7442,"rel":7443},"https://caniuse.com/webm",[808],"WebM video format | Can I use... Support tables for HTML5, CSS3, etc",[1024,7446,7447],{},[804,7448,7451],{"href":7449,"rel":7450},"https://caniuse.com/hevc",[808],"HEVC/H.265 video format | Can I use... Support tables for HTML5, CSS3, etc",[1024,7453,7454],{},[804,7455,7457],{"href":7363,"rel":7456},[808],"Opus audio format | Can I use... Support tables for HTML5, CSS3, etc",[1024,7459,7460],{},[804,7461,7464],{"href":7462,"rel":7463},"https://caniuse.com/mpeg4",[808],"MPEG-4/H.264 video format | Can I use... Support tables for HTML5, CSS3, etc",[1024,7466,7467],{},[804,7468,7471],{"href":7469,"rel":7470},"https://en.wikipedia.org/wiki/AV1",[808],"AV1 - Wikipedia",[1024,7473,7474],{},[804,7475,7478],{"href":7476,"rel":7477},"https://en.wikipedia.org/wiki/High_Efficiency_Video_Coding",[808],"High Efficiency Video Coding - Wikipedia",[1024,7480,7481],{},[804,7482,7485],{"href":7483,"rel":7484},"https://en.wikipedia.org/wiki/VP9",[808],"VP9 - Wikipedia",[1024,7487,7488],{},[804,7489,7492],{"href":7490,"rel":7491},"https://en.wikipedia.org/wiki/Advanced_Video_Coding",[808],"Advanced Video Coding - Wikipedia",[1024,7494,7495],{},[804,7496,7499],{"href":7497,"rel":7498},"https://www.intel.com/content/www/us/en/developer/articles/technical/encode-and-decode-capabilities-for-7th-generation-intel-core-processors-and-newer.html",[808],"Encode and Decode Capabilities for 7th Generation Intel® Core™...",[1024,7501,7502],{},[804,7503,7506],{"href":7504,"rel":7505},"https://zh.wikipedia.org/zh-cn/MacOS_High_Sierra",[808],"macOS High Sierra - 维基百科，自由的百科全书",[1024,7508,7509],{},[804,7510,7513,7514],{"href":7511,"rel":7512},"https://www.androidpolice.com/2018/10/17/chrome-70-adds-av1-video-support-improves-pwas-windows-apk-download/",[808],"Chrome 70 adds AV1 video support, improves PWAs on Windows, and more ",[47,7515,7516],{},"APK Download",[1024,7518,7519],{},[804,7520,7523],{"href":7521,"rel":7522},"https://www.mozilla.org/en-US/firefox/android/113.0/releasenotes/",[808],"Firefox for Android 113.0, See All New Features, Updates and Fixes",[1024,7525,7526],{},[804,7527,7530],{"href":7528,"rel":7529},"https://www.bilibili.com/video/BV1nW4y1V7kR/",[808],"视频网站的“蓝光”是怎么骗你的？——视频画质全解析【柴知道】_哔哩哔哩_bilibili",[1024,7532,7533],{},"《4K 清晰度不如4年前，视频变糊是你的错觉吗》- 原视频已 404",[1067,7535,7536],{},"html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":43,"searchDepth":56,"depth":56,"links":7538},[7539,7546,7550,7551,7552],{"id":6856,"depth":56,"text":6857,"children":7540},[7541,7542,7543,7544,7545],{"id":6860,"depth":62,"text":6861},{"id":6897,"depth":62,"text":6898},{"id":6920,"depth":62,"text":6921},{"id":6948,"depth":62,"text":6949},{"id":6971,"depth":62,"text":6971},{"id":7213,"depth":56,"text":7214,"children":7547},[7548,7549],{"id":7233,"depth":62,"text":7234},{"id":7344,"depth":62,"text":7345},{"id":7367,"depth":56,"text":7368},{"id":7383,"depth":56,"text":7383},{"id":1049,"depth":56,"text":1049},{"title":7554,"date":7555,"path":7556,"tags":7557,"body":7558},"el-image 和 el-table 怎么就打架了？Stacking Context 是什么？","2025-05-31 00:29:40","/2025/05/31/el-image-and-el-table-why-the-fight-and-what-is-a-stacking-context",[2077,12,5386,4003,2080],{"type":14,"value":7559,"toc":7775},[7560,7563,7569,7576,7578,7581,7586,7589,7594,7631,7634,7638,7641,7644,7656,7659,7663,7666,7695,7699,7703,7706,7709,7712,7715,7726,7733,7735,7772],[17,7561,7562],{},"这是精弘内部的图床开发时遇到的事情，大一的小朋友反馈说 el-image 和 el-table 打架了。",[17,7564,7565],{},[784,7566],{"alt":7567,"src":7568},"截图","https://static.031130.xyz/uploads/2025/05/31/c6674f6f13955.webp",[17,7570,7571,7575],{},[804,7572,6277],{"href":7573,"rel":7574},"https://static.031130.xyz/demo/el-image-el-table-conflict.html",[808]," 的 iframe 引入",[5340,7577],{"src":7573,"width":5343,"height":5344,"allowFullScreen":184},[17,7579,7580],{},"看到后面的表格透出 el-image 的预览层，我的第一反应是叫小朋友去检查 z-index 是否正确，el-image 的 mask 遮罩的 z-index 是否大于表格。",[17,7582,7583],{},[784,7584],{"alt":43,"src":7585},"https://static.031130.xyz/uploads/2025/05/31/1c20b4ea0b37e.webp",[17,7587,7588],{},"经过我本地调试，发现 z-index 的设置确实没问题，但后面的元素为什么会透出来？谷歌搜索一番，找到了这篇文章",[17,7590,7591],{},[784,7592],{"alt":43,"src":7593},"https://static.031130.xyz/uploads/2025/05/31/99845899e3524.webp",[1609,7595,7596,7599],{},[17,7597,7598],{},"给 el-table 加一行如下代码即可",[38,7600,7604],{"className":7601,"code":7602,"language":7603,"meta":43,"style":43},"language-css shiki shiki-themes one-light one-dark-pro",".el-table__cell {\n    position: static !important;\n}\n","css",[30,7605,7606,7613,7627],{"__ignoreMap":43},[47,7607,7608,7611],{"class":49,"line":50},[47,7609,7610],{"class":744},".el-table__cell",[47,7612,641],{"class":150},[47,7614,7615,7618,7622,7625],{"class":49,"line":56},[47,7616,7617],{"class":150},"    position: ",[47,7619,7621],{"class":7620},"sYebD","static",[47,7623,7624],{"class":134}," !important",[47,7626,4145],{"class":150},[47,7628,7629],{"class":49,"line":62},[47,7630,2716],{"class":150},[17,7632,7633],{},"经本地调试确认，这一方案确实能解决问题，但为什么呢？这就涉及到 Stacking Context （层叠上下文）了。",[109,7635,7637],{"id":7636},"stacking-context层叠上下文究竟是什么","Stacking Context（层叠上下文）究竟是什么？",[17,7639,7640],{},"简单来说，Stacking Context 可以被类比成画布。在同一块画布上，z-index 值越高的元素就处于越上方，会覆盖掉 z-index 较低的元素，这也是为什么我最开始让检查 z-index 的设置是否有问题。但问题出在 Stacking Context 也是有上下顺序之分的。",[17,7642,7643],{},"现在假设我们有 A、B 两块画布，在 A 上有一个设置了 z-index 为 1145141919810 的元素。那这个元素具备非常高的优先级，理应出现在浏览器窗口的最上方。但如果 B 画布的优先级高于 A 画布，那么 B 元素上的所有元素都会优先显示（当了躺赢狗）。那么画布靠什么来决定优先级呢？",[1021,7645,7646,7651],{},[1024,7647,7648],{},[21,7649,7650],{},"处于同级的 Stacking Context 之间靠 z-index 值来区分优先级",[1024,7652,7653],{},[21,7654,7655],{},"对于 z-index 值相同的 Stacking Context，在 html 文档中位置靠后的元素拥有更高的优先级",[17,7657,7658],{},"第二条规则也能解释为什么在上面的 demo 中，只有在表格中位置排在图片元素后面的元素出现了透出来的情况。",[109,7660,7662],{"id":7661},"所以为什么-el-image-和-el-table-打架了","所以为什么 el-image 和 el-table 打架了？",[17,7664,7665],{},"这次的冲突主要是下面两个因素引起的",[1215,7667,7668,7684],{},[1024,7669,7670,7671,7674,7675,7677,7681,7683],{},"el-table 给每个 cell 都设置了 ",[30,7672,7673],{},"position: relative"," 的 css 属性，而 position 被设为 relative 时，当前元素就会生成一个 Stacking Context。",[5933,7676],{},[784,7678],{"alt":7679,"src":7680},"image-20250531013029154","https://static.031130.xyz/uploads/2025/05/31/9df43b865b3c6.webp",[5933,7682],{},"所以我们这么一个有十个格子的表格，其实就生成了十个画布。而这其中每个画布 z-index 都为 1。根据刚才的规则，在图片格子后面的那些格子对应的 html 代码片段在整体的 html 文档中更靠后，所以他们的优先级都高于图片格子。",[1024,7685,7686,7687,7689,7692,7694],{},"el-image 的预览功能所展开的遮罩层处于 el-image 标签内部",[5933,7688],{},[784,7690],{"alt":43,"src":7691},"https://static.031130.xyz/uploads/2025/05/31/f18a2b54afd63.webp",[5933,7693],{},"上图中橙色部分是 el-image 在预览时提供的遮罩，可以看到 element-plus 组件的 image 预览的默认行为是将预览时所需要的遮罩层直接放在 \u003Cel-image> \u003C/el-image> 标签内部，这导致 el-image 的遮罩层被困在一个低优先级的 Stacking Context 中，后面的格子里的内容就是能凭借高优先级透过来。",[109,7696,7698],{"id":7697},"所以解决方案是什么","所以解决方案是什么？",[1169,7700,7702],{"id":7701},"更改-position-值在这里确实是可行的","更改 position 值在这里确实是可行的",[17,7704,7705],{},"上面我谷歌搜到的将 el-table 中 cell 的 position 值强制设为 static 确实是有效的，因为 static 不会创建新的 Stacking Context，这样就不会有现在的问题。",[1169,7707,7708],{"id":7708},"将需要出现在最顶层的代码放置在优先级最大的位置是更常见的方案",[17,7710,7711],{},"但别的组件库在处理这个需求时，一般会将预览时提供的遮罩的 html 代码片段直接插入到 body 标签内部的最尾部，并设置一个相对比较大的 z-index 值，以确保这个遮罩层能够获得最高的优先级，以此能出现在屏幕的最上方。（像一些 dialog 对话框、popover 悬浮框也都是这个原理）。",[17,7713,7714],{},"事实上，element-plus 组件库也提供了这个功能",[1609,7716,7717],{},[17,7718,7719,7722,7723],{},[21,7720,7721],{},"preview-teleported:"," image-viewer 是否插入至 body 元素上。嵌套的父元素属性会发生修改时应该将此属性设置为 ",[30,7724,7725],{},"true",[17,7727,7728,7729,7732],{},"所以在使用 el-image 时传入一个 ",[30,7730,7731],{},":preview-teleported=\"true\""," 是一个更普适的方案，因为我们并不能确保 el-image 的父元素除了 el-table 的 cell 以外还有什么其他的父元素会创建新的 Stacking Context。",[109,7734,1049],{"id":1049},[1021,7736,7737,7744,7751,7758,7765],{},[1024,7738,7739],{},[804,7740,7743],{"href":7741,"rel":7742},"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_positioned_layout/Stacking_context",[808],"层叠上下文 - CSS：层叠样式表 | MDN",[1024,7745,7746],{},[804,7747,7750],{"href":7748,"rel":7749},"https://juejin.cn/post/6844903667175260174",[808],"彻底搞懂CSS层叠上下文、层叠等级、层叠顺序、z-index最近，在项目中遇到一个关于CSS中元素z-index属性的问 - 掘金",[1024,7752,7753],{},[804,7754,7757],{"href":7755,"rel":7756},"https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/",[808],"深入理解CSS中的层叠上下文和层叠顺序 «  张鑫旭-鑫空间-鑫生活",[1024,7759,7760],{},[804,7761,7764],{"href":7762,"rel":7763},"https://element-plus.org/zh-CN/component/image.html",[808],"Image 图片 | Element Plus",[1024,7766,7767],{},[804,7768,7771],{"href":7769,"rel":7770},"https://blog.csdn.net/qq_61402485/article/details/131202117",[808],"element ui e-image 和e-table一起使用显示问题_el-table el-image-CSDN博客",[1067,7773,7774],{},"html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sYebD, html code.shiki .sYebD{--shiki-default:#383A42;--shiki-dark:#D19A66}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":43,"searchDepth":56,"depth":56,"links":7776},[7777,7778,7779,7783],{"id":7636,"depth":56,"text":7637},{"id":7661,"depth":56,"text":7662},{"id":7697,"depth":56,"text":7698,"children":7780},[7781,7782],{"id":7701,"depth":62,"text":7702},{"id":7708,"depth":62,"text":7708},{"id":1049,"depth":56,"text":1049},127,1761769020788]