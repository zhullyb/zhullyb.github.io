[{"data":1,"prerenderedAt":7783},["ShallowReactive",2],{"randomIndex/archives":3,"index-page-1":4,"posts-nums-total":7782},11,[5,1075,1451,1664,2071,3997,5378,6253,6842,7551],{"title":6,"date":7,"path":8,"tags":9,"body":13},"Nuxt Content v3 中数组字段的筛选困境与性能优化","2025-10-20 21:52:59","/2025/10/20/nuxt-content-v3-z-array-query-challenge",[10,11,12],"Nuxt","Nuxt Content","JavaScript",{"type":14,"value":15,"toc":1069},"minimark",[16,34,37,101,108,113,123,254,269,447,457,467,471,474,756,762,780,787,792,796,809,826,832,846,1016,1019,1029,1035,1041,1046,1049,1056,1065],[17,18,19,20,24,25,28,29,33],"p",{},"Nuxt Content 是 Nuxt 生态中用于处理 Markdown、YAML 等内容的强大模块。最近，我在使用 ",[21,22,23],"strong",{},"Nuxt v4 + Nuxt Content v3"," 重构博客（原为 Hexo）时，遇到了一个棘手的问题：v3 版本的默认查询 API ",[21,26,27],{},"并未直接提供","对数组字段进行“包含”（",[30,31,32],"code",{},"$contains","）操作的支持。",[17,35,36],{},"例如，这是我的正在写的这篇博客的 Front Matter：",[38,39,44],"pre",{"className":40,"code":41,"language":42,"meta":43,"style":43},"language-markdown shiki shiki-themes one-light one-dark-pro","---\ntitle: Nuxt Content v3 中数组字段的筛选困境\ndate: 2025-10-20 21:52:59\nsticky:\ntags:\n- Nuxt\n- Nuxt Content\n- JavaScript\n---\n","markdown","",[30,45,46,54,60,66,72,78,84,90,96],{"__ignoreMap":43},[47,48,51],"span",{"class":49,"line":50},"line",1,[47,52,53],{},"---\n",[47,55,57],{"class":49,"line":56},2,[47,58,59],{},"title: Nuxt Content v3 中数组字段的筛选困境\n",[47,61,63],{"class":49,"line":62},3,[47,64,65],{},"date: 2025-10-20 21:52:59\n",[47,67,69],{"class":49,"line":68},4,[47,70,71],{},"sticky:\n",[47,73,75],{"class":49,"line":74},5,[47,76,77],{},"tags:\n",[47,79,81],{"class":49,"line":80},6,[47,82,83],{},"- Nuxt\n",[47,85,87],{"class":49,"line":86},7,[47,88,89],{},"- Nuxt Content\n",[47,91,93],{"class":49,"line":92},8,[47,94,95],{},"- JavaScript\n",[47,97,99],{"class":49,"line":98},9,[47,100,53],{},[17,102,103,104,107],{},"我的目标是创建一个 ",[21,105,106],{},"Tag 页面","，列出所有包含特定 Tag（例如 'Nuxt'）的文章。",[109,110,112],"h2",{"id":111},"v2-的便捷与-v3-的限制","v2 的便捷与 v3 的限制",[17,114,115,116,119,120,122],{},"在 Nuxt Content v2 中，数据基于文件系统存储，查询方式是对文件内容的抽象，模拟了类似 ",[21,117,118],{},"MongoDB 的 JSON 文档查询","语法。我们可以轻松地使用 ",[30,121,32],{}," 方法获取所有包含 “Nuxt” 标签的文章：",[38,124,128],{"className":125,"code":126,"language":127,"meta":43,"style":43},"language-typescript shiki shiki-themes one-light one-dark-pro","const tag = decodeURIComponent(route.params.tag as string)\n\nconst articles = await queryContent('posts')\n  .where({ tags: { $contains: tag } })  // ✅ v2 中的 MongoDB Style 查询\n  .find()\n","typescript",[30,129,130,180,186,209,244],{"__ignoreMap":43},[47,131,132,136,140,144,148,152,156,159,163,165,169,173,177],{"class":49,"line":50},[47,133,135],{"class":134},"sLKXg","const",[47,137,139],{"class":138},"sNmU0"," tag",[47,141,143],{"class":142},"s_Sar"," =",[47,145,147],{"class":146},"sAdtL"," decodeURIComponent",[47,149,151],{"class":150},"s5ixo","(",[47,153,155],{"class":154},"s7GmK","route",[47,157,158],{"class":150},".",[47,160,162],{"class":161},"s2QsP","params",[47,164,158],{"class":150},[47,166,168],{"class":167},"sJa8x","tag",[47,170,172],{"class":171},"sblXP"," as",[47,174,176],{"class":175},"sN9Y4"," string",[47,178,179],{"class":150},")\n",[47,181,182],{"class":49,"line":56},[47,183,185],{"emptyLinePlaceholder":184},true,"\n",[47,187,188,190,193,195,198,201,203,207],{"class":49,"line":62},[47,189,135],{"class":134},[47,191,192],{"class":138}," articles",[47,194,143],{"class":142},[47,196,197],{"class":134}," await",[47,199,200],{"class":146}," queryContent",[47,202,151],{"class":150},[47,204,206],{"class":205},"sDhpE","'posts'",[47,208,179],{"class":150},[47,210,211,214,217,220,223,227,230,232,234,237,240],{"class":49,"line":68},[47,212,213],{"class":150},"  .",[47,215,216],{"class":146},"where",[47,218,219],{"class":150},"({ ",[47,221,222],{"class":167},"tags",[47,224,226],{"class":225},"st7oF",":",[47,228,229],{"class":150}," { ",[47,231,32],{"class":167},[47,233,226],{"class":225},[47,235,139],{"class":236},"sz0mV",[47,238,239],{"class":150}," } })  ",[47,241,243],{"class":242},"sW2Sy","// ✅ v2 中的 MongoDB Style 查询\n",[47,245,246,248,251],{"class":49,"line":74},[47,247,213],{"class":150},[47,249,250],{"class":146},"find",[47,252,253],{"class":150},"()\n",[17,255,256,257,264,265,268],{},"但在使用 ",[21,258,259,260,263],{},"Nuxt Content v3 的 ",[30,261,262],{},"queryCollection"," API"," 时，我们很自然地会尝试使用 ",[30,266,267],{},".where()"," 方法进行筛选：",[38,270,272],{"className":125,"code":271,"language":127,"meta":43,"style":43},"const tag = decodeURIComponent(route.params.tag as string)\n\nconst { data } = await useAsyncData(`tag-${tag}`, () =>\n    queryCollection('posts')\n        .where(tag, 'in', 'tags')  // ❌ 这样会报错，因为第一次参数必须是字段名\n        .order('date', 'DESC')\n        .select('title', 'date', 'path', 'tags')\n        .all()\n)\n",[30,273,274,302,306,349,360,388,407,434,443],{"__ignoreMap":43},[47,275,276,278,280,282,284,286,288,290,292,294,296,298,300],{"class":49,"line":50},[47,277,135],{"class":134},[47,279,139],{"class":138},[47,281,143],{"class":142},[47,283,147],{"class":146},[47,285,151],{"class":150},[47,287,155],{"class":154},[47,289,158],{"class":150},[47,291,162],{"class":161},[47,293,158],{"class":150},[47,295,168],{"class":167},[47,297,172],{"class":171},[47,299,176],{"class":175},[47,301,179],{"class":150},[47,303,304],{"class":49,"line":56},[47,305,185],{"emptyLinePlaceholder":184},[47,307,308,310,312,315,318,321,323,326,328,331,335,337,340,343,346],{"class":49,"line":62},[47,309,135],{"class":134},[47,311,229],{"class":150},[47,313,314],{"class":138},"data",[47,316,317],{"class":150}," } ",[47,319,320],{"class":142},"=",[47,322,197],{"class":134},[47,324,325],{"class":146}," useAsyncData",[47,327,151],{"class":150},[47,329,330],{"class":205},"`tag-",[47,332,334],{"class":333},"sAOjX","${",[47,336,168],{"class":236},[47,338,339],{"class":333},"}",[47,341,342],{"class":205},"`",[47,344,345],{"class":150},", () ",[47,347,348],{"class":134},"=>\n",[47,350,351,354,356,358],{"class":49,"line":68},[47,352,353],{"class":146},"    queryCollection",[47,355,151],{"class":150},[47,357,206],{"class":205},[47,359,179],{"class":150},[47,361,362,365,367,369,371,374,377,379,382,385],{"class":49,"line":74},[47,363,364],{"class":150},"        .",[47,366,216],{"class":146},[47,368,151],{"class":150},[47,370,168],{"class":236},[47,372,373],{"class":150},", ",[47,375,376],{"class":205},"'in'",[47,378,373],{"class":150},[47,380,381],{"class":205},"'tags'",[47,383,384],{"class":150},")  ",[47,386,387],{"class":242},"// ❌ 这样会报错，因为第一次参数必须是字段名\n",[47,389,390,392,395,397,400,402,405],{"class":49,"line":80},[47,391,364],{"class":150},[47,393,394],{"class":146},"order",[47,396,151],{"class":150},[47,398,399],{"class":205},"'date'",[47,401,373],{"class":150},[47,403,404],{"class":205},"'DESC'",[47,406,179],{"class":150},[47,408,409,411,414,416,419,421,423,425,428,430,432],{"class":49,"line":86},[47,410,364],{"class":150},[47,412,413],{"class":146},"select",[47,415,151],{"class":150},[47,417,418],{"class":205},"'title'",[47,420,373],{"class":150},[47,422,399],{"class":205},[47,424,373],{"class":150},[47,426,427],{"class":205},"'path'",[47,429,373],{"class":150},[47,431,381],{"class":205},[47,433,179],{"class":150},[47,435,436,438,441],{"class":49,"line":92},[47,437,364],{"class":150},[47,439,440],{"class":146},"all",[47,442,253],{"class":150},[47,444,445],{"class":49,"line":98},[47,446,179],{"class":150},[17,448,449,450,452,453,456],{},"遗憾的是，这样是行不通的。",[30,451,267],{}," 的方法签名要求字段名必须作为首个参数传入：",[30,454,455],{},"where(field: keyof Collection | string, operator: SqlOperator, value?: unknown)","。",[17,458,459,460,463,464,466],{},"由于 Nuxt Content v3 ",[21,461,462],{},"底层采用 SQLite 作为本地数据库","，所有查询都必须遵循类 SQL 语法。如果设计时未提供针对数组字段的内置操作符（例如 ",[30,465,32],{}," 的 SQL 等价形式），最终的解决方案往往会显得比较“别扭”。",[109,468,470],{"id":469},"初版实现牺牲性能的全量拉取","初版实现：牺牲性能的“全量拉取”",[17,472,473],{},"本着“尽快重构，后续优化”的思路，我写出了以下代码：",[38,475,477],{"className":125,"code":476,"language":127,"meta":43,"style":43},"// 初版实现：全量拉取后使用 JS 筛选\nconst allPosts = (\n    await useAsyncData(`tag-${route.params.tag}`, () =>\n        queryCollection('posts')\n            .order('date', 'DESC')\n            .select('title', 'date', 'path', 'tags')\n            .all()\n    )\n).data as Ref\u003CPost[]>\n\nconst Posts = computed(() => {\n    return allPosts.value.filter(post =>\n        typeof post.tags?.map === 'function'\n            ? post.tags?.includes(decodeURIComponent(route.params.tag as string))\n            : false\n    )\n})\n",[30,478,479,484,496,528,539,556,580,588,593,615,620,641,668,694,735,745,750],{"__ignoreMap":43},[47,480,481],{"class":49,"line":50},[47,482,483],{"class":242},"// 初版实现：全量拉取后使用 JS 筛选\n",[47,485,486,488,491,493],{"class":49,"line":56},[47,487,135],{"class":134},[47,489,490],{"class":146}," allPosts",[47,492,143],{"class":142},[47,494,495],{"class":150}," (\n",[47,497,498,501,503,505,507,509,511,514,516,518,520,522,524,526],{"class":49,"line":62},[47,499,500],{"class":134},"    await",[47,502,325],{"class":146},[47,504,151],{"class":150},[47,506,330],{"class":205},[47,508,334],{"class":333},[47,510,155],{"class":154},[47,512,158],{"class":513},"sMj0N",[47,515,162],{"class":161},[47,517,158],{"class":513},[47,519,168],{"class":167},[47,521,339],{"class":333},[47,523,342],{"class":205},[47,525,345],{"class":150},[47,527,348],{"class":134},[47,529,530,533,535,537],{"class":49,"line":68},[47,531,532],{"class":146},"        queryCollection",[47,534,151],{"class":150},[47,536,206],{"class":205},[47,538,179],{"class":150},[47,540,541,544,546,548,550,552,554],{"class":49,"line":74},[47,542,543],{"class":150},"            .",[47,545,394],{"class":146},[47,547,151],{"class":150},[47,549,399],{"class":205},[47,551,373],{"class":150},[47,553,404],{"class":205},[47,555,179],{"class":150},[47,557,558,560,562,564,566,568,570,572,574,576,578],{"class":49,"line":80},[47,559,543],{"class":150},[47,561,413],{"class":146},[47,563,151],{"class":150},[47,565,418],{"class":205},[47,567,373],{"class":150},[47,569,399],{"class":205},[47,571,373],{"class":150},[47,573,427],{"class":205},[47,575,373],{"class":150},[47,577,381],{"class":205},[47,579,179],{"class":150},[47,581,582,584,586],{"class":49,"line":86},[47,583,543],{"class":150},[47,585,440],{"class":146},[47,587,253],{"class":150},[47,589,590],{"class":49,"line":92},[47,591,592],{"class":150},"    )\n",[47,594,595,598,600,602,606,609,612],{"class":49,"line":98},[47,596,597],{"class":150},").",[47,599,314],{"class":167},[47,601,172],{"class":171},[47,603,605],{"class":604},"sC09Y"," Ref",[47,607,608],{"class":150},"\u003C",[47,610,611],{"class":604},"Post",[47,613,614],{"class":150},"[]>\n",[47,616,618],{"class":49,"line":617},10,[47,619,185],{"emptyLinePlaceholder":184},[47,621,622,624,627,629,632,635,638],{"class":49,"line":3},[47,623,135],{"class":134},[47,625,626],{"class":138}," Posts",[47,628,143],{"class":142},[47,630,631],{"class":146}," computed",[47,633,634],{"class":150},"(() ",[47,636,637],{"class":134},"=>",[47,639,640],{"class":150}," {\n",[47,642,644,647,649,651,654,656,659,661,665],{"class":49,"line":643},12,[47,645,646],{"class":134},"    return",[47,648,490],{"class":154},[47,650,158],{"class":150},[47,652,653],{"class":161},"value",[47,655,158],{"class":150},[47,657,658],{"class":146},"filter",[47,660,151],{"class":150},[47,662,664],{"class":663},"s8iYz","post",[47,666,667],{"class":134}," =>\n",[47,669,671,675,678,680,682,685,688,691],{"class":49,"line":670},13,[47,672,674],{"class":673},"s7DPa","        typeof",[47,676,677],{"class":154}," post",[47,679,158],{"class":150},[47,681,222],{"class":161},[47,683,684],{"class":150},"?.",[47,686,687],{"class":167},"map",[47,689,690],{"class":142}," ===",[47,692,693],{"class":205}," 'function'\n",[47,695,697,700,702,704,706,708,711,713,716,718,720,722,724,726,728,730,732],{"class":49,"line":696},14,[47,698,699],{"class":673},"            ?",[47,701,677],{"class":154},[47,703,158],{"class":150},[47,705,222],{"class":161},[47,707,684],{"class":150},[47,709,710],{"class":146},"includes",[47,712,151],{"class":150},[47,714,715],{"class":146},"decodeURIComponent",[47,717,151],{"class":150},[47,719,155],{"class":154},[47,721,158],{"class":150},[47,723,162],{"class":161},[47,725,158],{"class":150},[47,727,168],{"class":167},[47,729,172],{"class":171},[47,731,176],{"class":175},[47,733,734],{"class":150},"))\n",[47,736,738,741],{"class":49,"line":737},15,[47,739,740],{"class":673},"            :",[47,742,744],{"class":743},"sAGMh"," false\n",[47,746,748],{"class":49,"line":747},16,[47,749,592],{"class":150},[47,751,753],{"class":49,"line":752},17,[47,754,755],{"class":150},"})\n",[17,757,758,759],{},"这种方法虽然满足了需求，但也带来了明显的性能代价：",[21,760,761],{},"_payload.json 文件体积的膨胀。",[17,763,764,765,768,769,772,773,776,777,779],{},"在 Nuxt 项目中，",[30,766,767],{},"_payload.json"," 用于存储 ",[30,770,771],{},"useAsyncData"," 的结果等动态数据。在全量拉取的方案下，",[21,774,775],{},"每一个 Tag 页面"," 都会加载包含所有文章信息的 ",[30,778,767],{},"，造成数据冗余。很多 Tag 页面仅需一两篇文章的数据，却被迫加载了全部文章信息，严重影响了性能。",[17,781,782],{},[783,784],"img",{"alt":785,"src":786},"tags 目录占据了 2.9MiB，是所有目录中最大的","https://static.031130.xyz/uploads/2025/10/20/a748878c03c64.webp",[17,788,789],{},[783,790],{"alt":767,"src":791},"https://static.031130.xyz/uploads/2025/10/20/8ef786d873da1.webp",[109,793,795],{"id":794},"讨巧方案利用-sqlite-的存储特性进行优化","讨巧方案：利用 SQLite 的存储特性进行优化",[17,797,798,799,801,802,456],{},"为了减少 ",[30,800,771],{}," 返回的查询结果，我查阅了 Nuxt Content 的 GitHub Discussions，发现",[803,804,808],"a",{"href":805,"rel":806},"https://github.com/nuxt/content/discussions/2955",[807],"nofollow","在 v3.alpha.8 版本时就有人提出了一种“巧妙”的解决方案",[17,810,811,812,821,822,825],{},"由于 Nuxt Content v3 使用 SQLite 数据库，原本在 Front Matter 中定义的 ",[21,813,814,816,817,820],{},[30,815,222],{}," 数组（通过 ",[30,818,819],{},"z.array()"," 定义）最终会以 JSON 字符串的形式存储","在数据库中（具体格式可在 ",[30,823,824],{},".nuxt/content/sql_dump.txt"," 文件中查看）。",[17,827,828],{},[783,829],{"alt":830,"src":831},"sql_dump.txt","https://static.031130.xyz/uploads/2025/10/20/b70036c55bb29.webp",[17,833,834,835,838,839,845],{},"这意味着我们可以利用 SQLite 的",[21,836,837],{},"字符串操作","特性，通过 ",[21,840,841,844],{},[30,842,843],{},"LIKE"," 动词配合通配符","来完成数组包含的筛选，本质上是查询 JSON 字符串是否包含特定子串：",[38,847,849],{"className":125,"code":848,"language":127,"meta":43,"style":43},"const tag = decodeURIComponent(route.params.tag as string)\n\nconst { data } = await useAsyncData(`tag-${route.params.tag}`, () =>\n    queryCollection('posts')\n        .where('tags', 'LIKE', `%\"${tag}\"%`)\n        .order('date', 'DESC')\n        .select('title', 'date', 'path', 'tags')\n        .all()\n)\n",[30,850,851,879,883,923,933,964,980,1004,1012],{"__ignoreMap":43},[47,852,853,855,857,859,861,863,865,867,869,871,873,875,877],{"class":49,"line":50},[47,854,135],{"class":134},[47,856,139],{"class":138},[47,858,143],{"class":142},[47,860,147],{"class":146},[47,862,151],{"class":150},[47,864,155],{"class":154},[47,866,158],{"class":150},[47,868,162],{"class":161},[47,870,158],{"class":150},[47,872,168],{"class":167},[47,874,172],{"class":171},[47,876,176],{"class":175},[47,878,179],{"class":150},[47,880,881],{"class":49,"line":56},[47,882,185],{"emptyLinePlaceholder":184},[47,884,885,887,889,891,893,895,897,899,901,903,905,907,909,911,913,915,917,919,921],{"class":49,"line":62},[47,886,135],{"class":134},[47,888,229],{"class":150},[47,890,314],{"class":138},[47,892,317],{"class":150},[47,894,320],{"class":142},[47,896,197],{"class":134},[47,898,325],{"class":146},[47,900,151],{"class":150},[47,902,330],{"class":205},[47,904,334],{"class":333},[47,906,155],{"class":154},[47,908,158],{"class":513},[47,910,162],{"class":161},[47,912,158],{"class":513},[47,914,168],{"class":167},[47,916,339],{"class":333},[47,918,342],{"class":205},[47,920,345],{"class":150},[47,922,348],{"class":134},[47,924,925,927,929,931],{"class":49,"line":68},[47,926,353],{"class":146},[47,928,151],{"class":150},[47,930,206],{"class":205},[47,932,179],{"class":150},[47,934,935,937,939,941,943,945,948,950,953,955,957,959,962],{"class":49,"line":74},[47,936,364],{"class":150},[47,938,216],{"class":146},[47,940,151],{"class":150},[47,942,381],{"class":205},[47,944,373],{"class":150},[47,946,947],{"class":205},"'LIKE'",[47,949,373],{"class":150},[47,951,952],{"class":205},"`%\"",[47,954,334],{"class":333},[47,956,168],{"class":236},[47,958,339],{"class":333},[47,960,961],{"class":205},"\"%`",[47,963,179],{"class":150},[47,965,966,968,970,972,974,976,978],{"class":49,"line":80},[47,967,364],{"class":150},[47,969,394],{"class":146},[47,971,151],{"class":150},[47,973,399],{"class":205},[47,975,373],{"class":150},[47,977,404],{"class":205},[47,979,179],{"class":150},[47,981,982,984,986,988,990,992,994,996,998,1000,1002],{"class":49,"line":86},[47,983,364],{"class":150},[47,985,413],{"class":146},[47,987,151],{"class":150},[47,989,418],{"class":205},[47,991,373],{"class":150},[47,993,399],{"class":205},[47,995,373],{"class":150},[47,997,427],{"class":205},[47,999,373],{"class":150},[47,1001,381],{"class":205},[47,1003,179],{"class":150},[47,1005,1006,1008,1010],{"class":49,"line":92},[47,1007,364],{"class":150},[47,1009,440],{"class":146},[47,1011,253],{"class":150},[47,1013,1014],{"class":49,"line":98},[47,1015,179],{"class":150},[17,1017,1018],{},"下面是优化后重新生成的文件占用，体积减小还是非常显著的",[1020,1021,1022,1026],"ul",{},[1023,1024,1025],"li",{},"tags 目录体积: 2.9MiB -> 1.4MiB",[1023,1027,1028],{},"单个 _payload.json 的体积: 23.1KiB -> 1.01 KiB",[17,1030,1031,1032,1034],{},"通过这种方法，我们成功将查询逻辑下推到了数据库层，避免了不必要的全量数据传输，显著降低了单个目录中 ",[30,1033,767],{}," 的体积，实现了性能优化。",[17,1036,1037],{},[783,1038],{"alt":1039,"src":1040},"tags 目录体积下降","https://static.031130.xyz/uploads/2025/10/20/007e72e7b476d.webp",[17,1042,1043],{},[783,1044],{"alt":767,"src":1045},"https://static.031130.xyz/uploads/2025/10/20/17ba3ccbbdf9e.webp",[109,1047,1048],{"id":1048},"参见",[17,1050,1051],{},[803,1052,1055],{"href":1053,"rel":1054},"https://content.nuxt.com/docs/utils/query-collection#wherefield-keyof-collection-string-operator-sqloperator-value-unknown",[807],"queryCollection - Nuxt Content",[17,1057,1058],{},[803,1059,1061,1062,1064],{"href":805,"rel":1060},[807],"How do you query ",[30,1063,819],{}," fields (e.g. tags) in the latest nuxt-content module (v3.alpha.8) · nuxt/content · Discussion #2955",[1066,1067,1068],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .sNmU0, html code.shiki .sNmU0{--shiki-default:#986801;--shiki-dark:#E5C07B}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .s7GmK, html code.shiki .s7GmK{--shiki-default:#383A42;--shiki-dark:#E5C07B}html pre.shiki code .s2QsP, html code.shiki .s2QsP{--shiki-default:#E45649;--shiki-dark:#E5C07B}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sblXP, html code.shiki .sblXP{--shiki-default:#383A42;--shiki-dark:#C678DD}html pre.shiki code .sN9Y4, html code.shiki .sN9Y4{--shiki-default:#0184BC;--shiki-dark:#E5C07B}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .st7oF, html code.shiki .st7oF{--shiki-default:#0184BC;--shiki-dark:#ABB2BF}html pre.shiki code .sz0mV, html code.shiki .sz0mV{--shiki-default:#383A42;--shiki-dark:#E06C75}html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html pre.shiki code .sAOjX, html code.shiki .sAOjX{--shiki-default:#CA1243;--shiki-dark:#C678DD}html pre.shiki code .sMj0N, html code.shiki .sMj0N{--shiki-default:#50A14F;--shiki-dark:#ABB2BF}html pre.shiki code .sC09Y, html code.shiki .sC09Y{--shiki-default:#C18401;--shiki-dark:#E5C07B}html pre.shiki code .s8iYz, html code.shiki .s8iYz{--shiki-default:#383A42;--shiki-default-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic}html pre.shiki code .s7DPa, html code.shiki .s7DPa{--shiki-default:#0184BC;--shiki-dark:#C678DD}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}",{"title":43,"searchDepth":56,"depth":56,"links":1070},[1071,1072,1073,1074],{"id":111,"depth":56,"text":112},{"id":469,"depth":56,"text":470},{"id":794,"depth":56,"text":795},{"id":1048,"depth":56,"text":1048},{"title":1076,"date":1077,"path":1078,"tags":1079,"body":1086},"后 OCSP 时代，浏览器如何应对证书吊销新挑战","2025-10-16 15:38:50","/2025/10/16/how-s-mozilla-crlite-going-now",[1080,1081,1082,1083,1084,1085],"SSL","Firefox","Web PKI","OCSP","CRLSets","CRLite",{"type":14,"value":1087,"toc":1441},[1088,1091,1100,1109,1120,1125,1129,1140,1143,1150,1160,1167,1172,1179,1183,1186,1189,1197,1201,1204,1213,1234,1237,1241,1244,1257,1260,1284,1303,1306,1313,1316,1319,1323,1326,1350,1357,1363,1365],[17,1089,1090],{},"2023 年 8 月，CA/Browser Forum 通过了一项投票——不再强制要求 Let’s Encrypt 等公开信任的 CA 设立 OCSP Server",[17,1092,1093,1094,1099],{},"2024 年 7 月，Let's Encrypt 发布",[803,1095,1098],{"href":1096,"rel":1097},"https://letsencrypt.org/2024/07/23/replacing-ocsp-with-crls",[807],"博客","，披露其计划关闭 OCSP Server",[17,1101,1102,1103,1108],{},"同年 12 月，Let's Encrypt 发布",[803,1104,1107],{"href":1105,"rel":1106},"https://letsencrypt.org/2024/12/05/ending-ocsp",[807],"其关闭 OCSP Server 的时间计划表","，大致情况如下：",[1020,1110,1111,1114,1117],{},[1023,1112,1113],{},"2025 年 1 月 30 日 - Let’s Encrypt 不再接受新的包含 OCSP Must-Staple 扩展的证书签发请求，除非你的账号先前申请过此类证书",[1023,1115,1116],{},"2025 年 5 月 7 日 - Let's Encrypt 新签发的证书将加入 CRL URLs，不再包含 OCSP URLs，并且所有新的包含 OCSP Must-Staple 扩展的证书签发请求都将被拒绝",[1023,1118,1119],{},"2025 年 8 月 6 日 - Let's Encrypt 关闭 OCSP 服务器",[17,1121,1122],{},[21,1123,1124],{},"Let's Encrypt 是全世界最大的免费 SSL 证书颁发机构，而这一举动标志着我们已逐渐步入后 OCSP 时代。",[109,1126,1128],{"id":1127},"ocsp-的困境性能与隐私的权衡","OCSP 的困境：性能与隐私的权衡",[17,1130,1131,1132,1135,1136,1139],{},"Let's Encrypt 这一举动的背后，是人们对 OCSP（在线证书状态协议）长久以来累积的不满。OCSP 作为一种实时查询证书有效性的方式，最初的设想很美好：当浏览器访问一个网站时，它可以向 ",[21,1133,1134],{},"CA（证书颁发机构）"," 的 OCSP 服务器发送一个简短的请求，询问该证书是否仍然有效。这似乎比下载一个巨大的 ",[21,1137,1138],{},"CRL（证书吊销列表）"," 要高效得多。",[17,1141,1142],{},"然而，OCSP 在实际应用中暴露出众多缺陷：",[17,1144,1145,1146,1149],{},"首先是",[21,1147,1148],{},"性能问题","。尽管单个请求很小，但当数百万用户同时访问网站时，OCSP 服务器需要处理海量的实时查询。这不仅给 CA 带来了巨大的服务器压力，也增加了用户访问网站的延迟。如果 OCSP 服务器响应缓慢甚至宕机，浏览器可能会因为无法确认证书状态而中断连接，或者为了用户体验而不得不“睁一只眼闭一只眼”，这都削弱了 OCSP 的安全性。",[17,1151,1152,1153,1156,1157],{},"更严重的是",[21,1154,1155],{},"隐私问题","。每一次 OCSP 查询，都相当于向 CA 报告了用户的访问行为。这意味着 CA 能够知道某个用户在何时访问了哪个网站。虽然 OCSP 查询本身不包含个人身份信息，但将这些信息与 IP 地址等数据结合起来，CA 完全可以建立起用户的浏览习惯画像。对于重视隐私的用户和开发者来说，这种“无声的监视”是不可接受的。",[21,1158,1159],{},"即使 CA 故意不保留这些信息，地区法律也可能强制 CA 收集这些信息。",[17,1161,1162,1163,1166],{},"再者，OCSP  还存在设计上的",[21,1164,1165],{},"安全缺陷","。由于担心连接超时影响用户体验，浏览器通常默认采用 soft-fail 机制：一旦无法连接 OCSP  服务器，便会选择放行而非阻断连接。攻击者恰恰可以利用这一点，通过阻断客户端与 OCSP  服务器之间的通信，使查询始终超时，从而轻松绕过证书状态验证。",[1168,1169,1171],"h3",{"id":1170},"ocsp-装订-ocsp-stapling","OCSP 装订 (OCSP stapling)",[17,1173,1174,1175,456],{},"基于上面这些缺陷，我们有了 OCSP 装订 (OCSP stapling) 方案，这",[803,1176,1178],{"href":1177},"/2024/11/19/firefox-is-the-only-mainstream-brower-doing-online-certificate-revocation-checks/#OCSP-%E8%A3%85%E8%AE%A2-OCSP-stapling","在我去年的博客里讲过，欢迎回顾",[1168,1180,1182],{"id":1181},"强制-ocsp-装订-ocsp-must-staple","强制 OCSP 装订 (OCSP Must-Staple)",[17,1184,1185],{},"OCSP Must-Staple 是一个在 ssl 证书申请时的拓展项，该扩展会告知浏览器：若在证书中识别到此扩展，则不得向证书颁发机构发送查询请求，而应在握手阶段获取装订式副本。若未能获得有效副本，浏览器应拒绝连接。",[17,1187,1188],{},"这项功能赋予了浏览器开发者 hard-fail 的勇气，但在 OCSP 淡出历史之前，Let's Encrypt 似乎是唯一支持这一拓展的主流 CA，并且这项功能并没有得到广泛使用。",[17,1190,1191,1192,456],{},"~~本来不想介绍这项功能的（因为根本没人用），但考虑到这东西快入土了，还是给它在中文互联网中立个碑，~~更多信息参考 ",[803,1193,1196],{"href":1194,"rel":1195},"https://letsencrypt.org/2024/12/05/ending-ocsp#must-staple",[807],"Let's Encrypt 的博客",[109,1198,1200],{"id":1199},"chromium-的方案弱水三千只取一瓢","Chromium 的方案：弱水三千只取一瓢",[17,1202,1203],{},"OCSP 的隐私和性能问题并非秘密，浏览器厂商们早就开始了各自的探索。2012 年，Chrome 默认禁用了 CRLs、OCSP 检查，转向自行设计的证书校验机制。",[17,1205,1206,1207,1212],{},"众所周知，吊销列表可以非常庞大。如果浏览器需要下载和解析一个完整的全球吊销列表，那将是一场性能灾难（Mozilla 团队在",[803,1208,1211],{"href":1209,"rel":1210},"https://hacks.mozilla.org/2025/08/crlite-fast-private-and-comprehensive-certificate-revocation-checking-in-firefox/",[807],"今年的博客","中提到，从 3000 个活跃的 CRL 下载的文件大小将达到 300MB）。Chromium 团队通过分析历史数据发现，大多数被吊销的证书属于少数高风险类别，例如证书颁发机构（CA）本身被攻破、或者某些大型网站的证书被吊销。基于此洞察，CRLSets 采取了以下策略：",[1214,1215,1216,1222,1228],"ol",{},[1023,1217,1218,1221],{},[21,1219,1220],{},"分层吊销","：Chromium 不会下载所有被吊销的证书信息，而是由 Google 团队维护一个精简的、包含“最重要”吊销信息的列表。这个列表会定期更新并通过 Chrome 浏览器更新推送给用户。",[1023,1223,1224,1227],{},[21,1225,1226],{},"精简高效","：这个列表体积非常小，目前大概只有 600KB。它包含了那些一旦被滥用就会造成大规模安全事故的证书，例如 CA 的中间证书、或者一些知名网站（如 Google、Facebook）的证书。",[1023,1229,1230,1233],{},[21,1231,1232],{},"牺牲部分安全性","：这种方案的缺点也很明显——它无法覆盖所有的证书吊销情况。对于一个普通网站的证书被吊销，CRLSets 大概率无法检测到。根据 Mozilla 今年的博客所说，CRLSets 只包含了 1%~2% 的未过期的被吊销证书信息。",[17,1235,1236],{},"虽然 CRLSets 是一种“不完美”的解决方案，但它在性能和可用性之间找到了一个平衡点。它确保了用户在访问主流网站时的基础安全，同时避免了 OCSP 带来的性能和隐私开销。对于 Chromium 而言，与其追求一个在现实中难以完美实现的 OCSP 方案，不如集中精力解决最紧迫的安全威胁。",[109,1238,1240],{"id":1239},"firefox-的方案从-crls-到-crlite","Firefox 的方案：从 CRLs 到 CRLite",[17,1242,1243],{},"与 Chromium 的“只取一瓢”策略不同，Firefox 的开发者们一直在寻找一种既能保证全面性，又能解决性能问题的方案。",[17,1245,1246,1247,1249,1250,1253,1254,456],{},"为了解决这个问题，Mozilla 提出了一个创新的方案：",[21,1248,1085],{},"。CRLite 的设计理念是通过",[21,1251,1252],{},"哈希函数和布隆过滤器","等数据结构，将庞大的证书吊销列表压缩成一个",[21,1255,1256],{},"小巧、可下载且易于本地验证的格式",[17,1258,1259],{},"CRLite 的工作原理可以简单概括为：",[1214,1261,1262,1268,1278],{},[1023,1263,1264,1267],{},[21,1265,1266],{},"数据压缩","：CA 定期生成其全部吊销证书的列表。",[1023,1269,1270,1273,1274,1277],{},[21,1271,1272],{},"服务器处理","：Mozilla 的服务器会收集这些列表，并使用加密哈希函数和布隆过滤器等技术，将所有吊销证书的信息",[21,1275,1276],{},"编码","成一个非常紧凑的数据结构。",[1023,1279,1280,1283],{},[21,1281,1282],{},"客户端验证","：浏览器下载这个压缩文件，当访问网站时，只需本地对证书进行哈希计算，然后查询这个本地文件，就能快速判断该证书是否已被吊销。",[17,1285,1286,1287,1290,1291,1294,1295,1298,1299,1302],{},"与 CRLSets 相比，CRLite 的优势在于它能够实现",[21,1288,1289],{},"对所有吊销证书的全面覆盖","，同时保持",[21,1292,1293],{},"极小的体积","。更重要的是，它",[21,1296,1297],{},"完全在本地完成验证","，这意味着浏览器",[21,1300,1301],{},"无需向任何第三方服务器发送请求","，从而彻底解决了 OCSP 的隐私问题。",[17,1304,1305],{},"Firefox 当前的策略为每 12 小时对 CRLite 数据进行一次增量更新，每日的下载数据大约为 300KB；每 45 天进行一次全量的快照同步，下载数据约为 4MB。",[17,1307,1308,1309],{},"Mozilla 开放了他们的数据看板，你可以在这里找到近期的 CRLite 数据大小：",[803,1310,1311],{"href":1311,"rel":1312},"https://yardstick.mozilla.org/dashboard/snapshot/c1WZrxGkNxdm9oZp7xVvGUEFJCELfApN",[807],[17,1314,1315],{},"自 2025 年 4 月 1 日发布的 Firefox Desktop 137 版本起，Firefox 开始逐步以 CRLite 替换 OCSP 校验；同年 8 月 19 日，Firefox Desktop 142 针对 DV 证书正式弃用 OCSP 检验。",[17,1317,1318],{},"CRLite 已经成为 Firefox 未来证书吊销验证的核心方案，它代表了对性能、隐私和安全性的全面追求。",[109,1320,1322],{"id":1321},"后-ocsp-时代的展望","后 OCSP 时代的展望",[17,1324,1325],{},"随着 Let's Encrypt 等主要 CA 关闭 OCSP 服务，OCSP 的时代正在加速落幕。我们可以看到，浏览器厂商们已经开始各自探索更高效、更安全的替代方案。",[1020,1327,1328,1338],{},[1023,1329,1330,1333,1334,1337],{},[21,1331,1332],{},"Chromium"," 凭借其 CRLSets 方案，在",[21,1335,1336],{},"性能和关键安全保障","之间取得了务实的平衡。",[1023,1339,1340,1342,1343,1345,1346,1349],{},[21,1341,1081],{}," 则通过 ",[21,1344,1085],{}," 这一技术创新，试图在",[21,1347,1348],{},"全面性、隐私和性能","三者之间找到最佳的解决方案。",[17,1351,1352,1353,1356],{},"这些方案的共同点是：",[21,1354,1355],{},"将证书吊销验证从实时在线查询（OCSP）转变为本地化验证","，从而规避了 OCSP 固有的性能瓶颈和隐私风险。",[17,1358,1359,1360],{},"未来，证书吊销的生态系统将不再依赖单一的、中心化的 OCSP 服务器。取而代之的是，一个更加多元、分布式和智能化的新时代正在到来。",[21,1361,1362],{},"OCSP 这一技术可能逐渐被淘汰，但它所试图解决的“证书吊销”这一核心安全问题，将永远是浏览器和网络安全社区关注的重点。",[109,1364,1048],{"id":1048},[1020,1366,1367,1373,1380,1387,1394,1400,1406,1413,1420,1427,1434],{},[1023,1368,1369],{},[803,1370,1372],{"href":1209,"rel":1371},[807],"CRLite: Fast, private, and comprehensive certificate revocation checking in Firefox - Mozilla Hacks - the Web developer blog",[1023,1374,1375],{},[803,1376,1379],{"href":1377,"rel":1378},"https://www.feistyduck.com/newsletter/issue_121_the_slow_death_of_ocsp",[807],"The Slow Death of OCSP | Feisty Duck",[1023,1381,1382],{},[803,1383,1386],{"href":1384,"rel":1385},"https://github.com/mozilla/crlite",[807],"mozilla/crlite: Compact certificate revocation lists for the WebPKI",[1023,1388,1389],{},[803,1390,1393],{"href":1391,"rel":1392},"https://letsencrypt.org/2025/08/06/ocsp-service-has-reached-end-of-life",[807],"OCSP Service Has Reached End of Life - Let's Encrypt",[1023,1395,1396],{},[803,1397,1399],{"href":1105,"rel":1398},[807],"Ending OCSP Support in 2025 - Let's Encrypt",[1023,1401,1402],{},[803,1403,1405],{"href":1096,"rel":1404},[807],"Intent to End OCSP Service - Let's Encrypt",[1023,1407,1408],{},[803,1409,1412],{"href":1410,"rel":1411},"https://www.chromium.org/Home/chromium-security/crlsets/",[807],"CRLSets - The Chromium Projects",[1023,1414,1415],{},[803,1416,1419],{"href":1417,"rel":1418},"https://www.pcworld.com/article/474296/google_chrome_will_no_longer_check_for_revoked_ssl_certificates_online-2.html",[807],"Google Chrome Will No Longer Check for Revoked SSL Certificates Online | PCWorld",[1023,1421,1422],{},[803,1423,1426],{"href":1424,"rel":1425},"https://www.zdnet.com/article/chrome-does-certificate-revocation-better/",[807],"Chrome does certificate revocation better | ZDNET",[1023,1428,1429],{},[803,1430,1433],{"href":1431,"rel":1432},"https://www.hats-land.com/WIP/2025-technical-and-analysis-of-mainstream-clientbrowser-certificate-revocation-verification-mechanism.html",[807],"主流客户端/浏览器证书吊销验证机制技术对与分析 | 帽之岛, Hat's Land",[1023,1435,1436],{},[803,1437,1440],{"href":1438,"rel":1439},"https://blog.gslin.org/archives/2025/02/02/12239/ocsp-%E7%9A%84%E6%B7%A1%E5%87%BA/",[807],"OCSP 的淡出… – Gea-Suan Lin's BLOG",{"title":43,"searchDepth":56,"depth":56,"links":1442},[1443,1447,1448,1449,1450],{"id":1127,"depth":56,"text":1128,"children":1444},[1445,1446],{"id":1170,"depth":62,"text":1171},{"id":1181,"depth":62,"text":1182},{"id":1199,"depth":56,"text":1200},{"id":1239,"depth":56,"text":1240},{"id":1321,"depth":56,"text":1322},{"id":1048,"depth":56,"text":1048},{"title":1452,"date":1453,"path":1454,"tags":1455,"body":1460},"初试 Github Action Self-hosted Runner，想说爱你不容易","2025-09-05 05:54:17","/2025/09/05/first-try-of-github-action-self-hosted-runner",[1456,1457,1458,1459],"Github","Github Action","CI/CD","Experience",{"type":14,"value":1461,"toc":1658},[1462,1476,1479,1490,1493,1496,1499,1504,1507,1512,1515,1520,1525,1528,1533,1536,1541,1545,1548,1575,1578,1585,1590,1607,1626,1633,1637,1648,1655],[17,1463,1464,1465,1470,1471,456],{},"在今年八月的时候，我这边所在的一个 Github Organization 在私有项目开发阶段频繁触发 CI，耗尽了 Github 为免费计划 (Free Plan) 提供的",[803,1466,1469],{"href":1467,"rel":1468},"https://docs.github.com/en/get-started/learning-about-github/githubs-plans#github-free-for-organizations",[807],"每月 2000 分钟 Action 额度","（所有私有仓库共享，公有仓库不计）。大致看了下，CI 流设置得是合理的，那么就要另寻他法看看有没有办法去提供更宽裕的资源，因此也就盯上了文章标题中所提到的 ",[803,1472,1475],{"href":1473,"rel":1474},"https://docs.github.com/en/actions/concepts/runners/self-hosted-runners",[807],"Github Action Self-hosted Runner",[17,1477,1478],{},"对于这个 Self-hosted Runner，与 Github 官方提供的 runner 相比，主要有以下几个优势",[1020,1480,1481,1484,1487],{},[1023,1482,1483],{},"针对私有仓库，拥有无限制的 Action 运行时长",[1023,1485,1486],{},"可以自行搭配更强大的硬件计算能力和内存",[1023,1488,1489],{},"可以接入内网环境，方便与内网/局域网设备通信",[109,1491,1492],{"id":1492},"配置安装",[17,1494,1495],{},"由于不清楚需要的网络环境，我这次测试直接选用了一台闲置的香港 vps，4核4G + 80G 硬盘 + 1Gbps 大口子的配置，除了硬盘读写稍微拉胯一些，别的地方可以说是拉满了。",[17,1497,1498],{},"Self-hosted Runner 的配置本身是相当直接和清晰的，照着官方提供的方案基本没什么问题。",[17,1500,1501],{},[783,1502],{"alt":43,"src":1503},"https://static.031130.xyz/uploads/2025/09/05/7c0475cdb1aa9.webp",[17,1505,1506],{},"三个主流平台都有，如果好好加以利用，应该可以涵盖包括 iPhone 应用打包等一系列的需求。",[17,1508,1509],{},[783,1510],{"alt":43,"src":1511},"https://static.031130.xyz/uploads/2025/09/05/96ff7cb263da1.webp",[17,1513,1514],{},"在观察一下我这边拿到手的 2.328.0 版本的 runner 安装文件压缩包的体积在 220MB 左右，内置了 node20 和 node24 各两个版本的运行环境。",[17,1516,1517],{},[783,1518],{"alt":43,"src":1519},"https://static.031130.xyz/uploads/2025/09/05/f775e3bcd2cdc.webp",[17,1521,1522],{},[783,1523],{"alt":43,"src":1524},"https://static.031130.xyz/uploads/2025/09/05/d0d4fe4611a40.webp",[17,1526,1527],{},"在执行完 config.sh 后，当前目录下就会多出一个 svc.sh，可以帮助利用这东西来调用 systemd 实现进程守护之类的需求。",[17,1529,1530],{},[783,1531],{"alt":43,"src":1532},"https://static.031130.xyz/uploads/2025/09/05/43c6b19038def.webp",[17,1534,1535],{},"再次刷新网页，就可以看到 Self-hosted Runner 处于已经上线的状态了",[17,1537,1538],{},[783,1539],{"alt":43,"src":1540},"https://static.031130.xyz/uploads/2025/09/05/6dad15beff900.webp",[109,1542,1544],{"id":1543},"指定-action-采用自己的-runner","指定 Action 采用自己的 Runner",[17,1546,1547],{},"这一步很简单，只需在原 Action 的 yml 文件中改变 runs-on 字段即可",[38,1549,1553],{"className":1550,"code":1551,"language":1552,"meta":43,"style":43},"language-diff shiki shiki-themes one-light one-dark-pro","jobs:\n  run:\n+    runs-on: self-hosted\n-    runs-on: ubuntu-latest\n","diff",[30,1554,1555,1560,1565,1570],{"__ignoreMap":43},[47,1556,1557],{"class":49,"line":50},[47,1558,1559],{},"jobs:\n",[47,1561,1562],{"class":49,"line":56},[47,1563,1564],{},"  run:\n",[47,1566,1567],{"class":49,"line":62},[47,1568,1569],{},"+    runs-on: self-hosted\n",[47,1571,1572],{"class":49,"line":68},[47,1573,1574],{},"-    runs-on: ubuntu-latest\n",[109,1576,1577],{"id":1577},"实测",[17,1579,1580,1581,1584],{},"当我满心欢喜地将 CI 流程从 Github 官方的 runner 切换到自托管的 runner 后，问题很快就浮现了，而这也正是我“爱不起来”的主要原因。问题集中体现在我习以为常的 ",[30,1582,1583],{},"setup-python"," 这一由 Github 官方维护的 Github Action Flow 中，提示 3.12 版本没找到。",[17,1586,1587],{},[783,1588],{"alt":43,"src":1589},"https://static.031130.xyz/uploads/2025/09/05/1c93947170a85.webp",[17,1591,1592,1593,1596,1597,1600,1601,1606],{},"在 Github 官方提供的虚拟环境中，这些 Action 会为我们准备好指定版本的开发环境。例如，",[30,1594,1595],{},"uses: actions/setup-python"," 加上 ",[30,1598,1599],{},"with: python-version: '3.12'"," 就会自动在环境中安装并配置好 Python 3.12.x。我对此已经习以为常，认为这是一个“开箱即用”的功能。但在 Self-hosted Runner 上，情况略有些不同。setup-python 在",[803,1602,1605],{"href":1603,"rel":1604},"https://github.com/actions/setup-python/blob/main/docs/advanced-usage.md#using-setup-python-with-a-self-hosted-runner",[807],"文档","中指出",[1608,1609,1610],"blockquote",{},[17,1611,1612,1613,1618,1619,1622,1623,1625],{},"Python distributions are only available for the same ",[803,1614,1617],{"href":1615,"rel":1616},"https://github.com/actions/runner-images#available-images",[807],"environments"," that GitHub Actions hosted environments are available for. If you are using an unsupported version of Ubuntu such as ",[30,1620,1621],{},"19.04"," or another Linux distribution such as Fedora, ",[30,1624,1583],{}," may not work.",[17,1627,1628,1629,1632],{},"setup-python 这个 Action ",[21,1630,1631],{},"只支持 Github Action 所采用的同款操作系统","，而我 VPS 的 Debian 不受支持，因此有这个误报，同时也给我的 Debian 判了死刑。",[109,1634,1636],{"id":1635},"症结所在对-self-hosted-runner-的误解","症结所在：对 Self-hosted Runner 的误解",[17,1638,1639,1640,1643,1644,1647],{},"我潜意识里认为，Self-hosted Runner 仅仅是将计算成本从 Github 服务器转移到了本地，而 ",[30,1641,1642],{},"actions/setup-python"," 这种官方标准动作，理应会像 Github-hosted Runner 中那样，优雅地为我下载、安装、并配置好我需要的一切。然而，",[21,1645,1646],{},"Self-hosted  Runner 的本质只是从 Github 接收任务，并在当前的操作系统环境中执行指令","，并不保证和 Github 官方提供的 Runner 的运行环境一致。",[17,1649,1650,1651,1654],{},"Self-hosted Runner 不是一个开箱即用的“服务”，而是",[21,1652,1653],{},"一个需要你亲自管理的“基础设施”","。你需要负责服务器的安装、配置、安全更新、依赖管理、磁盘清理等一系列运维工作。它更适合那些对 CI/CD 有更高阶需求的团队或个人：比如 CI/CD 消费大户、需要特定硬件（如 ARM、GPU）进行构建的团队、或者 CI 流程深度依赖内部网络资源的企业。对于像我这样只是愿意拿出更多的本地计算资源来获取更多 Action 运行时长的普通开发者而言，它带来的运维心智负担，似乎是有一点重了。",[1066,1656,1657],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":43,"searchDepth":56,"depth":56,"links":1659},[1660,1661,1662,1663],{"id":1492,"depth":56,"text":1492},{"id":1543,"depth":56,"text":1544},{"id":1577,"depth":56,"text":1577},{"id":1635,"depth":56,"text":1636},{"title":1665,"date":1666,"path":1667,"tags":1668,"body":1675},"DNS 解析时长毁了我精心设计的图床网络架构","2025-08-11 00:06:40","/2025/08/11/dns-resolve-time-destroyed-my-optimization-for-pic-cdn",[1669,1670,1671,1672,1673,1674],"CDN","图床","DNS","Network","Cloudflare","Dnspod",{"type":14,"value":1676,"toc":2069},[1677,1684,1689,1695,1705,1710,1799,1814,1819,1822,1894,1899,1902,1907,1930,1935,1946],[17,1678,1679,1680,1683],{},"去年夏天，我兴致勃勃地写了好几篇博文，详细讲述了我如何搭建博客图床。核心目标很明确：",[21,1681,1682],{},"分地区解析 DNS","，让国内外的访客都能嗖嗖地加载图片，体验拉满。想法嘛，绝对是走在技术前沿的，堪称完美！然而……现实它总是喜欢给你来点小惊喜，对吧？",[17,1685,1686],{},[783,1687],{"alt":43,"src":1688},"https://static.031130.xyz/uploads/2025/08/11/26306b2a483ba.webp",[17,1690,1691,1694],{},[21,1692,1693],{},"955 毫秒！"," 看到这个 DNS  解析时长的时候，我差点把刚喝下去的霸王茶姬喷在屏幕上。这简直就是一个隐形刺客，在我精心设计的图床网络架构背后，悄咪咪地给了致命一击。想象一下，访客满怀期待地点开你的博客，结果光是为了搞清楚图片服务器在哪，就要等上差不多一秒钟？这体验优化了个寂寞啊！",[17,1696,1697,1698,1701,1702,456],{},"为啥之前没发现？这得“感谢”",[21,1699,1700],{},"DNS 缓存","这位老好人。它勤勤恳恳地帮后来的访客记住了答案，让我的本地测试和复访测试都一片祥和。直到最近，有群友向我反馈了首次访问时图片的加载速度过慢，我才如梦初醒。再结合最近为了秋招准备的八股文中里面关于 DNS 解析那套繁琐的流程（递归查询、权威查询、根域名、顶级域名……查个地址堪比查户口本），我瞬间锁定了罪魁祸首：",[21,1703,1704],{},"首次访问时的 DNS 解析延迟",[17,1706,1707],{},[21,1708,1709],{},"来，复盘一下我那“曲折离奇”的 DNS 寻址之旅（访客视角）：",[1214,1711,1712,1721,1734,1751,1763,1779,1794],{},[1023,1713,1714],{},[21,1715,1716,1717,1720],{},"访客想访问 ",[30,1718,1719],{},"static.031130.xyz"," 的图片。",[1023,1722,1723,1730,1731,1733],{},[21,1724,1725,1726,1729],{},"查 ",[30,1727,1728],{},"031130.xyz"," 的权威 DNS："," 问了一圈，发现权威服务器原来在 ",[21,1732,1673],{}," (国外)。",[1023,1735,1736,1739,1740,1742,1743,1746,1747,1750],{},[21,1737,1738],{},"Cloudflare 权威服务器回复："," “哦，",[30,1741,1719],{}," 啊？它是个马甲 (",[30,1744,1745],{},"CNAME",")，真身是 ",[30,1748,1749],{},"cdn-cname.zhul.in","，你去找它吧！”",[1023,1752,1753,1758,1759,1762],{},[21,1754,1725,1755,1729],{},[30,1756,1757],{},"zhul.in"," 这次权威服务器在 ",[21,1760,1761],{},"DNSPod"," (国内)。",[1023,1764,1765,1768,1769,1771,1772,1774,1775,1778],{},[21,1766,1767],{},"DNSPod 权威服务器回复 (针对国内用户)："," “",[30,1770,1749],{}," 也是个马甲 (",[30,1773,1745],{},")，它实际是 ",[30,1776,1777],{},"small-storage-cdn.b0.aicdn.com","，接着找！”",[1023,1780,1781,1786,1787,1789,1790,1793],{},[21,1782,1725,1783,1785],{},[30,1784,1777],{},"："," 最终，它可能还会再 ",[30,1788,1745],{}," 到类似 ",[30,1791,1792],{},"nm.aicdn.com"," 这样的 CDN 节点主机名。",[1023,1795,1796],{},[21,1797,1798],{},"最终获得 IP 地址，开始连接 CDN 节点下载图片。",[17,1800,1801,1802,1805,1806,1809,1810,1813],{},"发现问题没？",[21,1803,1804],{},"关键的第一步和第二步，权威 DNS 查询指向了国外的 Cloudflare！"," 对于国内用户，虽然最终解析到的 CDN 节点 (",[30,1807,1808],{},"small-storage-cdn.b0.aicdn.com/nm.aicdn.com",") 是国内的、速度飞快，但光是",[21,1811,1812],{},"前两步跨越重洋的 DNS 查询","，就足够让首次访问的用户体验跌入谷底。那个 955ms 的解析时长，基本就是花在跟国外 DNS 服务器“跨国聊天”上了。",[17,1815,1816],{},[21,1817,1818],{},"优化方案：三管齐下，围剿 DNS 延迟",[17,1820,1821],{},"既然找到了病根，就得下猛药：",[1214,1823,1824,1842,1854],{},[1023,1825,1826,1833,1834,1837,1838,1841],{},[21,1827,1828,1829,1832],{},"DNS 预取 (",[30,1830,1831],{},"dns-prefetch","):"," 在博客的 HTML ",[30,1835,1836],{},"\u003Chead>"," 里，早早地加上 ",[30,1839,1840],{},"\u003Clink rel=\"dns-prefetch\" href=\"//static.031130.xyz\">","。这相当于浏览器在渲染页面时，就悄悄开始解析图床域名了，等真需要加载图片时，DNS 结果可能已经准备好了，神不知鬼不觉。当然也可以使用 preconnect 等等更激进的策略，但本文着重讲 DNS 解析，因此不做拓展。",[1023,1843,1844,1847,1848,1850,1851,1853],{},[21,1845,1846],{},"延长 DNS 记录的 TTL (生存时间)："," 把 ",[30,1849,1719],{}," 这个 ",[30,1852,1745],{}," 记录的 TTL 值调大。以前都设置得较短，方便快速切换。现在为了缓存，适当延长（比如几小时甚至一天）。这样，一旦有用户解析过，本地 DNS 服务器就能记住更久，后续用户（包括同一用户再次访问）就能直接从缓存拿到结果，省掉跨国查询。",[1023,1855,1856,1859,1860,1862,1863,1866,1867,1870,1871],{},[21,1857,1858],{},"釜底抽薪：迁移权威 DNS！"," 这是最核心的一步。直接把 ",[30,1861,1728],{}," 域名的",[21,1864,1865],{},"权威 DNS 服务器","，从 Cloudflare ",[21,1868,1869],{},"搬回国内 DNSPod","。这样一来：\n",[1020,1872,1873,1879,1891],{},[1023,1874,1875,1876,1878],{},"访客的递归 DNS 服务器查询 ",[30,1877,1728],{}," 的权威服务器时，直接找到的就是国内的 DNSPod，响应飞快。",[1023,1880,1881,1882,1884,1885,1887,1888,1890],{},"DNSPod 直接告诉递归服务器 ",[30,1883,1719],{}," -> ",[30,1886,1777],{}," 完全在国内完成，丝般顺滑，不需要 ",[30,1889,1749],{}," 当分区域解析的工具人",[1023,1892,1893],{},"整个 DNS 解析链路都在国内高速完成，首次访问的 955ms 噩梦彻底拜拜。",[17,1895,1896],{},[21,1897,1898],{},"效果如何？",[17,1900,1901],{},"受限于 DNS 缓存带来的测试困难，最终的效果确实很难在短时间内测试出来。但迁移权威 DNS 到 DNSPod + 调整 TTL +  加上预取之后，再测试首次访问的 DNS 解析时间总算是降到了可接受的程度，这才是 CDN  优化该有的样子！",[17,1903,1904],{},[21,1905,1906],{},"教训总结：",[1020,1908,1909,1915,1924],{},[1023,1910,1911,1914],{},[21,1912,1913],{},"别让 DNS 成为性能短板！"," 尤其是在涉及多地优化时，权威 DNS 的地理位置对首次访问延迟至关重要。能用国内的权威，就别用国外的。",[1023,1916,1917,1920,1921,1923],{},[21,1918,1919],{},"缓存是好东西，但首次访问是软肋。"," 善用 ",[30,1922,1831],{}," 和合理设置 TTL 能有效缓解。",[1023,1925,1926,1929],{},[21,1927,1928],{},"监控和用户反馈是金。"," 自己的测试环境往往有缓存“美化”，真实世界的首次访问体验要靠更细致的监控和用户的火眼金睛（感谢反馈的朋友！）。",[17,1931,1932],{},[21,1933,1934],{},"!!! 超级重要补充：警惕 CNAME 拉平 !!!",[17,1936,1937,1938,1945],{},"最后，必须给各位提个醒！如果你和我一样，需要依赖分地区解析来让访客访问到最近的 CDN 节点（比如让国内走国内CDN，国外走Cloudflare），那么千万要",[21,1939,1940,1941,1944],{},"避开 ",[30,1942,1943],{},"CNAME Flattening"," (CNAME 拉平) 这个“优化”方案","！",[1020,1947,1948,1981,1993,2028],{},[1023,1949,1950,1953,1954,1956,1957,1884,1960,1963,1964,1966,1967,1970,1971,1974,1975,1978,1979,456],{},[21,1951,1952],{},"CNAME 拉平是什么？"," 简单说，就是权威 DNS 服务器（比如 Cloudflare）看到你设置了一个 ",[30,1955,1745],{}," 记录（比如 ",[30,1958,1959],{},"static.example.com",[30,1961,1962],{},"cdn.cname.target.com","），它主动帮你去找 ",[30,1965,1962],{}," 的最终 ",[30,1968,1969],{},"A","/",[30,1972,1973],{},"AAAA"," 记录 (IP地址)，然后把 ",[21,1976,1977],{},"最终的 IP 地址"," 直接返回给查询者，而不是返回 ",[30,1980,1745],{},[1023,1982,1983,1986,1987,1785,1990],{},[21,1984,1985],{},"听起来很美好？它确实能减少 CNAME 链的长度！"," 但它有个",[21,1988,1989],{},"致命缺点",[21,1991,1992],{},"权威 DNS 服务器在拉平解析时，会丢掉分地区解析的上下文！",[1023,1994,1995,1998,1999,2002,2003,2006,2007,2010,2011,2013,2014,2016,2017,2019,2020,2023,2024,2027],{},[21,1996,1997],{},"为什么失效？"," 分地区解析 (",[30,2000,2001],{},"DNS View"," 或 ",[30,2004,2005],{},"GeoDNS",") 的功能是",[21,2008,2009],{},"在权威 DNS 服务器层面实现的","。当权威服务器执行 ",[30,2012,1745],{}," 拉平时，它是在它自己所在的位置去查询 ",[30,2015,1962],{}," 的 IP。比如你的权威 DNS 在 Cloudflare (美国节点)，它拉平查询时，拿到的 ",[30,2018,1962],{}," 的 IP ",[21,2021,2022],{},"大概率是给美国用户用的最优 IP","。然后它把这个 IP ",[21,2025,2026],{},"返回给了所有地区的查询者","，包括中国用户！你精心配置的让中国用户解析到国内 CDN IP 的策略就完全失效了！",[1023,2029,2030,2033,2034,2040,2041,2044,2045,2047,2048,373,2051,2054,2055,2057,2058,2060,2061,1884,2063,2065,2066,2068],{},[21,2031,2032],{},"结论："," 如果你需要 ",[21,2035,2036,2037,2039],{},"分地区解析 (",[30,2038,2005],{},")"," 功能，",[21,2042,2043],{},"绝对不要","在你希望应用分地区解析的域名上启用 ",[30,2046,1943],{}," (或 ",[30,2049,2050],{},"ALIAS",[30,2052,2053],{},"ANAME"," 等实现类似拉平效果的功能)。老老实实用 ",[30,2056,1745],{}," 指向另一个支持 ",[30,2059,2005],{}," 的域名（就像我初始方案里 ",[30,2062,1719],{},[30,2064,1749],{},"，而 ",[30,2067,1757],{}," 在 DNSPod 上做分地区解析），才能保证你的分流策略正确执行。",{"title":43,"searchDepth":56,"depth":56,"links":2070},[],{"title":2072,"date":2073,"path":2074,"tags":2075,"body":2081},"Vue Markdown 渲染优化实战(下)：告别 DOM 操作，拥抱 AST 与函数式渲染","2025-07-13 00:01:35","/2025/07/13/vue-markdown-render-improvement-2",[2076,2077,2078,12,2079,2080],"Vue.js","Markdown","AST","Web","unified",{"type":14,"value":2082,"toc":3984},[2083,2091,2106,2109,2112,2115,2125,2135,2139,2148,2165,2175,2178,2193,2197,2218,2221,2225,2235,2265,2269,2272,2293,2296,2461,2464,2716,2720,2727,2739,2742,3374,3378,3385,3715,3718,3832,3836,3839,3944,3948,3951,3975,3978,3981],[109,2084,2086,2087,2090],{"id":2085},"上回回顾当-morphdom-遇上-vue","上回回顾：当 ",[30,2088,2089],{},"morphdom"," 遇上 Vue",[17,2092,2093,2094,2098,2099,2102,2103,2105],{},"在",[803,2095,2097],{"href":2096},"/2025/07/12/vue-markdown-render-improvement-1/","上一篇文章","中，我们经历了一场 Markdown 渲染的性能优化之旅。从最原始的 ",[30,2100,2101],{},"v-html"," 全量刷新，到按块更新，最终我们请出了 ",[30,2104,2089],{}," 这个“终极武器”。它通过直接比对和操作真实 DOM，以最小的代价更新视图，完美解决了实时渲染中的性能瓶颈和交互状态丢失问题。",[17,2107,2108],{},"然而，一个根本性问题始终存在：在 Vue 的地盘里，绕过 Vue 的虚拟 DOM (Virtual DOM) 和 Diff 算法，直接用一个第三方库去“动刀”真实 DOM，总感觉有些“旁门左道”。这就像在一个精密的自动化工厂里，引入了一个老师傅拿着锤子和扳手进行手动修补。虽然活干得漂亮，但总觉得破坏了原有的工作流，不够“Vue”。",[17,2110,2111],{},"那么，有没有一种更优雅、更“原生”的方式，让我们既能享受精准更新的快感，又能完全融入 Vue 的生态体系呢？",[17,2113,2114],{},"带着这个问题，我询问了前端群里的伙伴们。",[1608,2116,2117],{},[17,2118,2119,2120],{},"如果就要做一个渲染器，你这个思路不是最佳实践。每次更新时，你都生成全量的虚拟 HTML，然后再对 HTML 做减法来优化性能。然而，每次更新的增量部分是明确的，为什么不直接用这部分增量去做加法？增量部分通过 markdown-it 的库无法直接获取，但更好的做法是在这一步进行改造：先解析 Markdown 的结构，再利用 Vue 的动态渲染能力生成 DOM。这样，DOM 的复用就可以借助 Vue 自身的能力来实现。—— ",[803,2121,2124],{"href":2122,"rel":2123},"https://site.j10c.cc/",[807],"j10c",[1608,2126,2127],{},[17,2128,2129,2130],{},"可以用 unified 结合 remark-parse 插件，将 markdown 字符串解析为 ast，然后根据 ast 使用 render func 进行渲染即可。—— bii & ",[803,2131,2134],{"href":2132,"rel":2133},"https://github.com/nekomeowww",[807],"nekomeowww",[109,2136,2138],{"id":2137},"新思路从字符串转换到结构化渲染","新思路：从“字符串转换”到“结构化渲染”",[17,2140,2141,2142,2144,2145,2147],{},"我们之前的方案，无论是 ",[30,2143,2101],{}," 还是 ",[30,2146,2089],{},"，其核心思路都是：",[17,2149,2150,1884,2153,1884,2156,1884,2159,1884,2162],{},[30,2151,2152],{},"Markdown 字符串",[30,2154,2155],{},"markdown-it",[30,2157,2158],{},"HTML 字符串",[30,2160,2161],{},"浏览器/morphdom",[30,2163,2164],{},"DOM",[17,2166,2167,2168,2170,2171,2174],{},"这条链路的问题在于，从 ",[30,2169,2158],{}," 这一步开始，我们就丢失了 Markdown 的",[21,2172,2173],{},"原始结构信息","。我们得到的是一堆非结构化的文本，Vue 无法理解其内在逻辑，只能将其囫囵吞下。",[17,2176,2177],{},"而新的思路则是将流程改造为：",[17,2179,2180,1884,2182,1884,2185,1884,2188,1884,2191],{},[30,2181,2152],{},[30,2183,2184],{},"AST (抽象语法树)",[30,2186,2187],{},"Vue VNodes (虚拟节点)",[30,2189,2190],{},"Vue",[30,2192,2164],{},[1168,2194,2196],{"id":2195},"什么是-ast","什么是 AST？",[17,2198,2199,2202,2203,2206,2207,2210,2211,2214,2215,456],{},[21,2200,2201],{},"AST (Abstract Syntax Tree)"," ，即抽象语法树，是源代码或标记语言的结构化表示。它将一长串的文本，解析成一个层级分明的树状对象。对于 Markdown 来说，一个一级标题会变成一个 ",[30,2204,2205],{},"type: 'heading', depth: 1"," 的节点，一个段落会变成一个 ",[30,2208,2209],{},"type: 'paragraph'"," 的节点，而段落里的文字，则是 ",[30,2212,2213],{},"paragraph"," 节点的 ",[30,2216,2217],{},"children",[17,2219,2220],{},"一旦我们将 Markdown 转换成 AST，就相当于拥有了整个文档的“结构图纸”。我们不再是面对一堆模糊的 HTML 字符串，而是面对一个清晰、可编程的 JavaScript 对象。",[1168,2222,2224],{"id":2223},"我们的新工具unified-与-remark","我们的新工具：unified 与 remark",[17,2226,2227,2228,2231,2232,2234],{},"为了实现 ",[30,2229,2230],{},"Markdown -> AST"," 的转换，我们引入 ",[30,2233,2080],{}," 生态。",[1020,2236,2237,2246],{},[1023,2238,2239,2245],{},[21,2240,2241],{},[803,2242,2080],{"href":2243,"rel":2244},"https://github.com/unifiedjs/unified",[807],": 一个强大的内容处理引擎。你可以把它想象成一条流水线，原始文本是原料，通过添加不同的“插件”来对它进行解析、转换和序列化。",[1023,2247,2248,2255,2256,2258,2259,2264],{},[21,2249,2250],{},[803,2251,2254],{"href":2252,"rel":2253},"https://github.com/remarkjs/remark",[807],"remark-parse",": 一个 ",[30,2257,2080],{}," 插件，专门负责将 Markdown 文本解析成 AST（具体来说是 ",[803,2260,2263],{"href":2261,"rel":2262},"https://github.com/syntax-tree/mdast",[807],"mdast"," 格式）。",[109,2266,2268],{"id":2267},"第一步将-markdown-解析为-ast","第一步：将 Markdown 解析为 AST",[17,2270,2271],{},"首先，我们需要安装相关依赖：",[38,2273,2277],{"className":2274,"code":2275,"language":2276,"meta":43,"style":43},"language-bash shiki shiki-themes one-light one-dark-pro","npm install unified remark-parse\n","bash",[30,2278,2279],{"__ignoreMap":43},[47,2280,2281,2284,2287,2290],{"class":49,"line":50},[47,2282,2283],{"class":146},"npm",[47,2285,2286],{"class":205}," install",[47,2288,2289],{"class":205}," unified",[47,2291,2292],{"class":205}," remark-parse\n",[17,2294,2295],{},"然后，我们可以轻松地将 Markdown 字符串转换为 AST：",[38,2297,2301],{"className":2298,"code":2299,"language":2300,"meta":43,"style":43},"language-javascript shiki shiki-themes one-light one-dark-pro","import { unified } from 'unified'\nimport remarkParse from 'remark-parse'\n\nconst markdownContent = '# Hello, AST!\\n\\nThis is a paragraph.'\n\n// 创建一个处理器实例\nconst processor = unified().use(remarkParse)\n\n// 解析 Markdown 内容\nconst ast = processor.parse(markdownContent)\n\nconsole.log(JSON.stringify(ast, null, 2))\n","javascript",[30,2302,2303,2320,2333,2337,2355,2359,2364,2388,2392,2397,2420,2424],{"__ignoreMap":43},[47,2304,2305,2308,2310,2312,2314,2317],{"class":49,"line":50},[47,2306,2307],{"class":134},"import",[47,2309,229],{"class":150},[47,2311,2080],{"class":167},[47,2313,317],{"class":150},[47,2315,2316],{"class":134},"from",[47,2318,2319],{"class":205}," 'unified'\n",[47,2321,2322,2324,2327,2330],{"class":49,"line":56},[47,2323,2307],{"class":134},[47,2325,2326],{"class":167}," remarkParse",[47,2328,2329],{"class":134}," from",[47,2331,2332],{"class":205}," 'remark-parse'\n",[47,2334,2335],{"class":49,"line":62},[47,2336,185],{"emptyLinePlaceholder":184},[47,2338,2339,2341,2344,2346,2349,2352],{"class":49,"line":68},[47,2340,135],{"class":134},[47,2342,2343],{"class":138}," markdownContent",[47,2345,143],{"class":142},[47,2347,2348],{"class":205}," '# Hello, AST!",[47,2350,2351],{"class":142},"\\n\\n",[47,2353,2354],{"class":205},"This is a paragraph.'\n",[47,2356,2357],{"class":49,"line":74},[47,2358,185],{"emptyLinePlaceholder":184},[47,2360,2361],{"class":49,"line":80},[47,2362,2363],{"class":242},"// 创建一个处理器实例\n",[47,2365,2366,2368,2371,2373,2375,2378,2381,2383,2386],{"class":49,"line":86},[47,2367,135],{"class":134},[47,2369,2370],{"class":138}," processor",[47,2372,143],{"class":142},[47,2374,2289],{"class":146},[47,2376,2377],{"class":150},"().",[47,2379,2380],{"class":146},"use",[47,2382,151],{"class":150},[47,2384,2385],{"class":236},"remarkParse",[47,2387,179],{"class":150},[47,2389,2390],{"class":49,"line":92},[47,2391,185],{"emptyLinePlaceholder":184},[47,2393,2394],{"class":49,"line":98},[47,2395,2396],{"class":242},"// 解析 Markdown 内容\n",[47,2398,2399,2401,2404,2406,2408,2410,2413,2415,2418],{"class":49,"line":617},[47,2400,135],{"class":134},[47,2402,2403],{"class":138}," ast",[47,2405,143],{"class":142},[47,2407,2370],{"class":154},[47,2409,158],{"class":150},[47,2411,2412],{"class":146},"parse",[47,2414,151],{"class":150},[47,2416,2417],{"class":236},"markdownContent",[47,2419,179],{"class":150},[47,2421,2422],{"class":49,"line":3},[47,2423,185],{"emptyLinePlaceholder":184},[47,2425,2426,2429,2431,2434,2436,2439,2441,2444,2446,2449,2451,2454,2456,2459],{"class":49,"line":643},[47,2427,2428],{"class":154},"console",[47,2430,158],{"class":150},[47,2432,2433],{"class":146},"log",[47,2435,151],{"class":150},[47,2437,2438],{"class":138},"JSON",[47,2440,158],{"class":150},[47,2442,2443],{"class":146},"stringify",[47,2445,151],{"class":150},[47,2447,2448],{"class":236},"ast",[47,2450,373],{"class":150},[47,2452,2453],{"class":743},"null",[47,2455,373],{"class":150},[47,2457,2458],{"class":743},"2",[47,2460,734],{"class":150},[17,2462,2463],{},"运行以上代码，我们将得到一个如下所示的 JSON 对象，这就是我们梦寐以求的 AST：",[38,2465,2469],{"className":2466,"code":2467,"language":2468,"meta":43,"style":43},"language-json shiki shiki-themes one-light one-dark-pro","{\n  \"type\": \"root\",\n  \"children\": [\n    {\n      \"type\": \"heading\",\n      \"depth\": 1,\n      \"children\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"Hello, AST!\",\n          \"position\": { ... }\n        }\n      ],\n      \"position\": { ... }\n    },\n    {\n      \"type\": \"paragraph\",\n      \"children\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"This is a paragraph.\",\n          \"position\": { ... }\n        }\n      ],\n      \"position\": { ... }\n    }\n  ],\n  \"position\": { ... }\n}\n","json",[30,2470,2471,2476,2490,2498,2503,2515,2527,2534,2539,2551,2563,2578,2583,2588,2599,2604,2608,2619,2626,2631,2642,2654,2665,2670,2675,2686,2692,2698,2710],{"__ignoreMap":43},[47,2472,2473],{"class":49,"line":50},[47,2474,2475],{"class":150},"{\n",[47,2477,2478,2481,2484,2487],{"class":49,"line":56},[47,2479,2480],{"class":167},"  \"type\"",[47,2482,2483],{"class":150},": ",[47,2485,2486],{"class":205},"\"root\"",[47,2488,2489],{"class":150},",\n",[47,2491,2492,2495],{"class":49,"line":62},[47,2493,2494],{"class":167},"  \"children\"",[47,2496,2497],{"class":150},": [\n",[47,2499,2500],{"class":49,"line":68},[47,2501,2502],{"class":150},"    {\n",[47,2504,2505,2508,2510,2513],{"class":49,"line":74},[47,2506,2507],{"class":167},"      \"type\"",[47,2509,2483],{"class":150},[47,2511,2512],{"class":205},"\"heading\"",[47,2514,2489],{"class":150},[47,2516,2517,2520,2522,2525],{"class":49,"line":80},[47,2518,2519],{"class":167},"      \"depth\"",[47,2521,2483],{"class":150},[47,2523,2524],{"class":743},"1",[47,2526,2489],{"class":150},[47,2528,2529,2532],{"class":49,"line":86},[47,2530,2531],{"class":167},"      \"children\"",[47,2533,2497],{"class":150},[47,2535,2536],{"class":49,"line":92},[47,2537,2538],{"class":150},"        {\n",[47,2540,2541,2544,2546,2549],{"class":49,"line":98},[47,2542,2543],{"class":167},"          \"type\"",[47,2545,2483],{"class":150},[47,2547,2548],{"class":205},"\"text\"",[47,2550,2489],{"class":150},[47,2552,2553,2556,2558,2561],{"class":49,"line":617},[47,2554,2555],{"class":167},"          \"value\"",[47,2557,2483],{"class":150},[47,2559,2560],{"class":205},"\"Hello, AST!\"",[47,2562,2489],{"class":150},[47,2564,2565,2568,2571,2575],{"class":49,"line":3},[47,2566,2567],{"class":167},"          \"position\"",[47,2569,2570],{"class":150},": { ",[47,2572,2574],{"class":2573},"sUNH4","...",[47,2576,2577],{"class":150}," }\n",[47,2579,2580],{"class":49,"line":643},[47,2581,2582],{"class":150},"        }\n",[47,2584,2585],{"class":49,"line":670},[47,2586,2587],{"class":150},"      ],\n",[47,2589,2590,2593,2595,2597],{"class":49,"line":696},[47,2591,2592],{"class":167},"      \"position\"",[47,2594,2570],{"class":150},[47,2596,2574],{"class":2573},[47,2598,2577],{"class":150},[47,2600,2601],{"class":49,"line":737},[47,2602,2603],{"class":150},"    },\n",[47,2605,2606],{"class":49,"line":747},[47,2607,2502],{"class":150},[47,2609,2610,2612,2614,2617],{"class":49,"line":752},[47,2611,2507],{"class":167},[47,2613,2483],{"class":150},[47,2615,2616],{"class":205},"\"paragraph\"",[47,2618,2489],{"class":150},[47,2620,2622,2624],{"class":49,"line":2621},18,[47,2623,2531],{"class":167},[47,2625,2497],{"class":150},[47,2627,2629],{"class":49,"line":2628},19,[47,2630,2538],{"class":150},[47,2632,2634,2636,2638,2640],{"class":49,"line":2633},20,[47,2635,2543],{"class":167},[47,2637,2483],{"class":150},[47,2639,2548],{"class":205},[47,2641,2489],{"class":150},[47,2643,2645,2647,2649,2652],{"class":49,"line":2644},21,[47,2646,2555],{"class":167},[47,2648,2483],{"class":150},[47,2650,2651],{"class":205},"\"This is a paragraph.\"",[47,2653,2489],{"class":150},[47,2655,2657,2659,2661,2663],{"class":49,"line":2656},22,[47,2658,2567],{"class":167},[47,2660,2570],{"class":150},[47,2662,2574],{"class":2573},[47,2664,2577],{"class":150},[47,2666,2668],{"class":49,"line":2667},23,[47,2669,2582],{"class":150},[47,2671,2673],{"class":49,"line":2672},24,[47,2674,2587],{"class":150},[47,2676,2678,2680,2682,2684],{"class":49,"line":2677},25,[47,2679,2592],{"class":167},[47,2681,2570],{"class":150},[47,2683,2574],{"class":2573},[47,2685,2577],{"class":150},[47,2687,2689],{"class":49,"line":2688},26,[47,2690,2691],{"class":150},"    }\n",[47,2693,2695],{"class":49,"line":2694},27,[47,2696,2697],{"class":150},"  ],\n",[47,2699,2701,2704,2706,2708],{"class":49,"line":2700},28,[47,2702,2703],{"class":167},"  \"position\"",[47,2705,2570],{"class":150},[47,2707,2574],{"class":2573},[47,2709,2577],{"class":150},[47,2711,2713],{"class":49,"line":2712},29,[47,2714,2715],{"class":150},"}\n",[109,2717,2719],{"id":2718},"第二步从-ast-到-vue-vnodes","第二步：从 AST 到 Vue VNodes",[17,2721,2722,2723,2726],{},"拿到了 AST，下一步就是将这个“结构图纸”真正地“施工”成用户可见的界面。在 Vue 的世界里，描述 UI 的蓝图就是虚拟节点 (VNode)，而 ",[30,2724,2725],{},"h()"," 函数（即 hyperscript）就是创建 VNode 的画笔。",[17,2728,2729,2730,373,2733,373,2735,2738],{},"我们的任务是编写一个渲染函数，它能够递归地遍历 AST，并为每一种节点类型（",[30,2731,2732],{},"heading",[30,2734,2213],{},[30,2736,2737],{},"text"," 等）生成对应的 VNode。",[17,2740,2741],{},"下面是一个简单的渲染函数实现：",[38,2743,2745],{"className":2298,"code":2744,"language":2300,"meta":43,"style":43},"function renderAst(node) {\n  if (!node) return null\n  switch (node.type) {\n    case 'root':\n      return h('div', {}, node.children.map(renderAst))\n    case 'paragraph':\n      return h('p', {}, node.children.map(renderAst))\n    case 'text':\n      return node.value\n    case 'emphasis':\n      return h('em', {}, node.children.map(renderAst))\n    case 'strong':\n      return h('strong', {}, node.children.map(renderAst))\n    case 'inlineCode':\n      return h('code', {}, node.value)\n    case 'heading':\n      return h('h' + node.depth, {}, node.children.map(renderAst))\n    case 'code':\n      return h('pre', {}, [h('code', {}, node.value)])\n    case 'list':\n      return h(node.ordered ? 'ol' : 'ul', {}, node.children.map(renderAst))\n    case 'listItem':\n      return h('li', {}, node.children.map(renderAst))\n    case 'thematicBreak':\n      return h('hr')\n    case 'blockquote':\n      return h('blockquote', {}, node.children.map(renderAst))\n    case 'link':\n      return h('a', { href: node.url, target: '_blank' }, node.children.map(renderAst))\n    default:\n      // 其它未实现类型\n      return h('span', { }, `[${node.type}]`)\n  }\n}\n",[30,2746,2747,2763,2785,2801,2812,2845,2854,2883,2892,2904,2913,2942,2951,2980,2989,3010,3019,3058,3067,3100,3109,3154,3163,3192,3201,3214,3223,3252,3261,3316,3324,3330,3363,3369],{"__ignoreMap":43},[47,2748,2749,2752,2755,2757,2760],{"class":49,"line":50},[47,2750,2751],{"class":134},"function",[47,2753,2754],{"class":146}," renderAst",[47,2756,151],{"class":150},[47,2758,2759],{"class":663},"node",[47,2761,2762],{"class":150},") {\n",[47,2764,2765,2768,2771,2774,2776,2779,2782],{"class":49,"line":56},[47,2766,2767],{"class":134},"  if",[47,2769,2770],{"class":150}," (",[47,2772,2773],{"class":142},"!",[47,2775,2759],{"class":236},[47,2777,2778],{"class":150},") ",[47,2780,2781],{"class":134},"return",[47,2783,2784],{"class":743}," null\n",[47,2786,2787,2790,2792,2794,2796,2799],{"class":49,"line":62},[47,2788,2789],{"class":134},"  switch",[47,2791,2770],{"class":150},[47,2793,2759],{"class":154},[47,2795,158],{"class":150},[47,2797,2798],{"class":167},"type",[47,2800,2762],{"class":150},[47,2802,2803,2806,2809],{"class":49,"line":68},[47,2804,2805],{"class":134},"    case",[47,2807,2808],{"class":205}," 'root'",[47,2810,2811],{"class":150},":\n",[47,2813,2814,2817,2820,2822,2825,2828,2830,2832,2834,2836,2838,2840,2843],{"class":49,"line":74},[47,2815,2816],{"class":134},"      return",[47,2818,2819],{"class":146}," h",[47,2821,151],{"class":150},[47,2823,2824],{"class":205},"'div'",[47,2826,2827],{"class":150},", {}, ",[47,2829,2759],{"class":154},[47,2831,158],{"class":150},[47,2833,2217],{"class":161},[47,2835,158],{"class":150},[47,2837,687],{"class":146},[47,2839,151],{"class":150},[47,2841,2842],{"class":236},"renderAst",[47,2844,734],{"class":150},[47,2846,2847,2849,2852],{"class":49,"line":80},[47,2848,2805],{"class":134},[47,2850,2851],{"class":205}," 'paragraph'",[47,2853,2811],{"class":150},[47,2855,2856,2858,2860,2862,2865,2867,2869,2871,2873,2875,2877,2879,2881],{"class":49,"line":86},[47,2857,2816],{"class":134},[47,2859,2819],{"class":146},[47,2861,151],{"class":150},[47,2863,2864],{"class":205},"'p'",[47,2866,2827],{"class":150},[47,2868,2759],{"class":154},[47,2870,158],{"class":150},[47,2872,2217],{"class":161},[47,2874,158],{"class":150},[47,2876,687],{"class":146},[47,2878,151],{"class":150},[47,2880,2842],{"class":236},[47,2882,734],{"class":150},[47,2884,2885,2887,2890],{"class":49,"line":92},[47,2886,2805],{"class":134},[47,2888,2889],{"class":205}," 'text'",[47,2891,2811],{"class":150},[47,2893,2894,2896,2899,2901],{"class":49,"line":98},[47,2895,2816],{"class":134},[47,2897,2898],{"class":154}," node",[47,2900,158],{"class":150},[47,2902,2903],{"class":167},"value\n",[47,2905,2906,2908,2911],{"class":49,"line":617},[47,2907,2805],{"class":134},[47,2909,2910],{"class":205}," 'emphasis'",[47,2912,2811],{"class":150},[47,2914,2915,2917,2919,2921,2924,2926,2928,2930,2932,2934,2936,2938,2940],{"class":49,"line":3},[47,2916,2816],{"class":134},[47,2918,2819],{"class":146},[47,2920,151],{"class":150},[47,2922,2923],{"class":205},"'em'",[47,2925,2827],{"class":150},[47,2927,2759],{"class":154},[47,2929,158],{"class":150},[47,2931,2217],{"class":161},[47,2933,158],{"class":150},[47,2935,687],{"class":146},[47,2937,151],{"class":150},[47,2939,2842],{"class":236},[47,2941,734],{"class":150},[47,2943,2944,2946,2949],{"class":49,"line":643},[47,2945,2805],{"class":134},[47,2947,2948],{"class":205}," 'strong'",[47,2950,2811],{"class":150},[47,2952,2953,2955,2957,2959,2962,2964,2966,2968,2970,2972,2974,2976,2978],{"class":49,"line":670},[47,2954,2816],{"class":134},[47,2956,2819],{"class":146},[47,2958,151],{"class":150},[47,2960,2961],{"class":205},"'strong'",[47,2963,2827],{"class":150},[47,2965,2759],{"class":154},[47,2967,158],{"class":150},[47,2969,2217],{"class":161},[47,2971,158],{"class":150},[47,2973,687],{"class":146},[47,2975,151],{"class":150},[47,2977,2842],{"class":236},[47,2979,734],{"class":150},[47,2981,2982,2984,2987],{"class":49,"line":696},[47,2983,2805],{"class":134},[47,2985,2986],{"class":205}," 'inlineCode'",[47,2988,2811],{"class":150},[47,2990,2991,2993,2995,2997,3000,3002,3004,3006,3008],{"class":49,"line":737},[47,2992,2816],{"class":134},[47,2994,2819],{"class":146},[47,2996,151],{"class":150},[47,2998,2999],{"class":205},"'code'",[47,3001,2827],{"class":150},[47,3003,2759],{"class":154},[47,3005,158],{"class":150},[47,3007,653],{"class":167},[47,3009,179],{"class":150},[47,3011,3012,3014,3017],{"class":49,"line":747},[47,3013,2805],{"class":134},[47,3015,3016],{"class":205}," 'heading'",[47,3018,2811],{"class":150},[47,3020,3021,3023,3025,3027,3030,3033,3035,3037,3040,3042,3044,3046,3048,3050,3052,3054,3056],{"class":49,"line":752},[47,3022,2816],{"class":134},[47,3024,2819],{"class":146},[47,3026,151],{"class":150},[47,3028,3029],{"class":205},"'h'",[47,3031,3032],{"class":142}," +",[47,3034,2898],{"class":154},[47,3036,158],{"class":150},[47,3038,3039],{"class":167},"depth",[47,3041,2827],{"class":150},[47,3043,2759],{"class":154},[47,3045,158],{"class":150},[47,3047,2217],{"class":161},[47,3049,158],{"class":150},[47,3051,687],{"class":146},[47,3053,151],{"class":150},[47,3055,2842],{"class":236},[47,3057,734],{"class":150},[47,3059,3060,3062,3065],{"class":49,"line":2621},[47,3061,2805],{"class":134},[47,3063,3064],{"class":205}," 'code'",[47,3066,2811],{"class":150},[47,3068,3069,3071,3073,3075,3078,3081,3084,3086,3088,3090,3092,3094,3097],{"class":49,"line":2628},[47,3070,2816],{"class":134},[47,3072,2819],{"class":146},[47,3074,151],{"class":150},[47,3076,3077],{"class":205},"'pre'",[47,3079,3080],{"class":150},", {}, [",[47,3082,3083],{"class":146},"h",[47,3085,151],{"class":150},[47,3087,2999],{"class":205},[47,3089,2827],{"class":150},[47,3091,2759],{"class":154},[47,3093,158],{"class":150},[47,3095,653],{"class":3096},"sj4iG",[47,3098,3099],{"class":150},")])\n",[47,3101,3102,3104,3107],{"class":49,"line":2633},[47,3103,2805],{"class":134},[47,3105,3106],{"class":205}," 'list'",[47,3108,2811],{"class":150},[47,3110,3111,3113,3115,3117,3119,3121,3124,3127,3130,3133,3136,3138,3140,3142,3144,3146,3148,3150,3152],{"class":49,"line":2644},[47,3112,2816],{"class":134},[47,3114,2819],{"class":146},[47,3116,151],{"class":150},[47,3118,2759],{"class":154},[47,3120,158],{"class":150},[47,3122,3123],{"class":167},"ordered",[47,3125,3126],{"class":673}," ?",[47,3128,3129],{"class":205}," 'ol'",[47,3131,3132],{"class":673}," :",[47,3134,3135],{"class":205}," 'ul'",[47,3137,2827],{"class":150},[47,3139,2759],{"class":154},[47,3141,158],{"class":150},[47,3143,2217],{"class":161},[47,3145,158],{"class":150},[47,3147,687],{"class":146},[47,3149,151],{"class":150},[47,3151,2842],{"class":236},[47,3153,734],{"class":150},[47,3155,3156,3158,3161],{"class":49,"line":2656},[47,3157,2805],{"class":134},[47,3159,3160],{"class":205}," 'listItem'",[47,3162,2811],{"class":150},[47,3164,3165,3167,3169,3171,3174,3176,3178,3180,3182,3184,3186,3188,3190],{"class":49,"line":2667},[47,3166,2816],{"class":134},[47,3168,2819],{"class":146},[47,3170,151],{"class":150},[47,3172,3173],{"class":205},"'li'",[47,3175,2827],{"class":150},[47,3177,2759],{"class":154},[47,3179,158],{"class":150},[47,3181,2217],{"class":161},[47,3183,158],{"class":150},[47,3185,687],{"class":146},[47,3187,151],{"class":150},[47,3189,2842],{"class":236},[47,3191,734],{"class":150},[47,3193,3194,3196,3199],{"class":49,"line":2672},[47,3195,2805],{"class":134},[47,3197,3198],{"class":205}," 'thematicBreak'",[47,3200,2811],{"class":150},[47,3202,3203,3205,3207,3209,3212],{"class":49,"line":2677},[47,3204,2816],{"class":134},[47,3206,2819],{"class":146},[47,3208,151],{"class":150},[47,3210,3211],{"class":205},"'hr'",[47,3213,179],{"class":150},[47,3215,3216,3218,3221],{"class":49,"line":2688},[47,3217,2805],{"class":134},[47,3219,3220],{"class":205}," 'blockquote'",[47,3222,2811],{"class":150},[47,3224,3225,3227,3229,3231,3234,3236,3238,3240,3242,3244,3246,3248,3250],{"class":49,"line":2694},[47,3226,2816],{"class":134},[47,3228,2819],{"class":146},[47,3230,151],{"class":150},[47,3232,3233],{"class":205},"'blockquote'",[47,3235,2827],{"class":150},[47,3237,2759],{"class":154},[47,3239,158],{"class":150},[47,3241,2217],{"class":161},[47,3243,158],{"class":150},[47,3245,687],{"class":146},[47,3247,151],{"class":150},[47,3249,2842],{"class":236},[47,3251,734],{"class":150},[47,3253,3254,3256,3259],{"class":49,"line":2700},[47,3255,2805],{"class":134},[47,3257,3258],{"class":205}," 'link'",[47,3260,2811],{"class":150},[47,3262,3263,3265,3267,3269,3272,3275,3278,3280,3282,3284,3287,3289,3292,3294,3297,3300,3302,3304,3306,3308,3310,3312,3314],{"class":49,"line":2712},[47,3264,2816],{"class":134},[47,3266,2819],{"class":146},[47,3268,151],{"class":150},[47,3270,3271],{"class":205},"'a'",[47,3273,3274],{"class":150},", { ",[47,3276,3277],{"class":167},"href",[47,3279,226],{"class":225},[47,3281,2898],{"class":154},[47,3283,158],{"class":150},[47,3285,3286],{"class":167},"url",[47,3288,373],{"class":150},[47,3290,3291],{"class":167},"target",[47,3293,226],{"class":225},[47,3295,3296],{"class":205}," '_blank'",[47,3298,3299],{"class":150}," }, ",[47,3301,2759],{"class":154},[47,3303,158],{"class":150},[47,3305,2217],{"class":161},[47,3307,158],{"class":150},[47,3309,687],{"class":146},[47,3311,151],{"class":150},[47,3313,2842],{"class":236},[47,3315,734],{"class":150},[47,3317,3319,3322],{"class":49,"line":3318},30,[47,3320,3321],{"class":134},"    default",[47,3323,2811],{"class":150},[47,3325,3327],{"class":49,"line":3326},31,[47,3328,3329],{"class":242},"      // 其它未实现类型\n",[47,3331,3333,3335,3337,3339,3342,3345,3348,3350,3352,3354,3356,3358,3361],{"class":49,"line":3332},32,[47,3334,2816],{"class":134},[47,3336,2819],{"class":146},[47,3338,151],{"class":150},[47,3340,3341],{"class":205},"'span'",[47,3343,3344],{"class":150},", { }, ",[47,3346,3347],{"class":205},"`[",[47,3349,334],{"class":333},[47,3351,2759],{"class":154},[47,3353,158],{"class":513},[47,3355,2798],{"class":167},[47,3357,339],{"class":333},[47,3359,3360],{"class":205},"]`",[47,3362,179],{"class":150},[47,3364,3366],{"class":49,"line":3365},33,[47,3367,3368],{"class":150},"  }\n",[47,3370,3372],{"class":49,"line":3371},34,[47,3373,2715],{"class":150},[109,3375,3377],{"id":3376},"第三步封装-vue-组件","第三步：封装 Vue 组件",[17,3379,3380,3381,3384],{},"整合上述逻辑，我们可以构建一个 Vue 组件。鉴于直接生成 VNode 的特性，采用函数式组件或显式 ",[30,3382,3383],{},"render"," 函数最为适宜。",[38,3386,3390],{"className":3387,"code":3388,"language":3389,"meta":43,"style":43},"language-vue shiki shiki-themes one-light one-dark-pro","\u003Ctemplate>\n  \u003Ccomponent :is=\"VNodeTree\" />\n\u003C/template>\n\n\u003Cscript setup>\nimport { computed, h, shallowRef, watchEffect } from 'vue'\nimport { unified } from 'unified'\nimport remarkParse from 'remark-parse'\n\nconst props = defineProps({\n  mdText: {\n    type: String,\n    default: ''\n  }\n})\n\nconst ast = shallowRef(null)\nconst parser = unified().use(remarkParse)\n\nwatchEffect(() => {\n  ast.value = parser.parse(props.mdText)\n})\n\n// AST 渲染函数 (同上文 renderAst 函数)\nfunction renderAst(node) { ... }\n\nconst VNodeTree = computed(() => renderAst(ast.value))\n\n\u003C/script>\n","vue",[30,3391,3392,3402,3421,3430,3434,3446,3476,3490,3500,3504,3519,3528,3540,3549,3553,3557,3561,3578,3599,3603,3613,3642,3646,3650,3655,3672,3676,3703,3707],{"__ignoreMap":43},[47,3393,3394,3396,3399],{"class":49,"line":50},[47,3395,608],{"class":150},[47,3397,3398],{"class":167},"template",[47,3400,3401],{"class":150},">\n",[47,3403,3404,3407,3410,3413,3415,3418],{"class":49,"line":56},[47,3405,3406],{"class":150},"  \u003C",[47,3408,3409],{"class":167},"component",[47,3411,3412],{"class":743}," :is",[47,3414,320],{"class":150},[47,3416,3417],{"class":205},"\"VNodeTree\"",[47,3419,3420],{"class":150}," />\n",[47,3422,3423,3426,3428],{"class":49,"line":62},[47,3424,3425],{"class":150},"\u003C/",[47,3427,3398],{"class":167},[47,3429,3401],{"class":150},[47,3431,3432],{"class":49,"line":68},[47,3433,185],{"emptyLinePlaceholder":184},[47,3435,3436,3438,3441,3444],{"class":49,"line":74},[47,3437,608],{"class":150},[47,3439,3440],{"class":167},"script",[47,3442,3443],{"class":743}," setup",[47,3445,3401],{"class":150},[47,3447,3448,3450,3452,3455,3457,3459,3461,3464,3466,3469,3471,3473],{"class":49,"line":80},[47,3449,2307],{"class":134},[47,3451,229],{"class":150},[47,3453,3454],{"class":167},"computed",[47,3456,373],{"class":150},[47,3458,3083],{"class":167},[47,3460,373],{"class":150},[47,3462,3463],{"class":167},"shallowRef",[47,3465,373],{"class":150},[47,3467,3468],{"class":167},"watchEffect",[47,3470,317],{"class":150},[47,3472,2316],{"class":134},[47,3474,3475],{"class":205}," 'vue'\n",[47,3477,3478,3480,3482,3484,3486,3488],{"class":49,"line":86},[47,3479,2307],{"class":134},[47,3481,229],{"class":150},[47,3483,2080],{"class":167},[47,3485,317],{"class":150},[47,3487,2316],{"class":134},[47,3489,2319],{"class":205},[47,3491,3492,3494,3496,3498],{"class":49,"line":92},[47,3493,2307],{"class":134},[47,3495,2326],{"class":167},[47,3497,2329],{"class":134},[47,3499,2332],{"class":205},[47,3501,3502],{"class":49,"line":98},[47,3503,185],{"emptyLinePlaceholder":184},[47,3505,3506,3508,3511,3513,3516],{"class":49,"line":617},[47,3507,135],{"class":134},[47,3509,3510],{"class":138}," props",[47,3512,143],{"class":142},[47,3514,3515],{"class":146}," defineProps",[47,3517,3518],{"class":150},"({\n",[47,3520,3521,3524,3526],{"class":49,"line":3},[47,3522,3523],{"class":167},"  mdText",[47,3525,226],{"class":225},[47,3527,640],{"class":150},[47,3529,3530,3533,3535,3538],{"class":49,"line":643},[47,3531,3532],{"class":167},"    type",[47,3534,226],{"class":225},[47,3536,3537],{"class":236}," String",[47,3539,2489],{"class":150},[47,3541,3542,3544,3546],{"class":49,"line":670},[47,3543,3321],{"class":167},[47,3545,226],{"class":225},[47,3547,3548],{"class":205}," ''\n",[47,3550,3551],{"class":49,"line":696},[47,3552,3368],{"class":150},[47,3554,3555],{"class":49,"line":737},[47,3556,755],{"class":150},[47,3558,3559],{"class":49,"line":747},[47,3560,185],{"emptyLinePlaceholder":184},[47,3562,3563,3565,3567,3569,3572,3574,3576],{"class":49,"line":752},[47,3564,135],{"class":134},[47,3566,2403],{"class":138},[47,3568,143],{"class":142},[47,3570,3571],{"class":146}," shallowRef",[47,3573,151],{"class":150},[47,3575,2453],{"class":743},[47,3577,179],{"class":150},[47,3579,3580,3582,3585,3587,3589,3591,3593,3595,3597],{"class":49,"line":2621},[47,3581,135],{"class":134},[47,3583,3584],{"class":138}," parser",[47,3586,143],{"class":142},[47,3588,2289],{"class":146},[47,3590,2377],{"class":150},[47,3592,2380],{"class":146},[47,3594,151],{"class":150},[47,3596,2385],{"class":236},[47,3598,179],{"class":150},[47,3600,3601],{"class":49,"line":2628},[47,3602,185],{"emptyLinePlaceholder":184},[47,3604,3605,3607,3609,3611],{"class":49,"line":2633},[47,3606,3468],{"class":146},[47,3608,634],{"class":150},[47,3610,637],{"class":134},[47,3612,640],{"class":150},[47,3614,3615,3618,3620,3622,3624,3626,3628,3630,3632,3635,3637,3640],{"class":49,"line":2644},[47,3616,3617],{"class":154},"  ast",[47,3619,158],{"class":150},[47,3621,653],{"class":167},[47,3623,143],{"class":142},[47,3625,3584],{"class":154},[47,3627,158],{"class":150},[47,3629,2412],{"class":146},[47,3631,151],{"class":150},[47,3633,3634],{"class":154},"props",[47,3636,158],{"class":150},[47,3638,3639],{"class":167},"mdText",[47,3641,179],{"class":150},[47,3643,3644],{"class":49,"line":2656},[47,3645,755],{"class":150},[47,3647,3648],{"class":49,"line":2667},[47,3649,185],{"emptyLinePlaceholder":184},[47,3651,3652],{"class":49,"line":2672},[47,3653,3654],{"class":242},"// AST 渲染函数 (同上文 renderAst 函数)\n",[47,3656,3657,3659,3661,3663,3665,3668,3670],{"class":49,"line":2677},[47,3658,2751],{"class":134},[47,3660,2754],{"class":146},[47,3662,151],{"class":150},[47,3664,2759],{"class":663},[47,3666,3667],{"class":150},") { ",[47,3669,2574],{"class":225},[47,3671,2577],{"class":150},[47,3673,3674],{"class":49,"line":2688},[47,3675,185],{"emptyLinePlaceholder":184},[47,3677,3678,3680,3683,3685,3687,3689,3691,3693,3695,3697,3699,3701],{"class":49,"line":2694},[47,3679,135],{"class":134},[47,3681,3682],{"class":138}," VNodeTree",[47,3684,143],{"class":142},[47,3686,631],{"class":146},[47,3688,634],{"class":150},[47,3690,637],{"class":134},[47,3692,2754],{"class":146},[47,3694,151],{"class":150},[47,3696,2448],{"class":154},[47,3698,158],{"class":150},[47,3700,653],{"class":167},[47,3702,734],{"class":150},[47,3704,3705],{"class":49,"line":2700},[47,3706,185],{"emptyLinePlaceholder":184},[47,3708,3709,3711,3713],{"class":49,"line":2712},[47,3710,3425],{"class":150},[47,3712,3440],{"class":167},[47,3714,3401],{"class":150},[17,3716,3717],{},"现在就可以像使用普通组件一样使用它了：",[38,3719,3721],{"className":3387,"code":3720,"language":3389,"meta":43,"style":43},"\u003Ctemplate>\n  \u003CMarkdownRenderer :mdText=\"markdownContent\" />\n\u003C/template>\n\n\u003Cscript setup>\nimport { ref } from 'vue'\nimport MarkdownRenderer from './MarkdownRenderer.vue'\n\nconst markdownContent = ref('# Hello Vue\\n\\nThis is rendered via AST!')\n\u003C/script>\n",[30,3722,3723,3731,3748,3756,3760,3770,3785,3797,3801,3824],{"__ignoreMap":43},[47,3724,3725,3727,3729],{"class":49,"line":50},[47,3726,608],{"class":150},[47,3728,3398],{"class":167},[47,3730,3401],{"class":150},[47,3732,3733,3735,3738,3741,3743,3746],{"class":49,"line":56},[47,3734,3406],{"class":150},[47,3736,3737],{"class":167},"MarkdownRenderer",[47,3739,3740],{"class":743}," :mdText",[47,3742,320],{"class":150},[47,3744,3745],{"class":205},"\"markdownContent\"",[47,3747,3420],{"class":150},[47,3749,3750,3752,3754],{"class":49,"line":62},[47,3751,3425],{"class":150},[47,3753,3398],{"class":167},[47,3755,3401],{"class":150},[47,3757,3758],{"class":49,"line":68},[47,3759,185],{"emptyLinePlaceholder":184},[47,3761,3762,3764,3766,3768],{"class":49,"line":74},[47,3763,608],{"class":150},[47,3765,3440],{"class":167},[47,3767,3443],{"class":743},[47,3769,3401],{"class":150},[47,3771,3772,3774,3776,3779,3781,3783],{"class":49,"line":80},[47,3773,2307],{"class":134},[47,3775,229],{"class":150},[47,3777,3778],{"class":167},"ref",[47,3780,317],{"class":150},[47,3782,2316],{"class":134},[47,3784,3475],{"class":205},[47,3786,3787,3789,3792,3794],{"class":49,"line":86},[47,3788,2307],{"class":134},[47,3790,3791],{"class":167}," MarkdownRenderer",[47,3793,2329],{"class":134},[47,3795,3796],{"class":205}," './MarkdownRenderer.vue'\n",[47,3798,3799],{"class":49,"line":92},[47,3800,185],{"emptyLinePlaceholder":184},[47,3802,3803,3805,3807,3809,3812,3814,3817,3819,3822],{"class":49,"line":98},[47,3804,135],{"class":134},[47,3806,2343],{"class":138},[47,3808,143],{"class":142},[47,3810,3811],{"class":146}," ref",[47,3813,151],{"class":150},[47,3815,3816],{"class":205},"'# Hello Vue",[47,3818,2351],{"class":142},[47,3820,3821],{"class":205},"This is rendered via AST!'",[47,3823,179],{"class":150},[47,3825,3826,3828,3830],{"class":49,"line":617},[47,3827,3425],{"class":150},[47,3829,3440],{"class":167},[47,3831,3401],{"class":150},[109,3833,3835],{"id":3834},"ast-方案的巨大优势","AST 方案的巨大优势",[17,3837,3838],{},"切换到 AST 赛道后，我们获得了前所未有的超能力：",[1214,3840,3841,3853,3925,3938],{},[1023,3842,3843,3846,3847,3849,3850,3852],{},[21,3844,3845],{},"原生集成，性能卓越","：我们不再需要 ",[30,3848,2101],{}," 的暴力刷新，也不再需要 ",[30,3851,2089],{}," 这样的“外援”。所有更新都交由 Vue 自己的 Diff 算法处理，这不仅性能极高，而且完全符合 Vue 的设计哲学，是真正的“自己人”。",[1023,3854,3855,3858,3859],{},[21,3856,3857],{},"高度灵活性与可扩展性","：AST 作为可编程的 JavaScript 对象，为定制化处理提供了坚实基础：\n",[1020,3860,3861,3882,3904],{},[1023,3862,3863,3866,3867,3870,3871,3874,3875,3877,3878,3881],{},[21,3864,3865],{},"元素替换","：可将原生元素（如 ",[30,3868,3869],{},"\u003Ch2>","）无缝替换为自定义 Vue 组件（如 ",[30,3872,3873],{},"\u003CFancyHeading>","），仅在 ",[30,3876,2842],{}," 函数中调整对应 ",[30,3879,3880],{},"case"," 逻辑即可。",[1023,3883,3884,3887,3888,3891,3892,3895,3896,3899,3900,3903],{},[21,3885,3886],{},"逻辑注入","：可便捷地为外部链接 ",[30,3889,3890],{},"\u003Ca>"," 添加 ",[30,3893,3894],{},"target=\"_blank\""," 与 ",[30,3897,3898],{},"rel=\"noopener noreferrer\""," 属性，或为图片 ",[30,3901,3902],{},"\u003Cimg>"," 包裹懒加载组件，此类操作在 AST 层面易于实现。",[1023,3905,3906,3909,3910,3912,3913,3916,3917,3920,3921,3924],{},[21,3907,3908],{},"生态集成","：充分利用 ",[30,3911,2080],{}," 丰富的插件生态（如 ",[30,3914,3915],{},"remark-gfm"," 支持 GFM 语法，",[30,3918,3919],{},"remark-prism"," 实现代码高亮），仅需在处理器链中引入相应插件（",[30,3922,3923],{},".use(pluginName)","）。",[1023,3926,3927,3930,3931,3934,3935,3937],{},[21,3928,3929],{},"关注点分离","：解析逻辑（",[30,3932,3933],{},"remark","）、渲染逻辑（",[30,3936,2842],{},"）和业务逻辑（Vue 组件）被清晰地分离开来，代码结构更清晰，维护性更强。",[1023,3939,3940,3943],{},[21,3941,3942],{},"类型安全与可预测性","：相较于操作字符串或原始 HTML，基于结构化 AST 的渲染逻辑更易于进行类型校验与逻辑推理。",[109,3945,3947],{"id":3946},"结论从功能实现到架构优化的演进","结论：从功能实现到架构优化的演进",[17,3949,3950],{},"回顾优化历程：",[1020,3952,3953,3958,3964,3969],{},[1023,3954,3955,3957],{},[21,3956,2101],{},"：实现简单，但存在性能与安全性隐患。",[1023,3959,3960,3963],{},[21,3961,3962],{},"分块更新","：缓解了部分性能问题，但方案存在局限性。",[1023,3965,3966,3968],{},[21,3967,2089],{},"：有效提升了性能与用户体验，但与 Vue 核心机制存在隔阂。",[1023,3970,3971,3974],{},[21,3972,3973],{},"AST + 函数式渲染","：回归 Vue 原生范式，提供了性能、灵活性、可维护性俱佳的终极解决方案。",[17,3976,3977],{},"通过采用 AST，我们不仅解决了具体的技术挑战，更重要的是实现了思维范式的转变——从面向结果（HTML 字符串）的编程，转向面向过程与结构（AST）的编程。这使我们能够深入内容本质，从而实现对渲染流程的精确控制。",[17,3979,3980],{},"本次从“全量刷新”到“结构化渲染”的优化实践，不仅是一次性能提升的技术过程，更是一次深入理解现代前端工程化思想的系统性探索。最终实现的 Markdown 渲染方案，在性能、功能性与架构优雅性上均达到了较高水准。",[1066,3982,3983],{},"html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sNmU0, html code.shiki .sNmU0{--shiki-default:#986801;--shiki-dark:#E5C07B}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html pre.shiki code .sz0mV, html code.shiki .sz0mV{--shiki-default:#383A42;--shiki-dark:#E06C75}html pre.shiki code .s7GmK, html code.shiki .s7GmK{--shiki-default:#383A42;--shiki-dark:#E5C07B}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sUNH4, html code.shiki .sUNH4{--shiki-default:white;--shiki-dark:#FFFFFF}html pre.shiki code .s8iYz, html code.shiki .s8iYz{--shiki-default:#383A42;--shiki-default-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic}html pre.shiki code .s2QsP, html code.shiki .s2QsP{--shiki-default:#E45649;--shiki-dark:#E5C07B}html pre.shiki code .sj4iG, html code.shiki .sj4iG{--shiki-default:#C18401;--shiki-dark:#E06C75}html pre.shiki code .s7DPa, html code.shiki .s7DPa{--shiki-default:#0184BC;--shiki-dark:#C678DD}html pre.shiki code .st7oF, html code.shiki .st7oF{--shiki-default:#0184BC;--shiki-dark:#ABB2BF}html pre.shiki code .sAOjX, html code.shiki .sAOjX{--shiki-default:#CA1243;--shiki-dark:#C678DD}html pre.shiki code .sMj0N, html code.shiki .sMj0N{--shiki-default:#50A14F;--shiki-dark:#ABB2BF}",{"title":43,"searchDepth":56,"depth":56,"links":3985},[3986,3988,3992,3993,3994,3995,3996],{"id":2085,"depth":56,"text":3987},"上回回顾：当 morphdom 遇上 Vue",{"id":2137,"depth":56,"text":2138,"children":3989},[3990,3991],{"id":2195,"depth":62,"text":2196},{"id":2223,"depth":62,"text":2224},{"id":2267,"depth":56,"text":2268},{"id":2718,"depth":56,"text":2719},{"id":3376,"depth":56,"text":3377},{"id":3834,"depth":56,"text":3835},{"id":3946,"depth":56,"text":3947},{"title":3998,"date":3999,"path":4000,"tags":4001,"body":4003},"Vue Markdown 渲染优化实战(上)：从暴力刷新、分块更新到 Morphdom 的华丽变身","2025-07-12 20:48:56","/2025/07/12/vue-markdown-render-improvement-1",[2076,2077,12,2079,4002],"HTML",{"type":14,"value":4004,"toc":5367},[4005,4008,4011,4038,4042,4045,4048,4058,4061,4264,4268,4275,4286,4298,4306,4309,4858,4862,4865,4869,4877,4883,4894,4904,4907,4910,5318,5322,5325,5331,5336,5343,5346,5352,5358,5364],[109,4006,4007],{"id":4007},"需求背景",[17,4009,4010],{},"在最近接手的 AI 需求中，需要实现一个类似 ChatGPT 的对话交互界面。其核心流程是：后端通过 SSE（Server-Sent  Events）协议，持续地将 AI 生成的 Markdown 格式文本片段推送到前端。前端负责动态接收并拼接这些 Markdown  片段，最终将拼接完成的 Markdown 文本实时渲染并显示在用户界面上。",[17,4012,4013,4014,4019,4020,4025,4026,4031,4032,4037],{},"Markdown 渲染并不是什么罕见的需求，尤其是在 LLM 相关落地产品满天飞的当下。不同于 React 生态拥有一个 14k+ star 的著名第三方库——",[803,4015,4018],{"href":4016,"rel":4017},"https://github.com/remarkjs/react-markdown",[807],"react-markdown","，Vue 这边似乎暂时还没有一个仍在活跃维护的、star 数量不低（起码得 2k+ 吧？）的 markdown 渲染库。",[803,4021,4024],{"href":4022,"rel":4023},"https://github.com/cloudacy/vue-markdown-render#readme",[807],"cloudacy/vue-markdown-render"," 最后一次发版在一年前，但截止本文写作时间只有 103 个 star；",[803,4027,4030],{"href":4028,"rel":4029},"https://github.com/miaolz123/vue-markdown",[807],"miaolz123/vue-markdown"," 有 2k star，但最后一次 commit 已经是 7 年前了；",[803,4033,4036],{"href":4034,"rel":4035},"https://github.com/zhaoxuhui1122/vue-markdown",[807],"zhaoxuhui1122/vue-markdown"," 更是 archived 状态。",[109,4039,4041],{"id":4040},"第一版方案简单粗暴的-v-html","第一版方案：简单粗暴的 v-html",[17,4043,4044],{},"简单调研了一圈，发现 Vue 生态里确实缺少一个能打的 Markdown 渲染库。既然没有现成的轮子，那咱就自己造一个！",[17,4046,4047],{},"根据大部分文章以及 LLM 的推荐，我们首先采用 markdown-it 这个第三方库将 markdown 转换为 html 字符串，再通过 v-html 传入。",[17,4049,4050,4053,4054,4057],{},[21,4051,4052],{},"PS:"," 我们这里假设 Markdown 内容是可信的（比如由我们自己的 AI 生成）。如果内容来自用户输入，一定要使用 ",[30,4055,4056],{},"DOMPurify"," 这类库来防止 XSS 攻击，避免给网站“开天窗”哦！",[17,4059,4060],{},"示例代码如下：",[38,4062,4064],{"className":3387,"code":4063,"language":3389,"meta":43,"style":43},"\u003Ctemplate>\n  \u003Cdiv v-html=\"renderedHtml\">\u003C/div>\n\u003C/template>\n\n\u003Cscript setup>\nimport { computed, onMounted, ref } from 'vue';\nimport MarkdownIt from 'markdown-it';\n\nconst markdownContent = ref('');\nconst md = new MarkdownIt();\n\nconst renderedHtml = computed(() => md.render(markdownContent.value))\n\nonMounted(() => {\n  // markdownContent.value = await fetch() ...\n})\n\u003C/script>\n",[30,4065,4066,4074,4096,4104,4108,4118,4145,4159,4163,4181,4198,4202,4233,4237,4247,4252,4256],{"__ignoreMap":43},[47,4067,4068,4070,4072],{"class":49,"line":50},[47,4069,608],{"class":150},[47,4071,3398],{"class":167},[47,4073,3401],{"class":150},[47,4075,4076,4078,4081,4084,4086,4089,4092,4094],{"class":49,"line":56},[47,4077,3406],{"class":150},[47,4079,4080],{"class":167},"div",[47,4082,4083],{"class":743}," v-html",[47,4085,320],{"class":150},[47,4087,4088],{"class":205},"\"renderedHtml\"",[47,4090,4091],{"class":150},">\u003C/",[47,4093,4080],{"class":167},[47,4095,3401],{"class":150},[47,4097,4098,4100,4102],{"class":49,"line":62},[47,4099,3425],{"class":150},[47,4101,3398],{"class":167},[47,4103,3401],{"class":150},[47,4105,4106],{"class":49,"line":68},[47,4107,185],{"emptyLinePlaceholder":184},[47,4109,4110,4112,4114,4116],{"class":49,"line":74},[47,4111,608],{"class":150},[47,4113,3440],{"class":167},[47,4115,3443],{"class":743},[47,4117,3401],{"class":150},[47,4119,4120,4122,4124,4126,4128,4131,4133,4135,4137,4139,4142],{"class":49,"line":80},[47,4121,2307],{"class":134},[47,4123,229],{"class":150},[47,4125,3454],{"class":167},[47,4127,373],{"class":150},[47,4129,4130],{"class":167},"onMounted",[47,4132,373],{"class":150},[47,4134,3778],{"class":167},[47,4136,317],{"class":150},[47,4138,2316],{"class":134},[47,4140,4141],{"class":205}," 'vue'",[47,4143,4144],{"class":150},";\n",[47,4146,4147,4149,4152,4154,4157],{"class":49,"line":86},[47,4148,2307],{"class":134},[47,4150,4151],{"class":167}," MarkdownIt",[47,4153,2329],{"class":134},[47,4155,4156],{"class":205}," 'markdown-it'",[47,4158,4144],{"class":150},[47,4160,4161],{"class":49,"line":92},[47,4162,185],{"emptyLinePlaceholder":184},[47,4164,4165,4167,4169,4171,4173,4175,4178],{"class":49,"line":98},[47,4166,135],{"class":134},[47,4168,2343],{"class":138},[47,4170,143],{"class":142},[47,4172,3811],{"class":146},[47,4174,151],{"class":150},[47,4176,4177],{"class":205},"''",[47,4179,4180],{"class":150},");\n",[47,4182,4183,4185,4188,4190,4193,4195],{"class":49,"line":617},[47,4184,135],{"class":134},[47,4186,4187],{"class":138}," md",[47,4189,143],{"class":142},[47,4191,4192],{"class":134}," new",[47,4194,4151],{"class":146},[47,4196,4197],{"class":150},"();\n",[47,4199,4200],{"class":49,"line":3},[47,4201,185],{"emptyLinePlaceholder":184},[47,4203,4204,4206,4209,4211,4213,4215,4217,4219,4221,4223,4225,4227,4229,4231],{"class":49,"line":643},[47,4205,135],{"class":134},[47,4207,4208],{"class":138}," renderedHtml",[47,4210,143],{"class":142},[47,4212,631],{"class":146},[47,4214,634],{"class":150},[47,4216,637],{"class":134},[47,4218,4187],{"class":154},[47,4220,158],{"class":150},[47,4222,3383],{"class":146},[47,4224,151],{"class":150},[47,4226,2417],{"class":154},[47,4228,158],{"class":150},[47,4230,653],{"class":167},[47,4232,734],{"class":150},[47,4234,4235],{"class":49,"line":670},[47,4236,185],{"emptyLinePlaceholder":184},[47,4238,4239,4241,4243,4245],{"class":49,"line":696},[47,4240,4130],{"class":146},[47,4242,634],{"class":150},[47,4244,637],{"class":134},[47,4246,640],{"class":150},[47,4248,4249],{"class":49,"line":737},[47,4250,4251],{"class":242},"  // markdownContent.value = await fetch() ...\n",[47,4253,4254],{"class":49,"line":747},[47,4255,755],{"class":150},[47,4257,4258,4260,4262],{"class":49,"line":752},[47,4259,3425],{"class":150},[47,4261,3440],{"class":167},[47,4263,3401],{"class":150},[109,4265,4267],{"id":4266},"进化版给-markdown-分块更新","进化版：给 Markdown 分块更新",[17,4269,4270,4271,4274],{},"上述方案虽然能实现基础渲染，但在实时更新场景下存在明显缺陷：",[21,4272,4273],{},"每次接收到新的 Markdown 片段，整个文档都会触发全量重渲染","。即使只有最后一行是新增内容，整个文档的 DOM 也会被完全替换。这导致两个核心问题：",[1214,4276,4277,4283],{},[1023,4278,4279,4280,4282],{},"**性能顶不住：**Markdown 内容增长时，",[30,4281,2155],{}," 解析和 DOM 重建的开销呈线性上升。",[1023,4284,4285],{},"**交互状态丢失：**全量刷新会把用户当前的操作状态冲掉。最明显的就是，如果你选中了某段文字，一刷新，选中状态就没了！",[17,4287,4288,4289,4294,4295,4297],{},"为了解决这两个问题，",[803,4290,4293],{"href":4291,"rel":4292},"https://juejin.cn/post/7480900772386734143",[807],"我们在网上找到了分块渲染的方案"," —— 把 Markdown 按两个连续的换行符 (",[30,4296,2351],{},") 切成一块一块的。这样每次更新，只重新渲染最后一块新的，前面的老块直接复用缓存。好处很明显：",[1020,4299,4300,4303],{},[1023,4301,4302],{},"用户如果选中了前面块里的文字，下次更新时选中状态不会丢（因为前面的块没动）。",[1023,4304,4305],{},"需要重新渲染的 DOM 变少了，性能自然就上来了。",[17,4307,4308],{},"代码调整后像这样：",[38,4310,4312],{"className":3387,"code":4311,"language":3389,"meta":43,"style":43},"\u003Ctemplate>\n  \u003Cdiv>\n    \u003Cdiv\n      v-for=\"(block, idx) in renderedBlocks\"\n      :key=\"idx\"\n      v-html=\"block\"\n      class=\"markdown-block\"\n    >\u003C/div>\n  \u003C/div>\n\u003C/template>\n\n\u003Cscript setup>\nimport { ref, computed, watch } from 'vue'\nimport MarkdownIt from 'markdown-it'\n\nconst markdownContent = ref('')\nconst md = new MarkdownIt()\n\nconst renderedBlocks = ref([])\nconst blockCache = ref([])\n\nwatch(\n  markdownContent,\n  (newContent, oldContent) => {\n    const blocks = newContent.split(/\\n{2,}/)\n    // 只重新渲染最后一个块，其余用缓存\n    // 处理块减少、块增多的场景\n    blockCache.value.length = blocks.length\n    for (let i = 0; i \u003C blocks.length; i++) {\n      // 只渲染最后一个，或新块\n      if (i === blocks.length - 1 || !blockCache.value[i]) {\n        blockCache.value[i] = md.render(blocks[i] || '')\n      }\n      // 其余块直接复用\n    }\n    renderedBlocks.value = blockCache.value.slice()\n  },\n  { immediate: true }\n)\n\nonMounted(() => {\n  // markdownContent.value = await fetch() ...\n})\n\u003C/script>\n",[30,4313,4314,4322,4330,4338,4348,4358,4368,4378,4387,4396,4404,4408,4418,4441,4452,4456,4472,4486,4490,4504,4517,4521,4528,4535,4554,4589,4594,4599,4622,4664,4669,4713,4756,4761,4766,4771,4796,4802,4818,4823,4828,4839,4844,4849],{"__ignoreMap":43},[47,4315,4316,4318,4320],{"class":49,"line":50},[47,4317,608],{"class":150},[47,4319,3398],{"class":167},[47,4321,3401],{"class":150},[47,4323,4324,4326,4328],{"class":49,"line":56},[47,4325,3406],{"class":150},[47,4327,4080],{"class":167},[47,4329,3401],{"class":150},[47,4331,4332,4335],{"class":49,"line":62},[47,4333,4334],{"class":150},"    \u003C",[47,4336,4337],{"class":167},"div\n",[47,4339,4340,4343,4345],{"class":49,"line":68},[47,4341,4342],{"class":743},"      v-for",[47,4344,320],{"class":150},[47,4346,4347],{"class":205},"\"(block, idx) in renderedBlocks\"\n",[47,4349,4350,4353,4355],{"class":49,"line":74},[47,4351,4352],{"class":743},"      :key",[47,4354,320],{"class":150},[47,4356,4357],{"class":205},"\"idx\"\n",[47,4359,4360,4363,4365],{"class":49,"line":80},[47,4361,4362],{"class":743},"      v-html",[47,4364,320],{"class":150},[47,4366,4367],{"class":205},"\"block\"\n",[47,4369,4370,4373,4375],{"class":49,"line":86},[47,4371,4372],{"class":743},"      class",[47,4374,320],{"class":150},[47,4376,4377],{"class":205},"\"markdown-block\"\n",[47,4379,4380,4383,4385],{"class":49,"line":92},[47,4381,4382],{"class":150},"    >\u003C/",[47,4384,4080],{"class":167},[47,4386,3401],{"class":150},[47,4388,4389,4392,4394],{"class":49,"line":98},[47,4390,4391],{"class":150},"  \u003C/",[47,4393,4080],{"class":167},[47,4395,3401],{"class":150},[47,4397,4398,4400,4402],{"class":49,"line":617},[47,4399,3425],{"class":150},[47,4401,3398],{"class":167},[47,4403,3401],{"class":150},[47,4405,4406],{"class":49,"line":3},[47,4407,185],{"emptyLinePlaceholder":184},[47,4409,4410,4412,4414,4416],{"class":49,"line":643},[47,4411,608],{"class":150},[47,4413,3440],{"class":167},[47,4415,3443],{"class":743},[47,4417,3401],{"class":150},[47,4419,4420,4422,4424,4426,4428,4430,4432,4435,4437,4439],{"class":49,"line":670},[47,4421,2307],{"class":134},[47,4423,229],{"class":150},[47,4425,3778],{"class":167},[47,4427,373],{"class":150},[47,4429,3454],{"class":167},[47,4431,373],{"class":150},[47,4433,4434],{"class":167},"watch",[47,4436,317],{"class":150},[47,4438,2316],{"class":134},[47,4440,3475],{"class":205},[47,4442,4443,4445,4447,4449],{"class":49,"line":696},[47,4444,2307],{"class":134},[47,4446,4151],{"class":167},[47,4448,2329],{"class":134},[47,4450,4451],{"class":205}," 'markdown-it'\n",[47,4453,4454],{"class":49,"line":737},[47,4455,185],{"emptyLinePlaceholder":184},[47,4457,4458,4460,4462,4464,4466,4468,4470],{"class":49,"line":747},[47,4459,135],{"class":134},[47,4461,2343],{"class":138},[47,4463,143],{"class":142},[47,4465,3811],{"class":146},[47,4467,151],{"class":150},[47,4469,4177],{"class":205},[47,4471,179],{"class":150},[47,4473,4474,4476,4478,4480,4482,4484],{"class":49,"line":752},[47,4475,135],{"class":134},[47,4477,4187],{"class":138},[47,4479,143],{"class":142},[47,4481,4192],{"class":134},[47,4483,4151],{"class":146},[47,4485,253],{"class":150},[47,4487,4488],{"class":49,"line":2621},[47,4489,185],{"emptyLinePlaceholder":184},[47,4491,4492,4494,4497,4499,4501],{"class":49,"line":2628},[47,4493,135],{"class":134},[47,4495,4496],{"class":138}," renderedBlocks",[47,4498,143],{"class":142},[47,4500,3811],{"class":146},[47,4502,4503],{"class":150},"([])\n",[47,4505,4506,4508,4511,4513,4515],{"class":49,"line":2633},[47,4507,135],{"class":134},[47,4509,4510],{"class":138}," blockCache",[47,4512,143],{"class":142},[47,4514,3811],{"class":146},[47,4516,4503],{"class":150},[47,4518,4519],{"class":49,"line":2644},[47,4520,185],{"emptyLinePlaceholder":184},[47,4522,4523,4525],{"class":49,"line":2656},[47,4524,4434],{"class":146},[47,4526,4527],{"class":150},"(\n",[47,4529,4530,4533],{"class":49,"line":2667},[47,4531,4532],{"class":236},"  markdownContent",[47,4534,2489],{"class":150},[47,4536,4537,4540,4543,4545,4548,4550,4552],{"class":49,"line":2672},[47,4538,4539],{"class":150},"  (",[47,4541,4542],{"class":663},"newContent",[47,4544,373],{"class":150},[47,4546,4547],{"class":663},"oldContent",[47,4549,2778],{"class":150},[47,4551,637],{"class":134},[47,4553,640],{"class":150},[47,4555,4556,4559,4562,4564,4567,4569,4572,4574,4577,4581,4585,4587],{"class":49,"line":2677},[47,4557,4558],{"class":134},"    const",[47,4560,4561],{"class":138}," blocks",[47,4563,143],{"class":142},[47,4565,4566],{"class":154}," newContent",[47,4568,158],{"class":150},[47,4570,4571],{"class":146},"split",[47,4573,151],{"class":150},[47,4575,1970],{"class":4576},"sDaw7",[47,4578,4580],{"class":4579},"sRZ4U","\\n",[47,4582,4584],{"class":4583},"sYoRg","{2,}",[47,4586,1970],{"class":4576},[47,4588,179],{"class":150},[47,4590,4591],{"class":49,"line":2688},[47,4592,4593],{"class":242},"    // 只重新渲染最后一个块，其余用缓存\n",[47,4595,4596],{"class":49,"line":2694},[47,4597,4598],{"class":242},"    // 处理块减少、块增多的场景\n",[47,4600,4601,4604,4606,4608,4610,4613,4615,4617,4619],{"class":49,"line":2700},[47,4602,4603],{"class":154},"    blockCache",[47,4605,158],{"class":150},[47,4607,653],{"class":161},[47,4609,158],{"class":150},[47,4611,4612],{"class":167},"length",[47,4614,143],{"class":142},[47,4616,4561],{"class":154},[47,4618,158],{"class":150},[47,4620,4621],{"class":167},"length\n",[47,4623,4624,4627,4629,4632,4635,4637,4640,4643,4646,4649,4651,4653,4655,4657,4659,4662],{"class":49,"line":2712},[47,4625,4626],{"class":134},"    for",[47,4628,2770],{"class":150},[47,4630,4631],{"class":134},"let",[47,4633,4634],{"class":236}," i",[47,4636,143],{"class":142},[47,4638,4639],{"class":743}," 0",[47,4641,4642],{"class":150},"; ",[47,4644,4645],{"class":236},"i",[47,4647,4648],{"class":142}," \u003C",[47,4650,4561],{"class":154},[47,4652,158],{"class":150},[47,4654,4612],{"class":167},[47,4656,4642],{"class":150},[47,4658,4645],{"class":236},[47,4660,4661],{"class":142},"++",[47,4663,2762],{"class":150},[47,4665,4666],{"class":49,"line":3318},[47,4667,4668],{"class":242},"      // 只渲染最后一个，或新块\n",[47,4670,4671,4674,4676,4678,4680,4682,4684,4686,4689,4692,4695,4698,4701,4703,4705,4708,4710],{"class":49,"line":3326},[47,4672,4673],{"class":134},"      if",[47,4675,2770],{"class":150},[47,4677,4645],{"class":236},[47,4679,690],{"class":142},[47,4681,4561],{"class":154},[47,4683,158],{"class":150},[47,4685,4612],{"class":167},[47,4687,4688],{"class":142}," -",[47,4690,4691],{"class":743}," 1",[47,4693,4694],{"class":142}," ||",[47,4696,4697],{"class":142}," !",[47,4699,4700],{"class":154},"blockCache",[47,4702,158],{"class":150},[47,4704,653],{"class":167},[47,4706,4707],{"class":150},"[",[47,4709,4645],{"class":236},[47,4711,4712],{"class":150},"]) {\n",[47,4714,4715,4718,4720,4722,4724,4726,4729,4731,4733,4735,4737,4739,4742,4744,4746,4748,4751,4754],{"class":49,"line":3332},[47,4716,4717],{"class":154},"        blockCache",[47,4719,158],{"class":150},[47,4721,653],{"class":167},[47,4723,4707],{"class":150},[47,4725,4645],{"class":236},[47,4727,4728],{"class":150},"] ",[47,4730,320],{"class":142},[47,4732,4187],{"class":154},[47,4734,158],{"class":150},[47,4736,3383],{"class":146},[47,4738,151],{"class":150},[47,4740,4741],{"class":236},"blocks",[47,4743,4707],{"class":150},[47,4745,4645],{"class":236},[47,4747,4728],{"class":150},[47,4749,4750],{"class":142},"||",[47,4752,4753],{"class":205}," ''",[47,4755,179],{"class":150},[47,4757,4758],{"class":49,"line":3365},[47,4759,4760],{"class":150},"      }\n",[47,4762,4763],{"class":49,"line":3371},[47,4764,4765],{"class":242},"      // 其余块直接复用\n",[47,4767,4769],{"class":49,"line":4768},35,[47,4770,2691],{"class":150},[47,4772,4774,4777,4779,4781,4783,4785,4787,4789,4791,4794],{"class":49,"line":4773},36,[47,4775,4776],{"class":154},"    renderedBlocks",[47,4778,158],{"class":150},[47,4780,653],{"class":167},[47,4782,143],{"class":142},[47,4784,4510],{"class":154},[47,4786,158],{"class":150},[47,4788,653],{"class":161},[47,4790,158],{"class":150},[47,4792,4793],{"class":146},"slice",[47,4795,253],{"class":150},[47,4797,4799],{"class":49,"line":4798},37,[47,4800,4801],{"class":150},"  },\n",[47,4803,4805,4808,4811,4813,4816],{"class":49,"line":4804},38,[47,4806,4807],{"class":150},"  { ",[47,4809,4810],{"class":167},"immediate",[47,4812,226],{"class":225},[47,4814,4815],{"class":743}," true",[47,4817,2577],{"class":150},[47,4819,4821],{"class":49,"line":4820},39,[47,4822,179],{"class":150},[47,4824,4826],{"class":49,"line":4825},40,[47,4827,185],{"emptyLinePlaceholder":184},[47,4829,4831,4833,4835,4837],{"class":49,"line":4830},41,[47,4832,4130],{"class":146},[47,4834,634],{"class":150},[47,4836,637],{"class":134},[47,4838,640],{"class":150},[47,4840,4842],{"class":49,"line":4841},42,[47,4843,4251],{"class":242},[47,4845,4847],{"class":49,"line":4846},43,[47,4848,755],{"class":150},[47,4850,4852,4854,4856],{"class":49,"line":4851},44,[47,4853,3425],{"class":150},[47,4855,3440],{"class":167},[47,4857,3401],{"class":150},[109,4859,4861],{"id":4860},"终极武器用-morphdom-实现精准更新","终极武器：用 morphdom 实现精准更新",[17,4863,4864],{},"分块渲染虽然解决了大部分问题，但遇到 Markdown 列表就有点力不从心了。因为 Markdown 语法里，列表项之间通常只有一个换行符，整个列表会被当成一个大块。想象一下一个几百项的列表，哪怕只更新最后一项，整个列表块也要全部重来，前面的问题又回来了。",[1168,4866,4868],{"id":4867},"morphdom-是何方神圣","morphdom 是何方神圣？",[17,4870,4871,4873,4874,456],{},[30,4872,2089],{}," 是一个仅 5KB（gzip 后）的 JavaScript 库，核心功能是：",[21,4875,4876],{},"接收两个 DOM 节点（或 HTML 字符串），计算出最小化的 DOM 操作，将第一个节点 “变形” 为第二个节点，而非直接替换",[17,4878,4879,4880,1785],{},"其工作原理类似虚拟 DOM 的 Diff 算法，但",[21,4881,4882],{},"直接操作真实 DOM",[1214,4884,4885,4888,4891],{},[1023,4886,4887],{},"对比新旧 DOM 的标签名、属性、文本内容等；",[1023,4889,4890],{},"仅对差异部分执行增 / 删 / 改操作（如修改文本、更新属性、移动节点位置）；",[1023,4892,4893],{},"未变化的 DOM 节点会被完整保留，包括其事件监听、滚动位置、选中状态等。",[17,4895,4896,4897,4900,4901,4903],{},"Markdown 把列表当整体，但生成的 HTML 里，每个列表项 (",[30,4898,4899],{},"\u003Cli>",") 都是独立的！",[30,4902,2089],{}," 在更新后面的列表项时，能保证前面的列表项纹丝不动，状态自然就保住了。",[17,4905,4906],{},"这不就是我们梦寐以求的效果吗？在 Markdown 实时更新的同时，最大程度留住用户的操作状态，还能省掉一堆不必要的 DOM 操作！",[1168,4908,4909],{"id":4909},"示例代码",[38,4911,4913],{"className":3387,"code":4912,"language":3389,"meta":43,"style":43},"\u003Ctemplate>\n  \u003Cdiv ref=\"markdownContainer\" class=\"markdown-container\">\n    \u003Cdiv id=\"md-root\">\u003C/div>\n  \u003C/div>\n\u003C/template>\n\n\u003Cscript setup>\nimport { nextTick, ref, watch } from 'vue';\nimport MarkdownIt from 'markdown-it';\nimport morphdom from 'morphdom';\n\nconst markdownContent = ref('');\nconst markdownContainer = ref(null);\nconst md = new MarkdownIt();\n\nconst render = () => {\n  if (!markdownContainer.value.querySelector('#md-root')) return;\n\n  const newHtml = `\u003Cdiv id=\"md-root\">` + md.render(markdownContent.value) + `\u003C/div>`\n\n  morphdom(markdownContainer.value, newHtml, {\n    childrenOnly: true\n  });\n}\n\nwatch(markdownContent, () => {\n    render()\n});\n\nonMounted(async () => {\n  // 等待 Dom 被挂载上\n  await nextTick()\n  render()\n})\n\u003C/script>\n\n",[30,4914,4915,4923,4946,4966,4974,4982,4986,4996,5021,5033,5047,5051,5067,5084,5098,5102,5118,5150,5154,5191,5195,5216,5226,5231,5235,5239,5253,5260,5265,5269,5284,5289,5299,5306,5310],{"__ignoreMap":43},[47,4916,4917,4919,4921],{"class":49,"line":50},[47,4918,608],{"class":150},[47,4920,3398],{"class":167},[47,4922,3401],{"class":150},[47,4924,4925,4927,4929,4931,4933,4936,4939,4941,4944],{"class":49,"line":56},[47,4926,3406],{"class":150},[47,4928,4080],{"class":167},[47,4930,3811],{"class":743},[47,4932,320],{"class":150},[47,4934,4935],{"class":205},"\"markdownContainer\"",[47,4937,4938],{"class":743}," class",[47,4940,320],{"class":150},[47,4942,4943],{"class":205},"\"markdown-container\"",[47,4945,3401],{"class":150},[47,4947,4948,4950,4952,4955,4957,4960,4962,4964],{"class":49,"line":62},[47,4949,4334],{"class":150},[47,4951,4080],{"class":167},[47,4953,4954],{"class":743}," id",[47,4956,320],{"class":150},[47,4958,4959],{"class":205},"\"md-root\"",[47,4961,4091],{"class":150},[47,4963,4080],{"class":167},[47,4965,3401],{"class":150},[47,4967,4968,4970,4972],{"class":49,"line":68},[47,4969,4391],{"class":150},[47,4971,4080],{"class":167},[47,4973,3401],{"class":150},[47,4975,4976,4978,4980],{"class":49,"line":74},[47,4977,3425],{"class":150},[47,4979,3398],{"class":167},[47,4981,3401],{"class":150},[47,4983,4984],{"class":49,"line":80},[47,4985,185],{"emptyLinePlaceholder":184},[47,4987,4988,4990,4992,4994],{"class":49,"line":86},[47,4989,608],{"class":150},[47,4991,3440],{"class":167},[47,4993,3443],{"class":743},[47,4995,3401],{"class":150},[47,4997,4998,5000,5002,5005,5007,5009,5011,5013,5015,5017,5019],{"class":49,"line":92},[47,4999,2307],{"class":134},[47,5001,229],{"class":150},[47,5003,5004],{"class":167},"nextTick",[47,5006,373],{"class":150},[47,5008,3778],{"class":167},[47,5010,373],{"class":150},[47,5012,4434],{"class":167},[47,5014,317],{"class":150},[47,5016,2316],{"class":134},[47,5018,4141],{"class":205},[47,5020,4144],{"class":150},[47,5022,5023,5025,5027,5029,5031],{"class":49,"line":98},[47,5024,2307],{"class":134},[47,5026,4151],{"class":167},[47,5028,2329],{"class":134},[47,5030,4156],{"class":205},[47,5032,4144],{"class":150},[47,5034,5035,5037,5040,5042,5045],{"class":49,"line":617},[47,5036,2307],{"class":134},[47,5038,5039],{"class":167}," morphdom",[47,5041,2329],{"class":134},[47,5043,5044],{"class":205}," 'morphdom'",[47,5046,4144],{"class":150},[47,5048,5049],{"class":49,"line":3},[47,5050,185],{"emptyLinePlaceholder":184},[47,5052,5053,5055,5057,5059,5061,5063,5065],{"class":49,"line":643},[47,5054,135],{"class":134},[47,5056,2343],{"class":138},[47,5058,143],{"class":142},[47,5060,3811],{"class":146},[47,5062,151],{"class":150},[47,5064,4177],{"class":205},[47,5066,4180],{"class":150},[47,5068,5069,5071,5074,5076,5078,5080,5082],{"class":49,"line":670},[47,5070,135],{"class":134},[47,5072,5073],{"class":138}," markdownContainer",[47,5075,143],{"class":142},[47,5077,3811],{"class":146},[47,5079,151],{"class":150},[47,5081,2453],{"class":743},[47,5083,4180],{"class":150},[47,5085,5086,5088,5090,5092,5094,5096],{"class":49,"line":696},[47,5087,135],{"class":134},[47,5089,4187],{"class":138},[47,5091,143],{"class":142},[47,5093,4192],{"class":134},[47,5095,4151],{"class":146},[47,5097,4197],{"class":150},[47,5099,5100],{"class":49,"line":737},[47,5101,185],{"emptyLinePlaceholder":184},[47,5103,5104,5106,5109,5111,5114,5116],{"class":49,"line":747},[47,5105,135],{"class":134},[47,5107,5108],{"class":146}," render",[47,5110,143],{"class":142},[47,5112,5113],{"class":150}," () ",[47,5115,637],{"class":134},[47,5117,640],{"class":150},[47,5119,5120,5122,5124,5126,5129,5131,5133,5135,5138,5140,5143,5146,5148],{"class":49,"line":752},[47,5121,2767],{"class":134},[47,5123,2770],{"class":150},[47,5125,2773],{"class":142},[47,5127,5128],{"class":154},"markdownContainer",[47,5130,158],{"class":150},[47,5132,653],{"class":161},[47,5134,158],{"class":150},[47,5136,5137],{"class":146},"querySelector",[47,5139,151],{"class":150},[47,5141,5142],{"class":205},"'#md-root'",[47,5144,5145],{"class":150},")) ",[47,5147,2781],{"class":134},[47,5149,4144],{"class":150},[47,5151,5152],{"class":49,"line":2621},[47,5153,185],{"emptyLinePlaceholder":184},[47,5155,5156,5159,5162,5164,5167,5169,5171,5173,5175,5177,5179,5181,5183,5185,5188],{"class":49,"line":2628},[47,5157,5158],{"class":134},"  const",[47,5160,5161],{"class":138}," newHtml",[47,5163,143],{"class":142},[47,5165,5166],{"class":205}," `\u003Cdiv id=\"md-root\">`",[47,5168,3032],{"class":142},[47,5170,4187],{"class":154},[47,5172,158],{"class":150},[47,5174,3383],{"class":146},[47,5176,151],{"class":150},[47,5178,2417],{"class":154},[47,5180,158],{"class":150},[47,5182,653],{"class":167},[47,5184,2778],{"class":150},[47,5186,5187],{"class":142},"+",[47,5189,5190],{"class":205}," `\u003C/div>`\n",[47,5192,5193],{"class":49,"line":2633},[47,5194,185],{"emptyLinePlaceholder":184},[47,5196,5197,5200,5202,5204,5206,5208,5210,5213],{"class":49,"line":2644},[47,5198,5199],{"class":146},"  morphdom",[47,5201,151],{"class":150},[47,5203,5128],{"class":154},[47,5205,158],{"class":150},[47,5207,653],{"class":167},[47,5209,373],{"class":150},[47,5211,5212],{"class":236},"newHtml",[47,5214,5215],{"class":150},", {\n",[47,5217,5218,5221,5223],{"class":49,"line":2656},[47,5219,5220],{"class":167},"    childrenOnly",[47,5222,226],{"class":225},[47,5224,5225],{"class":743}," true\n",[47,5227,5228],{"class":49,"line":2667},[47,5229,5230],{"class":150},"  });\n",[47,5232,5233],{"class":49,"line":2672},[47,5234,2715],{"class":150},[47,5236,5237],{"class":49,"line":2677},[47,5238,185],{"emptyLinePlaceholder":184},[47,5240,5241,5243,5245,5247,5249,5251],{"class":49,"line":2688},[47,5242,4434],{"class":146},[47,5244,151],{"class":150},[47,5246,2417],{"class":236},[47,5248,345],{"class":150},[47,5250,637],{"class":134},[47,5252,640],{"class":150},[47,5254,5255,5258],{"class":49,"line":2694},[47,5256,5257],{"class":146},"    render",[47,5259,253],{"class":150},[47,5261,5262],{"class":49,"line":2700},[47,5263,5264],{"class":150},"});\n",[47,5266,5267],{"class":49,"line":2712},[47,5268,185],{"emptyLinePlaceholder":184},[47,5270,5271,5273,5275,5278,5280,5282],{"class":49,"line":3318},[47,5272,4130],{"class":146},[47,5274,151],{"class":150},[47,5276,5277],{"class":134},"async",[47,5279,5113],{"class":150},[47,5281,637],{"class":134},[47,5283,640],{"class":150},[47,5285,5286],{"class":49,"line":3326},[47,5287,5288],{"class":242},"  // 等待 Dom 被挂载上\n",[47,5290,5291,5294,5297],{"class":49,"line":3332},[47,5292,5293],{"class":134},"  await",[47,5295,5296],{"class":146}," nextTick",[47,5298,253],{"class":150},[47,5300,5301,5304],{"class":49,"line":3365},[47,5302,5303],{"class":146},"  render",[47,5305,253],{"class":150},[47,5307,5308],{"class":49,"line":3371},[47,5309,755],{"class":150},[47,5311,5312,5314,5316],{"class":49,"line":4768},[47,5313,3425],{"class":150},[47,5315,3440],{"class":167},[47,5317,3401],{"class":150},[1168,5319,5321],{"id":5320},"眼见为实demo-对比","眼见为实：Demo 对比",[17,5323,5324],{},"下面这个 iframe 里放了个对比 Demo，展示了不同方案的效果差异。",[17,5326,5327,5330],{},[21,5328,5329],{},"小技巧："," 如果你用的是 Chrome、Edge 这类 Chromium 内核的浏览器，打开开发者工具 (DevTools)，找到“渲染”(Rendering) 标签页，勾选「突出显示重绘区域(Paint flashing)」。这样你就能直观看到每次更新时，哪些部分被重新绘制了——重绘区域越少，性能越好！",[17,5332,5333],{},[783,5334],{"alt":43,"src":5335},"https://static.031130.xyz/uploads/2025/07/12/d5721c40fb076.webp",[5337,5338],"iframe",{"src":5339,"width":5340,"height":5341,"allowFullScreen":184,"loading":5342},"https://static.031130.xyz/demo/morphdom-vs-markdown-chunk.html","100%",500,"lazy",[109,5344,5345],{"id":5345},"阶段性成果",[17,5347,5348,5349,5351],{},"从最开始的“暴力全量刷新”，到“聪明点的分块更新”，再到如今“精准手术刀般的 ",[30,5350,2089],{}," 更新”，我们一步步把那些不必要的渲染开销给砍掉了，最终搞出了一个既快又能留住用户状态的 Markdown 实时渲染方案。",[17,5353,5354,5355,5357],{},"不过，用 ",[30,5356,2089],{}," 这个第三方库来直接操作 Vue 组件里的 DOM，总觉得有点...不够“Vue”？它虽然解决了核心的性能和状态问题，但在 Vue 的世界里这么玩，多少有点旁门左道的意思。",[17,5359,5360,5363],{},[21,5361,5362],{},"下篇预告："," 在下一篇文章里，咱们就来聊聊，在 Vue 的世界里，有没有更优雅、更“原生”的方案来搞定 Markdown 的精准更新？敬请期待！",[1066,5365,5366],{},"html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .sNmU0, html code.shiki .sNmU0{--shiki-default:#986801;--shiki-dark:#E5C07B}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .s7GmK, html code.shiki .s7GmK{--shiki-default:#383A42;--shiki-dark:#E5C07B}html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sz0mV, html code.shiki .sz0mV{--shiki-default:#383A42;--shiki-dark:#E06C75}html pre.shiki code .s8iYz, html code.shiki .s8iYz{--shiki-default:#383A42;--shiki-default-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic}html pre.shiki code .sDaw7, html code.shiki .sDaw7{--shiki-default:#0184BC;--shiki-dark:#E06C75}html pre.shiki code .sRZ4U, html code.shiki .sRZ4U{--shiki-default:#986801;--shiki-dark:#E06C75}html pre.shiki code .sYoRg, html code.shiki .sYoRg{--shiki-default:#0184BC;--shiki-dark:#D19A66}html pre.shiki code .s2QsP, html code.shiki .s2QsP{--shiki-default:#E45649;--shiki-dark:#E5C07B}html pre.shiki code .st7oF, html code.shiki .st7oF{--shiki-default:#0184BC;--shiki-dark:#ABB2BF}",{"title":43,"searchDepth":56,"depth":56,"links":5368},[5369,5370,5371,5372,5377],{"id":4007,"depth":56,"text":4007},{"id":4040,"depth":56,"text":4041},{"id":4266,"depth":56,"text":4267},{"id":4860,"depth":56,"text":4861,"children":5373},[5374,5375,5376],{"id":4867,"depth":62,"text":4868},{"id":4909,"depth":62,"text":4909},{"id":5320,"depth":62,"text":5321},{"id":5345,"depth":56,"text":5345},{"title":5379,"date":5380,"path":5381,"tags":5382,"body":5385},"node-sass 迁移至 dart-sass 踩坑实录","2025-07-05 17:57:02","/2025/07/05/node-sass-migration-to-dart-sass",[2079,2076,5383,5384,12],"Sass","CSS",{"type":14,"value":5386,"toc":6231},[5387,5390,5401,5405,5420,5423,5455,5458,5462,5465,5469,5478,5481,5490,5537,5540,5543,5546,5576,5585,5588,5592,5596,5620,5624,5738,5742,5751,5789,5793,5796,5862,5865,5869,5872,5875,5901,5904,5945,5954,5959,5963,5972,5979,6031,6034,6089,6092,6115,6118,6120,6228],[109,5388,5389],{"id":5389},"更新目标",[1020,5391,5392,5395,5398],{},[1023,5393,5394],{},"node-sass -> sass ( dart-sass )",[1023,5396,5397],{},"减少影响面，非必要不更新其他依赖的版本",[1023,5399,5400],{},"在前两条基础上，看看能否提升 node.js 的版本",[109,5402,5404],{"id":5403},"抛弃-node-sass-的理由","抛弃 node-sass 的理由",[1020,5406,5407,5414,5417],{},[1023,5408,5409],{},[803,5410,5413],{"href":5411,"rel":5412},"https://sass-lang.com/blog/libsass-is-deprecated/",[807],"node-sass 已经停止维护，dart-sass 是 sass 官方主推的继任者",[1023,5415,5416],{},"node-sass 在 windows 下的安装非常麻烦，npm 安装时需要开发机上同时装有 python2 和 Microsoft Visual C++",[1023,5418,5419],{},"在安装 node-sass 时，需要从 Github 拉取资源，在特定网络环境下成功率并不高",[109,5421,5422],{"id":5422},"项目依赖版本现状",[1020,5424,5425,5430,5435,5440,5445,5450],{},[1023,5426,5427],{},[30,5428,5429],{},"node@^12",[1023,5431,5432],{},[30,5433,5434],{},"vue@^2",[1023,5436,5437],{},[30,5438,5439],{},"webpack@^3",[1023,5441,5442],{},[30,5443,5444],{},"vue-loader@^14",[1023,5446,5447],{},[30,5448,5449],{},"sass-loader@^7.0.3",[1023,5451,5452],{},[30,5453,5454],{},"node-sass@^4",[109,5456,5457],{"id":5457},"更新思路",[1168,5459,5461],{"id":5460},"nodejs","node.js",[17,5463,5464],{},"webpack 官方并没有提供 webpack 3 支持的最高 node 版本，且即使 webpack 官方支持，webpack 的相关插件也未必支持。因此 node 版本能否更新就只能自己试。好在尽管这个项目的 CI/CD 跑在 node 12，但我日常都在用 node 14 开发，因此顺势将 node 版本提升至 14。",[1168,5466,5468],{"id":5467},"webpacksass-loader","webpack、sass-loader",[17,5470,5471,5472,5477],{},"webpack 的版本目前处于非必要不更新的定时炸弹状态，基于现有的 webpack 3 限制，所支持的最高 sass-loader 版本就是 ^7 （ sass-loader 在 ",[803,5473,5476],{"href":5474,"rel":5475},"https://github.com/webpack-contrib/sass-loader/blob/v8.0.0/CHANGELOG.md",[807],"8.0.0 版本的更新日志","中明确指出 8.0.0 版本需要 webpack 4.36.0）。",[17,5479,5480],{},"如果项目中 sass-loader@^7 支持使用 dart-sass 就可以不更新 sass-loader，也就不必更新 webpack 版本；反之，就需要同步更新 webpack 至 4，再视情况定下 sass-loader 的版本。",[17,5482,5483,5484,5489],{},"那么到底支不支持呢？我在 ",[803,5485,5488],{"href":5486,"rel":5487},"https://www.webpackjs.com/loaders/sass-loader/",[807],"webpack 官方文档介绍 sass-loader 的页面","找到了这样一段 package.json 片段",[38,5491,5493],{"className":2466,"code":5492,"language":2468,"meta":43,"style":43},"{\n  \"devDependencies\": {\n    \"sass-loader\": \"^7.2.0\",\n    \"sass\": \"^1.22.10\"\n  }\n}\n",[30,5494,5495,5499,5507,5519,5529,5533],{"__ignoreMap":43},[47,5496,5497],{"class":49,"line":50},[47,5498,2475],{"class":150},[47,5500,5501,5504],{"class":49,"line":56},[47,5502,5503],{"class":167},"  \"devDependencies\"",[47,5505,5506],{"class":150},": {\n",[47,5508,5509,5512,5514,5517],{"class":49,"line":62},[47,5510,5511],{"class":167},"    \"sass-loader\"",[47,5513,2483],{"class":150},[47,5515,5516],{"class":205},"\"^7.2.0\"",[47,5518,2489],{"class":150},[47,5520,5521,5524,5526],{"class":49,"line":68},[47,5522,5523],{"class":167},"    \"sass\"",[47,5525,2483],{"class":150},[47,5527,5528],{"class":205},"\"^1.22.10\"\n",[47,5530,5531],{"class":49,"line":74},[47,5532,3368],{"class":150},[47,5534,5535],{"class":49,"line":80},[47,5536,2715],{"class":150},[17,5538,5539],{},"这证明起码在 sass-loader@7.2.0 这一版本就已经支持 dart-sass 了，因此 webpack 版本可以停留在 ^3，而 sass-loader 暂时停留在 7.0.3 版本，如果后续有问题可以更新到 ^7 版本中最新的 7.3.1 版本。",[1168,5541,5542],{"id":5542},"dart-sass",[17,5544,5545],{},"sass-loader@^7 所支持的最高 sass 我并没有查到，Github Copilot 信誓旦旦地告诉我",[1608,5547,5548,5553,5558,5563],{},[17,5549,5550],{},[21,5551,5552],{},"官方文档引用：",[1608,5554,5555],{},[17,5556,5557],{},"sass-loader@^7.0.0 requires node-sass >=4.0.0 or sass >=1.3.0, \u003C=1.26.5.",[17,5559,5560],{},[21,5561,5562],{},"建议：",[1020,5564,5565],{},[1023,5566,5567,5568,5571,5572,5575],{},"如果需要使用更高版本的 ",[30,5569,5570],{},"sass","，请升级到 ",[30,5573,5574],{},"sass-loader"," 8 或更高版本。",[17,5577,5578,5579,5584],{},"但事实上，我并没有在互联网上找到这段文本的蛛丝马迹。并且在 sass 的 ~1.26 版本中最后一个版本是 1.26.11 而非 1.26.5，",[803,5580,5583],{"href":5581,"rel":5582},"https://docs.npmjs.com/about-semantic-versioning",[807],"根据常见的 npm 版本号原则","，major version 和 minor version 不变，只改变了 patch version 的发版一般只有 bugfix 而没有 breaking change，不至于从 1.26.5 更新到 1.26.11 就突然不支持 sass-loader 7 了，因此更可能是 AI 幻觉或者是训练数据受限。",[17,5586,5587],{},"出于谨慎考虑，最终决定采用 webpack 官方文档中提到的 sass 1.22 的最后一个版本，也就是 1.22.12。",[109,5589,5591],{"id":5590},"分析完成动手更新","分析完成，动手更新",[1168,5593,5595],{"id":5594},"第一步卸载-node-sass安装-sass12212","第一步，卸载 node-sass，安装 sass@^1.22.12",[38,5597,5599],{"className":2274,"code":5598,"language":2276,"meta":43,"style":43},"npm uninstall node-sass\nnpm install sass@^1.22.12\n",[30,5600,5601,5611],{"__ignoreMap":43},[47,5602,5603,5605,5608],{"class":49,"line":50},[47,5604,2283],{"class":146},[47,5606,5607],{"class":205}," uninstall",[47,5609,5610],{"class":205}," node-sass\n",[47,5612,5613,5615,5617],{"class":49,"line":56},[47,5614,2283],{"class":146},[47,5616,2286],{"class":205},[47,5618,5619],{"class":205}," sass@^1.22.12\n",[1168,5621,5623],{"id":5622},"第二步更新-webpack-配置非必须","第二步，更新 webpack 配置（非必须）",[38,5625,5627],{"className":1550,"code":5626,"language":1552,"meta":43,"style":43},"module.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.(scss|sass)$/,\n        use: [\n          'style-loader',\n          'css-loader',\n          {\n            loader: 'sass-loader',\n+            options: {\n+                // 事实上，这一行在大部分 sass-loader 版本中不用加，sass-loader 能自动检测本地是 sass 还是 node-sass\n+                implementation: require('sass')\n+              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n",[30,5628,5629,5634,5639,5644,5649,5654,5659,5664,5669,5674,5679,5684,5689,5694,5699,5704,5709,5714,5719,5724,5729,5733],{"__ignoreMap":43},[47,5630,5631],{"class":49,"line":50},[47,5632,5633],{},"module.exports = {\n",[47,5635,5636],{"class":49,"line":56},[47,5637,5638],{},"  // ...\n",[47,5640,5641],{"class":49,"line":62},[47,5642,5643],{},"  module: {\n",[47,5645,5646],{"class":49,"line":68},[47,5647,5648],{},"    rules: [\n",[47,5650,5651],{"class":49,"line":74},[47,5652,5653],{},"      {\n",[47,5655,5656],{"class":49,"line":80},[47,5657,5658],{},"        test: /\\.(scss|sass)$/,\n",[47,5660,5661],{"class":49,"line":86},[47,5662,5663],{},"        use: [\n",[47,5665,5666],{"class":49,"line":92},[47,5667,5668],{},"          'style-loader',\n",[47,5670,5671],{"class":49,"line":98},[47,5672,5673],{},"          'css-loader',\n",[47,5675,5676],{"class":49,"line":617},[47,5677,5678],{},"          {\n",[47,5680,5681],{"class":49,"line":3},[47,5682,5683],{},"            loader: 'sass-loader',\n",[47,5685,5686],{"class":49,"line":643},[47,5687,5688],{},"+            options: {\n",[47,5690,5691],{"class":49,"line":670},[47,5692,5693],{},"+                // 事实上，这一行在大部分 sass-loader 版本中不用加，sass-loader 能自动检测本地是 sass 还是 node-sass\n",[47,5695,5696],{"class":49,"line":696},[47,5697,5698],{},"+                implementation: require('sass')\n",[47,5700,5701],{"class":49,"line":737},[47,5702,5703],{},"+              },\n",[47,5705,5706],{"class":49,"line":747},[47,5707,5708],{},"            },\n",[47,5710,5711],{"class":49,"line":752},[47,5712,5713],{},"          },\n",[47,5715,5716],{"class":49,"line":2621},[47,5717,5718],{},"        ],\n",[47,5720,5721],{"class":49,"line":2628},[47,5722,5723],{},"      },\n",[47,5725,5726],{"class":49,"line":2633},[47,5727,5728],{},"    ],\n",[47,5730,5731],{"class":49,"line":2644},[47,5732,4801],{},[47,5734,5735],{"class":49,"line":2656},[47,5736,5737],{},"};\n",[1168,5739,5741],{"id":5740},"第三步批量替换-deep-语法为-v-deep","第三步，批量替换 /deep/ 语法为 ::v-deep",[17,5743,5744,5745,5750],{},"因为 ",[803,5746,5749],{"href":5747,"rel":5748},"https://chromestatus.com/feature/4964279606312960",[807],"/deep/ 写法在 2017 年被弃用"," ，/deep/ 变成了不受支持的深度作用选择器，node-sass 凭借其出色的容错性能够继续提供兼容，但 dart-sass 则不支持这种写法。于是需要将 /deep/ 语法批量替换成 ::v-deep 写法，这种写法虽然在 vue 的后续 rfc 被放弃了，但直至今日依然在事实上被支持。",[38,5752,5754],{"className":2274,"code":5753,"language":2276,"meta":43,"style":43},"# 大概就是这么个意思，用 vscode 的批量替换其实也行\nsed -i 's#\\s*/deep/\\s*# ::v-deep #g' $(grep -rl '/deep/' .)\n",[30,5755,5756,5761],{"__ignoreMap":43},[47,5757,5758],{"class":49,"line":50},[47,5759,5760],{"class":242},"# 大概就是这么个意思，用 vscode 的批量替换其实也行\n",[47,5762,5763,5766,5769,5772,5775,5778,5781,5784,5787],{"class":49,"line":56},[47,5764,5765],{"class":146},"sed",[47,5767,5768],{"class":743}," -i",[47,5770,5771],{"class":205}," 's#\\s*/deep/\\s*# ::v-deep #g'",[47,5773,5774],{"class":150}," $(",[47,5776,5777],{"class":146},"grep",[47,5779,5780],{"class":743}," -rl",[47,5782,5783],{"class":205}," '/deep/'",[47,5785,5786],{"class":205}," .",[47,5788,179],{"class":150},[1168,5790,5792],{"id":5791},"第四步修复其他-sass-语法错误","第四步，修复其他 sass 语法错误",[17,5794,5795],{},"在迁移的过程中，我发现项目中有一些不规范的写法，node-sass 凭借出色的鲁棒性不吭一声强行解析，而 dart-sass 则干不了这粗活。因此需要根据编译时的报错手动修复一下这些语法错误，我这里一共遇到两种。",[38,5797,5799],{"className":1550,"code":5798,"language":1552,"meta":43,"style":43},"// 多打了一个冒号\n.foo {\n-  color:: #fff;\n+  color: #fff;\n}\n\n// :nth-last-child 没指定数字\n.bar {\n-  &:nth-last-child() {\n+  &:nth-last-child(1) {\n      margin-bottom: 0;\n  }\n}\n",[30,5800,5801,5806,5811,5816,5821,5825,5829,5834,5839,5844,5849,5854,5858],{"__ignoreMap":43},[47,5802,5803],{"class":49,"line":50},[47,5804,5805],{},"// 多打了一个冒号\n",[47,5807,5808],{"class":49,"line":56},[47,5809,5810],{},".foo {\n",[47,5812,5813],{"class":49,"line":62},[47,5814,5815],{},"-  color:: #fff;\n",[47,5817,5818],{"class":49,"line":68},[47,5819,5820],{},"+  color: #fff;\n",[47,5822,5823],{"class":49,"line":74},[47,5824,2715],{},[47,5826,5827],{"class":49,"line":80},[47,5828,185],{"emptyLinePlaceholder":184},[47,5830,5831],{"class":49,"line":86},[47,5832,5833],{},"// :nth-last-child 没指定数字\n",[47,5835,5836],{"class":49,"line":92},[47,5837,5838],{},".bar {\n",[47,5840,5841],{"class":49,"line":98},[47,5842,5843],{},"-  &:nth-last-child() {\n",[47,5845,5846],{"class":49,"line":617},[47,5847,5848],{},"+  &:nth-last-child(1) {\n",[47,5850,5851],{"class":49,"line":3},[47,5852,5853],{},"      margin-bottom: 0;\n",[47,5855,5856],{"class":49,"line":643},[47,5857,3368],{},[47,5859,5860],{"class":49,"line":670},[47,5861,2715],{},[109,5863,5864],{"id":5864},"踩坑",[1168,5866,5868],{"id":5867},"v-deep-样式不生效","::v-deep 样式不生效",[17,5870,5871],{},"依赖更新完后看了两眼好像是没问题，就推测试环境了。结果一天没到就被同事 call 了，::v-deep 这种深度作用选择器居然没有生效？",[17,5873,5874],{},"抱着试一试的态度，GPT 给了如下回答",[1608,5876,5877],{},[17,5878,5879,5880,5883,5884,5887,5888,5894,5895,5898,5899,3924],{},"在 ",[21,5881,5882],{},"Vue 2 + vue-loader + Sass"," 的组合下，",[21,5885,5886],{},"这种写法是正确的","，",[21,5889,5890,5891],{},"前提是你的构建工具链支持 ",[30,5892,5893],{},"::v-deep"," 语法（如 ",[30,5896,5897],{},"vue-loader@15"," 及以上版本 + ",[30,5900,5574],{},[17,5902,5903],{},"虽说我依然没有查证到为什么更新 vue-loader@15 才能使用 ::v-deep 语法，但对 vue-loader 进行更新后，::v-deep 语法确实生效了。在撰写本文时，我找到了些许蛛丝马迹，可能能解释这一问题。",[1214,5905,5906,5920],{},[1023,5907,5908,5909,5914,5915,456],{},"vue-loader 在 ",[803,5910,5913],{"href":5911,"rel":5912},"https://vue-loader-v14.vuejs.org/en/features/scoped-css.html#deep-selectors",[807],"14 版本的官方文档","就是没有 ::v-deep 写法的示例，",[803,5916,5919],{"href":5917,"rel":5918},"https://github.com/vuejs/vue-loader/commit/2585d254fc774386a898887467fbdd30eb864b53",[807],"这一示例一直在 vue-loader 15.7.0 版本发布后才被加入",[1023,5921,5922,5923,5930,5933,5934,5939,5940],{},"vue-cli 的 Github Issue 评论区中有人提到",[1608,5924,5925],{},[17,5926,5927,5929],{},[30,5928,5893],{}," implemented in @vue/component-compiler-utils v2.6.0, should work after you reinstall the deps.",[5931,5932],"br",{},"而 vue-loader 在 15.0.0-beta.1 版本才",[803,5935,5938],{"href":5936,"rel":5937},"https://github.com/vuejs/vue-loader/commit/e32cd0e4372fcc6f13b6c307402713807516d71c#diff-7ae45ad102eab3b6d7e7896acd08c427a9b25b346470d7bc6507b6481575d519",[807],"将 @vue/component-compiler-utils 加入到自己的 dependencies 中","，并直到 vue-loader 15.7.1 中才",[803,5941,5944],{"href":5942,"rel":5943},"https://github.com/vuejs/vue-loader/commit/c359a38db0fbb4135fc97114baec3cd557d4123a",[807],"将其 @vue/component-compiler-utils 的版本号更新到满足要求的 ^3.0.0",[17,5946,5947,5948,5953],{},"那能否升级到 vue-loader 16 甚至 17 版本呢？不行，在 ",[803,5949,5952],{"href":5950,"rel":5951},"https://github.com/vuejs/vue-loader/releases/tag/v16.1.2",[807],"vue-loader v16.1.2 的更新日志","中明确写道",[1608,5955,5956],{},[17,5957,5958],{},"Note: vue-loader v16 is for Vue 3 only.",[1168,5960,5962],{"id":5961},"vue-loader-14-15-breaking-change","vue-loader 14 -> 15 breaking change",[17,5964,5965,5966,5971],{},"vue-loader 从 14 往上迁移时，不修改 webpack 配置直接跑会遇到 vue 语法不识别的问题。具体表现为 .vue 文件命名都是正确有效的语法，但构建开发时编译器就是不认，报语法错误。vue-loader 官方有一份",[803,5967,5970],{"href":5968,"rel":5969},"https://vue-loader.vuejs.org/migrating.html",[807],"迁移文档","，需要注意一下。",[38,5973,5977],{"className":5974,"code":5976,"language":2737},[5975],"language-text","ERROR in ./src/......\nModule parse failed: Unexpected token(1:0)\nYou may need an appropriate loader to handle this file type.\n",[30,5978,5976],{"__ignoreMap":43},[38,5980,5982],{"className":1550,"code":5981,"language":1552,"meta":43,"style":43},"// ...\nimport path from 'path'\n+const VueLoaderPlugin = require('vue-loader/lib/plugin')\n\n// ...\n\n  plugins: [\n+    new VueLoaderPlugin()\n    // ...\n  ]\n",[30,5983,5984,5989,5994,5999,6003,6007,6011,6016,6021,6026],{"__ignoreMap":43},[47,5985,5986],{"class":49,"line":50},[47,5987,5988],{},"// ...\n",[47,5990,5991],{"class":49,"line":56},[47,5992,5993],{},"import path from 'path'\n",[47,5995,5996],{"class":49,"line":62},[47,5997,5998],{},"+const VueLoaderPlugin = require('vue-loader/lib/plugin')\n",[47,6000,6001],{"class":49,"line":68},[47,6002,185],{"emptyLinePlaceholder":184},[47,6004,6005],{"class":49,"line":74},[47,6006,5988],{},[47,6008,6009],{"class":49,"line":80},[47,6010,185],{"emptyLinePlaceholder":184},[47,6012,6013],{"class":49,"line":86},[47,6014,6015],{},"  plugins: [\n",[47,6017,6018],{"class":49,"line":92},[47,6019,6020],{},"+    new VueLoaderPlugin()\n",[47,6022,6023],{"class":49,"line":98},[47,6024,6025],{},"    // ...\n",[47,6027,6028],{"class":49,"line":617},[47,6029,6030],{},"  ]\n",[17,6032,6033],{},"除此之外，在我这个项目中需要额外移除 webpack 配置中针对 .vue 文件的 babel-loader",[38,6035,6037],{"className":1550,"code":6036,"language":1552,"meta":43,"style":43},"{\n  test: /\\.vue$/,\n  use: [\n-    {\n-      loader: 'babel-loader'\n-    },\n    {\n      loader: 'vue-loader',\n    }\n  ]\n}\n",[30,6038,6039,6043,6048,6053,6058,6063,6068,6072,6077,6081,6085],{"__ignoreMap":43},[47,6040,6041],{"class":49,"line":50},[47,6042,2475],{},[47,6044,6045],{"class":49,"line":56},[47,6046,6047],{},"  test: /\\.vue$/,\n",[47,6049,6050],{"class":49,"line":62},[47,6051,6052],{},"  use: [\n",[47,6054,6055],{"class":49,"line":68},[47,6056,6057],{},"-    {\n",[47,6059,6060],{"class":49,"line":74},[47,6061,6062],{},"-      loader: 'babel-loader'\n",[47,6064,6065],{"class":49,"line":80},[47,6066,6067],{},"-    },\n",[47,6069,6070],{"class":49,"line":86},[47,6071,2502],{},[47,6073,6074],{"class":49,"line":92},[47,6075,6076],{},"      loader: 'vue-loader',\n",[47,6078,6079],{"class":49,"line":98},[47,6080,2691],{},[47,6082,6083],{"class":49,"line":617},[47,6084,6030],{},[47,6086,6087],{"class":49,"line":3},[47,6088,2715],{},[109,6090,6091],{"id":6091},"最终更新情况",[1020,6093,6094,6101,6108],{},[1023,6095,6096,1884,6098],{},[30,6097,5429],{},[30,6099,6100],{},"node@^14",[1023,6102,6103,1884,6105],{},[30,6104,5444],{},[30,6106,6107],{},"vue-loader@^15",[1023,6109,6110,1884,6112],{},[30,6111,5454],{},[30,6113,6114],{},"sass@^1.22.12",[17,6116,6117],{},"其余依赖版本维持不变",[109,6119,1048],{"id":1048},[1020,6121,6122,6139,6146,6152,6158,6165,6172,6178,6184,6190,6196,6202,6208,6215,6222],{},[1023,6123,6124],{},[803,6125,6128,6129,6131,6132,6135,6136,6138],{"href":6126,"rel":6127},"https://juejin.cn/post/7327094228350500914",[807],"node-sass更换为dart-sass",[30,6130,5542],{}," 和 ",[30,6133,6134],{},"node-sass","都是用来将",[30,6137,5570],{},"编译成 - 掘金",[1023,6140,6141],{},[803,6142,6145],{"href":6143,"rel":6144},"https://sunchenggit.github.io/2021/01/13/node-sass%E8%BF%81%E7%A7%BBdart-sass/",[807],"node-sass迁移dart-sass | Bolg",[1023,6147,6148],{},[803,6149,6151],{"href":5486,"rel":6150},[807],"sass-loader | webpack 中文文档 | webpack中文文档 | webpack中文网",[1023,6153,6154],{},[803,6155,6157],{"href":5411,"rel":6156},[807],"Sass: LibSass is Deprecated",[1023,6159,6160],{},[803,6161,6164],{"href":6162,"rel":6163},"https://www.npmjs.com/package/sass?activeTab=versions",[807],"sass - npm",[1023,6166,6167],{},[803,6168,6171],{"href":6169,"rel":6170},"https://www.npmjs.com/package/node-sass",[807],"node-sass - npm",[1023,6173,6174],{},[803,6175,6177],{"href":5581,"rel":6176},[807],"About semantic versioning | npm Docs",[1023,6179,6180],{},[803,6181,6183],{"href":5747,"rel":6182},[807],"Make /deep/ behave like the descendant combinator \" \" in CSS live profile (in css file or inside of \u003Cstyle>) - Chrome Platform Status",[1023,6185,6186],{},[803,6187,6189],{"href":5474,"rel":6188},[807],"sass-loader/CHANGELOG.md at v8.0.0 · webpack-contrib/sass-loader",[1023,6191,6192],{},[803,6193,6195],{"href":5950,"rel":6194},[807],"Release v16.1.2 · vuejs/vue-loader",[1023,6197,6198],{},[803,6199,6201],{"href":5936,"rel":6200},[807],"refactor: use @vue/component-compiler-utils · vuejs/vue-loader@e32cd0e",[1023,6203,6204],{},[803,6205,6207],{"href":5942,"rel":6206},[807],"chore: update @vue/component-compiler-utils to v3 · vuejs/vue-loader@c359a38",[1023,6209,6210],{},[803,6211,6214],{"href":6212,"rel":6213},"https://github.com/vuejs/vue-cli/issues/3399#issuecomment-466319019",[807],"dart-sass does not support /deep/ selector · Issue #3399 · vuejs/vue-cli",[1023,6216,6217],{},[803,6218,6221],{"href":6219,"rel":6220},"https://vue-loader-v14.vuejs.org/en/features/scoped-css.html",[807],"Scoped CSS · vue-loader v14",[1023,6223,6224],{},[803,6225,6227],{"href":5968,"rel":6226},[807],"Migrating from v14 | Vue Loader",[1066,6229,6230],{},"html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}",{"title":43,"searchDepth":56,"depth":56,"links":6232},[6233,6234,6235,6236,6241,6247,6251,6252],{"id":5389,"depth":56,"text":5389},{"id":5403,"depth":56,"text":5404},{"id":5422,"depth":56,"text":5422},{"id":5457,"depth":56,"text":5457,"children":6237},[6238,6239,6240],{"id":5460,"depth":62,"text":5461},{"id":5467,"depth":62,"text":5468},{"id":5542,"depth":62,"text":5542},{"id":5590,"depth":56,"text":5591,"children":6242},[6243,6244,6245,6246],{"id":5594,"depth":62,"text":5595},{"id":5622,"depth":62,"text":5623},{"id":5740,"depth":62,"text":5741},{"id":5791,"depth":62,"text":5792},{"id":5864,"depth":56,"text":5864,"children":6248},[6249,6250],{"id":5867,"depth":62,"text":5868},{"id":5961,"depth":62,"text":5962},{"id":6091,"depth":56,"text":6091},{"id":1048,"depth":56,"text":1048},{"title":6254,"date":6255,"path":6256,"tags":6257,"body":6259},"前端中的量子力学——一打开 F12 就消失的 Bug","2025-06-08 01:22:13","/2025/06/08/front-end-bug-gone-when-open-devtool",[2079,4002,5384,12,6258],"Debug",{"type":14,"value":6260,"toc":6835},[6261,6265,6268,6276,6278,6284,6287,6301,6305,6308,6464,6467,6470,6473,6476,6482,6485,6519,6523,6536,6539,6606,6609,6771,6774,6777,6781,6788,6799,6802,6807,6809,6832],[109,6262,6264],{"id":6263},"前端量子态现象的首次观测","前端「量子态」现象的首次观测",[17,6266,6267],{},"这事说来也邪乎，半个月前吃着火锅唱着歌，在工位上嘎嘎写码，发现一个诡异的 bug。作为如假包换的人类程序员，写出 bug 是再正常不过的事情了，但这 bug 邪门就邪门在我一打开 F12 的 DevTools 观察相关的 dom 结构，这 bug 就自动消失了；再把 DevTools 一关，Ctrl + F5 一刷新页面，Bug 又出现了。",[17,6269,6270,6271],{},"下面是使用 iframe 引入的 ",[803,6272,6275],{"href":6273,"rel":6274},"https://static.031130.xyz/demo/scroll-jump-bug.html",[807],"demo",[5337,6277],{"src":6273,"width":5340,"height":5341,"allowFullScreen":184,"loading":5342},[17,6279,6280],{},[783,6281],{"alt":6282,"src":6283},"“观测”指南","https://static.031130.xyz/uploads/2025/06/08/65620d31fce6f.webp",[17,6285,6286],{},"这 Bug 给我整得脑瓜子嗡嗡的，我又不是物理学家，写个前端怎么量子力学的观察者效应都给我整出来了（？",[1608,6288,6289,6295,6298],{},[17,6290,6291,6294],{},[21,6292,6293],{},"观测者效应","（Observer effect），是指“观测”这种行为对被观测对象造成一定影响的效应。",[17,6296,6297],{},"在量子力学实验中，如果要测算一个电子所处的速度，就要用两个光子隔一段时间去撞击这个电子，但第一个光子就已经把这个电子撞飞了，便改变了电子的原有速度，我们便无法测出真正准确的速度（不确定原理）。时间流逝的快慢也会受到观测者的影响，用很高的频率去观测粒子的衰变，反而使得粒子长时间不衰变。",[17,6299,6300],{},"——wikipedia",[109,6302,6304],{"id":6303},"量子迷雾浏览器机制","量子迷雾❌浏览器机制✅",[17,6306,6307],{},"这里先稍微解释一下 demo 中的代码片段:",[38,6309,6311],{"className":2298,"code":6310,"language":2300,"meta":43,"style":43},"if (scrollIndex >= groupLength) {\n  setTimeout(() => {\n    wrapper.style.transition = \"none\";\n    scrollIndex = 0;\n    wrapper.style.transform = `translateY(-${crollIndex * itemHeight}px)`;\n\n    requestAnimationFrame(() => {\n      wrapper.style.transition = \"transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)\";\n    });\n  }, 500);\n}\n",[30,6312,6313,6331,6342,6363,6374,6410,6414,6425,6445,6450,6460],{"__ignoreMap":43},[47,6314,6315,6318,6320,6323,6326,6329],{"class":49,"line":50},[47,6316,6317],{"class":134},"if",[47,6319,2770],{"class":150},[47,6321,6322],{"class":236},"scrollIndex",[47,6324,6325],{"class":142}," >=",[47,6327,6328],{"class":236}," groupLength",[47,6330,2762],{"class":150},[47,6332,6333,6336,6338,6340],{"class":49,"line":56},[47,6334,6335],{"class":146},"  setTimeout",[47,6337,634],{"class":150},[47,6339,637],{"class":134},[47,6341,640],{"class":150},[47,6343,6344,6347,6349,6351,6353,6356,6358,6361],{"class":49,"line":62},[47,6345,6346],{"class":154},"    wrapper",[47,6348,158],{"class":150},[47,6350,1066],{"class":161},[47,6352,158],{"class":150},[47,6354,6355],{"class":167},"transition",[47,6357,143],{"class":142},[47,6359,6360],{"class":205}," \"none\"",[47,6362,4144],{"class":150},[47,6364,6365,6368,6370,6372],{"class":49,"line":68},[47,6366,6367],{"class":236},"    scrollIndex",[47,6369,143],{"class":142},[47,6371,4639],{"class":743},[47,6373,4144],{"class":150},[47,6375,6376,6378,6380,6382,6384,6387,6389,6392,6394,6397,6400,6403,6405,6408],{"class":49,"line":74},[47,6377,6346],{"class":154},[47,6379,158],{"class":150},[47,6381,1066],{"class":161},[47,6383,158],{"class":150},[47,6385,6386],{"class":167},"transform",[47,6388,143],{"class":142},[47,6390,6391],{"class":205}," `translateY(-",[47,6393,334],{"class":333},[47,6395,6396],{"class":236},"crollIndex",[47,6398,6399],{"class":142}," *",[47,6401,6402],{"class":236}," itemHeight",[47,6404,339],{"class":333},[47,6406,6407],{"class":205},"px)`",[47,6409,4144],{"class":150},[47,6411,6412],{"class":49,"line":80},[47,6413,185],{"emptyLinePlaceholder":184},[47,6415,6416,6419,6421,6423],{"class":49,"line":86},[47,6417,6418],{"class":146},"    requestAnimationFrame",[47,6420,634],{"class":150},[47,6422,637],{"class":134},[47,6424,640],{"class":150},[47,6426,6427,6430,6432,6434,6436,6438,6440,6443],{"class":49,"line":92},[47,6428,6429],{"class":154},"      wrapper",[47,6431,158],{"class":150},[47,6433,1066],{"class":161},[47,6435,158],{"class":150},[47,6437,6355],{"class":167},[47,6439,143],{"class":142},[47,6441,6442],{"class":205}," \"transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)\"",[47,6444,4144],{"class":150},[47,6446,6447],{"class":49,"line":98},[47,6448,6449],{"class":150},"    });\n",[47,6451,6452,6455,6458],{"class":49,"line":617},[47,6453,6454],{"class":150},"  }, ",[47,6456,6457],{"class":743},"500",[47,6459,4180],{"class":150},[47,6461,6462],{"class":49,"line":3},[47,6463,2715],{"class":150},[17,6465,6466],{},"我这边拿到的需求是需要写一个无限滚动的轮播标题列表，每次展示三个，2 秒后标题列表整体上移，原本的第一个标题就移出可视范围了，下面会新补充一个新的标题列表。（可能解释的不清楚，但各位应该都看过上面的 demo 了）",[17,6468,6469],{},"当列表滚动到最底部的时候，我先取消 transition 过渡动画效果，趁机将整体列表平移到上一次可视范围内出现相同的三个标题的位置，再把 transition 过渡动画的效果加回来，这样就能在视觉上造成无限滚动的效果。",[17,6471,6472],{},"但问题就出在明明把 transition 属性取消了，但这一次平移仍然触发了过渡动画效果。",[17,6474,6475],{},"说实话，这是我短暂的码农生涯当中最绝望的一次，一方面是遇到的 bug 过于逆天以至于说出去都可能没人信，一方面是遇上这种问题是完全不能指望搜索引擎能给出什么解决方案的——毕竟我自己都不知道该怎么组织关键词进行搜索。",[17,6477,6478],{},[783,6479],{"alt":6480,"src":6481},"这是小麦茶，带我入坑前端的学长","https://static.031130.xyz/uploads/2025/06/08/475a61b332454.webp",[17,6483,6484],{},"于是抱着试一试的心态，把相关代码喂给 ChatGPT-4o 看看能不能问出个所以然来。",[1608,6486,6487,6501],{},[17,6488,6489,6490,6493,6494,6497,6498,456],{},"你描述的现象——“",[21,6491,6492],{},"滚动第九次时列表出现突兀的自下而上跳动","，而",[21,6495,6496],{},"打开 F12 时不会出现问题","”——",[21,6499,6500],{},"几乎可以确定是由于浏览器在某些渲染状态下跳过了某些帧（帧率波动）或者定时器精度的问题导致动画突变",[17,6502,6503,6504,6507,6508,6511,6512,6515,6516,456],{},"这种问题多半发生在“使用 ",[30,6505,6506],{},"setInterval"," 控制动画”和“切换样式（transition）时机不当”所引起的 ",[21,6509,6510],{},"过渡跳帧问题","，而打开 DevTools 会 ",[21,6513,6514],{},"强制刷新帧或提高定时器精度","，从而",[21,6517,6518],{},"掩盖了这个问题",[109,6520,6522],{"id":6521},"太好了是-requestanimationframe我们有救了","太好了，是 requestAnimationFrame，我们有救了",[1608,6524,6525,6533],{},[17,6526,6527,6532],{},[21,6528,6529],{},[30,6530,6531],{},"window.requestAnimationFrame()"," 方法会告诉浏览器你希望执行一个动画。它要求浏览器在下一次重绘之前，调用用户提供的回调函数。",[17,6534,6535],{},"——MDN",[17,6537,6538],{},"这是 GPT 给出的方案，非常有效",[38,6540,6542],{"className":1550,"code":6541,"language":1552,"meta":43,"style":43},"if (scrollIndex >= groupLength) {\n  setTimeout(() => {\n    wrapper.style.transition = \"none\";\n    scrollIndex = 0;\n    wrapper.style.transform = `translateY(-${crollIndex * itemHeight}px)`;\n\n    requestAnimationFrame(() => {\n+      requestAnimationFrame(() => {\n         wrapper.style.transition = \"transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)\";\n+      });\n    });\n  }, 500);\n}\n",[30,6543,6544,6549,6554,6559,6564,6569,6573,6578,6583,6588,6593,6597,6602],{"__ignoreMap":43},[47,6545,6546],{"class":49,"line":50},[47,6547,6548],{},"if (scrollIndex >= groupLength) {\n",[47,6550,6551],{"class":49,"line":56},[47,6552,6553],{},"  setTimeout(() => {\n",[47,6555,6556],{"class":49,"line":62},[47,6557,6558],{},"    wrapper.style.transition = \"none\";\n",[47,6560,6561],{"class":49,"line":68},[47,6562,6563],{},"    scrollIndex = 0;\n",[47,6565,6566],{"class":49,"line":74},[47,6567,6568],{},"    wrapper.style.transform = `translateY(-${crollIndex * itemHeight}px)`;\n",[47,6570,6571],{"class":49,"line":80},[47,6572,185],{"emptyLinePlaceholder":184},[47,6574,6575],{"class":49,"line":86},[47,6576,6577],{},"    requestAnimationFrame(() => {\n",[47,6579,6580],{"class":49,"line":92},[47,6581,6582],{},"+      requestAnimationFrame(() => {\n",[47,6584,6585],{"class":49,"line":98},[47,6586,6587],{},"         wrapper.style.transition = \"transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)\";\n",[47,6589,6590],{"class":49,"line":617},[47,6591,6592],{},"+      });\n",[47,6594,6595],{"class":49,"line":3},[47,6596,6449],{},[47,6598,6599],{"class":49,"line":643},[47,6600,6601],{},"  }, 500);\n",[47,6603,6604],{"class":49,"line":670},[47,6605,2715],{},[17,6607,6608],{},"如果觉得嵌套两层 requestAnimationFrame 比较难理解，那下面的代码是等效的",[38,6610,6612],{"className":2298,"code":6611,"language":2300,"meta":43,"style":43},"if (scrollIndex >= groupLength) {\n  setTimeout(() => {\n    scrollIndex = 0;\n\n    requestAnimationFrame(() => {\n      // 第一帧\n      wrapper.style.transition = \"none\";\n      wrapper.style.transform = `translateY(-${crollIndex * itemHeight}px)`;\n      // 第二帧\n      requestAnimationFrame(() => {\n        wrapper.style.transition = \"transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)\";\n      });\n    });\n  }, 500);\n}\n",[30,6613,6614,6628,6638,6648,6652,6662,6667,6685,6715,6720,6731,6750,6755,6759,6767],{"__ignoreMap":43},[47,6615,6616,6618,6620,6622,6624,6626],{"class":49,"line":50},[47,6617,6317],{"class":134},[47,6619,2770],{"class":150},[47,6621,6322],{"class":236},[47,6623,6325],{"class":142},[47,6625,6328],{"class":236},[47,6627,2762],{"class":150},[47,6629,6630,6632,6634,6636],{"class":49,"line":56},[47,6631,6335],{"class":146},[47,6633,634],{"class":150},[47,6635,637],{"class":134},[47,6637,640],{"class":150},[47,6639,6640,6642,6644,6646],{"class":49,"line":62},[47,6641,6367],{"class":236},[47,6643,143],{"class":142},[47,6645,4639],{"class":743},[47,6647,4144],{"class":150},[47,6649,6650],{"class":49,"line":68},[47,6651,185],{"emptyLinePlaceholder":184},[47,6653,6654,6656,6658,6660],{"class":49,"line":74},[47,6655,6418],{"class":146},[47,6657,634],{"class":150},[47,6659,637],{"class":134},[47,6661,640],{"class":150},[47,6663,6664],{"class":49,"line":80},[47,6665,6666],{"class":242},"      // 第一帧\n",[47,6668,6669,6671,6673,6675,6677,6679,6681,6683],{"class":49,"line":86},[47,6670,6429],{"class":154},[47,6672,158],{"class":150},[47,6674,1066],{"class":161},[47,6676,158],{"class":150},[47,6678,6355],{"class":167},[47,6680,143],{"class":142},[47,6682,6360],{"class":205},[47,6684,4144],{"class":150},[47,6686,6687,6689,6691,6693,6695,6697,6699,6701,6703,6705,6707,6709,6711,6713],{"class":49,"line":92},[47,6688,6429],{"class":154},[47,6690,158],{"class":150},[47,6692,1066],{"class":161},[47,6694,158],{"class":150},[47,6696,6386],{"class":167},[47,6698,143],{"class":142},[47,6700,6391],{"class":205},[47,6702,334],{"class":333},[47,6704,6396],{"class":236},[47,6706,6399],{"class":142},[47,6708,6402],{"class":236},[47,6710,339],{"class":333},[47,6712,6407],{"class":205},[47,6714,4144],{"class":150},[47,6716,6717],{"class":49,"line":98},[47,6718,6719],{"class":242},"      // 第二帧\n",[47,6721,6722,6725,6727,6729],{"class":49,"line":617},[47,6723,6724],{"class":146},"      requestAnimationFrame",[47,6726,634],{"class":150},[47,6728,637],{"class":134},[47,6730,640],{"class":150},[47,6732,6733,6736,6738,6740,6742,6744,6746,6748],{"class":49,"line":3},[47,6734,6735],{"class":154},"        wrapper",[47,6737,158],{"class":150},[47,6739,1066],{"class":161},[47,6741,158],{"class":150},[47,6743,6355],{"class":167},[47,6745,143],{"class":142},[47,6747,6442],{"class":205},[47,6749,4144],{"class":150},[47,6751,6752],{"class":49,"line":643},[47,6753,6754],{"class":150},"      });\n",[47,6756,6757],{"class":49,"line":670},[47,6758,6449],{"class":150},[47,6760,6761,6763,6765],{"class":49,"line":696},[47,6762,6454],{"class":150},[47,6764,6457],{"class":743},[47,6766,4180],{"class":150},[47,6768,6769],{"class":49,"line":737},[47,6770,2715],{"class":150},[17,6772,6773],{},"总之，我们需要杜绝浏览器将设置 transform 偏移值（瞬移列表位置）与恢复 transition 动画两件事合并到同一帧里去，而两层嵌套的 requestAnimationFrame 方法能很好的解决这个问题",[5337,6775],{"src":6776,"width":5340,"height":5341,"allowFullScreen":184,"loading":5342},"https://static.031130.xyz/demo/scroll-jump-bug-fixed.html",[109,6778,6780],{"id":6779},"驯服量子态前端开发者的新技能","驯服量子态：前端开发者的新技能",[17,6782,6783,6784,6787],{},"就这样，通过使用两层",[30,6785,6786],{},"requestAnimationFrame","，我们成功驯服了这个\"量子态\"的bug。现在无论是否打开F12，它都会乖乖地按照我们的预期滚动，不再玩消失的把戏。",[17,6789,6790,6791,6795,6796,6798],{},"看来，在前端的世界里，我们不仅要懂JavaScript，",[6792,6793,6794],"del",{},"还得懂点量子力学","。下次再遇到这种\"一观测就消失\"的bug，不妨试试这个\"量子纠缠解决方案\"——双重",[30,6797,6786],{},"，没准就能让bug从\"量子态\"坍缩成\"稳定态\"呢！",[17,6800,6801],{},"当然，如果你有更神奇的 debug 经历，欢迎分享你的经历——毕竟，在代码的宇宙里，我们永远不知道下一个bug会以怎样的形态出现。也许，这就是编程的乐趣（？）所在吧！",[1608,6803,6804],{},[17,6805,6806],{},"本文由 ChatGPT 与 DeepSeek 协助撰写，但 bug 是真人真事（泪）。",[109,6808,1048],{"id":1048},[1020,6810,6811,6818,6825],{},[1023,6812,6813],{},[803,6814,6817],{"href":6815,"rel":6816},"https://zh.wikipedia.org/wiki/%E8%A7%82%E6%B5%8B%E8%80%85%E6%95%88%E5%BA%94",[807],"观测者效应 - 维基百科，自由的百科全书",[1023,6819,6820],{},[803,6821,6824],{"href":6822,"rel":6823},"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame",[807],"Window：requestAnimationFrame() 方法 - Web API | MDN",[1023,6826,6827],{},[803,6828,6831],{"href":6829,"rel":6830},"https://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html",[807],"网页性能管理详解 - 阮一峰的网络日志",[1066,6833,6834],{},"html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sz0mV, html code.shiki .sz0mV{--shiki-default:#383A42;--shiki-dark:#E06C75}html pre.shiki code .s_Sar, html code.shiki .s_Sar{--shiki-default:#0184BC;--shiki-dark:#56B6C2}html pre.shiki code .sAdtL, html code.shiki .sAdtL{--shiki-default:#4078F2;--shiki-dark:#61AFEF}html pre.shiki code .s7GmK, html code.shiki .s7GmK{--shiki-default:#383A42;--shiki-dark:#E5C07B}html pre.shiki code .s2QsP, html code.shiki .s2QsP{--shiki-default:#E45649;--shiki-dark:#E5C07B}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sAOjX, html code.shiki .sAOjX{--shiki-default:#CA1243;--shiki-dark:#C678DD}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sW2Sy, html code.shiki .sW2Sy{--shiki-default:#A0A1A7;--shiki-default-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic}",{"title":43,"searchDepth":56,"depth":56,"links":6836},[6837,6838,6839,6840,6841],{"id":6263,"depth":56,"text":6264},{"id":6303,"depth":56,"text":6304},{"id":6521,"depth":56,"text":6522},{"id":6779,"depth":56,"text":6780},{"id":1048,"depth":56,"text":1048},{"title":6843,"date":6844,"path":6845,"tags":6846,"body":6847},"2025 年，如何为 web 页面上展示的视频选择合适的压缩算法？","2025-06-02 20:59:10","/2025/06/02/choosing-the-right-video-compression-format-for-web-in-2025",[4002,2079,1672],{"type":14,"value":6848,"toc":7535},[6849,6852,6856,6860,6863,6868,6873,6879,6885,6888,6893,6897,6900,6907,6910,6916,6920,6930,6935,6938,6941,6944,6948,6951,6958,6961,6964,6967,6970,6973,7209,7213,7216,7222,7229,7233,7244,7331,7337,7340,7344,7351,7357,7363,7367,7370,7376,7379,7382,7385,7388,7397,7399,7532],[17,6850,6851],{},"事情的起因是需要在网页上展示一个时长约为 5 分钟的产品展示视频，拿到的 H264 编码的原文件有 60MB 大。高达 1646 Kbps 码率的视频文件通过网络传输，烧 cdn 流量费用不说，对于弱网环境下的用户体验也绝对不会好。因此必须在兼顾浏览器兼容性（太好了不用管 IE）的情况下，使用更现代的视频压缩算法进行压缩。",[109,6853,6855],{"id":6854},"哪些压缩算法是目前的主流","哪些压缩算法是目前的主流？",[1168,6857,6859],{"id":6858},"av1","AV1",[17,6861,6862],{},"AV1 作为目前压缩效率最高的主流视频编码格式，在 2025 年的今天已经在 YouTube、Netflix、Bilibili 等视频网站全面铺开，毫无疑问是最值得优先考虑的选择；除了优异的压缩效率以外，AV1 免版税的优势使得各硬件厂商和浏览器内核开发者可以无所顾忌的将 AV1 编码的支持添加到自己的产品中。",[17,6864,6865],{},[783,6866],{"alt":43,"src":6867},"https://static.031130.xyz/uploads/2025/06/02/aec1af1718064.webp",[17,6869,6870],{},[783,6871],{"alt":43,"src":6872},"https://static.031130.xyz/uploads/2025/06/02/76a312b5a668b.webp",[17,6874,6875,6876],{},"可惜的是，Safari 并没有对 AV1 编码添加软解支持，只有在搭载 Apple M3 及后续生产的 Mac 和 iPhone 15 Pro 后续的机型才拥有硬解 AV1 的能力，在此之前生产的产品均无法使用 Safari 播放 AV1 编码的视频。",[6792,6877,6878],{},"我宣布 Safari 已经成为当代 IE，妥妥阻碍 Web 发展的绊脚石",[17,6880,6881],{},[783,6882],{"alt":6883,"src":6884},"Safari 在搭载 M2Pro 处理器的 Macbook Pro 上直接罢工了","https://static.031130.xyz/uploads/2025/06/02/01ddcc3948406.webp",[17,6886,6887],{},"除此之外，AV1 在压制视频时对设备的要求较高。在桌面端的消费级显卡中，目前只有 NVIDIA RTX 40 系、AMD Radeon RX 7000 系、IntelArc A380 及后续的产品拥有 AV1 的编码（encode）支持。而 Apple M 系列芯片至今没有任何一款产品拥有对 AV1 编码的硬件支持。这也导致我在我搭载 Intel Core i7-1165G7 的 ThinkPad 上使用 AV1 编码压缩视频时被迫使用 libaom-av1 进行软件编码，1080p 的视频压缩效率为 0.0025x 的速率，五分钟的视频要压一天多的时间。",[17,6889,6890],{},[783,6891],{"alt":43,"src":6892},"https://static.031130.xyz/uploads/2025/06/02/923ca02e1d835.webp",[1168,6894,6896],{"id":6895},"h265-hevc","H.265 / HEVC",[17,6898,6899],{},"作为 H.264 / AVC 的下一代继任者，H.265（又称 HEVC）的表现可谓是一手好牌打得稀巴烂。HEVC 由多个专利池（如 MPEG LA、HEVC Advance 和 Velos Media）管理，授权费用高且分散，昂贵的专利授权费用严重限制了它的普及速度和范围，尤其是在开放生态和网页端应用中。",[17,6901,6902,6903,6906],{},"Chromium / Firefox 不愿意当承担专利授权费的冤大头，拒绝在当今世界最大的两个开源浏览器内核中添加默认的 H.265 软解支持，目前主流浏览器普遍采用",[21,6904,6905],{},"能硬解就硬解，硬解不了就摆烂","的支持策略。Firefox on Linux 倒是另辟蹊径，不仅会尝试使用硬解，还会尝试使用用户在电脑上装的 ffmpeg 软解曲线救国。不过好在毕竟是 2013 年就确定的标准，现在大部分硬件厂商都集体被摁着脖子交了专利授权费以保证产品竞争力，Apple 更是 HEVC 的一等公民，保证了全系产品的 HEVC 解码能力。",[17,6908,6909],{},"目前未覆盖到的场景主要是 Chromium / Firefox on Windows 7 和 Chromium on Linux（包括 UOS、麒麟等一众国产 Linux 发行版）。",[17,6911,6912],{},[783,6913],{"alt":6914,"src":6915},"在 Linux 上不支持硬解 H.265 的 Chrome 直接把视频当作音频播放了","https://static.031130.xyz/uploads/2025/06/02/2e8e5100f645a.webp",[1168,6917,6919],{"id":6918},"vp9","VP9",[17,6921,6922,6923,6926,6927],{},"VP9 是 Google 于 2013 年推出的视频编码格式，作为 H.264 的继任者之一，在压缩效率上接近 H.265（HEVC），但最大的杀手锏是——",[21,6924,6925],{},"彻底免专利费","。这也让 VP9 成为 Google 对 HEVC 高额授权费用的掀桌式回应：",[21,6928,6929],{},"你们慢慢吃，我开一桌免费的。",[17,6931,6932],{},[783,6933],{"alt":43,"src":6934},"https://static.031130.xyz/uploads/2025/06/03/a9b473a3bd120.webp",[17,6936,6937],{},"借着免专利的东风和 Google 自家产品矩阵的强推，VP9 在 YouTube、WebRTC 乃至 Chrome 浏览器中迅速站稳了脚跟。特别是在 AV1 普及之前，VP9 几乎是网页视频播放领域的事实标准，甚至逼得苹果这个“编解码俱乐部元老”在 macOS 11 Big Sur 和 iOS 14 上的 Safari 破天荒地加入了 VP9 支持（尽管 VP9 in webm 的支持稍晚一些，具体见上表）。",[17,6939,6940],{},"VP9 的软解码支持基本无死角：Chromium、Firefox、Edge 都原生支持，Safari 也一反常态地“从了”。硬件解码方面，从 Intel Skylake（第六代酷睿）开始，NVIDIA GTX 950 及以上、AMD Vega 和 RDNA 系显卡基本都具备完整的 VP9 解码能力——总之，只要不是博物馆级别的老电脑，就能愉快播放 VP9 视频。",[17,6942,6943],{},"当然，编码仍是 VP9 的短板。Google 官方提供的开源实现 libvpx，速度比不上 x264/x265 等老牌选手，在缺乏硬件加速的场景下，仍然属于“关机前压一宿”的那种体验。不过相比 AV1 的 libaom-av1，VP9 至少还能算“可用”，适合轻量化应用、实时通信或是对压制速度敏感的用户，而早在 7 代 Intel 的 Kaby Lake 系列产品就已经引入了 VP9 的硬件编码支持，各家硬件厂商对 VP9 硬件编码的支持发展到今天还算不错。",[1168,6945,6947],{"id":6946},"h264-avc","H.264 / AVC",[17,6949,6950],{},"作为“老将出马一个顶俩”的代表，H.264 / AVC 无疑是过去二十年视频编码领域的霸主。自 2003 年标准确定以来，凭借良好的压缩效率、广泛的硬件支持和相对合理的专利授权策略，H.264 迅速成为从网络视频、蓝光光盘到直播、监控乃至手机录像的默认选择。如果你打开一个视频网站的视频流、下载一个在线视频、剪辑一个 vlog，大概率都绕不开 H.264 的身影。",[17,6952,6953,6954,6957],{},"H.264 的最大优势在于——",[21,6955,6956],{},"兼容性无敌","。不夸张地说，只要是带屏幕的设备，就能播放 H.264 视频。软解？早在十几年前的浏览器和媒体播放器中就已普及；硬解？从 Intel Sandy Bridge、NVIDIA Fermi、AMD VLIW4 这些“史前”架构开始就已加入对 H.264 的完整支持——你甚至可以在树莓派、智能冰箱上流畅播放 H.264 视频。",[17,6959,6960],{},"虽然 H.264 同样存在和 H.265 相同的专利问题，但其授权策略明显更温和——MPEG LA 提供的专利池授权门槛较低，且不向免费网络视频收取费用，使得包括 Chromium、Firefox 在内的浏览器都默认集成了 H.264 的软解功能。Apple 和 Microsoft 更是早早将其作为视频编码和解码的第一公民，Safari 和 Edge 天生支持 H.264，不存在任何兼容性烦恼。",[17,6962,6963],{},"当然，作为一项 20 多年前的技术，H.264 在压缩效率上已经明显落后于 VP9、HEVC 和 AV1。相同画质下，H.264 的码率要比 AV1 高出 30～50%，在追求极致带宽利用或存储节省的应用场景中就显得有些力不从心。然而在今天这个“能播比好看更重要”的现实环境中，H.264 依然是默认方案，是“稳健老哥”的代名词。",[17,6965,6966],{},"所以，即便 AV1、HEVC、VP9 各有亮点，H.264 依旧凭借“老、稳、全”三大核心竞争力，在 2025 年依然牢牢占据着视频生态链的中枢地位——只要这个世界还有浏览器不支持 AV1（可恶的 Safari 不支持软解），服务器不想烧钱转码视频，或用户设备太老，H.264 就不会退场。",[1168,6968,6969],{"id":6969},"小结",[17,6971,6972],{},"在视频编码方面，浏览器不再是那个能靠一己之力抹平硬件和系统差异的超人，所以总有一些特殊情况是表格中无法涵盖的。",[6974,6975,6976,7001],"table",{},[6977,6978,6979],"thead",{},[6980,6981,6982,6986,6989,6992,6995,6998],"tr",{},[6983,6984,6985],"th",{},"编解码器",[6983,6987,6988],{},"压缩效率",[6983,6990,6991],{},"浏览器",[6983,6993,6994],{},"桌面端支持",[6983,6996,6997],{},"移动端支持",[6983,6999,7000],{},"备注",[7002,7003,7004,7023,7039,7062,7083,7100,7117,7133,7147,7164,7181,7195],"tbody",{},[6980,7005,7006,7009,7012,7015,7018,7020],{},[7007,7008,6859],"td",{},[7007,7010,7011],{},"★★★",[7007,7013,7014],{},"Chrome / Chromium",[7007,7016,7017],{},"是 (v70+，发布于 2018 年 10 月)",[7007,7019,7017],{},[7007,7021,7022],{},"硬解优先，软解后备",[6980,7024,7025,7027,7029,7031,7034,7037],{},[7007,7026],{},[7007,7028],{},[7007,7030,1081],{},[7007,7032,7033],{},"是 (v67+，发布于 2019 年 5 月)",[7007,7035,7036],{},"是 (v113+，发布于 2023 年 5 月)",[7007,7038,7022],{},[6980,7040,7041,7043,7045,7048,7051,7053],{},[7007,7042],{},[7007,7044],{},[7007,7046,7047],{},"Safari",[7007,7049,7050],{},"不完全支持 (仅近两年的产品支持)",[7007,7052,7050],{},[7007,7054,7055,7058,7059],{},[21,7056,7057],{},"仅支持硬解"," (M3, A17 Pro 系芯片后开始支持)，",[21,7060,7061],{},"无软解支持",[6980,7063,7064,7067,7070,7072,7075,7077],{},[7007,7065,7066],{},"HEVC (H.265)",[7007,7068,7069],{},"★★☆",[7007,7071,7014],{},[7007,7073,7074],{},"不完全支持",[7007,7076,7074],{},[7007,7078,7079,7082],{},[21,7080,7081],{},"仅支持硬解，无软解支持","（Windows 可从微软商店安装付费的软解插件）",[6980,7084,7085,7087,7089,7091,7093,7095],{},[7007,7086],{},[7007,7088],{},[7007,7090,1081],{},[7007,7092,7074],{},[7007,7094,7074],{},[7007,7096,7097,7099],{},[21,7098,7081],{},"（Linux 可依赖系统 ffmpeg 实现软解）",[6980,7101,7102,7104,7106,7108,7111,7114],{},[7007,7103],{},[7007,7105],{},[7007,7107,7047],{},[7007,7109,7110],{},"近期设备全部支持 (macOS High Sierra+，发布于 2017 年 6 月)",[7007,7112,7113],{},"近期设备全部支持 (iOS 11+，发布于 2017 年 10 月)",[7007,7115,7116],{},"苹果是 H.265 一等公民",[6980,7118,7119,7121,7123,7125,7128,7130],{},[7007,7120,6919],{},[7007,7122,7069],{},[7007,7124,7014],{},[7007,7126,7127],{},"是",[7007,7129,7127],{},[7007,7131,7132],{},"支持良好",[6980,7134,7135,7137,7139,7141,7143,7145],{},[7007,7136],{},[7007,7138],{},[7007,7140,1081],{},[7007,7142,7127],{},[7007,7144,7127],{},[7007,7146,7132],{},[6980,7148,7149,7151,7153,7155,7158,7161],{},[7007,7150],{},[7007,7152],{},[7007,7154,7047],{},[7007,7156,7157],{},"是 (v14.1+，发布于 2021 年 4 月)",[7007,7159,7160],{},"是 (iOS 17.4+，发布于 2024 年 3 月)",[7007,7162,7163],{},"支持稍晚（此处指兼容 vp9 的 webm 时间，vp9 in WebRTC 的兼容时间更早）",[6980,7165,7166,7169,7172,7174,7176,7178],{},[7007,7167,7168],{},"H.264 (AVC)",[7007,7170,7171],{},"★☆☆",[7007,7173,7014],{},[7007,7175,7127],{},[7007,7177,7127],{},[7007,7179,7180],{},"通用",[6980,7182,7183,7185,7187,7189,7191,7193],{},[7007,7184],{},[7007,7186],{},[7007,7188,1081],{},[7007,7190,7127],{},[7007,7192,7127],{},[7007,7194,7180],{},[6980,7196,7197,7199,7201,7203,7205,7207],{},[7007,7198],{},[7007,7200],{},[7007,7202,7047],{},[7007,7204,7127],{},[7007,7206,7127],{},[7007,7208,7180],{},[109,7210,7212],{"id":7211},"怎么选","怎么选？",[17,7214,7215],{},"我们不是专业的视频托管平台，不像 YouTube、Bilibili 那样专业到可以向用户提供多种分辨率、压缩算法的选择。",[17,7217,7218],{},[783,7219],{"alt":7220,"src":7221},"Bilibili 为用户提供了三种压缩算法的视频源","https://static.031130.xyz/uploads/2025/06/03/096484dbc0f3a.webp",[17,7223,7224,7225,7228],{},"最终的选择策略，必须在",[21,7226,7227],{},"压缩效率、播放兼容性、编码耗时","等维度之间做出权衡。",[1168,7230,7232],{"id":7231},"选择一av1-挑大梁h264-保兼容","选择一：AV1 挑大梁，H.264 保兼容",[17,7234,7235,7236,7239,7240,7243],{},"现代浏览器支持在 ",[30,7237,7238],{},"\u003Cvideo>"," 标签中使用 ",[30,7241,7242],{},"\u003Csource>"," 标签和 MIME type 让浏览器按需播放",[38,7245,7249],{"className":7246,"code":7247,"language":7248,"meta":43,"style":43},"language-html shiki shiki-themes one-light one-dark-pro","\u003Cvideo controls poster=\"preview.jpg\">\n  \u003Csource src=\"video.av1.webm\" type='video/webm; codecs=\"av01\"' />\n  \u003Csource src=\"video.h264.mp4\" type='video/mp4' />\n  当前浏览器不支持视频播放\n\u003C/video>\n","html",[30,7250,7251,7271,7296,7318,7323],{"__ignoreMap":43},[47,7252,7253,7255,7258,7261,7264,7266,7269],{"class":49,"line":50},[47,7254,608],{"class":150},[47,7256,7257],{"class":167},"video",[47,7259,7260],{"class":743}," controls",[47,7262,7263],{"class":743}," poster",[47,7265,320],{"class":150},[47,7267,7268],{"class":205},"\"preview.jpg\"",[47,7270,3401],{"class":150},[47,7272,7273,7275,7278,7281,7283,7286,7289,7291,7294],{"class":49,"line":56},[47,7274,3406],{"class":150},[47,7276,7277],{"class":167},"source",[47,7279,7280],{"class":743}," src",[47,7282,320],{"class":150},[47,7284,7285],{"class":205},"\"video.av1.webm\"",[47,7287,7288],{"class":743}," type",[47,7290,320],{"class":150},[47,7292,7293],{"class":205},"'video/webm; codecs=\"av01\"'",[47,7295,3420],{"class":150},[47,7297,7298,7300,7302,7304,7306,7309,7311,7313,7316],{"class":49,"line":62},[47,7299,3406],{"class":150},[47,7301,7277],{"class":167},[47,7303,7280],{"class":743},[47,7305,320],{"class":150},[47,7307,7308],{"class":205},"\"video.h264.mp4\"",[47,7310,7288],{"class":743},[47,7312,320],{"class":150},[47,7314,7315],{"class":205},"'video/mp4'",[47,7317,3420],{"class":150},[47,7319,7320],{"class":49,"line":68},[47,7321,7322],{"class":150},"  当前浏览器不支持视频播放\n",[47,7324,7325,7327,7329],{"class":49,"line":74},[47,7326,3425],{"class":150},[47,7328,7257],{"class":167},[47,7330,3401],{"class":150},[17,7332,7333,7334,7336],{},"通过这样的写法，浏览器会自动选择最先能解码的 ",[30,7335,7277],{},"，无需写复杂的判断逻辑或使用 JavaScript 动态切换。默认的 AV1 编码在最大程度上减少了传输流量降低成本，享受现代浏览器与设备的压缩红利；而 H.264 则作为兜底方案，保证了在不支持 AV1 的 Safari 等老旧设备上的回放兼容性。",[17,7338,7339],{},"然而这个选择可能并不是太合适，一方面我手上最先进的处理器 Apple M4 并不支持硬件编码 AV1 视频，5 分钟的视频压完需要整整 3 个小时，如果还需要视压缩质量来回调整压缩参数重新压上几次，那可真是遭老罪了；另一方面，即使 Chromium / Firefox 等主流浏览器内核现在都支持 AV1 的软解，但在一些硬件较老的设备上播放 AV1 编码的视频可能让用户的电脑风扇原地起飞，这一点在 YouTube 大力推广 AV1 的时候就曾遭到不少用户的诟病。",[1168,7341,7343],{"id":7342},"选择二vp9-独挑大梁","选择二：VP9 独挑大梁",[17,7345,7346,7347,7350],{},"考虑到 AV1 编码的高昂成本和",[6792,7348,7349],{},"用户电脑风扇原地起飞的风险","，VP9 也是一个非常具有竞争力的选择。VP9 在主流浏览器中得到了非常好的兼容，因此可以考虑放弃 H.264 的 fallback 方案独挑大梁。而 VP9 硬件编码在近几年的硬件设备上的普遍支持也给足了我勇气，让我可以多次调整压缩质量重新压缩，找一个在文件体积和画面清晰度之间的 sweet point。",[17,7352,7353],{},[7354,7355,7356],"em",{},"由于是 VP9 独挑大梁，因此大多数人可能会考虑使用与 VP9 最为适配的 webm 格式封装视频。但目前在 webm 中最广泛使用的音频编码 opus 在 Safari 上的兼容性并不是太好（在 2024 年 3 月发布的 Safari 17.4 才开始支持），建议斟酌一下是不是继续用回 AAC 编码，并将视频封装在 mp4 中。",[17,7358,7359],{},[783,7360],{"alt":7361,"src":7362},"https://caniuse.com/opus","https://static.031130.xyz/uploads/2025/06/03/ec3b5dbcbcc29.webp",[109,7364,7366],{"id":7365},"音频码率太高再砍一刀","音频码率太高？再砍一刀",[17,7368,7369],{},"上面说了那么多的视频压缩算法，其实只是局限于视频画面的压缩，音频这一块其实还能再压一点出来。",[38,7371,7374],{"className":7372,"code":7373,"language":2737},[5975],"Stream #0:1[0x2](und): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, stereo, fltp, 128 kb/s (default)\n",[30,7375,7373],{"__ignoreMap":43},[17,7377,7378],{},"一个介绍产品的视频，在音频部分采用了 48000 Hz 双声道采样，码率高达 128 kbps，说实话有点奢侈。我直接砍成 64 kbps 单声道，又省下 2MB 的文件大小。",[109,7380,7381],{"id":7381},"写在最后",[17,7383,7384],{},"对于前端开发者来说，视频压缩算法的选择早已不是单纯的“压得小不小”问题，而是一场在设备能力、浏览器兼容性、用户体验与开发成本之间的博弈。我们既要跟上技术演进的节奏，拥抱 AV1、VP9 等更高效的编解码器，也要在实际项目中照顾到现实中的设备分布和播放环境。",[17,7386,7387],{},"在理想与落地之间，我们所能做的，就是充分利用 HTML5 提供的容错机制，搭配好合适的编码策略和封装格式，让网页上的每一段视频都能在合适的设备上、以合理的代价播放出来。",[17,7389,7390,7391,7393,7394,7396],{},"毕竟，Web 从来不缺“能不能做”，缺的是“做得优雅”。如果说编码器是硬件工程师和视频平台的战场，那 ",[30,7392,7238],{}," 标签下的这几行 ",[30,7395,7242],{},"，才是属于我们前端工程师的战壕。",[109,7398,1048],{"id":1048},[1020,7400,7401,7408,7415,7422,7429,7436,7443,7450,7456,7463,7470,7477,7484,7491,7498,7505,7515,7522,7529],{},[1023,7402,7403],{},[803,7404,7407],{"href":7405,"rel":7406},"https://developer.mozilla.org/zh-CN/docs/Web/Media/Guides/Formats/Video_codecs",[807],"网页视频编码指南 - Web 媒体技术 | MDN",[1023,7409,7410],{},[803,7411,7414],{"href":7412,"rel":7413},"https://research.netflix.com/research-area/video-encoding-and-quality",[807],"Encoding & Quality - Netflix Research",[1023,7416,7417],{},[803,7418,7421],{"href":7419,"rel":7420},"https://optiview.dolby.com/resources/blog/playback/how-the-vp9-codec-supports-now-streaming-to-apple-devices-more/",[807],"How the VP9 Codec Supports Now Streaming to Apple Devices & More | dolby.io",[1023,7423,7424],{},[803,7425,7428],{"href":7426,"rel":7427},"https://www.chromium.org/audio-video/",[807],"Audio/Video | The Chromium Project",[1023,7430,7431],{},[803,7432,7435],{"href":7433,"rel":7434},"https://caniuse.com/av1",[807],"AV1 video format | Can I use... Support tables for HTML5, CSS3, etc",[1023,7437,7438],{},[803,7439,7442],{"href":7440,"rel":7441},"https://caniuse.com/webm",[807],"WebM video format | Can I use... Support tables for HTML5, CSS3, etc",[1023,7444,7445],{},[803,7446,7449],{"href":7447,"rel":7448},"https://caniuse.com/hevc",[807],"HEVC/H.265 video format | Can I use... Support tables for HTML5, CSS3, etc",[1023,7451,7452],{},[803,7453,7455],{"href":7361,"rel":7454},[807],"Opus audio format | Can I use... Support tables for HTML5, CSS3, etc",[1023,7457,7458],{},[803,7459,7462],{"href":7460,"rel":7461},"https://caniuse.com/mpeg4",[807],"MPEG-4/H.264 video format | Can I use... Support tables for HTML5, CSS3, etc",[1023,7464,7465],{},[803,7466,7469],{"href":7467,"rel":7468},"https://en.wikipedia.org/wiki/AV1",[807],"AV1 - Wikipedia",[1023,7471,7472],{},[803,7473,7476],{"href":7474,"rel":7475},"https://en.wikipedia.org/wiki/High_Efficiency_Video_Coding",[807],"High Efficiency Video Coding - Wikipedia",[1023,7478,7479],{},[803,7480,7483],{"href":7481,"rel":7482},"https://en.wikipedia.org/wiki/VP9",[807],"VP9 - Wikipedia",[1023,7485,7486],{},[803,7487,7490],{"href":7488,"rel":7489},"https://en.wikipedia.org/wiki/Advanced_Video_Coding",[807],"Advanced Video Coding - Wikipedia",[1023,7492,7493],{},[803,7494,7497],{"href":7495,"rel":7496},"https://www.intel.com/content/www/us/en/developer/articles/technical/encode-and-decode-capabilities-for-7th-generation-intel-core-processors-and-newer.html",[807],"Encode and Decode Capabilities for 7th Generation Intel® Core™...",[1023,7499,7500],{},[803,7501,7504],{"href":7502,"rel":7503},"https://zh.wikipedia.org/zh-cn/MacOS_High_Sierra",[807],"macOS High Sierra - 维基百科，自由的百科全书",[1023,7506,7507],{},[803,7508,7511,7512],{"href":7509,"rel":7510},"https://www.androidpolice.com/2018/10/17/chrome-70-adds-av1-video-support-improves-pwas-windows-apk-download/",[807],"Chrome 70 adds AV1 video support, improves PWAs on Windows, and more ",[47,7513,7514],{},"APK Download",[1023,7516,7517],{},[803,7518,7521],{"href":7519,"rel":7520},"https://www.mozilla.org/en-US/firefox/android/113.0/releasenotes/",[807],"Firefox for Android 113.0, See All New Features, Updates and Fixes",[1023,7523,7524],{},[803,7525,7528],{"href":7526,"rel":7527},"https://www.bilibili.com/video/BV1nW4y1V7kR/",[807],"视频网站的“蓝光”是怎么骗你的？——视频画质全解析【柴知道】_哔哩哔哩_bilibili",[1023,7530,7531],{},"《4K 清晰度不如4年前，视频变糊是你的错觉吗》- 原视频已 404",[1066,7533,7534],{},"html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sJa8x, html code.shiki .sJa8x{--shiki-default:#E45649;--shiki-dark:#E06C75}html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .sDhpE, html code.shiki .sDhpE{--shiki-default:#50A14F;--shiki-dark:#98C379}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":43,"searchDepth":56,"depth":56,"links":7536},[7537,7544,7548,7549,7550],{"id":6854,"depth":56,"text":6855,"children":7538},[7539,7540,7541,7542,7543],{"id":6858,"depth":62,"text":6859},{"id":6895,"depth":62,"text":6896},{"id":6918,"depth":62,"text":6919},{"id":6946,"depth":62,"text":6947},{"id":6969,"depth":62,"text":6969},{"id":7211,"depth":56,"text":7212,"children":7545},[7546,7547],{"id":7231,"depth":62,"text":7232},{"id":7342,"depth":62,"text":7343},{"id":7365,"depth":56,"text":7366},{"id":7381,"depth":56,"text":7381},{"id":1048,"depth":56,"text":1048},{"title":7552,"date":7553,"path":7554,"tags":7555,"body":7556},"el-image 和 el-table 怎么就打架了？Stacking Context 是什么？","2025-05-31 00:29:40","/2025/05/31/el-image-and-el-table-why-the-fight-and-what-is-a-stacking-context",[2076,12,5384,4002,2079],{"type":14,"value":7557,"toc":7773},[7558,7561,7567,7574,7576,7579,7584,7587,7592,7629,7632,7636,7639,7642,7654,7657,7661,7664,7693,7697,7701,7704,7707,7710,7713,7724,7731,7733,7770],[17,7559,7560],{},"这是精弘内部的图床开发时遇到的事情，大一的小朋友反馈说 el-image 和 el-table 打架了。",[17,7562,7563],{},[783,7564],{"alt":7565,"src":7566},"截图","https://static.031130.xyz/uploads/2025/05/31/c6674f6f13955.webp",[17,7568,7569,7573],{},[803,7570,6275],{"href":7571,"rel":7572},"https://static.031130.xyz/demo/el-image-el-table-conflict.html",[807]," 的 iframe 引入",[5337,7575],{"src":7571,"width":5340,"height":5341,"allowFullScreen":184,"loading":5342},[17,7577,7578],{},"看到后面的表格透出 el-image 的预览层，我的第一反应是叫小朋友去检查 z-index 是否正确，el-image 的 mask 遮罩的 z-index 是否大于表格。",[17,7580,7581],{},[783,7582],{"alt":43,"src":7583},"https://static.031130.xyz/uploads/2025/05/31/1c20b4ea0b37e.webp",[17,7585,7586],{},"经过我本地调试，发现 z-index 的设置确实没问题，但后面的元素为什么会透出来？谷歌搜索一番，找到了这篇文章",[17,7588,7589],{},[783,7590],{"alt":43,"src":7591},"https://static.031130.xyz/uploads/2025/05/31/99845899e3524.webp",[1608,7593,7594,7597],{},[17,7595,7596],{},"给 el-table 加一行如下代码即可",[38,7598,7602],{"className":7599,"code":7600,"language":7601,"meta":43,"style":43},"language-css shiki shiki-themes one-light one-dark-pro",".el-table__cell {\n    position: static !important;\n}\n","css",[30,7603,7604,7611,7625],{"__ignoreMap":43},[47,7605,7606,7609],{"class":49,"line":50},[47,7607,7608],{"class":743},".el-table__cell",[47,7610,640],{"class":150},[47,7612,7613,7616,7620,7623],{"class":49,"line":56},[47,7614,7615],{"class":150},"    position: ",[47,7617,7619],{"class":7618},"sYebD","static",[47,7621,7622],{"class":134}," !important",[47,7624,4144],{"class":150},[47,7626,7627],{"class":49,"line":62},[47,7628,2715],{"class":150},[17,7630,7631],{},"经本地调试确认，这一方案确实能解决问题，但为什么呢？这就涉及到 Stacking Context （层叠上下文）了。",[109,7633,7635],{"id":7634},"stacking-context层叠上下文究竟是什么","Stacking Context（层叠上下文）究竟是什么？",[17,7637,7638],{},"简单来说，Stacking Context 可以被类比成画布。在同一块画布上，z-index 值越高的元素就处于越上方，会覆盖掉 z-index 较低的元素，这也是为什么我最开始让检查 z-index 的设置是否有问题。但问题出在 Stacking Context 也是有上下顺序之分的。",[17,7640,7641],{},"现在假设我们有 A、B 两块画布，在 A 上有一个设置了 z-index 为 1145141919810 的元素。那这个元素具备非常高的优先级，理应出现在浏览器窗口的最上方。但如果 B 画布的优先级高于 A 画布，那么 B 元素上的所有元素都会优先显示（当了躺赢狗）。那么画布靠什么来决定优先级呢？",[1020,7643,7644,7649],{},[1023,7645,7646],{},[21,7647,7648],{},"处于同级的 Stacking Context 之间靠 z-index 值来区分优先级",[1023,7650,7651],{},[21,7652,7653],{},"对于 z-index 值相同的 Stacking Context，在 html 文档中位置靠后的元素拥有更高的优先级",[17,7655,7656],{},"第二条规则也能解释为什么在上面的 demo 中，只有在表格中位置排在图片元素后面的元素出现了透出来的情况。",[109,7658,7660],{"id":7659},"所以为什么-el-image-和-el-table-打架了","所以为什么 el-image 和 el-table 打架了？",[17,7662,7663],{},"这次的冲突主要是下面两个因素引起的",[1214,7665,7666,7682],{},[1023,7667,7668,7669,7672,7673,7675,7679,7681],{},"el-table 给每个 cell 都设置了 ",[30,7670,7671],{},"position: relative"," 的 css 属性，而 position 被设为 relative 时，当前元素就会生成一个 Stacking Context。",[5931,7674],{},[783,7676],{"alt":7677,"src":7678},"image-20250531013029154","https://static.031130.xyz/uploads/2025/05/31/9df43b865b3c6.webp",[5931,7680],{},"所以我们这么一个有十个格子的表格，其实就生成了十个画布。而这其中每个画布 z-index 都为 1。根据刚才的规则，在图片格子后面的那些格子对应的 html 代码片段在整体的 html 文档中更靠后，所以他们的优先级都高于图片格子。",[1023,7683,7684,7685,7687,7690,7692],{},"el-image 的预览功能所展开的遮罩层处于 el-image 标签内部",[5931,7686],{},[783,7688],{"alt":43,"src":7689},"https://static.031130.xyz/uploads/2025/05/31/f18a2b54afd63.webp",[5931,7691],{},"上图中橙色部分是 el-image 在预览时提供的遮罩，可以看到 element-plus 组件的 image 预览的默认行为是将预览时所需要的遮罩层直接放在 \u003Cel-image> \u003C/el-image> 标签内部，这导致 el-image 的遮罩层被困在一个低优先级的 Stacking Context 中，后面的格子里的内容就是能凭借高优先级透过来。",[109,7694,7696],{"id":7695},"所以解决方案是什么","所以解决方案是什么？",[1168,7698,7700],{"id":7699},"更改-position-值在这里确实是可行的","更改 position 值在这里确实是可行的",[17,7702,7703],{},"上面我谷歌搜到的将 el-table 中 cell 的 position 值强制设为 static 确实是有效的，因为 static 不会创建新的 Stacking Context，这样就不会有现在的问题。",[1168,7705,7706],{"id":7706},"将需要出现在最顶层的代码放置在优先级最大的位置是更常见的方案",[17,7708,7709],{},"但别的组件库在处理这个需求时，一般会将预览时提供的遮罩的 html 代码片段直接插入到 body 标签内部的最尾部，并设置一个相对比较大的 z-index 值，以确保这个遮罩层能够获得最高的优先级，以此能出现在屏幕的最上方。（像一些 dialog 对话框、popover 悬浮框也都是这个原理）。",[17,7711,7712],{},"事实上，element-plus 组件库也提供了这个功能",[1608,7714,7715],{},[17,7716,7717,7720,7721],{},[21,7718,7719],{},"preview-teleported:"," image-viewer 是否插入至 body 元素上。嵌套的父元素属性会发生修改时应该将此属性设置为 ",[30,7722,7723],{},"true",[17,7725,7726,7727,7730],{},"所以在使用 el-image 时传入一个 ",[30,7728,7729],{},":preview-teleported=\"true\""," 是一个更普适的方案，因为我们并不能确保 el-image 的父元素除了 el-table 的 cell 以外还有什么其他的父元素会创建新的 Stacking Context。",[109,7732,1048],{"id":1048},[1020,7734,7735,7742,7749,7756,7763],{},[1023,7736,7737],{},[803,7738,7741],{"href":7739,"rel":7740},"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_positioned_layout/Stacking_context",[807],"层叠上下文 - CSS：层叠样式表 | MDN",[1023,7743,7744],{},[803,7745,7748],{"href":7746,"rel":7747},"https://juejin.cn/post/6844903667175260174",[807],"彻底搞懂CSS层叠上下文、层叠等级、层叠顺序、z-index最近，在项目中遇到一个关于CSS中元素z-index属性的问 - 掘金",[1023,7750,7751],{},[803,7752,7755],{"href":7753,"rel":7754},"https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/",[807],"深入理解CSS中的层叠上下文和层叠顺序 «  张鑫旭-鑫空间-鑫生活",[1023,7757,7758],{},[803,7759,7762],{"href":7760,"rel":7761},"https://element-plus.org/zh-CN/component/image.html",[807],"Image 图片 | Element Plus",[1023,7764,7765],{},[803,7766,7769],{"href":7767,"rel":7768},"https://blog.csdn.net/qq_61402485/article/details/131202117",[807],"element ui e-image 和e-table一起使用显示问题_el-table el-image-CSDN博客",[1066,7771,7772],{},"html pre.shiki code .sAGMh, html code.shiki .sAGMh{--shiki-default:#986801;--shiki-dark:#D19A66}html pre.shiki code .s5ixo, html code.shiki .s5ixo{--shiki-default:#383A42;--shiki-dark:#ABB2BF}html pre.shiki code .sYebD, html code.shiki .sYebD{--shiki-default:#383A42;--shiki-dark:#D19A66}html pre.shiki code .sLKXg, html code.shiki .sLKXg{--shiki-default:#A626A4;--shiki-dark:#C678DD}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":43,"searchDepth":56,"depth":56,"links":7774},[7775,7776,7777,7781],{"id":7634,"depth":56,"text":7635},{"id":7659,"depth":56,"text":7660},{"id":7695,"depth":56,"text":7696,"children":7778},[7779,7780],{"id":7699,"depth":62,"text":7700},{"id":7706,"depth":62,"text":7706},{"id":1048,"depth":56,"text":1048},127,1761897607799]