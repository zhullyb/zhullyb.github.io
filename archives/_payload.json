[{"data":1,"prerenderedAt":7214},["ShallowReactive",2],{"randomIndex/archives":3,"index-page-1":4,"posts-nums-total":7213},0,[5,964,1340,1553,1960,3635,4873,5748,6273,6982],{"title":6,"date":7,"path":8,"tags":9,"body":13},"Nuxt Content v3 中数组字段的筛选困境与性能优化","2025-10-20 21:52:59","/2025/10/20/nuxt-content-v3-z-array-query-challenge",[10,11,12],"Nuxt","Nuxt Content","JavaScript",{"type":14,"value":15,"toc":958},"minimark",[16,34,37,101,108,113,123,215,230,390,400,410,414,417,662,668,686,693,698,702,715,733,739,753,905,908,918,924,930,935,938,945,954],[17,18,19,20,24,25,28,29,33],"p",{},"Nuxt Content 是 Nuxt 生态中用于处理 Markdown、YAML 等内容的强大模块。最近，我在使用 ",[21,22,23],"strong",{},"Nuxt v4 + Nuxt Content v3"," 重构博客（原为 Hexo）时，遇到了一个棘手的问题：v3 版本的默认查询 API ",[21,26,27],{},"并未直接提供","对数组字段进行“包含”（",[30,31,32],"code",{},"$contains","）操作的支持。",[17,35,36],{},"例如，这是我的正在写的这篇博客的 Front Matter：",[38,39,44],"pre",{"className":40,"code":41,"language":42,"meta":43,"style":43},"language-markdown shiki shiki-themes github-light github-dark","---\ntitle: Nuxt Content v3 中数组字段的筛选困境\ndate: 2025-10-20 21:52:59\nsticky:\ntags:\n- Nuxt\n- Nuxt Content\n- JavaScript\n---\n","markdown","",[30,45,46,54,60,66,72,78,84,90,96],{"__ignoreMap":43},[47,48,51],"span",{"class":49,"line":50},"line",1,[47,52,53],{},"---\n",[47,55,57],{"class":49,"line":56},2,[47,58,59],{},"title: Nuxt Content v3 中数组字段的筛选困境\n",[47,61,63],{"class":49,"line":62},3,[47,64,65],{},"date: 2025-10-20 21:52:59\n",[47,67,69],{"class":49,"line":68},4,[47,70,71],{},"sticky:\n",[47,73,75],{"class":49,"line":74},5,[47,76,77],{},"tags:\n",[47,79,81],{"class":49,"line":80},6,[47,82,83],{},"- Nuxt\n",[47,85,87],{"class":49,"line":86},7,[47,88,89],{},"- Nuxt Content\n",[47,91,93],{"class":49,"line":92},8,[47,94,95],{},"- JavaScript\n",[47,97,99],{"class":49,"line":98},9,[47,100,53],{},[17,102,103,104,107],{},"我的目标是创建一个 ",[21,105,106],{},"Tag 页面","，列出所有包含特定 Tag（例如 'Nuxt'）的文章。",[109,110,112],"h2",{"id":111},"v2-的便捷与-v3-的限制","v2 的便捷与 v3 的限制",[17,114,115,116,119,120,122],{},"在 Nuxt Content v2 中，数据基于文件系统存储，查询方式是对文件内容的抽象，模拟了类似 ",[21,117,118],{},"MongoDB 的 JSON 文档查询","语法。我们可以轻松地使用 ",[30,121,32],{}," 方法获取所有包含 “Nuxt” 标签的文章：",[38,124,128],{"className":125,"code":126,"language":127,"meta":43,"style":43},"language-typescript shiki shiki-themes github-light github-dark","const tag = decodeURIComponent(route.params.tag as string)\n\nconst articles = await queryContent('posts')\n  .where({ tags: { $contains: tag } })  // ✅ v2 中的 MongoDB Style 查询\n  .find()\n","typescript",[30,129,130,160,166,190,205],{"__ignoreMap":43},[47,131,132,136,140,143,147,151,154,157],{"class":49,"line":50},[47,133,135],{"class":134},"szBVR","const",[47,137,139],{"class":138},"sj4cs"," tag",[47,141,142],{"class":134}," =",[47,144,146],{"class":145},"sScJk"," decodeURIComponent",[47,148,150],{"class":149},"sVt8B","(route.params.tag ",[47,152,153],{"class":134},"as",[47,155,156],{"class":138}," string",[47,158,159],{"class":149},")\n",[47,161,162],{"class":49,"line":56},[47,163,165],{"emptyLinePlaceholder":164},true,"\n",[47,167,168,170,173,175,178,181,184,188],{"class":49,"line":62},[47,169,135],{"class":134},[47,171,172],{"class":138}," articles",[47,174,142],{"class":134},[47,176,177],{"class":134}," await",[47,179,180],{"class":145}," queryContent",[47,182,183],{"class":149},"(",[47,185,187],{"class":186},"sZZnC","'posts'",[47,189,159],{"class":149},[47,191,192,195,198,201],{"class":49,"line":68},[47,193,194],{"class":149},"  .",[47,196,197],{"class":145},"where",[47,199,200],{"class":149},"({ tags: { $contains: tag } })  ",[47,202,204],{"class":203},"sJ8bj","// ✅ v2 中的 MongoDB Style 查询\n",[47,206,207,209,212],{"class":49,"line":74},[47,208,194],{"class":149},[47,210,211],{"class":145},"find",[47,213,214],{"class":149},"()\n",[17,216,217,218,225,226,229],{},"但在使用 ",[21,219,220,221,224],{},"Nuxt Content v3 的 ",[30,222,223],{},"queryCollection"," API"," 时，我们很自然地会尝试使用 ",[30,227,228],{},".where()"," 方法进行筛选：",[38,231,233],{"className":125,"code":232,"language":127,"meta":43,"style":43},"const tag = decodeURIComponent(route.params.tag as string)\n\nconst { data } = await useAsyncData(`tag-${tag}`, () =>\n    queryCollection('posts')\n        .where(tag, 'in', 'tags')  // ❌ 这样会报错，因为第一次参数必须是字段名\n        .order('date', 'DESC')\n        .select('title', 'date', 'path', 'tags')\n        .all()\n)\n",[30,234,235,253,257,295,306,331,350,377,386],{"__ignoreMap":43},[47,236,237,239,241,243,245,247,249,251],{"class":49,"line":50},[47,238,135],{"class":134},[47,240,139],{"class":138},[47,242,142],{"class":134},[47,244,146],{"class":145},[47,246,150],{"class":149},[47,248,153],{"class":134},[47,250,156],{"class":138},[47,252,159],{"class":149},[47,254,255],{"class":49,"line":56},[47,256,165],{"emptyLinePlaceholder":164},[47,258,259,261,264,267,270,273,275,278,280,283,286,289,292],{"class":49,"line":62},[47,260,135],{"class":134},[47,262,263],{"class":149}," { ",[47,265,266],{"class":138},"data",[47,268,269],{"class":149}," } ",[47,271,272],{"class":134},"=",[47,274,177],{"class":134},[47,276,277],{"class":145}," useAsyncData",[47,279,183],{"class":149},[47,281,282],{"class":186},"`tag-${",[47,284,285],{"class":149},"tag",[47,287,288],{"class":186},"}`",[47,290,291],{"class":149},", () ",[47,293,294],{"class":134},"=>\n",[47,296,297,300,302,304],{"class":49,"line":68},[47,298,299],{"class":145},"    queryCollection",[47,301,183],{"class":149},[47,303,187],{"class":186},[47,305,159],{"class":149},[47,307,308,311,313,316,319,322,325,328],{"class":49,"line":74},[47,309,310],{"class":149},"        .",[47,312,197],{"class":145},[47,314,315],{"class":149},"(tag, ",[47,317,318],{"class":186},"'in'",[47,320,321],{"class":149},", ",[47,323,324],{"class":186},"'tags'",[47,326,327],{"class":149},")  ",[47,329,330],{"class":203},"// ❌ 这样会报错，因为第一次参数必须是字段名\n",[47,332,333,335,338,340,343,345,348],{"class":49,"line":80},[47,334,310],{"class":149},[47,336,337],{"class":145},"order",[47,339,183],{"class":149},[47,341,342],{"class":186},"'date'",[47,344,321],{"class":149},[47,346,347],{"class":186},"'DESC'",[47,349,159],{"class":149},[47,351,352,354,357,359,362,364,366,368,371,373,375],{"class":49,"line":86},[47,353,310],{"class":149},[47,355,356],{"class":145},"select",[47,358,183],{"class":149},[47,360,361],{"class":186},"'title'",[47,363,321],{"class":149},[47,365,342],{"class":186},[47,367,321],{"class":149},[47,369,370],{"class":186},"'path'",[47,372,321],{"class":149},[47,374,324],{"class":186},[47,376,159],{"class":149},[47,378,379,381,384],{"class":49,"line":92},[47,380,310],{"class":149},[47,382,383],{"class":145},"all",[47,385,214],{"class":149},[47,387,388],{"class":49,"line":98},[47,389,159],{"class":149},[17,391,392,393,395,396,399],{},"遗憾的是，这样是行不通的。",[30,394,228],{}," 的方法签名要求字段名必须作为首个参数传入：",[30,397,398],{},"where(field: keyof Collection | string, operator: SqlOperator, value?: unknown)","。",[17,401,402,403,406,407,409],{},"由于 Nuxt Content v3 ",[21,404,405],{},"底层采用 SQLite 作为本地数据库","，所有查询都必须遵循类 SQL 语法。如果设计时未提供针对数组字段的内置操作符（例如 ",[30,408,32],{}," 的 SQL 等价形式），最终的解决方案往往会显得比较“别扭”。",[109,411,413],{"id":412},"初版实现牺牲性能的全量拉取","初版实现：牺牲性能的“全量拉取”",[17,415,416],{},"本着“尽快重构，后续优化”的思路，我写出了以下代码：",[38,418,420],{"className":125,"code":419,"language":127,"meta":43,"style":43},"// 初版实现：全量拉取后使用 JS 筛选\nconst allPosts = (\n    await useAsyncData(`tag-${route.params.tag}`, () =>\n        queryCollection('posts')\n            .order('date', 'DESC')\n            .select('title', 'date', 'path', 'tags')\n            .all()\n    )\n).data as Ref\u003CPost[]>\n\nconst Posts = computed(() => {\n    return allPosts.value.filter(post =>\n        typeof post.tags?.map === 'function'\n            ? post.tags?.includes(decodeURIComponent(route.params.tag as string))\n            : false\n    )\n})\n",[30,421,422,427,439,469,480,497,521,529,534,553,558,580,601,616,642,651,656],{"__ignoreMap":43},[47,423,424],{"class":49,"line":50},[47,425,426],{"class":203},"// 初版实现：全量拉取后使用 JS 筛选\n",[47,428,429,431,434,436],{"class":49,"line":56},[47,430,135],{"class":134},[47,432,433],{"class":145}," allPosts",[47,435,142],{"class":134},[47,437,438],{"class":149}," (\n",[47,440,441,444,446,448,450,453,456,459,461,463,465,467],{"class":49,"line":62},[47,442,443],{"class":134},"    await",[47,445,277],{"class":145},[47,447,183],{"class":149},[47,449,282],{"class":186},[47,451,452],{"class":149},"route",[47,454,455],{"class":186},".",[47,457,458],{"class":149},"params",[47,460,455],{"class":186},[47,462,285],{"class":149},[47,464,288],{"class":186},[47,466,291],{"class":149},[47,468,294],{"class":134},[47,470,471,474,476,478],{"class":49,"line":68},[47,472,473],{"class":145},"        queryCollection",[47,475,183],{"class":149},[47,477,187],{"class":186},[47,479,159],{"class":149},[47,481,482,485,487,489,491,493,495],{"class":49,"line":74},[47,483,484],{"class":149},"            .",[47,486,337],{"class":145},[47,488,183],{"class":149},[47,490,342],{"class":186},[47,492,321],{"class":149},[47,494,347],{"class":186},[47,496,159],{"class":149},[47,498,499,501,503,505,507,509,511,513,515,517,519],{"class":49,"line":80},[47,500,484],{"class":149},[47,502,356],{"class":145},[47,504,183],{"class":149},[47,506,361],{"class":186},[47,508,321],{"class":149},[47,510,342],{"class":186},[47,512,321],{"class":149},[47,514,370],{"class":186},[47,516,321],{"class":149},[47,518,324],{"class":186},[47,520,159],{"class":149},[47,522,523,525,527],{"class":49,"line":86},[47,524,484],{"class":149},[47,526,383],{"class":145},[47,528,214],{"class":149},[47,530,531],{"class":49,"line":92},[47,532,533],{"class":149},"    )\n",[47,535,536,539,541,544,547,550],{"class":49,"line":98},[47,537,538],{"class":149},").data ",[47,540,153],{"class":134},[47,542,543],{"class":145}," Ref",[47,545,546],{"class":149},"\u003C",[47,548,549],{"class":145},"Post",[47,551,552],{"class":149},"[]>\n",[47,554,556],{"class":49,"line":555},10,[47,557,165],{"emptyLinePlaceholder":164},[47,559,561,563,566,568,571,574,577],{"class":49,"line":560},11,[47,562,135],{"class":134},[47,564,565],{"class":138}," Posts",[47,567,142],{"class":134},[47,569,570],{"class":145}," computed",[47,572,573],{"class":149},"(() ",[47,575,576],{"class":134},"=>",[47,578,579],{"class":149}," {\n",[47,581,583,586,589,592,594,598],{"class":49,"line":582},12,[47,584,585],{"class":134},"    return",[47,587,588],{"class":149}," allPosts.value.",[47,590,591],{"class":145},"filter",[47,593,183],{"class":149},[47,595,597],{"class":596},"s4XuR","post",[47,599,600],{"class":134}," =>\n",[47,602,604,607,610,613],{"class":49,"line":603},13,[47,605,606],{"class":134},"        typeof",[47,608,609],{"class":149}," post.tags?.map ",[47,611,612],{"class":134},"===",[47,614,615],{"class":186}," 'function'\n",[47,617,619,622,625,628,630,633,635,637,639],{"class":49,"line":618},14,[47,620,621],{"class":134},"            ?",[47,623,624],{"class":149}," post.tags?.",[47,626,627],{"class":145},"includes",[47,629,183],{"class":149},[47,631,632],{"class":145},"decodeURIComponent",[47,634,150],{"class":149},[47,636,153],{"class":134},[47,638,156],{"class":138},[47,640,641],{"class":149},"))\n",[47,643,645,648],{"class":49,"line":644},15,[47,646,647],{"class":134},"            :",[47,649,650],{"class":138}," false\n",[47,652,654],{"class":49,"line":653},16,[47,655,533],{"class":149},[47,657,659],{"class":49,"line":658},17,[47,660,661],{"class":149},"})\n",[17,663,664,665],{},"这种方法虽然满足了需求，但也带来了明显的性能代价：",[21,666,667],{},"_payload.json 文件体积的膨胀。",[17,669,670,671,674,675,678,679,682,683,685],{},"在 Nuxt 项目中，",[30,672,673],{},"_payload.json"," 用于存储 ",[30,676,677],{},"useAsyncData"," 的结果等动态数据。在全量拉取的方案下，",[21,680,681],{},"每一个 Tag 页面"," 都会加载包含所有文章信息的 ",[30,684,673],{},"，造成数据冗余。很多 Tag 页面仅需一两篇文章的数据，却被迫加载了全部文章信息，严重影响了性能。",[17,687,688],{},[689,690],"img",{"alt":691,"src":692},"tags 目录占据了 2.9MiB，是所有目录中最大的","https://static.031130.xyz/uploads/2025/10/20/a748878c03c64.webp",[17,694,695],{},[689,696],{"alt":673,"src":697},"https://static.031130.xyz/uploads/2025/10/20/8ef786d873da1.webp",[109,699,701],{"id":700},"讨巧方案利用-sqlite-的存储特性进行优化","讨巧方案：利用 SQLite 的存储特性进行优化",[17,703,704,705,707,708,399],{},"为了减少 ",[30,706,677],{}," 返回的查询结果，我查阅了 Nuxt Content 的 GitHub Discussions，发现",[709,710,714],"a",{"href":711,"rel":712},"https://github.com/nuxt/content/discussions/2955",[713],"nofollow","在 v3.alpha.8 版本时就有人提出了一种“巧妙”的解决方案",[17,716,717,718,728,729,732],{},"由于 Nuxt Content v3 使用 SQLite 数据库，原本在 Front Matter 中定义的 ",[21,719,720,723,724,727],{},[30,721,722],{},"tags"," 数组（通过 ",[30,725,726],{},"z.array()"," 定义）最终会以 JSON 字符串的形式存储","在数据库中（具体格式可在 ",[30,730,731],{},".nuxt/content/sql_dump.txt"," 文件中查看）。",[17,734,735],{},[689,736],{"alt":737,"src":738},"sql_dump.txt","https://static.031130.xyz/uploads/2025/10/20/b70036c55bb29.webp",[17,740,741,742,745,746,752],{},"这意味着我们可以利用 SQLite 的",[21,743,744],{},"字符串操作","特性，通过 ",[21,747,748,751],{},[30,749,750],{},"LIKE"," 动词配合通配符","来完成数组包含的筛选，本质上是查询 JSON 字符串是否包含特定子串：",[38,754,756],{"className":125,"code":755,"language":127,"meta":43,"style":43},"const tag = decodeURIComponent(route.params.tag as string)\n\nconst { data } = await useAsyncData(`tag-${route.params.tag}`, () =>\n    queryCollection('posts')\n        .where('tags', 'LIKE', `%\"${tag}\"%`)\n        .order('date', 'DESC')\n        .select('title', 'date', 'path', 'tags')\n        .all()\n)\n",[30,757,758,776,780,816,826,853,869,893,901],{"__ignoreMap":43},[47,759,760,762,764,766,768,770,772,774],{"class":49,"line":50},[47,761,135],{"class":134},[47,763,139],{"class":138},[47,765,142],{"class":134},[47,767,146],{"class":145},[47,769,150],{"class":149},[47,771,153],{"class":134},[47,773,156],{"class":138},[47,775,159],{"class":149},[47,777,778],{"class":49,"line":56},[47,779,165],{"emptyLinePlaceholder":164},[47,781,782,784,786,788,790,792,794,796,798,800,802,804,806,808,810,812,814],{"class":49,"line":62},[47,783,135],{"class":134},[47,785,263],{"class":149},[47,787,266],{"class":138},[47,789,269],{"class":149},[47,791,272],{"class":134},[47,793,177],{"class":134},[47,795,277],{"class":145},[47,797,183],{"class":149},[47,799,282],{"class":186},[47,801,452],{"class":149},[47,803,455],{"class":186},[47,805,458],{"class":149},[47,807,455],{"class":186},[47,809,285],{"class":149},[47,811,288],{"class":186},[47,813,291],{"class":149},[47,815,294],{"class":134},[47,817,818,820,822,824],{"class":49,"line":68},[47,819,299],{"class":145},[47,821,183],{"class":149},[47,823,187],{"class":186},[47,825,159],{"class":149},[47,827,828,830,832,834,836,838,841,843,846,848,851],{"class":49,"line":74},[47,829,310],{"class":149},[47,831,197],{"class":145},[47,833,183],{"class":149},[47,835,324],{"class":186},[47,837,321],{"class":149},[47,839,840],{"class":186},"'LIKE'",[47,842,321],{"class":149},[47,844,845],{"class":186},"`%\"${",[47,847,285],{"class":149},[47,849,850],{"class":186},"}\"%`",[47,852,159],{"class":149},[47,854,855,857,859,861,863,865,867],{"class":49,"line":80},[47,856,310],{"class":149},[47,858,337],{"class":145},[47,860,183],{"class":149},[47,862,342],{"class":186},[47,864,321],{"class":149},[47,866,347],{"class":186},[47,868,159],{"class":149},[47,870,871,873,875,877,879,881,883,885,887,889,891],{"class":49,"line":86},[47,872,310],{"class":149},[47,874,356],{"class":145},[47,876,183],{"class":149},[47,878,361],{"class":186},[47,880,321],{"class":149},[47,882,342],{"class":186},[47,884,321],{"class":149},[47,886,370],{"class":186},[47,888,321],{"class":149},[47,890,324],{"class":186},[47,892,159],{"class":149},[47,894,895,897,899],{"class":49,"line":92},[47,896,310],{"class":149},[47,898,383],{"class":145},[47,900,214],{"class":149},[47,902,903],{"class":49,"line":98},[47,904,159],{"class":149},[17,906,907],{},"下面是优化后重新生成的文件占用，体积减小还是非常显著的",[909,910,911,915],"ul",{},[912,913,914],"li",{},"tags 目录体积: 2.9MiB -> 1.4MiB",[912,916,917],{},"单个 _payload.json 的体积: 23.1KiB -> 1.01 KiB",[17,919,920,921,923],{},"通过这种方法，我们成功将查询逻辑下推到了数据库层，避免了不必要的全量数据传输，显著降低了单个目录中 ",[30,922,673],{}," 的体积，实现了性能优化。",[17,925,926],{},[689,927],{"alt":928,"src":929},"tags 目录体积下降","https://static.031130.xyz/uploads/2025/10/20/007e72e7b476d.webp",[17,931,932],{},[689,933],{"alt":673,"src":934},"https://static.031130.xyz/uploads/2025/10/20/17ba3ccbbdf9e.webp",[109,936,937],{"id":937},"参见",[17,939,940],{},[709,941,944],{"href":942,"rel":943},"https://content.nuxt.com/docs/utils/query-collection#wherefield-keyof-collection-string-operator-sqloperator-value-unknown",[713],"queryCollection - Nuxt Content",[17,946,947],{},[709,948,950,951,953],{"href":711,"rel":949},[713],"How do you query ",[30,952,726],{}," fields (e.g. tags) in the latest nuxt-content module (v3.alpha.8) · nuxt/content · Discussion #2955",[955,956,957],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}html pre.shiki code .s4XuR, html code.shiki .s4XuR{--shiki-default:#E36209;--shiki-dark:#FFAB70}",{"title":43,"searchDepth":56,"depth":56,"links":959},[960,961,962,963],{"id":111,"depth":56,"text":112},{"id":412,"depth":56,"text":413},{"id":700,"depth":56,"text":701},{"id":937,"depth":56,"text":937},{"title":965,"date":966,"path":967,"tags":968,"body":975},"后 OCSP 时代，浏览器如何应对证书吊销新挑战","2025-10-16 15:38:50","/2025/10/16/how-s-mozilla-crlite-going-now",[969,970,971,972,973,974],"SSL","Firefox","Web PKI","OCSP","CRLSets","CRLite",{"type":14,"value":976,"toc":1330},[977,980,989,998,1009,1014,1018,1029,1032,1039,1049,1056,1061,1068,1072,1075,1078,1086,1090,1093,1102,1123,1126,1130,1133,1146,1149,1173,1192,1195,1202,1205,1208,1212,1215,1239,1246,1252,1254],[17,978,979],{},"2023 年 8 月，CA/Browser Forum 通过了一项投票——不再强制要求 Let’s Encrypt 等公开信任的 CA 设立 OCSP Server",[17,981,982,983,988],{},"2024 年 7 月，Let's Encrypt 发布",[709,984,987],{"href":985,"rel":986},"https://letsencrypt.org/2024/07/23/replacing-ocsp-with-crls",[713],"博客","，披露其计划关闭 OCSP Server",[17,990,991,992,997],{},"同年 12 月，Let's Encrypt 发布",[709,993,996],{"href":994,"rel":995},"https://letsencrypt.org/2024/12/05/ending-ocsp",[713],"其关闭 OCSP Server 的时间计划表","，大致情况如下：",[909,999,1000,1003,1006],{},[912,1001,1002],{},"2025 年 1 月 30 日 - Let’s Encrypt 不再接受新的包含 OCSP Must-Staple 扩展的证书签发请求，除非你的账号先前申请过此类证书",[912,1004,1005],{},"2025 年 5 月 7 日 - Let's Encrypt 新签发的证书将加入 CRL URLs，不再包含 OCSP URLs，并且所有新的包含 OCSP Must-Staple 扩展的证书签发请求都将被拒绝",[912,1007,1008],{},"2025 年 8 月 6 日 - Let's Encrypt 关闭 OCSP 服务器",[17,1010,1011],{},[21,1012,1013],{},"Let's Encrypt 是全世界最大的免费 SSL 证书颁发机构，而这一举动标志着我们已逐渐步入后 OCSP 时代。",[109,1015,1017],{"id":1016},"ocsp-的困境性能与隐私的权衡","OCSP 的困境：性能与隐私的权衡",[17,1019,1020,1021,1024,1025,1028],{},"Let's Encrypt 这一举动的背后，是人们对 OCSP（在线证书状态协议）长久以来累积的不满。OCSP 作为一种实时查询证书有效性的方式，最初的设想很美好：当浏览器访问一个网站时，它可以向 ",[21,1022,1023],{},"CA（证书颁发机构）"," 的 OCSP 服务器发送一个简短的请求，询问该证书是否仍然有效。这似乎比下载一个巨大的 ",[21,1026,1027],{},"CRL（证书吊销列表）"," 要高效得多。",[17,1030,1031],{},"然而，OCSP 在实际应用中暴露出众多缺陷：",[17,1033,1034,1035,1038],{},"首先是",[21,1036,1037],{},"性能问题","。尽管单个请求很小，但当数百万用户同时访问网站时，OCSP 服务器需要处理海量的实时查询。这不仅给 CA 带来了巨大的服务器压力，也增加了用户访问网站的延迟。如果 OCSP 服务器响应缓慢甚至宕机，浏览器可能会因为无法确认证书状态而中断连接，或者为了用户体验而不得不“睁一只眼闭一只眼”，这都削弱了 OCSP 的安全性。",[17,1040,1041,1042,1045,1046],{},"更严重的是",[21,1043,1044],{},"隐私问题","。每一次 OCSP 查询，都相当于向 CA 报告了用户的访问行为。这意味着 CA 能够知道某个用户在何时访问了哪个网站。虽然 OCSP 查询本身不包含个人身份信息，但将这些信息与 IP 地址等数据结合起来，CA 完全可以建立起用户的浏览习惯画像。对于重视隐私的用户和开发者来说，这种“无声的监视”是不可接受的。",[21,1047,1048],{},"即使 CA 故意不保留这些信息，地区法律也可能强制 CA 收集这些信息。",[17,1050,1051,1052,1055],{},"再者，OCSP  还存在设计上的",[21,1053,1054],{},"安全缺陷","。由于担心连接超时影响用户体验，浏览器通常默认采用 soft-fail 机制：一旦无法连接 OCSP  服务器，便会选择放行而非阻断连接。攻击者恰恰可以利用这一点，通过阻断客户端与 OCSP  服务器之间的通信，使查询始终超时，从而轻松绕过证书状态验证。",[1057,1058,1060],"h3",{"id":1059},"ocsp-装订-ocsp-stapling","OCSP 装订 (OCSP stapling)",[17,1062,1063,1064,399],{},"基于上面这些缺陷，我们有了 OCSP 装订 (OCSP stapling) 方案，这",[709,1065,1067],{"href":1066},"/2024/11/19/firefox-is-the-only-mainstream-brower-doing-online-certificate-revocation-checks/#OCSP-%E8%A3%85%E8%AE%A2-OCSP-stapling","在我去年的博客里讲过，欢迎回顾",[1057,1069,1071],{"id":1070},"强制-ocsp-装订-ocsp-must-staple","强制 OCSP 装订 (OCSP Must-Staple)",[17,1073,1074],{},"OCSP Must-Staple 是一个在 ssl 证书申请时的拓展项，该扩展会告知浏览器：若在证书中识别到此扩展，则不得向证书颁发机构发送查询请求，而应在握手阶段获取装订式副本。若未能获得有效副本，浏览器应拒绝连接。",[17,1076,1077],{},"这项功能赋予了浏览器开发者 hard-fail 的勇气，但在 OCSP 淡出历史之前，Let's Encrypt 似乎是唯一支持这一拓展的主流 CA，并且这项功能并没有得到广泛使用。",[17,1079,1080,1081,399],{},"~~本来不想介绍这项功能的（因为根本没人用），但考虑到这东西快入土了，还是给它在中文互联网中立个碑，~~更多信息参考 ",[709,1082,1085],{"href":1083,"rel":1084},"https://letsencrypt.org/2024/12/05/ending-ocsp#must-staple",[713],"Let's Encrypt 的博客",[109,1087,1089],{"id":1088},"chromium-的方案弱水三千只取一瓢","Chromium 的方案：弱水三千只取一瓢",[17,1091,1092],{},"OCSP 的隐私和性能问题并非秘密，浏览器厂商们早就开始了各自的探索。2012 年，Chrome 默认禁用了 CRLs、OCSP 检查，转向自行设计的证书校验机制。",[17,1094,1095,1096,1101],{},"众所周知，吊销列表可以非常庞大。如果浏览器需要下载和解析一个完整的全球吊销列表，那将是一场性能灾难（Mozilla 团队在",[709,1097,1100],{"href":1098,"rel":1099},"https://hacks.mozilla.org/2025/08/crlite-fast-private-and-comprehensive-certificate-revocation-checking-in-firefox/",[713],"今年的博客","中提到，从 3000 个活跃的 CRL 下载的文件大小将达到 300MB）。Chromium 团队通过分析历史数据发现，大多数被吊销的证书属于少数高风险类别，例如证书颁发机构（CA）本身被攻破、或者某些大型网站的证书被吊销。基于此洞察，CRLSets 采取了以下策略：",[1103,1104,1105,1111,1117],"ol",{},[912,1106,1107,1110],{},[21,1108,1109],{},"分层吊销","：Chromium 不会下载所有被吊销的证书信息，而是由 Google 团队维护一个精简的、包含“最重要”吊销信息的列表。这个列表会定期更新并通过 Chrome 浏览器更新推送给用户。",[912,1112,1113,1116],{},[21,1114,1115],{},"精简高效","：这个列表体积非常小，目前大概只有 600KB。它包含了那些一旦被滥用就会造成大规模安全事故的证书，例如 CA 的中间证书、或者一些知名网站（如 Google、Facebook）的证书。",[912,1118,1119,1122],{},[21,1120,1121],{},"牺牲部分安全性","：这种方案的缺点也很明显——它无法覆盖所有的证书吊销情况。对于一个普通网站的证书被吊销，CRLSets 大概率无法检测到。根据 Mozilla 今年的博客所说，CRLSets 只包含了 1%~2% 的未过期的被吊销证书信息。",[17,1124,1125],{},"虽然 CRLSets 是一种“不完美”的解决方案，但它在性能和可用性之间找到了一个平衡点。它确保了用户在访问主流网站时的基础安全，同时避免了 OCSP 带来的性能和隐私开销。对于 Chromium 而言，与其追求一个在现实中难以完美实现的 OCSP 方案，不如集中精力解决最紧迫的安全威胁。",[109,1127,1129],{"id":1128},"firefox-的方案从-crls-到-crlite","Firefox 的方案：从 CRLs 到 CRLite",[17,1131,1132],{},"与 Chromium 的“只取一瓢”策略不同，Firefox 的开发者们一直在寻找一种既能保证全面性，又能解决性能问题的方案。",[17,1134,1135,1136,1138,1139,1142,1143,399],{},"为了解决这个问题，Mozilla 提出了一个创新的方案：",[21,1137,974],{},"。CRLite 的设计理念是通过",[21,1140,1141],{},"哈希函数和布隆过滤器","等数据结构，将庞大的证书吊销列表压缩成一个",[21,1144,1145],{},"小巧、可下载且易于本地验证的格式",[17,1147,1148],{},"CRLite 的工作原理可以简单概括为：",[1103,1150,1151,1157,1167],{},[912,1152,1153,1156],{},[21,1154,1155],{},"数据压缩","：CA 定期生成其全部吊销证书的列表。",[912,1158,1159,1162,1163,1166],{},[21,1160,1161],{},"服务器处理","：Mozilla 的服务器会收集这些列表，并使用加密哈希函数和布隆过滤器等技术，将所有吊销证书的信息",[21,1164,1165],{},"编码","成一个非常紧凑的数据结构。",[912,1168,1169,1172],{},[21,1170,1171],{},"客户端验证","：浏览器下载这个压缩文件，当访问网站时，只需本地对证书进行哈希计算，然后查询这个本地文件，就能快速判断该证书是否已被吊销。",[17,1174,1175,1176,1179,1180,1183,1184,1187,1188,1191],{},"与 CRLSets 相比，CRLite 的优势在于它能够实现",[21,1177,1178],{},"对所有吊销证书的全面覆盖","，同时保持",[21,1181,1182],{},"极小的体积","。更重要的是，它",[21,1185,1186],{},"完全在本地完成验证","，这意味着浏览器",[21,1189,1190],{},"无需向任何第三方服务器发送请求","，从而彻底解决了 OCSP 的隐私问题。",[17,1193,1194],{},"Firefox 当前的策略为每 12 小时对 CRLite 数据进行一次增量更新，每日的下载数据大约为 300KB；每 45 天进行一次全量的快照同步，下载数据约为 4MB。",[17,1196,1197,1198],{},"Mozilla 开放了他们的数据看板，你可以在这里找到近期的 CRLite 数据大小：",[709,1199,1200],{"href":1200,"rel":1201},"https://yardstick.mozilla.org/dashboard/snapshot/c1WZrxGkNxdm9oZp7xVvGUEFJCELfApN",[713],[17,1203,1204],{},"自 2025 年 4 月 1 日发布的 Firefox Desktop 137 版本起，Firefox 开始逐步以 CRLite 替换 OCSP 校验；同年 8 月 19 日，Firefox Desktop 142 针对 DV 证书正式弃用 OCSP 检验。",[17,1206,1207],{},"CRLite 已经成为 Firefox 未来证书吊销验证的核心方案，它代表了对性能、隐私和安全性的全面追求。",[109,1209,1211],{"id":1210},"后-ocsp-时代的展望","后 OCSP 时代的展望",[17,1213,1214],{},"随着 Let's Encrypt 等主要 CA 关闭 OCSP 服务，OCSP 的时代正在加速落幕。我们可以看到，浏览器厂商们已经开始各自探索更高效、更安全的替代方案。",[909,1216,1217,1227],{},[912,1218,1219,1222,1223,1226],{},[21,1220,1221],{},"Chromium"," 凭借其 CRLSets 方案，在",[21,1224,1225],{},"性能和关键安全保障","之间取得了务实的平衡。",[912,1228,1229,1231,1232,1234,1235,1238],{},[21,1230,970],{}," 则通过 ",[21,1233,974],{}," 这一技术创新，试图在",[21,1236,1237],{},"全面性、隐私和性能","三者之间找到最佳的解决方案。",[17,1240,1241,1242,1245],{},"这些方案的共同点是：",[21,1243,1244],{},"将证书吊销验证从实时在线查询（OCSP）转变为本地化验证","，从而规避了 OCSP 固有的性能瓶颈和隐私风险。",[17,1247,1248,1249],{},"未来，证书吊销的生态系统将不再依赖单一的、中心化的 OCSP 服务器。取而代之的是，一个更加多元、分布式和智能化的新时代正在到来。",[21,1250,1251],{},"OCSP 这一技术可能逐渐被淘汰，但它所试图解决的“证书吊销”这一核心安全问题，将永远是浏览器和网络安全社区关注的重点。",[109,1253,937],{"id":937},[909,1255,1256,1262,1269,1276,1283,1289,1295,1302,1309,1316,1323],{},[912,1257,1258],{},[709,1259,1261],{"href":1098,"rel":1260},[713],"CRLite: Fast, private, and comprehensive certificate revocation checking in Firefox - Mozilla Hacks - the Web developer blog",[912,1263,1264],{},[709,1265,1268],{"href":1266,"rel":1267},"https://www.feistyduck.com/newsletter/issue_121_the_slow_death_of_ocsp",[713],"The Slow Death of OCSP | Feisty Duck",[912,1270,1271],{},[709,1272,1275],{"href":1273,"rel":1274},"https://github.com/mozilla/crlite",[713],"mozilla/crlite: Compact certificate revocation lists for the WebPKI",[912,1277,1278],{},[709,1279,1282],{"href":1280,"rel":1281},"https://letsencrypt.org/2025/08/06/ocsp-service-has-reached-end-of-life",[713],"OCSP Service Has Reached End of Life - Let's Encrypt",[912,1284,1285],{},[709,1286,1288],{"href":994,"rel":1287},[713],"Ending OCSP Support in 2025 - Let's Encrypt",[912,1290,1291],{},[709,1292,1294],{"href":985,"rel":1293},[713],"Intent to End OCSP Service - Let's Encrypt",[912,1296,1297],{},[709,1298,1301],{"href":1299,"rel":1300},"https://www.chromium.org/Home/chromium-security/crlsets/",[713],"CRLSets - The Chromium Projects",[912,1303,1304],{},[709,1305,1308],{"href":1306,"rel":1307},"https://www.pcworld.com/article/474296/google_chrome_will_no_longer_check_for_revoked_ssl_certificates_online-2.html",[713],"Google Chrome Will No Longer Check for Revoked SSL Certificates Online | PCWorld",[912,1310,1311],{},[709,1312,1315],{"href":1313,"rel":1314},"https://www.zdnet.com/article/chrome-does-certificate-revocation-better/",[713],"Chrome does certificate revocation better | ZDNET",[912,1317,1318],{},[709,1319,1322],{"href":1320,"rel":1321},"https://www.hats-land.com/WIP/2025-technical-and-analysis-of-mainstream-clientbrowser-certificate-revocation-verification-mechanism.html",[713],"主流客户端/浏览器证书吊销验证机制技术对与分析 | 帽之岛, Hat's Land",[912,1324,1325],{},[709,1326,1329],{"href":1327,"rel":1328},"https://blog.gslin.org/archives/2025/02/02/12239/ocsp-%E7%9A%84%E6%B7%A1%E5%87%BA/",[713],"OCSP 的淡出… – Gea-Suan Lin's BLOG",{"title":43,"searchDepth":56,"depth":56,"links":1331},[1332,1336,1337,1338,1339],{"id":1016,"depth":56,"text":1017,"children":1333},[1334,1335],{"id":1059,"depth":62,"text":1060},{"id":1070,"depth":62,"text":1071},{"id":1088,"depth":56,"text":1089},{"id":1128,"depth":56,"text":1129},{"id":1210,"depth":56,"text":1211},{"id":937,"depth":56,"text":937},{"title":1341,"date":1342,"path":1343,"tags":1344,"body":1349},"初试 Github Action Self-hosted Runner，想说爱你不容易","2025-09-05 05:54:17","/2025/09/05/first-try-of-github-action-self-hosted-runner",[1345,1346,1347,1348],"Github","Github Action","CI/CD","Experience",{"type":14,"value":1350,"toc":1547},[1351,1365,1368,1379,1382,1385,1388,1393,1396,1401,1404,1409,1414,1417,1422,1425,1430,1434,1437,1464,1467,1474,1479,1496,1515,1522,1526,1537,1544],[17,1352,1353,1354,1359,1360,399],{},"在今年八月的时候，我这边所在的一个 Github Organization 在私有项目开发阶段频繁触发 CI，耗尽了 Github 为免费计划 (Free Plan) 提供的",[709,1355,1358],{"href":1356,"rel":1357},"https://docs.github.com/en/get-started/learning-about-github/githubs-plans#github-free-for-organizations",[713],"每月 2000 分钟 Action 额度","（所有私有仓库共享，公有仓库不计）。大致看了下，CI 流设置得是合理的，那么就要另寻他法看看有没有办法去提供更宽裕的资源，因此也就盯上了文章标题中所提到的 ",[709,1361,1364],{"href":1362,"rel":1363},"https://docs.github.com/en/actions/concepts/runners/self-hosted-runners",[713],"Github Action Self-hosted Runner",[17,1366,1367],{},"对于这个 Self-hosted Runner，与 Github 官方提供的 runner 相比，主要有以下几个优势",[909,1369,1370,1373,1376],{},[912,1371,1372],{},"针对私有仓库，拥有无限制的 Action 运行时长",[912,1374,1375],{},"可以自行搭配更强大的硬件计算能力和内存",[912,1377,1378],{},"可以接入内网环境，方便与内网/局域网设备通信",[109,1380,1381],{"id":1381},"配置安装",[17,1383,1384],{},"由于不清楚需要的网络环境，我这次测试直接选用了一台闲置的香港 vps，4核4G + 80G 硬盘 + 1Gbps 大口子的配置，除了硬盘读写稍微拉胯一些，别的地方可以说是拉满了。",[17,1386,1387],{},"Self-hosted Runner 的配置本身是相当直接和清晰的，照着官方提供的方案基本没什么问题。",[17,1389,1390],{},[689,1391],{"alt":43,"src":1392},"https://static.031130.xyz/uploads/2025/09/05/7c0475cdb1aa9.webp",[17,1394,1395],{},"三个主流平台都有，如果好好加以利用，应该可以涵盖包括 iPhone 应用打包等一系列的需求。",[17,1397,1398],{},[689,1399],{"alt":43,"src":1400},"https://static.031130.xyz/uploads/2025/09/05/96ff7cb263da1.webp",[17,1402,1403],{},"在观察一下我这边拿到手的 2.328.0 版本的 runner 安装文件压缩包的体积在 220MB 左右，内置了 node20 和 node24 各两个版本的运行环境。",[17,1405,1406],{},[689,1407],{"alt":43,"src":1408},"https://static.031130.xyz/uploads/2025/09/05/f775e3bcd2cdc.webp",[17,1410,1411],{},[689,1412],{"alt":43,"src":1413},"https://static.031130.xyz/uploads/2025/09/05/d0d4fe4611a40.webp",[17,1415,1416],{},"在执行完 config.sh 后，当前目录下就会多出一个 svc.sh，可以帮助利用这东西来调用 systemd 实现进程守护之类的需求。",[17,1418,1419],{},[689,1420],{"alt":43,"src":1421},"https://static.031130.xyz/uploads/2025/09/05/43c6b19038def.webp",[17,1423,1424],{},"再次刷新网页，就可以看到 Self-hosted Runner 处于已经上线的状态了",[17,1426,1427],{},[689,1428],{"alt":43,"src":1429},"https://static.031130.xyz/uploads/2025/09/05/6dad15beff900.webp",[109,1431,1433],{"id":1432},"指定-action-采用自己的-runner","指定 Action 采用自己的 Runner",[17,1435,1436],{},"这一步很简单，只需在原 Action 的 yml 文件中改变 runs-on 字段即可",[38,1438,1442],{"className":1439,"code":1440,"language":1441,"meta":43,"style":43},"language-diff shiki shiki-themes github-light github-dark","jobs:\n  run:\n+    runs-on: self-hosted\n-    runs-on: ubuntu-latest\n","diff",[30,1443,1444,1449,1454,1459],{"__ignoreMap":43},[47,1445,1446],{"class":49,"line":50},[47,1447,1448],{},"jobs:\n",[47,1450,1451],{"class":49,"line":56},[47,1452,1453],{},"  run:\n",[47,1455,1456],{"class":49,"line":62},[47,1457,1458],{},"+    runs-on: self-hosted\n",[47,1460,1461],{"class":49,"line":68},[47,1462,1463],{},"-    runs-on: ubuntu-latest\n",[109,1465,1466],{"id":1466},"实测",[17,1468,1469,1470,1473],{},"当我满心欢喜地将 CI 流程从 Github 官方的 runner 切换到自托管的 runner 后，问题很快就浮现了，而这也正是我“爱不起来”的主要原因。问题集中体现在我习以为常的 ",[30,1471,1472],{},"setup-python"," 这一由 Github 官方维护的 Github Action Flow 中，提示 3.12 版本没找到。",[17,1475,1476],{},[689,1477],{"alt":43,"src":1478},"https://static.031130.xyz/uploads/2025/09/05/1c93947170a85.webp",[17,1480,1481,1482,1485,1486,1489,1490,1495],{},"在 Github 官方提供的虚拟环境中，这些 Action 会为我们准备好指定版本的开发环境。例如，",[30,1483,1484],{},"uses: actions/setup-python"," 加上 ",[30,1487,1488],{},"with: python-version: '3.12'"," 就会自动在环境中安装并配置好 Python 3.12.x。我对此已经习以为常，认为这是一个“开箱即用”的功能。但在 Self-hosted Runner 上，情况略有些不同。setup-python 在",[709,1491,1494],{"href":1492,"rel":1493},"https://github.com/actions/setup-python/blob/main/docs/advanced-usage.md#using-setup-python-with-a-self-hosted-runner",[713],"文档","中指出",[1497,1498,1499],"blockquote",{},[17,1500,1501,1502,1507,1508,1511,1512,1514],{},"Python distributions are only available for the same ",[709,1503,1506],{"href":1504,"rel":1505},"https://github.com/actions/runner-images#available-images",[713],"environments"," that GitHub Actions hosted environments are available for. If you are using an unsupported version of Ubuntu such as ",[30,1509,1510],{},"19.04"," or another Linux distribution such as Fedora, ",[30,1513,1472],{}," may not work.",[17,1516,1517,1518,1521],{},"setup-python 这个 Action ",[21,1519,1520],{},"只支持 Github Action 所采用的同款操作系统","，而我 VPS 的 Debian 不受支持，因此有这个误报，同时也给我的 Debian 判了死刑。",[109,1523,1525],{"id":1524},"症结所在对-self-hosted-runner-的误解","症结所在：对 Self-hosted Runner 的误解",[17,1527,1528,1529,1532,1533,1536],{},"我潜意识里认为，Self-hosted Runner 仅仅是将计算成本从 Github 服务器转移到了本地，而 ",[30,1530,1531],{},"actions/setup-python"," 这种官方标准动作，理应会像 Github-hosted Runner 中那样，优雅地为我下载、安装、并配置好我需要的一切。然而，",[21,1534,1535],{},"Self-hosted  Runner 的本质只是从 Github 接收任务，并在当前的操作系统环境中执行指令","，并不保证和 Github 官方提供的 Runner 的运行环境一致。",[17,1538,1539,1540,1543],{},"Self-hosted Runner 不是一个开箱即用的“服务”，而是",[21,1541,1542],{},"一个需要你亲自管理的“基础设施”","。你需要负责服务器的安装、配置、安全更新、依赖管理、磁盘清理等一系列运维工作。它更适合那些对 CI/CD 有更高阶需求的团队或个人：比如 CI/CD 消费大户、需要特定硬件（如 ARM、GPU）进行构建的团队、或者 CI 流程深度依赖内部网络资源的企业。对于像我这样只是愿意拿出更多的本地计算资源来获取更多 Action 运行时长的普通开发者而言，它带来的运维心智负担，似乎是有一点重了。",[955,1545,1546],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":43,"searchDepth":56,"depth":56,"links":1548},[1549,1550,1551,1552],{"id":1381,"depth":56,"text":1381},{"id":1432,"depth":56,"text":1433},{"id":1466,"depth":56,"text":1466},{"id":1524,"depth":56,"text":1525},{"title":1554,"date":1555,"path":1556,"tags":1557,"body":1564},"DNS 解析时长毁了我精心设计的图床网络架构","2025-08-11 00:06:40","/2025/08/11/dns-resolve-time-destroyed-my-optimization-for-pic-cdn",[1558,1559,1560,1561,1562,1563],"CDN","图床","DNS","Network","Cloudflare","Dnspod",{"type":14,"value":1565,"toc":1958},[1566,1573,1578,1584,1594,1599,1688,1703,1708,1711,1783,1788,1791,1796,1819,1824,1835],[17,1567,1568,1569,1572],{},"去年夏天，我兴致勃勃地写了好几篇博文，详细讲述了我如何搭建博客图床。核心目标很明确：",[21,1570,1571],{},"分地区解析 DNS","，让国内外的访客都能嗖嗖地加载图片，体验拉满。想法嘛，绝对是走在技术前沿的，堪称完美！然而……现实它总是喜欢给你来点小惊喜，对吧？",[17,1574,1575],{},[689,1576],{"alt":43,"src":1577},"https://static.031130.xyz/uploads/2025/08/11/26306b2a483ba.webp",[17,1579,1580,1583],{},[21,1581,1582],{},"955 毫秒！"," 看到这个 DNS  解析时长的时候，我差点把刚喝下去的霸王茶姬喷在屏幕上。这简直就是一个隐形刺客，在我精心设计的图床网络架构背后，悄咪咪地给了致命一击。想象一下，访客满怀期待地点开你的博客，结果光是为了搞清楚图片服务器在哪，就要等上差不多一秒钟？这体验优化了个寂寞啊！",[17,1585,1586,1587,1590,1591,399],{},"为啥之前没发现？这得“感谢”",[21,1588,1589],{},"DNS 缓存","这位老好人。它勤勤恳恳地帮后来的访客记住了答案，让我的本地测试和复访测试都一片祥和。直到最近，有群友向我反馈了首次访问时图片的加载速度过慢，我才如梦初醒。再结合最近为了秋招准备的八股文中里面关于 DNS 解析那套繁琐的流程（递归查询、权威查询、根域名、顶级域名……查个地址堪比查户口本），我瞬间锁定了罪魁祸首：",[21,1592,1593],{},"首次访问时的 DNS 解析延迟",[17,1595,1596],{},[21,1597,1598],{},"来，复盘一下我那“曲折离奇”的 DNS 寻址之旅（访客视角）：",[1103,1600,1601,1610,1623,1640,1652,1668,1683],{},[912,1602,1603],{},[21,1604,1605,1606,1609],{},"访客想访问 ",[30,1607,1608],{},"static.031130.xyz"," 的图片。",[912,1611,1612,1619,1620,1622],{},[21,1613,1614,1615,1618],{},"查 ",[30,1616,1617],{},"031130.xyz"," 的权威 DNS："," 问了一圈，发现权威服务器原来在 ",[21,1621,1562],{}," (国外)。",[912,1624,1625,1628,1629,1631,1632,1635,1636,1639],{},[21,1626,1627],{},"Cloudflare 权威服务器回复："," “哦，",[30,1630,1608],{}," 啊？它是个马甲 (",[30,1633,1634],{},"CNAME",")，真身是 ",[30,1637,1638],{},"cdn-cname.zhul.in","，你去找它吧！”",[912,1641,1642,1647,1648,1651],{},[21,1643,1614,1644,1618],{},[30,1645,1646],{},"zhul.in"," 这次权威服务器在 ",[21,1649,1650],{},"DNSPod"," (国内)。",[912,1653,1654,1657,1658,1660,1661,1663,1664,1667],{},[21,1655,1656],{},"DNSPod 权威服务器回复 (针对国内用户)："," “",[30,1659,1638],{}," 也是个马甲 (",[30,1662,1634],{},")，它实际是 ",[30,1665,1666],{},"small-storage-cdn.b0.aicdn.com","，接着找！”",[912,1669,1670,1675,1676,1678,1679,1682],{},[21,1671,1614,1672,1674],{},[30,1673,1666],{},"："," 最终，它可能还会再 ",[30,1677,1634],{}," 到类似 ",[30,1680,1681],{},"nm.aicdn.com"," 这样的 CDN 节点主机名。",[912,1684,1685],{},[21,1686,1687],{},"最终获得 IP 地址，开始连接 CDN 节点下载图片。",[17,1689,1690,1691,1694,1695,1698,1699,1702],{},"发现问题没？",[21,1692,1693],{},"关键的第一步和第二步，权威 DNS 查询指向了国外的 Cloudflare！"," 对于国内用户，虽然最终解析到的 CDN 节点 (",[30,1696,1697],{},"small-storage-cdn.b0.aicdn.com/nm.aicdn.com",") 是国内的、速度飞快，但光是",[21,1700,1701],{},"前两步跨越重洋的 DNS 查询","，就足够让首次访问的用户体验跌入谷底。那个 955ms 的解析时长，基本就是花在跟国外 DNS 服务器“跨国聊天”上了。",[17,1704,1705],{},[21,1706,1707],{},"优化方案：三管齐下，围剿 DNS 延迟",[17,1709,1710],{},"既然找到了病根，就得下猛药：",[1103,1712,1713,1731,1743],{},[912,1714,1715,1722,1723,1726,1727,1730],{},[21,1716,1717,1718,1721],{},"DNS 预取 (",[30,1719,1720],{},"dns-prefetch","):"," 在博客的 HTML ",[30,1724,1725],{},"\u003Chead>"," 里，早早地加上 ",[30,1728,1729],{},"\u003Clink rel=\"dns-prefetch\" href=\"//static.031130.xyz\">","。这相当于浏览器在渲染页面时，就悄悄开始解析图床域名了，等真需要加载图片时，DNS 结果可能已经准备好了，神不知鬼不觉。当然也可以使用 preconnect 等等更激进的策略，但本文着重讲 DNS 解析，因此不做拓展。",[912,1732,1733,1736,1737,1739,1740,1742],{},[21,1734,1735],{},"延长 DNS 记录的 TTL (生存时间)："," 把 ",[30,1738,1608],{}," 这个 ",[30,1741,1634],{}," 记录的 TTL 值调大。以前都设置得较短，方便快速切换。现在为了缓存，适当延长（比如几小时甚至一天）。这样，一旦有用户解析过，本地 DNS 服务器就能记住更久，后续用户（包括同一用户再次访问）就能直接从缓存拿到结果，省掉跨国查询。",[912,1744,1745,1748,1749,1751,1752,1755,1756,1759,1760],{},[21,1746,1747],{},"釜底抽薪：迁移权威 DNS！"," 这是最核心的一步。直接把 ",[30,1750,1617],{}," 域名的",[21,1753,1754],{},"权威 DNS 服务器","，从 Cloudflare ",[21,1757,1758],{},"搬回国内 DNSPod","。这样一来：\n",[909,1761,1762,1768,1780],{},[912,1763,1764,1765,1767],{},"访客的递归 DNS 服务器查询 ",[30,1766,1617],{}," 的权威服务器时，直接找到的就是国内的 DNSPod，响应飞快。",[912,1769,1770,1771,1773,1774,1776,1777,1779],{},"DNSPod 直接告诉递归服务器 ",[30,1772,1608],{}," -> ",[30,1775,1666],{}," 完全在国内完成，丝般顺滑，不需要 ",[30,1778,1638],{}," 当分区域解析的工具人",[912,1781,1782],{},"整个 DNS 解析链路都在国内高速完成，首次访问的 955ms 噩梦彻底拜拜。",[17,1784,1785],{},[21,1786,1787],{},"效果如何？",[17,1789,1790],{},"受限于 DNS 缓存带来的测试困难，最终的效果确实很难在短时间内测试出来。但迁移权威 DNS 到 DNSPod + 调整 TTL +  加上预取之后，再测试首次访问的 DNS 解析时间总算是降到了可接受的程度，这才是 CDN  优化该有的样子！",[17,1792,1793],{},[21,1794,1795],{},"教训总结：",[909,1797,1798,1804,1813],{},[912,1799,1800,1803],{},[21,1801,1802],{},"别让 DNS 成为性能短板！"," 尤其是在涉及多地优化时，权威 DNS 的地理位置对首次访问延迟至关重要。能用国内的权威，就别用国外的。",[912,1805,1806,1809,1810,1812],{},[21,1807,1808],{},"缓存是好东西，但首次访问是软肋。"," 善用 ",[30,1811,1720],{}," 和合理设置 TTL 能有效缓解。",[912,1814,1815,1818],{},[21,1816,1817],{},"监控和用户反馈是金。"," 自己的测试环境往往有缓存“美化”，真实世界的首次访问体验要靠更细致的监控和用户的火眼金睛（感谢反馈的朋友！）。",[17,1820,1821],{},[21,1822,1823],{},"!!! 超级重要补充：警惕 CNAME 拉平 !!!",[17,1825,1826,1827,1834],{},"最后，必须给各位提个醒！如果你和我一样，需要依赖分地区解析来让访客访问到最近的 CDN 节点（比如让国内走国内CDN，国外走Cloudflare），那么千万要",[21,1828,1829,1830,1833],{},"避开 ",[30,1831,1832],{},"CNAME Flattening"," (CNAME 拉平) 这个“优化”方案","！",[909,1836,1837,1870,1882,1917],{},[912,1838,1839,1842,1843,1845,1846,1773,1849,1852,1853,1855,1856,1859,1860,1863,1864,1867,1868,399],{},[21,1840,1841],{},"CNAME 拉平是什么？"," 简单说，就是权威 DNS 服务器（比如 Cloudflare）看到你设置了一个 ",[30,1844,1634],{}," 记录（比如 ",[30,1847,1848],{},"static.example.com",[30,1850,1851],{},"cdn.cname.target.com","），它主动帮你去找 ",[30,1854,1851],{}," 的最终 ",[30,1857,1858],{},"A","/",[30,1861,1862],{},"AAAA"," 记录 (IP地址)，然后把 ",[21,1865,1866],{},"最终的 IP 地址"," 直接返回给查询者，而不是返回 ",[30,1869,1634],{},[912,1871,1872,1875,1876,1674,1879],{},[21,1873,1874],{},"听起来很美好？它确实能减少 CNAME 链的长度！"," 但它有个",[21,1877,1878],{},"致命缺点",[21,1880,1881],{},"权威 DNS 服务器在拉平解析时，会丢掉分地区解析的上下文！",[912,1883,1884,1887,1888,1891,1892,1895,1896,1899,1900,1902,1903,1905,1906,1908,1909,1912,1913,1916],{},[21,1885,1886],{},"为什么失效？"," 分地区解析 (",[30,1889,1890],{},"DNS View"," 或 ",[30,1893,1894],{},"GeoDNS",") 的功能是",[21,1897,1898],{},"在权威 DNS 服务器层面实现的","。当权威服务器执行 ",[30,1901,1634],{}," 拉平时，它是在它自己所在的位置去查询 ",[30,1904,1851],{}," 的 IP。比如你的权威 DNS 在 Cloudflare (美国节点)，它拉平查询时，拿到的 ",[30,1907,1851],{}," 的 IP ",[21,1910,1911],{},"大概率是给美国用户用的最优 IP","。然后它把这个 IP ",[21,1914,1915],{},"返回给了所有地区的查询者","，包括中国用户！你精心配置的让中国用户解析到国内 CDN IP 的策略就完全失效了！",[912,1918,1919,1922,1923,1929,1930,1933,1934,1936,1937,321,1940,1943,1944,1946,1947,1949,1950,1773,1952,1954,1955,1957],{},[21,1920,1921],{},"结论："," 如果你需要 ",[21,1924,1925,1926,1928],{},"分地区解析 (",[30,1927,1894],{},")"," 功能，",[21,1931,1932],{},"绝对不要","在你希望应用分地区解析的域名上启用 ",[30,1935,1832],{}," (或 ",[30,1938,1939],{},"ALIAS",[30,1941,1942],{},"ANAME"," 等实现类似拉平效果的功能)。老老实实用 ",[30,1945,1634],{}," 指向另一个支持 ",[30,1948,1894],{}," 的域名（就像我初始方案里 ",[30,1951,1608],{},[30,1953,1638],{},"，而 ",[30,1956,1646],{}," 在 DNSPod 上做分地区解析），才能保证你的分流策略正确执行。",{"title":43,"searchDepth":56,"depth":56,"links":1959},[],{"title":1961,"date":1962,"path":1963,"tags":1964,"body":1970},"Vue Markdown 渲染优化实战(下)：告别 DOM 操作，拥抱 AST 与函数式渲染","2025-07-13 00:01:35","/2025/07/13/vue-markdown-render-improvement-2",[1965,1966,1967,12,1968,1969],"Vue.js","Markdown","AST","Web","unified",{"type":14,"value":1971,"toc":3622},[1972,1980,1995,1998,2001,2004,2014,2024,2028,2037,2054,2064,2067,2082,2086,2107,2110,2114,2124,2154,2158,2161,2182,2185,2331,2334,2586,2590,2597,2609,2612,3072,3076,3083,3356,3359,3469,3473,3476,3582,3586,3589,3613,3616,3619],[109,1973,1975,1976,1979],{"id":1974},"上回回顾当-morphdom-遇上-vue","上回回顾：当 ",[30,1977,1978],{},"morphdom"," 遇上 Vue",[17,1981,1982,1983,1987,1988,1991,1992,1994],{},"在",[709,1984,1986],{"href":1985},"/2025/07/12/vue-markdown-render-improvement-1/","上一篇文章","中，我们经历了一场 Markdown 渲染的性能优化之旅。从最原始的 ",[30,1989,1990],{},"v-html"," 全量刷新，到按块更新，最终我们请出了 ",[30,1993,1978],{}," 这个“终极武器”。它通过直接比对和操作真实 DOM，以最小的代价更新视图，完美解决了实时渲染中的性能瓶颈和交互状态丢失问题。",[17,1996,1997],{},"然而，一个根本性问题始终存在：在 Vue 的地盘里，绕过 Vue 的虚拟 DOM (Virtual DOM) 和 Diff 算法，直接用一个第三方库去“动刀”真实 DOM，总感觉有些“旁门左道”。这就像在一个精密的自动化工厂里，引入了一个老师傅拿着锤子和扳手进行手动修补。虽然活干得漂亮，但总觉得破坏了原有的工作流，不够“Vue”。",[17,1999,2000],{},"那么，有没有一种更优雅、更“原生”的方式，让我们既能享受精准更新的快感，又能完全融入 Vue 的生态体系呢？",[17,2002,2003],{},"带着这个问题，我询问了前端群里的伙伴们。",[1497,2005,2006],{},[17,2007,2008,2009],{},"如果就要做一个渲染器，你这个思路不是最佳实践。每次更新时，你都生成全量的虚拟 HTML，然后再对 HTML 做减法来优化性能。然而，每次更新的增量部分是明确的，为什么不直接用这部分增量去做加法？增量部分通过 markdown-it 的库无法直接获取，但更好的做法是在这一步进行改造：先解析 Markdown 的结构，再利用 Vue 的动态渲染能力生成 DOM。这样，DOM 的复用就可以借助 Vue 自身的能力来实现。—— ",[709,2010,2013],{"href":2011,"rel":2012},"https://site.j10c.cc/",[713],"j10c",[1497,2015,2016],{},[17,2017,2018,2019],{},"可以用 unified 结合 remark-parse 插件，将 markdown 字符串解析为 ast，然后根据 ast 使用 render func 进行渲染即可。—— bii & ",[709,2020,2023],{"href":2021,"rel":2022},"https://github.com/nekomeowww",[713],"nekomeowww",[109,2025,2027],{"id":2026},"新思路从字符串转换到结构化渲染","新思路：从“字符串转换”到“结构化渲染”",[17,2029,2030,2031,2033,2034,2036],{},"我们之前的方案，无论是 ",[30,2032,1990],{}," 还是 ",[30,2035,1978],{},"，其核心思路都是：",[17,2038,2039,1773,2042,1773,2045,1773,2048,1773,2051],{},[30,2040,2041],{},"Markdown 字符串",[30,2043,2044],{},"markdown-it",[30,2046,2047],{},"HTML 字符串",[30,2049,2050],{},"浏览器/morphdom",[30,2052,2053],{},"DOM",[17,2055,2056,2057,2059,2060,2063],{},"这条链路的问题在于，从 ",[30,2058,2047],{}," 这一步开始，我们就丢失了 Markdown 的",[21,2061,2062],{},"原始结构信息","。我们得到的是一堆非结构化的文本，Vue 无法理解其内在逻辑，只能将其囫囵吞下。",[17,2065,2066],{},"而新的思路则是将流程改造为：",[17,2068,2069,1773,2071,1773,2074,1773,2077,1773,2080],{},[30,2070,2041],{},[30,2072,2073],{},"AST (抽象语法树)",[30,2075,2076],{},"Vue VNodes (虚拟节点)",[30,2078,2079],{},"Vue",[30,2081,2053],{},[1057,2083,2085],{"id":2084},"什么是-ast","什么是 AST？",[17,2087,2088,2091,2092,2095,2096,2099,2100,2103,2104,399],{},[21,2089,2090],{},"AST (Abstract Syntax Tree)"," ，即抽象语法树，是源代码或标记语言的结构化表示。它将一长串的文本，解析成一个层级分明的树状对象。对于 Markdown 来说，一个一级标题会变成一个 ",[30,2093,2094],{},"type: 'heading', depth: 1"," 的节点，一个段落会变成一个 ",[30,2097,2098],{},"type: 'paragraph'"," 的节点，而段落里的文字，则是 ",[30,2101,2102],{},"paragraph"," 节点的 ",[30,2105,2106],{},"children",[17,2108,2109],{},"一旦我们将 Markdown 转换成 AST，就相当于拥有了整个文档的“结构图纸”。我们不再是面对一堆模糊的 HTML 字符串，而是面对一个清晰、可编程的 JavaScript 对象。",[1057,2111,2113],{"id":2112},"我们的新工具unified-与-remark","我们的新工具：unified 与 remark",[17,2115,2116,2117,2120,2121,2123],{},"为了实现 ",[30,2118,2119],{},"Markdown -> AST"," 的转换，我们引入 ",[30,2122,1969],{}," 生态。",[909,2125,2126,2135],{},[912,2127,2128,2134],{},[21,2129,2130],{},[709,2131,1969],{"href":2132,"rel":2133},"https://github.com/unifiedjs/unified",[713],": 一个强大的内容处理引擎。你可以把它想象成一条流水线，原始文本是原料，通过添加不同的“插件”来对它进行解析、转换和序列化。",[912,2136,2137,2144,2145,2147,2148,2153],{},[21,2138,2139],{},[709,2140,2143],{"href":2141,"rel":2142},"https://github.com/remarkjs/remark",[713],"remark-parse",": 一个 ",[30,2146,1969],{}," 插件，专门负责将 Markdown 文本解析成 AST（具体来说是 ",[709,2149,2152],{"href":2150,"rel":2151},"https://github.com/syntax-tree/mdast",[713],"mdast"," 格式）。",[109,2155,2157],{"id":2156},"第一步将-markdown-解析为-ast","第一步：将 Markdown 解析为 AST",[17,2159,2160],{},"首先，我们需要安装相关依赖：",[38,2162,2166],{"className":2163,"code":2164,"language":2165,"meta":43,"style":43},"language-bash shiki shiki-themes github-light github-dark","npm install unified remark-parse\n","bash",[30,2167,2168],{"__ignoreMap":43},[47,2169,2170,2173,2176,2179],{"class":49,"line":50},[47,2171,2172],{"class":145},"npm",[47,2174,2175],{"class":186}," install",[47,2177,2178],{"class":186}," unified",[47,2180,2181],{"class":186}," remark-parse\n",[17,2183,2184],{},"然后，我们可以轻松地将 Markdown 字符串转换为 AST：",[38,2186,2190],{"className":2187,"code":2188,"language":2189,"meta":43,"style":43},"language-javascript shiki shiki-themes github-light github-dark","import { unified } from 'unified'\nimport remarkParse from 'remark-parse'\n\nconst markdownContent = '# Hello, AST!\\n\\nThis is a paragraph.'\n\n// 创建一个处理器实例\nconst processor = unified().use(remarkParse)\n\n// 解析 Markdown 内容\nconst ast = processor.parse(markdownContent)\n\nconsole.log(JSON.stringify(ast, null, 2))\n","javascript",[30,2191,2192,2206,2218,2222,2240,2244,2249,2269,2273,2278,2296,2300],{"__ignoreMap":43},[47,2193,2194,2197,2200,2203],{"class":49,"line":50},[47,2195,2196],{"class":134},"import",[47,2198,2199],{"class":149}," { unified } ",[47,2201,2202],{"class":134},"from",[47,2204,2205],{"class":186}," 'unified'\n",[47,2207,2208,2210,2213,2215],{"class":49,"line":56},[47,2209,2196],{"class":134},[47,2211,2212],{"class":149}," remarkParse ",[47,2214,2202],{"class":134},[47,2216,2217],{"class":186}," 'remark-parse'\n",[47,2219,2220],{"class":49,"line":62},[47,2221,165],{"emptyLinePlaceholder":164},[47,2223,2224,2226,2229,2231,2234,2237],{"class":49,"line":68},[47,2225,135],{"class":134},[47,2227,2228],{"class":138}," markdownContent",[47,2230,142],{"class":134},[47,2232,2233],{"class":186}," '# Hello, AST!",[47,2235,2236],{"class":138},"\\n\\n",[47,2238,2239],{"class":186},"This is a paragraph.'\n",[47,2241,2242],{"class":49,"line":74},[47,2243,165],{"emptyLinePlaceholder":164},[47,2245,2246],{"class":49,"line":80},[47,2247,2248],{"class":203},"// 创建一个处理器实例\n",[47,2250,2251,2253,2256,2258,2260,2263,2266],{"class":49,"line":86},[47,2252,135],{"class":134},[47,2254,2255],{"class":138}," processor",[47,2257,142],{"class":134},[47,2259,2178],{"class":145},[47,2261,2262],{"class":149},"().",[47,2264,2265],{"class":145},"use",[47,2267,2268],{"class":149},"(remarkParse)\n",[47,2270,2271],{"class":49,"line":92},[47,2272,165],{"emptyLinePlaceholder":164},[47,2274,2275],{"class":49,"line":98},[47,2276,2277],{"class":203},"// 解析 Markdown 内容\n",[47,2279,2280,2282,2285,2287,2290,2293],{"class":49,"line":555},[47,2281,135],{"class":134},[47,2283,2284],{"class":138}," ast",[47,2286,142],{"class":134},[47,2288,2289],{"class":149}," processor.",[47,2291,2292],{"class":145},"parse",[47,2294,2295],{"class":149},"(markdownContent)\n",[47,2297,2298],{"class":49,"line":560},[47,2299,165],{"emptyLinePlaceholder":164},[47,2301,2302,2305,2308,2310,2313,2315,2318,2321,2324,2326,2329],{"class":49,"line":582},[47,2303,2304],{"class":149},"console.",[47,2306,2307],{"class":145},"log",[47,2309,183],{"class":149},[47,2311,2312],{"class":138},"JSON",[47,2314,455],{"class":149},[47,2316,2317],{"class":145},"stringify",[47,2319,2320],{"class":149},"(ast, ",[47,2322,2323],{"class":138},"null",[47,2325,321],{"class":149},[47,2327,2328],{"class":138},"2",[47,2330,641],{"class":149},[17,2332,2333],{},"运行以上代码，我们将得到一个如下所示的 JSON 对象，这就是我们梦寐以求的 AST：",[38,2335,2339],{"className":2336,"code":2337,"language":2338,"meta":43,"style":43},"language-json shiki shiki-themes github-light github-dark","{\n  \"type\": \"root\",\n  \"children\": [\n    {\n      \"type\": \"heading\",\n      \"depth\": 1,\n      \"children\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"Hello, AST!\",\n          \"position\": { ... }\n        }\n      ],\n      \"position\": { ... }\n    },\n    {\n      \"type\": \"paragraph\",\n      \"children\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"This is a paragraph.\",\n          \"position\": { ... }\n        }\n      ],\n      \"position\": { ... }\n    }\n  ],\n  \"position\": { ... }\n}\n","json",[30,2340,2341,2346,2360,2368,2373,2385,2397,2404,2409,2421,2433,2448,2453,2458,2469,2474,2478,2489,2496,2501,2512,2524,2535,2540,2545,2556,2562,2568,2580],{"__ignoreMap":43},[47,2342,2343],{"class":49,"line":50},[47,2344,2345],{"class":149},"{\n",[47,2347,2348,2351,2354,2357],{"class":49,"line":56},[47,2349,2350],{"class":138},"  \"type\"",[47,2352,2353],{"class":149},": ",[47,2355,2356],{"class":186},"\"root\"",[47,2358,2359],{"class":149},",\n",[47,2361,2362,2365],{"class":49,"line":62},[47,2363,2364],{"class":138},"  \"children\"",[47,2366,2367],{"class":149},": [\n",[47,2369,2370],{"class":49,"line":68},[47,2371,2372],{"class":149},"    {\n",[47,2374,2375,2378,2380,2383],{"class":49,"line":74},[47,2376,2377],{"class":138},"      \"type\"",[47,2379,2353],{"class":149},[47,2381,2382],{"class":186},"\"heading\"",[47,2384,2359],{"class":149},[47,2386,2387,2390,2392,2395],{"class":49,"line":80},[47,2388,2389],{"class":138},"      \"depth\"",[47,2391,2353],{"class":149},[47,2393,2394],{"class":138},"1",[47,2396,2359],{"class":149},[47,2398,2399,2402],{"class":49,"line":86},[47,2400,2401],{"class":138},"      \"children\"",[47,2403,2367],{"class":149},[47,2405,2406],{"class":49,"line":92},[47,2407,2408],{"class":149},"        {\n",[47,2410,2411,2414,2416,2419],{"class":49,"line":98},[47,2412,2413],{"class":138},"          \"type\"",[47,2415,2353],{"class":149},[47,2417,2418],{"class":186},"\"text\"",[47,2420,2359],{"class":149},[47,2422,2423,2426,2428,2431],{"class":49,"line":555},[47,2424,2425],{"class":138},"          \"value\"",[47,2427,2353],{"class":149},[47,2429,2430],{"class":186},"\"Hello, AST!\"",[47,2432,2359],{"class":149},[47,2434,2435,2438,2441,2445],{"class":49,"line":560},[47,2436,2437],{"class":138},"          \"position\"",[47,2439,2440],{"class":149},": { ",[47,2442,2444],{"class":2443},"s7hpK","...",[47,2446,2447],{"class":149}," }\n",[47,2449,2450],{"class":49,"line":582},[47,2451,2452],{"class":149},"        }\n",[47,2454,2455],{"class":49,"line":603},[47,2456,2457],{"class":149},"      ],\n",[47,2459,2460,2463,2465,2467],{"class":49,"line":618},[47,2461,2462],{"class":138},"      \"position\"",[47,2464,2440],{"class":149},[47,2466,2444],{"class":2443},[47,2468,2447],{"class":149},[47,2470,2471],{"class":49,"line":644},[47,2472,2473],{"class":149},"    },\n",[47,2475,2476],{"class":49,"line":653},[47,2477,2372],{"class":149},[47,2479,2480,2482,2484,2487],{"class":49,"line":658},[47,2481,2377],{"class":138},[47,2483,2353],{"class":149},[47,2485,2486],{"class":186},"\"paragraph\"",[47,2488,2359],{"class":149},[47,2490,2492,2494],{"class":49,"line":2491},18,[47,2493,2401],{"class":138},[47,2495,2367],{"class":149},[47,2497,2499],{"class":49,"line":2498},19,[47,2500,2408],{"class":149},[47,2502,2504,2506,2508,2510],{"class":49,"line":2503},20,[47,2505,2413],{"class":138},[47,2507,2353],{"class":149},[47,2509,2418],{"class":186},[47,2511,2359],{"class":149},[47,2513,2515,2517,2519,2522],{"class":49,"line":2514},21,[47,2516,2425],{"class":138},[47,2518,2353],{"class":149},[47,2520,2521],{"class":186},"\"This is a paragraph.\"",[47,2523,2359],{"class":149},[47,2525,2527,2529,2531,2533],{"class":49,"line":2526},22,[47,2528,2437],{"class":138},[47,2530,2440],{"class":149},[47,2532,2444],{"class":2443},[47,2534,2447],{"class":149},[47,2536,2538],{"class":49,"line":2537},23,[47,2539,2452],{"class":149},[47,2541,2543],{"class":49,"line":2542},24,[47,2544,2457],{"class":149},[47,2546,2548,2550,2552,2554],{"class":49,"line":2547},25,[47,2549,2462],{"class":138},[47,2551,2440],{"class":149},[47,2553,2444],{"class":2443},[47,2555,2447],{"class":149},[47,2557,2559],{"class":49,"line":2558},26,[47,2560,2561],{"class":149},"    }\n",[47,2563,2565],{"class":49,"line":2564},27,[47,2566,2567],{"class":149},"  ],\n",[47,2569,2571,2574,2576,2578],{"class":49,"line":2570},28,[47,2572,2573],{"class":138},"  \"position\"",[47,2575,2440],{"class":149},[47,2577,2444],{"class":2443},[47,2579,2447],{"class":149},[47,2581,2583],{"class":49,"line":2582},29,[47,2584,2585],{"class":149},"}\n",[109,2587,2589],{"id":2588},"第二步从-ast-到-vue-vnodes","第二步：从 AST 到 Vue VNodes",[17,2591,2592,2593,2596],{},"拿到了 AST，下一步就是将这个“结构图纸”真正地“施工”成用户可见的界面。在 Vue 的世界里，描述 UI 的蓝图就是虚拟节点 (VNode)，而 ",[30,2594,2595],{},"h()"," 函数（即 hyperscript）就是创建 VNode 的画笔。",[17,2598,2599,2600,321,2603,321,2605,2608],{},"我们的任务是编写一个渲染函数，它能够递归地遍历 AST，并为每一种节点类型（",[30,2601,2602],{},"heading",[30,2604,2102],{},[30,2606,2607],{},"text"," 等）生成对应的 VNode。",[17,2610,2611],{},"下面是一个简单的渲染函数实现：",[38,2613,2615],{"className":2187,"code":2614,"language":2189,"meta":43,"style":43},"function renderAst(node) {\n  if (!node) return null\n  switch (node.type) {\n    case 'root':\n      return h('div', {}, node.children.map(renderAst))\n    case 'paragraph':\n      return h('p', {}, node.children.map(renderAst))\n    case 'text':\n      return node.value\n    case 'emphasis':\n      return h('em', {}, node.children.map(renderAst))\n    case 'strong':\n      return h('strong', {}, node.children.map(renderAst))\n    case 'inlineCode':\n      return h('code', {}, node.value)\n    case 'heading':\n      return h('h' + node.depth, {}, node.children.map(renderAst))\n    case 'code':\n      return h('pre', {}, [h('code', {}, node.value)])\n    case 'list':\n      return h(node.ordered ? 'ol' : 'ul', {}, node.children.map(renderAst))\n    case 'listItem':\n      return h('li', {}, node.children.map(renderAst))\n    case 'thematicBreak':\n      return h('hr')\n    case 'blockquote':\n      return h('blockquote', {}, node.children.map(renderAst))\n    case 'link':\n      return h('a', { href: node.url, target: '_blank' }, node.children.map(renderAst))\n    default:\n      // 其它未实现类型\n      return h('span', { }, `[${node.type}]`)\n  }\n}\n",[30,2616,2617,2633,2653,2661,2672,2694,2703,2720,2729,2736,2745,2762,2771,2788,2797,2811,2820,2841,2850,2874,2883,2910,2919,2936,2945,2958,2967,2984,2993,3017,3025,3031,3061,3067],{"__ignoreMap":43},[47,2618,2619,2622,2625,2627,2630],{"class":49,"line":50},[47,2620,2621],{"class":134},"function",[47,2623,2624],{"class":145}," renderAst",[47,2626,183],{"class":149},[47,2628,2629],{"class":596},"node",[47,2631,2632],{"class":149},") {\n",[47,2634,2635,2638,2641,2644,2647,2650],{"class":49,"line":56},[47,2636,2637],{"class":134},"  if",[47,2639,2640],{"class":149}," (",[47,2642,2643],{"class":134},"!",[47,2645,2646],{"class":149},"node) ",[47,2648,2649],{"class":134},"return",[47,2651,2652],{"class":138}," null\n",[47,2654,2655,2658],{"class":49,"line":62},[47,2656,2657],{"class":134},"  switch",[47,2659,2660],{"class":149}," (node.type) {\n",[47,2662,2663,2666,2669],{"class":49,"line":68},[47,2664,2665],{"class":134},"    case",[47,2667,2668],{"class":186}," 'root'",[47,2670,2671],{"class":149},":\n",[47,2673,2674,2677,2680,2682,2685,2688,2691],{"class":49,"line":74},[47,2675,2676],{"class":134},"      return",[47,2678,2679],{"class":145}," h",[47,2681,183],{"class":149},[47,2683,2684],{"class":186},"'div'",[47,2686,2687],{"class":149},", {}, node.children.",[47,2689,2690],{"class":145},"map",[47,2692,2693],{"class":149},"(renderAst))\n",[47,2695,2696,2698,2701],{"class":49,"line":80},[47,2697,2665],{"class":134},[47,2699,2700],{"class":186}," 'paragraph'",[47,2702,2671],{"class":149},[47,2704,2705,2707,2709,2711,2714,2716,2718],{"class":49,"line":86},[47,2706,2676],{"class":134},[47,2708,2679],{"class":145},[47,2710,183],{"class":149},[47,2712,2713],{"class":186},"'p'",[47,2715,2687],{"class":149},[47,2717,2690],{"class":145},[47,2719,2693],{"class":149},[47,2721,2722,2724,2727],{"class":49,"line":92},[47,2723,2665],{"class":134},[47,2725,2726],{"class":186}," 'text'",[47,2728,2671],{"class":149},[47,2730,2731,2733],{"class":49,"line":98},[47,2732,2676],{"class":134},[47,2734,2735],{"class":149}," node.value\n",[47,2737,2738,2740,2743],{"class":49,"line":555},[47,2739,2665],{"class":134},[47,2741,2742],{"class":186}," 'emphasis'",[47,2744,2671],{"class":149},[47,2746,2747,2749,2751,2753,2756,2758,2760],{"class":49,"line":560},[47,2748,2676],{"class":134},[47,2750,2679],{"class":145},[47,2752,183],{"class":149},[47,2754,2755],{"class":186},"'em'",[47,2757,2687],{"class":149},[47,2759,2690],{"class":145},[47,2761,2693],{"class":149},[47,2763,2764,2766,2769],{"class":49,"line":582},[47,2765,2665],{"class":134},[47,2767,2768],{"class":186}," 'strong'",[47,2770,2671],{"class":149},[47,2772,2773,2775,2777,2779,2782,2784,2786],{"class":49,"line":603},[47,2774,2676],{"class":134},[47,2776,2679],{"class":145},[47,2778,183],{"class":149},[47,2780,2781],{"class":186},"'strong'",[47,2783,2687],{"class":149},[47,2785,2690],{"class":145},[47,2787,2693],{"class":149},[47,2789,2790,2792,2795],{"class":49,"line":618},[47,2791,2665],{"class":134},[47,2793,2794],{"class":186}," 'inlineCode'",[47,2796,2671],{"class":149},[47,2798,2799,2801,2803,2805,2808],{"class":49,"line":644},[47,2800,2676],{"class":134},[47,2802,2679],{"class":145},[47,2804,183],{"class":149},[47,2806,2807],{"class":186},"'code'",[47,2809,2810],{"class":149},", {}, node.value)\n",[47,2812,2813,2815,2818],{"class":49,"line":653},[47,2814,2665],{"class":134},[47,2816,2817],{"class":186}," 'heading'",[47,2819,2671],{"class":149},[47,2821,2822,2824,2826,2828,2831,2834,2837,2839],{"class":49,"line":658},[47,2823,2676],{"class":134},[47,2825,2679],{"class":145},[47,2827,183],{"class":149},[47,2829,2830],{"class":186},"'h'",[47,2832,2833],{"class":134}," +",[47,2835,2836],{"class":149}," node.depth, {}, node.children.",[47,2838,2690],{"class":145},[47,2840,2693],{"class":149},[47,2842,2843,2845,2848],{"class":49,"line":2491},[47,2844,2665],{"class":134},[47,2846,2847],{"class":186}," 'code'",[47,2849,2671],{"class":149},[47,2851,2852,2854,2856,2858,2861,2864,2867,2869,2871],{"class":49,"line":2498},[47,2853,2676],{"class":134},[47,2855,2679],{"class":145},[47,2857,183],{"class":149},[47,2859,2860],{"class":186},"'pre'",[47,2862,2863],{"class":149},", {}, [",[47,2865,2866],{"class":145},"h",[47,2868,183],{"class":149},[47,2870,2807],{"class":186},[47,2872,2873],{"class":149},", {}, node.value)])\n",[47,2875,2876,2878,2881],{"class":49,"line":2503},[47,2877,2665],{"class":134},[47,2879,2880],{"class":186}," 'list'",[47,2882,2671],{"class":149},[47,2884,2885,2887,2889,2892,2895,2898,2901,2904,2906,2908],{"class":49,"line":2514},[47,2886,2676],{"class":134},[47,2888,2679],{"class":145},[47,2890,2891],{"class":149},"(node.ordered ",[47,2893,2894],{"class":134},"?",[47,2896,2897],{"class":186}," 'ol'",[47,2899,2900],{"class":134}," :",[47,2902,2903],{"class":186}," 'ul'",[47,2905,2687],{"class":149},[47,2907,2690],{"class":145},[47,2909,2693],{"class":149},[47,2911,2912,2914,2917],{"class":49,"line":2526},[47,2913,2665],{"class":134},[47,2915,2916],{"class":186}," 'listItem'",[47,2918,2671],{"class":149},[47,2920,2921,2923,2925,2927,2930,2932,2934],{"class":49,"line":2537},[47,2922,2676],{"class":134},[47,2924,2679],{"class":145},[47,2926,183],{"class":149},[47,2928,2929],{"class":186},"'li'",[47,2931,2687],{"class":149},[47,2933,2690],{"class":145},[47,2935,2693],{"class":149},[47,2937,2938,2940,2943],{"class":49,"line":2542},[47,2939,2665],{"class":134},[47,2941,2942],{"class":186}," 'thematicBreak'",[47,2944,2671],{"class":149},[47,2946,2947,2949,2951,2953,2956],{"class":49,"line":2547},[47,2948,2676],{"class":134},[47,2950,2679],{"class":145},[47,2952,183],{"class":149},[47,2954,2955],{"class":186},"'hr'",[47,2957,159],{"class":149},[47,2959,2960,2962,2965],{"class":49,"line":2558},[47,2961,2665],{"class":134},[47,2963,2964],{"class":186}," 'blockquote'",[47,2966,2671],{"class":149},[47,2968,2969,2971,2973,2975,2978,2980,2982],{"class":49,"line":2564},[47,2970,2676],{"class":134},[47,2972,2679],{"class":145},[47,2974,183],{"class":149},[47,2976,2977],{"class":186},"'blockquote'",[47,2979,2687],{"class":149},[47,2981,2690],{"class":145},[47,2983,2693],{"class":149},[47,2985,2986,2988,2991],{"class":49,"line":2570},[47,2987,2665],{"class":134},[47,2989,2990],{"class":186}," 'link'",[47,2992,2671],{"class":149},[47,2994,2995,2997,2999,3001,3004,3007,3010,3013,3015],{"class":49,"line":2582},[47,2996,2676],{"class":134},[47,2998,2679],{"class":145},[47,3000,183],{"class":149},[47,3002,3003],{"class":186},"'a'",[47,3005,3006],{"class":149},", { href: node.url, target: ",[47,3008,3009],{"class":186},"'_blank'",[47,3011,3012],{"class":149}," }, node.children.",[47,3014,2690],{"class":145},[47,3016,2693],{"class":149},[47,3018,3020,3023],{"class":49,"line":3019},30,[47,3021,3022],{"class":134},"    default",[47,3024,2671],{"class":149},[47,3026,3028],{"class":49,"line":3027},31,[47,3029,3030],{"class":203},"      // 其它未实现类型\n",[47,3032,3034,3036,3038,3040,3043,3046,3049,3051,3053,3056,3059],{"class":49,"line":3033},32,[47,3035,2676],{"class":134},[47,3037,2679],{"class":145},[47,3039,183],{"class":149},[47,3041,3042],{"class":186},"'span'",[47,3044,3045],{"class":149},", { }, ",[47,3047,3048],{"class":186},"`[${",[47,3050,2629],{"class":149},[47,3052,455],{"class":186},[47,3054,3055],{"class":149},"type",[47,3057,3058],{"class":186},"}]`",[47,3060,159],{"class":149},[47,3062,3064],{"class":49,"line":3063},33,[47,3065,3066],{"class":149},"  }\n",[47,3068,3070],{"class":49,"line":3069},34,[47,3071,2585],{"class":149},[109,3073,3075],{"id":3074},"第三步封装-vue-组件","第三步：封装 Vue 组件",[17,3077,3078,3079,3082],{},"整合上述逻辑，我们可以构建一个 Vue 组件。鉴于直接生成 VNode 的特性，采用函数式组件或显式 ",[30,3080,3081],{},"render"," 函数最为适宜。",[38,3084,3088],{"className":3085,"code":3086,"language":3087,"meta":43,"style":43},"language-vue shiki shiki-themes github-light github-dark","\u003Ctemplate>\n  \u003Ccomponent :is=\"VNodeTree\" />\n\u003C/template>\n\n\u003Cscript setup>\nimport { computed, h, shallowRef, watchEffect } from 'vue'\nimport { unified } from 'unified'\nimport remarkParse from 'remark-parse'\n\nconst props = defineProps({\n  mdText: {\n    type: String,\n    default: ''\n  }\n})\n\nconst ast = shallowRef(null)\nconst parser = unified().use(remarkParse)\n\nwatchEffect(() => {\n  ast.value = parser.parse(props.mdText)\n})\n\n// AST 渲染函数 (同上文 renderAst 函数)\nfunction renderAst(node) { ... }\n\nconst VNodeTree = computed(() => renderAst(ast.value))\n\n\u003C/script>\n","vue",[30,3089,3090,3101,3120,3129,3133,3145,3157,3167,3177,3181,3196,3201,3206,3214,3218,3222,3226,3243,3260,3264,3275,3290,3294,3298,3303,3320,3324,3344,3348],{"__ignoreMap":43},[47,3091,3092,3094,3098],{"class":49,"line":50},[47,3093,546],{"class":149},[47,3095,3097],{"class":3096},"s9eBZ","template",[47,3099,3100],{"class":149},">\n",[47,3102,3103,3106,3109,3112,3114,3117],{"class":49,"line":56},[47,3104,3105],{"class":149},"  \u003C",[47,3107,3108],{"class":3096},"component",[47,3110,3111],{"class":145}," :is",[47,3113,272],{"class":149},[47,3115,3116],{"class":186},"\"VNodeTree\"",[47,3118,3119],{"class":149}," />\n",[47,3121,3122,3125,3127],{"class":49,"line":62},[47,3123,3124],{"class":149},"\u003C/",[47,3126,3097],{"class":3096},[47,3128,3100],{"class":149},[47,3130,3131],{"class":49,"line":68},[47,3132,165],{"emptyLinePlaceholder":164},[47,3134,3135,3137,3140,3143],{"class":49,"line":74},[47,3136,546],{"class":149},[47,3138,3139],{"class":3096},"script",[47,3141,3142],{"class":145}," setup",[47,3144,3100],{"class":149},[47,3146,3147,3149,3152,3154],{"class":49,"line":80},[47,3148,2196],{"class":134},[47,3150,3151],{"class":149}," { computed, h, shallowRef, watchEffect } ",[47,3153,2202],{"class":134},[47,3155,3156],{"class":186}," 'vue'\n",[47,3158,3159,3161,3163,3165],{"class":49,"line":86},[47,3160,2196],{"class":134},[47,3162,2199],{"class":149},[47,3164,2202],{"class":134},[47,3166,2205],{"class":186},[47,3168,3169,3171,3173,3175],{"class":49,"line":92},[47,3170,2196],{"class":134},[47,3172,2212],{"class":149},[47,3174,2202],{"class":134},[47,3176,2217],{"class":186},[47,3178,3179],{"class":49,"line":98},[47,3180,165],{"emptyLinePlaceholder":164},[47,3182,3183,3185,3188,3190,3193],{"class":49,"line":555},[47,3184,135],{"class":134},[47,3186,3187],{"class":138}," props",[47,3189,142],{"class":134},[47,3191,3192],{"class":145}," defineProps",[47,3194,3195],{"class":149},"({\n",[47,3197,3198],{"class":49,"line":560},[47,3199,3200],{"class":149},"  mdText: {\n",[47,3202,3203],{"class":49,"line":582},[47,3204,3205],{"class":149},"    type: String,\n",[47,3207,3208,3211],{"class":49,"line":603},[47,3209,3210],{"class":149},"    default: ",[47,3212,3213],{"class":186},"''\n",[47,3215,3216],{"class":49,"line":618},[47,3217,3066],{"class":149},[47,3219,3220],{"class":49,"line":644},[47,3221,661],{"class":149},[47,3223,3224],{"class":49,"line":653},[47,3225,165],{"emptyLinePlaceholder":164},[47,3227,3228,3230,3232,3234,3237,3239,3241],{"class":49,"line":658},[47,3229,135],{"class":134},[47,3231,2284],{"class":138},[47,3233,142],{"class":134},[47,3235,3236],{"class":145}," shallowRef",[47,3238,183],{"class":149},[47,3240,2323],{"class":138},[47,3242,159],{"class":149},[47,3244,3245,3247,3250,3252,3254,3256,3258],{"class":49,"line":2491},[47,3246,135],{"class":134},[47,3248,3249],{"class":138}," parser",[47,3251,142],{"class":134},[47,3253,2178],{"class":145},[47,3255,2262],{"class":149},[47,3257,2265],{"class":145},[47,3259,2268],{"class":149},[47,3261,3262],{"class":49,"line":2498},[47,3263,165],{"emptyLinePlaceholder":164},[47,3265,3266,3269,3271,3273],{"class":49,"line":2503},[47,3267,3268],{"class":145},"watchEffect",[47,3270,573],{"class":149},[47,3272,576],{"class":134},[47,3274,579],{"class":149},[47,3276,3277,3280,3282,3285,3287],{"class":49,"line":2514},[47,3278,3279],{"class":149},"  ast.value ",[47,3281,272],{"class":134},[47,3283,3284],{"class":149}," parser.",[47,3286,2292],{"class":145},[47,3288,3289],{"class":149},"(props.mdText)\n",[47,3291,3292],{"class":49,"line":2526},[47,3293,661],{"class":149},[47,3295,3296],{"class":49,"line":2537},[47,3297,165],{"emptyLinePlaceholder":164},[47,3299,3300],{"class":49,"line":2542},[47,3301,3302],{"class":203},"// AST 渲染函数 (同上文 renderAst 函数)\n",[47,3304,3305,3307,3309,3311,3313,3316,3318],{"class":49,"line":2547},[47,3306,2621],{"class":134},[47,3308,2624],{"class":145},[47,3310,183],{"class":149},[47,3312,2629],{"class":596},[47,3314,3315],{"class":149},") { ",[47,3317,2444],{"class":134},[47,3319,2447],{"class":149},[47,3321,3322],{"class":49,"line":2558},[47,3323,165],{"emptyLinePlaceholder":164},[47,3325,3326,3328,3331,3333,3335,3337,3339,3341],{"class":49,"line":2564},[47,3327,135],{"class":134},[47,3329,3330],{"class":138}," VNodeTree",[47,3332,142],{"class":134},[47,3334,570],{"class":145},[47,3336,573],{"class":149},[47,3338,576],{"class":134},[47,3340,2624],{"class":145},[47,3342,3343],{"class":149},"(ast.value))\n",[47,3345,3346],{"class":49,"line":2570},[47,3347,165],{"emptyLinePlaceholder":164},[47,3349,3350,3352,3354],{"class":49,"line":2582},[47,3351,3124],{"class":149},[47,3353,3139],{"class":3096},[47,3355,3100],{"class":149},[17,3357,3358],{},"现在就可以像使用普通组件一样使用它了：",[38,3360,3362],{"className":3085,"code":3361,"language":3087,"meta":43,"style":43},"\u003Ctemplate>\n  \u003CMarkdownRenderer :mdText=\"markdownContent\" />\n\u003C/template>\n\n\u003Cscript setup>\nimport { ref } from 'vue'\nimport MarkdownRenderer from './MarkdownRenderer.vue'\n\nconst markdownContent = ref('# Hello Vue\\n\\nThis is rendered via AST!')\n\u003C/script>\n",[30,3363,3364,3372,3389,3397,3401,3411,3422,3434,3438,3461],{"__ignoreMap":43},[47,3365,3366,3368,3370],{"class":49,"line":50},[47,3367,546],{"class":149},[47,3369,3097],{"class":3096},[47,3371,3100],{"class":149},[47,3373,3374,3376,3379,3382,3384,3387],{"class":49,"line":56},[47,3375,3105],{"class":149},[47,3377,3378],{"class":3096},"MarkdownRenderer",[47,3380,3381],{"class":145}," :mdText",[47,3383,272],{"class":149},[47,3385,3386],{"class":186},"\"markdownContent\"",[47,3388,3119],{"class":149},[47,3390,3391,3393,3395],{"class":49,"line":62},[47,3392,3124],{"class":149},[47,3394,3097],{"class":3096},[47,3396,3100],{"class":149},[47,3398,3399],{"class":49,"line":68},[47,3400,165],{"emptyLinePlaceholder":164},[47,3402,3403,3405,3407,3409],{"class":49,"line":74},[47,3404,546],{"class":149},[47,3406,3139],{"class":3096},[47,3408,3142],{"class":145},[47,3410,3100],{"class":149},[47,3412,3413,3415,3418,3420],{"class":49,"line":80},[47,3414,2196],{"class":134},[47,3416,3417],{"class":149}," { ref } ",[47,3419,2202],{"class":134},[47,3421,3156],{"class":186},[47,3423,3424,3426,3429,3431],{"class":49,"line":86},[47,3425,2196],{"class":134},[47,3427,3428],{"class":149}," MarkdownRenderer ",[47,3430,2202],{"class":134},[47,3432,3433],{"class":186}," './MarkdownRenderer.vue'\n",[47,3435,3436],{"class":49,"line":92},[47,3437,165],{"emptyLinePlaceholder":164},[47,3439,3440,3442,3444,3446,3449,3451,3454,3456,3459],{"class":49,"line":98},[47,3441,135],{"class":134},[47,3443,2228],{"class":138},[47,3445,142],{"class":134},[47,3447,3448],{"class":145}," ref",[47,3450,183],{"class":149},[47,3452,3453],{"class":186},"'# Hello Vue",[47,3455,2236],{"class":138},[47,3457,3458],{"class":186},"This is rendered via AST!'",[47,3460,159],{"class":149},[47,3462,3463,3465,3467],{"class":49,"line":555},[47,3464,3124],{"class":149},[47,3466,3139],{"class":3096},[47,3468,3100],{"class":149},[109,3470,3472],{"id":3471},"ast-方案的巨大优势","AST 方案的巨大优势",[17,3474,3475],{},"切换到 AST 赛道后，我们获得了前所未有的超能力：",[1103,3477,3478,3490,3563,3576],{},[912,3479,3480,3483,3484,3486,3487,3489],{},[21,3481,3482],{},"原生集成，性能卓越","：我们不再需要 ",[30,3485,1990],{}," 的暴力刷新，也不再需要 ",[30,3488,1978],{}," 这样的“外援”。所有更新都交由 Vue 自己的 Diff 算法处理，这不仅性能极高，而且完全符合 Vue 的设计哲学，是真正的“自己人”。",[912,3491,3492,3495,3496],{},[21,3493,3494],{},"高度灵活性与可扩展性","：AST 作为可编程的 JavaScript 对象，为定制化处理提供了坚实基础：\n",[909,3497,3498,3520,3542],{},[912,3499,3500,3503,3504,3507,3508,3511,3512,3515,3516,3519],{},[21,3501,3502],{},"元素替换","：可将原生元素（如 ",[30,3505,3506],{},"\u003Ch2>","）无缝替换为自定义 Vue 组件（如 ",[30,3509,3510],{},"\u003CFancyHeading>","），仅在 ",[30,3513,3514],{},"renderAst"," 函数中调整对应 ",[30,3517,3518],{},"case"," 逻辑即可。",[912,3521,3522,3525,3526,3529,3530,3533,3534,3537,3538,3541],{},[21,3523,3524],{},"逻辑注入","：可便捷地为外部链接 ",[30,3527,3528],{},"\u003Ca>"," 添加 ",[30,3531,3532],{},"target=\"_blank\""," 与 ",[30,3535,3536],{},"rel=\"noopener noreferrer\""," 属性，或为图片 ",[30,3539,3540],{},"\u003Cimg>"," 包裹懒加载组件，此类操作在 AST 层面易于实现。",[912,3543,3544,3547,3548,3550,3551,3554,3555,3558,3559,3562],{},[21,3545,3546],{},"生态集成","：充分利用 ",[30,3549,1969],{}," 丰富的插件生态（如 ",[30,3552,3553],{},"remark-gfm"," 支持 GFM 语法，",[30,3556,3557],{},"remark-prism"," 实现代码高亮），仅需在处理器链中引入相应插件（",[30,3560,3561],{},".use(pluginName)","）。",[912,3564,3565,3568,3569,3572,3573,3575],{},[21,3566,3567],{},"关注点分离","：解析逻辑（",[30,3570,3571],{},"remark","）、渲染逻辑（",[30,3574,3514],{},"）和业务逻辑（Vue 组件）被清晰地分离开来，代码结构更清晰，维护性更强。",[912,3577,3578,3581],{},[21,3579,3580],{},"类型安全与可预测性","：相较于操作字符串或原始 HTML，基于结构化 AST 的渲染逻辑更易于进行类型校验与逻辑推理。",[109,3583,3585],{"id":3584},"结论从功能实现到架构优化的演进","结论：从功能实现到架构优化的演进",[17,3587,3588],{},"回顾优化历程：",[909,3590,3591,3596,3602,3607],{},[912,3592,3593,3595],{},[21,3594,1990],{},"：实现简单，但存在性能与安全性隐患。",[912,3597,3598,3601],{},[21,3599,3600],{},"分块更新","：缓解了部分性能问题，但方案存在局限性。",[912,3603,3604,3606],{},[21,3605,1978],{},"：有效提升了性能与用户体验，但与 Vue 核心机制存在隔阂。",[912,3608,3609,3612],{},[21,3610,3611],{},"AST + 函数式渲染","：回归 Vue 原生范式，提供了性能、灵活性、可维护性俱佳的终极解决方案。",[17,3614,3615],{},"通过采用 AST，我们不仅解决了具体的技术挑战，更重要的是实现了思维范式的转变——从面向结果（HTML 字符串）的编程，转向面向过程与结构（AST）的编程。这使我们能够深入内容本质，从而实现对渲染流程的精确控制。",[17,3617,3618],{},"本次从“全量刷新”到“结构化渲染”的优化实践，不仅是一次性能提升的技术过程，更是一次深入理解现代前端工程化思想的系统性探索。最终实现的 Markdown 渲染方案，在性能、功能性与架构优雅性上均达到了较高水准。",[955,3620,3621],{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}html pre.shiki code .s7hpK, html code.shiki .s7hpK{--shiki-default:#B31D28;--shiki-default-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic}html pre.shiki code .s4XuR, html code.shiki .s4XuR{--shiki-default:#E36209;--shiki-dark:#FFAB70}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}",{"title":43,"searchDepth":56,"depth":56,"links":3623},[3624,3626,3630,3631,3632,3633,3634],{"id":1974,"depth":56,"text":3625},"上回回顾：当 morphdom 遇上 Vue",{"id":2026,"depth":56,"text":2027,"children":3627},[3628,3629],{"id":2084,"depth":62,"text":2085},{"id":2112,"depth":62,"text":2113},{"id":2156,"depth":56,"text":2157},{"id":2588,"depth":56,"text":2589},{"id":3074,"depth":56,"text":3075},{"id":3471,"depth":56,"text":3472},{"id":3584,"depth":56,"text":3585},{"title":3636,"date":3637,"path":3638,"tags":3639,"body":3641},"Vue Markdown 渲染优化实战(上)：从暴力刷新、分块更新到 Morphdom 的华丽变身","2025-07-12 20:48:56","/2025/07/12/vue-markdown-render-improvement-1",[1965,1966,12,1968,3640],"HTML",{"type":14,"value":3642,"toc":4862},[3643,3646,3649,3676,3680,3683,3686,3696,3699,3884,3888,3895,3906,3918,3926,3929,4397,4401,4404,4408,4416,4422,4433,4443,4446,4449,4814,4818,4821,4827,4832,4838,4841,4847,4853,4859],[109,3644,3645],{"id":3645},"需求背景",[17,3647,3648],{},"在最近接手的 AI 需求中，需要实现一个类似 ChatGPT 的对话交互界面。其核心流程是：后端通过 SSE（Server-Sent  Events）协议，持续地将 AI 生成的 Markdown 格式文本片段推送到前端。前端负责动态接收并拼接这些 Markdown  片段，最终将拼接完成的 Markdown 文本实时渲染并显示在用户界面上。",[17,3650,3651,3652,3657,3658,3663,3664,3669,3670,3675],{},"Markdown 渲染并不是什么罕见的需求，尤其是在 LLM 相关落地产品满天飞的当下。不同于 React 生态拥有一个 14k+ star 的著名第三方库——",[709,3653,3656],{"href":3654,"rel":3655},"https://github.com/remarkjs/react-markdown",[713],"react-markdown","，Vue 这边似乎暂时还没有一个仍在活跃维护的、star 数量不低（起码得 2k+ 吧？）的 markdown 渲染库。",[709,3659,3662],{"href":3660,"rel":3661},"https://github.com/cloudacy/vue-markdown-render#readme",[713],"cloudacy/vue-markdown-render"," 最后一次发版在一年前，但截止本文写作时间只有 103 个 star；",[709,3665,3668],{"href":3666,"rel":3667},"https://github.com/miaolz123/vue-markdown",[713],"miaolz123/vue-markdown"," 有 2k star，但最后一次 commit 已经是 7 年前了；",[709,3671,3674],{"href":3672,"rel":3673},"https://github.com/zhaoxuhui1122/vue-markdown",[713],"zhaoxuhui1122/vue-markdown"," 更是 archived 状态。",[109,3677,3679],{"id":3678},"第一版方案简单粗暴的-v-html","第一版方案：简单粗暴的 v-html",[17,3681,3682],{},"简单调研了一圈，发现 Vue 生态里确实缺少一个能打的 Markdown 渲染库。既然没有现成的轮子，那咱就自己造一个！",[17,3684,3685],{},"根据大部分文章以及 LLM 的推荐，我们首先采用 markdown-it 这个第三方库将 markdown 转换为 html 字符串，再通过 v-html 传入。",[17,3687,3688,3691,3692,3695],{},[21,3689,3690],{},"PS:"," 我们这里假设 Markdown 内容是可信的（比如由我们自己的 AI 生成）。如果内容来自用户输入，一定要使用 ",[30,3693,3694],{},"DOMPurify"," 这类库来防止 XSS 攻击，避免给网站“开天窗”哦！",[17,3697,3698],{},"示例代码如下：",[38,3700,3702],{"className":3085,"code":3701,"language":3087,"meta":43,"style":43},"\u003Ctemplate>\n  \u003Cdiv v-html=\"renderedHtml\">\u003C/div>\n\u003C/template>\n\n\u003Cscript setup>\nimport { computed, onMounted, ref } from 'vue';\nimport MarkdownIt from 'markdown-it';\n\nconst markdownContent = ref('');\nconst md = new MarkdownIt();\n\nconst renderedHtml = computed(() => md.render(markdownContent.value))\n\nonMounted(() => {\n  // markdownContent.value = await fetch() ...\n})\n\u003C/script>\n",[30,3703,3704,3712,3734,3742,3746,3756,3771,3785,3789,3807,3825,3829,3852,3856,3867,3872,3876],{"__ignoreMap":43},[47,3705,3706,3708,3710],{"class":49,"line":50},[47,3707,546],{"class":149},[47,3709,3097],{"class":3096},[47,3711,3100],{"class":149},[47,3713,3714,3716,3719,3722,3724,3727,3730,3732],{"class":49,"line":56},[47,3715,3105],{"class":149},[47,3717,3718],{"class":3096},"div",[47,3720,3721],{"class":145}," v-html",[47,3723,272],{"class":149},[47,3725,3726],{"class":186},"\"renderedHtml\"",[47,3728,3729],{"class":149},">\u003C/",[47,3731,3718],{"class":3096},[47,3733,3100],{"class":149},[47,3735,3736,3738,3740],{"class":49,"line":62},[47,3737,3124],{"class":149},[47,3739,3097],{"class":3096},[47,3741,3100],{"class":149},[47,3743,3744],{"class":49,"line":68},[47,3745,165],{"emptyLinePlaceholder":164},[47,3747,3748,3750,3752,3754],{"class":49,"line":74},[47,3749,546],{"class":149},[47,3751,3139],{"class":3096},[47,3753,3142],{"class":145},[47,3755,3100],{"class":149},[47,3757,3758,3760,3763,3765,3768],{"class":49,"line":80},[47,3759,2196],{"class":134},[47,3761,3762],{"class":149}," { computed, onMounted, ref } ",[47,3764,2202],{"class":134},[47,3766,3767],{"class":186}," 'vue'",[47,3769,3770],{"class":149},";\n",[47,3772,3773,3775,3778,3780,3783],{"class":49,"line":86},[47,3774,2196],{"class":134},[47,3776,3777],{"class":149}," MarkdownIt ",[47,3779,2202],{"class":134},[47,3781,3782],{"class":186}," 'markdown-it'",[47,3784,3770],{"class":149},[47,3786,3787],{"class":49,"line":92},[47,3788,165],{"emptyLinePlaceholder":164},[47,3790,3791,3793,3795,3797,3799,3801,3804],{"class":49,"line":98},[47,3792,135],{"class":134},[47,3794,2228],{"class":138},[47,3796,142],{"class":134},[47,3798,3448],{"class":145},[47,3800,183],{"class":149},[47,3802,3803],{"class":186},"''",[47,3805,3806],{"class":149},");\n",[47,3808,3809,3811,3814,3816,3819,3822],{"class":49,"line":555},[47,3810,135],{"class":134},[47,3812,3813],{"class":138}," md",[47,3815,142],{"class":134},[47,3817,3818],{"class":134}," new",[47,3820,3821],{"class":145}," MarkdownIt",[47,3823,3824],{"class":149},"();\n",[47,3826,3827],{"class":49,"line":560},[47,3828,165],{"emptyLinePlaceholder":164},[47,3830,3831,3833,3836,3838,3840,3842,3844,3847,3849],{"class":49,"line":582},[47,3832,135],{"class":134},[47,3834,3835],{"class":138}," renderedHtml",[47,3837,142],{"class":134},[47,3839,570],{"class":145},[47,3841,573],{"class":149},[47,3843,576],{"class":134},[47,3845,3846],{"class":149}," md.",[47,3848,3081],{"class":145},[47,3850,3851],{"class":149},"(markdownContent.value))\n",[47,3853,3854],{"class":49,"line":603},[47,3855,165],{"emptyLinePlaceholder":164},[47,3857,3858,3861,3863,3865],{"class":49,"line":618},[47,3859,3860],{"class":145},"onMounted",[47,3862,573],{"class":149},[47,3864,576],{"class":134},[47,3866,579],{"class":149},[47,3868,3869],{"class":49,"line":644},[47,3870,3871],{"class":203},"  // markdownContent.value = await fetch() ...\n",[47,3873,3874],{"class":49,"line":653},[47,3875,661],{"class":149},[47,3877,3878,3880,3882],{"class":49,"line":658},[47,3879,3124],{"class":149},[47,3881,3139],{"class":3096},[47,3883,3100],{"class":149},[109,3885,3887],{"id":3886},"进化版给-markdown-分块更新","进化版：给 Markdown 分块更新",[17,3889,3890,3891,3894],{},"上述方案虽然能实现基础渲染，但在实时更新场景下存在明显缺陷：",[21,3892,3893],{},"每次接收到新的 Markdown 片段，整个文档都会触发全量重渲染","。即使只有最后一行是新增内容，整个文档的 DOM 也会被完全替换。这导致两个核心问题：",[1103,3896,3897,3903],{},[912,3898,3899,3900,3902],{},"**性能顶不住：**Markdown 内容增长时，",[30,3901,2044],{}," 解析和 DOM 重建的开销呈线性上升。",[912,3904,3905],{},"**交互状态丢失：**全量刷新会把用户当前的操作状态冲掉。最明显的就是，如果你选中了某段文字，一刷新，选中状态就没了！",[17,3907,3908,3909,3914,3915,3917],{},"为了解决这两个问题，",[709,3910,3913],{"href":3911,"rel":3912},"https://juejin.cn/post/7480900772386734143",[713],"我们在网上找到了分块渲染的方案"," —— 把 Markdown 按两个连续的换行符 (",[30,3916,2236],{},") 切成一块一块的。这样每次更新，只重新渲染最后一块新的，前面的老块直接复用缓存。好处很明显：",[909,3919,3920,3923],{},[912,3921,3922],{},"用户如果选中了前面块里的文字，下次更新时选中状态不会丢（因为前面的块没动）。",[912,3924,3925],{},"需要重新渲染的 DOM 变少了，性能自然就上来了。",[17,3927,3928],{},"代码调整后像这样：",[38,3930,3932],{"className":3085,"code":3931,"language":3087,"meta":43,"style":43},"\u003Ctemplate>\n  \u003Cdiv>\n    \u003Cdiv\n      v-for=\"(block, idx) in renderedBlocks\"\n      :key=\"idx\"\n      v-html=\"block\"\n      class=\"markdown-block\"\n    >\u003C/div>\n  \u003C/div>\n\u003C/template>\n\n\u003Cscript setup>\nimport { ref, computed, watch } from 'vue'\nimport MarkdownIt from 'markdown-it'\n\nconst markdownContent = ref('')\nconst md = new MarkdownIt()\n\nconst renderedBlocks = ref([])\nconst blockCache = ref([])\n\nwatch(\n  markdownContent,\n  (newContent, oldContent) => {\n    const blocks = newContent.split(/\\n{2,}/)\n    // 只重新渲染最后一个块，其余用缓存\n    // 处理块减少、块增多的场景\n    blockCache.value.length = blocks.length\n    for (let i = 0; i \u003C blocks.length; i++) {\n      // 只渲染最后一个，或新块\n      if (i === blocks.length - 1 || !blockCache.value[i]) {\n        blockCache.value[i] = md.render(blocks[i] || '')\n      }\n      // 其余块直接复用\n    }\n    renderedBlocks.value = blockCache.value.slice()\n  },\n  { immediate: true }\n)\n\nonMounted(() => {\n  // markdownContent.value = await fetch() ...\n})\n\u003C/script>\n",[30,3933,3934,3942,3950,3958,3968,3978,3988,3998,4007,4016,4024,4028,4038,4049,4060,4064,4080,4094,4098,4112,4125,4129,4137,4142,4162,4192,4197,4202,4218,4253,4258,4287,4309,4314,4319,4324,4340,4346,4357,4362,4367,4378,4383,4388],{"__ignoreMap":43},[47,3935,3936,3938,3940],{"class":49,"line":50},[47,3937,546],{"class":149},[47,3939,3097],{"class":3096},[47,3941,3100],{"class":149},[47,3943,3944,3946,3948],{"class":49,"line":56},[47,3945,3105],{"class":149},[47,3947,3718],{"class":3096},[47,3949,3100],{"class":149},[47,3951,3952,3955],{"class":49,"line":62},[47,3953,3954],{"class":149},"    \u003C",[47,3956,3957],{"class":3096},"div\n",[47,3959,3960,3963,3965],{"class":49,"line":68},[47,3961,3962],{"class":145},"      v-for",[47,3964,272],{"class":149},[47,3966,3967],{"class":186},"\"(block, idx) in renderedBlocks\"\n",[47,3969,3970,3973,3975],{"class":49,"line":74},[47,3971,3972],{"class":145},"      :key",[47,3974,272],{"class":149},[47,3976,3977],{"class":186},"\"idx\"\n",[47,3979,3980,3983,3985],{"class":49,"line":80},[47,3981,3982],{"class":145},"      v-html",[47,3984,272],{"class":149},[47,3986,3987],{"class":186},"\"block\"\n",[47,3989,3990,3993,3995],{"class":49,"line":86},[47,3991,3992],{"class":145},"      class",[47,3994,272],{"class":149},[47,3996,3997],{"class":186},"\"markdown-block\"\n",[47,3999,4000,4003,4005],{"class":49,"line":92},[47,4001,4002],{"class":149},"    >\u003C/",[47,4004,3718],{"class":3096},[47,4006,3100],{"class":149},[47,4008,4009,4012,4014],{"class":49,"line":98},[47,4010,4011],{"class":149},"  \u003C/",[47,4013,3718],{"class":3096},[47,4015,3100],{"class":149},[47,4017,4018,4020,4022],{"class":49,"line":555},[47,4019,3124],{"class":149},[47,4021,3097],{"class":3096},[47,4023,3100],{"class":149},[47,4025,4026],{"class":49,"line":560},[47,4027,165],{"emptyLinePlaceholder":164},[47,4029,4030,4032,4034,4036],{"class":49,"line":582},[47,4031,546],{"class":149},[47,4033,3139],{"class":3096},[47,4035,3142],{"class":145},[47,4037,3100],{"class":149},[47,4039,4040,4042,4045,4047],{"class":49,"line":603},[47,4041,2196],{"class":134},[47,4043,4044],{"class":149}," { ref, computed, watch } ",[47,4046,2202],{"class":134},[47,4048,3156],{"class":186},[47,4050,4051,4053,4055,4057],{"class":49,"line":618},[47,4052,2196],{"class":134},[47,4054,3777],{"class":149},[47,4056,2202],{"class":134},[47,4058,4059],{"class":186}," 'markdown-it'\n",[47,4061,4062],{"class":49,"line":644},[47,4063,165],{"emptyLinePlaceholder":164},[47,4065,4066,4068,4070,4072,4074,4076,4078],{"class":49,"line":653},[47,4067,135],{"class":134},[47,4069,2228],{"class":138},[47,4071,142],{"class":134},[47,4073,3448],{"class":145},[47,4075,183],{"class":149},[47,4077,3803],{"class":186},[47,4079,159],{"class":149},[47,4081,4082,4084,4086,4088,4090,4092],{"class":49,"line":658},[47,4083,135],{"class":134},[47,4085,3813],{"class":138},[47,4087,142],{"class":134},[47,4089,3818],{"class":134},[47,4091,3821],{"class":145},[47,4093,214],{"class":149},[47,4095,4096],{"class":49,"line":2491},[47,4097,165],{"emptyLinePlaceholder":164},[47,4099,4100,4102,4105,4107,4109],{"class":49,"line":2498},[47,4101,135],{"class":134},[47,4103,4104],{"class":138}," renderedBlocks",[47,4106,142],{"class":134},[47,4108,3448],{"class":145},[47,4110,4111],{"class":149},"([])\n",[47,4113,4114,4116,4119,4121,4123],{"class":49,"line":2503},[47,4115,135],{"class":134},[47,4117,4118],{"class":138}," blockCache",[47,4120,142],{"class":134},[47,4122,3448],{"class":145},[47,4124,4111],{"class":149},[47,4126,4127],{"class":49,"line":2514},[47,4128,165],{"emptyLinePlaceholder":164},[47,4130,4131,4134],{"class":49,"line":2526},[47,4132,4133],{"class":145},"watch",[47,4135,4136],{"class":149},"(\n",[47,4138,4139],{"class":49,"line":2537},[47,4140,4141],{"class":149},"  markdownContent,\n",[47,4143,4144,4147,4150,4152,4155,4158,4160],{"class":49,"line":2542},[47,4145,4146],{"class":149},"  (",[47,4148,4149],{"class":596},"newContent",[47,4151,321],{"class":149},[47,4153,4154],{"class":596},"oldContent",[47,4156,4157],{"class":149},") ",[47,4159,576],{"class":134},[47,4161,579],{"class":149},[47,4163,4164,4167,4170,4172,4175,4178,4180,4182,4185,4188,4190],{"class":49,"line":2547},[47,4165,4166],{"class":134},"    const",[47,4168,4169],{"class":138}," blocks",[47,4171,142],{"class":134},[47,4173,4174],{"class":149}," newContent.",[47,4176,4177],{"class":145},"split",[47,4179,183],{"class":149},[47,4181,1859],{"class":186},[47,4183,4184],{"class":138},"\\n",[47,4186,4187],{"class":134},"{2,}",[47,4189,1859],{"class":186},[47,4191,159],{"class":149},[47,4193,4194],{"class":49,"line":2558},[47,4195,4196],{"class":203},"    // 只重新渲染最后一个块，其余用缓存\n",[47,4198,4199],{"class":49,"line":2564},[47,4200,4201],{"class":203},"    // 处理块减少、块增多的场景\n",[47,4203,4204,4207,4210,4212,4215],{"class":49,"line":2570},[47,4205,4206],{"class":149},"    blockCache.value.",[47,4208,4209],{"class":138},"length",[47,4211,142],{"class":134},[47,4213,4214],{"class":149}," blocks.",[47,4216,4217],{"class":138},"length\n",[47,4219,4220,4223,4225,4228,4231,4233,4236,4239,4241,4243,4245,4248,4251],{"class":49,"line":2582},[47,4221,4222],{"class":134},"    for",[47,4224,2640],{"class":149},[47,4226,4227],{"class":134},"let",[47,4229,4230],{"class":149}," i ",[47,4232,272],{"class":134},[47,4234,4235],{"class":138}," 0",[47,4237,4238],{"class":149},"; i ",[47,4240,546],{"class":134},[47,4242,4214],{"class":149},[47,4244,4209],{"class":138},[47,4246,4247],{"class":149},"; i",[47,4249,4250],{"class":134},"++",[47,4252,2632],{"class":149},[47,4254,4255],{"class":49,"line":3019},[47,4256,4257],{"class":203},"      // 只渲染最后一个，或新块\n",[47,4259,4260,4263,4266,4268,4270,4272,4275,4278,4281,4284],{"class":49,"line":3027},[47,4261,4262],{"class":134},"      if",[47,4264,4265],{"class":149}," (i ",[47,4267,612],{"class":134},[47,4269,4214],{"class":149},[47,4271,4209],{"class":138},[47,4273,4274],{"class":134}," -",[47,4276,4277],{"class":138}," 1",[47,4279,4280],{"class":134}," ||",[47,4282,4283],{"class":134}," !",[47,4285,4286],{"class":149},"blockCache.value[i]) {\n",[47,4288,4289,4292,4294,4296,4298,4301,4304,4307],{"class":49,"line":3033},[47,4290,4291],{"class":149},"        blockCache.value[i] ",[47,4293,272],{"class":134},[47,4295,3846],{"class":149},[47,4297,3081],{"class":145},[47,4299,4300],{"class":149},"(blocks[i] ",[47,4302,4303],{"class":134},"||",[47,4305,4306],{"class":186}," ''",[47,4308,159],{"class":149},[47,4310,4311],{"class":49,"line":3063},[47,4312,4313],{"class":149},"      }\n",[47,4315,4316],{"class":49,"line":3069},[47,4317,4318],{"class":203},"      // 其余块直接复用\n",[47,4320,4322],{"class":49,"line":4321},35,[47,4323,2561],{"class":149},[47,4325,4327,4330,4332,4335,4338],{"class":49,"line":4326},36,[47,4328,4329],{"class":149},"    renderedBlocks.value ",[47,4331,272],{"class":134},[47,4333,4334],{"class":149}," blockCache.value.",[47,4336,4337],{"class":145},"slice",[47,4339,214],{"class":149},[47,4341,4343],{"class":49,"line":4342},37,[47,4344,4345],{"class":149},"  },\n",[47,4347,4349,4352,4355],{"class":49,"line":4348},38,[47,4350,4351],{"class":149},"  { immediate: ",[47,4353,4354],{"class":138},"true",[47,4356,2447],{"class":149},[47,4358,4360],{"class":49,"line":4359},39,[47,4361,159],{"class":149},[47,4363,4365],{"class":49,"line":4364},40,[47,4366,165],{"emptyLinePlaceholder":164},[47,4368,4370,4372,4374,4376],{"class":49,"line":4369},41,[47,4371,3860],{"class":145},[47,4373,573],{"class":149},[47,4375,576],{"class":134},[47,4377,579],{"class":149},[47,4379,4381],{"class":49,"line":4380},42,[47,4382,3871],{"class":203},[47,4384,4386],{"class":49,"line":4385},43,[47,4387,661],{"class":149},[47,4389,4391,4393,4395],{"class":49,"line":4390},44,[47,4392,3124],{"class":149},[47,4394,3139],{"class":3096},[47,4396,3100],{"class":149},[109,4398,4400],{"id":4399},"终极武器用-morphdom-实现精准更新","终极武器：用 morphdom 实现精准更新",[17,4402,4403],{},"分块渲染虽然解决了大部分问题，但遇到 Markdown 列表就有点力不从心了。因为 Markdown 语法里，列表项之间通常只有一个换行符，整个列表会被当成一个大块。想象一下一个几百项的列表，哪怕只更新最后一项，整个列表块也要全部重来，前面的问题又回来了。",[1057,4405,4407],{"id":4406},"morphdom-是何方神圣","morphdom 是何方神圣？",[17,4409,4410,4412,4413,399],{},[30,4411,1978],{}," 是一个仅 5KB（gzip 后）的 JavaScript 库，核心功能是：",[21,4414,4415],{},"接收两个 DOM 节点（或 HTML 字符串），计算出最小化的 DOM 操作，将第一个节点 “变形” 为第二个节点，而非直接替换",[17,4417,4418,4419,1674],{},"其工作原理类似虚拟 DOM 的 Diff 算法，但",[21,4420,4421],{},"直接操作真实 DOM",[1103,4423,4424,4427,4430],{},[912,4425,4426],{},"对比新旧 DOM 的标签名、属性、文本内容等；",[912,4428,4429],{},"仅对差异部分执行增 / 删 / 改操作（如修改文本、更新属性、移动节点位置）；",[912,4431,4432],{},"未变化的 DOM 节点会被完整保留，包括其事件监听、滚动位置、选中状态等。",[17,4434,4435,4436,4439,4440,4442],{},"Markdown 把列表当整体，但生成的 HTML 里，每个列表项 (",[30,4437,4438],{},"\u003Cli>",") 都是独立的！",[30,4441,1978],{}," 在更新后面的列表项时，能保证前面的列表项纹丝不动，状态自然就保住了。",[17,4444,4445],{},"这不就是我们梦寐以求的效果吗？在 Markdown 实时更新的同时，最大程度留住用户的操作状态，还能省掉一堆不必要的 DOM 操作！",[1057,4447,4448],{"id":4448},"示例代码",[38,4450,4452],{"className":3085,"code":4451,"language":3087,"meta":43,"style":43},"\u003Ctemplate>\n  \u003Cdiv ref=\"markdownContainer\" class=\"markdown-container\">\n    \u003Cdiv id=\"md-root\">\u003C/div>\n  \u003C/div>\n\u003C/template>\n\n\u003Cscript setup>\nimport { nextTick, ref, watch } from 'vue';\nimport MarkdownIt from 'markdown-it';\nimport morphdom from 'morphdom';\n\nconst markdownContent = ref('');\nconst markdownContainer = ref(null);\nconst md = new MarkdownIt();\n    \nconst render = () => {\n  if (!markdownContainer.value.querySelector('#md-root')) return;\n  \n  const newHtml = `\u003Cdiv id=\"md-root\">` + md.render(markdownContent.value) + `\u003C/div>`\n\n  morphdom(markdownContainer.value, newHtml, {\n    childrenOnly: true\n  });\n}\n\nwatch(markdownContent, () => {\n    render()\n});\n    \nonMounted(async () => {\n  // 等待 Dom 被挂载上\n  await nextTick()\n  render()\n})\n\u003C/script>\n\n",[30,4453,4454,4462,4485,4505,4513,4521,4525,4535,4548,4560,4574,4578,4594,4611,4625,4630,4646,4672,4677,4705,4709,4717,4725,4730,4734,4738,4749,4756,4761,4765,4780,4785,4795,4802,4806],{"__ignoreMap":43},[47,4455,4456,4458,4460],{"class":49,"line":50},[47,4457,546],{"class":149},[47,4459,3097],{"class":3096},[47,4461,3100],{"class":149},[47,4463,4464,4466,4468,4470,4472,4475,4478,4480,4483],{"class":49,"line":56},[47,4465,3105],{"class":149},[47,4467,3718],{"class":3096},[47,4469,3448],{"class":145},[47,4471,272],{"class":149},[47,4473,4474],{"class":186},"\"markdownContainer\"",[47,4476,4477],{"class":145}," class",[47,4479,272],{"class":149},[47,4481,4482],{"class":186},"\"markdown-container\"",[47,4484,3100],{"class":149},[47,4486,4487,4489,4491,4494,4496,4499,4501,4503],{"class":49,"line":62},[47,4488,3954],{"class":149},[47,4490,3718],{"class":3096},[47,4492,4493],{"class":145}," id",[47,4495,272],{"class":149},[47,4497,4498],{"class":186},"\"md-root\"",[47,4500,3729],{"class":149},[47,4502,3718],{"class":3096},[47,4504,3100],{"class":149},[47,4506,4507,4509,4511],{"class":49,"line":68},[47,4508,4011],{"class":149},[47,4510,3718],{"class":3096},[47,4512,3100],{"class":149},[47,4514,4515,4517,4519],{"class":49,"line":74},[47,4516,3124],{"class":149},[47,4518,3097],{"class":3096},[47,4520,3100],{"class":149},[47,4522,4523],{"class":49,"line":80},[47,4524,165],{"emptyLinePlaceholder":164},[47,4526,4527,4529,4531,4533],{"class":49,"line":86},[47,4528,546],{"class":149},[47,4530,3139],{"class":3096},[47,4532,3142],{"class":145},[47,4534,3100],{"class":149},[47,4536,4537,4539,4542,4544,4546],{"class":49,"line":92},[47,4538,2196],{"class":134},[47,4540,4541],{"class":149}," { nextTick, ref, watch } ",[47,4543,2202],{"class":134},[47,4545,3767],{"class":186},[47,4547,3770],{"class":149},[47,4549,4550,4552,4554,4556,4558],{"class":49,"line":98},[47,4551,2196],{"class":134},[47,4553,3777],{"class":149},[47,4555,2202],{"class":134},[47,4557,3782],{"class":186},[47,4559,3770],{"class":149},[47,4561,4562,4564,4567,4569,4572],{"class":49,"line":555},[47,4563,2196],{"class":134},[47,4565,4566],{"class":149}," morphdom ",[47,4568,2202],{"class":134},[47,4570,4571],{"class":186}," 'morphdom'",[47,4573,3770],{"class":149},[47,4575,4576],{"class":49,"line":560},[47,4577,165],{"emptyLinePlaceholder":164},[47,4579,4580,4582,4584,4586,4588,4590,4592],{"class":49,"line":582},[47,4581,135],{"class":134},[47,4583,2228],{"class":138},[47,4585,142],{"class":134},[47,4587,3448],{"class":145},[47,4589,183],{"class":149},[47,4591,3803],{"class":186},[47,4593,3806],{"class":149},[47,4595,4596,4598,4601,4603,4605,4607,4609],{"class":49,"line":603},[47,4597,135],{"class":134},[47,4599,4600],{"class":138}," markdownContainer",[47,4602,142],{"class":134},[47,4604,3448],{"class":145},[47,4606,183],{"class":149},[47,4608,2323],{"class":138},[47,4610,3806],{"class":149},[47,4612,4613,4615,4617,4619,4621,4623],{"class":49,"line":618},[47,4614,135],{"class":134},[47,4616,3813],{"class":138},[47,4618,142],{"class":134},[47,4620,3818],{"class":134},[47,4622,3821],{"class":145},[47,4624,3824],{"class":149},[47,4626,4627],{"class":49,"line":644},[47,4628,4629],{"class":149},"    \n",[47,4631,4632,4634,4637,4639,4642,4644],{"class":49,"line":653},[47,4633,135],{"class":134},[47,4635,4636],{"class":145}," render",[47,4638,142],{"class":134},[47,4640,4641],{"class":149}," () ",[47,4643,576],{"class":134},[47,4645,579],{"class":149},[47,4647,4648,4650,4652,4654,4657,4660,4662,4665,4668,4670],{"class":49,"line":658},[47,4649,2637],{"class":134},[47,4651,2640],{"class":149},[47,4653,2643],{"class":134},[47,4655,4656],{"class":149},"markdownContainer.value.",[47,4658,4659],{"class":145},"querySelector",[47,4661,183],{"class":149},[47,4663,4664],{"class":186},"'#md-root'",[47,4666,4667],{"class":149},")) ",[47,4669,2649],{"class":134},[47,4671,3770],{"class":149},[47,4673,4674],{"class":49,"line":2491},[47,4675,4676],{"class":149},"  \n",[47,4678,4679,4682,4685,4687,4690,4692,4694,4696,4699,4702],{"class":49,"line":2498},[47,4680,4681],{"class":134},"  const",[47,4683,4684],{"class":138}," newHtml",[47,4686,142],{"class":134},[47,4688,4689],{"class":186}," `\u003Cdiv id=\"md-root\">`",[47,4691,2833],{"class":134},[47,4693,3846],{"class":149},[47,4695,3081],{"class":145},[47,4697,4698],{"class":149},"(markdownContent.value) ",[47,4700,4701],{"class":134},"+",[47,4703,4704],{"class":186}," `\u003C/div>`\n",[47,4706,4707],{"class":49,"line":2503},[47,4708,165],{"emptyLinePlaceholder":164},[47,4710,4711,4714],{"class":49,"line":2514},[47,4712,4713],{"class":145},"  morphdom",[47,4715,4716],{"class":149},"(markdownContainer.value, newHtml, {\n",[47,4718,4719,4722],{"class":49,"line":2526},[47,4720,4721],{"class":149},"    childrenOnly: ",[47,4723,4724],{"class":138},"true\n",[47,4726,4727],{"class":49,"line":2537},[47,4728,4729],{"class":149},"  });\n",[47,4731,4732],{"class":49,"line":2542},[47,4733,2585],{"class":149},[47,4735,4736],{"class":49,"line":2547},[47,4737,165],{"emptyLinePlaceholder":164},[47,4739,4740,4742,4745,4747],{"class":49,"line":2558},[47,4741,4133],{"class":145},[47,4743,4744],{"class":149},"(markdownContent, () ",[47,4746,576],{"class":134},[47,4748,579],{"class":149},[47,4750,4751,4754],{"class":49,"line":2564},[47,4752,4753],{"class":145},"    render",[47,4755,214],{"class":149},[47,4757,4758],{"class":49,"line":2570},[47,4759,4760],{"class":149},"});\n",[47,4762,4763],{"class":49,"line":2582},[47,4764,4629],{"class":149},[47,4766,4767,4769,4771,4774,4776,4778],{"class":49,"line":3019},[47,4768,3860],{"class":145},[47,4770,183],{"class":149},[47,4772,4773],{"class":134},"async",[47,4775,4641],{"class":149},[47,4777,576],{"class":134},[47,4779,579],{"class":149},[47,4781,4782],{"class":49,"line":3027},[47,4783,4784],{"class":203},"  // 等待 Dom 被挂载上\n",[47,4786,4787,4790,4793],{"class":49,"line":3033},[47,4788,4789],{"class":134},"  await",[47,4791,4792],{"class":145}," nextTick",[47,4794,214],{"class":149},[47,4796,4797,4800],{"class":49,"line":3063},[47,4798,4799],{"class":145},"  render",[47,4801,214],{"class":149},[47,4803,4804],{"class":49,"line":3069},[47,4805,661],{"class":149},[47,4807,4808,4810,4812],{"class":49,"line":4321},[47,4809,3124],{"class":149},[47,4811,3139],{"class":3096},[47,4813,3100],{"class":149},[1057,4815,4817],{"id":4816},"眼见为实demo-对比","眼见为实：Demo 对比",[17,4819,4820],{},"下面这个 iframe 里放了个对比 Demo，展示了不同方案的效果差异。",[17,4822,4823,4826],{},[21,4824,4825],{},"小技巧："," 如果你用的是 Chrome、Edge 这类 Chromium 内核的浏览器，打开开发者工具 (DevTools)，找到“渲染”(Rendering) 标签页，勾选「突出显示重绘区域(Paint flashing)」。这样你就能直观看到每次更新时，哪些部分被重新绘制了——重绘区域越少，性能越好！",[17,4828,4829],{},[689,4830],{"alt":43,"src":4831},"https://static.031130.xyz/uploads/2025/07/12/d5721c40fb076.webp",[4833,4834],"iframe",{"src":4835,"width":4836,"height":4837,"allowFullScreen":164},"https://static.031130.xyz/demo/morphdom-vs-markdown-chunk.html","100%",500,[109,4839,4840],{"id":4840},"阶段性成果",[17,4842,4843,4844,4846],{},"从最开始的“暴力全量刷新”，到“聪明点的分块更新”，再到如今“精准手术刀般的 ",[30,4845,1978],{}," 更新”，我们一步步把那些不必要的渲染开销给砍掉了，最终搞出了一个既快又能留住用户状态的 Markdown 实时渲染方案。",[17,4848,4849,4850,4852],{},"不过，用 ",[30,4851,1978],{}," 这个第三方库来直接操作 Vue 组件里的 DOM，总觉得有点...不够“Vue”？它虽然解决了核心的性能和状态问题，但在 Vue 的世界里这么玩，多少有点旁门左道的意思。",[17,4854,4855,4858],{},[21,4856,4857],{},"下篇预告："," 在下一篇文章里，咱们就来聊聊，在 Vue 的世界里，有没有更优雅、更“原生”的方案来搞定 Markdown 的精准更新？敬请期待！",[955,4860,4861],{},"html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s4XuR, html code.shiki .s4XuR{--shiki-default:#E36209;--shiki-dark:#FFAB70}",{"title":43,"searchDepth":56,"depth":56,"links":4863},[4864,4865,4866,4867,4872],{"id":3645,"depth":56,"text":3645},{"id":3678,"depth":56,"text":3679},{"id":3886,"depth":56,"text":3887},{"id":4399,"depth":56,"text":4400,"children":4868},[4869,4870,4871],{"id":4406,"depth":62,"text":4407},{"id":4448,"depth":62,"text":4448},{"id":4816,"depth":62,"text":4817},{"id":4840,"depth":56,"text":4840},{"title":4874,"date":4875,"path":4876,"tags":4877,"body":4880},"node-sass 迁移至 dart-sass 踩坑实录","2025-07-05 17:57:02","/2025/07/05/node-sass-migration-to-dart-sass",[1968,1965,4878,4879,12],"Sass","CSS",{"type":14,"value":4881,"toc":5726},[4882,4885,4896,4900,4915,4918,4950,4953,4957,4960,4964,4973,4976,4985,5032,5035,5038,5041,5071,5080,5083,5087,5091,5115,5119,5233,5237,5246,5284,5288,5291,5357,5360,5364,5367,5370,5396,5399,5440,5449,5454,5458,5467,5474,5526,5529,5584,5587,5610,5613,5615,5723],[109,4883,4884],{"id":4884},"更新目标",[909,4886,4887,4890,4893],{},[912,4888,4889],{},"node-sass -> sass ( dart-sass )",[912,4891,4892],{},"减少影响面，非必要不更新其他依赖的版本",[912,4894,4895],{},"在前两条基础上，看看能否提升 node.js 的版本",[109,4897,4899],{"id":4898},"抛弃-node-sass-的理由","抛弃 node-sass 的理由",[909,4901,4902,4909,4912],{},[912,4903,4904],{},[709,4905,4908],{"href":4906,"rel":4907},"https://sass-lang.com/blog/libsass-is-deprecated/",[713],"node-sass 已经停止维护，dart-sass 是 sass 官方主推的继任者",[912,4910,4911],{},"node-sass 在 windows 下的安装非常麻烦，npm 安装时需要开发机上同时装有 python2 和 Microsoft Visual C++",[912,4913,4914],{},"在安装 node-sass 时，需要从 Github 拉取资源，在特定网络环境下成功率并不高",[109,4916,4917],{"id":4917},"项目依赖版本现状",[909,4919,4920,4925,4930,4935,4940,4945],{},[912,4921,4922],{},[30,4923,4924],{},"node@^12",[912,4926,4927],{},[30,4928,4929],{},"vue@^2",[912,4931,4932],{},[30,4933,4934],{},"webpack@^3",[912,4936,4937],{},[30,4938,4939],{},"vue-loader@^14",[912,4941,4942],{},[30,4943,4944],{},"sass-loader@^7.0.3",[912,4946,4947],{},[30,4948,4949],{},"node-sass@^4",[109,4951,4952],{"id":4952},"更新思路",[1057,4954,4956],{"id":4955},"nodejs","node.js",[17,4958,4959],{},"webpack 官方并没有提供 webpack 3 支持的最高 node 版本，且即使 webpack 官方支持，webpack 的相关插件也未必支持。因此 node 版本能否更新就只能自己试。好在尽管这个项目的 CI/CD 跑在 node 12，但我日常都在用 node 14 开发，因此顺势将 node 版本提升至 14。",[1057,4961,4963],{"id":4962},"webpacksass-loader","webpack、sass-loader",[17,4965,4966,4967,4972],{},"webpack 的版本目前处于非必要不更新的定时炸弹状态，基于现有的 webpack 3 限制，所支持的最高 sass-loader 版本就是 ^7 （ sass-loader 在 ",[709,4968,4971],{"href":4969,"rel":4970},"https://github.com/webpack-contrib/sass-loader/blob/v8.0.0/CHANGELOG.md",[713],"8.0.0 版本的更新日志","中明确指出 8.0.0 版本需要 webpack 4.36.0）。",[17,4974,4975],{},"如果项目中 sass-loader@^7 支持使用 dart-sass 就可以不更新 sass-loader，也就不必更新 webpack 版本；反之，就需要同步更新 webpack 至 4，再视情况定下 sass-loader 的版本。",[17,4977,4978,4979,4984],{},"那么到底支不支持呢？我在 ",[709,4980,4983],{"href":4981,"rel":4982},"https://www.webpackjs.com/loaders/sass-loader/",[713],"webpack 官方文档介绍 sass-loader 的页面","找到了这样一段 package.json 片段",[38,4986,4988],{"className":2336,"code":4987,"language":2338,"meta":43,"style":43},"{\n  \"devDependencies\": {\n    \"sass-loader\": \"^7.2.0\",\n    \"sass\": \"^1.22.10\"\n  }\n}\n",[30,4989,4990,4994,5002,5014,5024,5028],{"__ignoreMap":43},[47,4991,4992],{"class":49,"line":50},[47,4993,2345],{"class":149},[47,4995,4996,4999],{"class":49,"line":56},[47,4997,4998],{"class":138},"  \"devDependencies\"",[47,5000,5001],{"class":149},": {\n",[47,5003,5004,5007,5009,5012],{"class":49,"line":62},[47,5005,5006],{"class":138},"    \"sass-loader\"",[47,5008,2353],{"class":149},[47,5010,5011],{"class":186},"\"^7.2.0\"",[47,5013,2359],{"class":149},[47,5015,5016,5019,5021],{"class":49,"line":68},[47,5017,5018],{"class":138},"    \"sass\"",[47,5020,2353],{"class":149},[47,5022,5023],{"class":186},"\"^1.22.10\"\n",[47,5025,5026],{"class":49,"line":74},[47,5027,3066],{"class":149},[47,5029,5030],{"class":49,"line":80},[47,5031,2585],{"class":149},[17,5033,5034],{},"这证明起码在 sass-loader@7.2.0 这一版本就已经支持 dart-sass 了，因此 webpack 版本可以停留在 ^3，而 sass-loader 暂时停留在 7.0.3 版本，如果后续有问题可以更新到 ^7 版本中最新的 7.3.1 版本。",[1057,5036,5037],{"id":5037},"dart-sass",[17,5039,5040],{},"sass-loader@^7 所支持的最高 sass 我并没有查到，Github Copilot 信誓旦旦地告诉我",[1497,5042,5043,5048,5053,5058],{},[17,5044,5045],{},[21,5046,5047],{},"官方文档引用：",[1497,5049,5050],{},[17,5051,5052],{},"sass-loader@^7.0.0 requires node-sass >=4.0.0 or sass >=1.3.0, \u003C=1.26.5.",[17,5054,5055],{},[21,5056,5057],{},"建议：",[909,5059,5060],{},[912,5061,5062,5063,5066,5067,5070],{},"如果需要使用更高版本的 ",[30,5064,5065],{},"sass","，请升级到 ",[30,5068,5069],{},"sass-loader"," 8 或更高版本。",[17,5072,5073,5074,5079],{},"但事实上，我并没有在互联网上找到这段文本的蛛丝马迹。并且在 sass 的 ~1.26 版本中最后一个版本是 1.26.11 而非 1.26.5，",[709,5075,5078],{"href":5076,"rel":5077},"https://docs.npmjs.com/about-semantic-versioning",[713],"根据常见的 npm 版本号原则","，major version 和 minor version 不变，只改变了 patch version 的发版一般只有 bugfix 而没有 breaking change，不至于从 1.26.5 更新到 1.26.11 就突然不支持 sass-loader 7 了，因此更可能是 AI 幻觉或者是训练数据受限。",[17,5081,5082],{},"出于谨慎考虑，最终决定采用 webpack 官方文档中提到的 sass 1.22 的最后一个版本，也就是 1.22.12。",[109,5084,5086],{"id":5085},"分析完成动手更新","分析完成，动手更新",[1057,5088,5090],{"id":5089},"第一步卸载-node-sass安装-sass12212","第一步，卸载 node-sass，安装 sass@^1.22.12",[38,5092,5094],{"className":2163,"code":5093,"language":2165,"meta":43,"style":43},"npm uninstall node-sass\nnpm install sass@^1.22.12\n",[30,5095,5096,5106],{"__ignoreMap":43},[47,5097,5098,5100,5103],{"class":49,"line":50},[47,5099,2172],{"class":145},[47,5101,5102],{"class":186}," uninstall",[47,5104,5105],{"class":186}," node-sass\n",[47,5107,5108,5110,5112],{"class":49,"line":56},[47,5109,2172],{"class":145},[47,5111,2175],{"class":186},[47,5113,5114],{"class":186}," sass@^1.22.12\n",[1057,5116,5118],{"id":5117},"第二步更新-webpack-配置非必须","第二步，更新 webpack 配置（非必须）",[38,5120,5122],{"className":1439,"code":5121,"language":1441,"meta":43,"style":43},"module.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.(scss|sass)$/,\n        use: [\n          'style-loader',\n          'css-loader',\n          {\n            loader: 'sass-loader',\n+            options: {\n+                // 事实上，这一行在大部分 sass-loader 版本中不用加，sass-loader 能自动检测本地是 sass 还是 node-sass\n+                implementation: require('sass')\n+              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n",[30,5123,5124,5129,5134,5139,5144,5149,5154,5159,5164,5169,5174,5179,5184,5189,5194,5199,5204,5209,5214,5219,5224,5228],{"__ignoreMap":43},[47,5125,5126],{"class":49,"line":50},[47,5127,5128],{},"module.exports = {\n",[47,5130,5131],{"class":49,"line":56},[47,5132,5133],{},"  // ...\n",[47,5135,5136],{"class":49,"line":62},[47,5137,5138],{},"  module: {\n",[47,5140,5141],{"class":49,"line":68},[47,5142,5143],{},"    rules: [\n",[47,5145,5146],{"class":49,"line":74},[47,5147,5148],{},"      {\n",[47,5150,5151],{"class":49,"line":80},[47,5152,5153],{},"        test: /\\.(scss|sass)$/,\n",[47,5155,5156],{"class":49,"line":86},[47,5157,5158],{},"        use: [\n",[47,5160,5161],{"class":49,"line":92},[47,5162,5163],{},"          'style-loader',\n",[47,5165,5166],{"class":49,"line":98},[47,5167,5168],{},"          'css-loader',\n",[47,5170,5171],{"class":49,"line":555},[47,5172,5173],{},"          {\n",[47,5175,5176],{"class":49,"line":560},[47,5177,5178],{},"            loader: 'sass-loader',\n",[47,5180,5181],{"class":49,"line":582},[47,5182,5183],{},"+            options: {\n",[47,5185,5186],{"class":49,"line":603},[47,5187,5188],{},"+                // 事实上，这一行在大部分 sass-loader 版本中不用加，sass-loader 能自动检测本地是 sass 还是 node-sass\n",[47,5190,5191],{"class":49,"line":618},[47,5192,5193],{},"+                implementation: require('sass')\n",[47,5195,5196],{"class":49,"line":644},[47,5197,5198],{},"+              },\n",[47,5200,5201],{"class":49,"line":653},[47,5202,5203],{},"            },\n",[47,5205,5206],{"class":49,"line":658},[47,5207,5208],{},"          },\n",[47,5210,5211],{"class":49,"line":2491},[47,5212,5213],{},"        ],\n",[47,5215,5216],{"class":49,"line":2498},[47,5217,5218],{},"      },\n",[47,5220,5221],{"class":49,"line":2503},[47,5222,5223],{},"    ],\n",[47,5225,5226],{"class":49,"line":2514},[47,5227,4345],{},[47,5229,5230],{"class":49,"line":2526},[47,5231,5232],{},"};\n",[1057,5234,5236],{"id":5235},"第三步批量替换-deep-语法为-v-deep","第三步，批量替换 /deep/ 语法为 ::v-deep",[17,5238,5239,5240,5245],{},"因为 ",[709,5241,5244],{"href":5242,"rel":5243},"https://chromestatus.com/feature/4964279606312960",[713],"/deep/ 写法在 2017 年被弃用"," ，/deep/ 变成了不受支持的深度作用选择器，node-sass 凭借其出色的容错性能够继续提供兼容，但 dart-sass 则不支持这种写法。于是需要将 /deep/ 语法批量替换成 ::v-deep 写法，这种写法虽然在 vue 的后续 rfc 被放弃了，但直至今日依然在事实上被支持。",[38,5247,5249],{"className":2163,"code":5248,"language":2165,"meta":43,"style":43},"# 大概就是这么个意思，用 vscode 的批量替换其实也行\nsed -i 's#\\s*/deep/\\s*# ::v-deep #g' $(grep -rl '/deep/' .)\n",[30,5250,5251,5256],{"__ignoreMap":43},[47,5252,5253],{"class":49,"line":50},[47,5254,5255],{"class":203},"# 大概就是这么个意思，用 vscode 的批量替换其实也行\n",[47,5257,5258,5261,5264,5267,5270,5273,5276,5279,5282],{"class":49,"line":56},[47,5259,5260],{"class":145},"sed",[47,5262,5263],{"class":138}," -i",[47,5265,5266],{"class":186}," 's#\\s*/deep/\\s*# ::v-deep #g'",[47,5268,5269],{"class":149}," $(",[47,5271,5272],{"class":145},"grep",[47,5274,5275],{"class":138}," -rl",[47,5277,5278],{"class":186}," '/deep/'",[47,5280,5281],{"class":186}," .",[47,5283,159],{"class":149},[1057,5285,5287],{"id":5286},"第四步修复其他-sass-语法错误","第四步，修复其他 sass 语法错误",[17,5289,5290],{},"在迁移的过程中，我发现项目中有一些不规范的写法，node-sass 凭借出色的鲁棒性不吭一声强行解析，而 dart-sass 则干不了这粗活。因此需要根据编译时的报错手动修复一下这些语法错误，我这里一共遇到两种。",[38,5292,5294],{"className":1439,"code":5293,"language":1441,"meta":43,"style":43},"// 多打了一个冒号\n.foo {\n-  color:: #fff;\n+  color: #fff;\n}\n\n// :nth-last-child 没指定数字\n.bar {\n-  &:nth-last-child() {\n+  &:nth-last-child(1) {\n      margin-bottom: 0;\n  }\n}\n",[30,5295,5296,5301,5306,5311,5316,5320,5324,5329,5334,5339,5344,5349,5353],{"__ignoreMap":43},[47,5297,5298],{"class":49,"line":50},[47,5299,5300],{},"// 多打了一个冒号\n",[47,5302,5303],{"class":49,"line":56},[47,5304,5305],{},".foo {\n",[47,5307,5308],{"class":49,"line":62},[47,5309,5310],{},"-  color:: #fff;\n",[47,5312,5313],{"class":49,"line":68},[47,5314,5315],{},"+  color: #fff;\n",[47,5317,5318],{"class":49,"line":74},[47,5319,2585],{},[47,5321,5322],{"class":49,"line":80},[47,5323,165],{"emptyLinePlaceholder":164},[47,5325,5326],{"class":49,"line":86},[47,5327,5328],{},"// :nth-last-child 没指定数字\n",[47,5330,5331],{"class":49,"line":92},[47,5332,5333],{},".bar {\n",[47,5335,5336],{"class":49,"line":98},[47,5337,5338],{},"-  &:nth-last-child() {\n",[47,5340,5341],{"class":49,"line":555},[47,5342,5343],{},"+  &:nth-last-child(1) {\n",[47,5345,5346],{"class":49,"line":560},[47,5347,5348],{},"      margin-bottom: 0;\n",[47,5350,5351],{"class":49,"line":582},[47,5352,3066],{},[47,5354,5355],{"class":49,"line":603},[47,5356,2585],{},[109,5358,5359],{"id":5359},"踩坑",[1057,5361,5363],{"id":5362},"v-deep-样式不生效","::v-deep 样式不生效",[17,5365,5366],{},"依赖更新完后看了两眼好像是没问题，就推测试环境了。结果一天没到就被同事 call 了，::v-deep 这种深度作用选择器居然没有生效？",[17,5368,5369],{},"抱着试一试的态度，GPT 给了如下回答",[1497,5371,5372],{},[17,5373,5374,5375,5378,5379,5382,5383,5389,5390,5393,5394,3562],{},"在 ",[21,5376,5377],{},"Vue 2 + vue-loader + Sass"," 的组合下，",[21,5380,5381],{},"这种写法是正确的","，",[21,5384,5385,5386],{},"前提是你的构建工具链支持 ",[30,5387,5388],{},"::v-deep"," 语法（如 ",[30,5391,5392],{},"vue-loader@15"," 及以上版本 + ",[30,5395,5069],{},[17,5397,5398],{},"虽说我依然没有查证到为什么更新 vue-loader@15 才能使用 ::v-deep 语法，但对 vue-loader 进行更新后，::v-deep 语法确实生效了。在撰写本文时，我找到了些许蛛丝马迹，可能能解释这一问题。",[1103,5400,5401,5415],{},[912,5402,5403,5404,5409,5410,399],{},"vue-loader 在 ",[709,5405,5408],{"href":5406,"rel":5407},"https://vue-loader-v14.vuejs.org/en/features/scoped-css.html#deep-selectors",[713],"14 版本的官方文档","就是没有 ::v-deep 写法的示例，",[709,5411,5414],{"href":5412,"rel":5413},"https://github.com/vuejs/vue-loader/commit/2585d254fc774386a898887467fbdd30eb864b53",[713],"这一示例一直在 vue-loader 15.7.0 版本发布后才被加入",[912,5416,5417,5418,5425,5428,5429,5434,5435],{},"vue-cli 的 Github Issue 评论区中有人提到",[1497,5419,5420],{},[17,5421,5422,5424],{},[30,5423,5388],{}," implemented in @vue/component-compiler-utils v2.6.0, should work after you reinstall the deps.",[5426,5427],"br",{},"而 vue-loader 在 15.0.0-beta.1 版本才",[709,5430,5433],{"href":5431,"rel":5432},"https://github.com/vuejs/vue-loader/commit/e32cd0e4372fcc6f13b6c307402713807516d71c#diff-7ae45ad102eab3b6d7e7896acd08c427a9b25b346470d7bc6507b6481575d519",[713],"将 @vue/component-compiler-utils 加入到自己的 dependencies 中","，并直到 vue-loader 15.7.1 中才",[709,5436,5439],{"href":5437,"rel":5438},"https://github.com/vuejs/vue-loader/commit/c359a38db0fbb4135fc97114baec3cd557d4123a",[713],"将其 @vue/component-compiler-utils 的版本号更新到满足要求的 ^3.0.0",[17,5441,5442,5443,5448],{},"那能否升级到 vue-loader 16 甚至 17 版本呢？不行，在 ",[709,5444,5447],{"href":5445,"rel":5446},"https://github.com/vuejs/vue-loader/releases/tag/v16.1.2",[713],"vue-loader v16.1.2 的更新日志","中明确写道",[1497,5450,5451],{},[17,5452,5453],{},"Note: vue-loader v16 is for Vue 3 only.",[1057,5455,5457],{"id":5456},"vue-loader-14-15-breaking-change","vue-loader 14 -> 15 breaking change",[17,5459,5460,5461,5466],{},"vue-loader 从 14 往上迁移时，不修改 webpack 配置直接跑会遇到 vue 语法不识别的问题。具体表现为 .vue 文件命名都是正确有效的语法，但构建开发时编译器就是不认，报语法错误。vue-loader 官方有一份",[709,5462,5465],{"href":5463,"rel":5464},"https://vue-loader.vuejs.org/migrating.html",[713],"迁移文档","，需要注意一下。",[38,5468,5472],{"className":5469,"code":5471,"language":2607},[5470],"language-text","ERROR in ./src/......\nModule parse failed: Unexpected token(1:0)\nYou may need an appropriate loader to handle this file type.\n",[30,5473,5471],{"__ignoreMap":43},[38,5475,5477],{"className":1439,"code":5476,"language":1441,"meta":43,"style":43},"// ...\nimport path from 'path'\n+const VueLoaderPlugin = require('vue-loader/lib/plugin')\n\n// ...\n\n  plugins: [\n+    new VueLoaderPlugin()\n    // ...\n  ]\n",[30,5478,5479,5484,5489,5494,5498,5502,5506,5511,5516,5521],{"__ignoreMap":43},[47,5480,5481],{"class":49,"line":50},[47,5482,5483],{},"// ...\n",[47,5485,5486],{"class":49,"line":56},[47,5487,5488],{},"import path from 'path'\n",[47,5490,5491],{"class":49,"line":62},[47,5492,5493],{},"+const VueLoaderPlugin = require('vue-loader/lib/plugin')\n",[47,5495,5496],{"class":49,"line":68},[47,5497,165],{"emptyLinePlaceholder":164},[47,5499,5500],{"class":49,"line":74},[47,5501,5483],{},[47,5503,5504],{"class":49,"line":80},[47,5505,165],{"emptyLinePlaceholder":164},[47,5507,5508],{"class":49,"line":86},[47,5509,5510],{},"  plugins: [\n",[47,5512,5513],{"class":49,"line":92},[47,5514,5515],{},"+    new VueLoaderPlugin()\n",[47,5517,5518],{"class":49,"line":98},[47,5519,5520],{},"    // ...\n",[47,5522,5523],{"class":49,"line":555},[47,5524,5525],{},"  ]\n",[17,5527,5528],{},"除此之外，在我这个项目中需要额外移除 webpack 配置中针对 .vue 文件的 babel-loader",[38,5530,5532],{"className":1439,"code":5531,"language":1441,"meta":43,"style":43},"{\n  test: /\\.vue$/,\n  use: [\n-    {\n-      loader: 'babel-loader'\n-    },\n    {\n      loader: 'vue-loader',\n    }\n  ]\n}\n",[30,5533,5534,5538,5543,5548,5553,5558,5563,5567,5572,5576,5580],{"__ignoreMap":43},[47,5535,5536],{"class":49,"line":50},[47,5537,2345],{},[47,5539,5540],{"class":49,"line":56},[47,5541,5542],{},"  test: /\\.vue$/,\n",[47,5544,5545],{"class":49,"line":62},[47,5546,5547],{},"  use: [\n",[47,5549,5550],{"class":49,"line":68},[47,5551,5552],{},"-    {\n",[47,5554,5555],{"class":49,"line":74},[47,5556,5557],{},"-      loader: 'babel-loader'\n",[47,5559,5560],{"class":49,"line":80},[47,5561,5562],{},"-    },\n",[47,5564,5565],{"class":49,"line":86},[47,5566,2372],{},[47,5568,5569],{"class":49,"line":92},[47,5570,5571],{},"      loader: 'vue-loader',\n",[47,5573,5574],{"class":49,"line":98},[47,5575,2561],{},[47,5577,5578],{"class":49,"line":555},[47,5579,5525],{},[47,5581,5582],{"class":49,"line":560},[47,5583,2585],{},[109,5585,5586],{"id":5586},"最终更新情况",[909,5588,5589,5596,5603],{},[912,5590,5591,1773,5593],{},[30,5592,4924],{},[30,5594,5595],{},"node@^14",[912,5597,5598,1773,5600],{},[30,5599,4939],{},[30,5601,5602],{},"vue-loader@^15",[912,5604,5605,1773,5607],{},[30,5606,4949],{},[30,5608,5609],{},"sass@^1.22.12",[17,5611,5612],{},"其余依赖版本维持不变",[109,5614,937],{"id":937},[909,5616,5617,5634,5641,5647,5653,5660,5667,5673,5679,5685,5691,5697,5703,5710,5717],{},[912,5618,5619],{},[709,5620,5623,5624,5626,5627,5630,5631,5633],{"href":5621,"rel":5622},"https://juejin.cn/post/7327094228350500914",[713],"node-sass更换为dart-sass",[30,5625,5037],{}," 和 ",[30,5628,5629],{},"node-sass","都是用来将",[30,5632,5065],{},"编译成 - 掘金",[912,5635,5636],{},[709,5637,5640],{"href":5638,"rel":5639},"https://sunchenggit.github.io/2021/01/13/node-sass%E8%BF%81%E7%A7%BBdart-sass/",[713],"node-sass迁移dart-sass | Bolg",[912,5642,5643],{},[709,5644,5646],{"href":4981,"rel":5645},[713],"sass-loader | webpack 中文文档 | webpack中文文档 | webpack中文网",[912,5648,5649],{},[709,5650,5652],{"href":4906,"rel":5651},[713],"Sass: LibSass is Deprecated",[912,5654,5655],{},[709,5656,5659],{"href":5657,"rel":5658},"https://www.npmjs.com/package/sass?activeTab=versions",[713],"sass - npm",[912,5661,5662],{},[709,5663,5666],{"href":5664,"rel":5665},"https://www.npmjs.com/package/node-sass",[713],"node-sass - npm",[912,5668,5669],{},[709,5670,5672],{"href":5076,"rel":5671},[713],"About semantic versioning | npm Docs",[912,5674,5675],{},[709,5676,5678],{"href":5242,"rel":5677},[713],"Make /deep/ behave like the descendant combinator \" \" in CSS live profile (in css file or inside of \u003Cstyle>) - Chrome Platform Status",[912,5680,5681],{},[709,5682,5684],{"href":4969,"rel":5683},[713],"sass-loader/CHANGELOG.md at v8.0.0 · webpack-contrib/sass-loader",[912,5686,5687],{},[709,5688,5690],{"href":5445,"rel":5689},[713],"Release v16.1.2 · vuejs/vue-loader",[912,5692,5693],{},[709,5694,5696],{"href":5431,"rel":5695},[713],"refactor: use @vue/component-compiler-utils · vuejs/vue-loader@e32cd0e",[912,5698,5699],{},[709,5700,5702],{"href":5437,"rel":5701},[713],"chore: update @vue/component-compiler-utils to v3 · vuejs/vue-loader@c359a38",[912,5704,5705],{},[709,5706,5709],{"href":5707,"rel":5708},"https://github.com/vuejs/vue-cli/issues/3399#issuecomment-466319019",[713],"dart-sass does not support /deep/ selector · Issue #3399 · vuejs/vue-cli",[912,5711,5712],{},[709,5713,5716],{"href":5714,"rel":5715},"https://vue-loader-v14.vuejs.org/en/features/scoped-css.html",[713],"Scoped CSS · vue-loader v14",[912,5718,5719],{},[709,5720,5722],{"href":5463,"rel":5721},[713],"Migrating from v14 | Vue Loader",[955,5724,5725],{},"html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}",{"title":43,"searchDepth":56,"depth":56,"links":5727},[5728,5729,5730,5731,5736,5742,5746,5747],{"id":4884,"depth":56,"text":4884},{"id":4898,"depth":56,"text":4899},{"id":4917,"depth":56,"text":4917},{"id":4952,"depth":56,"text":4952,"children":5732},[5733,5734,5735],{"id":4955,"depth":62,"text":4956},{"id":4962,"depth":62,"text":4963},{"id":5037,"depth":62,"text":5037},{"id":5085,"depth":56,"text":5086,"children":5737},[5738,5739,5740,5741],{"id":5089,"depth":62,"text":5090},{"id":5117,"depth":62,"text":5118},{"id":5235,"depth":62,"text":5236},{"id":5286,"depth":62,"text":5287},{"id":5359,"depth":56,"text":5359,"children":5743},[5744,5745],{"id":5362,"depth":62,"text":5363},{"id":5456,"depth":62,"text":5457},{"id":5586,"depth":56,"text":5586},{"id":937,"depth":56,"text":937},{"title":5749,"date":5750,"path":5751,"tags":5752,"body":5754},"前端中的量子力学——一打开 F12 就消失的 Bug","2025-06-08 01:22:13","/2025/06/08/front-end-bug-gone-when-open-devtool",[1968,3640,4879,12,5753],"Debug",{"type":14,"value":5755,"toc":6266},[5756,5760,5763,5771,5773,5779,5782,5796,5800,5803,5926,5929,5932,5935,5938,5944,5947,5981,5985,5998,6001,6068,6071,6202,6205,6208,6212,6219,6230,6233,6238,6240,6263],[109,5757,5759],{"id":5758},"前端量子态现象的首次观测","前端「量子态」现象的首次观测",[17,5761,5762],{},"这事说来也邪乎，半个月前吃着火锅唱着歌，在工位上嘎嘎写码，发现一个诡异的 bug。作为如假包换的人类程序员，写出 bug 是再正常不过的事情了，但这 bug 邪门就邪门在我一打开 F12 的 DevTools 观察相关的 dom 结构，这 bug 就自动消失了；再把 DevTools 一关，Ctrl + F5 一刷新页面，Bug 又出现了。",[17,5764,5765,5766],{},"下面是使用 iframe 引入的 ",[709,5767,5770],{"href":5768,"rel":5769},"https://static.031130.xyz/demo/scroll-jump-bug.html",[713],"demo",[4833,5772],{"src":5768,"width":4836,"height":4837,"allowFullScreen":164},[17,5774,5775],{},[689,5776],{"alt":5777,"src":5778},"“观测”指南","https://static.031130.xyz/uploads/2025/06/08/65620d31fce6f.webp",[17,5780,5781],{},"这 Bug 给我整得脑瓜子嗡嗡的，我又不是物理学家，写个前端怎么量子力学的观察者效应都给我整出来了（？",[1497,5783,5784,5790,5793],{},[17,5785,5786,5789],{},[21,5787,5788],{},"观测者效应","（Observer effect），是指“观测”这种行为对被观测对象造成一定影响的效应。",[17,5791,5792],{},"在量子力学实验中，如果要测算一个电子所处的速度，就要用两个光子隔一段时间去撞击这个电子，但第一个光子就已经把这个电子撞飞了，便改变了电子的原有速度，我们便无法测出真正准确的速度（不确定原理）。时间流逝的快慢也会受到观测者的影响，用很高的频率去观测粒子的衰变，反而使得粒子长时间不衰变。",[17,5794,5795],{},"——wikipedia",[109,5797,5799],{"id":5798},"量子迷雾浏览器机制","量子迷雾❌浏览器机制✅",[17,5801,5802],{},"这里先稍微解释一下 demo 中的代码片段:",[38,5804,5806],{"className":2187,"code":5805,"language":2189,"meta":43,"style":43},"if (scrollIndex >= groupLength) {\n  setTimeout(() => {\n    wrapper.style.transition = \"none\";\n    scrollIndex = 0;\n    wrapper.style.transform = `translateY(-${crollIndex * itemHeight}px)`;\n\n    requestAnimationFrame(() => {\n      wrapper.style.transition = \"transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)\";\n    });\n  }, 500);\n}\n",[30,5807,5808,5822,5833,5845,5856,5880,5884,5895,5907,5912,5922],{"__ignoreMap":43},[47,5809,5810,5813,5816,5819],{"class":49,"line":50},[47,5811,5812],{"class":134},"if",[47,5814,5815],{"class":149}," (scrollIndex ",[47,5817,5818],{"class":134},">=",[47,5820,5821],{"class":149}," groupLength) {\n",[47,5823,5824,5827,5829,5831],{"class":49,"line":56},[47,5825,5826],{"class":145},"  setTimeout",[47,5828,573],{"class":149},[47,5830,576],{"class":134},[47,5832,579],{"class":149},[47,5834,5835,5838,5840,5843],{"class":49,"line":62},[47,5836,5837],{"class":149},"    wrapper.style.transition ",[47,5839,272],{"class":134},[47,5841,5842],{"class":186}," \"none\"",[47,5844,3770],{"class":149},[47,5846,5847,5850,5852,5854],{"class":49,"line":68},[47,5848,5849],{"class":149},"    scrollIndex ",[47,5851,272],{"class":134},[47,5853,4235],{"class":138},[47,5855,3770],{"class":149},[47,5857,5858,5861,5863,5866,5869,5872,5875,5878],{"class":49,"line":74},[47,5859,5860],{"class":149},"    wrapper.style.transform ",[47,5862,272],{"class":134},[47,5864,5865],{"class":186}," `translateY(-${",[47,5867,5868],{"class":149},"crollIndex",[47,5870,5871],{"class":134}," *",[47,5873,5874],{"class":149}," itemHeight",[47,5876,5877],{"class":186},"}px)`",[47,5879,3770],{"class":149},[47,5881,5882],{"class":49,"line":80},[47,5883,165],{"emptyLinePlaceholder":164},[47,5885,5886,5889,5891,5893],{"class":49,"line":86},[47,5887,5888],{"class":145},"    requestAnimationFrame",[47,5890,573],{"class":149},[47,5892,576],{"class":134},[47,5894,579],{"class":149},[47,5896,5897,5900,5902,5905],{"class":49,"line":92},[47,5898,5899],{"class":149},"      wrapper.style.transition ",[47,5901,272],{"class":134},[47,5903,5904],{"class":186}," \"transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)\"",[47,5906,3770],{"class":149},[47,5908,5909],{"class":49,"line":98},[47,5910,5911],{"class":149},"    });\n",[47,5913,5914,5917,5920],{"class":49,"line":555},[47,5915,5916],{"class":149},"  }, ",[47,5918,5919],{"class":138},"500",[47,5921,3806],{"class":149},[47,5923,5924],{"class":49,"line":560},[47,5925,2585],{"class":149},[17,5927,5928],{},"我这边拿到的需求是需要写一个无限滚动的轮播标题列表，每次展示三个，2 秒后标题列表整体上移，原本的第一个标题就移出可视范围了，下面会新补充一个新的标题列表。（可能解释的不清楚，但各位应该都看过上面的 demo 了）",[17,5930,5931],{},"当列表滚动到最底部的时候，我先取消 transition 过渡动画效果，趁机将整体列表平移到上一次可视范围内出现相同的三个标题的位置，再把 transition 过渡动画的效果加回来，这样就能在视觉上造成无限滚动的效果。",[17,5933,5934],{},"但问题就出在明明把 transition 属性取消了，但这一次平移仍然触发了过渡动画效果。",[17,5936,5937],{},"说实话，这是我短暂的码农生涯当中最绝望的一次，一方面是遇到的 bug 过于逆天以至于说出去都可能没人信，一方面是遇上这种问题是完全不能指望搜索引擎能给出什么解决方案的——毕竟我自己都不知道该怎么组织关键词进行搜索。",[17,5939,5940],{},[689,5941],{"alt":5942,"src":5943},"这是小麦茶，带我入坑前端的学长","https://static.031130.xyz/uploads/2025/06/08/475a61b332454.webp",[17,5945,5946],{},"于是抱着试一试的心态，把相关代码喂给 ChatGPT-4o 看看能不能问出个所以然来。",[1497,5948,5949,5963],{},[17,5950,5951,5952,5955,5956,5959,5960,399],{},"你描述的现象——“",[21,5953,5954],{},"滚动第九次时列表出现突兀的自下而上跳动","，而",[21,5957,5958],{},"打开 F12 时不会出现问题","”——",[21,5961,5962],{},"几乎可以确定是由于浏览器在某些渲染状态下跳过了某些帧（帧率波动）或者定时器精度的问题导致动画突变",[17,5964,5965,5966,5969,5970,5973,5974,5977,5978,399],{},"这种问题多半发生在“使用 ",[30,5967,5968],{},"setInterval"," 控制动画”和“切换样式（transition）时机不当”所引起的 ",[21,5971,5972],{},"过渡跳帧问题","，而打开 DevTools 会 ",[21,5975,5976],{},"强制刷新帧或提高定时器精度","，从而",[21,5979,5980],{},"掩盖了这个问题",[109,5982,5984],{"id":5983},"太好了是-requestanimationframe我们有救了","太好了，是 requestAnimationFrame，我们有救了",[1497,5986,5987,5995],{},[17,5988,5989,5994],{},[21,5990,5991],{},[30,5992,5993],{},"window.requestAnimationFrame()"," 方法会告诉浏览器你希望执行一个动画。它要求浏览器在下一次重绘之前，调用用户提供的回调函数。",[17,5996,5997],{},"——MDN",[17,5999,6000],{},"这是 GPT 给出的方案，非常有效",[38,6002,6004],{"className":1439,"code":6003,"language":1441,"meta":43,"style":43},"if (scrollIndex >= groupLength) {\n  setTimeout(() => {\n    wrapper.style.transition = \"none\";\n    scrollIndex = 0;\n    wrapper.style.transform = `translateY(-${crollIndex * itemHeight}px)`;\n\n    requestAnimationFrame(() => {\n+      requestAnimationFrame(() => {\n         wrapper.style.transition = \"transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)\";\n+      });\n    });\n  }, 500);\n}\n",[30,6005,6006,6011,6016,6021,6026,6031,6035,6040,6045,6050,6055,6059,6064],{"__ignoreMap":43},[47,6007,6008],{"class":49,"line":50},[47,6009,6010],{},"if (scrollIndex >= groupLength) {\n",[47,6012,6013],{"class":49,"line":56},[47,6014,6015],{},"  setTimeout(() => {\n",[47,6017,6018],{"class":49,"line":62},[47,6019,6020],{},"    wrapper.style.transition = \"none\";\n",[47,6022,6023],{"class":49,"line":68},[47,6024,6025],{},"    scrollIndex = 0;\n",[47,6027,6028],{"class":49,"line":74},[47,6029,6030],{},"    wrapper.style.transform = `translateY(-${crollIndex * itemHeight}px)`;\n",[47,6032,6033],{"class":49,"line":80},[47,6034,165],{"emptyLinePlaceholder":164},[47,6036,6037],{"class":49,"line":86},[47,6038,6039],{},"    requestAnimationFrame(() => {\n",[47,6041,6042],{"class":49,"line":92},[47,6043,6044],{},"+      requestAnimationFrame(() => {\n",[47,6046,6047],{"class":49,"line":98},[47,6048,6049],{},"         wrapper.style.transition = \"transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)\";\n",[47,6051,6052],{"class":49,"line":555},[47,6053,6054],{},"+      });\n",[47,6056,6057],{"class":49,"line":560},[47,6058,5911],{},[47,6060,6061],{"class":49,"line":582},[47,6062,6063],{},"  }, 500);\n",[47,6065,6066],{"class":49,"line":603},[47,6067,2585],{},[17,6069,6070],{},"如果觉得嵌套两层 requestAnimationFrame 比较难理解，那下面的代码是等效的",[38,6072,6074],{"className":2187,"code":6073,"language":2189,"meta":43,"style":43},"if (scrollIndex >= groupLength) {\n  setTimeout(() => {\n    scrollIndex = 0;\n\n    requestAnimationFrame(() => {\n      // 第一帧\n      wrapper.style.transition = \"none\";\n      wrapper.style.transform = `translateY(-${crollIndex * itemHeight}px)`;\n      // 第二帧\n      requestAnimationFrame(() => {\n        wrapper.style.transition = \"transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)\";\n      });\n    });\n  }, 500);\n}\n",[30,6075,6076,6086,6096,6106,6110,6120,6125,6135,6154,6159,6170,6181,6186,6190,6198],{"__ignoreMap":43},[47,6077,6078,6080,6082,6084],{"class":49,"line":50},[47,6079,5812],{"class":134},[47,6081,5815],{"class":149},[47,6083,5818],{"class":134},[47,6085,5821],{"class":149},[47,6087,6088,6090,6092,6094],{"class":49,"line":56},[47,6089,5826],{"class":145},[47,6091,573],{"class":149},[47,6093,576],{"class":134},[47,6095,579],{"class":149},[47,6097,6098,6100,6102,6104],{"class":49,"line":62},[47,6099,5849],{"class":149},[47,6101,272],{"class":134},[47,6103,4235],{"class":138},[47,6105,3770],{"class":149},[47,6107,6108],{"class":49,"line":68},[47,6109,165],{"emptyLinePlaceholder":164},[47,6111,6112,6114,6116,6118],{"class":49,"line":74},[47,6113,5888],{"class":145},[47,6115,573],{"class":149},[47,6117,576],{"class":134},[47,6119,579],{"class":149},[47,6121,6122],{"class":49,"line":80},[47,6123,6124],{"class":203},"      // 第一帧\n",[47,6126,6127,6129,6131,6133],{"class":49,"line":86},[47,6128,5899],{"class":149},[47,6130,272],{"class":134},[47,6132,5842],{"class":186},[47,6134,3770],{"class":149},[47,6136,6137,6140,6142,6144,6146,6148,6150,6152],{"class":49,"line":92},[47,6138,6139],{"class":149},"      wrapper.style.transform ",[47,6141,272],{"class":134},[47,6143,5865],{"class":186},[47,6145,5868],{"class":149},[47,6147,5871],{"class":134},[47,6149,5874],{"class":149},[47,6151,5877],{"class":186},[47,6153,3770],{"class":149},[47,6155,6156],{"class":49,"line":98},[47,6157,6158],{"class":203},"      // 第二帧\n",[47,6160,6161,6164,6166,6168],{"class":49,"line":555},[47,6162,6163],{"class":145},"      requestAnimationFrame",[47,6165,573],{"class":149},[47,6167,576],{"class":134},[47,6169,579],{"class":149},[47,6171,6172,6175,6177,6179],{"class":49,"line":560},[47,6173,6174],{"class":149},"        wrapper.style.transition ",[47,6176,272],{"class":134},[47,6178,5904],{"class":186},[47,6180,3770],{"class":149},[47,6182,6183],{"class":49,"line":582},[47,6184,6185],{"class":149},"      });\n",[47,6187,6188],{"class":49,"line":603},[47,6189,5911],{"class":149},[47,6191,6192,6194,6196],{"class":49,"line":618},[47,6193,5916],{"class":149},[47,6195,5919],{"class":138},[47,6197,3806],{"class":149},[47,6199,6200],{"class":49,"line":644},[47,6201,2585],{"class":149},[17,6203,6204],{},"总之，我们需要杜绝浏览器将设置 transform 偏移值（瞬移列表位置）与恢复 transition 动画两件事合并到同一帧里去，而两层嵌套的 requestAnimationFrame 方法能很好的解决这个问题",[4833,6206],{"src":6207,"width":4836,"height":4837,"allowFullScreen":164},"https://static.031130.xyz/demo/scroll-jump-bug-fixed.html",[109,6209,6211],{"id":6210},"驯服量子态前端开发者的新技能","驯服量子态：前端开发者的新技能",[17,6213,6214,6215,6218],{},"就这样，通过使用两层",[30,6216,6217],{},"requestAnimationFrame","，我们成功驯服了这个\"量子态\"的bug。现在无论是否打开F12，它都会乖乖地按照我们的预期滚动，不再玩消失的把戏。",[17,6220,6221,6222,6226,6227,6229],{},"看来，在前端的世界里，我们不仅要懂JavaScript，",[6223,6224,6225],"del",{},"还得懂点量子力学","。下次再遇到这种\"一观测就消失\"的bug，不妨试试这个\"量子纠缠解决方案\"——双重",[30,6228,6217],{},"，没准就能让bug从\"量子态\"坍缩成\"稳定态\"呢！",[17,6231,6232],{},"当然，如果你有更神奇的 debug 经历，欢迎分享你的经历——毕竟，在代码的宇宙里，我们永远不知道下一个bug会以怎样的形态出现。也许，这就是编程的乐趣（？）所在吧！",[1497,6234,6235],{},[17,6236,6237],{},"本文由 ChatGPT 与 DeepSeek 协助撰写，但 bug 是真人真事（泪）。",[109,6239,937],{"id":937},[909,6241,6242,6249,6256],{},[912,6243,6244],{},[709,6245,6248],{"href":6246,"rel":6247},"https://zh.wikipedia.org/wiki/%E8%A7%82%E6%B5%8B%E8%80%85%E6%95%88%E5%BA%94",[713],"观测者效应 - 维基百科，自由的百科全书",[912,6250,6251],{},[709,6252,6255],{"href":6253,"rel":6254},"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame",[713],"Window：requestAnimationFrame() 方法 - Web API | MDN",[912,6257,6258],{},[709,6259,6262],{"href":6260,"rel":6261},"https://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html",[713],"网页性能管理详解 - 阮一峰的网络日志",[955,6264,6265],{},"html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}",{"title":43,"searchDepth":56,"depth":56,"links":6267},[6268,6269,6270,6271,6272],{"id":5758,"depth":56,"text":5759},{"id":5798,"depth":56,"text":5799},{"id":5983,"depth":56,"text":5984},{"id":6210,"depth":56,"text":6211},{"id":937,"depth":56,"text":937},{"title":6274,"date":6275,"path":6276,"tags":6277,"body":6278},"2025 年，如何为 web 页面上展示的视频选择合适的压缩算法？","2025-06-02 20:59:10","/2025/06/02/choosing-the-right-video-compression-format-for-web-in-2025",[3640,1968,1561],{"type":14,"value":6279,"toc":6966},[6280,6283,6287,6291,6294,6299,6304,6310,6316,6319,6324,6328,6331,6338,6341,6347,6351,6361,6366,6369,6372,6375,6379,6382,6389,6392,6395,6398,6401,6404,6640,6644,6647,6653,6660,6664,6675,6762,6768,6771,6775,6782,6788,6794,6798,6801,6807,6810,6813,6816,6819,6828,6830,6963],[17,6281,6282],{},"事情的起因是需要在网页上展示一个时长约为 5 分钟的产品展示视频，拿到的 H264 编码的原文件有 60MB 大。高达 1646 Kbps 码率的视频文件通过网络传输，烧 cdn 流量费用不说，对于弱网环境下的用户体验也绝对不会好。因此必须在兼顾浏览器兼容性（太好了不用管 IE）的情况下，使用更现代的视频压缩算法进行压缩。",[109,6284,6286],{"id":6285},"哪些压缩算法是目前的主流","哪些压缩算法是目前的主流？",[1057,6288,6290],{"id":6289},"av1","AV1",[17,6292,6293],{},"AV1 作为目前压缩效率最高的主流视频编码格式，在 2025 年的今天已经在 YouTube、Netflix、Bilibili 等视频网站全面铺开，毫无疑问是最值得优先考虑的选择；除了优异的压缩效率以外，AV1 免版税的优势使得各硬件厂商和浏览器内核开发者可以无所顾忌的将 AV1 编码的支持添加到自己的产品中。",[17,6295,6296],{},[689,6297],{"alt":43,"src":6298},"https://static.031130.xyz/uploads/2025/06/02/aec1af1718064.webp",[17,6300,6301],{},[689,6302],{"alt":43,"src":6303},"https://static.031130.xyz/uploads/2025/06/02/76a312b5a668b.webp",[17,6305,6306,6307],{},"可惜的是，Safari 并没有对 AV1 编码添加软解支持，只有在搭载 Apple M3 及后续生产的 Mac 和 iPhone 15 Pro 后续的机型才拥有硬解 AV1 的能力，在此之前生产的产品均无法使用 Safari 播放 AV1 编码的视频。",[6223,6308,6309],{},"我宣布 Safari 已经成为当代 IE，妥妥阻碍 Web 发展的绊脚石",[17,6311,6312],{},[689,6313],{"alt":6314,"src":6315},"Safari 在搭载 M2Pro 处理器的 Macbook Pro 上直接罢工了","https://static.031130.xyz/uploads/2025/06/02/01ddcc3948406.webp",[17,6317,6318],{},"除此之外，AV1 在压制视频时对设备的要求较高。在桌面端的消费级显卡中，目前只有 NVIDIA RTX 40 系、AMD Radeon RX 7000 系、IntelArc A380 及后续的产品拥有 AV1 的编码（encode）支持。而 Apple M 系列芯片至今没有任何一款产品拥有对 AV1 编码的硬件支持。这也导致我在我搭载 Intel Core i7-1165G7 的 ThinkPad 上使用 AV1 编码压缩视频时被迫使用 libaom-av1 进行软件编码，1080p 的视频压缩效率为 0.0025x 的速率，五分钟的视频要压一天多的时间。",[17,6320,6321],{},[689,6322],{"alt":43,"src":6323},"https://static.031130.xyz/uploads/2025/06/02/923ca02e1d835.webp",[1057,6325,6327],{"id":6326},"h265-hevc","H.265 / HEVC",[17,6329,6330],{},"作为 H.264 / AVC 的下一代继任者，H.265（又称 HEVC）的表现可谓是一手好牌打得稀巴烂。HEVC 由多个专利池（如 MPEG LA、HEVC Advance 和 Velos Media）管理，授权费用高且分散，昂贵的专利授权费用严重限制了它的普及速度和范围，尤其是在开放生态和网页端应用中。",[17,6332,6333,6334,6337],{},"Chromium / Firefox 不愿意当承担专利授权费的冤大头，拒绝在当今世界最大的两个开源浏览器内核中添加默认的 H.265 软解支持，目前主流浏览器普遍采用",[21,6335,6336],{},"能硬解就硬解，硬解不了就摆烂","的支持策略。Firefox on Linux 倒是另辟蹊径，不仅会尝试使用硬解，还会尝试使用用户在电脑上装的 ffmpeg 软解曲线救国。不过好在毕竟是 2013 年就确定的标准，现在大部分硬件厂商都集体被摁着脖子交了专利授权费以保证产品竞争力，Apple 更是 HEVC 的一等公民，保证了全系产品的 HEVC 解码能力。",[17,6339,6340],{},"目前未覆盖到的场景主要是 Chromium / Firefox on Windows 7 和 Chromium on Linux（包括 UOS、麒麟等一众国产 Linux 发行版）。",[17,6342,6343],{},[689,6344],{"alt":6345,"src":6346},"在 Linux 上不支持硬解 H.265 的 Chrome 直接把视频当作音频播放了","https://static.031130.xyz/uploads/2025/06/02/2e8e5100f645a.webp",[1057,6348,6350],{"id":6349},"vp9","VP9",[17,6352,6353,6354,6357,6358],{},"VP9 是 Google 于 2013 年推出的视频编码格式，作为 H.264 的继任者之一，在压缩效率上接近 H.265（HEVC），但最大的杀手锏是——",[21,6355,6356],{},"彻底免专利费","。这也让 VP9 成为 Google 对 HEVC 高额授权费用的掀桌式回应：",[21,6359,6360],{},"你们慢慢吃，我开一桌免费的。",[17,6362,6363],{},[689,6364],{"alt":43,"src":6365},"https://static.031130.xyz/uploads/2025/06/03/a9b473a3bd120.webp",[17,6367,6368],{},"借着免专利的东风和 Google 自家产品矩阵的强推，VP9 在 YouTube、WebRTC 乃至 Chrome 浏览器中迅速站稳了脚跟。特别是在 AV1 普及之前，VP9 几乎是网页视频播放领域的事实标准，甚至逼得苹果这个“编解码俱乐部元老”在 macOS 11 Big Sur 和 iOS 14 上的 Safari 破天荒地加入了 VP9 支持（尽管 VP9 in webm 的支持稍晚一些，具体见上表）。",[17,6370,6371],{},"VP9 的软解码支持基本无死角：Chromium、Firefox、Edge 都原生支持，Safari 也一反常态地“从了”。硬件解码方面，从 Intel Skylake（第六代酷睿）开始，NVIDIA GTX 950 及以上、AMD Vega 和 RDNA 系显卡基本都具备完整的 VP9 解码能力——总之，只要不是博物馆级别的老电脑，就能愉快播放 VP9 视频。",[17,6373,6374],{},"当然，编码仍是 VP9 的短板。Google 官方提供的开源实现 libvpx，速度比不上 x264/x265 等老牌选手，在缺乏硬件加速的场景下，仍然属于“关机前压一宿”的那种体验。不过相比 AV1 的 libaom-av1，VP9 至少还能算“可用”，适合轻量化应用、实时通信或是对压制速度敏感的用户，而早在 7 代 Intel 的 Kaby Lake 系列产品就已经引入了 VP9 的硬件编码支持，各家硬件厂商对 VP9 硬件编码的支持发展到今天还算不错。",[1057,6376,6378],{"id":6377},"h264-avc","H.264 / AVC",[17,6380,6381],{},"作为“老将出马一个顶俩”的代表，H.264 / AVC 无疑是过去二十年视频编码领域的霸主。自 2003 年标准确定以来，凭借良好的压缩效率、广泛的硬件支持和相对合理的专利授权策略，H.264 迅速成为从网络视频、蓝光光盘到直播、监控乃至手机录像的默认选择。如果你打开一个视频网站的视频流、下载一个在线视频、剪辑一个 vlog，大概率都绕不开 H.264 的身影。",[17,6383,6384,6385,6388],{},"H.264 的最大优势在于——",[21,6386,6387],{},"兼容性无敌","。不夸张地说，只要是带屏幕的设备，就能播放 H.264 视频。软解？早在十几年前的浏览器和媒体播放器中就已普及；硬解？从 Intel Sandy Bridge、NVIDIA Fermi、AMD VLIW4 这些“史前”架构开始就已加入对 H.264 的完整支持——你甚至可以在树莓派、智能冰箱上流畅播放 H.264 视频。",[17,6390,6391],{},"虽然 H.264 同样存在和 H.265 相同的专利问题，但其授权策略明显更温和——MPEG LA 提供的专利池授权门槛较低，且不向免费网络视频收取费用，使得包括 Chromium、Firefox 在内的浏览器都默认集成了 H.264 的软解功能。Apple 和 Microsoft 更是早早将其作为视频编码和解码的第一公民，Safari 和 Edge 天生支持 H.264，不存在任何兼容性烦恼。",[17,6393,6394],{},"当然，作为一项 20 多年前的技术，H.264 在压缩效率上已经明显落后于 VP9、HEVC 和 AV1。相同画质下，H.264 的码率要比 AV1 高出 30～50%，在追求极致带宽利用或存储节省的应用场景中就显得有些力不从心。然而在今天这个“能播比好看更重要”的现实环境中，H.264 依然是默认方案，是“稳健老哥”的代名词。",[17,6396,6397],{},"所以，即便 AV1、HEVC、VP9 各有亮点，H.264 依旧凭借“老、稳、全”三大核心竞争力，在 2025 年依然牢牢占据着视频生态链的中枢地位——只要这个世界还有浏览器不支持 AV1（可恶的 Safari 不支持软解），服务器不想烧钱转码视频，或用户设备太老，H.264 就不会退场。",[1057,6399,6400],{"id":6400},"小结",[17,6402,6403],{},"在视频编码方面，浏览器不再是那个能靠一己之力抹平硬件和系统差异的超人，所以总有一些特殊情况是表格中无法涵盖的。",[6405,6406,6407,6432],"table",{},[6408,6409,6410],"thead",{},[6411,6412,6413,6417,6420,6423,6426,6429],"tr",{},[6414,6415,6416],"th",{},"编解码器",[6414,6418,6419],{},"压缩效率",[6414,6421,6422],{},"浏览器",[6414,6424,6425],{},"桌面端支持",[6414,6427,6428],{},"移动端支持",[6414,6430,6431],{},"备注",[6433,6434,6435,6454,6470,6493,6514,6531,6548,6564,6578,6595,6612,6626],"tbody",{},[6411,6436,6437,6440,6443,6446,6449,6451],{},[6438,6439,6290],"td",{},[6438,6441,6442],{},"★★★",[6438,6444,6445],{},"Chrome / Chromium",[6438,6447,6448],{},"是 (v70+，发布于 2018 年 10 月)",[6438,6450,6448],{},[6438,6452,6453],{},"硬解优先，软解后备",[6411,6455,6456,6458,6460,6462,6465,6468],{},[6438,6457],{},[6438,6459],{},[6438,6461,970],{},[6438,6463,6464],{},"是 (v67+，发布于 2019 年 5 月)",[6438,6466,6467],{},"是 (v113+，发布于 2023 年 5 月)",[6438,6469,6453],{},[6411,6471,6472,6474,6476,6479,6482,6484],{},[6438,6473],{},[6438,6475],{},[6438,6477,6478],{},"Safari",[6438,6480,6481],{},"不完全支持 (仅近两年的产品支持)",[6438,6483,6481],{},[6438,6485,6486,6489,6490],{},[21,6487,6488],{},"仅支持硬解"," (M3, A17 Pro 系芯片后开始支持)，",[21,6491,6492],{},"无软解支持",[6411,6494,6495,6498,6501,6503,6506,6508],{},[6438,6496,6497],{},"HEVC (H.265)",[6438,6499,6500],{},"★★☆",[6438,6502,6445],{},[6438,6504,6505],{},"不完全支持",[6438,6507,6505],{},[6438,6509,6510,6513],{},[21,6511,6512],{},"仅支持硬解，无软解支持","（Windows 可从微软商店安装付费的软解插件）",[6411,6515,6516,6518,6520,6522,6524,6526],{},[6438,6517],{},[6438,6519],{},[6438,6521,970],{},[6438,6523,6505],{},[6438,6525,6505],{},[6438,6527,6528,6530],{},[21,6529,6512],{},"（Linux 可依赖系统 ffmpeg 实现软解）",[6411,6532,6533,6535,6537,6539,6542,6545],{},[6438,6534],{},[6438,6536],{},[6438,6538,6478],{},[6438,6540,6541],{},"近期设备全部支持 (macOS High Sierra+，发布于 2017 年 6 月)",[6438,6543,6544],{},"近期设备全部支持 (iOS 11+，发布于 2017 年 10 月)",[6438,6546,6547],{},"苹果是 H.265 一等公民",[6411,6549,6550,6552,6554,6556,6559,6561],{},[6438,6551,6350],{},[6438,6553,6500],{},[6438,6555,6445],{},[6438,6557,6558],{},"是",[6438,6560,6558],{},[6438,6562,6563],{},"支持良好",[6411,6565,6566,6568,6570,6572,6574,6576],{},[6438,6567],{},[6438,6569],{},[6438,6571,970],{},[6438,6573,6558],{},[6438,6575,6558],{},[6438,6577,6563],{},[6411,6579,6580,6582,6584,6586,6589,6592],{},[6438,6581],{},[6438,6583],{},[6438,6585,6478],{},[6438,6587,6588],{},"是 (v14.1+，发布于 2021 年 4 月)",[6438,6590,6591],{},"是 (iOS 17.4+，发布于 2024 年 3 月)",[6438,6593,6594],{},"支持稍晚（此处指兼容 vp9 的 webm 时间，vp9 in WebRTC 的兼容时间更早）",[6411,6596,6597,6600,6603,6605,6607,6609],{},[6438,6598,6599],{},"H.264 (AVC)",[6438,6601,6602],{},"★☆☆",[6438,6604,6445],{},[6438,6606,6558],{},[6438,6608,6558],{},[6438,6610,6611],{},"通用",[6411,6613,6614,6616,6618,6620,6622,6624],{},[6438,6615],{},[6438,6617],{},[6438,6619,970],{},[6438,6621,6558],{},[6438,6623,6558],{},[6438,6625,6611],{},[6411,6627,6628,6630,6632,6634,6636,6638],{},[6438,6629],{},[6438,6631],{},[6438,6633,6478],{},[6438,6635,6558],{},[6438,6637,6558],{},[6438,6639,6611],{},[109,6641,6643],{"id":6642},"怎么选","怎么选？",[17,6645,6646],{},"我们不是专业的视频托管平台，不像 YouTube、Bilibili 那样专业到可以向用户提供多种分辨率、压缩算法的选择。",[17,6648,6649],{},[689,6650],{"alt":6651,"src":6652},"Bilibili 为用户提供了三种压缩算法的视频源","https://static.031130.xyz/uploads/2025/06/03/096484dbc0f3a.webp",[17,6654,6655,6656,6659],{},"最终的选择策略，必须在",[21,6657,6658],{},"压缩效率、播放兼容性、编码耗时","等维度之间做出权衡。",[1057,6661,6663],{"id":6662},"选择一av1-挑大梁h264-保兼容","选择一：AV1 挑大梁，H.264 保兼容",[17,6665,6666,6667,6670,6671,6674],{},"现代浏览器支持在 ",[30,6668,6669],{},"\u003Cvideo>"," 标签中使用 ",[30,6672,6673],{},"\u003Csource>"," 标签和 MIME type 让浏览器按需播放",[38,6676,6680],{"className":6677,"code":6678,"language":6679,"meta":43,"style":43},"language-html shiki shiki-themes github-light github-dark","\u003Cvideo controls poster=\"preview.jpg\">\n  \u003Csource src=\"video.av1.webm\" type='video/webm; codecs=\"av01\"' />\n  \u003Csource src=\"video.h264.mp4\" type='video/mp4' />\n  当前浏览器不支持视频播放\n\u003C/video>\n","html",[30,6681,6682,6702,6727,6749,6754],{"__ignoreMap":43},[47,6683,6684,6686,6689,6692,6695,6697,6700],{"class":49,"line":50},[47,6685,546],{"class":149},[47,6687,6688],{"class":3096},"video",[47,6690,6691],{"class":145}," controls",[47,6693,6694],{"class":145}," poster",[47,6696,272],{"class":149},[47,6698,6699],{"class":186},"\"preview.jpg\"",[47,6701,3100],{"class":149},[47,6703,6704,6706,6709,6712,6714,6717,6720,6722,6725],{"class":49,"line":56},[47,6705,3105],{"class":149},[47,6707,6708],{"class":3096},"source",[47,6710,6711],{"class":145}," src",[47,6713,272],{"class":149},[47,6715,6716],{"class":186},"\"video.av1.webm\"",[47,6718,6719],{"class":145}," type",[47,6721,272],{"class":149},[47,6723,6724],{"class":186},"'video/webm; codecs=\"av01\"'",[47,6726,3119],{"class":149},[47,6728,6729,6731,6733,6735,6737,6740,6742,6744,6747],{"class":49,"line":62},[47,6730,3105],{"class":149},[47,6732,6708],{"class":3096},[47,6734,6711],{"class":145},[47,6736,272],{"class":149},[47,6738,6739],{"class":186},"\"video.h264.mp4\"",[47,6741,6719],{"class":145},[47,6743,272],{"class":149},[47,6745,6746],{"class":186},"'video/mp4'",[47,6748,3119],{"class":149},[47,6750,6751],{"class":49,"line":68},[47,6752,6753],{"class":149},"  当前浏览器不支持视频播放\n",[47,6755,6756,6758,6760],{"class":49,"line":74},[47,6757,3124],{"class":149},[47,6759,6688],{"class":3096},[47,6761,3100],{"class":149},[17,6763,6764,6765,6767],{},"通过这样的写法，浏览器会自动选择最先能解码的 ",[30,6766,6708],{},"，无需写复杂的判断逻辑或使用 JavaScript 动态切换。默认的 AV1 编码在最大程度上减少了传输流量降低成本，享受现代浏览器与设备的压缩红利；而 H.264 则作为兜底方案，保证了在不支持 AV1 的 Safari 等老旧设备上的回放兼容性。",[17,6769,6770],{},"然而这个选择可能并不是太合适，一方面我手上最先进的处理器 Apple M4 并不支持硬件编码 AV1 视频，5 分钟的视频压完需要整整 3 个小时，如果还需要视压缩质量来回调整压缩参数重新压上几次，那可真是遭老罪了；另一方面，即使 Chromium / Firefox 等主流浏览器内核现在都支持 AV1 的软解，但在一些硬件较老的设备上播放 AV1 编码的视频可能让用户的电脑风扇原地起飞，这一点在 YouTube 大力推广 AV1 的时候就曾遭到不少用户的诟病。",[1057,6772,6774],{"id":6773},"选择二vp9-独挑大梁","选择二：VP9 独挑大梁",[17,6776,6777,6778,6781],{},"考虑到 AV1 编码的高昂成本和",[6223,6779,6780],{},"用户电脑风扇原地起飞的风险","，VP9 也是一个非常具有竞争力的选择。VP9 在主流浏览器中得到了非常好的兼容，因此可以考虑放弃 H.264 的 fallback 方案独挑大梁。而 VP9 硬件编码在近几年的硬件设备上的普遍支持也给足了我勇气，让我可以多次调整压缩质量重新压缩，找一个在文件体积和画面清晰度之间的 sweet point。",[17,6783,6784],{},[6785,6786,6787],"em",{},"由于是 VP9 独挑大梁，因此大多数人可能会考虑使用与 VP9 最为适配的 webm 格式封装视频。但目前在 webm 中最广泛使用的音频编码 opus 在 Safari 上的兼容性并不是太好（在 2024 年 3 月发布的 Safari 17.4 才开始支持），建议斟酌一下是不是继续用回 AAC 编码，并将视频封装在 mp4 中。",[17,6789,6790],{},[689,6791],{"alt":6792,"src":6793},"https://caniuse.com/opus","https://static.031130.xyz/uploads/2025/06/03/ec3b5dbcbcc29.webp",[109,6795,6797],{"id":6796},"音频码率太高再砍一刀","音频码率太高？再砍一刀",[17,6799,6800],{},"上面说了那么多的视频压缩算法，其实只是局限于视频画面的压缩，音频这一块其实还能再压一点出来。",[38,6802,6805],{"className":6803,"code":6804,"language":2607},[5470],"Stream #0:1[0x2](und): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, stereo, fltp, 128 kb/s (default)\n",[30,6806,6804],{"__ignoreMap":43},[17,6808,6809],{},"一个介绍产品的视频，在音频部分采用了 48000 Hz 双声道采样，码率高达 128 kbps，说实话有点奢侈。我直接砍成 64 kbps 单声道，又省下 2MB 的文件大小。",[109,6811,6812],{"id":6812},"写在最后",[17,6814,6815],{},"对于前端开发者来说，视频压缩算法的选择早已不是单纯的“压得小不小”问题，而是一场在设备能力、浏览器兼容性、用户体验与开发成本之间的博弈。我们既要跟上技术演进的节奏，拥抱 AV1、VP9 等更高效的编解码器，也要在实际项目中照顾到现实中的设备分布和播放环境。",[17,6817,6818],{},"在理想与落地之间，我们所能做的，就是充分利用 HTML5 提供的容错机制，搭配好合适的编码策略和封装格式，让网页上的每一段视频都能在合适的设备上、以合理的代价播放出来。",[17,6820,6821,6822,6824,6825,6827],{},"毕竟，Web 从来不缺“能不能做”，缺的是“做得优雅”。如果说编码器是硬件工程师和视频平台的战场，那 ",[30,6823,6669],{}," 标签下的这几行 ",[30,6826,6673],{},"，才是属于我们前端工程师的战壕。",[109,6829,937],{"id":937},[909,6831,6832,6839,6846,6853,6860,6867,6874,6881,6887,6894,6901,6908,6915,6922,6929,6936,6946,6953,6960],{},[912,6833,6834],{},[709,6835,6838],{"href":6836,"rel":6837},"https://developer.mozilla.org/zh-CN/docs/Web/Media/Guides/Formats/Video_codecs",[713],"网页视频编码指南 - Web 媒体技术 | MDN",[912,6840,6841],{},[709,6842,6845],{"href":6843,"rel":6844},"https://research.netflix.com/research-area/video-encoding-and-quality",[713],"Encoding & Quality - Netflix Research",[912,6847,6848],{},[709,6849,6852],{"href":6850,"rel":6851},"https://optiview.dolby.com/resources/blog/playback/how-the-vp9-codec-supports-now-streaming-to-apple-devices-more/",[713],"How the VP9 Codec Supports Now Streaming to Apple Devices & More | dolby.io",[912,6854,6855],{},[709,6856,6859],{"href":6857,"rel":6858},"https://www.chromium.org/audio-video/",[713],"Audio/Video | The Chromium Project",[912,6861,6862],{},[709,6863,6866],{"href":6864,"rel":6865},"https://caniuse.com/av1",[713],"AV1 video format | Can I use... Support tables for HTML5, CSS3, etc",[912,6868,6869],{},[709,6870,6873],{"href":6871,"rel":6872},"https://caniuse.com/webm",[713],"WebM video format | Can I use... Support tables for HTML5, CSS3, etc",[912,6875,6876],{},[709,6877,6880],{"href":6878,"rel":6879},"https://caniuse.com/hevc",[713],"HEVC/H.265 video format | Can I use... Support tables for HTML5, CSS3, etc",[912,6882,6883],{},[709,6884,6886],{"href":6792,"rel":6885},[713],"Opus audio format | Can I use... Support tables for HTML5, CSS3, etc",[912,6888,6889],{},[709,6890,6893],{"href":6891,"rel":6892},"https://caniuse.com/mpeg4",[713],"MPEG-4/H.264 video format | Can I use... Support tables for HTML5, CSS3, etc",[912,6895,6896],{},[709,6897,6900],{"href":6898,"rel":6899},"https://en.wikipedia.org/wiki/AV1",[713],"AV1 - Wikipedia",[912,6902,6903],{},[709,6904,6907],{"href":6905,"rel":6906},"https://en.wikipedia.org/wiki/High_Efficiency_Video_Coding",[713],"High Efficiency Video Coding - Wikipedia",[912,6909,6910],{},[709,6911,6914],{"href":6912,"rel":6913},"https://en.wikipedia.org/wiki/VP9",[713],"VP9 - Wikipedia",[912,6916,6917],{},[709,6918,6921],{"href":6919,"rel":6920},"https://en.wikipedia.org/wiki/Advanced_Video_Coding",[713],"Advanced Video Coding - Wikipedia",[912,6923,6924],{},[709,6925,6928],{"href":6926,"rel":6927},"https://www.intel.com/content/www/us/en/developer/articles/technical/encode-and-decode-capabilities-for-7th-generation-intel-core-processors-and-newer.html",[713],"Encode and Decode Capabilities for 7th Generation Intel® Core™...",[912,6930,6931],{},[709,6932,6935],{"href":6933,"rel":6934},"https://zh.wikipedia.org/zh-cn/MacOS_High_Sierra",[713],"macOS High Sierra - 维基百科，自由的百科全书",[912,6937,6938],{},[709,6939,6942,6943],{"href":6940,"rel":6941},"https://www.androidpolice.com/2018/10/17/chrome-70-adds-av1-video-support-improves-pwas-windows-apk-download/",[713],"Chrome 70 adds AV1 video support, improves PWAs on Windows, and more ",[47,6944,6945],{},"APK Download",[912,6947,6948],{},[709,6949,6952],{"href":6950,"rel":6951},"https://www.mozilla.org/en-US/firefox/android/113.0/releasenotes/",[713],"Firefox for Android 113.0, See All New Features, Updates and Fixes",[912,6954,6955],{},[709,6956,6959],{"href":6957,"rel":6958},"https://www.bilibili.com/video/BV1nW4y1V7kR/",[713],"视频网站的“蓝光”是怎么骗你的？——视频画质全解析【柴知道】_哔哩哔哩_bilibili",[912,6961,6962],{},"《4K 清晰度不如4年前，视频变糊是你的错觉吗》- 原视频已 404",[955,6964,6965],{},"html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":43,"searchDepth":56,"depth":56,"links":6967},[6968,6975,6979,6980,6981],{"id":6285,"depth":56,"text":6286,"children":6969},[6970,6971,6972,6973,6974],{"id":6289,"depth":62,"text":6290},{"id":6326,"depth":62,"text":6327},{"id":6349,"depth":62,"text":6350},{"id":6377,"depth":62,"text":6378},{"id":6400,"depth":62,"text":6400},{"id":6642,"depth":56,"text":6643,"children":6976},[6977,6978],{"id":6662,"depth":62,"text":6663},{"id":6773,"depth":62,"text":6774},{"id":6796,"depth":56,"text":6797},{"id":6812,"depth":56,"text":6812},{"id":937,"depth":56,"text":937},{"title":6983,"date":6984,"path":6985,"tags":6986,"body":6987},"el-image 和 el-table 怎么就打架了？Stacking Context 是什么？","2025-05-31 00:29:40","/2025/05/31/el-image-and-el-table-why-the-fight-and-what-is-a-stacking-context",[1965,12,4879,3640,1968],{"type":14,"value":6988,"toc":7204},[6989,6992,6998,7005,7007,7010,7015,7018,7023,7061,7064,7068,7071,7074,7086,7089,7093,7096,7125,7129,7133,7136,7139,7142,7145,7155,7162,7164,7201],[17,6990,6991],{},"这是精弘内部的图床开发时遇到的事情，大一的小朋友反馈说 el-image 和 el-table 打架了。",[17,6993,6994],{},[689,6995],{"alt":6996,"src":6997},"截图","https://static.031130.xyz/uploads/2025/05/31/c6674f6f13955.webp",[17,6999,7000,7004],{},[709,7001,5770],{"href":7002,"rel":7003},"https://static.031130.xyz/demo/el-image-el-table-conflict.html",[713]," 的 iframe 引入",[4833,7006],{"src":7002,"width":4836,"height":4837,"allowFullScreen":164},[17,7008,7009],{},"看到后面的表格透出 el-image 的预览层，我的第一反应是叫小朋友去检查 z-index 是否正确，el-image 的 mask 遮罩的 z-index 是否大于表格。",[17,7011,7012],{},[689,7013],{"alt":43,"src":7014},"https://static.031130.xyz/uploads/2025/05/31/1c20b4ea0b37e.webp",[17,7016,7017],{},"经过我本地调试，发现 z-index 的设置确实没问题，但后面的元素为什么会透出来？谷歌搜索一番，找到了这篇文章",[17,7019,7020],{},[689,7021],{"alt":43,"src":7022},"https://static.031130.xyz/uploads/2025/05/31/99845899e3524.webp",[1497,7024,7025,7028],{},[17,7026,7027],{},"给 el-table 加一行如下代码即可",[38,7029,7033],{"className":7030,"code":7031,"language":7032,"meta":43,"style":43},"language-css shiki shiki-themes github-light github-dark",".el-table__cell {\n    position: static !important;\n}\n","css",[30,7034,7035,7042,7057],{"__ignoreMap":43},[47,7036,7037,7040],{"class":49,"line":50},[47,7038,7039],{"class":145},".el-table__cell",[47,7041,579],{"class":149},[47,7043,7044,7047,7049,7052,7055],{"class":49,"line":56},[47,7045,7046],{"class":138},"    position",[47,7048,2353],{"class":149},[47,7050,7051],{"class":138},"static",[47,7053,7054],{"class":134}," !important",[47,7056,3770],{"class":149},[47,7058,7059],{"class":49,"line":62},[47,7060,2585],{"class":149},[17,7062,7063],{},"经本地调试确认，这一方案确实能解决问题，但为什么呢？这就涉及到 Stacking Context （层叠上下文）了。",[109,7065,7067],{"id":7066},"stacking-context层叠上下文究竟是什么","Stacking Context（层叠上下文）究竟是什么？",[17,7069,7070],{},"简单来说，Stacking Context 可以被类比成画布。在同一块画布上，z-index 值越高的元素就处于越上方，会覆盖掉 z-index 较低的元素，这也是为什么我最开始让检查 z-index 的设置是否有问题。但问题出在 Stacking Context 也是有上下顺序之分的。",[17,7072,7073],{},"现在假设我们有 A、B 两块画布，在 A 上有一个设置了 z-index 为 1145141919810 的元素。那这个元素具备非常高的优先级，理应出现在浏览器窗口的最上方。但如果 B 画布的优先级高于 A 画布，那么 B 元素上的所有元素都会优先显示（当了躺赢狗）。那么画布靠什么来决定优先级呢？",[909,7075,7076,7081],{},[912,7077,7078],{},[21,7079,7080],{},"处于同级的 Stacking Context 之间靠 z-index 值来区分优先级",[912,7082,7083],{},[21,7084,7085],{},"对于 z-index 值相同的 Stacking Context，在 html 文档中位置靠后的元素拥有更高的优先级",[17,7087,7088],{},"第二条规则也能解释为什么在上面的 demo 中，只有在表格中位置排在图片元素后面的元素出现了透出来的情况。",[109,7090,7092],{"id":7091},"所以为什么-el-image-和-el-table-打架了","所以为什么 el-image 和 el-table 打架了？",[17,7094,7095],{},"这次的冲突主要是下面两个因素引起的",[1103,7097,7098,7114],{},[912,7099,7100,7101,7104,7105,7107,7111,7113],{},"el-table 给每个 cell 都设置了 ",[30,7102,7103],{},"position: relative"," 的 css 属性，而 position 被设为 relative 时，当前元素就会生成一个 Stacking Context。",[5426,7106],{},[689,7108],{"alt":7109,"src":7110},"image-20250531013029154","https://static.031130.xyz/uploads/2025/05/31/9df43b865b3c6.webp",[5426,7112],{},"所以我们这么一个有十个格子的表格，其实就生成了十个画布。而这其中每个画布 z-index 都为 1。根据刚才的规则，在图片格子后面的那些格子对应的 html 代码片段在整体的 html 文档中更靠后，所以他们的优先级都高于图片格子。",[912,7115,7116,7117,7119,7122,7124],{},"el-image 的预览功能所展开的遮罩层处于 el-image 标签内部",[5426,7118],{},[689,7120],{"alt":43,"src":7121},"https://static.031130.xyz/uploads/2025/05/31/f18a2b54afd63.webp",[5426,7123],{},"上图中橙色部分是 el-image 在预览时提供的遮罩，可以看到 element-plus 组件的 image 预览的默认行为是将预览时所需要的遮罩层直接放在 \u003Cel-image> \u003C/el-image> 标签内部，这导致 el-image 的遮罩层被困在一个低优先级的 Stacking Context 中，后面的格子里的内容就是能凭借高优先级透过来。",[109,7126,7128],{"id":7127},"所以解决方案是什么","所以解决方案是什么？",[1057,7130,7132],{"id":7131},"更改-position-值在这里确实是可行的","更改 position 值在这里确实是可行的",[17,7134,7135],{},"上面我谷歌搜到的将 el-table 中 cell 的 position 值强制设为 static 确实是有效的，因为 static 不会创建新的 Stacking Context，这样就不会有现在的问题。",[1057,7137,7138],{"id":7138},"将需要出现在最顶层的代码放置在优先级最大的位置是更常见的方案",[17,7140,7141],{},"但别的组件库在处理这个需求时，一般会将预览时提供的遮罩的 html 代码片段直接插入到 body 标签内部的最尾部，并设置一个相对比较大的 z-index 值，以确保这个遮罩层能够获得最高的优先级，以此能出现在屏幕的最上方。（像一些 dialog 对话框、popover 悬浮框也都是这个原理）。",[17,7143,7144],{},"事实上，element-plus 组件库也提供了这个功能",[1497,7146,7147],{},[17,7148,7149,7152,7153],{},[21,7150,7151],{},"preview-teleported:"," image-viewer 是否插入至 body 元素上。嵌套的父元素属性会发生修改时应该将此属性设置为 ",[30,7154,4354],{},[17,7156,7157,7158,7161],{},"所以在使用 el-image 时传入一个 ",[30,7159,7160],{},":preview-teleported=\"true\""," 是一个更普适的方案，因为我们并不能确保 el-image 的父元素除了 el-table 的 cell 以外还有什么其他的父元素会创建新的 Stacking Context。",[109,7163,937],{"id":937},[909,7165,7166,7173,7180,7187,7194],{},[912,7167,7168],{},[709,7169,7172],{"href":7170,"rel":7171},"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_positioned_layout/Stacking_context",[713],"层叠上下文 - CSS：层叠样式表 | MDN",[912,7174,7175],{},[709,7176,7179],{"href":7177,"rel":7178},"https://juejin.cn/post/6844903667175260174",[713],"彻底搞懂CSS层叠上下文、层叠等级、层叠顺序、z-index最近，在项目中遇到一个关于CSS中元素z-index属性的问 - 掘金",[912,7181,7182],{},[709,7183,7186],{"href":7184,"rel":7185},"https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/",[713],"深入理解CSS中的层叠上下文和层叠顺序 «  张鑫旭-鑫空间-鑫生活",[912,7188,7189],{},[709,7190,7193],{"href":7191,"rel":7192},"https://element-plus.org/zh-CN/component/image.html",[713],"Image 图片 | Element Plus",[912,7195,7196],{},[709,7197,7200],{"href":7198,"rel":7199},"https://blog.csdn.net/qq_61402485/article/details/131202117",[713],"element ui e-image 和e-table一起使用显示问题_el-table el-image-CSDN博客",[955,7202,7203],{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":43,"searchDepth":56,"depth":56,"links":7205},[7206,7207,7208,7212],{"id":7066,"depth":56,"text":7067},{"id":7091,"depth":56,"text":7092},{"id":7127,"depth":56,"text":7128,"children":7209},[7210,7211],{"id":7131,"depth":62,"text":7132},{"id":7138,"depth":62,"text":7138},{"id":937,"depth":56,"text":937},127,1761697382861]