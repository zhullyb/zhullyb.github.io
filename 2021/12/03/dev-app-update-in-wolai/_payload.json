[{"data":1,"prerenderedAt":294},["ShallowReactive",2],{"post-2021-12-03-dev-app-update-in-wolai":3,"surround-2021-12-03-dev-app-update-in-wolai":282,"randomIndex/2021/12/03/dev-app-update-in-wolai/":293},{"id":4,"title":5,"body":6,"date":268,"description":269,"extension":270,"meta":271,"navigation":272,"path":273,"rawbody":274,"seo":275,"stem":276,"sticky":277,"tags":278,"__hash__":281},"posts/posts/dev-app-update-in-wolai.md","wolai再打包遇到的问题--electron应用的dev判断机制",{"type":7,"value":8,"toc":265},"minimark",[9,26,33,36,54,57,68,74,81,93,125,128,131,195,198,204,207,261],[10,11,12,13,20,21,25],"p",{},"之前对于electron懵懵懂懂的时候就把 ",[14,15,19],"a",{"href":16,"rel":17},"https://www.wolai.com/",[18],"nofollow","wolai"," 给打包上了 AUR ，那会儿年少无知，也不懂得把内置的 electron 拆开来换成系统内置的以节省空间。前一阵子给CN源打完 Motrix 以后突然想起来自己在 AUR 上还有维护一个叫 wolai 的electron 应用，于是打算把软件内置的 electron 拆出来。尝试使用 ",[22,23,24],"code",{},"electron /path/to/app.asar"," 命令启动的时候发现了以下的问题。",[10,27,28],{},[29,30],"img",{"alt":31,"src":32},"报错了","https://static.031130.xyz/uploads/2024/08/12/62f3caf822bec.webp",[10,34,35],{},"虽然这个报错无关紧要，直接右上角叉掉也不影响软件正常使用，但是就这样推上 AUR 似乎有些不太妥当。于是使用搜索引擎查找答案。",[10,37,38,39,42,43],{},"发现是使用系统自带的 electron 启动时，app.asar 内置的一个叫 ",[22,40,41],{},"electron-updater"," 的模块在自动检测更新时会误认为我们此时处于开发模式，于是会尝试读取 app.asar 内部的 dev-app-update.yml 以查询更新。",[44,45,46],"sup",{},[14,47,53],{"href":48,"ariaDescribedBy":49,"dataFootnoteRef":51,"id":52},"#user-content-fn-1",[50],"footnote-label","","user-content-fnref-1","1",[10,55,56],{},"但问题在于这个 app.asar 并不是 wolai 开发者在开发时使用 development 模式打出来的包，应该是 production ，所以内置的那个文件名叫 app-update.yml ，少了个dev 前缀，就很尴尬。",[10,58,59,60],{},"以下内容来自一篇简书的文章",[44,61,62],{},[14,63,67],{"href":64,"ariaDescribedBy":65,"dataFootnoteRef":51,"id":66},"#user-content-fn-2",[50],"user-content-fnref-2","2",[69,70,71],"blockquote",{},[10,72,73],{},"所以调试的时候可以建一个default-app.yml文件放在D:\\hzhh123\\workspace\\vue-work\\electron-demo1\\node_modules\\electron\\dist\\resources\\default_app.asar 下，这里就涉及到asar解压缩，但是这样会很麻烦，打包后也需要这样替换，麻烦，所幸electron-updater中提供了这个文件的属性配置updateConfigPath，可以通过设置这个属性来解决这个问题",[10,75,76,77,80],{},"很遗憾，我们并不是该应用的开发者，并不能指定",[22,78,79],{},"electron-uploader","构建时的参数，所以只能考虑解压缩 app.asar 手动放入 dev-app-update.yml 的方案。",[10,82,83,84,92],{},"根据又一篇简书的文章",[44,85,86],{},[14,87,91],{"href":88,"ariaDescribedBy":89,"dataFootnoteRef":51,"id":90},"#user-content-fn-3",[50],"user-content-fnref-3","3","，我们了解到 npm 中有一个叫 asar 的程序可以帮助我们解压缩 app.asar。我这里直接将内容搬过来",[69,94,95,98,113,116],{},[10,96,97],{},"解压",[99,100,104],"pre",{"className":101,"code":102,"language":103,"meta":51,"style":51},"language-undefined shiki shiki-themes github-light github-dark","asar extract 压缩文件  解压文件夹\n","undefined",[22,105,106],{"__ignoreMap":51},[107,108,111],"span",{"class":109,"line":110},"line",1,[107,112,102],{},[10,114,115],{},"压缩：如果压缩文件存在，则会被替换",[99,117,119],{"className":101,"code":118,"language":103,"meta":51,"style":51},"asar pack 文件夹  压缩文件名\n",[22,120,121],{"__ignoreMap":51},[107,122,123],{"class":109,"line":110},[107,124,118],{},[10,126,127],{},"原文是让我们直接使用 npm 下载安装 asar 程序，然而这就会让打包过程变得很复杂，所幸 Archlinux 官方源中已经将这个程序打完了，我们可以直接将 asar 写入 makedepends。",[10,129,130],{},"大概就写成了这个样子。",[99,132,136],{"className":133,"code":134,"language":135,"meta":51,"style":51},"language-bash shiki shiki-themes github-light github-dark","asar extract ${srcdir}/squashfs-root/resources/app.asar ${srcdir}/new_app\nmv  ${srcdir}/squashfs-root/resources/app-update.yml ${srcdir}/new_app/dev-app-update.yml\nasar pack ${srcdir}/new_app ${srcdir}/squashfs-root/resources/app.asar\n","bash",[22,137,138,160,177],{"__ignoreMap":51},[107,139,140,144,148,152,155,157],{"class":109,"line":110},[107,141,143],{"class":142},"sScJk","asar",[107,145,147],{"class":146},"sZZnC"," extract",[107,149,151],{"class":150},"sVt8B"," ${srcdir}",[107,153,154],{"class":146},"/squashfs-root/resources/app.asar",[107,156,151],{"class":150},[107,158,159],{"class":146},"/new_app\n",[107,161,163,166,169,172,174],{"class":109,"line":162},2,[107,164,165],{"class":142},"mv",[107,167,168],{"class":150},"  ${srcdir}",[107,170,171],{"class":146},"/squashfs-root/resources/app-update.yml",[107,173,151],{"class":150},[107,175,176],{"class":146},"/new_app/dev-app-update.yml\n",[107,178,180,182,185,187,190,192],{"class":109,"line":179},3,[107,181,143],{"class":142},[107,183,184],{"class":146}," pack",[107,186,151],{"class":150},[107,188,189],{"class":146},"/new_app",[107,191,151],{"class":150},[107,193,194],{"class":146},"/squashfs-root/resources/app.asar\n",[10,196,197],{},"程序正常启动，没有弹出之前的对话框了。",[10,199,200],{},[29,201],{"alt":202,"src":203},"成功啦","https://static.031130.xyz/uploads/2024/08/12/62f3cafb6b04d.webp",[10,205,206],{},"参考:",[208,209,212,218],"section",{"className":210,"dataFootnotes":51},[211],"footnotes",[213,214,217],"h2",{"className":215,"id":50},[216],"sr-only","Footnotes",[219,220,221,237,249],"ol",{},[222,223,225,229,230],"li",{"id":224},"user-content-fn-1",[14,226,227],{"href":227,"rel":228},"https://github.com/electron-userland/electron-builder/issues/1505",[18]," ",[14,231,236],{"href":232,"ariaLabel":233,"className":234,"dataFootnoteBackref":51},"#user-content-fnref-1","Back to reference 1",[235],"data-footnote-backref","↩",[222,238,240,229,244],{"id":239},"user-content-fn-2",[14,241,242],{"href":242,"rel":243},"https://www.jianshu.com/p/15bde714e198",[18],[14,245,236],{"href":246,"ariaLabel":247,"className":248,"dataFootnoteBackref":51},"#user-content-fnref-2","Back to reference 2",[235],[222,250,252,229,256],{"id":251},"user-content-fn-3",[14,253,254],{"href":254,"rel":255},"https://www.jianshu.com/p/17d97e6bf174",[18],[14,257,236],{"href":258,"ariaLabel":259,"className":260,"dataFootnoteBackref":51},"#user-content-fnref-3","Back to reference 3",[235],[262,263,264],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}",{"title":51,"searchDepth":162,"depth":162,"links":266},[267],{"id":50,"depth":162,"text":217},"2021-12-03 22:53:25","之前对于electron懵懵懂懂的时候就把 wolai 给打包上了 AUR ，那会儿年少无知，也不懂得把内置的 electron 拆开来换成系统内置的以节省空间。前一阵子给CN源打完 Motrix 以后突然想起来自己在 AUR 上还有维护一个叫 wolai 的electron 应用，于是打算把软件内置的 electron 拆出来。尝试使用 electron /path/to/app.asar 命令启动的时候发现了以下的问题。","md",{},true,"/2021/12/03/dev-app-update-in-wolai","---\ntitle: wolai再打包遇到的问题--electron应用的dev判断机制\ndate: 2021-12-03 22:53:25\nsticky:\ntags:\n- Archlinux\n- electron\n---\n\n之前对于electron懵懵懂懂的时候就把 [wolai](https://www.wolai.com/) 给打包上了 AUR ，那会儿年少无知，也不懂得把内置的 electron 拆开来换成系统内置的以节省空间。前一阵子给CN源打完 Motrix 以后突然想起来自己在 AUR 上还有维护一个叫 wolai 的electron 应用，于是打算把软件内置的 electron 拆出来。尝试使用 `electron /path/to/app.asar` 命令启动的时候发现了以下的问题。\n\n![报错了](https://static.031130.xyz/uploads/2024/08/12/62f3caf822bec.webp)\n\n虽然这个报错无关紧要，直接右上角叉掉也不影响软件正常使用，但是就这样推上 AUR 似乎有些不太妥当。于是使用搜索引擎查找答案。\n\n发现是使用系统自带的 electron 启动时，app.asar 内置的一个叫 `electron-updater` 的模块在自动检测更新时会误认为我们此时处于开发模式，于是会尝试读取 app.asar 内部的 dev-app-update.yml 以查询更新。[^1]\n\n但问题在于这个 app.asar 并不是 wolai 开发者在开发时使用 development 模式打出来的包，应该是 production ，所以内置的那个文件名叫 app-update.yml ，少了个dev 前缀，就很尴尬。\n\n以下内容来自一篇简书的文章[^2]\n\n> 所以调试的时候可以建一个default-app.yml文件放在D:\\hzhh123\\workspace\\vue-work\\electron-demo1\\node_modules\\electron\\dist\\resources\\default_app.asar 下，这里就涉及到asar解压缩，但是这样会很麻烦，打包后也需要这样替换，麻烦，所幸electron-updater中提供了这个文件的属性配置updateConfigPath，可以通过设置这个属性来解决这个问题\n\n很遗憾，我们并不是该应用的开发者，并不能指定`electron-uploader`构建时的参数，所以只能考虑解压缩 app.asar 手动放入 dev-app-update.yml 的方案。\n\n根据又一篇简书的文章[^3]，我们了解到 npm 中有一个叫 asar 的程序可以帮助我们解压缩 app.asar。我这里直接将内容搬过来\n\n> 解压\n>\n> ```undefined\n> asar extract 压缩文件  解压文件夹\n> ```\n>\n> 压缩：如果压缩文件存在，则会被替换\n>\n> ```undefined\n> asar pack 文件夹  压缩文件名\n> ```\n\n原文是让我们直接使用 npm 下载安装 asar 程序，然而这就会让打包过程变得很复杂，所幸 Archlinux 官方源中已经将这个程序打完了，我们可以直接将 asar 写入 makedepends。\n\n大概就写成了这个样子。\n\n```bash\nasar extract ${srcdir}/squashfs-root/resources/app.asar ${srcdir}/new_app\nmv  ${srcdir}/squashfs-root/resources/app-update.yml ${srcdir}/new_app/dev-app-update.yml\nasar pack ${srcdir}/new_app ${srcdir}/squashfs-root/resources/app.asar\n```\n\n程序正常启动，没有弹出之前的对话框了。\n\n![成功啦](https://static.031130.xyz/uploads/2024/08/12/62f3cafb6b04d.webp)\n\n参考: \n\n[^1]: https://github.com/electron-userland/electron-builder/issues/1505\n[^2]: https://www.jianshu.com/p/15bde714e198\n[^3]: https://www.jianshu.com/p/17d97e6bf174\n\n",{"title":5,"description":269},"posts/dev-app-update-in-wolai",false,[279,280],"Archlinux","electron","c0VCdFxF-L8suN7fRymrKC-b3snw1NLGRHz1vJoql_U",[283,288],{"title":284,"path":285,"stem":286,"date":287,"children":-1},"Cutefish的前世今生","/2021/12/12/the-history-of-cutefish","posts/the-history-of-cutefish","2021-12-12 00:10:34",{"title":289,"path":290,"stem":291,"date":292,"children":-1},"Typora与我","/2021/11/26/typora-and-me","posts/typora-and-me","2021-11-26 23:05:05",18,1761699629645]