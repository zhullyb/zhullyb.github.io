[{"data":1,"prerenderedAt":509},["ShallowReactive",2],{"post-2021-09-11-detailed-explanation-for-aur":3,"surround-2021-09-11-detailed-explanation-for-aur":497,"randomIndex/2021/09/11/detailed-explanation-for-aur":508},{"id":4,"title":5,"body":6,"date":484,"description":46,"extension":485,"meta":486,"navigation":488,"path":489,"rawbody":490,"seo":491,"stem":492,"sticky":487,"tags":493,"__hash__":496},"posts/posts/detailed-explanation-for-aur.md","使用AUR(Helper)安装软件时究竟发生了什么？对于常见的构建错误如何解决？",{"type":7,"value":8,"toc":468},"minimark",[9,16,21,30,37,47,83,86,89,116,119,141,147,151,158,165,169,172,176,183,189,192,225,227,230,236,242,246,379,383,386,393,400,413,417,420,422,425,431,434,453,456,464],[10,11,12],"blockquote",{},[13,14,15],"p",{},"虽然对于没有能力手动修改/编写PKGBUILD的Arch用户其实是不应该使用AUR中的包的，这些软件的PKGBUILD可以由个人随意发布，并不能保证安全性，但是作为Archlinux的特色，但随着AUR Helper的趋于便利，还是吸引了不少小白使用AUR。本文将主要讲一讲 AUR Helper 帮助我们安装软件时到底做了些什么事情，并提供一些使用AUR Helper构建时常见错误的解决方案。",[17,18,20],"h2",{"id":19},"partⅰ基本原理","PartⅠ基本原理",[22,23,25,29],"h3",{"id":24},"makepkg是如何工作的",[26,27,28],"code",{},"makepkg","是如何工作的？",[13,31,32,33,36],{},"以钉钉举例，我们可以从AUR上使用 ",[26,34,35],{},"git clone https://aur.archlinux.org/dingtalk-bin.git"," 获取到由这个包的维护者为我们提前写好的构建脚本。他的目录大概是长成下面这个样子:",[38,39,44],"pre",{"className":40,"code":42,"language":43},[41],"language-text","dingtalk-bin\n├── com.alibabainc.dingtalk.desktop\n├── dingtalk.sh\n├── .git\n├── .gitignore\n├── PKGBUILD\n├── service-terms-zh\n└── .SRCINFO\n","text",[26,45,42],{"__ignoreMap":46},"",[48,49,50,58,64,70],"ul",{},[51,52,53,54,57],"li",{},"其中，",[26,55,56],{},".git","是git的工作目录，可以忽视。",[51,59,60,63],{},[26,61,62],{},".gitignore","属于git的配置文件之一，我们也不用管。",[51,65,66,69],{},[26,67,68],{},"PKGBUILD","是这个目录下最重要的东西，是一个用于提供参数的脚本。makepkg通过执行PKGBUILD脚本来获取到参数，自动进行下载和构建过程。",[51,71,72,75,76,75,79,82],{},[26,73,74],{},"service-terms-zh",", ",[26,77,78],{},"com.alibabainc.dingtalk.desktop",[26,80,81],{},"dingtalk.sh","是包里所需要用到的东西。",[84,85],"hr",{},[13,87,88],{},"当我们cd到这个目录下执行makepkg时，",[13,90,91,92,95,96,99,100,103,104,107,108,111,112,115],{},"makepkg会调用",[26,93,94],{},"curl"," / ",[26,97,98],{},"git","下载PKGBUILD中",[26,101,102],{},"source=()","部分中以",[26,105,106],{},"http(s)","协议头或者",[26,109,110],{},"git+","开头的链接，这些东西将会被下载到这个目录的",[26,113,114],{},"src","文件夹下。",[13,117,118],{},"对于curl下载的东西，makepkg会使用校验码核对下载到的文件是否完整、是否是当初这个包的维护者下载到的这一个。",[13,120,121,122,125,126,125,129,132,133,137,138,115],{},"校验通过后，makepkg会依次执行",[26,123,124],{},"prepare(){}","、",[26,127,128],{},"build(){}",[26,130,131],{},"package(){}","函数中的命令陆续完成",[134,135,136],"em",{},"准备、编译","过程，并将最终要打进包里的文件放置到",[26,139,140],{},"pkg",[13,142,143,144,146],{},"最后，makepkg将会将",[26,145,140],{},"文件夹的内容压缩成包。",[22,148,150],{"id":149},"aur-helper-干了些什么","AUR Helper 干了些什么",[13,152,153,154,157],{},"我们还是以钉钉为例，看看我们执行",[26,155,156],{},"yay dingtalk-bin","时到底发生了什么。",[13,159,160],{},[161,162],"img",{"alt":163,"src":164},"当你使用yay安装软件到底发生了什么","https://static.031130.xyz/uploads/2024/08/12/62f3cdb03ec8c.webp",[17,166,168],{"id":167},"partⅱ常见错误解决方案","PartⅡ常见错误解决方案",[13,170,171],{},"如果有其他情况觉得可以完善的，欢迎在评论区留言。",[22,173,175],{"id":174},"_1-base-devel-没有安装","1. base-devel 没有安装",[13,177,178,179,182],{},"正如上面所说的，没有安装",[26,180,181],{},"base-devel","组，赶紧补上!",[13,184,185,186,188],{},"由于",[26,187,181],{},"并不是一个具体的包，而是由多个包构成的包组，其实并没有很好的方法来检测你是否已经安装。",[13,190,191],{},"所以如果你不确定，你也可以执行下面的命令来确保自己已经安装。",[38,193,197],{"className":194,"code":195,"language":196,"meta":46,"style":46},"language-bash shiki shiki-themes github-light github-dark","sudo pacman -S base-devel --noconfirm --needed\n","bash",[26,198,199],{"__ignoreMap":46},[200,201,204,208,212,216,219,222],"span",{"class":202,"line":203},"line",1,[200,205,207],{"class":206},"sScJk","sudo",[200,209,211],{"class":210},"sZZnC"," pacman",[200,213,215],{"class":214},"sj4cs"," -S",[200,217,218],{"class":210}," base-devel",[200,220,221],{"class":214}," --noconfirm",[200,223,224],{"class":214}," --needed\n",[84,226],{},[13,228,229],{},"常见表现:",[38,231,234],{"className":232,"code":233,"language":43},[41],"ERROR: Cannot find the strip binary required for object file stripping.\n",[26,235,233],{"__ignoreMap":46},[38,237,240],{"className":238,"code":239,"language":43},[41],"PKGBUILD: line XXX XXX: command not found\n",[26,241,239],{"__ignoreMap":46},[22,243,245],{"id":244},"_2-source源文件下载失败","2. source源文件下载失败",[247,248,249,364,370],"ol",{},[51,250,251,255,256,259,263,265,266,269,270,290,292,304,313,315,316,319,320,323,324,326,329,331,332,361,363],{},[252,253,254],"h4",{"id":254},"网络问题","国内的网络问题不用多说了，大多数情况下都是Github连接不上。",[257,258],"br",{},[161,260],{"alt":261,"src":262},"yay下载失败","https://static.031130.xyz/uploads/2024/08/12/62f3cc9c9dda8.webp",[257,264],{},"最简单的解决方案就是把source里下载失败的东西通过特殊手段（比如你浏览器设置下代理，或者找找fastgit这种反代）下载下来以后直接扔到PKGBUILD所在的路径，然后手动执行",[26,267,268],{},"makepkg -si","。",[10,271,272,275],{},[13,273,274],{},"-s代表自动下载makedepend，-i表示构建成功以后自动安装",[13,276,277,278,281,282,289],{},"yay存放PKGBUILD的默认路径是在",[26,279,280],{},"$HOME/.cache/yay/$pkgname","下面，具体可以参考我的另一篇关于",[283,284,288],"a",{"href":285,"rel":286},"https://blog.zhullyb.top/2021/04/04/yay-more/#builddir-lt-dir-gt",[287],"nofollow","yay的用法详解","的博客。",[257,291],{},[293,294,295,296,303],"strong",{},"我在这里再讲一种使用 ",[283,297,300],{"href":298,"rel":299},"http://fastgit.org/",[287],[134,301,302],{},"fastgit"," 作为反代加速github下载的方法。",[305,306,307,308,269],"del",{},"如果觉得fastgit帮助到了你，你可以考虑",[283,309,312],{"href":310,"rel":311},"http://fastgit.org/donate.html",[287],"给fastgit项目打钱",[257,314],{},"当你的yay出现这个询问菜单时，（也就是出现",[26,317,318],{},"Diffs to show","/",[26,321,322],{},"显示哪些差异？","字样时）",[257,325],{},[161,327],{"alt":46,"src":328},"https://static.031130.xyz/uploads/2024/08/12/62f3cca0c7aba.webp",[257,330],{},"我们再开一个终端，输入",[38,333,335],{"className":194,"code":334,"language":196,"meta":46,"style":46},"sed -i \"s|github.com|hub.fastgit.org|g\" $HOME/.cache/yay/*/PKGBUILD\n",[26,336,337],{"__ignoreMap":46},[200,338,339,342,345,348,352,355,358],{"class":202,"line":203},[200,340,341],{"class":206},"sed",[200,343,344],{"class":214}," -i",[200,346,347],{"class":210}," \"s|github.com|hub.fastgit.org|g\"",[200,349,351],{"class":350},"sVt8B"," $HOME",[200,353,354],{"class":210},"/.cache/yay/",[200,356,357],{"class":214},"*",[200,359,360],{"class":210},"/PKGBUILD\n",[257,362],{},"接着就下一步安装即可。",[51,365,366,369],{},[252,367,368],{"id":368},"链接失效","这种情况多见于维护者维护不到位，上游放出了新版本包并删除老版本包以后维护者没有及时跟进的。你可以去逛一逛AUR的评论区查看解决方案，或者去查找上游的最新版本是多少，尝试更改PKGBUILD中的pkgver参数和checksum以后尝试makepkg。",[51,371,372,375,376],{},[252,373,374],{"id":374},"需要手动下载","一般情况下是上游没有提供直链，makepkg无法自行下载，需要人工介入。解决方法同上面的",[283,377,254],{"href":378},"#%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98",[22,380,382],{"id":381},"_3-checksum-错误","3. checksum 错误",[13,384,385],{},"上文已经提到过，checksum用于判断你所下载到的软件和维护者当初下载到的是否一致。但是有些情况下，确实是维护者忘了更新checksum值了，因此我们需要做一个判断。",[13,387,388,389,392],{},"打开",[26,390,391],{},".SCRINFO","，找到checksum报错的那个文件的链接。",[13,394,395,396,399],{},"使用wget/curl等工具将他下载下来，可以通过",[26,397,398],{},"md5sum+文件名","的方式获取他们的md5值。连续下载两次，核对两次的检验值是否一致。",[13,401,402,403,406,407,410,411,269],{},"如果结果一致，那么说明并不是网络波动导致的检验值不符，而是维护者没有及时跟进导致的，你可以使用",[26,404,405],{},"yay -S $pkgname --skipchecksums","的方式跳过验证校验值的过程，或者你可以修改PKGBUILD中的校验值为",[26,408,409],{},"\"SKIP\"","来跳过某一文件的校验后手动",[26,412,28],{},[22,414,416],{"id":415},"_4-tuna反代受限","4. tuna反代受限",[13,418,419],{},"tuna的服务器只有一个ip，但当使用他提供的AUR的反代服务时，全国的使用者都会被AUR认为是tuna这一个ip，过大的请求数量可能导致tuna的服务器超出AUR每天给每个ip限制的请求次数。",[84,421],{},[13,423,424],{},"具体表现:",[38,426,429],{"className":427,"code":428,"language":43},[41],"Rate limit reached\n",[26,430,428],{"__ignoreMap":46},[13,432,433],{},"解决方案，改回AUR的服务器，使用自己的ip进行请求",[38,435,437],{"className":194,"code":436,"language":196,"meta":46,"style":46},"yay --aururl \"https://aur.archlinux.org\" --save\n",[26,438,439],{"__ignoreMap":46},[200,440,441,444,447,450],{"class":202,"line":203},[200,442,443],{"class":206},"yay",[200,445,446],{"class":214}," --aururl",[200,448,449],{"class":210}," \"https://aur.archlinux.org\"",[200,451,452],{"class":214}," --save\n",[17,454,455],{"id":455},"写在最后",[13,457,458,459],{},"关于AUR使用的更多细节可以阅读 ",[283,460,463],{"href":461,"rel":462},"https://blog.zhullyb.top/2021/04/04/yay-more/",[287],"《yay进阶》",[465,466,467],"style",{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}",{"title":46,"searchDepth":469,"depth":469,"links":470},2,[471,477,483],{"id":19,"depth":469,"text":20,"children":472},[473,476],{"id":24,"depth":474,"text":475},3,"makepkg是如何工作的？",{"id":149,"depth":474,"text":150},{"id":167,"depth":469,"text":168,"children":478},[479,480,481,482],{"id":174,"depth":474,"text":175},{"id":244,"depth":474,"text":245},{"id":381,"depth":474,"text":382},{"id":415,"depth":474,"text":416},{"id":455,"depth":469,"text":455},"2021-09-11 19:22:29","md",{"top":487},false,true,"/2021/09/11/detailed-explanation-for-aur","---\ntitle: 使用AUR(Helper)安装软件时究竟发生了什么？对于常见的构建错误如何解决？\ntop: false\ntags:\n- Linux\n- Archlinux\ndate: 2021-09-11 19:22:29\n---\n\n> 虽然对于没有能力手动修改/编写PKGBUILD的Arch用户其实是不应该使用AUR中的包的，这些软件的PKGBUILD可以由个人随意发布，并不能保证安全性，但是作为Archlinux的特色，但随着AUR Helper的趋于便利，还是吸引了不少小白使用AUR。本文将主要讲一讲 AUR Helper 帮助我们安装软件时到底做了些什么事情，并提供一些使用AUR Helper构建时常见错误的解决方案。\n\n## PartⅠ基本原理\n\n### `makepkg`是如何工作的？\n\n以钉钉举例，我们可以从AUR上使用 `git clone https://aur.archlinux.org/dingtalk-bin.git` 获取到由这个包的维护者为我们提前写好的构建脚本。他的目录大概是长成下面这个样子:\n\n```\ndingtalk-bin\n├── com.alibabainc.dingtalk.desktop\n├── dingtalk.sh\n├── .git\n├── .gitignore\n├── PKGBUILD\n├── service-terms-zh\n└── .SRCINFO\n```\n\n- 其中，`.git`是git的工作目录，可以忽视。\n- `.gitignore`属于git的配置文件之一，我们也不用管。\n- `PKGBUILD`是这个目录下最重要的东西，是一个用于提供参数的脚本。makepkg通过执行PKGBUILD脚本来获取到参数，自动进行下载和构建过程。\n- `service-terms-zh`, `com.alibabainc.dingtalk.desktop`, `dingtalk.sh`是包里所需要用到的东西。\n\n***\n\n当我们cd到这个目录下执行makepkg时，\n\nmakepkg会调用`curl` / `git`下载PKGBUILD中`source=()`部分中以`http(s)`协议头或者`git+`开头的链接，这些东西将会被下载到这个目录的`src`文件夹下。\n\n对于curl下载的东西，makepkg会使用校验码核对下载到的文件是否完整、是否是当初这个包的维护者下载到的这一个。\n\n校验通过后，makepkg会依次执行`prepare(){}`、`build(){}`、`package(){}`函数中的命令陆续完成*准备、编译*过程，并将最终要打进包里的文件放置到`pkg`文件夹下。\n\n最后，makepkg将会将`pkg`文件夹的内容压缩成包。\n\n### AUR Helper 干了些什么\n\n我们还是以钉钉为例，看看我们执行`yay dingtalk-bin`时到底发生了什么。\n\n![当你使用yay安装软件到底发生了什么](https://static.031130.xyz/uploads/2024/08/12/62f3cdb03ec8c.webp)\n\n## PartⅡ常见错误解决方案\n\n如果有其他情况觉得可以完善的，欢迎在评论区留言。\n\n### 1. base-devel 没有安装\n\n正如上面所说的，没有安装`base-devel`组，赶紧补上! \n\n由于`base-devel`并不是一个具体的包，而是由多个包构成的包组，其实并没有很好的方法来检测你是否已经安装。\n\n所以如果你不确定，你也可以执行下面的命令来确保自己已经安装。\n\n```bash\nsudo pacman -S base-devel --noconfirm --needed\n```\n\n***\n\n常见表现: \n\n```\nERROR: Cannot find the strip binary required for object file stripping.\n```\n\n```\nPKGBUILD: line XXX XXX: command not found\n```\n\n### 2. source源文件下载失败\n\n1. #### 网络问题\n\n   国内的网络问题不用多说了，大多数情况下都是Github连接不上。\n\n   ![yay下载失败](https://static.031130.xyz/uploads/2024/08/12/62f3cc9c9dda8.webp)\n\n   最简单的解决方案就是把source里下载失败的东西通过特殊手段（比如你浏览器设置下代理，或者找找fastgit这种反代）下载下来以后直接扔到PKGBUILD所在的路径，然后手动执行`makepkg -si`。\n\n   > -s代表自动下载makedepend，-i表示构建成功以后自动安装\n   >\n   > yay存放PKGBUILD的默认路径是在`$HOME/.cache/yay/$pkgname`下面，具体可以参考我的另一篇关于[yay的用法详解](https://blog.zhullyb.top/2021/04/04/yay-more/#builddir-lt-dir-gt)的博客。\n\n   **我在这里再讲一种使用 [*fastgit*](http://fastgit.org/) 作为反代加速github下载的方法。**~~如果觉得fastgit帮助到了你，你可以考虑[给fastgit项目打钱](http://fastgit.org/donate.html)。~~\n\n   当你的yay出现这个询问菜单时，（也就是出现`Diffs to show`/`显示哪些差异？`字样时）\n\n   ![](https://static.031130.xyz/uploads/2024/08/12/62f3cca0c7aba.webp)\n\n   我们再开一个终端，输入\n\n   ```bash\n   sed -i \"s|github.com|hub.fastgit.org|g\" $HOME/.cache/yay/*/PKGBUILD\n   ```\n\n   接着就下一步安装即可。\n\n2. #### 链接失效\n\n   这种情况多见于维护者维护不到位，上游放出了新版本包并删除老版本包以后维护者没有及时跟进的。你可以去逛一逛AUR的评论区查看解决方案，或者去查找上游的最新版本是多少，尝试更改PKGBUILD中的pkgver参数和checksum以后尝试makepkg。\n\n3. #### 需要手动下载\n\n   一般情况下是上游没有提供直链，makepkg无法自行下载，需要人工介入。解决方法同上面的[网络问题](#网络问题)\n\n### 3. checksum 错误\n\n上文已经提到过，checksum用于判断你所下载到的软件和维护者当初下载到的是否一致。但是有些情况下，确实是维护者忘了更新checksum值了，因此我们需要做一个判断。\n\n打开`.SCRINFO`，找到checksum报错的那个文件的链接。\n\n使用wget/curl等工具将他下载下来，可以通过`md5sum+文件名`的方式获取他们的md5值。连续下载两次，核对两次的检验值是否一致。\n\n如果结果一致，那么说明并不是网络波动导致的检验值不符，而是维护者没有及时跟进导致的，你可以使用`yay -S $pkgname --skipchecksums`的方式跳过验证校验值的过程，或者你可以修改PKGBUILD中的校验值为`\"SKIP\"`来跳过某一文件的校验后手动`makepkg`。\n\n### 4. tuna反代受限\n\ntuna的服务器只有一个ip，但当使用他提供的AUR的反代服务时，全国的使用者都会被AUR认为是tuna这一个ip，过大的请求数量可能导致tuna的服务器超出AUR每天给每个ip限制的请求次数。\n\n***\n\n具体表现: \n\n```\nRate limit reached\n```\n\n解决方案，改回AUR的服务器，使用自己的ip进行请求\n\n```bash\nyay --aururl \"https://aur.archlinux.org\" --save\n```\n\n\n\n## 写在最后\n\n关于AUR使用的更多细节可以阅读 [《yay进阶》](https://blog.zhullyb.top/2021/04/04/yay-more/)\n",{"title":5,"description":46},"posts/detailed-explanation-for-aur",[494,495],"Linux","Archlinux","K1t6lC6-mFd4zDUob7d7FAoJ05Y882xfnoYw36HAEj4",[498,503],{"title":499,"path":500,"stem":501,"date":502,"children":-1},"记录一次原创文章被抄袭","/2021/09/21/csdn-copied-my-article","posts/csdn-copied-my-article","2021-09-21",{"title":504,"path":505,"stem":506,"date":507,"children":-1},"使用fakehome方案暂时解决跑在KDE暗色主题下的程序使用亮色字体的问题","/2021/09/05/wrong-fonts-color-fix-under-kde-with-a-dark-theme","posts/wrong-fonts-color-fix-under-kde-with-a-dark-theme","2021-09-05",0,1761696886816]