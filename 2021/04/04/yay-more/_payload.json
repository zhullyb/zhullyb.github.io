[{"data":1,"prerenderedAt":1268},["ShallowReactive",2],{"post-2021-04-04-yay-more":3,"surround-2021-04-04-yay-more":1257,"randomIndex/2021/04/04/yay-more/":1100},{"id":4,"title":5,"body":6,"date":1245,"description":103,"extension":1246,"meta":1247,"navigation":1248,"path":1249,"rawbody":1250,"seo":1251,"stem":1252,"sticky":1253,"tags":1254,"__hash__":1256},"posts/posts/yay-more.md","yay进阶",{"type":7,"value":8,"toc":1225},"minimark",[9,30,36,41,45,63,68,78,83,94,104,107,112,141,148,158,164,178,181,187,190,196,206,212,215,221,224,230,233,239,242,248,259,265,268,274,280,283,289,300,306,316,322,329,338,344,347,353,356,360,363,369,375,382,388,395,401,404,410,413,419,422,425,428,431,437,440,446,449,455,458,464,467,473,480,486,489,495,498,501,507,510,516,519,525,528,531,537,542,548,554,557,563,566,572,575,586,592,595,601,604,607,610,617,620,626,629,635,641,647,650,653,659,662,668,671,677,681,687,689,692,698,701,707,710,716,721,727,729,732,738,741,747,750,756,761,767,769,772,778,781,787,790,796,799,802,808,811,817,820,823,829,832,838,841,844,850,853,859,862,865,871,874,880,883,887,890,895,902,908,911,914,919,922,928,931,934,939,942,948,951,957,960,963,968,971,977,980,986,989,995,998,1001,1006,1009,1015,1018,1021,1026,1029,1035,1038,1041,1047,1050,1056,1059,1062,1068,1071,1077,1090,1115,1118,1134,1140,1150,1156,1165,1171,1174,1180,1183,1189,1192,1198,1201,1204,1210,1221],[10,11,12,16,19,22],"blockquote",{},[13,14,15],"p",{},"yay是一个AUR Helper，他可以执行pacman的几乎所有操作，并在此基础上添加了很多额外用法。",[13,17,18],{},"我没有在网络上查找到关于yay的、除了pacman基础用法和安装AUR包以外的中文教程，英文的也几乎没有看到，这也是我写这篇文章的原因所在。",[13,20,21],{},"本文通篇详讲yay的每一个设置/选项（大概就是archwiki那种干涩的行文思路），最后会给出我自己的一些常用命令，但不会做解释。",[13,23,24,25,29],{},"写作时参考了yay的英文使用手册，如果你的arch安装了yay，那么即可通过",[26,27,28],"code",{},"man yay","命令随时查阅它。",[13,31,32],{},[33,34,35],"strong",{},"Tips1: 本文中出现的foo一般是指包名，标注*的表示该选项默认启用。",[13,37,38],{},[33,39,40],{},"Tips2: 使用电脑端的访客可以在侧栏以获取目录。",[42,43,44],"h2",{"id":44},"基本用法",[13,46,47,48,51,52,55,56,59,60,62],{},"yay的基本用法是",[26,49,50],{},"yay \u003Coperation> [options] [targets]","、",[26,53,54],{},"yay foo","和",[26,57,58],{},"yay","，",[26,61,50],{},"的用法可以讨论的点比较多，我会在后文中一一道来。",[64,65,66],"h3",{"id":58},[26,67,58],{},[13,69,70,71,73,74,77],{},"当我们仅执行",[26,72,58],{},"，后面不跟任何参数时，yay会执行操作",[26,75,76],{},"yay -Syu","，他会先调用pacman更新源的数据库、更新所有从源内安装的软件包，并检查你的AUR包有没有更新。",[64,79,81],{"id":80},"yay-foo",[26,82,54],{},[13,84,85,86,89,90,93],{},"通过yay后面直接跟包名的命令会让yay直接在源和AUR内搜索带有",[26,87,88],{},"foo","关键词的包（包名和简介中只要出现foo都会被一网打尽），以下是我执行",[26,91,92],{},"yay dingtalk","的输出",[95,96,101],"pre",{"className":97,"code":99,"language":100},[98],"language-text","5 aur/com.dingtalk.deepin 5.0.15deepin7-1 (+0 0.00)\n    Deepin Wine dingtalk\n4 aur/deepin.com.dingtalk.com 5.1.28.12-2 (+1 0.12)\n    DingTalk Client on Deepin Wine\n3 aur/dingtalk 2.1.3-1 (+3 0.00)\n    钉钉桌面版，基于electron和钉钉网页版开发，支持Windows、Linux和macOS\n2 aur/dingtalk-linux 3.5.5-1 (+6 0.12)\n    May be the official Linux experimental version\n1 aur/dingtalk-electron 2.1.9-1 (+9 0.15)\n    钉钉Linux版本\n==> Packages to install (eg: 1 2 3, 1-3 or ^4)\n==\n","text",[26,102,99],{"__ignoreMap":103},"",[13,105,106],{},"输入每一项对应的序号即可进入相应的安装过程。",[64,108,110],{"id":109},"yay-operation-options-targets",[26,111,50],{},[13,113,114,115,55,119,122,123,125,126,129,130,133,134,55,137,140],{},"在这里，\u003Coperation>每次只能有一个，",[116,117,118],"span",{},"options",[116,120,121],{},"targets","可以有多个，且多个",[116,124,118],{},"可以合起来写在一起。比如",[26,127,128],{},"yay -P -s -f","可以直接写成",[26,131,132],{},"yay -Psf","，顺序也可以颠倒，",[26,135,136],{},"-Psf",[26,138,139],{},"-sPf","没区别。",[142,143,145],"h4",{"id":144},"y-yay",[26,146,147],{},"-Y (--yay)",[13,149,150,151,55,154,157],{},"-Y行为其实是yay的默认行为，当你没有加其他的行为参数时，yay就会执行-Y参数，可以跟",[26,152,153],{},"--gendb",[26,155,156],{},"-c","。",[159,160,162],"h5",{"id":161},"gendb",[26,163,153],{},[13,165,166,167,170],{},"生成AUR数据库。",[33,168,169],{},"仅当从另一个AUR Helper迁移到yay时，才应使用此选项。",[171,172,173,174,177],"del",{},"（根据我的个人理解，是根据你Arch内安装的源内找不到的包的包名去AUR里寻找对应的PKGBUILD，并且把能找到的PKGBUILD给clone到",[26,175,176],{},"~/.cache/yay/","目录下）",[13,179,180],{},"千玄子大佬说：“简单说来就是把在 AUR 的 PKGBUILD 下下来然后比对是否要更新。”",[159,182,184],{"id":183},"c-clean",[26,185,186],{},"-c（--clean）",[13,188,189],{},"清除不再需要的、没有被依赖的包。（相当于apt中的autoremove）",[142,191,193],{"id":192},"p-show",[26,194,195],{},"-P(--show)",[13,197,198,199,202,203],{},"执行特定的Print操作。可以跟的",[116,200,201],{},"option","有",[26,204,205],{},"-c、-f、-d、-g、-n、-s、-u、-w、-q",[159,207,209],{"id":208},"c-complete",[26,210,211],{},"-c(--complete)",[13,213,214],{},"Print所有源内和AUR软件包的列表。这是给命令行操作提供的，并不打算由用户直接使用。（意思是启用了这个选项以后你的终端会出现一大串长常的列表来告诉你你的Arch到底可以从哪里安装哪些包，并不是直接给你用的，是作为数据留给别的命令来玩耍的）",[159,216,218],{"id":217},"f-fish",[26,219,220],{},"-f(--fish)",[13,222,223],{},"在输出结果到终端时，会专门为fish用户做微调。（但是根据SamLukeYes大佬说他用fish体验下来并没有感知到加不加有什么区别，应该是属于感知不强的选项）",[159,225,227],{"id":226},"d-defaultconfig",[26,228,229],{},"-d(--defaultconfig)",[13,231,232],{},"Print默认的yay配置。",[159,234,236],{"id":235},"g-currentconfig",[26,237,238],{},"-g(--currentconfig)",[13,240,241],{},"Print当前的yay配置。",[159,243,245],{"id":244},"n-numberupgrades",[26,246,247],{},"-n(--numberupgrades)",[13,249,250,251,254,255,258],{},"数一数你现在还有多少AUR包待更新。yay作者不推荐你使用呢，他推荐你用",[26,252,253],{},"yay -Qu","或者",[26,256,257],{},"wc -l","来代替它。",[159,260,262],{"id":261},"s-stats",[26,263,264],{},"-s(--stats)",[13,266,267],{},"会展示一大堆信息，如下",[95,269,272],{"className":270,"code":271,"language":100},[98],"[zhullyb@Archlinux ~]$ yay -Ps\n==> Yay version v10.2.0                             #yay版本\n===========================================\n==> Total installed packages: 1240                  #总共安装了多少包\n==> Total foreign installed packages: 24            #多少包不是从源里安装的\n==> Explicitly installed packages: 271              #有多少包是你自己主动安装的(而不是作为依赖安装的)\n==> Total Size occupied by packages: 14.3 GiB       #安装的所有包合在一起一共占了你多少空间\n===========================================\n==> Ten biggest packages:                           #十个体积最大的包\nwps-office-cn: 990.9 MiB\nttf-sarasa-gothic: 855.5 MiB\nlinux-firmware: 652.3 MiB\nbaidunetdisk-bin: 494.7 MiB\ncom.antutu.benchmark: 412.0 MiB\nwine: 402.2 MiB\nlinux-xanmod-cacule-uksm-cjktty: 324.4 MiB\nmicrosoft-edge-dev-bin: 316.4 MiB\nwine-mono: 316.2 MiB\ndeepin-wine5-i386: 259.5 MiB\n===========================================\n:: Querying AUR...\n -> Missing AUR Packages:  zhullyb-archlinux-git    #AUR里找不到的包\n -> Flagged Out Of Date AUR Packages:  xml2         #AUR中被人标注过期的包\n",[26,273,271],{"__ignoreMap":103},[159,275,277],{"id":276},"u-upgrades",[26,278,279],{},"-u(--upgrades)",[13,281,282],{},"展示你所有待更新的包。",[159,284,286],{"id":285},"w-news",[26,287,288],{},"-w(--news)",[13,290,291,292,295,296,299],{},"展示来自archlinux.org的新闻。需要注意的是，这里的新闻是具有时效性的，只有在你的Arch最后一次更新以后发出来的新闻才会被显示出来。如果你不想要yay判断新闻时效性，你可以通过",[26,293,294],{},"yay -Pww","（即两个",[26,297,298],{},"w","）来获取所有能获得的新闻。",[159,301,303],{"id":302},"q-quiet",[26,304,305],{},"-q(--quiet)",[13,307,308,309,312,313,157],{},"在输出新闻的时候，仅输出新闻的标题。该功能需要与",[26,310,311],{},"-w","连用，即",[26,314,315],{},"yay -Pwq",[142,317,319],{"id":318},"g-getpkgbuild",[26,320,321],{},"-G(--getpkgbuild)",[13,323,324,325,328],{},"后跟包名。需要注意的是，如果指定的包不存在于官方源，则无法输出，后跟",[26,326,327],{},"-f、-p","参数。",[13,330,331],{},[332,333,334,335,328],"em",{},"如果希望仅获取来自AUR（即排除第三方源的干扰）的PKGBUILD，后需跟",[26,336,337],{},"-a",[159,339,341],{"id":340},"f-force",[26,342,343],{},"-f(--force)",[13,345,346],{},"强制下载AUR中的PKGBUILD，如果它在yay缓存目录已经存在了，那就覆盖它！",[159,348,350],{"id":349},"p-print",[26,351,352],{},"-p(--print)",[13,354,355],{},"Print指定包的PKGBUILD。",[64,357,359],{"id":358},"pacman-拓展用法","pacman 拓展用法",[13,361,362],{},"yay虽然可以使用pacman的所有\u003Coperation>，但是它远不仅于此。在这一段，我将向你介绍yay中包含的那些pacman不包括的pacman \u003Coperation",[142,364,366],{"id":365},"s",[26,367,368],{},"-S",[159,370,372],{"id":371},"s-si-sl-ss-su-sc-qu",[26,373,374],{},"-S, -Si, -Sl, -Ss, -Su, -Sc, -Qu",[13,376,377,378,381],{},"这些操作pacman都支持，而与pacman不同的是，yay的这些操作可以涵盖到",[33,379,380],{},"官方源/第三方源和AUR","中的所有包。",[142,383,385],{"id":384},"sc",[26,386,387],{},"-Sc",[13,389,390,391,394],{},"yay将会清除AUR包构建时的缓存和没有被track的文件。没有被track的文件在这里指AUR包构建时下载的sources或者构建完成的pkg包，但是vcs sources会被保留（比如.",[26,392,393],{},"git","文件夹）",[142,396,398,399],{"id":397},"全局的options","全局的",[116,400,118],{},[13,402,403],{},"全局是指在所有\u003Coperation>下都可以加啦。",[159,405,407],{"id":406},"repo",[26,408,409],{},"--repo",[13,411,412],{},"假定你给出的包名只存在源里（忽视AUR的存在）",[159,414,416],{"id":415},"a-aur",[26,417,418],{},"-a(--aur)",[13,420,421],{},"假定你给出的包名只存在AUR中（忽视源的存在）",[42,423,424],{"id":424},"配置设置",[13,426,427],{},"原版的man手册排的比较混乱，我这里自己细分了几个类型，或许不是特别专业，但我希望能够帮助你们理解。",[64,429,430],{"id":430},"自定义调用命令型",[159,432,434],{"id":433},"editor-command",[26,435,436],{},"--editor \u003Ccommand>",[13,438,439],{},"设置编辑时调用的编辑器。",[159,441,443],{"id":442},"makepkg-command",[26,444,445],{},"--makepkg \u003Ccommand>",[13,447,448],{},"设置makepkg时需要调用makepkg命令（一般情况下用不到）",[159,450,452],{"id":451},"pacman-command",[26,453,454],{},"--pacman \u003Ccommand>",[13,456,457],{},"设置运行pacman时需要调用pacman命令（一般情况下用不到）",[159,459,461],{"id":460},"tar-command",[26,462,463],{},"--tar \u003Ccommand>",[13,465,466],{},"设置makepkg解压tar资源时调用的tar命令（一般情况下用不到）",[159,468,470],{"id":469},"git-command",[26,471,472],{},"--git \u003Ccommand>",[13,474,475,476,479],{},"设置makepkg clone git资源时调用的git命令（比如你可以安装AUR中的fgit-go，使用",[26,477,478],{},"--git fgit","参数来让fastgit代理clone的过程）",[159,481,483],{"id":482},"gpg-command",[26,484,485],{},"--gpg \u003Ccommand>",[13,487,488],{},"设置gpg验证资源时调用的gpg命令",[159,490,492],{"id":491},"sudo-command",[26,493,494],{},"--sudo \u003Ccommand>",[13,496,497],{},"设置调用sudo获取su权限安装pkg时所调用的sudo命令。",[64,499,500],{"id":500},"自定义配置文件型",[159,502,504],{"id":503},"config-file",[26,505,506],{},"--config \u003Cfile>",[13,508,509],{},"设置读取的pacman配置文件。",[159,511,513],{"id":512},"makepkgconf-file",[26,514,515],{},"--makepkgconf \u003Cfile>",[13,517,518],{},"设置读取的makepkg配置文件。",[159,520,522],{"id":521},"nomakepkgconf",[26,523,524],{},"--nomakepkgconf",[13,526,527],{},"不读取系统中的makepkg.conf，仅使用Arch默认状态下的配置文件。",[64,529,530],{"id":530},"自定义路径类型",[159,532,534],{"id":533},"builddir-dir",[26,535,536],{},"--builddir \u003Cdir>",[13,538,539,540],{},"设置build路径，默认路径为",[26,541,176],{},[159,543,545],{"id":544},"absdir-dir",[26,546,547],{},"--absdir \u003Cdir>",[13,549,550,551],{},"设置abs路径，默认路径为",[26,552,553],{},"~/.cache/yay/abs/",[64,555,556],{"id":556},"参数传递型",[159,558,560],{"id":559},"editorflags-flags",[26,561,562],{},"--editorflags \u003Cflags>",[13,564,565],{},"后跟需要跟随传递给编辑器的参数。如果需要传递多个参数，可以使用引号。",[159,567,569],{"id":568},"mflags-flags",[26,570,571],{},"--mflags \u003Cflags>",[13,573,574],{},"后跟需要跟随传递给makepkg的参数。如果需要传递多个参数，可以使用引号。",[13,576,577,578,581,582,585],{},"这个用的人不多，但其实是非常好用的一个功能。在我们安装",[26,579,580],{},"deepin-wine-tim","等包的时候，很可能会遇到文件明明完整但checksum不通过的情况，这时我们可以跟一个",[26,583,584],{},"--skipchecksums","参数传递给makepkg以跳过checksum的过程。",[159,587,589],{"id":588},"gpgflags-flags",[26,590,591],{},"--gpgflags \u003Cflags>",[13,593,594],{},"后跟需要跟随传递给pgp的参数。如果需要传递多个参数，可以使用引号。",[159,596,598],{"id":597},"sudoflags-flags",[26,599,600],{},"--sudoflags \u003Cflags>",[13,602,603],{},"后跟需要跟随传递给sudo的参数。如果需要传递多个参数，可以使用引号。",[64,605,606],{"id":606},"菜单配置型",[142,608,609],{"id":609},"clean菜单",[159,611,613,614],{"id":612},"cleanmenu","*",[26,615,616],{},"--cleanmenu",[13,618,619],{},"启用清除询问菜单。（询问你是否需要清除已存在的文件）",[159,621,623],{"id":622},"nocleanmenu",[26,624,625],{},"--nocleanmenu",[13,627,628],{},"禁用清除询问菜单。（不询问你是否需要清除已存在的文件）",[159,630,632],{"id":631},"answerclean",[26,633,634],{},"--answerclean",[13,636,637,638,328],{},"自动回答cleanmenu，后跟",[26,639,640],{},"\u003CAll|None|Installed|NotInstalled>",[159,642,613,644],{"id":643},"noanswerclean",[26,645,646],{},"--noanswerclean",[13,648,649],{},"不设置自动回答。",[142,651,652],{"id":652},"diff菜单",[159,654,613,656],{"id":655},"diffmenu",[26,657,658],{},"--diffmenu",[13,660,661],{},"启用对比询问菜单。（询问你是否需要对比本地文件和AUR文件）",[159,663,665],{"id":664},"nodiffmenu",[26,666,667],{},"--nodiffmenu",[13,669,670],{},"禁用对比询问菜单。（不询问你是否需要对比本地文件和AUR文件）",[159,672,674],{"id":673},"answerdiff",[26,675,676],{},"--answerdiff",[13,678,637,679,328],{},[26,680,640],{},[159,682,613,684],{"id":683},"noanswerdiff",[26,685,686],{},"--noanswerdiff",[13,688,649],{},[142,690,691],{"id":691},"edit菜单",[159,693,695],{"id":694},"editmenu",[26,696,697],{},"--editmenu",[13,699,700],{},"启用修改询问菜单。（询问你是否需要修改PKGBUILD以及相关文件）",[159,702,613,704],{"id":703},"noeditmenu",[26,705,706],{},"--noeditmenu",[13,708,709],{},"禁用修改询问菜单。（不询问你是否需要修改PKGBUILD以及相关文件）",[159,711,713],{"id":712},"answeredit",[26,714,715],{},"--answeredit",[13,717,718,719,328],{},"自动回答editmenu，后跟",[26,720,640],{},[159,722,613,724],{"id":723},"noansweredit",[26,725,726],{},"--noansweredit",[13,728,649],{},[142,730,731],{"id":731},"upgrade菜单",[159,733,613,735],{"id":734},"upgrademenu",[26,736,737],{},"--upgrademenu",[13,739,740],{},"启用更新询问菜单。（询问你是否需要更新AUR包）",[159,742,744],{"id":743},"noupgrademenu",[26,745,746],{},"--noupgrademenu",[13,748,749],{},"禁用更新询问菜单。（不询问你是否需要更新AUR包）",[159,751,753],{"id":752},"answerupgrade",[26,754,755],{},"--answerupgrade",[13,757,758,759,328],{},"自动回答upgrademenu，后跟",[26,760,640],{},[159,762,613,764],{"id":763},"noanswerupgrade",[26,765,766],{},"--noanswerupgrade",[13,768,649],{},[142,770,771],{"id":771},"removemake菜单",[159,773,613,775],{"id":774},"askremovemake",[26,776,777],{},"--askremovemake",[13,779,780],{},"在编译结束后，询问是否删除make depend。",[159,782,784],{"id":783},"removemake",[26,785,786],{},"--removemake",[13,788,789],{},"在编译结束后，删除make depend。",[159,791,793],{"id":792},"noremovemake",[26,794,795],{},"--noremovemake",[13,797,798],{},"在编译结束后，不删除make depend。",[142,800,801],{"id":801},"provides菜单",[159,803,613,805],{"id":804},"provides",[26,806,807],{},"--provides",[13,809,810],{},"搜索AUR包时，一同寻找其在AUR上的依赖程序。 当找到多个提供该依赖的包时，将出现一个菜单，提示您选择一个。尽管这不会引起注意，但这会增加依赖项解决时间。",[159,812,814],{"id":813},"noprovides",[26,815,816],{},"--noprovides",[13,818,819],{},"搜索AUR包时，不在AUR上寻找其依赖程序。尽管yay不会再次弹出依赖菜单供你选择，yay调用pacman时依然会出现pacman的选择菜单让你选择。",[142,821,822],{"id":822},"pgpfetch菜单",[159,824,613,826],{"id":825},"pgpfetch",[26,827,828],{},"--pgpfetch",[13,830,831],{},"询问你是否从每个PKGBUILD的validpgpkeys字段导入未知的PGP密钥。",[159,833,835],{"id":834},"nopgpfetch",[26,836,837],{},"--nopgpfetch",[13,839,840],{},"不自动导入陌生的PGP密钥。",[142,842,843],{"id":843},"useask选项",[159,845,613,847],{"id":846},"useask",[26,848,849],{},"--useask",[13,851,852],{},"调用pacman的--ask询问用户是否删除系统中与当前包冲突的软件包。",[159,854,856],{"id":855},"nouseask",[26,857,858],{},"--nouseask",[13,860,861],{},"不调用pacman的--ask询问用户是否删除系统中与当前包冲突的软件包，遇到冲突的软件包时直接报错，由用户来手动解决。",[142,863,864],{"id":864},"combinedupgrade菜单",[159,866,868],{"id":867},"combinedupgrade",[26,869,870],{},"--combinedupgrade",[13,872,873],{},"在系统更新期间，将源内包和AUR包的更新菜单合并到一起。",[159,875,613,877],{"id":876},"nocombinedupgrade",[26,878,879],{},"--nocombinedupgrade",[13,881,882],{},"在系统更新期间，先支持源内包的升级，完成后再进行AUR包的升级。",[64,884,886],{"id":885},"t-or-f-型","T or F 型",[142,888,889],{"id":889},"devel",[159,891,892],{"id":889},[26,893,894],{},"--devel",[13,896,897,898,901],{},"在系统更新期间，检查AUR的vcs包是否有更新，当前仅支持AUR的-git包。 devel查询是使用",[26,899,900],{},"git ls-remote","对比安装时和现在最新的commit_id完成的。",[159,903,613,905],{"id":904},"nodevel",[26,906,907],{},"--nodevel",[13,909,910],{},"在系统更新期间， 不检查AUR的vcs包是否有更新。",[142,912,913],{"id":913},"timeupdate",[159,915,916],{"id":913},[26,917,918],{},"--timeupdate",[13,920,921],{},"在系统更新期间，将已安装软件包的构建时间与每个软件包的AUR的最后修改时间进行比较。",[159,923,613,925],{"id":924},"notimeupdate",[26,926,927],{},"--notimeupdate",[13,929,930],{},"在系统更新期间，不将已安装软件包的构建时间与每个软件包的AUR的最后修改时间进行比较。",[142,932,933],{"id":933},"redownload",[159,935,936],{"id":933},[26,937,938],{},"--redownload",[13,940,941],{},"就算PKGBUILD已经存在，也要重新从AUR上获取一份新的PKGBUILD并覆盖原有PKGBUILD。",[159,943,945],{"id":944},"redownloadall",[26,946,947],{},"--redownloadall",[13,949,950],{},"就算PKGBUILD已经存在，也要重新从AUR上获取所有AUR包的PKGBUILD并覆盖原有PKGBUILD。",[159,952,613,954],{"id":953},"noredownload",[26,955,956],{},"--noredownload",[13,958,959],{},"当下载PKGBUILD时，，如果发现cache中的PKGBUILD版本＞＝AUR上的版本时，直接使用本地的PKGBUILD。",[142,961,962],{"id":962},"rebuild",[159,964,965],{"id":962},[26,966,967],{},"--rebuild",[13,969,970],{},"即使在cache中有可用的二进制包的情况下，也始终要重新编译目标软件包。",[159,972,974],{"id":973},"rebuildall",[26,975,976],{},"--rebuildall",[13,978,979],{},"即使在cache中有可用的二进制包的情况下，也始终要重新编译所有的AUR包。",[159,981,983],{"id":982},"rebuildtree",[26,984,985],{},"--rebuildtree",[13,987,988],{},"安装AUR包时，以递归方式重新编译并重新安装其所有AUR依赖包，即使已安装的依赖项也是如此。 该选项使您可以轻松地针对当前系统的库重新构建软件包，如果它们变得不兼容。（比如python3.8->3.9）",[159,990,613,992],{"id":991},"norebuild",[26,993,994],{},"--norebuild",[13,996,997],{},"构建软件包时，如果在缓存中找到该软件包并且该软件包与想要的软件包的版本相同，则跳过软件包的编译过程并使用现有的二进制程序。",[142,999,1000],{"id":1000},"sudoloop",[159,1002,1003],{"id":1000},[26,1004,1005],{},"--sudoloop",[13,1007,1008],{},"在后台循环调用sudo，以防止sudo授权在长时间构建期间超时。",[159,1010,613,1012],{"id":1011},"nosudoloop",[26,1013,1014],{},"--nosudoloop",[13,1016,1017],{},"不在后台循环调用sudo，可能会导致sudo授权在长时间构建期间超时。",[142,1019,1020],{"id":1020},"batchinstall",[159,1022,1023],{"id":1020},[26,1024,1025],{},"--batchinstall",[13,1027,1028],{},"在构建和安装AUR包时，对每个软件包的安装进行排序，而并非在构建之后立刻安装每个软件包时。 需要注意的是，一旦构建了所有软件包，或者需要构建队列中的软件包作为构建另一个软件包的依赖项，应当在安装队列中安装所有软件包。",[159,1030,613,1032],{"id":1031},"nobatchinstall",[26,1033,1034],{},"--nobatchinstall",[13,1036,1037],{},"在构建AUR包成功后立即安装。",[142,1039,1040],{"id":1040},"clearafter",[159,1042,1044],{"id":1043},"cleanafter",[26,1045,1046],{},"--cleanafter",[13,1048,1049],{},"在构建AUR包完成以后清除cache文件。",[159,1051,613,1053],{"id":1052},"nocleanafter",[26,1054,1055],{},"--nocleanafter",[13,1057,1058],{},"在构建AUR包完成以后不清除cache文件。",[64,1060,1061],{"id":1061},"其他型",[159,1063,1065],{"id":1064},"save",[26,1066,1067],{},"--save",[13,1069,1070],{},"把你这一次执行yay后面跟的配置参数永久保存下来。",[159,1072,1074],{"id":1073},"aururl",[26,1075,1076],{},"--aururl",[13,1078,1079,1080,1086,1087],{},"更改aur源地址（默认为 ",[1081,1082,1083],"a",{"href":1083,"rel":1084},"https://aur.archlinux.org",[1085],"nofollow"," ），",[171,1088,1089],{},"适用于中国用户，可以使用此参数将AUR的地址设置成清华的反代，具体的配置命令为",[95,1091,1095],{"className":1092,"code":1093,"language":1094,"meta":103,"style":103},"language-bash shiki shiki-themes github-light github-dark","yay --aururl \"https://aur.tuna.tsinghua.edu.cn\" --save\n","bash",[26,1096,1097],{"__ignoreMap":103},[116,1098,1101,1104,1108,1112],{"class":1099,"line":1100},"line",1,[116,1102,58],{"class":1103},"sScJk",[116,1105,1107],{"class":1106},"sj4cs"," --aururl",[116,1109,1111],{"class":1110},"sZZnC"," \"https://aur.tuna.tsinghua.edu.cn\"",[116,1113,1114],{"class":1106}," --save\n",[13,1116,1117],{},"TUNA 的反代已经取消，可以使用如下命令设置回 AUR 官方源",[95,1119,1121],{"className":1092,"code":1120,"language":1094,"meta":103,"style":103},"yay --aururl \"https://aur.archlinux.org\" --save\n",[26,1122,1123],{"__ignoreMap":103},[116,1124,1125,1127,1129,1132],{"class":1099,"line":1100},[116,1126,58],{"class":1103},[116,1128,1107],{"class":1106},[116,1130,1131],{"class":1110}," \"https://aur.archlinux.org\"",[116,1133,1114],{"class":1106},[159,1135,1137],{"id":1136},"sortby",[26,1138,1139],{},"--sortby",[13,1141,1142,1143,1146,1147,157],{},"在搜索过程中，按特定条件对AUR结果进行排序，后跟",[26,1144,1145],{},"\u003Cvotes|popularity|id|baseid|name|base|submitted|modified","参数，默认为",[26,1148,1149],{},"votes",[159,1151,1153],{"id":1152},"searchby",[26,1154,1155],{},"--searchby",[13,1157,1158,1159,1146,1162,157],{},"通过指定查询类型来搜索AUR软件包，后跟",[26,1160,1161],{},"\u003Cname|name-desc|maintainer|depends|checkdepends|makedepends|optdepends",[26,1163,1164],{},"name-desc",[159,1166,613,1168],{"id":1167},"topdown",[26,1169,1170],{},"--topdown",[13,1172,1173],{},"优先展示源内包，其次才是AUR包",[159,1175,1177],{"id":1176},"bottomup",[26,1178,1179],{},"--bottomup",[13,1181,1182],{},"优先展示AUR包，其次才是源内包",[159,1184,1186],{"id":1185},"requestsplitn-number",[26,1187,1188],{},"--requestsplitn \u003Cnumber>",[13,1190,1191],{},"设置在每次向AUR的请求的最大数值（默认150）。数值越高，请求时间越短，但是单次请求的数值过大会导致error。当这个数值＞500时你应当特别注意这一点。",[159,1193,1195],{"id":1194},"completioninterval-days",[26,1196,1197],{},"--completioninterval \u003Cdays>",[13,1199,1200],{},"刷新完成高速缓存的时间（以天为单位,默认为7）。 将此值设置为0将导致每次刷新缓存，而将其设置为-1将导致永远不刷新缓存。",[42,1202,1203],{"id":1203},"我个人的常用命令",[95,1205,1208],{"className":1206,"code":1207,"language":100},[98],"yay\nyay foo\nyay -Sa foo\nyay -Scc\nyay -Ps\nyay -Pww\nyay -Gpa\nyay -Ga\n",[26,1209,1207],{"__ignoreMap":103},[13,1211,1212],{},[332,1213,1214,1215,1220],{},"本文同时发布于「",[1081,1216,1219],{"href":1217,"rel":1218},"https://zhuanlan.zhihu.com/p/363666022",[1085],"知乎专栏","」，如果你恰好有知乎帐号的话或许可以考虑帮我点个赞？",[1222,1223,1224],"style",{},"html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":103,"searchDepth":1226,"depth":1226,"links":1227},2,[1228,1235,1244],{"id":44,"depth":1226,"text":44,"children":1229},[1230,1232,1233,1234],{"id":58,"depth":1231,"text":58},3,{"id":80,"depth":1231,"text":54},{"id":109,"depth":1231,"text":50},{"id":358,"depth":1231,"text":359},{"id":424,"depth":1226,"text":424,"children":1236},[1237,1238,1239,1240,1241,1242,1243],{"id":430,"depth":1231,"text":430},{"id":500,"depth":1231,"text":500},{"id":530,"depth":1231,"text":530},{"id":556,"depth":1231,"text":556},{"id":606,"depth":1231,"text":606},{"id":885,"depth":1231,"text":886},{"id":1061,"depth":1231,"text":1061},{"id":1203,"depth":1226,"text":1203},"2021-04-04","md",{},true,"/2021/04/04/yay-more","---\ntitle: yay进阶\ndate: 2021-04-04\nsticky:\ntags:\n- Archlinux\n---\n\n> yay是一个AUR Helper，他可以执行pacman的几乎所有操作，并在此基础上添加了很多额外用法。\n>\n> 我没有在网络上查找到关于yay的、除了pacman基础用法和安装AUR包以外的中文教程，英文的也几乎没有看到，这也是我写这篇文章的原因所在。\n>\n> 本文通篇详讲yay的每一个设置/选项（大概就是archwiki那种干涩的行文思路），最后会给出我自己的一些常用命令，但不会做解释。\n>\n> 写作时参考了yay的英文使用手册，如果你的arch安装了yay，那么即可通过`man yay`命令随时查阅它。\n\n**Tips1: 本文中出现的foo一般是指包名，标注*的表示该选项默认启用。**\n\n**Tips2: 使用电脑端的访客可以在侧栏以获取目录。**\n\n## 基本用法\n\nyay的基本用法是`yay \u003Coperation> [options] [targets]`、`yay foo`和`yay`，`yay \u003Coperation> [options] [targets]`的用法可以讨论的点比较多，我会在后文中一一道来。\n\n### `yay`\n\n当我们仅执行`yay`，后面不跟任何参数时，yay会执行操作`yay -Syu`，他会先调用pacman更新源的数据库、更新所有从源内安装的软件包，并检查你的AUR包有没有更新。\n\n### `yay foo`\n\n通过yay后面直接跟包名的命令会让yay直接在源和AUR内搜索带有`foo`关键词的包（包名和简介中只要出现foo都会被一网打尽），以下是我执行`yay dingtalk`的输出\n\n```\n5 aur/com.dingtalk.deepin 5.0.15deepin7-1 (+0 0.00)\n    Deepin Wine dingtalk\n4 aur/deepin.com.dingtalk.com 5.1.28.12-2 (+1 0.12)\n    DingTalk Client on Deepin Wine\n3 aur/dingtalk 2.1.3-1 (+3 0.00)\n    钉钉桌面版，基于electron和钉钉网页版开发，支持Windows、Linux和macOS\n2 aur/dingtalk-linux 3.5.5-1 (+6 0.12)\n    May be the official Linux experimental version\n1 aur/dingtalk-electron 2.1.9-1 (+9 0.15)\n    钉钉Linux版本\n==> Packages to install (eg: 1 2 3, 1-3 or ^4)\n==\n```\n\n输入每一项对应的序号即可进入相应的安装过程。\n\n### `yay \u003Coperation> [options] [targets]`\n\n在这里，\\\u003Coperation>每次只能有一个，[options]和[targets]可以有多个，且多个[options]可以合起来写在一起。比如`yay -P -s -f`可以直接写成`yay -Psf`，顺序也可以颠倒，`-Psf`和`-sPf`没区别。\n\n#### `-Y (--yay)`\n\n-Y行为其实是yay的默认行为，当你没有加其他的行为参数时，yay就会执行-Y参数，可以跟`--gendb`和`-c`。\n\n##### `--gendb`\n\n生成AUR数据库。**仅当从另一个AUR Helper迁移到yay时，才应使用此选项。**~~（根据我的个人理解，是根据你Arch内安装的源内找不到的包的包名去AUR里寻找对应的PKGBUILD，并且把能找到的PKGBUILD给clone到`~/.cache/yay/`目录下）~~\n\n千玄子大佬说：“简单说来就是把在 AUR 的 PKGBUILD 下下来然后比对是否要更新。”\n\n##### `-c（--clean）`\n\n清除不再需要的、没有被依赖的包。（相当于apt中的autoremove）\n\n#### `-P(--show)`\n\n执行特定的Print操作。可以跟的[option]有`-c、-f、-d、-g、-n、-s、-u、-w、-q`\n\n##### `-c(--complete)`\n\nPrint所有源内和AUR软件包的列表。这是给命令行操作提供的，并不打算由用户直接使用。（意思是启用了这个选项以后你的终端会出现一大串长常的列表来告诉你你的Arch到底可以从哪里安装哪些包，并不是直接给你用的，是作为数据留给别的命令来玩耍的）\n\n##### `-f(--fish)`\n\n在输出结果到终端时，会专门为fish用户做微调。（但是根据SamLukeYes大佬说他用fish体验下来并没有感知到加不加有什么区别，应该是属于感知不强的选项）\n\n##### `-d(--defaultconfig)`\n\nPrint默认的yay配置。\n\n##### `-g(--currentconfig)`\n\nPrint当前的yay配置。\n\n##### `-n(--numberupgrades)`\n\n数一数你现在还有多少AUR包待更新。yay作者不推荐你使用呢，他推荐你用`yay -Qu`或者`wc -l`来代替它。\n\n##### `-s(--stats)`\n\n会展示一大堆信息，如下\n\n```\n[zhullyb@Archlinux ~]$ yay -Ps\n==> Yay version v10.2.0\t\t\t\t\t\t\t    #yay版本\n===========================================\n==> Total installed packages: 1240\t\t\t\t    #总共安装了多少包\n==> Total foreign installed packages: 24\t\t    #多少包不是从源里安装的\n==> Explicitly installed packages: 271\t\t\t    #有多少包是你自己主动安装的(而不是作为依赖安装的)\n==> Total Size occupied by packages: 14.3 GiB\t    #安装的所有包合在一起一共占了你多少空间\n===========================================\n==> Ten biggest packages:\t\t\t\t\t\t    #十个体积最大的包\nwps-office-cn: 990.9 MiB\nttf-sarasa-gothic: 855.5 MiB\nlinux-firmware: 652.3 MiB\nbaidunetdisk-bin: 494.7 MiB\ncom.antutu.benchmark: 412.0 MiB\nwine: 402.2 MiB\nlinux-xanmod-cacule-uksm-cjktty: 324.4 MiB\nmicrosoft-edge-dev-bin: 316.4 MiB\nwine-mono: 316.2 MiB\ndeepin-wine5-i386: 259.5 MiB\n===========================================\n:: Querying AUR...\n -> Missing AUR Packages:  zhullyb-archlinux-git    #AUR里找不到的包\n -> Flagged Out Of Date AUR Packages:  xml2\t\t    #AUR中被人标注过期的包\n```\n\n##### `-u(--upgrades)`\n\n展示你所有待更新的包。\n\n##### `-w(--news)`\n\n展示来自archlinux.org的新闻。需要注意的是，这里的新闻是具有时效性的，只有在你的Arch最后一次更新以后发出来的新闻才会被显示出来。如果你不想要yay判断新闻时效性，你可以通过`yay -Pww`（即两个`w`）来获取所有能获得的新闻。\n\n##### `-q(--quiet)`\n\n在输出新闻的时候，仅输出新闻的标题。该功能需要与`-w`连用，即`yay -Pwq`。\n\n#### `-G(--getpkgbuild)`\n\n后跟包名。需要注意的是，如果指定的包不存在于官方源，则无法输出，后跟`-f、-p`参数。\n\n*如果希望仅获取来自AUR（即排除第三方源的干扰）的PKGBUILD，后需跟`-a`参数。*\n\n##### `-f(--force)`\n\n强制下载AUR中的PKGBUILD，如果它在yay缓存目录已经存在了，那就覆盖它！\n\n##### `-p(--print)`\n\nPrint指定包的PKGBUILD。\n\n### pacman 拓展用法\n\nyay虽然可以使用pacman的所有\\\u003Coperation>，但是它远不仅于此。在这一段，我将向你介绍yay中包含的那些pacman不包括的pacman \\\u003Coperation\n\n#### `-S`\n\n##### `-S, -Si, -Sl, -Ss, -Su, -Sc, -Qu`\n\n这些操作pacman都支持，而与pacman不同的是，yay的这些操作可以涵盖到**官方源/第三方源和AUR**中的所有包。\n\n#### `-Sc`\n\nyay将会清除AUR包构建时的缓存和没有被track的文件。没有被track的文件在这里指AUR包构建时下载的sources或者构建完成的pkg包，但是vcs sources会被保留（比如.`git`文件夹）\n\n#### 全局的[options]\n\n全局是指在所有\\\u003Coperation>下都可以加啦。\n\n##### `--repo`\n\n假定你给出的包名只存在源里（忽视AUR的存在）\n\n##### `-a(--aur)`\n\n假定你给出的包名只存在AUR中（忽视源的存在）\n\n## 配置设置\n\n原版的man手册排的比较混乱，我这里自己细分了几个类型，或许不是特别专业，但我希望能够帮助你们理解。\n\n### 自定义调用命令型\n\n##### `--editor \u003Ccommand>`\n\n设置编辑时调用的编辑器。\n\n##### `--makepkg \u003Ccommand>`\n\n设置makepkg时需要调用makepkg命令（一般情况下用不到）\n\n##### `--pacman \u003Ccommand>`\n\n设置运行pacman时需要调用pacman命令（一般情况下用不到）\n\n##### `--tar \u003Ccommand>`\n\n设置makepkg解压tar资源时调用的tar命令（一般情况下用不到）\n\n##### `--git \u003Ccommand>`\n\n设置makepkg clone git资源时调用的git命令（比如你可以安装AUR中的fgit-go，使用`--git fgit`参数来让fastgit代理clone的过程）\n\n##### `--gpg \u003Ccommand>`\n\n设置gpg验证资源时调用的gpg命令\n\n##### `--sudo \u003Ccommand>`\n\n设置调用sudo获取su权限安装pkg时所调用的sudo命令。\n\n### 自定义配置文件型\n\n##### `--config \u003Cfile>`\n\n设置读取的pacman配置文件。\n\n##### `--makepkgconf \u003Cfile>`\n\n设置读取的makepkg配置文件。\n\n##### `--nomakepkgconf`\n\n不读取系统中的makepkg.conf，仅使用Arch默认状态下的配置文件。\n\n### 自定义路径类型\n\n##### `--builddir \u003Cdir>`\n\n设置build路径，默认路径为`~/.cache/yay/`\n\n##### `--absdir \u003Cdir>`\n\n 设置abs路径，默认路径为`~/.cache/yay/abs/`\n\n### 参数传递型\n\n##### `--editorflags \u003Cflags>`\n\n后跟需要跟随传递给编辑器的参数。如果需要传递多个参数，可以使用引号。\n\n##### `--mflags \u003Cflags>`\n\n后跟需要跟随传递给makepkg的参数。如果需要传递多个参数，可以使用引号。\n\n这个用的人不多，但其实是非常好用的一个功能。在我们安装`deepin-wine-tim`等包的时候，很可能会遇到文件明明完整但checksum不通过的情况，这时我们可以跟一个`--skipchecksums`参数传递给makepkg以跳过checksum的过程。\n\n##### `--gpgflags \u003Cflags>`\n\n后跟需要跟随传递给pgp的参数。如果需要传递多个参数，可以使用引号。\n\n##### `--sudoflags \u003Cflags>`\n\n后跟需要跟随传递给sudo的参数。如果需要传递多个参数，可以使用引号。\n\n### 菜单配置型\n\n#### clean菜单\n\n##### *`--cleanmenu`\n\n启用清除询问菜单。（询问你是否需要清除已存在的文件）\n\n##### `--nocleanmenu`\n\n禁用清除询问菜单。（不询问你是否需要清除已存在的文件）\n\n##### `--answerclean`\n\n 自动回答cleanmenu，后跟`\u003CAll|None|Installed|NotInstalled>`参数。\n\n##### *`--noanswerclean`\n\n不设置自动回答。\n\n#### diff菜单\n\n##### *`--diffmenu`\n\n启用对比询问菜单。（询问你是否需要对比本地文件和AUR文件）\n\n##### `--nodiffmenu`\n\n禁用对比询问菜单。（不询问你是否需要对比本地文件和AUR文件）\n\n##### `--answerdiff`\n\n自动回答cleanmenu，后跟`\u003CAll|None|Installed|NotInstalled>`参数。\n\n##### *`--noanswerdiff`\n\n不设置自动回答。\n\n#### edit菜单\n\n##### `--editmenu`\n\n启用修改询问菜单。（询问你是否需要修改PKGBUILD以及相关文件）\n\n##### *`--noeditmenu`\n\n禁用修改询问菜单。（不询问你是否需要修改PKGBUILD以及相关文件）\n\n##### `--answeredit`\n\n自动回答editmenu，后跟`\u003CAll|None|Installed|NotInstalled>`参数。\n\n##### *`--noansweredit`\n\n不设置自动回答。\n\n#### upgrade菜单\n\n##### *`--upgrademenu`\n\n启用更新询问菜单。（询问你是否需要更新AUR包）\n\n##### `--noupgrademenu`\n\n禁用更新询问菜单。（不询问你是否需要更新AUR包）\n\n##### `--answerupgrade`\n\n自动回答upgrademenu，后跟`\u003CAll|None|Installed|NotInstalled>`参数。\n\n##### *`--noanswerupgrade`\n\n不设置自动回答。\n\n#### removemake菜单\n\n##### *`--askremovemake`\n\n在编译结束后，询问是否删除make depend。\n\n##### `--removemake`\n\n在编译结束后，删除make depend。\n\n##### `--noremovemake`\n\n在编译结束后，不删除make depend。\n\n#### provides菜单\n\n##### *`--provides`\n\n搜索AUR包时，一同寻找其在AUR上的依赖程序。 当找到多个提供该依赖的包时，将出现一个菜单，提示您选择一个。尽管这不会引起注意，但这会增加依赖项解决时间。\n\n##### `--noprovides`\n\n搜索AUR包时，不在AUR上寻找其依赖程序。尽管yay不会再次弹出依赖菜单供你选择，yay调用pacman时依然会出现pacman的选择菜单让你选择。\n\n#### pgpfetch菜单\n\n##### *`--pgpfetch`\n\n询问你是否从每个PKGBUILD的validpgpkeys字段导入未知的PGP密钥。\n\n##### `--nopgpfetch`\n\n不自动导入陌生的PGP密钥。\n\n#### useask选项\n\n##### *`--useask`\n\n调用pacman的--ask询问用户是否删除系统中与当前包冲突的软件包。\n\n##### `--nouseask`\n\n不调用pacman的--ask询问用户是否删除系统中与当前包冲突的软件包，遇到冲突的软件包时直接报错，由用户来手动解决。\n\n#### combinedupgrade菜单\n\n##### `--combinedupgrade`\n\n在系统更新期间，将源内包和AUR包的更新菜单合并到一起。\n\n##### *`--nocombinedupgrade`\n\n在系统更新期间，先支持源内包的升级，完成后再进行AUR包的升级。\n\n### T or F 型\n\n#### devel\n\n##### `--devel`\n\n在系统更新期间，检查AUR的vcs包是否有更新，当前仅支持AUR的-git包。 devel查询是使用`git ls-remote`对比安装时和现在最新的commit_id完成的。\n\n##### *`--nodevel`\n\n在系统更新期间， 不检查AUR的vcs包是否有更新。\n\n#### timeupdate\n\n##### `--timeupdate`\n\n在系统更新期间，将已安装软件包的构建时间与每个软件包的AUR的最后修改时间进行比较。\n\n##### *`--notimeupdate`\n\n在系统更新期间，不将已安装软件包的构建时间与每个软件包的AUR的最后修改时间进行比较。\n\n#### redownload\n\n##### `--redownload`\n\n就算PKGBUILD已经存在，也要重新从AUR上获取一份新的PKGBUILD并覆盖原有PKGBUILD。\n\n##### `--redownloadall`\n\n就算PKGBUILD已经存在，也要重新从AUR上获取所有AUR包的PKGBUILD并覆盖原有PKGBUILD。\n\n##### *`--noredownload`\n\n当下载PKGBUILD时，，如果发现cache中的PKGBUILD版本＞＝AUR上的版本时，直接使用本地的PKGBUILD。\n\n#### rebuild\n\n##### `--rebuild`\n\n即使在cache中有可用的二进制包的情况下，也始终要重新编译目标软件包。\n\n##### `--rebuildall`\n\n即使在cache中有可用的二进制包的情况下，也始终要重新编译所有的AUR包。\n\n##### `--rebuildtree`\n\n安装AUR包时，以递归方式重新编译并重新安装其所有AUR依赖包，即使已安装的依赖项也是如此。 该选项使您可以轻松地针对当前系统的库重新构建软件包，如果它们变得不兼容。（比如python3.8->3.9）\n\n##### *`--norebuild`\n\n构建软件包时，如果在缓存中找到该软件包并且该软件包与想要的软件包的版本相同，则跳过软件包的编译过程并使用现有的二进制程序。\n\n#### sudoloop\n\n##### `--sudoloop`\n\n在后台循环调用sudo，以防止sudo授权在长时间构建期间超时。\n\n##### *`--nosudoloop`\n\n不在后台循环调用sudo，可能会导致sudo授权在长时间构建期间超时。\n\n#### batchinstall\n\n##### `--batchinstall`\n\n在构建和安装AUR包时，对每个软件包的安装进行排序，而并非在构建之后立刻安装每个软件包时。 需要注意的是，一旦构建了所有软件包，或者需要构建队列中的软件包作为构建另一个软件包的依赖项，应当在安装队列中安装所有软件包。\n\n##### *`--nobatchinstall`\n\n在构建AUR包成功后立即安装。\n\n#### clearafter\n\n##### `--cleanafter`\n\n在构建AUR包完成以后清除cache文件。\n\n##### *`--nocleanafter`\n\n在构建AUR包完成以后不清除cache文件。\n\n### 其他型\n\n##### `--save`\n\n把你这一次执行yay后面跟的配置参数永久保存下来。\n\n##### `--aururl`\n\n更改aur源地址（默认为 https://aur.archlinux.org ），~~适用于中国用户，可以使用此参数将AUR的地址设置成清华的反代，具体的配置命令为~~\n\n```bash\nyay --aururl \"https://aur.tuna.tsinghua.edu.cn\" --save\n```\n\nTUNA 的反代已经取消，可以使用如下命令设置回 AUR 官方源\n\n```bash\nyay --aururl \"https://aur.archlinux.org\" --save\n```\n\n##### `--sortby`\n\n在搜索过程中，按特定条件对AUR结果进行排序，后跟`\u003Cvotes|popularity|id|baseid|name|base|submitted|modified`参数，默认为`votes`。\n\n##### `--searchby`\n\n通过指定查询类型来搜索AUR软件包，后跟`\u003Cname|name-desc|maintainer|depends|checkdepends|makedepends|optdepends`参数，默认为`name-desc`。\n\n##### *`--topdown`\n\n优先展示源内包，其次才是AUR包\n\n##### `--bottomup`\n\n优先展示AUR包，其次才是源内包\n\n##### `--requestsplitn \u003Cnumber>`\n\n设置在每次向AUR的请求的最大数值（默认150）。数值越高，请求时间越短，但是单次请求的数值过大会导致error。当这个数值＞500时你应当特别注意这一点。\n\n##### `--completioninterval \u003Cdays>`\n\n刷新完成高速缓存的时间（以天为单位,默认为7）。 将此值设置为0将导致每次刷新缓存，而将其设置为-1将导致永远不刷新缓存。\n\n## 我个人的常用命令\n\n```\nyay\nyay foo\nyay -Sa foo\nyay -Scc\nyay -Ps\nyay -Pww\nyay -Gpa\nyay -Ga\n```\n\n\n\n*本文同时发布于「[知乎专栏](https://zhuanlan.zhihu.com/p/363666022)」，如果你恰好有知乎帐号的话或许可以考虑帮我点个赞？*\n\n",{"title":5,"description":103},"posts/yay-more",false,[1255],"Archlinux","2WuZp62NXqERzOuw0OzyR5KbolRCRIbkVHITaXCVceI",[1258,1263],{"title":1259,"path":1260,"stem":1261,"date":1262,"children":-1},"使用Motrix接管Firefox的下载","/2021/04/11/use-motrix-install-of-firefox-to-download","posts/use-motrix-install-of-firefox-to-download","2021-04-11",{"title":1264,"path":1265,"stem":1266,"date":1267,"children":-1},"抛弃DisplayManager，拥抱startx","/2021/03/14/lets-fuck-dm-and-use-startx","posts/lets-fuck-dm-and-use-startx","2021-03-14",1761699275887]